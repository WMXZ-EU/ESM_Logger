
bin\ESM_Logger.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
0001459c l    d  .fini	00000000 .fini
000145a0 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0730 l    d  .data	00000000 .data
1fff12f8 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
000099c0 l     F .text	0000000c startup_default_early_hook
000099cc l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff12f8 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff12fc l       .bss	00000000 object.8610
00014594 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 I2S.c
1fff1318 l     O .bss	0000000c m_i2s_rxContext
00000000 l    df *ABS*	00000000 dma.c
1fff1328 l     O .bss	00000002 dma_channel_allocated_mask
1fff132c l     O .bss	00000200 DMAS
00000000 l    df *ABS*	00000000 hibernate.c
00000d84 l     F .text	0000001c llwuISR
00000000 l    df *ABS*	00000000 myAPP.cpp
000019c8 l     F .text	000001a0 printAll()
00002afc l     F .text	000000a8 _GLOBAL__sub_I_parameters
1fff247c l     O .bss	00000004 blink(unsigned long)::to
1fff2482 l     O .bss	00000002 i2sInProcessing::is_I2S
20020154 l     O .bss	00000002 uSD_IF::save(int)::isLogging
00000000 l    df *ABS*	00000000 ICS43432.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
00002c68 l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 WireKinetis.cpp
2002035c l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00004fc8 l     F .text	000000a0 FatFile::sync() [clone .part.39]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00007e30 l     F .text	00000030 m_sdhc_isr()
00007e60 l     F .text	0000000c isBusyDMA()
00007f88 l     F .text	000000c8 cardCommand(unsigned long, unsigned long)
00008050 l     F .text	0000002c isBusyCMD13()
0000809c l     F .text	00000120 cardCMD6(unsigned long, unsigned char*)
000082b4 l     F .text	00000150 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
000086fc l     F .text	00000100 transferStop()
20020368 l     O .bss	00000010 m_cid
20020378 l     O .bss	00000001 m_version2
20020379 l     O .bss	00000001 m_highCapacity
2002037c l     O .bss	00000004 m_ocr
20020380 l     O .bss	00000004 m_errorLine
20020384 l     O .bss	00000004 m_irqstat
20020388 l     O .bss	00000004 m_rca
1fff088c l     O .data	00000001 m_errorCode
2002038c l     O .bss	00000001 m_initDone
20020390 l     O .bss	00000010 m_csd
200203a0 l     O .bss	00000001 m_dmaBusy
200203a4 l     O .bss	00000004 m_busyFcn
200203a8 l     O .bss	00000004 m_sdClkKhz
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
200203ad l     O .bss	00000001 tx_noautoflush
200203b0 l     O .bss	00000004 tx_packet
200203b4 l     O .bss	00000001 transmit_previous_timeout
200203b8 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 pins_teensy.c
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0894 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
200203c4 l     O .bss	00000004 ep0_tx_ptr
200203c8 l     O .bss	00000010 rx_last
200203d8 l     O .bss	00000002 ep0_tx_len
200203dc l     O .bss	00000040 ep0_rx0_buf
2002041c l     O .bss	00000010 rx_first
2002042c l     O .bss	00000001 ep0_tx_data_toggle
20020430 l     O .bss	00000040 ep0_rx1_buf
20020470 l     O .bss	00000010 tx_first
1fff0000 l     O .usbdescriptortable	000000a0 table
20020480 l     O .bss	00000010 tx_last
20020490 l     O .bss	00000008 setup
20020498 l     O .bss	00000001 ep0_tx_bdt_bank
2002049c l     O .bss	00000008 reply_buffer
200204a8 l     O .bss	00000004 tx_state
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 analog.c
200204cc l     O .bss	00000001 calibrating
1fff08a8 l     O .data	00000001 analog_config_bits
200204cd l     O .bss	00000001 analog_reference_internal
1fff08a9 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 usb_desc.c
1fff08ac l     O .data	00000012 device_descriptor
1fff08d8 l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_atexit.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0000c514 l     F .text	00000018 __get_current_locale
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtod.c
0000d3fc l     F .text	00000038 sulp
00014180 l     O .text	00000014 fpi.6173
000141a4 l     O .text	00000014 fpinan.6209
000141b8 l     O .text	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000e330 l     F .text	00000136 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
000141e0 l     O .text	00000010 zeroes.7258
00014234 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfscanf.c
00014244 l     O .text	00000022 basefix.7328
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00010b4c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00010b6c l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00011d60 l     F .text	000000a8 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mprec.c
00014578 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strtoll.c
00012f68 l     F .text	000001ac _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
00013138 l     F .text	00000168 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
000132c4 l     F .text	000001ec _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfscanf.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
1fff0950 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/walter/documents/arduino-1.8.8/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/walter/documents/arduino-1.8.8/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff12f8 l       .bss	00000000 __bss_start__
20020544 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00000fbc  w    F .text	0000001c c_mFS::~c_mFS()
000099b8  w    F .text	00000006 adc0_isr
0000bd00 g     F .text	0000002c .hidden __aeabi_dcmpun
00009674 g     F .text	0000001c usb_serial_available
00012e88 g     F .text	0000005e __any_on
0000bcc4 g     F .text	00000012 .hidden __aeabi_dcmple
0000914c g     F .text	00000124 SdioCard::writeStart(unsigned long, unsigned long)
0000bc00 g     F .text	0000007a .hidden __cmpdf2
00000cd8 g     F .text	0000000c DMA_enable
00008404 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
00001724 g     F .text	00000002 yield
000057fc g     F .text	00000220 FatFile::write(void const*, unsigned int)
0000bc00 g     F .text	0000007a .hidden __eqdf2
00006e30  w    F .text	00000002 SdSpiCard::~SdSpiCard()
1fff08c0 g     O .data	00000018 usb_string_manufacturer_name_default
00005784 g     F .text	00000076 FatFile::truncate()
1fff0820 g     O .data	0000006c Wire1
20020504 g     O .bss	00000004 m_i2s_tx_buffer
0000b770 g     F .text	0000005a .hidden __floatdidf
00009970  w    F .text	00000048 hard_fault_isr
000099b8  w    F .text	00000006 dma_ch6_isr
20020364 g     O .bss	00000004 FsDateTime::callback
0000b010 g     F .text	00000020 Print::println()
000099b8  w    F .text	00000006 uart0_lon_isr
00003748 g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
00009f38 g     F .text	000000c8 usb_rx_memory
00006e24  w    F .text	00000004 SdSpiCard::errorCode() const
000099b8  w    F .text	00000006 dma_ch8_isr
00001b68 g     F .text	0000031c doMenu()
0000ccec g     F .text	00000002 __malloc_unlock
20020360 g     O .bss	00000004 FsVolume::m_cwv
0000945c g     F .text	00000016 SdSpiAltDriver::send(unsigned char)
00005228 g     F .text	00000106 FatFile::open(FatFile*, char const*, unsigned char)
0000b250 g     F .text	000000e0 analog_init
0000a000 g     F .text	00000084 usb_tx
0000e310 g     F .text	00000020 _strtod_r
000099b8  w    F .text	00000006 portcd_isr
000109fc g     F .text	0000004a _vdprintf_r
20020508 g     O .bss	00000004 m_i2s_rx_nbyte
00013694 g     F .text	00000082 _sfread_r
0000cb84 g     F .text	000000c6 memmove
0000acf0 g     F .text	0000020c MillisTimer::runFromTimer()
1fff174c g     O .bss	00000800 i2s_rx_buffer
0000c550 g     F .text	00000014 __locale_ctype_ptr
00001728 g     F .text	00000144 check_hibernate(parameters_s*, int)
00012600 g     F .text	0000004c _Balloc
000099b8  w    F .text	00000006 can1_rx_warn_isr
000145a8 g       .ARM.exidx	00000000 __exidx_end
000099b8  w    F .text	00000006 dma_error_isr
00006264 g     F .text	000002b8 FatPartition::freeChain(unsigned long)
00007000 g     F .text	000000a8 SdSpiCard::cardCommand(unsigned char, unsigned long)
00002f14 g     F .text	00000138 i2c0_isr
000032e4 g     F .text	000000a2 FsFile::open(FsVolume*, char const*, unsigned char)
00000ff0  w    F .text	00000014 FsFile::flush()
0000af34 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000bbf0 g     F .text	0000008a .hidden __gtdf2
1fff152c g     O .bss	00000002 FS_started
0000c4b8 g     F .text	0000000c __errno
00000cf0 g     F .text	00000010 DMA_haltAll
000099b8  w    F .text	00000006 portd_isr
00003c0c g     F .text	00000100 ExFatFile::open(ExFatFile*, char const*, unsigned char)
000099b8  w    F .text	00000006 enet_error_isr
00002c24 g     F .text	00000012 c_ICS43432::start()
00013de4 g     O .text	00000020 TwoWire::i2c2_hardware
200204ac g     O .bss	00000004 EventResponder::firstInterrupt
000124e4 g     F .text	00000004 __localeconv_l
00005330 g     F .text	0000000e FatFile::open(FatVolume*, char const*, unsigned char)
00006e34  w    F .text	0000000e SdSpiCard::~SdSpiCard()
000099b8  w    F .text	00000006 tpm1_isr
000046b8 g     F .text	000000a8 ExFatPartition::rootLength()
00001144  w    F .text	00000024 Print::println(__FlashStringHelper const*)
00000ac8 g     F .text	00000010 i2s_stopInput
2002015c g     O .bss	00000200 data1
00006e28  w    F .text	00000004 SdSpiCard::errorData() const
0000af24  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00013eec g     O .text	00000200 digital_pin_to_info_PGM
00005f58 g     F .text	0000030c FatPartition::allocContiguous(unsigned long, unsigned long*)
20020540 g     O .bss	00000004 errno
000070a8 g     F .text	0000007c SdSpiCard::readOCR(unsigned long*)
00004380 g     F .text	0000009c ExFatPartition::fatGet(unsigned long, unsigned long*)
0000d198 g     F .text	00000004 __seofread
000145a8 g       .ARM.exidx	00000000 _etext
00001ff8 g     F .text	000000cc readConfig(void*)
1fff12f8 g       .bss	00000000 _sbss
0000bc8c g     F .text	00000010 .hidden __aeabi_cdcmple
00007e78 g     F .text	0000000c SdioCard::errorData() const
000093d8 g     F .text	00000048 SdSpiAltDriver::deactivate()
0000be68 g     F .text	00000160 .hidden __aeabi_fadd
00009270 g     F .text	000000d8 SdioCard::writeSector(unsigned long, unsigned char const*)
0000be64 g     F .text	00000164 .hidden __subsf3
000099b8  w    F .text	00000006 porte_isr
00009420 g     F .text	0000001a SdSpiAltDriver::receive()
00002714 g     F .text	000003e8 loop
000099b8  w    F .text	00000006 portb_isr
000099b8  w    F .text	00000006 spi1_isr
000099b8  w    F .text	00000006 uart3_status_isr
00003488 g     F .text	000000bc ExFatFile::parsePathName(char const*, ExName_t*, char const**)
000099b8  w    F .text	00000006 mcm_isr
00008d84 g     F .text	000001b4 SdioCard::readData(unsigned char*)
00013874  w    O .text	00000014 vtable for Logger<long, 300, 128, 64>
0000048c g     F .text	000002a8 i2s_speedConfig
00001524 g     F .text	0000013c tm2seconds(tm*)
0000777c g     F .text	000000ac SdSpiCard::readData(unsigned char*, unsigned int)
200204b0 g     O .bss	00000004 EventResponder::lastInterrupt
0000c148 g     F .text	00000024 .hidden __aeabi_f2lz
000099b8  w    F .text	00000006 uart1_status_isr
000094c8 g     F .text	00000134 memcpy
000099b8  w    F .text	00000006 randnum_isr
00012348 g     F .text	00000180 __hexnan
0000bc7c g     F .text	00000020 .hidden __aeabi_cdrcmple
00000ccc g     F .text	0000000c DMA_interruptAtHalf
000044c0 g     F .text	000001f6 ExFatPartition::freeChain(unsigned long)
0000551c g     F .text	0000002a FatFile::peek()
0000e490 g     F .text	000016e4 _svfprintf_r
0000b700 g     F .text	00000022 .hidden __floatsidf
00001168 g     F .text	00000338 seconds2tm(unsigned long)
200203c0 g     O .bss	00000004 systick_millis_count
0000bbf8 g     F .text	00000082 .hidden __ltdf2
00009970  w    F .text	00000048 bus_fault_isr
000099b8  w    F .text	00000006 watchdog_isr
0000c118 g     F .text	00000000 .hidden __aeabi_uldivmod
0000304c g     F .text	00000138 i2c1_isr
0000047c g     F .text	00000010 i2s_init
200204a4 g     O .bss	00000001 usb_configuration
000099b8  w    F .text	00000006 dma_ch11_isr
00000f00  w    F .text	00000006 SdCardInterface::status()
00008800 g     F .text	00000014 SdioCard::syncDevice()
00008514 g     F .text	000001a4 SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
00002ba4 g     F .text	0000007e c_ICS43432::init(long, long*, unsigned long, unsigned short)
0000046c g     F .text	00000010 i2s_stopClock
00005548 g     F .text	00000040 FatFile::readDirCache(bool)
00012de0 g     F .text	00000060 __ratio
00003184 g     F .text	00000138 i2c2_isr
1fff08c0  w    O .data	00000018 usb_string_manufacturer_name
20020538 g     O .bss	00000008 usb_rx_byte_count_data
2002050c g     O .bss	00000004 m_i2s_dual
000099b8  w    F .text	00000006 pit1_isr
0000c564 g     F .text	00000010 malloc
00000948 g     F .text	0000004c m_i2s_rx_isr
000099b8  w    F .text	00000006 dma_ch4_isr
00013dc4 g     O .text	00000020 TwoWire::i2c1_hardware
0000b0ec g     F .text	00000084 software_isr
00013850  w    O .text	00000024 vtable for FsFile
000124c8 g     F .text	0000001c iswspace
000099b8  w    F .text	00000006 dma_ch7_isr
00002e74  w    F .text	0000001e TwoWire::read()
0000bfd0 g     F .text	0000001c .hidden __aeabi_i2f
00002c4c  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00014488 g     O .text	000000c8 __mprec_tens
0000ab38 g     F .text	000000f4 usb_init
00000d78 g     F .text	0000000c DMA_clearInterrupt
00006e2c  w    F .text	00000004 SdSpiCard::type() const
1fff2480 g     O .bss	00000001 ICS43432
0000bd7c g     F .text	00000040 .hidden __fixunsdfsi
000099b8  w    F .text	00000006 lptmr_isr
200204d8 g     O .bss	00000004 __malloc_top_pad
00009a0c g     F .text	00000024 rtc_set
00013658 g     F .text	0000003a __ssrefill_r
00007608 g     F .text	00000174 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00004c24 g     F .text	0000011e ExFatFile::truncate()
1fff0730 g     O .data	00000000 .hidden __dso_handle
0000b6e0 g     F .text	0000001e .hidden __aeabi_ui2d
000124e8 g     F .text	0000001c _localeconv_r
000134b0 g     F .text	00000024 _strtoull_r
000099fc g     F .text	00000010 attachInterruptVector
00012814 g     F .text	00000012 __i2b
1fff0730 g       .data	00000000 _sdata
00013da4 g     O .text	00000020 TwoWire::i2c0_hardware
00005aac g     F .text	00000054 FatCache::sync()
0000c1b8 g     F .text	000002e2 .hidden __udivmoddi4
0000b45c g     F .text	00000000 .hidden __aeabi_drsub
0000d0d0 g     F .text	00000024 _sbrk_r
000010c8  w    F .text	00000060 Logger<long, 300, 128, 64>::write(void*)
00007efc g     F .text	00000020 SdioCard::type() const
00000ce4 g     F .text	0000000c DMA_disable
000001d0 g     F .text	000001f0 ResetHandler
000095fc g     F .text	00000048 usb_serial_getchar
000099b8  w    F .text	00000006 can1_bus_off_isr
000099b8  w    F .text	00000006 ftm2_isr
2002052c g     O .bss	00000008 usb_cdc_line_coding
00009ca4 g     F .text	00000048 digitalWrite
200204b8 g     O .bss	00000004 EventResponder::lastYield
000099b8  w    F .text	00000006 uart5_status_isr
000099b8  w    F .text	00000006 lpuart0_status_isr
00003544 g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
00014118 g     O .text	00000004 usb_endpoint_config_table
000099b8  w    F .text	00000006 dma_ch9_isr
00001128  w    F .text	0000001c Print::write(char const*)
000099b8  w    F .text	00000006 pit2_isr
0000bcb0 g     F .text	00000012 .hidden __aeabi_dcmplt
200204d4 g     O .bss	00000004 __malloc_max_sbrked_mem
00009cec g     F .text	00000078 pinMode
00006ea4 g     F .text	00000090 SdSpiCard::writeStop()
00009e84 g     F .text	0000004c usb_free
000099b8  w    F .text	00000006 i2c3_isr
0000b724 g     F .text	0000003a .hidden __extendsfdf2
0000fb74 g     F .text	00000e88 __ssvfscanf_r
0000ba20 g     F .text	000001d0 .hidden __aeabi_ddiv
0000b468 g     F .text	00000276 .hidden __adddf3
1fff0748 g     O .data	0000006c Wire2
00006f34 g     F .text	000000cc SdSpiCard::writeData(unsigned char const*)
00012c54 g     F .text	000000d0 __b2d
00001f1c  w    F .text	00000028 SdBase<FsVolume>::errorHalt(char const*)
000145a0 g       .ARM.exidx	00000000 __exidx_start
1fff1314 g     O .bss	00000004 DMA_RX
0000b7cc g     F .text	00000254 .hidden __aeabi_dmul
00007124 g     F .text	00000064 SdSpiCard::writeStart(unsigned long)
000099b8  w    F .text	00000006 pit0_isr
200204bc g     O .bss	00000004 EventResponder::firstYield
00014170 g     O .text	00000004 _global_impure_ptr
000099b8  w    F .text	00000006 can1_error_isr
0000ccf0 g     F .text	000003de _realloc_r
0000c4c4 g     F .text	00000050 __libc_init_array
20020544 g       .bss	00000000 __bss_end
00002e68  w    F .text	0000000c TwoWire::available()
000099b8  w    F .text	00000006 can0_wakeup_isr
00003d0c g     F .text	00000010 ExFatFile::open(ExFatVolume*, char const*, int)
00007e84 g     F .text	0000001c SdioCard::readCID(CID*)
00014384 g     O .text	00000100 __hexdig
00004ae8 g     F .text	0000013c ExFatFile::addDirCluster()
000099b8  w    F .text	00000006 flash_cmd_isr
1fff1f50 g     O .bss	00000508 mFS
00014550 g     O .text	00000028 __mprec_bigtens
000126e0 g     F .text	00000098 __s2b
0000af0c  w    F .text	00000004 usb_serial_class::clear()
0000b6e0 g     F .text	0000001e .hidden __floatunsidf
000099b8  w    F .text	00000006 uart2_status_isr
000099d0 g     F .text	0000002c _sbrk
00012aa8 g     F .text	00000042 __mcmp
200204c0 g     O .bss	00000004 MillisTimer::listWaiting
1fff0890 g     O .data	00000004 __brkval
200203bc g     O .bss	00000001 usb_cdc_line_rtsdtr
00000d10 g     F .text	00000006 DMA_destinationAddress
00009928 g     F .text	00000048 usb_serial_flush_callback
00014584 g     F .text	00000000 _init
00001004  w    F .text	00000058 FsFile::available()
000099b8  w    F .text	00000006 svcall_isr
20020510 g     O .bss	00000004 m_i2s_tx_nbyte
20020514 g     O .bss	00000004 m_i2s_nbits
000099b8  w    F .text	00000006 dma_ch15_isr
00000da0 g     F .text	0000015c hibernate
0000bdbc g     F .text	0000009e .hidden __aeabi_d2f
000020c4 g     F .text	000000d8 storeConfig(void*)
1fff1744 g     O .bss	00000006 mac
0000be64 g     F .text	00000164 .hidden __aeabi_fsub
00013e04 g     O .text	00000024 vtable for TwoWire
000099b8  w    F .text	00000006 uart1_error_isr
00011acc g     F .text	00000028 __libc_fini_array
0000d438 g     F .text	00000ed8 _strtod_l
00012318 g     F .text	00000030 __match
000099b8  w    F .text	00000006 usbhs_phy_isr
20020544 g       .bss	00000000 _ebss
1fff1324 g     O .bss	00000004 rxCount
00008f38 g     F .text	00000128 SdioCard::readStart(unsigned long, unsigned long)
0000848c g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000051d8 g     F .text	00000050 FatFile::preAllocate(unsigned long)
00005a1c g     F .text	00000090 FatCache::read(unsigned long, unsigned char)
00012778 g     F .text	00000040 __hi0bits
0000bd2c g     F .text	0000004e .hidden __fixdfsi
000099b8 g     F .text	00000006 unused_isr
000099b8  w    F .text	00000006 spi0_isr
0000bffc g     F .text	0000007c .hidden __floatdisf
000099b8  w    F .text	00000006 dma_ch3_isr
1fff245c g     O .bss	00000020 text
0000b24c g     F .text	00000004 operator delete(void*, unsigned int)
000099b8  w    F .text	00000006 flash_error_isr
0000b468 g     F .text	00000276 .hidden __aeabi_dadd
0000bbf8 g     F .text	00000082 .hidden __ledf2
000099b8  w    F .text	00000006 uart5_error_isr
0000c16c g     F .text	0000004c .hidden __aeabi_f2ulz
000099b8  w    F .text	00000006 rtc_seconds_isr
000099b8  w    F .text	00000006 pdb_isr
00012958 g     F .text	000000a0 __pow5mult
0000b760 g     F .text	0000006a .hidden __aeabi_ul2d
00009970  w    F .text	00000048 usage_fault_isr
000099b8  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00005dac g     F .text	000001aa FatPartition::allocateCluster(unsigned long, unsigned long*)
000099b8  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
20020534 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000aefc g     F .text	00000010 systick_isr
000099b8  w    F .text	00000006 rtc_alarm_isr
00003dd8 g     F .text	00000230 ExFatPartition::init(SdCardInterface*, unsigned char)
000074ec g     F .text	0000011c SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
200204c4 g     O .bss	00000004 AudioStream::first_update
000099b8  w    F .text	00000006 dma_ch2_isr
1fff0898 g     O .data	00000010 Serial
000099b8  w    F .text	00000006 ftm1_isr
0000af2c  w    F .text	00000006 usb_serial_class::write(unsigned char)
000099c0  w    F .text	0000000c startup_early_hook
000099b8  w    F .text	00000006 dma_ch13_isr
000047f4 g     F .text	0000008c ExFatFile::addCluster()
000099b8  w    F .text	00000006 uart2_error_isr
00009644 g     F .text	00000030 usb_serial_peekchar
0000bcec g     F .text	00000012 .hidden __aeabi_dcmpgt
00000bec g     F .text	00000030 DMA_source
00012560 g     F .text	00000000 memchr
00005c5c g     F .text	0000014e FatPartition::fatPut(unsigned long, unsigned long)
1fff0938 g     O .data	00000016 usb_string_serial_number_default
00009970 g     F .text	00000048 fault_isr
00011b90 g     F .text	000001d0 _free_r
000087fc g     F .text	00000004 SdioCard::readStop()
00003d28 g     F .text	00000082 FsCache::get(unsigned long, unsigned char)
0000c52c g     F .text	0000001c __locale_mb_cur_max
0000bcd8 g     F .text	00000012 .hidden __aeabi_dcmpge
000099b8  w    F .text	00000006 usb_charge_isr
0000af1c  w    F .text	00000004 usb_serial_class::flush()
000135d4 g     F .text	00000082 _sungetc_r
000099b8  w    F .text	00000006 cmt_isr
0000b464 g     F .text	0000027a .hidden __aeabi_dsub
000099b8  w    F .text	00000006 usbhs_isr
1fff12f4 g     O .data	00000004 __malloc_sbrk_base
0000af14  w    F .text	00000004 usb_serial_class::read()
000099b8  w    F .text	00000006 ftm3_isr
00013114 g     F .text	00000024 _strtoll_r
000099b8  w    F .text	00000006 tsi0_isr
0000105c  w    F .text	00000038 FsFile::read()
0000b760 g     F .text	0000006a .hidden __floatundidf
000129f8 g     F .text	000000ae __lshift
000099b8  w    F .text	00000006 spi2_isr
0000479c g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
0000bfd0 g     F .text	0000001c .hidden __floatsisf
000134d4 g     F .text	00000100 __ssprint_r
00013790 g     F .text	0000005e _vasnprintf_r
2002042d g     O .bss	00000001 usb_reboot_timer
00010aa8 g     F .text	000000a4 __register_exitproc
0000d35c g     F .text	000000a0 strncmp
00009690 g     F .text	00000038 usb_serial_flush_input
1fff2484 g     O .bss	0002dcd0 logger
00012828 g     F .text	00000130 __multiply
00009870 g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
1fff1f4c g     O .bss	00000002 parMods
200204dc g     O .bss	00000028 __malloc_current_mallinfo
00012d24 g     F .text	000000ba __d2b
00000fbc  w    F .text	0000001c c_mFS::~c_mFS()
000099b8  w    F .text	00000006 can0_bus_off_isr
00002c48 g     F .text	00000004 c_ICS43432::exit()
00007eec  w    F .text	0000000e SdioCard::~SdioCard()
20020499 g     O .bss	00000001 usb_rx_memory_needed
00007ecc g     F .text	0000001c SdioCard::writeStart(unsigned long)
000132a0 g     F .text	00000024 _strtoul_r
00000d00 g     F .text	00000010 DMA_startAll
0000a084 g     F .text	00000ab2 usb_isr
0000c4ac g     F .text	0000000c __cxa_atexit
0000356c g     F .text	000001aa ExFatFile::read(void*, unsigned int)
000069c4 g     F .text	00000460 FatFile::open(FatFile*, fname_t*, unsigned char)
0000b700 g     F .text	00000022 .hidden __aeabi_i2d
0000c148 g     F .text	00000024 .hidden __fixsfdi
00003dac g     F .text	0000002a FsCache::sync()
0000b244 g     F .text	00000006 Stream::parseInt()
0000cb20 g     F .text	00000062 memcmp
000140ec  w    O .text	00000028 vtable for usb_serial_class
000099b8  w    F .text	00000006 uart3_error_isr
00003388 g     F .text	000000e8 FsVolume::begin(SdCardInterface*)
0000bfec g     F .text	0000008c .hidden __floatundisf
0000d140 g     F .text	00000058 sscanf
200204b4 g     O .bss	00000004 MillisTimer::listActive
0000c49c  w    F .text	00000002 .hidden __aeabi_ldiv0
000099b8  w    F .text	00000006 porta_isr
1fff173c g     O .bss	00000004 haveAcq
0000ba20 g     F .text	000001d0 .hidden __divdf3
00000d34 g     F .text	00000044 DMA_attachInterrupt
1fff1734 g     O .bss	00000004 i2sProcCount
00001f44 g     F .text	000000b4 logLightSensor()
00012e40 g     F .text	00000046 __copybits
1fff1740 g     O .bss	00000004 i2sWriteErrorCount
1fff03d0 g     O .usbbuffers	00000360 usb_buffer_memory
00007ae0 g     F .text	000001dc SdSpiCard::sectorCount()
000099b8  w    F .text	00000006 low_voltage_isr
1fff0ee8 g     O .data	00000408 __malloc_av_
0000bfc8 g     F .text	00000024 .hidden __aeabi_ui2f
000099b8  w    F .text	00000006 can0_error_isr
1fff0734 g     O .data	00000012 parameters
00009a30 g     F .text	00000274 _init_Teensyduino_internal_
0000b7cc g     F .text	00000254 .hidden __muldf3
000098d0 g     F .text	00000058 usb_serial_flush_output
000099b8  w    F .text	00000006 dma_ch12_isr
0000cce8 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00006678 g     F .text	00000244 FatFile::parsePathName(char const*, fname_t*, char const**)
000099b8  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
000137f0 g     F .text	0000005e _calloc_r
000099b8  w    F .text	00000006 pit3_isr
000099b8  w    F .text	00000006 enet_rx_isr
000049e8 g     F .text	0000005e ExFatFile::sync()
000086b8 g     F .text	00000044 SdioCard::isBusy()
0000186c g     F .text	0000015c encode_mac(char*)
000099b8  w    F .text	00000006 portc_isr
0000cc4c g     F .text	0000009a memset
0000b0dc g     F .text	00000010 main
00000f18  w    F .text	00000096 Logger<long, 300, 128, 64>::drain()
0000561c g     F .text	000000b0 FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)
00000fd8  w    F .text	00000018 FsFile::peek()
200204d0 g     O .bss	00000004 __malloc_max_total_mem
00004008 g     F .text	0000010a ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000bffc g     F .text	0000007c .hidden __aeabi_l2f
00004d44 g     F .text	00000284 ExFatFile::write(void const*, unsigned int)
00009970  w    F .text	00000048 memmanage_fault_isr
0000b330 g     F .text	000000e0 usb_init_serialnumber
00003848 g     F .text	000003c4 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)
0000e468 g     F .text	00000024 _strtol_r
0000bdbc g     F .text	0000009e .hidden __truncdfsf2
0001459c g       .text	00000000 __init_array_end
00010c98 g     F .text	00000e34 _dtoa_r
0000c584 g     F .text	00000570 _malloc_r
000099b8  w    F .text	00000006 debugmonitor_isr
00010a60 g     F .text	0000001a __ascii_wctomb
0000b770 g     F .text	0000005a .hidden __aeabi_l2d
00013718 g     F .text	00000078 __submore
00000ae8 g     F .text	00000024 i2s_enableInputDMA
0000ac2c g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00002e60 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
5dbeee74 g       *ABS*	00000000 __rtc_localtime
00009d64 g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
0000bfec g     F .text	0000008c .hidden __aeabi_ul2f
000099b8  w    F .text	00000006 cmp1_isr
0000c16c g     F .text	0000004c .hidden __fixunssfdi
000099b8  w    F .text	00000006 ftm0_isr
00004880 g     F .text	00000168 ExFatFile::syncDir()
1fff2458 g     O .bss	00000004 loopStatus
00011af4 g     F .text	0000009c _malloc_trim_r
1fff0934 g     O .data	00000004 string0
000096c8 g     F .text	000001a8 usb_serial_write
000099cc  w    F .text	00000002 startup_late_hook
00009348 g     F .text	00000090 SdSpiAltDriver::activate()
0000af18  w    F .text	00000004 usb_serial_class::available()
00002c38 g     F .text	0000000e c_ICS43432::stop()
000056cc g     F .text	000000b8 FatFile::sync()
1fff091c  w    O .data	00000016 usb_string_product_name
00000ad8 g     F .text	00000010 i2s_startInput
00009da8 g     F .text	0000009c delay
20020518 g     O .bss	00000004 m_i2s_rx_buffer
0000bc00 g     F .text	0000007a .hidden __nedf2
000099b8  w    F .text	00000006 tpm0_isr
0001459c g     F .fini	00000000 _fini
00002eec g     F .text	00000026 TwoWire::write(unsigned char)
0000b040 g     F .text	0000001c Print::printf(char const*, ...)
0000d0f4 g     F .text	0000004c sprintf
000099b8  w    F .text	00000006 i2s0_rx_isr
000099b8  w    F .text	00000006 uart4_error_isr
0000af60 g     F .text	000000b0 Print::print(long)
00005120 g     F .text	000000b8 FatFile::close()
00000b0c g     F .text	00000030 DMA_init
00005b00 g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
00010b60 g     F .text	0000000c atexit
00007ee8  w    F .text	00000002 SdioCard::~SdioCard()
00010a7c g     F .text	0000002c _write_r
000081bc g     F .text	000000f8 SdioCard::erase(unsigned long, unsigned long)
0000be5c g     F .text	0000016c .hidden __aeabi_frsub
000099b8  w    F .text	00000006 can0_message_isr
00012f5c g     F .text	0000000c nanf
1fff0d78 g     O .data	00000004 _impure_ptr
000099b8  w    F .text	00000006 can1_message_isr
00003718 g     F .text	0000002e ExFatFile::peek()
0000943c g     F .text	00000020 SdSpiAltDriver::receive(unsigned char*, unsigned int)
00012504 g     F .text	0000005c _mbrtowc_r
000099b8  w    F .text	00000006 nmi_isr
1fff07b4 g     O .data	0000006c Wire
00000cc0 g     F .text	0000000c DMA_interruptAtCompletion
000068bc g     F .text	00000108 FatFile::lfnUniqueSfn(fname_t*)
00001094  w    F .text	00000034 FsFile::write(unsigned char)
00001660 g     F .text	000000c4 i2sInProcessing
00007e6c g     F .text	0000000c SdioCard::errorCode() const
00014590 g       .text	00000000 __preinit_array_end
00006e30  w    F .text	00000002 SdSpiCard::~SdSpiCard()
000099b8  w    F .text	00000006 sdhc_isr
00004a48 g     F .text	000000a0 ExFatFile::preAllocate(unsigned long long)
00004204 g     F .text	000000aa ExFatPartition::dirCache(DirPos_t*, unsigned char)
00007cbc g     F .text	00000174 SdSpiCard::erase(unsigned long, unsigned long)
0000caf4 g     F .text	0000002a __ascii_mbtowc
1fff1730 g     O .bss	00000004 i2sBusyCount
1fff1738 g     O .bss	00000004 doHibernate
00006e44 g     F .text	00000060 SdSpiCard::isBusy()
00012c00 g     F .text	00000054 __ulp
00013e30 g     O .text	00000058 vtable for SdSpiCard
1fff1530 g     O .bss	00000200 header
000008e8 g     F .text	00000060 i2s_configurePorts
00007828  w    F .text	0000015c SdSpiCard::readCID(CID*)
00002e94  w    F .text	00000016 TwoWire::peek()
00002eac  w    F .text	00000002 TwoWire::flush()
000021a0 g     F .text	00000574 setup
0001411c g     O .text	00000054 usb_descriptor_list
00009ed0 g     F .text	0000003c usb_rx
0000807c g     F .text	00000020 SdioCard::status()
000099b8  w    F .text	00000006 dma_ch10_isr
00000f08 g     F .text	00000010 mySystick_isr()
00000c88 g     F .text	00000036 DMA_destinationBuffer_2ch
0000bd7c g     F .text	00000040 .hidden __aeabi_d2uiz
000099b8  w    F .text	00000006 uart0_error_isr
00009e44 g     F .text	00000040 usb_malloc
00005380 g     F .text	0000019a FatFile::read(void*, unsigned int)
000099b8  w    F .text	00000006 i2s0_isr
00005340 g     F .text	0000003e FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
00003470 g     F .text	00000004 operator new(unsigned int, unsigned long*)
00007984  w    F .text	0000015c SdSpiCard::readCSD(csd_t*)
00009888 g     F .text	00000048 usb_serial_write_buffer_free
000099b8  w    F .text	00000006 enet_timer_isr
0000bc9c g     F .text	00000012 .hidden __aeabi_dcmpeq
00000994 g     F .text	00000134 i2s_setupInput
00002eb0 g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
0000b030  w    F .text	0000000e _write
1fff12f8 g       .data	00000000 _edata
0000441c g     F .text	000000a4 ExFatPartition::fatPut(unsigned long, unsigned long)
00007ee8  w    F .text	00000002 SdioCard::~SdioCard()
000099b8  w    F .text	00000006 i2s0_tx_isr
000099b8  w    F .text	00000006 adc1_isr
00007188 g     F .text	000000e0 SdSpiCard::syncDevice()
00000c1c g     F .text	00000038 DMA_source_2ch
00005068 g     F .text	000000b8 FatFile::addDirCluster()
0000af20  w    F .text	00000004 usb_serial_class::availableForWrite()
000099b8  w    F .text	00000006 cmp0_isr
00000c54 g     F .text	00000032 DMA_destinationBuffer
0000b410 g     F .text	0000004c ultoa
00001e84  w    F .text	00000098 SdBase<FsVolume>::errorHalt(Print*)
1fff12f0 g     O .data	00000004 __malloc_trim_threshold
0000af10  w    F .text	00000004 usb_serial_class::peek()
0000bfc8 g     F .text	00000024 .hidden __floatunsisf
00012aec g     F .text	00000114 __mdiff
00007ebc g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000bd2c g     F .text	0000004e .hidden __aeabi_d2iz
000042b0 g     F .text	000000ce ExFatPartition::dirSeek(DirPos_t*, unsigned long)
200203ac g     O .bss	00000001 usb_cdc_transmit_flush_timer
200204ca g     O .bss	00000002 AudioStream::cpu_cycles_total
000099b8  w    F .text	00000006 pit_isr
000087fc g     F .text	00000004 SdioCard::writeStop()
00007384  w    F .text	00000168 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00012ee8 g     F .text	00000072 __sccl
00003474 g     F .text	00000014 ExFatFile::close()
00014270 g     O .text	00000101 _ctype_
000099b8  w    F .text	00000006 dac0_isr
00007268  w    F .text	0000011c SdSpiCard::readSector(unsigned long, unsigned char*)
00014590 g       .text	00000000 __init_array_start
0000c49c  w    F .text	00000002 .hidden __aeabi_idiv0
000099b8  w    F .text	00000006 can1_tx_warn_isr
0000bd00 g     F .text	0000002c .hidden __unorddf2
000099b8  w    F .text	00000006 uart0_status_isr
000014a0 g     F .text	00000084 dateTime(unsigned short*, unsigned short*)
000099b8  w    F .text	00000006 mcg_isr
0000b170 g     F .text	000000d4 Stream::parseInt(char)
00000400 g     O .text	00000010 flashconfigbytes
0000d280 g     F .text	000000dc strlen
0000c548 g     F .text	00000006 __locale_ctype_ptr_l
2002051c g     O .bss	00000004 m_i2s_isMaster
0000bc8c g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000bbf0 g     F .text	0000008a .hidden __gedf2
00005588 g     F .text	00000094 FatFile::seekSet(unsigned long)
00011e08 g     F .text	00000510 __gethex
1fff091c g     O .data	00000016 usb_string_product_name_default
00000b3c g     F .text	000000b0 DMA_allocate
00010a48 g     F .text	00000018 vdprintf
000099b8  w    F .text	00000006 dma_ch1_isr
00007f1c g     F .text	0000006c SdioCard::sectorCount()
00009f0c g     F .text	0000002c usb_tx_packet_count
0000d19c g     F .text	000000ce strchr
00013e88 g     O .text	00000058 vtable for SdioCard
0000b724 g     F .text	0000003a .hidden __aeabi_f2d
000099b8  w    F .text	00000006 dma_ch5_isr
000099b8  w    F .text	00000006 can0_rx_warn_isr
20020520 g     O .bss	0000000c iscl
000099b8  w    F .text	00000006 can0_tx_warn_isr
20020158 g     O .bss	00000004 startTime
00000fb0  w    F .text	0000000c Logger<long, 300, 128, 64>::haveFinished()
000099b8  w    F .text	00000006 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
000032bc g     F .text	00000028 FsFile::close()
200204c8 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
0000b464 g     F .text	0000027a .hidden __subdf3
00014590 g       .text	00000000 __preinit_array_start
00004114 g     F .text	000000ee ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00000734 g     F .text	000001b4 i2s_config
000127b8 g     F .text	0000005a __lo0bits
0000651c g     F .text	0000015a FatPartition::init(SdCardInterface*, unsigned char)
0000c078 g     F .text	00000000 .hidden __aeabi_ldivmod
0000c4a0 g     F .text	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
000099b8  w    F .text	00000006 cmp2_isr
0000be68 g     F .text	00000160 .hidden __addsf3
0000acac g     F .text	00000044 pendablesrvreq_isr
00000efc  w    F .text	00000004 Print::availableForWrite()
1fff0d7c g     O .data	0000016c __global_locale
000099b8  w    F .text	00000006 wakeup_isr
00008814 g     F .text	00000570 SdioCard::begin(SdioConfig)
00003d1c g     F .text	0000000c FsCache::invalidate()
00000d18 g     F .text	0000001a DMA_triggerAtHardwareEvent
000099b8  w    F .text	00000006 cmp3_isr
0000b05c g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00009474 g     F .text	00000052 SdSpiAltDriver::send(unsigned char const*, unsigned int)
00005b0c g     F .text	00000150 FatPartition::fatGet(unsigned long, unsigned long*)
0000c574 g     F .text	00000010 free
000099b8  w    F .text	00000006 tpm2_isr
00012660 g     F .text	00000080 __multadd
0001264c g     F .text	00000012 _Bfree
000099b8  w    F .text	00000006 dma_ch0_isr
1fff0938  w    O .data	00000016 usb_string_serial_number
000099b8  w    F .text	00000006 enet_tx_isr
00004760 g     F .text	0000003c exFatHashName(char const*, unsigned int, unsigned short)
00009060 g     F .text	000000ec SdioCard::readSector(unsigned long, unsigned char*)
00007ea0 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
size_t fsPrintDateTime(print_t* pr, uint32_t dateTime) {
  return fsPrintDateTime(pr, dateTime >> 16, dateTime & 0XFFFF);
}
//------------------------------------------------------------------------------
size_t fsPrintDateTime(print_t* pr,
                       uint32_t dateTime, uint8_t s100, int8_t tz) {
       0:	... ........q...
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
  char sign;
  if (tz & 0X80) {
      10:	q...q...q...q...
  str = fsFmtField(str, time & 63, 0);
  return fsFmtField(str, time >> 6, ':');
}
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time, uint8_t sec100) {
  str = fsFmtField(str, sec100%100, 0);
      20:	q...q...q.......
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      30:	....q...........
  return fsFmtField(str, time >> 6, ':');
}
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time, uint8_t sec100) {
  str = fsFmtField(str, sec100%100, 0);
  str = fsFmtField(str, 2*(time & 31) + sec100/100, '.');
      40:	................
/** Date time callback. */
void (*FsDateTime::callback)(uint16_t* date, uint16_t* time) = nullptr;
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      50:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
      60:	................
  return fsFmtField(str, 1980 + date, '-');
}
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time) {
  time >>= 5;
  str = fsFmtField(str, time & 63, 0);
      70:	................
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
      80:	................
/** Date time callback. */
void (*FsDateTime::callback)(uint16_t* date, uint16_t* time) = nullptr;
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      90:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      a0:	./..M0..........
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      b0:	................
  if (n < 10) {
    *--str = '0';
      c0:	................
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      d0:	................
  if (n < 10) {
    *--str = '0';
      e0:	................
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      f0:	................
  }
  str = fsFmtTime(str, (uint16_t)dateTime, s100);
  *--str = ' ';
  str = fsFmtDate(str, (uint16_t)(dateTime >> 16));
  return pr->write(str, buf + sizeof(buf) - str);
}
     100:	................
char* fsFmtTimeZone(char* str, int8_t tz) {
  char sign;
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
     110:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
     120:	................
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
     130:	................
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
     140:	................
/** Date time callback. */
void (*FsDateTime::callback)(uint16_t* date, uint16_t* time) = nullptr;
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
     150:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
     160:	.........1......
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
     170:	................
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
     180:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
     190:	................
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	99c0 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	9a30 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	9a0c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	9a0c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	c4c4 <__libc_init_array>

	startup_late_hook();
     32c:	bl	99cc <startup_late_hook>
	main();
     330:	bl	b0dc <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x1fff12f8
     360:	.word	0x000145a4
     364:	.word	0x1fff0730
     368:	.word	0x1fff12f8
     36c:	.word	0x20020544
     370:	.word	0x1fff0200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x5dbeee74
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff12f8
     42c:	.word	0x00000000
     430:	.word	0x000145a0

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff12fc
     460:	.word	0x000145a0
     464:	.word	0x1fff12f8
     468:	.word	0x00000000

0000046c <i2s_stopClock>:
int m_i2s_isMaster;
int m_i2s_nbits;
int m_i2s_dual;

void i2s_initClock(void) {  SIM_SCGC6 |= SIM_SCGC6_I2S;}
void i2s_stopClock(void) {  SIM_SCGC6 &= ~SIM_SCGC6_I2S;}
     46c:	ldr	r2, [pc, #8]	; (478 <i2s_stopClock+0xc>)
     46e:	ldr	r3, [r2, #0]
     470:	bic.w	r3, r3, #32768	; 0x8000
     474:	str	r3, [r2, #0]
     476:	bx	lr
     478:	.word	0x4004803c

0000047c <i2s_init>:

int m_i2s_isMaster;
int m_i2s_nbits;
int m_i2s_dual;

void i2s_initClock(void) {  SIM_SCGC6 |= SIM_SCGC6_I2S;}
     47c:	ldr	r2, [pc, #8]	; (488 <i2s_init+0xc>)
     47e:	ldr	r3, [r2, #0]
     480:	orr.w	r3, r3, #32768	; 0x8000
     484:	str	r3, [r2, #0]
     486:	bx	lr
     488:	.word	0x4004803c

0000048c <i2s_speedConfig>:
					73, 79, 83, 89, 97, 101, 103, 107, 109, 113,
					127, 131, 137, 139, 149, 151, 157, 163, 167, 173,
					179, 181, 191, 193, 197, 199};

float i2s_speedConfig(int device, int nbits, int fs)
{
     48c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     490:	vpush	{d8-d9}
//	BCLK = MCLK/2/(iscl3+1)
//  LRCLK = BCLK/(2*nbits); // division by  is to have 32 bits within frame sync (BCLK)
//
	int64_t i1=1,i2=1,i3;
	//
	if((device==SGTL5000_DEV) || (device==PJRC_AUDIO_DEV) || (device==CS5361_DEV))
     494:	cmp	r0, #2
					73, 79, 83, 89, 97, 101, 103, 107, 109, 113,
					127, 131, 137, 139, 149, 151, 157, 163, 167, 173,
					179, 181, 191, 193, 197, 199};

float i2s_speedConfig(int device, int nbits, int fs)
{
     496:	sub	sp, #12
     498:	vmov	s16, r1
//	BCLK = MCLK/2/(iscl3+1)
//  LRCLK = BCLK/(2*nbits); // division by  is to have 32 bits within frame sync (BCLK)
//
	int64_t i1=1,i2=1,i3;
	//
	if((device==SGTL5000_DEV) || (device==PJRC_AUDIO_DEV) || (device==CS5361_DEV))
     49c:	bhi.w	5a8 <i2s_speedConfig+0x11c>
	{
		int64_t nov;
		if (device==PJRC_AUDIO_DEV) 
     4a0:	cmp	r0, #0
     4a2:	bne.w	67e <i2s_speedConfig+0x1f2>
		{	nov=256;
     4a6:	mov.w	r3, #256	; 0x100
			nbits=16;
     4aa:	vldr	s16, [pc, #608]	; 70c <i2s_speedConfig+0x280>
	//
	if((device==SGTL5000_DEV) || (device==PJRC_AUDIO_DEV) || (device==CS5361_DEV))
	{
		int64_t nov;
		if (device==PJRC_AUDIO_DEV) 
		{	nov=256;
     4ae:	str	r0, [sp, #4]
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
     4b0:	movw	r8, #44100	; 0xac44
     4b4:	mov.w	r9, #0
	//
	if((device==SGTL5000_DEV) || (device==PJRC_AUDIO_DEV) || (device==CS5361_DEV))
	{
		int64_t nov;
		if (device==PJRC_AUDIO_DEV) 
		{	nov=256;
     4b8:	str	r3, [sp, #0]
			nbits=16;
     4ba:	ldr	r4, [pc, #596]	; (710 <i2s_speedConfig+0x284>)
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
     4bc:	ldr.w	sl, [pc, #596]	; 714 <i2s_speedConfig+0x288>
	if((device==SGTL5000_DEV) || (device==PJRC_AUDIO_DEV) || (device==CS5361_DEV))
	{
		int64_t nov;
		if (device==PJRC_AUDIO_DEV) 
		{	nov=256;
			nbits=16;
     4c0:	movs	r5, #0
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
     4c2:	mov	r6, r4
     4c4:	mov	r7, r5
     4c6:	mov.w	fp, #0
     4ca:	b.n	4dc <i2s_speedConfig+0x50>
     4cc:	cmp	r2, #1
     4ce:	sbcs.w	r3, r3, #0
     4d2:	blt.n	516 <i2s_speedConfig+0x8a>
     4d4:	cmp	r5, fp
     4d6:	it	eq
     4d8:	cmpeq	r4, sl
     4da:	beq.n	516 <i2s_speedConfig+0x8a>
     4dc:	adds	r4, r4, r6
     4de:	adcs	r5, r7
     4e0:	mov	r2, r8
     4e2:	mov	r3, r9
     4e4:	mov	r0, r4
     4e6:	mov	r1, r5
     4e8:	bl	c078 <__aeabi_ldivmod>
     4ec:	and.w	r2, r0, #7
     4f0:	and.w	r3, r1, #2147483648	; 0x80000000
     4f4:	cmp	r2, #0
     4f6:	sbcs.w	lr, r3, #0
     4fa:	bge.n	4cc <i2s_speedConfig+0x40>
     4fc:	adds.w	r2, r2, #4294967295
     500:	orn	r2, r2, #7
     504:	adds	r2, #1
     506:	mov.w	r3, #4294967295
     50a:	adc.w	r3, r3, #0
     50e:	cmp	r2, #1
     510:	sbcs.w	r3, r3, #0
     514:	bge.n	4d4 <i2s_speedConfig+0x48>
     516:	ldr	r2, [pc, #508]	; (714 <i2s_speedConfig+0x288>)
		int64_t scl = fref/fs; // should now be multiple of 8
		//
		// find first multiplier
		int64_t bitRate = fref*nov;
     518:	ldr	r3, [sp, #4]
     51a:	umull	sl, fp, r0, r2
     51e:	mla	fp, r2, r1, fp
     522:	ldr	r1, [sp, #0]
     524:	mul.w	r3, r4, r3
     528:	mla	r3, r1, r5, r3
     52c:	umull	r4, r5, r4, r1
		int64_t scale0 = F_CPU*scl;
     530:	mov	r8, sl
     532:	mov	r9, fp
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
		int64_t scl = fref/fs; // should now be multiple of 8
		//
		// find first multiplier
		int64_t bitRate = fref*nov;
     534:	add	r5, r3
		int64_t scale0 = F_CPU*scl;
		
		for(i1=1; i1<256;i1++) if ((scale0*i1 % bitRate)==0) break;
     536:	movs	r6, #1
     538:	movs	r7, #0
     53a:	b.n	556 <i2s_speedConfig+0xca>
     53c:	adds	r6, #1
     53e:	adc.w	r7, r7, #0
     542:	adds.w	r8, r8, sl
     546:	adc.w	r9, r9, fp
     54a:	cmp	r7, #0
     54c:	it	eq
     54e:	cmpeq.w	r6, #256	; 0x100
     552:	beq.w	6e6 <i2s_speedConfig+0x25a>
     556:	mov	r2, r4
     558:	mov	r3, r5
     55a:	mov	r0, r8
     55c:	mov	r1, r9
     55e:	bl	c078 <__aeabi_ldivmod>
     562:	orrs	r3, r2
     564:	bne.n	53c <i2s_speedConfig+0xb0>
		if(i1==256) return 0.0f; // failed to find multiplier
		
		i2=scale0*i1 / bitRate;
     566:	mov	r2, r4
     568:	mov	r3, r5
     56a:	mov	r0, r8
     56c:	mov	r1, r9
     56e:	bl	c078 <__aeabi_ldivmod>
		i3 = nov / (4*nbits);
     572:	vmov	r3, s16
     576:	lsls	r2, r3, #2
     578:	asrs	r3, r2, #31
		int64_t scale0 = F_CPU*scl;
		
		for(i1=1; i1<256;i1++) if ((scale0*i1 % bitRate)==0) break;
		if(i1==256) return 0.0f; // failed to find multiplier
		
		i2=scale0*i1 / bitRate;
     57a:	mov	r8, r0
     57c:	mov	r9, r1
		i3 = nov / (4*nbits);
     57e:	ldmia.w	sp, {r0, r1}
     582:	bl	c078 <__aeabi_ldivmod>
		
		iscl[0] = (int) (i1-1);
     586:	ldr	r3, [pc, #400]	; (718 <i2s_speedConfig+0x28c>)
		iscl[1] = (int) (i2-1);
     588:	add.w	r2, r8, #4294967295
     58c:	str	r2, [r3, #4]
		if(i1==256) return 0.0f; // failed to find multiplier
		
		i2=scale0*i1 / bitRate;
		i3 = nov / (4*nbits);
		
		iscl[0] = (int) (i1-1);
     58e:	subs	r4, r6, #1
		iscl[1] = (int) (i2-1);
		iscl[2] = (int) (i3-1);
     590:	subs	r2, r0, #1
		if(i1==256) return 0.0f; // failed to find multiplier
		
		i2=scale0*i1 / bitRate;
		i3 = nov / (4*nbits);
		
		iscl[0] = (int) (i1-1);
     592:	str	r4, [r3, #0]
		iscl[1] = (int) (i2-1);
		iscl[2] = (int) (i3-1);
     594:	str	r2, [r3, #8]
     596:	bl	bffc <__aeabi_l2f>
     59a:	vcvt.f32.s32	s16, s16
     59e:	vmov	s17, r0
     5a2:	vadd.f32	s19, s16, s16
     5a6:	b.n	640 <i2s_speedConfig+0x1b4>
	}
	
	else
  {
    i3=2;
    float A=F_CPU/2.0f/i3/(2.0f*nbits*fs);
     5a8:	vcvt.f32.s32	s16, s16
     5ac:	vmov	s15, r2
     5b0:	vadd.f32	s19, s16, s16
     5b4:	vcvt.f32.s32	s15, s15
     5b8:	vldr	s14, [pc, #352]	; 71c <i2s_speedConfig+0x290>
    float mn=1.0; 
    for(int ii=1;ii<32;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii); 
      if(xx<mn && A*ii<256.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     5bc:	vldr	s18, [pc, #352]	; 720 <i2s_speedConfig+0x294>
	}
	
	else
  {
    i3=2;
    float A=F_CPU/2.0f/i3/(2.0f*nbits*fs);
     5c0:	vmul.f32	s15, s15, s19
     5c4:	movs	r4, #1
     5c6:	movs	r5, #0
//  MCGPLLCLK=F_CPU // is set by _MICS(3)
//  MCLK = MCGPLLCLK*(iscl1+1)/(iscl2+1)
//	BCLK = MCLK/2/(iscl3+1)
//  LRCLK = BCLK/(2*nbits); // division by  is to have 32 bits within frame sync (BCLK)
//
	int64_t i1=1,i2=1,i3;
     5c8:	mov.w	r8, #1
     5cc:	mov.w	r9, #0
	}
	
	else
  {
    i3=2;
    float A=F_CPU/2.0f/i3/(2.0f*nbits*fs);
     5d0:	vdiv.f32	s17, s14, s15
//  MCGPLLCLK=F_CPU // is set by _MICS(3)
//  MCLK = MCGPLLCLK*(iscl1+1)/(iscl2+1)
//	BCLK = MCLK/2/(iscl3+1)
//  LRCLK = BCLK/(2*nbits); // division by  is to have 32 bits within frame sync (BCLK)
//
	int64_t i1=1,i2=1,i3;
     5d4:	mov	r6, r4
     5d6:	mov	r7, r5
	
	else
  {
    i3=2;
    float A=F_CPU/2.0f/i3/(2.0f*nbits*fs);
    float mn=1.0; 
     5d8:	mov	r0, r8
     5da:	mov	r1, r9
     5dc:	vmov.f32	s14, #112	; 0x3f800000  1.0
    for(int ii=1;ii<32;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii); 
     5e0:	vmov	s15, r4
     5e4:	vcvt.f32.s32	s15, s15
     5e8:	vmul.f32	s15, s15, s17
     5ec:	vcvt.s32.f32	s16, s15
     5f0:	vcvt.f32.s32	s16, s16
     5f4:	vsub.f32	s16, s15, s16
      if(xx<mn && A*ii<256.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     5f8:	vcmpe.f32	s16, s14
     5fc:	vmrs	APSR_nzcv, fpscr
     600:	bpl.n	61c <i2s_speedConfig+0x190>
     602:	vcmpe.f32	s15, s18
     606:	vmrs	APSR_nzcv, fpscr
     60a:	bpl.n	61c <i2s_speedConfig+0x190>
     60c:	vmov	r0, s15
     610:	bl	c148 <__aeabi_f2lz>
     614:	mov	r6, r4
     616:	mov	r7, r5
     618:	vmov.f32	s14, s16
     61c:	adds	r4, #1
     61e:	adc.w	r5, r5, #0
	else
  {
    i3=2;
    float A=F_CPU/2.0f/i3/(2.0f*nbits*fs);
    float mn=1.0; 
    for(int ii=1;ii<32;ii++) 
     622:	cmp	r5, #0
     624:	it	eq
     626:	cmpeq	r4, #32
     628:	bne.n	5e0 <i2s_speedConfig+0x154>
     62a:	mov	r8, r0
    { float xx;
      xx=A*ii-(int32_t)(A*ii); 
      if(xx<mn && A*ii<256.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
     62c:	ldr	r3, [pc, #232]	; (718 <i2s_speedConfig+0x28c>)
     62e:	mov	r9, r1
     630:	subs	r0, r6, #1
    iscl[1] = (int) (i2-1);
     632:	add.w	r1, r8, #4294967295
    iscl[2] = (int) (i3-1);
     636:	movs	r2, #1
     638:	stmia.w	r3, {r0, r1, r2}
     63c:	vmov.f32	s17, #0	; 0x40000000  2.0
  }
	return F_CPU * (float)(i1) / (float)(i2) / 2.0f / (float)(i3) / (2.0f*nbits); // is sampling frequency
     640:	mov	r1, r7
     642:	mov	r0, r6
     644:	bl	bffc <__aeabi_l2f>
     648:	vldr	s16, [pc, #216]	; 724 <i2s_speedConfig+0x298>
     64c:	vmov	s15, r0
     650:	mov	r1, r9
     652:	mov	r0, r8
     654:	vmul.f32	s16, s15, s16
     658:	bl	bffc <__aeabi_l2f>
     65c:	vmov	s14, r0
     660:	vdiv.f32	s15, s16, s14
     664:	vmov.f32	s14, #96	; 0x3f000000  0.5
     668:	vmul.f32	s15, s15, s14
     66c:	vdiv.f32	s14, s15, s17
     670:	vdiv.f32	s0, s14, s19
}
     674:	add	sp, #12
     676:	vpop	{d8-d9}
     67a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		{	nov=256;
			nbits=16;
			fs=44100; // is fixed in Audio tool
		}

		else if (device==SGTL5000_DEV)
     67e:	cmp	r0, #1
     680:	beq.n	6a0 <i2s_speedConfig+0x214>
			if(fs>48000) nov=256;
		}

		else if (device==CS5361_DEV)
		{   nbits = 32; 
			int64_t sc = 96000/fs;
     682:	ldr	r3, [pc, #164]	; (728 <i2s_speedConfig+0x29c>)
     684:	sdiv	r3, r3, r2
			if(sc>2) sc=2;
     688:	cmp	r3, #2
     68a:	bgt.n	700 <i2s_speedConfig+0x274>
     68c:	mov.w	r1, #256	; 0x100
     690:	lsl.w	r3, r1, r3
     694:	asrs	r1, r3, #31
     696:	str	r1, [sp, #4]
     698:	str	r3, [sp, #0]
		{	nov=512;
			if(fs>48000) nov=256;
		}

		else if (device==CS5361_DEV)
		{   nbits = 32; 
     69a:	vldr	s16, [pc, #144]	; 72c <i2s_speedConfig+0x2a0>
     69e:	b.n	6b6 <i2s_speedConfig+0x22a>
			fs=44100; // is fixed in Audio tool
		}

		else if (device==SGTL5000_DEV)
		{	nov=512;
			if(fs>48000) nov=256;
     6a0:	movw	r3, #48000	; 0xbb80
			nbits=16;
			fs=44100; // is fixed in Audio tool
		}

		else if (device==SGTL5000_DEV)
		{	nov=512;
     6a4:	cmp	r2, r3
     6a6:	ite	gt
     6a8:	movgt.w	r3, #256	; 0x100
     6ac:	movle.w	r3, #512	; 0x200
     6b0:	str	r3, [sp, #0]
     6b2:	movs	r3, #0
     6b4:	str	r3, [sp, #4]
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
     6b6:	mov.w	r9, r2, asr #31
     6ba:	mov	r3, r9
     6bc:	ldr	r0, [pc, #80]	; (710 <i2s_speedConfig+0x284>)
     6be:	movs	r1, #0
     6c0:	mov	r8, r2
     6c2:	bl	c078 <__aeabi_ldivmod>
     6c6:	and.w	r2, r0, #7
     6ca:	and.w	r3, r1, #2147483648	; 0x80000000
     6ce:	cmp	r2, #0
     6d0:	sbcs.w	r4, r3, #0
     6d4:	blt.n	6ec <i2s_speedConfig+0x260>
     6d6:	cmp	r2, #1
     6d8:	sbcs.w	r3, r3, #0
     6dc:	bge.w	4ba <i2s_speedConfig+0x2e>
			if(sc>2) sc=2;
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
     6e0:	ldr	r4, [pc, #44]	; (710 <i2s_speedConfig+0x284>)
     6e2:	movs	r5, #0
     6e4:	b.n	516 <i2s_speedConfig+0x8a>
		// find first multiplier
		int64_t bitRate = fref*nov;
		int64_t scale0 = F_CPU*scl;
		
		for(i1=1; i1<256;i1++) if ((scale0*i1 % bitRate)==0) break;
		if(i1==256) return 0.0f; // failed to find multiplier
     6e6:	vldr	s0, [pc, #72]	; 730 <i2s_speedConfig+0x2a4>
     6ea:	b.n	674 <i2s_speedConfig+0x1e8>
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
     6ec:	adds.w	r2, r2, #4294967295
     6f0:	orn	r2, r2, #7
     6f4:	mov.w	r3, #4294967295
     6f8:	adds	r2, #1
     6fa:	adc.w	r3, r3, #0
     6fe:	b.n	6d6 <i2s_speedConfig+0x24a>
     700:	mov.w	r1, #1024	; 0x400
     704:	movs	r3, #0
     706:	stmia.w	sp, {r1, r3}
     70a:	b.n	69a <i2s_speedConfig+0x20e>
     70c:	.word	0x00000010
     710:	.word	0x000f4240
     714:	.word	0x05b8d800
     718:	.word	0x20020520
     71c:	.word	0x4bb71b00
     720:	.word	0x43800000
     724:	.word	0x4cb71b00
     728:	.word	0x00017700
     72c:	.word	0x00000020
     730:	.word	0x00000000

00000734 <i2s_config>:
  }
	return F_CPU * (float)(i1) / (float)(i2) / 2.0f / (float)(i3) / (2.0f*nbits); // is sampling frequency
}

void i2s_config(int isMaster, int nbits, int dual, int sync)
{
     734:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      mcr_src=3;
  #endif
#endif

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
     738:	ldr	r4, [pc, #352]	; (89c <i2s_config+0x168>)
     73a:	ldr	r5, [r4, #0]
     73c:	cmp	r5, #0
     73e:	blt.n	816 <i2s_config+0xe2>
	if (I2S0_RCSR & I2S_RCSR_RE) return;
     740:	ldr	r5, [pc, #348]	; (8a0 <i2s_config+0x16c>)
     742:	ldr	r6, [r5, #0]
     744:	cmp	r6, #0
     746:	blt.n	816 <i2s_config+0xe2>

	I2S0_TCSR=0;
	I2S0_RCSR=0;
	//
	m_i2s_isMaster=isMaster;
     748:	ldr.w	ip, [pc, #396]	; 8d8 <i2s_config+0x1a4>
	m_i2s_nbits=nbits;
     74c:	ldr.w	lr, [pc, #396]	; 8dc <i2s_config+0x1a8>
	m_i2s_dual=dual;
     750:	ldr	r7, [pc, #336]	; (8a4 <i2s_config+0x170>)

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	I2S0_TCSR=0;
     752:	movs	r6, #0
     754:	str	r6, [r4, #0]
	I2S0_RCSR=0;
     756:	str	r6, [r5, #0]
	//
	m_i2s_isMaster=isMaster;
     758:	str.w	r0, [ip]
	m_i2s_nbits=nbits;
     75c:	str.w	r1, [lr]
	m_i2s_dual=dual;
     760:	str	r2, [r7, #0]
	
	// enable MCLK output
	if(isMaster)
     762:	cmp	r0, #0
     764:	bne.n	81a <i2s_config+0xe6>
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
     766:	ldr	r7, [pc, #320]	; (8a8 <i2s_config+0x174>)
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     768:	ldr	r6, [pc, #320]	; (8ac <i2s_config+0x178>)
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     76a:	ldr	r5, [pc, #324]	; (8b0 <i2s_config+0x17c>)
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
     76c:	str	r0, [r7, #0]
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     76e:	rsb	r4, r3, #1
     772:	lsls	r4, r4, #30
     774:	orr.w	r4, r4, #33554432	; 0x2000000
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     778:	movs	r7, #1
     77a:	str	r7, [r6, #0]
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     77c:	str	r4, [r5, #0]
	if(isMaster)
		I2S0_TCR2 |= (I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]) | I2S_TCR2_MSEL(1));
	//
	if(dual & I2S_TX_2CH)
     77e:	lsls	r5, r2, #31
		I2S0_TCR3 = I2S_TCR3_TCE_2CH; // dual tx channel
     780:	ldr	r4, [pc, #304]	; (8b4 <i2s_config+0x180>)
	else
		I2S0_TCR3 = I2S_TCR3_TCE; // single tx channel
	//
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) 
     782:	ldr	r6, [pc, #308]	; (8b8 <i2s_config+0x184>)
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
	if(isMaster)
		I2S0_TCR2 |= (I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]) | I2S_TCR2_MSEL(1));
	//
	if(dual & I2S_TX_2CH)
		I2S0_TCR3 = I2S_TCR3_TCE_2CH; // dual tx channel
     784:	ite	mi
     786:	movmi.w	r5, #196608	; 0x30000
	else
		I2S0_TCR3 = I2S_TCR3_TCE; // single tx channel
     78a:	movpl.w	r5, #65536	; 0x10000
	//
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) 
				| I2S_TCR4_SYWD((nbits-1)) 
     78e:	subs	r1, #1
		I2S0_TCR2 |= (I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]) | I2S_TCR2_MSEL(1));
	//
	if(dual & I2S_TX_2CH)
		I2S0_TCR3 = I2S_TCR3_TCE_2CH; // dual tx channel
	else
		I2S0_TCR3 = I2S_TCR3_TCE; // single tx channel
     790:	str	r5, [r4, #0]
	//
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) 
				| I2S_TCR4_SYWD((nbits-1)) 
     792:	lsls	r4, r1, #8
     794:	and.w	r4, r4, #7936	; 0x1f00
				| I2S_TCR4_MF 
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
     798:	orr.w	r5, r4, #65536	; 0x10000
     79c:	orr.w	r5, r5, #26
	if(dual & I2S_TX_2CH)
		I2S0_TCR3 = I2S_TCR3_TCE_2CH; // dual tx channel
	else
		I2S0_TCR3 = I2S_TCR3_TCE; // single tx channel
	//
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) 
     7a0:	str	r5, [r6, #0]
				| I2S_TCR4_SYWD((nbits-1)) 
				| I2S_TCR4_MF 
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
     7a2:	cmp	r0, #0
     7a4:	beq.n	872 <i2s_config+0x13e>
		I2S0_TCR4 |= I2S_TCR4_FSD;	
     7a6:	ldr.w	ip, [r6]
	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
	if(isMaster)
		I2S0_RCR2 = (I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]) | I2S_RCR2_MSEL(1));
     7aa:	ldr.w	lr, [pc, #288]	; 8cc <i2s_config+0x198>
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     7ae:	ldr.w	sl, [pc, #304]	; 8e0 <i2s_config+0x1ac>

	// configure receiver 
	I2S0_RMR = 0;
     7b2:	ldr.w	r9, [pc, #284]	; 8d0 <i2s_config+0x19c>
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
	if(isMaster)
		I2S0_RCR2 = (I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]) | I2S_RCR2_MSEL(1));
     7b6:	ldrb.w	lr, [lr, #8]
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));

	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
     7ba:	ldr.w	r8, [pc, #280]	; 8d4 <i2s_config+0x1a0>
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     7be:	lsls	r7, r1, #24
     7c0:	and.w	r7, r7, #520093696	; 0x1f000000
     7c4:	lsls	r1, r1, #16
     7c6:	orrs	r4, r7
     7c8:	and.w	r1, r1, #2031616	; 0x1f0000
				| I2S_TCR4_SYWD((nbits-1)) 
				| I2S_TCR4_MF 
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
     7cc:	orr.w	r7, ip, #1
     7d0:	str	r7, [r6, #0]
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     7d2:	orrs	r1, r4

	// configure receiver 
	I2S0_RMR = 0;
     7d4:	movs	r6, #0
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     7d6:	str.w	r1, [sl]

	// configure receiver 
	I2S0_RMR = 0;
     7da:	str.w	r6, [r9]
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
     7de:	ldr	r6, [pc, #220]	; (8bc <i2s_config+0x188>)
     7e0:	lsls	r3, r3, #30
	if(isMaster)
		I2S0_RCR2 = (I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]) | I2S_RCR2_MSEL(1));
     7e2:	orr.w	r4, lr, #83886080	; 0x5000000
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));

	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
     7e6:	movs	r7, #1
     7e8:	str.w	r7, [r8]
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
     7ec:	str	r3, [r6, #0]
	if(isMaster)
		I2S0_RCR2 = (I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]) | I2S_RCR2_MSEL(1));
     7ee:	str	r4, [r6, #0]
	//
	if(dual & I2S_RX_2CH)
     7f0:	lsls	r2, r2, #30
		I2S0_RCR3 = I2S_RCR3_RCE_2CH; // dual rx channel
     7f2:	ldr	r3, [pc, #204]	; (8c0 <i2s_config+0x18c>)
     7f4:	ite	mi
     7f6:	movmi.w	r2, #196608	; 0x30000
	else
		I2S0_RCR3 = I2S_RCR3_RCE; // single rx channel
     7fa:	movpl.w	r2, #65536	; 0x10000
     7fe:	str	r2, [r3, #0]
	//
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) 
     800:	ldr	r3, [pc, #192]	; (8c4 <i2s_config+0x190>)
     802:	str	r5, [r3, #0]
				| I2S_RCR4_SYWD((nbits-1)) 
				| I2S_RCR4_MF
				| I2S_RCR4_FSE	// frame sync early
				| I2S_RCR4_FSP	// sample at active low
				;
	if(isMaster)
     804:	cbz	r0, 80e <i2s_config+0xda>
		I2S0_RCR4 |= I2S_RCR4_FSD;	
     806:	ldr	r2, [r3, #0]
     808:	orr.w	r2, r2, #1
     80c:	str	r2, [r3, #0]

	I2S0_RCR5 = I2S_RCR5_WNW((nbits-1)) | I2S_RCR5_W0W((nbits-1)) | I2S_RCR5_FBT((nbits-1));
     80e:	ldr	r3, [pc, #184]	; (8c8 <i2s_config+0x194>)
     810:	str	r1, [r3, #0]
     812:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     816:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	m_i2s_dual=dual;
	
	// enable MCLK output
	if(isMaster)
	{
		I2S0_MCR = I2S_MCR_MICS(mcr_src)  | I2S_MCR_MOE;
     81a:	adds	r5, #128	; 0x80
     81c:	mov.w	r4, #1124073472	; 0x43000000
     820:	str	r4, [r5, #0]
		while (I2S0_MCR & I2S_MCR_DUF) ; 
     822:	ldr	r4, [r5, #0]
     824:	cmp	r4, #0
     826:	blt.n	822 <i2s_config+0xee>
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
     828:	ldr	r4, [pc, #160]	; (8cc <i2s_config+0x198>)
     82a:	ldr.w	lr, [pc, #184]	; 8e4 <i2s_config+0x1b0>
     82e:	ldr	r6, [r4, #0]
     830:	ldr	r5, [r4, #4]
	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
	if(isMaster)
		I2S0_TCR2 |= (I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]) | I2S_TCR2_MSEL(1));
     832:	ldrb	r7, [r4, #8]
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
     834:	ldr	r4, [pc, #112]	; (8a8 <i2s_config+0x174>)
	// enable MCLK output
	if(isMaster)
	{
		I2S0_MCR = I2S_MCR_MICS(mcr_src)  | I2S_MCR_MOE;
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
     836:	lsls	r6, r6, #12
     838:	ubfx	r5, r5, #0, #12
     83c:	and.w	r6, r6, #1044480	; 0xff000
     840:	orrs	r6, r5
	}

	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     842:	rsb	r5, r3, #1
	// enable MCLK output
	if(isMaster)
	{
		I2S0_MCR = I2S_MCR_MICS(mcr_src)  | I2S_MCR_MOE;
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
     846:	str.w	r6, [lr]
	}

	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     84a:	lsls	r5, r5, #30
     84c:	ldr	r6, [pc, #96]	; (8b0 <i2s_config+0x17c>)
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     84e:	sub.w	lr, lr, #256	; 0x100
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
     852:	mov.w	ip, #0
     856:	str.w	ip, [r4]
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     85a:	orr.w	r5, r5, #33554432	; 0x2000000
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     85e:	movs	r4, #1
     860:	str.w	r4, [lr]
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     864:	str	r5, [r6, #0]
	if(isMaster)
		I2S0_TCR2 |= (I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]) | I2S_TCR2_MSEL(1));
     866:	ldr	r4, [r6, #0]
     868:	orr.w	r4, r4, #83886080	; 0x5000000
     86c:	orrs	r4, r7
     86e:	str	r4, [r6, #0]
     870:	b.n	77e <i2s_config+0x4a>
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     872:	lsls	r6, r1, #24
     874:	and.w	r6, r6, #520093696	; 0x1f000000
     878:	lsls	r1, r1, #16
     87a:	orrs	r4, r6

	// configure receiver 
	I2S0_RMR = 0;
     87c:	ldr	r7, [pc, #80]	; (8d0 <i2s_config+0x19c>)
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     87e:	ldr.w	lr, [pc, #96]	; 8e0 <i2s_config+0x1ac>

	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
     882:	ldr	r6, [pc, #80]	; (8d4 <i2s_config+0x1a0>)
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     884:	and.w	r1, r1, #2031616	; 0x1f0000
     888:	orrs	r1, r4

	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
     88a:	ldr	r4, [pc, #48]	; (8bc <i2s_config+0x188>)
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     88c:	str.w	r1, [lr]

	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
     890:	lsls	r3, r3, #30
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));

	// configure receiver 
	I2S0_RMR = 0;
     892:	str	r0, [r7, #0]
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
     894:	movs	r7, #1
     896:	str	r7, [r6, #0]
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
     898:	str	r3, [r4, #0]
     89a:	b.n	7f0 <i2s_config+0xbc>
     89c:	.word	0x4002f000
     8a0:	.word	0x4002f080
     8a4:	.word	0x2002050c
     8a8:	.word	0x4002f060
     8ac:	.word	0x4002f004
     8b0:	.word	0x4002f008
     8b4:	.word	0x4002f00c
     8b8:	.word	0x4002f010
     8bc:	.word	0x4002f088
     8c0:	.word	0x4002f08c
     8c4:	.word	0x4002f090
     8c8:	.word	0x4002f094
     8cc:	.word	0x20020520
     8d0:	.word	0x4002f0e0
     8d4:	.word	0x4002f084
     8d8:	.word	0x2002051c
     8dc:	.word	0x20020514
     8e0:	.word	0x4002f014
     8e4:	.word	0x4002f104

000008e8 <i2s_configurePorts>:
	I2S0_TDR1:								Pin15(6)
*/

void i2s_configurePorts(int iconf)
{
	if(iconf==1) //pjrc audio or wmxz cs5361 stereo board
     8e8:	cmp	r0, #1
	I2S0_TDR0:								Pin22(6)
	I2S0_TDR1:								Pin15(6)
*/

void i2s_configurePorts(int iconf)
{
     8ea:	push	{r4, r5, r6}
	if(iconf==1) //pjrc audio or wmxz cs5361 stereo board
     8ec:	beq.n	90e <i2s_configurePorts+0x26>
#endif
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif
	}
	else if(iconf==2) // pure rx system no MCLK
     8ee:	cmp	r0, #2
     8f0:	beq.n	8f6 <i2s_configurePorts+0xe>
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif

	}
}
     8f2:	pop	{r4, r5, r6}
     8f4:	bx	lr
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif
	}
	else if(iconf==2) // pure rx system no MCLK
	{
		CORE_PIN11_CONFIG = PORT_PCR_MUX(4); // pin 11, PTC6, I2S0_RX_BCLK
     8f6:	ldr	r4, [pc, #56]	; (930 <i2s_configurePorts+0x48>)
		CORE_PIN12_CONFIG = PORT_PCR_MUX(4); // pin 12, PTC7, I2S0_RX_FS
     8f8:	ldr	r0, [pc, #56]	; (934 <i2s_configurePorts+0x4c>)
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     8fa:	ldr	r1, [pc, #60]	; (938 <i2s_configurePorts+0x50>)
#ifdef __MK20DX256__
		CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11,I2S0_RXD1
#endif
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
     8fc:	ldr	r2, [pc, #60]	; (93c <i2s_configurePorts+0x54>)
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif
	}
	else if(iconf==2) // pure rx system no MCLK
	{
		CORE_PIN11_CONFIG = PORT_PCR_MUX(4); // pin 11, PTC6, I2S0_RX_BCLK
     8fe:	mov.w	r3, #1024	; 0x400
     902:	str	r3, [r4, #0]
		CORE_PIN12_CONFIG = PORT_PCR_MUX(4); // pin 12, PTC7, I2S0_RX_FS
     904:	str	r3, [r0, #0]
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif

	}
}
     906:	pop	{r4, r5, r6}
	}
	else if(iconf==2) // pure rx system no MCLK
	{
		CORE_PIN11_CONFIG = PORT_PCR_MUX(4); // pin 11, PTC6, I2S0_RX_BCLK
		CORE_PIN12_CONFIG = PORT_PCR_MUX(4); // pin 12, PTC7, I2S0_RX_FS
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     908:	str	r3, [r1, #0]
#ifdef __MK20DX256__
		CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11,I2S0_RXD1
#endif
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
     90a:	str	r3, [r2, #0]
#endif

	}
}
     90c:	bx	lr

void i2s_configurePorts(int iconf)
{
	if(iconf==1) //pjrc audio or wmxz cs5361 stereo board
	{
		CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin 9,  PTC3, I2S0_TX_BCLK
     90e:	ldr	r6, [pc, #48]	; (940 <i2s_configurePorts+0x58>)
		CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
     910:	ldr	r5, [pc, #28]	; (930 <i2s_configurePorts+0x48>)
		CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS
     912:	ldr	r4, [pc, #48]	; (944 <i2s_configurePorts+0x5c>)
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     914:	ldr	r0, [pc, #32]	; (938 <i2s_configurePorts+0x50>)
#ifdef __MK20DX256__
		CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11,I2S0_RXD1
#endif
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
     916:	ldr	r1, [pc, #36]	; (93c <i2s_configurePorts+0x54>)

void i2s_configurePorts(int iconf)
{
	if(iconf==1) //pjrc audio or wmxz cs5361 stereo board
	{
		CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin 9,  PTC3, I2S0_TX_BCLK
     918:	mov.w	r3, #1536	; 0x600
		CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
		CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     91c:	mov.w	r2, #1024	; 0x400

void i2s_configurePorts(int iconf)
{
	if(iconf==1) //pjrc audio or wmxz cs5361 stereo board
	{
		CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin 9,  PTC3, I2S0_TX_BCLK
     920:	str	r3, [r6, #0]
		CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
     922:	str	r3, [r5, #0]
		CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS
     924:	str	r3, [r4, #0]
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     926:	str	r2, [r0, #0]
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif

	}
}
     928:	pop	{r4, r5, r6}
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
#ifdef __MK20DX256__
		CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11,I2S0_RXD1
#endif
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
     92a:	str	r2, [r1, #0]
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif

	}
}
     92c:	bx	lr
     92e:	nop
     930:	.word	0x4004b018
     934:	.word	0x4004b01c
     938:	.word	0x4004b014
     93c:	.word	0x4004b02c
     940:	.word	0x4004b00c
     944:	.word	0x4004b008

00000948 <m_i2s_rx_isr>:

volatile uint32_t rxCount = 0;
void m_i2s_rx_isr(void)
{	uint32_t daddr, taddr;
	//
	rxCount++;
     948:	ldr	r2, [pc, #52]	; (980 <m_i2s_rx_isr+0x38>)

uint32_t i2sDma_getRxError(void) { return *DMA_RX->ES;}

volatile uint32_t rxCount = 0;
void m_i2s_rx_isr(void)
{	uint32_t daddr, taddr;
     94a:	push	{r4, lr}
	//
	rxCount++;
     94c:	ldr	r3, [r2, #0]
//	__disable_irq();
	DMA_clearInterrupt(DMA_RX);
     94e:	ldr	r4, [pc, #52]	; (984 <m_i2s_rx_isr+0x3c>)

volatile uint32_t rxCount = 0;
void m_i2s_rx_isr(void)
{	uint32_t daddr, taddr;
	//
	rxCount++;
     950:	adds	r3, #1
//	__disable_irq();
	DMA_clearInterrupt(DMA_RX);
     952:	ldr	r0, [r4, #0]

volatile uint32_t rxCount = 0;
void m_i2s_rx_isr(void)
{	uint32_t daddr, taddr;
	//
	rxCount++;
     954:	str	r3, [r2, #0]
//	__disable_irq();
	DMA_clearInterrupt(DMA_RX);
     956:	bl	d78 <DMA_clearInterrupt>
	daddr = (uint32_t) DMA_destinationAddress(DMA_RX);
     95a:	ldr	r0, [r4, #0]
     95c:	bl	d10 <DMA_destinationAddress>
	//
	if (daddr < (uint32_t)(&m_i2s_rx_buffer[m_i2s_rx_nbyte/2])) 
     960:	ldr	r3, [pc, #36]	; (988 <m_i2s_rx_isr+0x40>)
     962:	ldr	r2, [pc, #40]	; (98c <m_i2s_rx_isr+0x44>)
     964:	ldr	r3, [r3, #0]
     966:	ldr	r2, [r2, #0]
     968:	add.w	r3, r3, r3, lsr #31
     96c:	add.w	r1, r2, r3, asr #1
#endif
		// need to process data from the first half
		taddr=(uint32_t) &m_i2s_rx_buffer[0];
	}
	//
	i2sInProcessing((void *) &m_i2s_rxContext,(void *) taddr);
     970:	cmp	r0, r1
     972:	it	cs
     974:	movcs	r1, r2
     976:	ldr	r0, [pc, #24]	; (990 <m_i2s_rx_isr+0x48>)
     978:	bl	1660 <i2sInProcessing>
     97c:	pop	{r4, pc}
     97e:	nop
     980:	.word	0x1fff1324
     984:	.word	0x1fff1314
     988:	.word	0x20020508
     98c:	.word	0x20020518
     990:	.word	0x1fff1318

00000994 <i2s_setupInput>:

//#include "usb_serial.h"
//void logg(char c){	usb_serial_putchar(c);	usb_serial_flush_output();}

void i2s_setupInput(void * buffer, int ndat, int port, int prio)
{	// ndat is number of words in (dual) input buffer
     994:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
     998:	ldr	r4, [pc, #260]	; (aa0 <i2s_setupInput+0x10c>)
     99a:	ldr	r4, [r4, #0]
     99c:	cmp	r4, #0
     99e:	blt.n	a52 <i2s_setupInput+0xbe>
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9a0:	ldr.w	fp, [pc, #284]	; ac0 <i2s_setupInput+0x12c>
void i2s_setupInput(void * buffer, int ndat, int port, int prio)
{	// ndat is number of words in (dual) input buffer
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
     9a4:	ldr	r4, [pc, #252]	; (aa4 <i2s_setupInput+0x110>)
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9a6:	ldr.w	r6, [fp]
void i2s_setupInput(void * buffer, int ndat, int port, int prio)
{	// ndat is number of words in (dual) input buffer
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
     9aa:	str	r0, [r4, #0]
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9ac:	mul.w	r7, r1, r6
     9b0:	cmp	r7, #0
     9b2:	ldr	r4, [pc, #244]	; (aa8 <i2s_setupInput+0x114>)

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
     9b4:	ldr.w	sl, [pc, #268]	; ac4 <i2s_setupInput+0x130>
{	// ndat is number of words in (dual) input buffer
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9b8:	it	lt
     9ba:	addlt	r7, #7

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
     9bc:	add.w	r9, r1, r1, lsr #31
{	// ndat is number of words in (dual) input buffer
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9c0:	asrs	r7, r7, #3

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
     9c2:	mov.w	r9, r9, asr #1
     9c6:	mul.w	lr, r9, r6
{	// ndat is number of words in (dual) input buffer
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9ca:	str	r7, [r4, #0]

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
	
	if(!DMA_RX) DMA_RX=DMA_allocate(port);
     9cc:	ldr	r7, [pc, #220]	; (aac <i2s_setupInput+0x118>)
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
     9ce:	cmp.w	lr, #0
     9d2:	it	lt
     9d4:	addlt.w	lr, lr, #7
     9d8:	mov	r8, r0
	
	if(!DMA_RX) DMA_RX=DMA_allocate(port);
     9da:	ldr	r0, [r7, #0]
     9dc:	mov	r5, r3
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
     9de:	mov.w	r3, lr, asr #3
     9e2:	mov	r4, r1
     9e4:	str.w	r3, [sl]
	
	if(!DMA_RX) DMA_RX=DMA_allocate(port);
     9e8:	cmp	r0, #0
     9ea:	beq.n	a8e <i2s_setupInput+0xfa>
	if(!DMA_RX) return;
	//
	if(m_i2s_dual & I2S_RX_2CH)
     9ec:	ldr	r3, [pc, #192]	; (ab0 <i2s_setupInput+0x11c>)
     9ee:	ldr	r3, [r3, #0]
     9f0:	lsls	r3, r3, #30
     9f2:	bmi.n	a56 <i2s_setupInput+0xc2>
		DMA_destinationBuffer_2ch(DMA_RX, buffer, ndat/2, m_i2s_nbits/8);
		m_i2s_rxContext.nsamp=ndat/2/4; // half buffer/ 4-chan
		m_i2s_rxContext.nchan=4;
	}
	else
	{ 	DMA_source(DMA_RX, (uint32_t *)&I2S0_RDR0, m_i2s_nbits/8);
     9f4:	subs	r2, r6, #0
     9f6:	it	lt
     9f8:	addlt	r2, #7
     9fa:	asrs	r2, r2, #3
     9fc:	ldr	r1, [pc, #180]	; (ab4 <i2s_setupInput+0x120>)
     9fe:	bl	bec <DMA_source>
		DMA_destinationBuffer(DMA_RX, buffer, ndat, m_i2s_nbits/8);
     a02:	ldr.w	r3, [fp]
     a06:	ldr	r0, [r7, #0]
     a08:	cmp	r3, #0
     a0a:	it	lt
     a0c:	addlt	r3, #7
     a0e:	asrs	r3, r3, #3
     a10:	mov	r2, r4
     a12:	mov	r1, r8
     a14:	bl	c54 <DMA_destinationBuffer>
		m_i2s_rxContext.nsamp=ndat/2/2;	// half buffer / 2-chan
     a18:	cmp	r4, #0
     a1a:	it	lt
     a1c:	addlt	r4, #3
     a1e:	asrs	r4, r4, #2
		m_i2s_rxContext.nchan=2;
     a20:	movs	r3, #2
		m_i2s_rxContext.nchan=4;
	}
	else
	{ 	DMA_source(DMA_RX, (uint32_t *)&I2S0_RDR0, m_i2s_nbits/8);
		DMA_destinationBuffer(DMA_RX, buffer, ndat, m_i2s_nbits/8);
		m_i2s_rxContext.nsamp=ndat/2/2;	// half buffer / 2-chan
     a22:	str.w	r4, [sl, #4]
		m_i2s_rxContext.nchan=2;
     a26:	str.w	r3, [sl, #8]
	}
	//
	DMA_interruptAtCompletion(DMA_RX); 
     a2a:	ldr	r0, [r7, #0]
     a2c:	bl	cc0 <DMA_interruptAtCompletion>
	DMA_interruptAtHalf(DMA_RX); 
     a30:	ldr	r0, [r7, #0]
     a32:	bl	ccc <DMA_interruptAtHalf>
	//
	DMA_attachInterrupt(DMA_RX, m_i2s_rx_isr); 
     a36:	ldr	r1, [pc, #128]	; (ab8 <i2s_setupInput+0x124>)
     a38:	ldr	r0, [r7, #0]
     a3a:	bl	d34 <DMA_attachInterrupt>
	DMA_triggerAtHardwareEvent(DMA_RX, DMAMUX_SOURCE_I2S0_RX) ;
     a3e:	ldr	r0, [r7, #0]
     a40:	movs	r1, #12
     a42:	bl	d18 <DMA_triggerAtHardwareEvent>
	if(prio>0) NVIC_SET_PRIORITY(IRQ_I2S0_RX, prio*16); // 8 is normal priority (set in mk20dx128.c)
     a46:	cmp	r5, #0
     a48:	ble.n	a52 <i2s_setupInput+0xbe>
     a4a:	lsls	r5, r5, #4
     a4c:	ldr	r3, [pc, #108]	; (abc <i2s_setupInput+0x128>)
     a4e:	uxtb	r5, r5
     a50:	strb	r5, [r3, #0]
     a52:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	
	if(!DMA_RX) DMA_RX=DMA_allocate(port);
	if(!DMA_RX) return;
	//
	if(m_i2s_dual & I2S_RX_2CH)
	{ 	DMA_source_2ch(DMA_RX, (uint32_t *)&I2S0_RDR0, m_i2s_nbits/8);
     a56:	subs	r2, r6, #0
     a58:	it	lt
     a5a:	addlt	r2, #7
     a5c:	asrs	r2, r2, #3
     a5e:	ldr	r1, [pc, #84]	; (ab4 <i2s_setupInput+0x120>)
     a60:	bl	c1c <DMA_source_2ch>
		DMA_destinationBuffer_2ch(DMA_RX, buffer, ndat/2, m_i2s_nbits/8);
     a64:	ldr.w	r3, [fp]
     a68:	ldr	r0, [r7, #0]
     a6a:	cmp	r3, #0
     a6c:	it	lt
     a6e:	addlt	r3, #7
     a70:	asrs	r3, r3, #3
     a72:	mov	r2, r9
     a74:	mov	r1, r8
     a76:	bl	c88 <DMA_destinationBuffer_2ch>
		m_i2s_rxContext.nsamp=ndat/2/4; // half buffer/ 4-chan
     a7a:	cmp	r4, #0
     a7c:	it	lt
     a7e:	addlt	r4, #7
     a80:	asrs	r4, r4, #3
		m_i2s_rxContext.nchan=4;
     a82:	movs	r3, #4
	if(!DMA_RX) return;
	//
	if(m_i2s_dual & I2S_RX_2CH)
	{ 	DMA_source_2ch(DMA_RX, (uint32_t *)&I2S0_RDR0, m_i2s_nbits/8);
		DMA_destinationBuffer_2ch(DMA_RX, buffer, ndat/2, m_i2s_nbits/8);
		m_i2s_rxContext.nsamp=ndat/2/4; // half buffer/ 4-chan
     a84:	str.w	r4, [sl, #4]
		m_i2s_rxContext.nchan=4;
     a88:	str.w	r3, [sl, #8]
     a8c:	b.n	a2a <i2s_setupInput+0x96>
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
	
	if(!DMA_RX) DMA_RX=DMA_allocate(port);
     a8e:	mov	r0, r2
     a90:	bl	b3c <DMA_allocate>
     a94:	str	r0, [r7, #0]
	if(!DMA_RX) return;
     a96:	cmp	r0, #0
     a98:	beq.n	a52 <i2s_setupInput+0xbe>
     a9a:	ldr.w	r6, [fp]
     a9e:	b.n	9ec <i2s_setupInput+0x58>
     aa0:	.word	0x4002f080
     aa4:	.word	0x20020518
     aa8:	.word	0x20020508
     aac:	.word	0x1fff1314
     ab0:	.word	0x2002050c
     ab4:	.word	0x4002f0a0
     ab8:	.word	0x00000949
     abc:	.word	0xe000e41d
     ac0:	.word	0x20020514
     ac4:	.word	0x1fff1318

00000ac8 <i2s_stopInput>:
	if(DMA_RX) DMA_disable(DMA_RX);
}

void i2s_stopInput(void)
{ //stops Input DMA
	if(DMA_RX) DMA_disable(DMA_RX);
     ac8:	ldr	r3, [pc, #8]	; (ad4 <i2s_stopInput+0xc>)
     aca:	ldr	r0, [r3, #0]
     acc:	cbz	r0, ad2 <i2s_stopInput+0xa>
     ace:	b.w	ce4 <DMA_disable>
     ad2:	bx	lr
     ad4:	.word	0x1fff1314

00000ad8 <i2s_startInput>:
{ //stops Output DMA
	if(DMA_TX) DMA_disable(DMA_TX);
}

void i2s_startInput(void)
{	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     ad8:	ldr	r2, [pc, #8]	; (ae4 <i2s_startInput+0xc>)
     ada:	ldr	r3, [r2, #0]
     adc:	orr.w	r3, r3, #2415919104	; 0x90000000
     ae0:	str	r3, [r2, #0]
     ae2:	bx	lr
     ae4:	.word	0x4002f080

00000ae8 <i2s_enableInputDMA>:
void i2s_startOutput(void)
{	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; 
}

void i2s_enableInputDMA(void)
{	if(!DMA_RX) return;
     ae8:	push	{r3, lr}
     aea:	ldr	r3, [pc, #24]	; (b04 <i2s_enableInputDMA+0x1c>)
     aec:	ldr	r0, [r3, #0]
     aee:	cbz	r0, b02 <i2s_enableInputDMA+0x1a>
	DMA_enable(DMA_RX);
     af0:	bl	cd8 <DMA_enable>
	I2S0_RCSR |= I2S_RCSR_FRDE | I2S_RCSR_FR;
     af4:	ldr	r2, [pc, #16]	; (b08 <i2s_enableInputDMA+0x20>)
     af6:	ldr	r3, [r2, #0]
     af8:	orr.w	r3, r3, #33554432	; 0x2000000
     afc:	orr.w	r3, r3, #1
     b00:	str	r3, [r2, #0]
     b02:	pop	{r3, pc}
     b04:	.word	0x1fff1314
     b08:	.word	0x4002f080

00000b0c <DMA_init>:
static uint16_t dma_channel_allocated_mask = 0;
static DMA_STRUCT DMAS[DMA_NUM_CHANNELS];

void DMA_init(void)
{
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
     b0c:	ldr	r0, [pc, #32]	; (b30 <DMA_init+0x24>)
	SIM_SCGC7 |= SIM_SCGC7_DMA;
     b0e:	ldr	r1, [pc, #36]	; (b34 <DMA_init+0x28>)
static uint16_t dma_channel_allocated_mask = 0;
static DMA_STRUCT DMAS[DMA_NUM_CHANNELS];

void DMA_init(void)
{
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
     b10:	ldr	r2, [r0, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;

//	DMA_CR = DMA_CR_HALT | DMA_CR_EMLM; // fixed priority arbitration
//	DMA_CR |= DMA_CR_ERCA; // enable round robin arbitration  // good idea?
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG;
     b12:	ldr	r3, [pc, #36]	; (b38 <DMA_init+0x2c>)
static uint16_t dma_channel_allocated_mask = 0;
static DMA_STRUCT DMAS[DMA_NUM_CHANNELS];

void DMA_init(void)
{
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
     b14:	orr.w	r2, r2, #2
     b18:	str	r2, [r0, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
     b1a:	ldr	r2, [r1, #0]

//	DMA_CR = DMA_CR_HALT | DMA_CR_EMLM; // fixed priority arbitration
//	DMA_CR |= DMA_CR_ERCA; // enable round robin arbitration  // good idea?
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG;
     b1c:	movs	r0, #130	; 0x82
static DMA_STRUCT DMAS[DMA_NUM_CHANNELS];

void DMA_init(void)
{
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
     b1e:	orr.w	r2, r2, #2
     b22:	str	r2, [r1, #0]

//	DMA_CR = DMA_CR_HALT | DMA_CR_EMLM; // fixed priority arbitration
//	DMA_CR |= DMA_CR_ERCA; // enable round robin arbitration  // good idea?
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG;
     b24:	str	r0, [r3, #0]
#ifdef __MK66FX1M0__
	DMA_CR |= DMA_CR_GRP1PRI;
     b26:	ldr	r2, [r3, #0]
     b28:	orr.w	r2, r2, #1024	; 0x400
     b2c:	str	r2, [r3, #0]
     b2e:	bx	lr
     b30:	.word	0x4004803c
     b34:	.word	0x40048040
     b38:	.word	0x40008000

00000b3c <DMA_allocate>:
} 

static int DMA_getChannel(int prio)
{	int ch;
	//find proper DMA according to its default priority (0 is lowest 15 is highest priority)
	ch= 4*(prio/4)+(3-(prio %4));
     b3c:	ldr	r2, [pc, #152]	; (bd8 <DMA_allocate+0x9c>)
     b3e:	cmp	r0, #0
     b40:	and.w	r2, r2, r0
     b44:	ite	lt
     b46:	addlt	r3, r0, #3
     b48:	movge	r3, r0
     b4a:	cmp	r2, #0
{// 	vectorPrint16((uint16_t*) dma->TCD,sizeof(DMA_TCD)/2,16,1,',');
}

#define DMA_TCD_BASE 0x40009000 
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
     b4c:	push	{r4, r5, r6, r7, lr}
} 

static int DMA_getChannel(int prio)
{	int ch;
	//find proper DMA according to its default priority (0 is lowest 15 is highest priority)
	ch= 4*(prio/4)+(3-(prio %4));
     b4e:	bic.w	r3, r3, #3
     b52:	blt.n	bc8 <DMA_allocate+0x8c>
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
     b54:	ldr	r7, [pc, #132]	; (bdc <DMA_allocate+0xa0>)
} 

static int DMA_getChannel(int prio)
{	int ch;
	//find proper DMA according to its default priority (0 is lowest 15 is highest priority)
	ch= 4*(prio/4)+(3-(prio %4));
     b56:	rsb	r2, r2, #3
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
     b5a:	ldrh	r4, [r7, #0]
} 

static int DMA_getChannel(int prio)
{	int ch;
	//find proper DMA according to its default priority (0 is lowest 15 is highest priority)
	ch= 4*(prio/4)+(3-(prio %4));
     b5c:	add	r3, r2
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
     b5e:	asr.w	r1, r4, r3
     b62:	ands.w	r1, r1, #1
     b66:	bne.n	bd2 <DMA_allocate+0x96>
		return -1; //no channel found
	else
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
     b68:	and.w	r2, r3, #15
     b6c:	add.w	r2, r2, #1073741824	; 0x40000000
     b70:	add.w	r2, r2, #33024	; 0x8100
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
		return -1; //no channel found
	else
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
     b74:	movs	r6, #1
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
	if((*DCHPRI & 0x0F) != prio) return -1;
     b76:	ldrb	r5, [r2, #0]
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
		return -1; //no channel found
	else
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
     b78:	lsls	r6, r3
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
	if((*DCHPRI & 0x0F) != prio) return -1;
     b7a:	and.w	lr, r5, #15
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
		return -1; //no channel found
	else
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
     b7e:	orrs	r4, r6
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
	if((*DCHPRI & 0x0F) != prio) return -1;
     b80:	cmp	r0, lr
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
		return -1; //no channel found
	else
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
     b82:	strh	r4, [r7, #0]
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
	if((*DCHPRI & 0x0F) != prio) return -1;
     b84:	bne.n	bd2 <DMA_allocate+0x96>

	*DCHPRI |= DMA_DCHPRI_ECP; // allow to be interrupted
     b86:	orn	r5, r5, #127	; 0x7f

#define DMA_TCD_BASE 0x40009000 
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
     b8a:	cmp	r3, #0
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
	if((*DCHPRI & 0x0F) != prio) return -1;

	*DCHPRI |= DMA_DCHPRI_ECP; // allow to be interrupted
     b8c:	strb	r5, [r2, #0]

#define DMA_TCD_BASE 0x40009000 
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
     b8e:	blt.n	bd2 <DMA_allocate+0x96>
	
	DMAS[ch].channel=ch;
     b90:	ldr	r5, [pc, #76]	; (be0 <DMA_allocate+0xa4>)
	DMAS[ch].TCD->DLAST_SGA=0;
	DMAS[ch].TCD->CSR=0;
	DMAS[ch].TCD->BITER=0;
	
	DMAS[ch].ES = (uint32_t *)(0x40008004);
	DMA_CDNE = ch;
     b92:	ldr	r6, [pc, #80]	; (be4 <DMA_allocate+0xa8>)
	DMAS[ch].TCD->CITER=0;
	DMAS[ch].TCD->DLAST_SGA=0;
	DMAS[ch].TCD->CSR=0;
	DMAS[ch].TCD->BITER=0;
	
	DMAS[ch].ES = (uint32_t *)(0x40008004);
     b94:	ldr	r7, [pc, #80]	; (be8 <DMA_allocate+0xac>)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
	
	DMAS[ch].channel=ch;
	DMAS[ch].TCD = (DMA_TCD *)(DMA_TCD_BASE + ch * 32);
     b96:	add.w	r2, r3, #33554432	; 0x2000000
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
	
	DMAS[ch].channel=ch;
     b9a:	lsls	r0, r3, #4
	DMAS[ch].TCD = (DMA_TCD *)(DMA_TCD_BASE + ch * 32);
     b9c:	add.w	r2, r2, #1152	; 0x480
     ba0:	lsls	r2, r2, #5
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
	
	DMAS[ch].channel=ch;
     ba2:	adds	r4, r5, r0
	DMAS[ch].TCD = (DMA_TCD *)(DMA_TCD_BASE + ch * 32);
     ba4:	str	r2, [r5, r0]
	DMAS[ch].TCD->DLAST_SGA=0;
	DMAS[ch].TCD->CSR=0;
	DMAS[ch].TCD->BITER=0;
	
	DMAS[ch].ES = (uint32_t *)(0x40008004);
	DMA_CDNE = ch;
     ba6:	uxtb	r5, r3
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
	
	DMAS[ch].channel=ch;
     ba8:	str	r3, [r4, #8]
	DMAS[ch].TCD = (DMA_TCD *)(DMA_TCD_BASE + ch * 32);
	DMAS[ch].TCD->SADDR=0;
     baa:	str	r1, [r2, #0]
	DMAS[ch].TCD->SOFF=0;
     bac:	strh	r1, [r2, #4]
	DMAS[ch].TCD->ATTR=0;
     bae:	strh	r1, [r2, #6]
	DMAS[ch].TCD->NBYTES=0;
     bb0:	str	r1, [r2, #8]
	DMAS[ch].TCD->SLAST=0;
     bb2:	str	r1, [r2, #12]
	DMAS[ch].TCD->DADDR=0;
     bb4:	str	r1, [r2, #16]
	DMAS[ch].TCD->DOFF=0;
     bb6:	strh	r1, [r2, #20]
	DMAS[ch].TCD->CITER=0;
     bb8:	strh	r1, [r2, #22]
	DMAS[ch].TCD->DLAST_SGA=0;
     bba:	str	r1, [r2, #24]
	DMAS[ch].TCD->CSR=0;
     bbc:	strh	r1, [r2, #28]
	DMAS[ch].TCD->BITER=0;
     bbe:	strh	r1, [r2, #30]
	
	DMAS[ch].ES = (uint32_t *)(0x40008004);
     bc0:	str	r7, [r4, #4]
	DMA_CDNE = ch;
     bc2:	strb	r5, [r6, #0]
	return &DMAS[ch];
     bc4:	mov	r0, r4
     bc6:	pop	{r4, r5, r6, r7, pc}
} 

static int DMA_getChannel(int prio)
{	int ch;
	//find proper DMA according to its default priority (0 is lowest 15 is highest priority)
	ch= 4*(prio/4)+(3-(prio %4));
     bc8:	subs	r2, #1
     bca:	orn	r2, r2, #3
     bce:	adds	r2, #1
     bd0:	b.n	b54 <DMA_allocate+0x18>

#define DMA_TCD_BASE 0x40009000 
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
     bd2:	movs	r0, #0
	DMAS[ch].TCD->BITER=0;
	
	DMAS[ch].ES = (uint32_t *)(0x40008004);
	DMA_CDNE = ch;
	return &DMAS[ch];
}
     bd4:	pop	{r4, r5, r6, r7, pc}
     bd6:	nop
     bd8:	.word	0x80000003
     bdc:	.word	0x1fff1328
     be0:	.word	0x1fff132c
     be4:	.word	0x4000801c
     be8:	.word	0x40008004

00000bec <DMA_source>:
}

void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     bec:	subs	r3, r2, #1
     bee:	cmp	r3, #1
	ch=dma->channel;
	CLEAR_BIT(dma_channel_allocated_mask,(1<<ch));
}

void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;
     bf0:	push	{r4}

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     bf2:	bls.n	bfe <DMA_source+0x12>
     bf4:	cmp	r2, #4
     bf6:	beq.n	bfe <DMA_source+0x12>
	TCD->SADDR = p;
	TCD->SOFF = 0;
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
	TCD->NBYTES = wordsize;
	TCD->SLAST = 0;
}
     bf8:	ldr.w	r4, [sp], #4
     bfc:	bx	lr
	ch=dma->channel;
	CLEAR_BIT(dma_channel_allocated_mask,(1<<ch));
}

void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;
     bfe:	ldr	r3, [r0, #0]

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 0;
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
     c00:	lsls	r4, r2, #7
     c02:	ldrh	r0, [r3, #6]

void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
     c04:	str	r1, [r3, #0]
	TCD->SOFF = 0;
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
     c06:	and.w	r1, r4, #1792	; 0x700
     c0a:	orrs	r1, r0
void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 0;
     c0c:	movs	r0, #0
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
	TCD->NBYTES = wordsize;
     c0e:	str	r2, [r3, #8]
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 0;
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
     c10:	strh	r1, [r3, #6]
void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 0;
     c12:	strh	r0, [r3, #4]
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
	TCD->NBYTES = wordsize;
	TCD->SLAST = 0;
     c14:	str	r0, [r3, #12]
}
     c16:	ldr.w	r4, [sp], #4
     c1a:	bx	lr

00000c1c <DMA_source_2ch>:

void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     c1c:	subs	r3, r2, #1
     c1e:	cmp	r3, #1
	TCD->NBYTES = wordsize;
	TCD->SLAST = 0;
}

void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;
     c20:	push	{r4}

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     c22:	bls.n	c2e <DMA_source_2ch+0x12>
     c24:	cmp	r2, #4
     c26:	beq.n	c2e <DMA_source_2ch+0x12>
//	TCD->SLAST = -8;

	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2) | DMA_TCD_ATTR_SMOD(3);
	TCD->NBYTES = 2*wordsize;
	TCD->SLAST = 0;
}
     c28:	ldr.w	r4, [sp], #4
     c2c:	bx	lr
	TCD->NBYTES = wordsize;
	TCD->SLAST = 0;
}

void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;
     c2e:	ldr	r3, [r0, #0]
//	TCD->NBYTES = DMA_TCD_NBYTES_SMLOE |
//					DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
//					DMA_TCD_NBYTES_MLOFFYES_NBYTES(2*wordsize);
//	TCD->SLAST = -8;

	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2) | DMA_TCD_ATTR_SMOD(3);
     c30:	ldrh	r0, [r3, #6]

void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
     c32:	str	r1, [r3, #0]
//	TCD->NBYTES = DMA_TCD_NBYTES_SMLOE |
//					DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
//					DMA_TCD_NBYTES_MLOFFYES_NBYTES(2*wordsize);
//	TCD->SLAST = -8;

	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2) | DMA_TCD_ATTR_SMOD(3);
     c34:	lsls	r1, r2, #7
     c36:	orr.w	r0, r0, #6144	; 0x1800
     c3a:	and.w	r1, r1, #1792	; 0x700
void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 4;
     c3e:	movs	r4, #4
//	TCD->NBYTES = DMA_TCD_NBYTES_SMLOE |
//					DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
//					DMA_TCD_NBYTES_MLOFFYES_NBYTES(2*wordsize);
//	TCD->SLAST = -8;

	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2) | DMA_TCD_ATTR_SMOD(3);
     c40:	orrs	r1, r0
	TCD->NBYTES = 2*wordsize;
     c42:	lsls	r2, r2, #1
	TCD->SLAST = 0;
     c44:	movs	r0, #0
void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 4;
     c46:	strh	r4, [r3, #4]
//	TCD->NBYTES = DMA_TCD_NBYTES_SMLOE |
//					DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
//					DMA_TCD_NBYTES_MLOFFYES_NBYTES(2*wordsize);
//	TCD->SLAST = -8;

	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2) | DMA_TCD_ATTR_SMOD(3);
     c48:	strh	r1, [r3, #6]
	TCD->NBYTES = 2*wordsize;
     c4a:	str	r2, [r3, #8]
	TCD->SLAST = 0;
     c4c:	str	r0, [r3, #12]
}
     c4e:	ldr.w	r4, [sp], #4
     c52:	bx	lr

00000c54 <DMA_destinationBuffer>:
	TCD->NBYTES = 2*wordsize;
	TCD->DLAST_SGA = 0;
}

void DMA_destinationBuffer(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;
     c54:	push	{r4, r5}

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     c56:	subs	r4, r3, #1
     c58:	cmp	r4, #1
     c5a:	bls.n	c64 <DMA_destinationBuffer+0x10>
     c5c:	cmp	r3, #4
     c5e:	beq.n	c64 <DMA_destinationBuffer+0x10>
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*len; // is in bytes
	TCD->BITER = TCD->CITER = len; // number of major transfers
}
     c60:	pop	{r4, r5}
     c62:	bx	lr
	TCD->NBYTES = 2*wordsize;
	TCD->DLAST_SGA = 0;
}

void DMA_destinationBuffer(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;
     c64:	ldr	r0, [r0, #0]

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     c66:	ldrh	r4, [r0, #6]

void DMA_destinationBuffer(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
     c68:	str	r1, [r0, #16]
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     c6a:	ubfx	r5, r3, #1, #3
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*len; // is in bytes
     c6e:	negs	r1, r3
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     c70:	orrs	r4, r5
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*len; // is in bytes
     c72:	mul.w	r1, r2, r1
	TCD->BITER = TCD->CITER = len; // number of major transfers
     c76:	uxth	r2, r2
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     c78:	strh	r4, [r0, #6]
void DMA_destinationBuffer(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
     c7a:	strh	r3, [r0, #20]
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*len; // is in bytes
     c7c:	str	r1, [r0, #24]
	TCD->BITER = TCD->CITER = len; // number of major transfers
     c7e:	strh	r2, [r0, #22]
     c80:	strh	r2, [r0, #30]
}
     c82:	pop	{r4, r5}
     c84:	bx	lr
     c86:	nop

00000c88 <DMA_destinationBuffer_2ch>:

void DMA_destinationBuffer_2ch(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;
     c88:	push	{r4, r5, r6}

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     c8a:	subs	r4, r3, #1
     c8c:	cmp	r4, #1
     c8e:	bls.n	c98 <DMA_destinationBuffer_2ch+0x10>
     c90:	cmp	r3, #4
     c92:	beq.n	c98 <DMA_destinationBuffer_2ch+0x10>
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*2*len; // is in bytes, is twice the size of single transfer buffer
	TCD->BITER = TCD->CITER = len; // number of major transfers
}
     c94:	pop	{r4, r5, r6}
     c96:	bx	lr
	TCD->DLAST_SGA = -wordsize*len; // is in bytes
	TCD->BITER = TCD->CITER = len; // number of major transfers
}

void DMA_destinationBuffer_2ch(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;
     c98:	ldr	r0, [r0, #0]
	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*2*len; // is in bytes, is twice the size of single transfer buffer
     c9a:	lsls	r4, r2, #1
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     c9c:	ldrh	r5, [r0, #6]

void DMA_destinationBuffer_2ch(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
     c9e:	str	r1, [r0, #16]
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     ca0:	ubfx	r6, r3, #1, #3
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*2*len; // is in bytes, is twice the size of single transfer buffer
     ca4:	negs	r1, r4
	TCD->BITER = TCD->CITER = len; // number of major transfers
     ca6:	uxth	r2, r2
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     ca8:	orr.w	r4, r6, r5
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*2*len; // is in bytes, is twice the size of single transfer buffer
     cac:	mul.w	r1, r3, r1
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     cb0:	strh	r4, [r0, #6]
void DMA_destinationBuffer_2ch(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
     cb2:	strh	r3, [r0, #20]
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*2*len; // is in bytes, is twice the size of single transfer buffer
     cb4:	str	r1, [r0, #24]
	TCD->BITER = TCD->CITER = len; // number of major transfers
     cb6:	strh	r2, [r0, #22]
     cb8:	strh	r2, [r0, #30]
}
     cba:	pop	{r4, r5, r6}
     cbc:	bx	lr
     cbe:	nop

00000cc0 <DMA_interruptAtCompletion>:

	TCD->BITER = TCD->CITER = len; // number of words
}

void DMA_interruptAtCompletion(DMA_STRUCT *dma) 
{ 	DMA_TCD *TCD=dma->TCD;
     cc0:	ldr	r2, [r0, #0]
	TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
     cc2:	ldrh	r3, [r2, #28]
     cc4:	orr.w	r3, r3, #2
     cc8:	strh	r3, [r2, #28]
     cca:	bx	lr

00000ccc <DMA_interruptAtHalf>:
}

void DMA_interruptAtHalf(DMA_STRUCT *dma) 
{ 	DMA_TCD *TCD=dma->TCD;
     ccc:	ldr	r2, [r0, #0]
	TCD->CSR |= DMA_TCD_CSR_INTHALF;
     cce:	ldrh	r3, [r2, #28]
     cd0:	orr.w	r3, r3, #4
     cd4:	strh	r3, [r2, #28]
     cd6:	bx	lr

00000cd8 <DMA_enable>:
	TCD->CSR = DMA_TCD_CSR_START;
}

void DMA_enable(DMA_STRUCT *dma) 
{
	DMA_SERQ = dma->channel;
     cd8:	ldr	r3, [pc, #4]	; (ce0 <DMA_enable+0x8>)
     cda:	ldrb	r2, [r0, #8]
     cdc:	strb	r2, [r3, #0]
     cde:	bx	lr
     ce0:	.word	0x4000801b

00000ce4 <DMA_disable>:
}

void DMA_disable(DMA_STRUCT *dma) 
{
	DMA_CERQ = dma->channel;
     ce4:	ldr	r3, [pc, #4]	; (cec <DMA_disable+0x8>)
     ce6:	ldrb	r2, [r0, #8]
     ce8:	strb	r2, [r3, #0]
     cea:	bx	lr
     cec:	.word	0x4000801a

00000cf0 <DMA_haltAll>:
{ 	DMA_TCD *TCD=dma->TCD;
	TCD->CSR |= DMA_TCD_CSR_DREQ;
}

void DMA_haltAll(void)
{ 	SET_BIT(DMA_CR,DMA_CR_HALT);
     cf0:	ldr	r2, [pc, #8]	; (cfc <DMA_haltAll+0xc>)
     cf2:	ldr	r3, [r2, #0]
     cf4:	orr.w	r3, r3, #32
     cf8:	str	r3, [r2, #0]
     cfa:	bx	lr
     cfc:	.word	0x40008000

00000d00 <DMA_startAll>:
}

void DMA_startAll(void)
{ 	CLEAR_BIT(DMA_CR,DMA_CR_HALT);
     d00:	ldr	r2, [pc, #8]	; (d0c <DMA_startAll+0xc>)
     d02:	ldr	r3, [r2, #0]
     d04:	bic.w	r3, r3, #32
     d08:	str	r3, [r2, #0]
     d0a:	bx	lr
     d0c:	.word	0x40008000

00000d10 <DMA_destinationAddress>:
	return (void *)(TCD->SADDR);
}

void *DMA_destinationAddress(DMA_STRUCT *dma) 
{ 	DMA_TCD *TCD=dma->TCD;
	return (void *)(TCD->DADDR);
     d10:	ldr	r3, [r0, #0]
}
     d12:	ldr	r0, [r3, #16]
     d14:	bx	lr
     d16:	nop

00000d18 <DMA_triggerAtHardwareEvent>:

//=====================================================================================	
void DMA_triggerAtHardwareEvent(DMA_STRUCT *dma, uint8_t source) 
{
	volatile uint8_t *mux;
	mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + dma->channel;  // on T3.6 are 32 DMA entries
     d18:	ldr	r3, [r0, #8]
     d1a:	add.w	r3, r3, #1073741824	; 0x40000000
     d1e:	add.w	r3, r3, #135168	; 0x21000
	*mux = 0;
	*mux = (source & 63) | DMAMUX_ENABLE;
     d22:	and.w	r1, r1, #63	; 0x3f
     d26:	orr.w	r1, r1, #128	; 0x80
//=====================================================================================	
void DMA_triggerAtHardwareEvent(DMA_STRUCT *dma, uint8_t source) 
{
	volatile uint8_t *mux;
	mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + dma->channel;  // on T3.6 are 32 DMA entries
	*mux = 0;
     d2a:	movs	r2, #0
     d2c:	strb	r2, [r3, #0]
	*mux = (source & 63) | DMAMUX_ENABLE;
     d2e:	strb	r1, [r3, #0]
     d30:	bx	lr
     d32:	nop

00000d34 <DMA_attachInterrupt>:
}

//=====================================================================================	
void DMA_attachInterrupt(DMA_STRUCT *dma, void (*isr)(void)) 
{
	_VectorsRam[IRQ_DMA_CH0 + 16 + dma->channel % 16] = isr;	// on T3.6 are only 16 interrupt slots
     d34:	ldr	r2, [r0, #8]
     d36:	ldr	r3, [pc, #56]	; (d70 <DMA_attachInterrupt+0x3c>)
     d38:	ands	r3, r2
     d3a:	cmp	r3, #0
	*mux = (source & 63) | DMAMUX_ENABLE;
}

//=====================================================================================	
void DMA_attachInterrupt(DMA_STRUCT *dma, void (*isr)(void)) 
{
     d3c:	push	{r4, r5}
	_VectorsRam[IRQ_DMA_CH0 + 16 + dma->channel % 16] = isr;	// on T3.6 are only 16 interrupt slots
     d3e:	blt.n	d66 <DMA_attachInterrupt+0x32>
	NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + dma->channel % 16);
     d40:	asrs	r2, r3, #5
     d42:	lsls	r2, r2, #2
     d44:	add.w	r2, r2, #3758096384	; 0xe0000000
}

//=====================================================================================	
void DMA_attachInterrupt(DMA_STRUCT *dma, void (*isr)(void)) 
{
	_VectorsRam[IRQ_DMA_CH0 + 16 + dma->channel % 16] = isr;	// on T3.6 are only 16 interrupt slots
     d48:	add.w	r5, r3, #16
     d4c:	ldr	r4, [pc, #36]	; (d74 <DMA_attachInterrupt+0x40>)
	NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + dma->channel % 16);
     d4e:	add.w	r2, r2, #57600	; 0xe100
     d52:	and.w	r3, r3, #31
     d56:	movs	r0, #1
     d58:	lsl.w	r3, r0, r3
}

//=====================================================================================	
void DMA_attachInterrupt(DMA_STRUCT *dma, void (*isr)(void)) 
{
	_VectorsRam[IRQ_DMA_CH0 + 16 + dma->channel % 16] = isr;	// on T3.6 are only 16 interrupt slots
     d5c:	str.w	r1, [r4, r5, lsl #2]
	NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + dma->channel % 16);
     d60:	str	r3, [r2, #0]
}
     d62:	pop	{r4, r5}
     d64:	bx	lr
}

//=====================================================================================	
void DMA_attachInterrupt(DMA_STRUCT *dma, void (*isr)(void)) 
{
	_VectorsRam[IRQ_DMA_CH0 + 16 + dma->channel % 16] = isr;	// on T3.6 are only 16 interrupt slots
     d66:	subs	r3, #1
     d68:	orn	r3, r3, #15
     d6c:	adds	r3, #1
     d6e:	b.n	d40 <DMA_attachInterrupt+0xc>
     d70:	.word	0x8000000f
     d74:	.word	0x1fff0200

00000d78 <DMA_clearInterrupt>:
	NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + dma->channel % 16);
}

void DMA_clearInterrupt(DMA_STRUCT *dma) 
{
	DMA_CINT = dma->channel;	// on T3.6 CINT has 32 entries
     d78:	ldr	r3, [pc, #4]	; (d80 <DMA_clearInterrupt+0x8>)
     d7a:	ldrb	r2, [r0, #8]
     d7c:	strb	r2, [r3, #0]
     d7e:	bx	lr
     d80:	.word	0x4000801f

00000d84 <llwuISR>:

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     d84:	ldr	r2, [pc, #16]	; (d98 <llwuISR+0x14>)
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     d86:	ldr	r1, [pc, #20]	; (d9c <llwuISR+0x18>)

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     d88:	ldrb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     d8a:	movs	r0, #0

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     d8c:	orr.w	r3, r3, #32
     d90:	strb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     d92:	str	r0, [r1, #0]
     d94:	bx	lr
     d96:	nop
     d98:	.word	0x4007c00d
     d9c:	.word	0x4003d01c

00000da0 <hibernate>:
       asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void hibernate(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
     da0:	push	{r3, r4, r5, r6, r7, lr}
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     da2:	ldr	r4, [pc, #268]	; (eb0 <hibernate+0x110>)
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     da4:	ldr	r2, [pc, #268]	; (eb4 <hibernate+0x114>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     da6:	ldr	r3, [r4, #0]
    RTC_IER = 0;// clear RTC interrupts
}

void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
     da8:	ldr	r1, [pc, #268]	; (eb8 <hibernate+0x118>)
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
     daa:	ldr	r7, [pc, #272]	; (ebc <hibernate+0x11c>)
  LLWU_PE2 = 0;
     dac:	ldr	r6, [pc, #272]	; (ec0 <hibernate+0x120>)
  LLWU_PE3 = 0;
     dae:	ldr	r5, [pc, #276]	; (ec4 <hibernate+0x124>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     db0:	orr.w	r3, r3, #536870912	; 0x20000000
     db4:	str	r3, [r4, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     db6:	ldr	r3, [r2, #0]
     db8:	orr.w	r3, r3, #256	; 0x100
       asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void hibernate(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
     dbc:	mov	r4, r0
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     dbe:	str	r3, [r2, #0]
    RTC_IER = 0;// clear RTC interrupts
}

void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
     dc0:	movs	r0, #21
     dc2:	bl	99fc <attachInterruptVector>
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
     dc6:	ldr	r3, [pc, #256]	; (ec8 <hibernate+0x128>)
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
     dc8:	ldr.w	ip, [pc, #288]	; eec <hibernate+0x14c>
  NVIC_ENABLE_IRQ( IRQ_LLWU );
     dcc:	ldr.w	lr, [pc, #288]	; ef0 <hibernate+0x150>
//
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
     dd0:	ldr	r1, [pc, #248]	; (ecc <hibernate+0x12c>)
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
     dd2:	ldr	r0, [pc, #252]	; (ed0 <hibernate+0x130>)
}

void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
     dd4:	movs	r2, #32
     dd6:	strb	r2, [r3, #0]
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
     dd8:	mov.w	r3, #2097152	; 0x200000
     ddc:	str.w	r3, [ip]
  NVIC_ENABLE_IRQ( IRQ_LLWU );
     de0:	str.w	r3, [lr]
//
  LLWU_PE1 = 0;
     de4:	movs	r3, #0
     de6:	strb	r3, [r7, #0]
  LLWU_PE2 = 0;
     de8:	strb	r3, [r6, #0]
  LLWU_PE3 = 0;
     dea:	strb	r3, [r5, #0]
  LLWU_PE4 = 0;
     dec:	strb	r3, [r1, #0]
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
     dee:	strb	r3, [r0, #0]
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     df0:	sub.w	r0, r0, #217088	; 0x35000
  LLWU_PE2 = 0;
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
  LLWU_PE6 = 0;
     df4:	strb	r3, [r7, #5]
  LLWU_PE7 = 0;
     df6:	strb	r3, [r6, #5]
  LLWU_PE8 = 0;
     df8:	strb	r3, [r5, #5]
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
     dfa:	strb	r2, [r1, #5]
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     dfc:	ldr	r2, [r0, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     dfe:	ldr	r1, [pc, #212]	; (ed4 <hibernate+0x134>)
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
     e00:	ldr.w	ip, [pc, #240]	; ef4 <hibernate+0x154>
    PORTA_PCR1 = PORT_PCR_MUX(0);
     e04:	ldr.w	lr, [pc, #240]	; ef8 <hibernate+0x158>
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     e08:	orr.w	r2, r2, #67108864	; 0x4000000
     e0c:	str	r2, [r0, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     e0e:	ldr	r2, [r1, #0]
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
    PORTA_PCR3 = PORT_PCR_MUX(0);

    PORTB_PCR2 = PORT_PCR_MUX(0);
    PORTB_PCR3 = PORT_PCR_MUX(0);
     e10:	add.w	r0, r0, #12288	; 0x3000
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
     e14:	sub.w	r7, r7, #207872	; 0x32c00
    PORTA_PCR3 = PORT_PCR_MUX(0);
     e18:	sub.w	r6, r6, #207872	; 0x32c00

    PORTB_PCR2 = PORT_PCR_MUX(0);
     e1c:	sub.w	r5, r5, #203776	; 0x31c00
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
     e20:	sub.w	r7, r7, #1016	; 0x3f8
    PORTA_PCR3 = PORT_PCR_MUX(0);
     e24:	subw	r6, r6, #1013	; 0x3f5

    PORTB_PCR2 = PORT_PCR_MUX(0);
     e28:	subw	r5, r5, #1018	; 0x3fa
    PORTB_PCR3 = PORT_PCR_MUX(0);
     e2c:	adds	r0, #8
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     e2e:	orr.w	r2, r2, #1073741824	; 0x40000000
     e32:	str	r2, [r1, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e34:	ldr	r2, [pc, #160]	; (ed8 <hibernate+0x138>)
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
     e36:	str.w	r3, [ip]
    PORTA_PCR1 = PORT_PCR_MUX(0);
     e3a:	str.w	r3, [lr]
    PORTA_PCR2 = PORT_PCR_MUX(0);
     e3e:	str	r3, [r7, #0]
    PORTA_PCR3 = PORT_PCR_MUX(0);
     e40:	str	r3, [r6, #0]

    PORTB_PCR2 = PORT_PCR_MUX(0);
     e42:	str	r3, [r5, #0]
    PORTB_PCR3 = PORT_PCR_MUX(0);
     e44:	str	r3, [r0, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e46:	ldr	r0, [r2, #0]

#define VLLS_MODE VLLS0
void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     e48:	ldr	r5, [pc, #144]	; (edc <hibernate+0x13c>)
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
     e4a:	ldr	r7, [pc, #148]	; (ee0 <hibernate+0x140>)
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e4c:	sub.w	r1, r1, #40704	; 0x9f00
   RTC_IER |= RTC_IER_TAIE_MASK;
     e50:	sub.w	lr, lr, #48896	; 0xbf00
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e54:	subs	r1, #248	; 0xf8
   RTC_IER |= RTC_IER_TAIE_MASK;
     e56:	sub.w	lr, lr, #232	; 0xe8
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e5a:	add	r0, r4
     e5c:	str	r0, [r1, #0]
   RTC_IER |= RTC_IER_TAIE_MASK;
     e5e:	ldr.w	r1, [lr]

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
     e62:	ldr	r4, [pc, #128]	; (ee4 <hibernate+0x144>)
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
     e64:	ldr	r0, [pc, #128]	; (ee8 <hibernate+0x148>)
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
   RTC_IER |= RTC_IER_TAIE_MASK;
     e66:	orr.w	r1, r1, #4
     e6a:	str.w	r1, [lr]

#define VLLS_MODE VLLS0
void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     e6e:	ldrb	r1, [r5, #5]
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     e70:	add.w	r2, r2, #266240	; 0x41000

#define VLLS_MODE VLLS0
void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     e74:	and.w	r1, r1, #223	; 0xdf
     e78:	strb	r1, [r5, #5]
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     e7a:	adds	r2, #1
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
     e7c:	movs	r1, #2
     e7e:	strb	r1, [r7, #0]
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     e80:	ldrb	r1, [r2, #0]
     e82:	and.w	r1, r1, #248	; 0xf8
     e86:	strb	r1, [r2, #0]
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx
     e88:	ldrb	r1, [r2, #0]

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
     e8a:	add.w	r6, r6, #216064	; 0x34c00
     e8e:	addw	r6, r6, #1014	; 0x3f6
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx
     e92:	orr.w	r1, r1, #4
     e96:	strb	r1, [r2, #0]

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
     e98:	strb	r3, [r6, #0]
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;
     e9a:	ldrb	r3, [r2, #0]

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
     e9c:	ldr	r3, [r4, #0]
     e9e:	bic.w	r3, r3, #2
     ea2:	str	r3, [r4, #0]
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
     ea4:	ldr	r3, [r0, #0]
     ea6:	orr.w	r3, r3, #4
     eaa:	str	r3, [r0, #0]
       asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
     eac:	wfi
     eae:	pop	{r3, r4, r5, r6, r7, pc}
     eb0:	.word	0x4004803c
     eb4:	.word	0x4003d010
     eb8:	.word	0x00000d85
     ebc:	.word	0x4007c000
     ec0:	.word	0x4007c001
     ec4:	.word	0x4007c002
     ec8:	.word	0xe000e415
     ecc:	.word	0x4007c003
     ed0:	.word	0x4007c004
     ed4:	.word	0x40047000
     ed8:	.word	0x4003d000
     edc:	.word	0x40064000
     ee0:	.word	0x4007e000
     ee4:	.word	0xe000e010
     ee8:	.word	0xe000ed10
     eec:	.word	0xe000e280
     ef0:	.word	0xe000e100
     ef4:	.word	0x40049000
     ef8:	.word	0x40049004

00000efc <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     efc:	movs	r0, #0
     efe:	bx	lr

00000f00 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     f00:	mov.w	r0, #4294967295
     f04:	bx	lr
     f06:	nop

00000f08 <mySystick_isr()>:
int doHibernate=0;

// to disable EventResponder
// (https://forum.pjrc.com/threads/46442-Minimal-Blink-fails-with-void-yield()?p=153602&viewfull=1#post153602)
extern "C" volatile uint32_t systick_millis_count;
void mySystick_isr(void){ systick_millis_count++;}
     f08:	ldr	r2, [pc, #8]	; (f14 <mySystick_isr()+0xc>)
     f0a:	ldr	r3, [r2, #0]
     f0c:	adds	r3, #1
     f0e:	str	r3, [r2, #0]
     f10:	bx	lr
     f12:	nop
     f14:	.word	0x200203c0

00000f18 <Logger<long, 300, 128, 64>::drain()>:
        return -1;
    }
  }
  
template <typename T, int nq, int nd, int na>
void * Logger<T,nq,nd,na>:: drain(void)
     f18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    uint16_t n;
    if(head>tail) n=head-tail; else n = nq + head -tail;
     f1c:	add.w	r9, r0, #154624	; 0x25c00
     f20:	ldrsh.w	r8, [r9, #200]	; 0xc8
     f24:	ldrsh.w	r3, [r9, #202]	; 0xca
     f28:	cmp	r8, r3
     f2a:	it	le
     f2c:	addle.w	r2, r8, #300	; 0x12c
     f30:	uxth	r3, r3
     f32:	ite	gt
     f34:	rsbgt	r2, r3, r8
     f38:	suble	r2, r2, r3
     f3a:	uxth	r2, r2

    int16_t nb=na; // na is number of buffers to fetched from queue and written to disk
    if(n>nb)
     f3c:	cmp	r2, #64	; 0x40
  
template <typename T, int nq, int nd, int na>
void * Logger<T,nq,nd,na>:: drain(void)
  {
    uint16_t n;
    if(head>tail) n=head-tail; else n = nq + head -tail;
     f3e:	mov	r5, r3

    int16_t nb=na; // na is number of buffers to fetched from queue and written to disk
    if(n>nb)
     f40:	ble.n	fa8 <Logger<long, 300, 128, 64>::drain()+0x90>
    {
      T *bptr = buffer;
     f42:	add.w	fp, r9, #208	; 0xd0
     f46:	mov	lr, fp
     f48:	movs	r6, #64	; 0x40
          // copy to buffer     
          { T *src = queue[t];
            if(src)
            { for(int jj=0; jj<nd; jj++) bptr[jj]=src[jj];
              pool.release(t);
              queue[t]=0;
     f4a:	mov.w	sl, #0
      T *bptr = buffer;
      //
      uint16_t t = tail;
      while(--nb>=0)
      {
        if (t != head) 
     f4e:	cmp	r5, r8
     f50:	beq.n	f90 <Logger<long, 300, 128, 64>::drain()+0x78>
        {
          if (++t >= nq) t = 0;
     f52:	adds	r5, #1
     f54:	uxth	r5, r5
     f56:	cmp.w	r5, #300	; 0x12c
     f5a:	bcs.n	f9e <Logger<long, 300, 128, 64>::drain()+0x86>
     f5c:	mov	r7, r5
     f5e:	sxth.w	ip, r5
     f62:	add.w	r7, r0, r7, lsl #2
          
          // copy to buffer     
          { T *src = queue[t];
     f66:	add.w	r7, r7, #153600	; 0x25800
     f6a:	ldr	r4, [r7, #24]
            if(src)
     f6c:	cbz	r4, f88 <Logger<long, 300, 128, 64>::drain()+0x70>
     f6e:	subs	r3, r4, #4
     f70:	sub.w	r2, lr, #4
     f74:	add.w	r4, r4, #508	; 0x1fc
            { for(int jj=0; jj<nd; jj++) bptr[jj]=src[jj];
     f78:	ldr.w	r1, [r3, #4]!
     f7c:	str.w	r1, [r2, #4]!
     f80:	cmp	r4, r3
     f82:	bne.n	f78 <Logger<long, 300, 128, 64>::drain()+0x60>
              pool.release(t);
              queue[t]=0;
     f84:	str.w	sl, [r7, #24]
            }
          }
          tail = t;
     f88:	strh.w	ip, [r9, #202]	; 0xca
          bptr += nd;
     f8c:	add.w	lr, lr, #512	; 0x200
     f90:	subs	r6, #1
     f92:	uxth	r6, r6
    if(n>nb)
    {
      T *bptr = buffer;
      //
      uint16_t t = tail;
      while(--nb>=0)
     f94:	cmp	r6, #0
     f96:	bne.n	f4e <Logger<long, 300, 128, 64>::drain()+0x36>
          }
          tail = t;
          bptr += nd;
        }
      }
      return (void *)buffer;
     f98:	mov	r0, fp
    }
    return 0;
  }
     f9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f9e:	mov.w	ip, #0
     fa2:	mov	r7, ip
      uint16_t t = tail;
      while(--nb>=0)
      {
        if (t != head) 
        {
          if (++t >= nq) t = 0;
     fa4:	mov	r5, ip
     fa6:	b.n	f62 <Logger<long, 300, 128, 64>::drain()+0x4a>
          bptr += nd;
        }
      }
      return (void *)buffer;
    }
    return 0;
     fa8:	movs	r0, #0
     faa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fae:	nop

00000fb0 <Logger<long, 300, 128, 64>::haveFinished()>:
  //
  void clear(void);
  //
  void *drain(void);
  int16_t write(void *src);
  void haveFinished(void) {enabled=0;} // got signal from uSD_IF
     fb0:	add.w	r0, r0, #154624	; 0x25c00
     fb4:	movs	r3, #0
     fb6:	strh.w	r3, [r0, #204]	; 0xcc
     fba:	bx	lr

00000fbc <c_mFS::~c_mFS()>:
{ struct tm tx=seconds2tm(RTC_TSR);  
  return tx.tm_hour;
}

uint16_t FS_started=0;
class c_mFS
     fbc:	push	{r4, lr}
class FsFile {
#endif  // ENABLE_ARDUINO_FEATURES
 public:
  FsFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsFile() {close();}
     fbe:	ldr	r3, [pc, #20]	; (fd4 <c_mFS::~c_mFS()+0x18>)
     fc0:	str.w	r3, [r0, #1208]	; 0x4b8
     fc4:	mov	r4, r0
     fc6:	add.w	r0, r0, #1208	; 0x4b8
     fca:	bl	32bc <FsFile::close()>
     fce:	mov	r0, r4
     fd0:	pop	{r4, pc}
     fd2:	nop
     fd4:	.word	0x00013858

00000fd8 <FsFile::peek()>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
     fd8:	ldr	r3, [r0, #72]	; 0x48
           m_xFile ? m_xFile->peek() : -1;
     fda:	cbz	r3, fe2 <FsFile::peek()+0xa>
     fdc:	mov	r0, r3
     fde:	b.w	551c <FatFile::peek()>
     fe2:	ldr	r0, [r0, #76]	; 0x4c
     fe4:	cbz	r0, fea <FsFile::peek()+0x12>
     fe6:	b.w	3718 <ExFatFile::peek()>
  }
     fea:	mov.w	r0, #4294967295
     fee:	bx	lr

00000ff0 <FsFile::flush()>:
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {sync();}
     ff0:	ldr	r3, [r0, #72]	; 0x48
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     ff2:	cbz	r3, ffa <FsFile::flush()+0xa>
     ff4:	mov	r0, r3
     ff6:	b.w	56cc <FatFile::sync()>
     ffa:	ldr	r0, [r0, #76]	; 0x4c
     ffc:	cbz	r0, 1002 <FsFile::flush()+0x12>
     ffe:	b.w	49e8 <ExFatFile::sync()>
    1002:	bx	lr

00001004 <FsFile::available()>:
  operator bool() {return isOpen();}
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
    1004:	ldr	r2, [r0, #72]	; 0x48
           m_xFile ? m_xFile->available() : 0;
    1006:	cbz	r2, 1022 <FsFile::available()+0x1e>
  void fsetpos(fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
    1008:	ldrb	r3, [r2, #0]
    100a:	and.w	r3, r3, #8
    100e:	and.w	r0, r3, #255	; 0xff
    1012:	cbz	r3, 1056 <FsFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
    1014:	ldr	r3, [r2, #28]
    1016:	ldr	r0, [r2, #20]
    1018:	subs	r0, r3, r0
    101a:	it	mi
    101c:	mvnmi.w	r0, #2147483648	; 0x80000000
    1020:	bx	lr
    1022:	ldr	r1, [r0, #76]	; 0x4c
    1024:	cbz	r1, 1058 <FsFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
    1026:	ldrb.w	r3, [r1, #49]	; 0x31
    102a:	and.w	r3, r3, #8
    102e:	and.w	r0, r3, #255	; 0xff
    1032:	cbz	r3, 1056 <FsFile::available()+0x52>
    1034:	ldrd	r2, r3, [r1, #16]
    1038:	ldrd	r0, r1, [r1]
    103c:	subs	r0, r2, r0
    */
  operator bool() {return isOpen();}
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    103e:	push	{r4, r5}
    1040:	sbc.w	r1, r3, r1
    1044:	movs	r5, #0
    1046:	mvn.w	r4, #2147483648	; 0x80000000
    104a:	cmp	r5, r1
    104c:	it	eq
    104e:	cmpeq	r4, r0
    1050:	bcs.n	1054 <FsFile::available()+0x50>
    1052:	mov	r0, r4
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
  }
    1054:	pop	{r4, r5}
    1056:	bx	lr
    1058:	mov	r0, r1
    105a:	bx	lr

0000105c <FsFile::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    105c:	push	{lr}
    105e:	ldr	r3, [r0, #72]	; 0x48
    1060:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    1062:	cbz	r3, 107e <FsFile::read()+0x22>
    1064:	mov	r0, r3
    1066:	movs	r2, #1
    1068:	add.w	r1, sp, #7
    106c:	bl	5380 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    1070:	cmp	r0, #1
    1072:	bne.n	108e <FsFile::read()+0x32>
    1074:	ldrb.w	r0, [sp, #7]
  }
    1078:	add	sp, #12
    107a:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    107e:	ldr	r0, [r0, #76]	; 0x4c
    1080:	cbz	r0, 108e <FsFile::read()+0x32>
    1082:	movs	r2, #1
    1084:	add.w	r1, sp, #7
    1088:	bl	356c <ExFatFile::read(void*, unsigned int)>
    108c:	b.n	1070 <FsFile::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    108e:	mov.w	r0, #4294967295
    1092:	b.n	1078 <FsFile::read()+0x1c>

00001094 <FsFile::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {return write(&b, 1);}
    1094:	push	{lr}
    1096:	ldr	r3, [r0, #72]	; 0x48
    1098:	sub	sp, #12
    109a:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    109e:	cbz	r3, 10b2 <FsFile::write(unsigned char)+0x1e>
    10a0:	mov	r0, r3
    10a2:	movs	r2, #1
    10a4:	add.w	r1, sp, #7
    10a8:	bl	57fc <FatFile::write(void const*, unsigned int)>
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {return write(&b, 1);}
    10ac:	add	sp, #12
    10ae:	ldr.w	pc, [sp], #4
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    10b2:	ldr	r0, [r0, #76]	; 0x4c
    10b4:	cmp	r0, #0
    10b6:	beq.n	10ac <FsFile::write(unsigned char)+0x18>
    10b8:	movs	r2, #1
    10ba:	add.w	r1, sp, #7
    10be:	bl	4d44 <ExFatFile::write(void const*, unsigned int)>
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {return write(&b, 1);}
    10c2:	add	sp, #12
    10c4:	ldr.w	pc, [sp], #4

000010c8 <Logger<long, 300, 128, 64>::write(void*)>:
    }
    tail = t;
  }

template <typename T, int nq, int nd, int na>
int16_t Logger<T,nq,nd,na>:: write(void *inp)
    10c8:	push	{r4, r5, r6}
  {
    int16_t h;

    if(!enabled) return 0; // don't do anything
    10ca:	add.w	r6, r0, #154624	; 0x25c00
    10ce:	ldrsh.w	r5, [r6, #204]	; 0xcc
    10d2:	cbz	r5, 1116 <Logger<long, 300, 128, 64>::write(void*)+0x4e>
    
    h = head + 1;
    10d4:	ldrh.w	r5, [r6, #200]	; 0xc8
    if (h >= nq) h = 0;
    if (h == tail) {  // disaster
    10d8:	ldrsh.w	r3, [r6, #202]	; 0xca
  {
    int16_t h;

    if(!enabled) return 0; // don't do anything
    
    h = head + 1;
    10dc:	adds	r5, #1
    10de:	sxth	r5, r5
    if (h >= nq) h = 0;
    10e0:	cmp.w	r5, #300	; 0x12c
    10e4:	it	ge
    10e6:	movge	r5, #0
    if (h == tail) {  // disaster
    10e8:	cmp	r3, r5
    10ea:	beq.n	111c <Logger<long, 300, 128, 64>::write(void*)+0x54>
      overrun++;
      // simply ignore new data
      return -1;
    } 
    else 
    { queue[h] = pool.fetch(h);
    10ec:	add.w	r3, r5, #38400	; 0x9600
    10f0:	adds	r3, #6
class store
{ T pool[nb*nd];

  public:
  store(void) {;}
  T *fetch(int ii) {return &pool[ii*nd];}
    10f2:	add.w	r2, r0, #24
    10f6:	add.w	r2, r2, r5, lsl #9
      overrun++;
      // simply ignore new data
      return -1;
    } 
    else 
    { queue[h] = pool.fetch(h);
    10fa:	str.w	r2, [r0, r3, lsl #2]
    10fe:	add.w	r4, r1, #508	; 0x1fc
    1102:	subs	r2, #4
    1104:	subs	r3, r1, #4
      T *ptr = queue[h];
      if(ptr)
      { T *src = (T*) inp;
        for(int ii=0; ii<nd; ii++) ptr[ii]=src[ii];
    1106:	ldr.w	r1, [r3, #4]!
    110a:	str.w	r1, [r2, #4]!
    110e:	cmp	r3, r4
    1110:	bne.n	1106 <Logger<long, 300, 128, 64>::write(void*)+0x3e>
        head = h;
    1112:	strh.w	r5, [r6, #200]	; 0xc8
        return head;
      }
      else
        return -1;
    }
  }
    1116:	mov	r0, r5
    1118:	pop	{r4, r5, r6}
    111a:	bx	lr
    if(!enabled) return 0; // don't do anything
    
    h = head + 1;
    if (h >= nq) h = 0;
    if (h == tail) {  // disaster
      overrun++;
    111c:	ldr	r3, [r0, #4]
    111e:	adds	r3, #1
    1120:	str	r3, [r0, #4]
      // simply ignore new data
      return -1;
    1122:	mov.w	r5, #4294967295
    1126:	b.n	1116 <Logger<long, 300, 128, 64>::write(void*)+0x4e>

00001128 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1128:	push	{r4, r5, r6, lr}
    112a:	mov	r4, r0
    112c:	mov	r0, r1
    112e:	mov	r5, r1
    1130:	bl	d280 <strlen>
    1134:	ldr	r3, [r4, #0]
    1136:	mov	r2, r0
    1138:	mov	r1, r5
    113a:	mov	r0, r4
    113c:	ldr	r3, [r3, #4]
    113e:	ldmia.w	sp!, {r4, r5, r6, lr}
    1142:	bx	r3

00001144 <Print::println(__FlashStringHelper const*)>:
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1144:	push	{r3, r4, r5, lr}
    1146:	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1148:	mov	r0, r1
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    114a:	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    114c:	bl	d280 <strlen>
    1150:	ldr	r3, [r4, #0]
    1152:	mov	r2, r0
    1154:	mov	r1, r5
    1156:	ldr	r3, [r3, #4]
    1158:	mov	r0, r4
    115a:	blx	r3
    115c:	mov	r5, r0
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    115e:	mov	r0, r4
    1160:	bl	b010 <Print::println()>
    1164:	add	r0, r5
    1166:	pop	{r3, r4, r5, pc}

00001168 <seconds2tm(unsigned long)>:
  int tm_yday;
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
    1168:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    116c:	ldr	r6, [pc, #788]	; (1484 <seconds2tm(unsigned long)+0x31c>)
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
    116e:	ldr	r3, [pc, #792]	; (1488 <seconds2tm(unsigned long)+0x320>)
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    1170:	ldr	r2, [pc, #792]	; (148c <seconds2tm(unsigned long)+0x324>)
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    1172:	ldr	r7, [pc, #796]	; (1490 <seconds2tm(unsigned long)+0x328>)

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    1174:	ldr	r4, [pc, #796]	; (1494 <seconds2tm(unsigned long)+0x32c>)
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)

  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
  uint32_t days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= tt) year++;
    1176:	ldr.w	ip, [pc, #800]	; 1498 <seconds2tm(unsigned long)+0x330>
    117a:	ldr.w	lr, [pc, #800]	; 149c <seconds2tm(unsigned long)+0x334>

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    117e:	umull	r5, r6, r6, r1
    1182:	lsrs	r6, r6, #16
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
    1184:	umull	r8, r5, r3, r1
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    1188:	add.w	sl, r6, #4

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    118c:	umull	r8, r2, r2, r1
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
    1190:	lsrs	r5, r5, #5
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    1192:	umull	r8, r9, sl, r7

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    1196:	lsrs	r2, r2, #11
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
    1198:	umull	r7, r3, r3, r5
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    119c:	umull	r7, r4, r4, r2
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11a0:	rsb	r7, r9, sl
    11a4:	add.w	r7, r9, r7, lsr #1
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
    11a8:	lsrs	r3, r3, #5
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11aa:	lsrs	r7, r7, #2

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    11ac:	lsrs	r4, r4, #4
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
    11ae:	rsb	r3, r3, r3, lsl #4
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11b2:	rsb	r7, r7, r7, lsl #3

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    11b6:	add.w	r8, r4, r4, lsl #1
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11ba:	rsb	r7, r7, sl
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
    11be:	sub.w	r4, r5, r3, lsl #2
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
    11c2:	rsb	r5, r5, r5, lsl #4
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    11c6:	sub.w	r2, r2, r8, lsl #3
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11ca:	adds	r7, #1
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
    11cc:	sub.w	r1, r1, r5, lsl #2
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)

  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
  uint32_t days = 0;
    11d0:	movs	r3, #0
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
    11d2:	stmia.w	r0, {r1, r4}
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11d6:	str	r7, [r0, #24]

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    11d8:	str	r2, [r0, #8]
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)

  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
    11da:	mov	r4, r3
  uint32_t days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= tt) year++;
    11dc:	movw	r9, #365	; 0x16d
    11e0:	movs	r7, #100	; 0x64
    11e2:	mov.w	r8, #400	; 0x190
    11e6:	b.n	1204 <seconds2tm(unsigned long)+0x9c>
    11e8:	lsrs	r1, r1, #7
    11ea:	mls	r1, r8, r1, r2
    11ee:	cmp	r5, #0
    11f0:	bne.n	12cc <seconds2tm(unsigned long)+0x164>
    11f2:	cmp	r1, #0
    11f4:	ite	ne
    11f6:	movne	r2, r9
    11f8:	moveq.w	r2, #366	; 0x16e
    11fc:	add	r3, r2
    11fe:	cmp	r6, r3
    1200:	bcc.n	1226 <seconds2tm(unsigned long)+0xbe>
    1202:	adds	r4, #1
    1204:	addw	r2, r4, #1970	; 0x7b2
    1208:	umull	r5, r1, lr, r2
    120c:	lsrs	r5, r1, #5
    120e:	cmp	r4, ip
    1210:	mls	r5, r7, r5, r2
    1214:	beq.n	121c <seconds2tm(unsigned long)+0xb4>
    1216:	tst.w	r2, #3
    121a:	beq.n	11e8 <seconds2tm(unsigned long)+0x80>
    121c:	movw	r2, #365	; 0x16d
    1220:	add	r3, r2
    1222:	cmp	r6, r3
    1224:	bcs.n	1202 <seconds2tm(unsigned long)+0x9a>

  tx.tm_year = 1970+year; // year is NOT offset from 1970 

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
    1226:	ldr	r2, [pc, #624]	; (1498 <seconds2tm(unsigned long)+0x330>)
  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
  uint32_t days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= tt) year++;

  tx.tm_year = 1970+year; // year is NOT offset from 1970 
    1228:	addw	r5, r4, #1970	; 0x7b2

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
    122c:	cmp	r4, r2
  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
  uint32_t days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= tt) year++;

  tx.tm_year = 1970+year; // year is NOT offset from 1970 
    122e:	str	r5, [r0, #20]

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
    1230:	beq.w	1368 <seconds2tm(unsigned long)+0x200>
    1234:	ands.w	r7, r5, #3
    1238:	beq.n	12d2 <seconds2tm(unsigned long)+0x16a>
  tt  -= days; // now tt is days in this year, starting at 0
    123a:	mvn.w	r4, #364	; 0x16c
    123e:	add	r3, r4
    1240:	subs	r2, r6, r3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1242:	cmp	r2, #30
    1244:	bls.w	1424 <seconds2tm(unsigned long)+0x2bc>
    tt -= monthLength;
    1248:	sub.w	r3, r2, #31
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    124c:	cmp	r3, #27
    124e:	bls.w	1444 <seconds2tm(unsigned long)+0x2dc>
    tt -= monthLength;
    1252:	sub.w	r3, r2, #59	; 0x3b
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1256:	cmp	r3, #30
    1258:	bls.w	144a <seconds2tm(unsigned long)+0x2e2>
    tt -= monthLength;
    125c:	sub.w	r3, r2, #90	; 0x5a
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1260:	cmp	r3, #29
    1262:	bls.w	1450 <seconds2tm(unsigned long)+0x2e8>
    tt -= monthLength;
    1266:	sub.w	r3, r2, #120	; 0x78
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    126a:	cmp	r3, #30
    126c:	bls.w	1456 <seconds2tm(unsigned long)+0x2ee>
    tt -= monthLength;
    1270:	sub.w	r3, r2, #151	; 0x97
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1274:	cmp	r3, #29
    1276:	bls.w	145c <seconds2tm(unsigned long)+0x2f4>
    tt -= monthLength;
    127a:	sub.w	r3, r2, #181	; 0xb5
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    127e:	cmp	r3, #30
    1280:	bls.w	1462 <seconds2tm(unsigned long)+0x2fa>
    tt -= monthLength;
    1284:	sub.w	r3, r2, #212	; 0xd4
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1288:	cmp	r3, #30
    128a:	bls.w	1468 <seconds2tm(unsigned long)+0x300>
    tt -= monthLength;
    128e:	sub.w	r3, r2, #243	; 0xf3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1292:	cmp	r3, #29
    1294:	bls.w	146e <seconds2tm(unsigned long)+0x306>
    tt -= monthLength;
    1298:	mvn.w	r9, #272	; 0x110
    129c:	add.w	r3, r2, r9
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    12a0:	cmp	r3, #30
    12a2:	bls.w	141c <seconds2tm(unsigned long)+0x2b4>
    tt -= monthLength;
    12a6:	sub.w	r3, r2, #304	; 0x130
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    12aa:	cmp	r3, #29
    12ac:	bls.w	147a <seconds2tm(unsigned long)+0x312>
    tt -= monthLength;
    12b0:	sub.w	r3, r2, #334	; 0x14e
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    12b4:	cmp	r3, #30
    12b6:	bls.w	1474 <seconds2tm(unsigned long)+0x30c>
    tt -= monthLength;
    12ba:	mvn.w	r8, #364	; 0x16c
    12be:	add	r2, r8
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    12c0:	movs	r1, #13
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    tt -= monthLength;
  }
  tx.tm_mon = mm + 1;   // jan is month 1  
  tx.tm_mday = tt + 1;     // day of month
    12c2:	adds	r6, r2, #1
    12c4:	str	r6, [r0, #12]
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    tt -= monthLength;
  }
  tx.tm_mon = mm + 1;   // jan is month 1  
    12c6:	str	r1, [r0, #16]
  tx.tm_mday = tt + 1;     // day of month
  return tx;
}
    12c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)

  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
  uint32_t days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= tt) year++;
    12cc:	mov.w	r2, #366	; 0x16e
    12d0:	b.n	11fc <seconds2tm(unsigned long)+0x94>

  tx.tm_year = 1970+year; // year is NOT offset from 1970 

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
    12d2:	ldr	r2, [pc, #456]	; (149c <seconds2tm(unsigned long)+0x334>)
    12d4:	umull	r1, r2, r2, r5
    12d8:	lsrs	r4, r2, #5
    12da:	movs	r1, #100	; 0x64
    12dc:	mls	r4, r1, r4, r5
    12e0:	lsrs	r2, r2, #7
    12e2:	mov.w	r1, #400	; 0x190
    12e6:	cmp	r4, #0
    12e8:	bne.n	13d8 <seconds2tm(unsigned long)+0x270>
    12ea:	mls	r1, r1, r2, r5
    12ee:	cmp	r1, #0
    12f0:	bne.w	1406 <seconds2tm(unsigned long)+0x29e>
  tt  -= days; // now tt is days in this year, starting at 0
    12f4:	sub.w	r3, r3, #366	; 0x16e
    12f8:	subs	r6, r6, r3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    12fa:	cmp	r6, #30
    12fc:	bls.w	1480 <seconds2tm(unsigned long)+0x318>
    tt -= monthLength;
    1300:	sub.w	r2, r6, #31
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1304:	cmp	r2, #28
    1306:	bls.w	1418 <seconds2tm(unsigned long)+0x2b0>
    tt -= monthLength;
    130a:	sub.w	r2, r6, #60	; 0x3c
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    130e:	cmp	r2, #30
    1310:	bls.w	1428 <seconds2tm(unsigned long)+0x2c0>
    tt -= monthLength;
    1314:	sub.w	r2, r6, #91	; 0x5b
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1318:	cmp	r2, #29
    131a:	bls.w	142c <seconds2tm(unsigned long)+0x2c4>
    tt -= monthLength;
    131e:	sub.w	r2, r6, #121	; 0x79
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1322:	cmp	r2, #30
    1324:	bls.w	1438 <seconds2tm(unsigned long)+0x2d0>
    tt -= monthLength;
    1328:	sub.w	r2, r6, #152	; 0x98
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    132c:	cmp	r2, #29
    132e:	bls.n	1430 <seconds2tm(unsigned long)+0x2c8>
    tt -= monthLength;
    1330:	sub.w	r2, r6, #182	; 0xb6
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1334:	cmp	r2, #30
    1336:	bls.n	1434 <seconds2tm(unsigned long)+0x2cc>
    tt -= monthLength;
    1338:	sub.w	r2, r6, #213	; 0xd5
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    133c:	cmp	r2, #30
    133e:	bls.n	1440 <seconds2tm(unsigned long)+0x2d8>
    tt -= monthLength;
    1340:	sub.w	r2, r6, #244	; 0xf4
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1344:	cmp	r2, #29
    1346:	bls.n	143c <seconds2tm(unsigned long)+0x2d4>
    tt -= monthLength;
    1348:	sub.w	r2, r6, #274	; 0x112
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    134c:	cmp	r2, #30
    134e:	bls.n	141e <seconds2tm(unsigned long)+0x2b6>
    tt -= monthLength;
    1350:	mvn.w	r5, #304	; 0x130
    1354:	adds	r2, r6, r5
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1356:	cmp	r2, #29
    1358:	bhi.n	13f0 <seconds2tm(unsigned long)+0x288>
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    135a:	movs	r1, #10
    135c:	adds	r1, #1
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    tt -= monthLength;
  }
  tx.tm_mon = mm + 1;   // jan is month 1  
  tx.tm_mday = tt + 1;     // day of month
    135e:	adds	r6, r2, #1
    1360:	str	r6, [r0, #12]
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    tt -= monthLength;
  }
  tx.tm_mon = mm + 1;   // jan is month 1  
    1362:	str	r1, [r0, #16]
  tx.tm_mday = tt + 1;     // day of month
  return tx;
}
    1364:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  tx.tm_year = 1970+year; // year is NOT offset from 1970 

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
    1368:	mvn.w	r2, #364	; 0x16c
    136c:	add	r3, r2
    136e:	subs	r6, r6, r3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1370:	cmp	r6, #30
    1372:	bls.n	1422 <seconds2tm(unsigned long)+0x2ba>
    tt -= monthLength;
    1374:	sub.w	r2, r6, #31
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1378:	cmp	r2, #27
    137a:	bls.n	1418 <seconds2tm(unsigned long)+0x2b0>
    tt -= monthLength;
    137c:	sub.w	r2, r6, #59	; 0x3b
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1380:	cmp	r2, #30
    1382:	bls.n	1428 <seconds2tm(unsigned long)+0x2c0>
    tt -= monthLength;
    1384:	sub.w	r2, r6, #90	; 0x5a
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1388:	cmp	r2, #29
    138a:	bls.n	142c <seconds2tm(unsigned long)+0x2c4>
    tt -= monthLength;
    138c:	sub.w	r2, r6, #120	; 0x78
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1390:	cmp	r2, #30
    1392:	bls.n	1438 <seconds2tm(unsigned long)+0x2d0>
    tt -= monthLength;
    1394:	sub.w	r2, r6, #151	; 0x97
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1398:	cmp	r2, #29
    139a:	bls.n	1430 <seconds2tm(unsigned long)+0x2c8>
    tt -= monthLength;
    139c:	sub.w	r2, r6, #181	; 0xb5
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13a0:	cmp	r2, #30
    13a2:	bls.n	1434 <seconds2tm(unsigned long)+0x2cc>
    tt -= monthLength;
    13a4:	sub.w	r2, r6, #212	; 0xd4
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13a8:	cmp	r2, #30
    13aa:	bls.n	1440 <seconds2tm(unsigned long)+0x2d8>
    tt -= monthLength;
    13ac:	sub.w	r2, r6, #243	; 0xf3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13b0:	cmp	r2, #29
    13b2:	bls.n	143c <seconds2tm(unsigned long)+0x2d4>
    tt -= monthLength;
    13b4:	mvn.w	ip, #272	; 0x110
    13b8:	add.w	r2, r6, ip
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13bc:	cmp	r2, #30
    13be:	bls.n	141e <seconds2tm(unsigned long)+0x2b6>
    tt -= monthLength;
    13c0:	sub.w	r2, r6, #304	; 0x130
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13c4:	cmp	r2, #29
    13c6:	bls.n	135a <seconds2tm(unsigned long)+0x1f2>
    tt -= monthLength;
    13c8:	sub.w	r2, r6, #334	; 0x14e
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13cc:	cmp	r2, #30
    13ce:	bls.n	1402 <seconds2tm(unsigned long)+0x29a>
    tt -= monthLength;
    13d0:	mvn.w	r7, #364	; 0x16c
    13d4:	adds	r2, r6, r7
    13d6:	b.n	12c0 <seconds2tm(unsigned long)+0x158>

  tx.tm_year = 1970+year; // year is NOT offset from 1970 

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
    13d8:	sub.w	r3, r3, #366	; 0x16e
    13dc:	mls	r1, r1, r2, r5
    13e0:	subs	r6, r6, r3
    13e2:	cmp	r1, #0
    13e4:	beq.n	12fa <seconds2tm(unsigned long)+0x192>
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13e6:	cmp	r6, #30
    13e8:	bhi.n	1300 <seconds2tm(unsigned long)+0x198>
    13ea:	mov	r2, r6
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    13ec:	mov	r1, r7
    13ee:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    tt -= monthLength;
    13f0:	mvn.w	r3, #334	; 0x14e
    13f4:	adds	r2, r6, r3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13f6:	cmp	r2, #30
    tt -= monthLength;
    13f8:	it	hi
    13fa:	subhi.w	r2, r6, #366	; 0x16e
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13fe:	bhi.w	12c0 <seconds2tm(unsigned long)+0x158>
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1402:	movs	r1, #11
    1404:	b.n	135c <seconds2tm(unsigned long)+0x1f4>

  tx.tm_year = 1970+year; // year is NOT offset from 1970 

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
    1406:	mvn.w	r1, #364	; 0x16c
    140a:	add	r3, r1
    140c:	subs	r6, r6, r3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    140e:	cmp	r6, #30
    1410:	bhi.n	1374 <seconds2tm(unsigned long)+0x20c>
    1412:	mov	r2, r6
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1414:	mov	r1, r4
    1416:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    1418:	movs	r1, #1
    141a:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    141c:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    141e:	movs	r1, #9
    1420:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1422:	mov	r2, r6
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1424:	movs	r1, #0
    1426:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    1428:	movs	r1, #2
    142a:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    142c:	movs	r1, #3
    142e:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    1430:	movs	r1, #5
    1432:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    1434:	movs	r1, #6
    1436:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    1438:	movs	r1, #4
    143a:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    143c:	movs	r1, #8
    143e:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    1440:	movs	r1, #7
    1442:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1444:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1446:	movs	r1, #1
    1448:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    144a:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    144c:	movs	r1, #2
    144e:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1450:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1452:	movs	r1, #3
    1454:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1456:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1458:	movs	r1, #4
    145a:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    145c:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    145e:	movs	r1, #5
    1460:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1462:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1464:	movs	r1, #6
    1466:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1468:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    146a:	movs	r1, #7
    146c:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    146e:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1470:	movs	r1, #8
    1472:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1474:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1476:	movs	r1, #11
    1478:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    147a:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    147c:	movs	r1, #10
    147e:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1480:	mov	r2, r6
    1482:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    1484:	.word	0xc22e4507
    1488:	.word	0x88888889
    148c:	.word	0x91a2b3c5
    1490:	.word	0x24924925
    1494:	.word	0xaaaaaaab
    1498:	.word	0xfffff84e
    149c:	.word	0x51eb851f

000014a0 <dateTime(unsigned short*, unsigned short*)>:
  tt+=(days*24*3600);
  return tt;
}

// Call back for file timestamps.  Only called for file create and sync().
void dateTime(uint16_t* date, uint16_t* time) {
    14a0:	push	{r4, r5, lr}

  struct tm tx=seconds2tm(RTC_TSR);
    14a2:	ldr	r3, [pc, #124]	; (1520 <dateTime(unsigned short*, unsigned short*)+0x80>)
    14a4:	ldr	r3, [r3, #0]
  tt+=(days*24*3600);
  return tt;
}

// Call back for file timestamps.  Only called for file create and sync().
void dateTime(uint16_t* date, uint16_t* time) {
    14a6:	sub	sp, #44	; 0x2c
    14a8:	mov	r5, r0
    14aa:	mov	r4, r1

  struct tm tx=seconds2tm(RTC_TSR);
    14ac:	add	r0, sp, #4
    14ae:	mov	r1, r3
    14b0:	bl	1168 <seconds2tm(unsigned long)>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    14b4:	ldr	r3, [sp, #24]
    
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(tx.tm_year, tx.tm_mon, tx.tm_mday);
    14b6:	ldr	r1, [sp, #20]
    14b8:	ldr	r2, [sp, #16]
    14ba:	subw	r3, r3, #1980	; 0x7bc
    14be:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    14c0:	cmp	r3, #127	; 0x7f
    14c2:	bhi.n	14ca <dateTime(unsigned short*, unsigned short*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
    14c4:	uxtb	r0, r1
    14c6:	cmp	r0, #12
    14c8:	bls.n	150a <dateTime(unsigned short*, unsigned short*)+0x6a>
         year << 9 | month << 5 | day;
    14ca:	movs	r3, #0

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(tx.tm_hour, tx.tm_min, tx.tm_sec);
    14cc:	ldr	r0, [sp, #12]
void dateTime(uint16_t* date, uint16_t* time) {

  struct tm tx=seconds2tm(RTC_TSR);
    
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(tx.tm_year, tx.tm_mon, tx.tm_mday);
    14ce:	strh	r3, [r5, #0]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    14d0:	uxtb	r3, r0
    14d2:	cmp	r3, #23

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(tx.tm_hour, tx.tm_min, tx.tm_sec);
    14d4:	ldr	r1, [sp, #8]
    14d6:	ldr	r2, [sp, #4]
    14d8:	bhi.n	1502 <dateTime(unsigned short*, unsigned short*)+0x62>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    14da:	uxtb	r3, r1
    14dc:	cmp	r3, #59	; 0x3b
    14de:	bhi.n	1502 <dateTime(unsigned short*, unsigned short*)+0x62>
    14e0:	uxtb	r3, r2
    14e2:	cmp	r3, #59	; 0x3b
    14e4:	bhi.n	1502 <dateTime(unsigned short*, unsigned short*)+0x62>
         hour << 11 | minute << 5 | second >> 1;
    14e6:	lsls	r3, r0, #11
    14e8:	lsls	r1, r1, #5
    14ea:	and.w	r1, r1, #8160	; 0x1fe0
    14ee:	and.w	r3, r3, #522240	; 0x7f800
    14f2:	orrs	r3, r1
    14f4:	ubfx	r2, r2, #1, #7
    14f8:	orrs	r3, r2
    14fa:	uxth	r3, r3
    14fc:	strh	r3, [r4, #0]
}
    14fe:	add	sp, #44	; 0x2c
    1500:	pop	{r4, r5, pc}
    1502:	movs	r3, #0
    
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(tx.tm_year, tx.tm_mon, tx.tm_mday);

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(tx.tm_hour, tx.tm_min, tx.tm_sec);
    1504:	strh	r3, [r4, #0]
}
    1506:	add	sp, #44	; 0x2c
    1508:	pop	{r4, r5, pc}
void dateTime(uint16_t* date, uint16_t* time) {

  struct tm tx=seconds2tm(RTC_TSR);
    
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(tx.tm_year, tx.tm_mon, tx.tm_mday);
    150a:	uxtb	r2, r2
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
    150c:	cmp	r2, #31
    150e:	bhi.n	14ca <dateTime(unsigned short*, unsigned short*)+0x2a>
         year << 9 | month << 5 | day;
    1510:	lsls	r1, r1, #5
    1512:	and.w	r1, r1, #8160	; 0x1fe0
    1516:	orrs	r2, r1
    1518:	orr.w	r3, r2, r3, lsl #9
    151c:	uxth	r3, r3
    151e:	b.n	14cc <dateTime(unsigned short*, unsigned short*)+0x2c>
    1520:	.word	0x4003d000

00001524 <tm2seconds(tm*)>:
}

uint32_t tm2seconds (struct tm *tx) 
{
  uint32_t tt;
  tt=tx->tm_sec+tx->tm_min*60+tx->tm_hour*3600;  
    1524:	ldr	r2, [r0, #4]
  // count days size epoch until previous midnight
  uint32_t days=tx->tm_mday-1;

  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<(tx->tm_mon-1); mm++) days+=monthDays[mm]; 
    1526:	ldr	r1, [r0, #16]
{
  uint32_t tt;
  tt=tx->tm_sec+tx->tm_min*60+tx->tm_hour*3600;  

  // count days size epoch until previous midnight
  uint32_t days=tx->tm_mday-1;
    1528:	ldr	r3, [r0, #12]
  tx.tm_mday = tt + 1;     // day of month
  return tx;
}

uint32_t tm2seconds (struct tm *tx) 
{
    152a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tt;
  tt=tx->tm_sec+tx->tm_min*60+tx->tm_hour*3600;  
    152e:	ldr	r4, [r0, #0]
    1530:	ldr	r5, [r0, #8]
    1532:	rsb	r2, r2, r2, lsl #4
    1536:	add.w	r2, r4, r2, lsl #2
    153a:	mov.w	r8, #3600	; 0xe10
    153e:	mla	r8, r8, r5, r2
  // count days size epoch until previous midnight
  uint32_t days=tx->tm_mday-1;

  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<(tx->tm_mon-1); mm++) days+=monthDays[mm]; 
    1542:	subs	r2, r1, #1
{
  uint32_t tt;
  tt=tx->tm_sec+tx->tm_min*60+tx->tm_hour*3600;  

  // count days size epoch until previous midnight
  uint32_t days=tx->tm_mday-1;
    1544:	add.w	r4, r3, #4294967295

  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<(tx->tm_mon-1); mm++) days+=monthDays[mm]; 
    1548:	beq.n	15a6 <tm2seconds(tm*)+0x82>
    154a:	cmp	r2, #1
    154c:	add.w	r5, r3, #30
    1550:	beq.n	1624 <tm2seconds(tm*)+0x100>
    1552:	cmp	r2, #2
    1554:	add.w	r5, r3, #58	; 0x3a
    1558:	beq.n	1624 <tm2seconds(tm*)+0x100>
    155a:	cmp	r2, #3
    155c:	add.w	r5, r3, #89	; 0x59
    1560:	beq.n	1624 <tm2seconds(tm*)+0x100>
    1562:	cmp	r2, #4
    1564:	add.w	r5, r3, #119	; 0x77
    1568:	beq.n	1624 <tm2seconds(tm*)+0x100>
    156a:	cmp	r2, #5
    156c:	add.w	r5, r3, #150	; 0x96
    1570:	beq.n	1624 <tm2seconds(tm*)+0x100>
    1572:	cmp	r2, #6
    1574:	add.w	r5, r3, #180	; 0xb4
    1578:	beq.n	1624 <tm2seconds(tm*)+0x100>
    157a:	cmp	r2, #7
    157c:	add.w	r5, r3, #211	; 0xd3
    1580:	beq.n	1624 <tm2seconds(tm*)+0x100>
    1582:	cmp	r2, #8
    1584:	add.w	r5, r3, #242	; 0xf2
    1588:	beq.n	1624 <tm2seconds(tm*)+0x100>
    158a:	cmp	r2, #9
    158c:	add.w	r3, r3, #272	; 0x110
    1590:	beq.n	1628 <tm2seconds(tm*)+0x104>
    1592:	cmp	r2, #10
    1594:	add.w	r3, r4, #304	; 0x130
    1598:	beq.n	1628 <tm2seconds(tm*)+0x104>
    159a:	cmp	r2, #11
    159c:	add.w	r3, r4, #334	; 0x14e
    15a0:	beq.n	1628 <tm2seconds(tm*)+0x104>
    15a2:	addw	r4, r4, #365	; 0x16d
  if(tx->tm_mon>2 && LEAP_YEAR(tx->tm_year-1970)) days++;
    15a6:	cmp	r1, #2
    15a8:	ldr	r6, [r0, #20]
    15aa:	ble.n	15b4 <tm2seconds(tm*)+0x90>
    15ac:	cmp	r6, #0
    15ae:	ble.n	15b4 <tm2seconds(tm*)+0x90>
    15b0:	lsls	r2, r6, #30
    15b2:	beq.n	162c <tm2seconds(tm*)+0x108>

  uint32_t years=0;
  while(years++ < (tx->tm_year-1970)) days += (LEAP_YEAR(years) ? 366 : 365);
    15b4:	movw	r3, #1970	; 0x7b2
    15b8:	cmp	r6, r3
    15ba:	beq.n	1614 <tm2seconds(tm*)+0xf0>
    15bc:	mvn.w	r3, #1968	; 0x7b0
    15c0:	add	r6, r3
    15c2:	ldr	r7, [pc, #144]	; (1654 <tm2seconds(tm*)+0x130>)
    15c4:	ldr	r0, [pc, #144]	; (1658 <tm2seconds(tm*)+0x134>)
    15c6:	movs	r3, #1
    15c8:	movw	r9, #365	; 0x16d
    15cc:	mov.w	lr, #100	; 0x64
    15d0:	mov.w	ip, #400	; 0x190
    15d4:	b.n	15f0 <tm2seconds(tm*)+0xcc>
    15d6:	lsrs	r1, r1, #7
    15d8:	mls	r1, ip, r1, r2
    15dc:	cbnz	r5, 161e <tm2seconds(tm*)+0xfa>
    15de:	cmp	r1, #0
    15e0:	ite	ne
    15e2:	movne	r2, r9
    15e4:	moveq.w	r2, #366	; 0x16e
    15e8:	adds	r3, #1
    15ea:	cmp	r3, r6
    15ec:	add	r4, r2
    15ee:	beq.n	1614 <tm2seconds(tm*)+0xf0>
    15f0:	cmp	r3, r7
    15f2:	addw	r2, r3, #1970	; 0x7b2
    15f6:	beq.n	1608 <tm2seconds(tm*)+0xe4>
    15f8:	umull	r5, r1, r0, r2
    15fc:	lsrs	r5, r1, #5
    15fe:	tst.w	r2, #3
    1602:	mls	r5, lr, r5, r2
    1606:	beq.n	15d6 <tm2seconds(tm*)+0xb2>
    1608:	adds	r3, #1
    160a:	movw	r2, #365	; 0x16d
    160e:	cmp	r3, r6
    1610:	add	r4, r2
    1612:	bne.n	15f0 <tm2seconds(tm*)+0xcc>
  //  
  tt+=(days*24*3600);
  return tt;
    1614:	ldr	r0, [pc, #68]	; (165c <tm2seconds(tm*)+0x138>)
}
    1616:	mla	r0, r0, r4, r8
    161a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  uint32_t monthLength=0;
  for (mm=0; mm<(tx->tm_mon-1); mm++) days+=monthDays[mm]; 
  if(tx->tm_mon>2 && LEAP_YEAR(tx->tm_year-1970)) days++;

  uint32_t years=0;
  while(years++ < (tx->tm_year-1970)) days += (LEAP_YEAR(years) ? 366 : 365);
    161e:	mov.w	r2, #366	; 0x16e
    1622:	b.n	15e8 <tm2seconds(tm*)+0xc4>
  // count days size epoch until previous midnight
  uint32_t days=tx->tm_mday-1;

  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<(tx->tm_mon-1); mm++) days+=monthDays[mm]; 
    1624:	mov	r4, r5
    1626:	b.n	15a6 <tm2seconds(tm*)+0x82>
    1628:	mov	r4, r3
    162a:	b.n	15a6 <tm2seconds(tm*)+0x82>
  if(tx->tm_mon>2 && LEAP_YEAR(tx->tm_year-1970)) days++;
    162c:	ldr	r2, [pc, #40]	; (1658 <tm2seconds(tm*)+0x134>)
    162e:	asrs	r3, r6, #31
    1630:	smull	r1, r2, r2, r6
    1634:	rsb	r1, r3, r2, asr #5
    1638:	movs	r0, #100	; 0x64
    163a:	mls	r1, r0, r1, r6
    163e:	cbnz	r1, 1650 <tm2seconds(tm*)+0x12c>
    1640:	rsb	r3, r3, r2, asr #7
    1644:	mov.w	r2, #400	; 0x190
    1648:	mls	r3, r2, r3, r6
    164c:	cmp	r3, #0
    164e:	bne.n	15b4 <tm2seconds(tm*)+0x90>
    1650:	adds	r4, #1
    1652:	b.n	15b4 <tm2seconds(tm*)+0x90>
    1654:	.word	0xfffff84e
    1658:	.word	0x51eb851f
    165c:	.word	0x00015180

00001660 <i2sInProcessing>:
/************************Process specific code ********************************/
void i2sInProcessing(void * s, void * d)
{
	static uint16_t is_I2S=0;

	i2sProcCount++;
    1660:	ldr	r2, [pc, #164]	; (1708 <i2sInProcessing+0xa8>)



/************************Process specific code ********************************/
void i2sInProcessing(void * s, void * d)
{
    1662:	push	{r3, r4, r5, r6, r7, lr}
	static uint16_t is_I2S=0;

	i2sProcCount++;
	if(is_I2S) {i2sBusyCount++; return;}
    1664:	ldr	r4, [pc, #164]	; (170c <i2sInProcessing+0xac>)
/************************Process specific code ********************************/
void i2sInProcessing(void * s, void * d)
{
	static uint16_t is_I2S=0;

	i2sProcCount++;
    1666:	ldr	r3, [r2, #0]
	if(is_I2S) {i2sBusyCount++; return;}
    1668:	ldrh	r0, [r4, #0]
/************************Process specific code ********************************/
void i2sInProcessing(void * s, void * d)
{
	static uint16_t is_I2S=0;

	i2sProcCount++;
    166a:	adds	r3, #1
    166c:	str	r3, [r2, #0]
	if(is_I2S) {i2sBusyCount++; return;}
    166e:	cbnz	r0, 16a8 <i2sInProcessing+0x48>
	is_I2S=1;
    1670:	movs	r3, #1
    1672:	strh	r3, [r4, #0]
    1674:	add.w	r0, r1, #1020	; 0x3fc
    1678:	subs	r3, r1, #4
	int32_t *src = (int32_t *) d;

	// for ICS43432 need first shift left to get correct MSB
	// shift 8bit to right to get data-LSB to bit 0
  #ifdef MSB_CORRECTION
  	for(int ii=0; ii<I2S_CHAN*N_SAMP;ii++) { src[ii]<<=1; src[ii]>>=8;}
    167a:	ldr.w	r2, [r3, #4]!
    167e:	sbfx	r2, r2, #7, #24
    1682:	cmp	r3, r0
    1684:	str	r2, [r3, #0]
    1686:	bne.n	167a <i2sInProcessing+0x1a>
    1688:	ldr	r2, [pc, #132]	; (1710 <i2sInProcessing+0xb0>)
    168a:	movs	r3, #0
  #endif

	#ifdef DO_LOGGER
    #if N_CHAN==1
      DATA_T *logData = data1; 
      for(int ii=0; ii< N_SAMP; ii++) logData[ii]=src[ICH+2*ii];
    168c:	ldr.w	r0, [r1, r3, lsl #3]
    1690:	str.w	r0, [r2, #4]!
    1694:	adds	r3, #1
    1696:	cmp	r3, #128	; 0x80
    1698:	bne.n	168c <i2sInProcessing+0x2c>
template <typename T, int nq, int nd, int na>
int16_t Logger<T,nq,nd,na>:: write(void *inp)
  {
    int16_t h;

    if(!enabled) return 0; // don't do anything
    169a:	ldr	r6, [pc, #120]	; (1714 <i2sInProcessing+0xb4>)
    169c:	ldrsh.w	r3, [r6, #204]	; 0xcc
    16a0:	cbnz	r3, 16b2 <i2sInProcessing+0x52>
	#ifdef DO_USB_AUDIO
    mExtract(dst16,src,ICS_CHAN*N_SAMP);
		usbAudio_write(dst16,N_SAMP);
	#endif

  is_I2S=0;
    16a2:	movs	r3, #0
    16a4:	strh	r3, [r4, #0]
    16a6:	pop	{r3, r4, r5, r6, r7, pc}
void i2sInProcessing(void * s, void * d)
{
	static uint16_t is_I2S=0;

	i2sProcCount++;
	if(is_I2S) {i2sBusyCount++; return;}
    16a8:	ldr	r2, [pc, #108]	; (1718 <i2sInProcessing+0xb8>)
    16aa:	ldr	r3, [r2, #0]
    16ac:	adds	r3, #1
    16ae:	str	r3, [r2, #0]
    16b0:	pop	{r3, r4, r5, r6, r7, pc}
    
    h = head + 1;
    16b2:	ldrh.w	r5, [r6, #200]	; 0xc8
    if (h >= nq) h = 0;
    if (h == tail) {  // disaster
    16b6:	ldrsh.w	r2, [r6, #202]	; 0xca
  {
    int16_t h;

    if(!enabled) return 0; // don't do anything
    
    h = head + 1;
    16ba:	adds	r5, #1
    16bc:	sxth	r5, r5
    if (h >= nq) h = 0;
    16be:	cmp.w	r5, #300	; 0x12c
    16c2:	it	ge
    16c4:	movge	r5, #0
    if (h == tail) {  // disaster
    16c6:	cmp	r2, r5
    16c8:	sub.w	r3, r6, #154624	; 0x25c00
    16cc:	beq.n	1700 <i2sInProcessing+0xa0>
      overrun++;
      // simply ignore new data
      return -1;
    } 
    else 
    { queue[h] = pool.fetch(h);
    16ce:	add.w	r1, r5, #38400	; 0x9600
    16d2:	adds	r1, #6
class store
{ T pool[nb*nd];

  public:
  store(void) {;}
  T *fetch(int ii) {return &pool[ii*nd];}
    16d4:	add.w	r7, r3, r5, lsl #9
    16d8:	adds	r7, #24
      overrun++;
      // simply ignore new data
      return -1;
    } 
    else 
    { queue[h] = pool.fetch(h);
    16da:	str.w	r7, [r3, r1, lsl #2]
    16de:	mov	r0, r7
    16e0:	mov.w	r2, #512	; 0x200
    16e4:	ldr	r1, [pc, #52]	; (171c <i2sInProcessing+0xbc>)
    16e6:	bl	94c8 <memcpy>
      DATA_T *logData = data1; 
      for(int ii=0; ii< N_SAMP; ii++) logData[ii]=src[ICH+2*ii];
    #else
      DATA_T *logData = src;
    #endif
		if(logger.write(logData)<0) //store always original data
    16ea:	cmp	r5, #0
      T *ptr = queue[h];
      if(ptr)
      { T *src = (T*) inp;
        for(int ii=0; ii<nd; ii++) ptr[ii]=src[ii];
        head = h;
    16ec:	strh.w	r5, [r6, #200]	; 0xc8
    16f0:	bge.n	16a2 <i2sInProcessing+0x42>
    { // have write error
      i2sWriteErrorCount++;
    16f2:	ldr	r2, [pc, #44]	; (1720 <i2sInProcessing+0xc0>)
    16f4:	ldr	r3, [r2, #0]
    16f6:	adds	r3, #1
    16f8:	str	r3, [r2, #0]
	#ifdef DO_USB_AUDIO
    mExtract(dst16,src,ICS_CHAN*N_SAMP);
		usbAudio_write(dst16,N_SAMP);
	#endif

  is_I2S=0;
    16fa:	movs	r3, #0
    16fc:	strh	r3, [r4, #0]
    16fe:	pop	{r3, r4, r5, r6, r7, pc}
    if(!enabled) return 0; // don't do anything
    
    h = head + 1;
    if (h >= nq) h = 0;
    if (h == tail) {  // disaster
      overrun++;
    1700:	ldr	r2, [r3, #4]
    1702:	adds	r2, #1
    1704:	str	r2, [r3, #4]
    1706:	b.n	16f2 <i2sInProcessing+0x92>
    1708:	.word	0x1fff1734
    170c:	.word	0x1fff2482
    1710:	.word	0x20020158
    1714:	.word	0x20018084
    1718:	.word	0x1fff1730
    171c:	.word	0x2002015c
    1720:	.word	0x1fff1740

00001724 <yield>:

// to disable EventResponder
// (https://forum.pjrc.com/threads/46442-Minimal-Blink-fails-with-void-yield()?p=153602&viewfull=1#post153602)
extern "C" volatile uint32_t systick_millis_count;
void mySystick_isr(void){ systick_millis_count++;}
void yield(void){}
    1724:	bx	lr
    1726:	nop

00001728 <check_hibernate(parameters_s*, int)>:
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
}

void check_hibernate( parameters_s *par, int flag)
{
    1728:	push	{r4, r5, r6, r7, lr}
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    172a:	ldr	r3, [pc, #300]	; (1858 <check_hibernate(parameters_s*, int)+0x130>)
    172c:	ldr	r6, [r3, #0]
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
}

void check_hibernate( parameters_s *par, int flag)
{
    172e:	sub	sp, #44	; 0x2c
    1730:	mov	r4, r0
    1732:	mov	r7, r1
  uint32_t tt=getRTC();
  struct tm tx=seconds2tm(tt);
    1734:	add	r0, sp, #4
    1736:	mov	r1, r6
    1738:	bl	1168 <seconds2tm(unsigned long)>
  uint16_t to = tx.tm_hour;
  
  // check if we should sleep longer
  uint16_t doRecording=1;
  doRecording = check_time(to,par->first_hour, par->second_hour) ||
    173c:	ldrh	r1, [r4, #4]
    173e:	ldrh	r3, [r4, #6]

void check_hibernate( parameters_s *par, int flag)
{
  uint32_t tt=getRTC();
  struct tm tx=seconds2tm(tt);
  uint16_t to = tx.tm_hour;
    1740:	ldrh.w	r2, [sp, #12]
  uint16_t last_hour;

 */
inline uint16_t check_time(uint16_t to, uint16_t t1, uint16_t t2)
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
    1744:	cmp	r1, r3
    1746:	bcs.n	17e2 <check_hibernate(parameters_s*, int)+0xba>
    1748:	cmp	r2, r1
    174a:	bcc.n	175e <check_hibernate(parameters_s*, int)+0x36>
    174c:	cmp	r2, r3
    174e:	ite	cs
    1750:	movcs	r0, #0
    1752:	movcc	r0, #1
  struct tm tx=seconds2tm(tt);
  uint16_t to = tx.tm_hour;
  
  // check if we should sleep longer
  uint16_t doRecording=1;
  doRecording = check_time(to,par->first_hour, par->second_hour) ||
    1754:	cbz	r0, 175e <check_hibernate(parameters_s*, int)+0x36>
                check_time(to,par->third_hour, par->last_hour);
  
  int32_t dto=0, dt=0, t1;
  if(doRecording)
  { if(flag)
    1756:	cmp	r7, #0
    1758:	bne.n	17ea <check_hibernate(parameters_s*, int)+0xc2>
//    while(!Serial);  Serial.printf("%d %d %d %d\n\r",dto,t1,tx,dt); Serial.flush();  delay(10000);
    Serial.println(dt);
    go_hibernate(dt);
#endif
  }
}
    175a:	add	sp, #44	; 0x2c
    175c:	pop	{r4, r5, r6, r7, pc}
  uint16_t to = tx.tm_hour;
  
  // check if we should sleep longer
  uint16_t doRecording=1;
  doRecording = check_time(to,par->first_hour, par->second_hour) ||
                check_time(to,par->third_hour, par->last_hour);
    175e:	ldrh	r5, [r4, #8]
    1760:	ldrh	r0, [r4, #10]
  uint16_t last_hour;

 */
inline uint16_t check_time(uint16_t to, uint16_t t1, uint16_t t2)
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
    1762:	cmp	r5, r0
    1764:	bcs.n	1822 <check_hibernate(parameters_s*, int)+0xfa>
    1766:	cmp	r2, r5
    1768:	bcs.n	1826 <check_hibernate(parameters_s*, int)+0xfe>
    176a:	cmp	r1, r0
    176c:	bls.n	183c <check_hibernate(parameters_s*, int)+0x114>
    176e:	cmp	r2, r0
    1770:	bcs.n	1846 <check_hibernate(parameters_s*, int)+0x11e>
      dto=(par->first_hour - par->last_hour);
      t1=par->last_hour;
    }
    else // is in middle sleep period
    {
      dto=(par->third_hour - par->second_hour);
    1772:	subs	r5, r5, r3

    dto *= 3600;
    t1 *= 3600;
    int32_t tx =tt % (24*3600); // seconds of day
    
    dt = dto - ((tx-t1 +24*3600) % (24*3600));
    1774:	ldr	r1, [pc, #228]	; (185c <check_hibernate(parameters_s*, int)+0x134>)
    1776:	ldr	r4, [pc, #232]	; (1860 <check_hibernate(parameters_s*, int)+0x138>)

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
    1778:	ldr	r0, [pc, #232]	; (1864 <check_hibernate(parameters_s*, int)+0x13c>)
    177a:	umull	r7, r2, r1, r6
    177e:	lsrs	r2, r2, #16
    1780:	mls	r6, r4, r2, r6
    1784:	mov.w	r2, #3600	; 0xe10
    1788:	mls	r3, r2, r3, r6
    178c:	add.w	r3, r3, #86016	; 0x15000
    1790:	add.w	r3, r3, #384	; 0x180
    1794:	smull	r6, r7, r3, r1
    else // is in middle sleep period
    {
      dto=(par->third_hour - par->second_hour);
      t1=par->second_hour;
    }
    if(dto<0) dto += 24;
    1798:	cmp	r5, #0

    dto *= 3600;
    t1 *= 3600;
    int32_t tx =tt % (24*3600); // seconds of day
    
    dt = dto - ((tx-t1 +24*3600) % (24*3600));
    179a:	add.w	r6, r3, r7
    179e:	mov.w	r1, r3, asr #31
    else // is in middle sleep period
    {
      dto=(par->third_hour - par->second_hour);
      t1=par->second_hour;
    }
    if(dto<0) dto += 24;
    17a2:	it	lt
    17a4:	addlt	r5, #24

    dto *= 3600;
    t1 *= 3600;
    int32_t tx =tt % (24*3600); // seconds of day
    
    dt = dto - ((tx-t1 +24*3600) % (24*3600));
    17a6:	rsb	r1, r1, r6, asr #16
    17aa:	mls	r3, r4, r1, r3
    17ae:	mul.w	r2, r2, r5
    17b2:	subs	r5, r2, r3
    17b4:	mov	r1, r5
    17b6:	bl	af60 <Print::print(long)>
    17ba:	ldr	r0, [pc, #168]	; (1864 <check_hibernate(parameters_s*, int)+0x13c>)
    17bc:	bl	b010 <Print::println()>
			} else if (pin == 21) {
				CORE_PIN21_PORTCLEAR = CORE_PIN21_BITMASK;
			} else if (pin == 22) {
				CORE_PIN22_PORTCLEAR = CORE_PIN22_BITMASK;
			} else if (pin == 23) {
				CORE_PIN23_PORTCLEAR = CORE_PIN23_BITMASK;
    17c0:	ldr	r3, [pc, #164]	; (1868 <check_hibernate(parameters_s*, int)+0x140>)
    17c2:	movs	r2, #4
    17c4:	str	r2, [r3, #0]
 */
#include "hibernate.h"

void go_hibernate(uint32_t seconds)
{ digitalWriteFast(23,LOW); // turn sensor an micro OFF 
  for(int ii=0;ii<24;ii++) pinMode(ii,INPUT);   
    17c6:	movs	r4, #0
    17c8:	uxtb	r0, r4
    17ca:	movs	r1, #0
    17cc:	adds	r4, #1
    17ce:	bl	9cec <pinMode>
    17d2:	cmp	r4, #24
    17d4:	bne.n	17c8 <check_hibernate(parameters_s*, int)+0xa0>
  hibernate(seconds);
    17d6:	mov	r0, r5
//    while(!Serial);  Serial.printf("%d %d %d %d\n\r",dto,t1,tx,dt); Serial.flush();  delay(10000);
    Serial.println(dt);
    go_hibernate(dt);
#endif
  }
}
    17d8:	add	sp, #44	; 0x2c
    17da:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#include "hibernate.h"

void go_hibernate(uint32_t seconds)
{ digitalWriteFast(23,LOW); // turn sensor an micro OFF 
  for(int ii=0;ii<24;ii++) pinMode(ii,INPUT);   
  hibernate(seconds);
    17de:	b.w	da0 <hibernate>
  uint16_t last_hour;

 */
inline uint16_t check_time(uint16_t to, uint16_t t1, uint16_t t2)
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
    17e2:	cmp	r2, r1
    17e4:	bcc.n	174c <check_hibernate(parameters_s*, int)+0x24>
  doRecording = check_time(to,par->first_hour, par->second_hour) ||
                check_time(to,par->third_hour, par->last_hour);
  
  int32_t dto=0, dt=0, t1;
  if(doRecording)
  { if(flag)
    17e6:	cmp	r7, #0
    17e8:	beq.n	175a <check_hibernate(parameters_s*, int)+0x32>
    {
      dto = (par->on_time + par->off_time)*60;
      dt = dto - (tt % dto);
    17ea:	ldrh	r1, [r4, #0]
    17ec:	ldrh	r3, [r4, #2]
    17ee:	ldr	r2, [pc, #120]	; (1868 <check_hibernate(parameters_s*, int)+0x140>)
    17f0:	add	r3, r1
    17f2:	rsb	r3, r3, r3, lsl #4
    17f6:	lsls	r3, r3, #2
    17f8:	movs	r1, #4
    17fa:	udiv	r5, r6, r3
    17fe:	mls	r5, r3, r5, r6
    1802:	subs	r5, r3, r5
    1804:	str	r1, [r2, #0]
 */
#include "hibernate.h"

void go_hibernate(uint32_t seconds)
{ digitalWriteFast(23,LOW); // turn sensor an micro OFF 
  for(int ii=0;ii<24;ii++) pinMode(ii,INPUT);   
    1806:	movs	r4, #0
    1808:	uxtb	r0, r4
    180a:	movs	r1, #0
    180c:	adds	r4, #1
    180e:	bl	9cec <pinMode>
    1812:	cmp	r4, #24
    1814:	bne.n	1808 <check_hibernate(parameters_s*, int)+0xe0>
  hibernate(seconds);
    1816:	mov	r0, r5
//    while(!Serial);  Serial.printf("%d %d %d %d\n\r",dto,t1,tx,dt); Serial.flush();  delay(10000);
    Serial.println(dt);
    go_hibernate(dt);
#endif
  }
}
    1818:	add	sp, #44	; 0x2c
    181a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#include "hibernate.h"

void go_hibernate(uint32_t seconds)
{ digitalWriteFast(23,LOW); // turn sensor an micro OFF 
  for(int ii=0;ii<24;ii++) pinMode(ii,INPUT);   
  hibernate(seconds);
    181e:	b.w	da0 <hibernate>
  uint16_t last_hour;

 */
inline uint16_t check_time(uint16_t to, uint16_t t1, uint16_t t2)
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
    1822:	cmp	r2, r5
    1824:	bcs.n	1756 <check_hibernate(parameters_s*, int)+0x2e>
    1826:	cmp	r2, r0
    1828:	ite	cs
    182a:	movcs.w	lr, #0
    182e:	movcc.w	lr, #1
  struct tm tx=seconds2tm(tt);
  uint16_t to = tx.tm_hour;
  
  // check if we should sleep longer
  uint16_t doRecording=1;
  doRecording = check_time(to,par->first_hour, par->second_hour) ||
    1832:	cmp.w	lr, #0
    1836:	bne.n	1756 <check_hibernate(parameters_s*, int)+0x2e>
  uint16_t last_hour;

 */
inline uint16_t check_time(uint16_t to, uint16_t t1, uint16_t t2)
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
    1838:	cmp	r1, r0
    183a:	bhi.n	176e <check_hibernate(parameters_s*, int)+0x46>
    183c:	cmp	r2, r0
    183e:	bcc.n	1846 <check_hibernate(parameters_s*, int)+0x11e>
    dt = dto - (tt % dto);
    go_hibernate(dt);
#else
    if(check_time(to,par->last_hour,par->first_hour))
    {
      dto=(par->first_hour - par->last_hour);
    1840:	mov	r3, r0
    1842:	subs	r5, r1, r0
    1844:	b.n	1774 <check_hibernate(parameters_s*, int)+0x4c>
    1846:	cmp	r2, r1
    1848:	ite	cs
    184a:	movcs	r2, #0
    184c:	movcc	r2, #1
#if SLEEP_MODE==0
    dto = (par->on_time+par->off_time)*60;
    dt = dto - (tt % dto);
    go_hibernate(dt);
#else
    if(check_time(to,par->last_hour,par->first_hour))
    184e:	cmp	r2, #0
    1850:	beq.n	1772 <check_hibernate(parameters_s*, int)+0x4a>
    {
      dto=(par->first_hour - par->last_hour);
    1852:	mov	r3, r0
    1854:	subs	r5, r1, r0
    1856:	b.n	1774 <check_hibernate(parameters_s*, int)+0x4c>
    1858:	.word	0x4003d000
    185c:	.word	0xc22e4507
    1860:	.word	0x00015180
    1864:	.word	0x1fff0898
    1868:	.word	0x400ff088

0000186c <encode_mac(char*)>:
  doRead_mac(0xe,mac,0);
  doRead_mac(0xf,mac,3);
}

char * encode_mac(char * text)  
{
    186c:	push	{r4, r5, r6, r7}
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    186e:	ldr	r2, [pc, #316]	; (19ac <encode_mac(char*)+0x140>)
  FTFL_FCCOB1 = word;             // read the given word of read once area

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
    1870:	ldr	r3, [pc, #316]	; (19b0 <encode_mac(char*)+0x144>)

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
  FTFL_FCCOB1 = word;             // read the given word of read once area
    1872:	ldr	r4, [pc, #320]	; (19b4 <encode_mac(char*)+0x148>)
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    1874:	movs	r6, #65	; 0x41
  FTFL_FCCOB1 = word;             // read the given word of read once area
    1876:	movs	r5, #14

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
    1878:	movs	r1, #128	; 0x80
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    187a:	strb	r6, [r2, #0]
  FTFL_FCCOB1 = word;             // read the given word of read once area
    187c:	strb	r5, [r4, #0]

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));
    187e:	mov	r2, r3
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
  FTFL_FCCOB1 = word;             // read the given word of read once area

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
    1880:	strb	r1, [r3, #0]
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));
    1882:	ldrb	r3, [r2, #0]
    1884:	ldr	r1, [pc, #296]	; (19b0 <encode_mac(char*)+0x144>)
    1886:	lsls	r4, r3, #24
    1888:	bpl.n	1882 <encode_mac(char*)+0x16>

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
    188a:	ldr	r3, [pc, #300]	; (19b8 <encode_mac(char*)+0x14c>)
    188c:	ldr	r2, [pc, #300]	; (19bc <encode_mac(char*)+0x150>)
    188e:	ldrb	r4, [r3, #0]
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    1890:	ldr	r6, [pc, #300]	; (19c0 <encode_mac(char*)+0x154>)

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
    1892:	strb	r4, [r2, #0]
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
  *(mac+offset+2) = FTFL_FCCOB7;       // Skip FTFL_FCCOB4 as it's always 0.
    1894:	subs	r3, #2
  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    1896:	ldrb	r6, [r6, #0]
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    1898:	ldr	r4, [pc, #272]	; (19ac <encode_mac(char*)+0x140>)
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
  *(mac+offset+2) = FTFL_FCCOB7;       // Skip FTFL_FCCOB4 as it's always 0.
    189a:	ldrb	r3, [r3, #0]

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
  FTFL_FCCOB1 = word;             // read the given word of read once area
    189c:	ldr	r5, [pc, #276]	; (19b4 <encode_mac(char*)+0x148>)
  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    189e:	strb	r6, [r2, #1]
  *(mac+offset+2) = FTFL_FCCOB7;       // Skip FTFL_FCCOB4 as it's always 0.
    18a0:	strb	r3, [r2, #2]
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    18a2:	movs	r7, #65	; 0x41
  FTFL_FCCOB1 = word;             // read the given word of read once area
    18a4:	movs	r6, #15

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
    18a6:	movs	r3, #128	; 0x80
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    18a8:	strb	r7, [r4, #0]
  FTFL_FCCOB1 = word;             // read the given word of read once area
    18aa:	strb	r6, [r5, #0]

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));
    18ac:	mov	r4, r1
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
  FTFL_FCCOB1 = word;             // read the given word of read once area

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
    18ae:	strb	r3, [r1, #0]
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));
    18b0:	ldrb	r3, [r4, #0]
    18b2:	lsls	r3, r3, #24
    18b4:	bpl.n	18b0 <encode_mac(char*)+0x44>
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    18b6:	ldrb	r3, [r2, #0]

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
    18b8:	ldr	r5, [pc, #252]	; (19b8 <encode_mac(char*)+0x14c>)
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    18ba:	ldr	r4, [pc, #260]	; (19c0 <encode_mac(char*)+0x154>)
  *(mac+offset+2) = FTFL_FCCOB7;       // Skip FTFL_FCCOB4 as it's always 0.
    18bc:	ldr	r1, [pc, #260]	; (19c4 <encode_mac(char*)+0x158>)

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
    18be:	ldrb	r5, [r5, #0]
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    18c0:	ldrb	r4, [r4, #0]
  *(mac+offset+2) = FTFL_FCCOB7;       // Skip FTFL_FCCOB4 as it's always 0.
    18c2:	ldrb	r1, [r1, #0]
    18c4:	strb	r1, [r2, #5]
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    18c6:	lsrs	r3, r3, #4
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18c8:	cmp	r3, #9
    18ca:	ite	hi
    18cc:	addhi	r3, #55	; 0x37
    18ce:	addls	r3, #48	; 0x30

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
    18d0:	strb	r5, [r2, #3]
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    18d2:	strb	r4, [r2, #4]
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18d4:	strb	r3, [r0, #0]
    digit=(mac[ii] & 0x0F);
    18d6:	ldrb	r3, [r2, #0]
    18d8:	and.w	r3, r3, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18dc:	cmp	r3, #9
    18de:	ite	hi
    18e0:	addhi	r3, #55	; 0x37
    18e2:	addls	r3, #48	; 0x30
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    18e4:	movs	r1, #95	; 0x5f
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18e6:	strb	r3, [r0, #1]
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    18e8:	strb	r1, [r0, #2]
    digit=(mac[ii] & 0xF0) >> 4;
    18ea:	ldrb	r3, [r2, #1]
    18ec:	lsrs	r3, r3, #4
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18ee:	cmp	r3, #9
    18f0:	bls.n	1996 <encode_mac(char*)+0x12a>
    18f2:	adds	r3, #55	; 0x37
    18f4:	strb	r3, [r0, #3]
    digit=(mac[ii] & 0x0F);
    18f6:	ldrb	r3, [r2, #1]
    18f8:	and.w	r3, r3, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18fc:	cmp	r3, #9
    18fe:	ite	hi
    1900:	addhi	r3, #55	; 0x37
    1902:	addls	r3, #48	; 0x30
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1904:	movs	r1, #95	; 0x5f
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1906:	strb	r3, [r0, #4]
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1908:	strb	r1, [r0, #5]
    digit=(mac[ii] & 0xF0) >> 4;
    190a:	ldrb	r3, [r2, #2]
    190c:	lsrs	r3, r3, #4
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    190e:	cmp	r3, #9
    1910:	bls.n	19a6 <encode_mac(char*)+0x13a>
    1912:	adds	r3, #55	; 0x37
    1914:	strb	r3, [r0, #6]
    digit=(mac[ii] & 0x0F);
    1916:	ldrb	r3, [r2, #2]
    1918:	and.w	r3, r3, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    191c:	cmp	r3, #9
    191e:	ite	hi
    1920:	addhi	r3, #55	; 0x37
    1922:	addls	r3, #48	; 0x30
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1924:	movs	r1, #95	; 0x5f
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1926:	strb	r3, [r0, #7]
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1928:	strb	r1, [r0, #8]
    digit=(mac[ii] & 0xF0) >> 4;
    192a:	ldrb	r3, [r2, #3]
    192c:	lsrs	r3, r3, #4
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    192e:	cmp	r3, #9
    1930:	bls.n	19a2 <encode_mac(char*)+0x136>
    1932:	adds	r3, #55	; 0x37
    digit=(mac[ii] & 0x0F);
    1934:	ldrb	r1, [r2, #3]
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1936:	strb	r3, [r0, #9]
    digit=(mac[ii] & 0x0F);
    1938:	and.w	r3, r1, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    193c:	cmp	r3, #9
    193e:	ite	hi
    1940:	addhi.w	r1, r3, #55	; 0x37
    1944:	addls.w	r1, r3, #48	; 0x30
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    1948:	ldrb	r3, [r2, #4]
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    194a:	strb	r1, [r0, #10]
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    194c:	lsrs	r3, r3, #4
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    194e:	movs	r1, #95	; 0x5f
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1950:	cmp	r3, #9
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1952:	strb	r1, [r0, #11]
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1954:	bls.n	199e <encode_mac(char*)+0x132>
    1956:	adds	r3, #55	; 0x37
    digit=(mac[ii] & 0x0F);
    1958:	ldrb	r1, [r2, #4]
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    195a:	strb	r3, [r0, #12]
    digit=(mac[ii] & 0x0F);
    195c:	and.w	r3, r1, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1960:	cmp	r3, #9
    1962:	ite	hi
    1964:	addhi.w	r1, r3, #55	; 0x37
    1968:	addls.w	r1, r3, #48	; 0x30
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    196c:	ldrb	r3, [r2, #5]
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    196e:	strb	r1, [r0, #13]
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    1970:	lsrs	r3, r3, #4
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1972:	movs	r1, #95	; 0x5f
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1974:	cmp	r3, #9
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1976:	strb	r1, [r0, #14]
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1978:	bhi.n	199a <encode_mac(char*)+0x12e>
    197a:	adds	r3, #48	; 0x30
    digit=(mac[ii] & 0x0F);
    197c:	ldrb	r2, [r2, #5]
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    197e:	strb	r3, [r0, #15]
    digit=(mac[ii] & 0x0F);
    1980:	and.w	r3, r2, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1984:	cmp	r3, #9
    1986:	ite	ls
    1988:	addls	r3, #48	; 0x30
    198a:	addhi	r3, #55	; 0x37
  }
  text[jj]=0;
    198c:	movs	r2, #0
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    198e:	strb	r3, [r0, #16]
  }
  text[jj]=0;
    1990:	strb	r2, [r0, #17]

  return text;
}
    1992:	pop	{r4, r5, r6, r7}
    1994:	bx	lr
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1996:	adds	r3, #48	; 0x30
    1998:	b.n	18f4 <encode_mac(char*)+0x88>
    199a:	adds	r3, #55	; 0x37
    199c:	b.n	197c <encode_mac(char*)+0x110>
    199e:	adds	r3, #48	; 0x30
    19a0:	b.n	1958 <encode_mac(char*)+0xec>
    19a2:	adds	r3, #48	; 0x30
    19a4:	b.n	1934 <encode_mac(char*)+0xc8>
    19a6:	adds	r3, #48	; 0x30
    19a8:	b.n	1914 <encode_mac(char*)+0xa8>
    19aa:	nop
    19ac:	.word	0x40020007
    19b0:	.word	0x40020000
    19b4:	.word	0x40020006
    19b8:	.word	0x4002000a
    19bc:	.word	0x1fff1744
    19c0:	.word	0x40020009
    19c4:	.word	0x40020008

000019c8 <printAll()>:
int getLightSensor();

char text[32];

static void printAll(void)
{
    19c8:	push	{r4, r5, r6, r7, lr}
  SERIALX.printf("%c %2d on_time\n\r",     'g',parameters.on_time);
    19ca:	ldr	r4, [pc, #316]	; (1b08 <printAll()+0x140>)
    19cc:	ldr	r5, [pc, #316]	; (1b0c <printAll()+0x144>)
    19ce:	ldr	r1, [pc, #320]	; (1b10 <printAll()+0x148>)
    19d0:	ldrh	r3, [r5, #0]
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    19d2:	ldr	r7, [pc, #320]	; (1b14 <printAll()+0x14c>)

static char * getDate(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    sprintf(text,"%04d/%02d/%02d",tx.tm_year, tx.tm_mon, tx.tm_mday);
    19d4:	ldr	r6, [pc, #320]	; (1b18 <printAll()+0x150>)
int getLightSensor();

char text[32];

static void printAll(void)
{
    19d6:	sub	sp, #52	; 0x34
  SERIALX.printf("%c %2d on_time\n\r",     'g',parameters.on_time);
    19d8:	mov	r0, r4
    19da:	movs	r2, #103	; 0x67
    19dc:	bl	b040 <Print::printf(char const*, ...)>
  SERIALX.printf("%c %2d off_time\n\r",    'p',parameters.off_time);
    19e0:	ldrh	r3, [r5, #2]
    19e2:	ldr	r1, [pc, #312]	; (1b1c <printAll()+0x154>)
    19e4:	mov	r0, r4
    19e6:	movs	r2, #112	; 0x70
    19e8:	bl	b040 <Print::printf(char const*, ...)>
  SERIALX.printf("%c %2d first_hour\n\r",  'i',parameters.first_hour);
    19ec:	ldrh	r3, [r5, #4]
    19ee:	ldr	r1, [pc, #304]	; (1b20 <printAll()+0x158>)
    19f0:	mov	r0, r4
    19f2:	movs	r2, #105	; 0x69
    19f4:	bl	b040 <Print::printf(char const*, ...)>
  SERIALX.printf("%c %2d second_hour\n\r", 'u',parameters.second_hour);
    19f8:	ldrh	r3, [r5, #6]
    19fa:	ldr	r1, [pc, #296]	; (1b24 <printAll()+0x15c>)
    19fc:	mov	r0, r4
    19fe:	movs	r2, #117	; 0x75
    1a00:	bl	b040 <Print::printf(char const*, ...)>
  SERIALX.printf("%c %2d third_hour\n\r",  'v',parameters.third_hour);
    1a04:	ldrh	r3, [r5, #8]
    1a06:	ldr	r1, [pc, #288]	; (1b28 <printAll()+0x160>)
    1a08:	mov	r0, r4
    1a0a:	movs	r2, #118	; 0x76
    1a0c:	bl	b040 <Print::printf(char const*, ...)>
  SERIALX.printf("%c %2d last_hour\n\r",   'f',parameters.last_hour);
    1a10:	ldrh	r3, [r5, #10]
    1a12:	ldr	r1, [pc, #280]	; (1b2c <printAll()+0x164>)
    1a14:	mov	r0, r4
    1a16:	movs	r2, #102	; 0x66
    1a18:	bl	b040 <Print::printf(char const*, ...)>
  SERIALX.printf("%c %s name\n\r",         'n',parameters.name);
    1a1c:	add.w	r3, r5, #12
    1a20:	movs	r2, #110	; 0x6e
    1a22:	mov	r0, r4
    1a24:	ldr	r1, [pc, #264]	; (1b30 <printAll()+0x168>)
    1a26:	bl	b040 <Print::printf(char const*, ...)>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1a2a:	ldr	r1, [r7, #0]
}

static char * getDate(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1a2c:	add	r0, sp, #12
    1a2e:	bl	1168 <seconds2tm(unsigned long)>
    sprintf(text,"%04d/%02d/%02d",tx.tm_year, tx.tm_mon, tx.tm_mday);
    1a32:	ldr	r1, [sp, #24]
    1a34:	ldr	r3, [sp, #28]
    1a36:	ldr	r2, [sp, #32]
    1a38:	str	r1, [sp, #0]
    1a3a:	mov	r0, r6
    1a3c:	ldr	r1, [pc, #244]	; (1b34 <printAll()+0x16c>)
    1a3e:	bl	d0f4 <sprintf>
  SERIALX.printf("%c %2d first_hour\n\r",  'i',parameters.first_hour);
  SERIALX.printf("%c %2d second_hour\n\r", 'u',parameters.second_hour);
  SERIALX.printf("%c %2d third_hour\n\r",  'v',parameters.third_hour);
  SERIALX.printf("%c %2d last_hour\n\r",   'f',parameters.last_hour);
  SERIALX.printf("%c %s name\n\r",         'n',parameters.name);
  SERIALX.printf("%c %s date\n\r",         'd',getDate(text));
    1a42:	mov	r3, r6
    1a44:	movs	r2, #100	; 0x64
    1a46:	mov	r0, r4
    1a48:	ldr	r1, [pc, #236]	; (1b38 <printAll()+0x170>)
    1a4a:	bl	b040 <Print::printf(char const*, ...)>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1a4e:	ldr	r1, [r7, #0]
}

static char * getTime(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1a50:	add	r0, sp, #12
    1a52:	bl	1168 <seconds2tm(unsigned long)>
    sprintf(text,"%02d:%02d:%02d",tx.tm_hour, tx.tm_min, tx.tm_sec);
    1a56:	ldr	r1, [sp, #12]
    1a58:	ldr	r3, [sp, #16]
    1a5a:	ldr	r2, [sp, #20]
    1a5c:	str	r1, [sp, #0]
    1a5e:	mov	r0, r6
    1a60:	ldr	r1, [pc, #216]	; (1b3c <printAll()+0x174>)
    1a62:	bl	d0f4 <sprintf>
  SERIALX.printf("%c %2d second_hour\n\r", 'u',parameters.second_hour);
  SERIALX.printf("%c %2d third_hour\n\r",  'v',parameters.third_hour);
  SERIALX.printf("%c %2d last_hour\n\r",   'f',parameters.last_hour);
  SERIALX.printf("%c %s name\n\r",         'n',parameters.name);
  SERIALX.printf("%c %s date\n\r",         'd',getDate(text));
  SERIALX.printf("%c %s time\n\r",         't',getTime(text));
    1a66:	mov	r3, r6
    1a68:	movs	r2, #116	; 0x74
    1a6a:	ldr	r1, [pc, #212]	; (1b40 <printAll()+0x178>)
    1a6c:	mov	r0, r4
    1a6e:	bl	b040 <Print::printf(char const*, ...)>
  SERIALX.printf("%c %s mac address\n\r",  'm',encode_mac(text));
    1a72:	mov	r0, r6
    1a74:	bl	186c <encode_mac(char*)>
    1a78:	movs	r2, #109	; 0x6d
    1a7a:	mov	r3, r0
    1a7c:	ldr	r1, [pc, #196]	; (1b44 <printAll()+0x17c>)
    1a7e:	mov	r0, r4
    1a80:	bl	b040 <Print::printf(char const*, ...)>
  SERIALX.println();
    1a84:	mov	r0, r4
    1a86:	bl	b010 <Print::println()>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a8a:	movs	r1, #23
    1a8c:	ldr	r0, [pc, #184]	; (1b48 <printAll()+0x180>)
    1a8e:	bl	96c8 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1a92:	mov	r0, r4
    1a94:	bl	b010 <Print::println()>
    1a98:	movs	r1, #48	; 0x30
    1a9a:	ldr	r0, [pc, #176]	; (1b4c <printAll()+0x184>)
    1a9c:	bl	96c8 <usb_serial_write>
    1aa0:	mov	r0, r4
    1aa2:	bl	b010 <Print::println()>
    1aa6:	movs	r1, #32
    1aa8:	ldr	r0, [pc, #164]	; (1b50 <printAll()+0x188>)
    1aaa:	bl	96c8 <usb_serial_write>
    1aae:	mov	r0, r4
    1ab0:	bl	b010 <Print::println()>
    1ab4:	movs	r1, #70	; 0x46
    1ab6:	ldr	r0, [pc, #156]	; (1b54 <printAll()+0x18c>)
    1ab8:	bl	96c8 <usb_serial_write>
    1abc:	mov	r0, r4
    1abe:	bl	b010 <Print::println()>
    1ac2:	movs	r1, #38	; 0x26
    1ac4:	ldr	r0, [pc, #144]	; (1b58 <printAll()+0x190>)
    1ac6:	bl	96c8 <usb_serial_write>
    1aca:	mov	r0, r4
    1acc:	bl	b010 <Print::println()>
    1ad0:	movs	r1, #69	; 0x45
    1ad2:	ldr	r0, [pc, #136]	; (1b5c <printAll()+0x194>)
    1ad4:	bl	96c8 <usb_serial_write>
    1ad8:	mov	r0, r4
    1ada:	bl	b010 <Print::println()>
    1ade:	movs	r1, #50	; 0x32
    1ae0:	ldr	r0, [pc, #124]	; (1b60 <printAll()+0x198>)
    1ae2:	bl	96c8 <usb_serial_write>
    1ae6:	mov	r0, r4
    1ae8:	bl	b010 <Print::println()>
    1aec:	movs	r1, #43	; 0x2b
    1aee:	ldr	r0, [pc, #116]	; (1b64 <printAll()+0x19c>)
    1af0:	bl	96c8 <usb_serial_write>
    1af4:	mov	r0, r4
    1af6:	bl	b010 <Print::println()>
  SERIALX.println("exter '!cval' to read value c=(g,p,i,u,v,f,n,d,t) and val is new value");
  SERIALX.println("  e.g.: !i10 will set first hour to 10");
  SERIALX.println("exter 'xval' to exit menu (x is delay in minutes, -1 means immediate)");
  SERIALX.println("  e.g.: x10 will exit and hibernate for 10 minutes");
  SERIALX.println("        x-1 with exit and start immediately");
  SERIALX.println();
    1afa:	mov	r0, r4
}
    1afc:	add	sp, #52	; 0x34
    1afe:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  SERIALX.println("exter '!cval' to read value c=(g,p,i,u,v,f,n,d,t) and val is new value");
  SERIALX.println("  e.g.: !i10 will set first hour to 10");
  SERIALX.println("exter 'xval' to exit menu (x is delay in minutes, -1 means immediate)");
  SERIALX.println("  e.g.: x10 will exit and hibernate for 10 minutes");
  SERIALX.println("        x-1 with exit and start immediately");
  SERIALX.println();
    1b02:	b.w	b010 <Print::println()>
    1b06:	nop
    1b08:	.word	0x1fff0898
    1b0c:	.word	0x1fff0734
    1b10:	.word	0x0001393c
    1b14:	.word	0x4003d000
    1b18:	.word	0x1fff245c
    1b1c:	.word	0x00013950
    1b20:	.word	0x00013964
    1b24:	.word	0x00013978
    1b28:	.word	0x00013990
    1b2c:	.word	0x000139a4
    1b30:	.word	0x000139b8
    1b34:	.word	0x000139c8
    1b38:	.word	0x000139d8
    1b3c:	.word	0x000139e8
    1b40:	.word	0x000139f8
    1b44:	.word	0x00013a08
    1b48:	.word	0x00013a1c
    1b4c:	.word	0x00013a34
    1b50:	.word	0x00013a68
    1b54:	.word	0x00013a8c
    1b58:	.word	0x00013ad4
    1b5c:	.word	0x00013afc
    1b60:	.word	0x00013b44
    1b64:	.word	0x00013b78

00001b68 <doMenu()>:
      parMods=1;
    }  
}

int16_t doMenu(void)
{
    1b68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
static void setRTC(uint32_t tt)
{
  RTC_SR = 0;
    1b6c:	ldr	r5, [pc, #640]	; (1df0 <doMenu()+0x288>)
  RTC_TPR = 0;
    1b6e:	ldr	r6, [pc, #644]	; (1df4 <doMenu()+0x28c>)
      parMods=1;
    }  
}

int16_t doMenu(void)
{
    1b70:	sub	sp, #52	; 0x34
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1b72:	bl	9674 <usb_serial_available>
  int16_t ret=0;
  do
  {
    while(!SERIALX.available());
    1b76:	cmp	r0, #0
    1b78:	beq.n	1b72 <doMenu()+0xa>
        virtual int read() { return usb_serial_getchar(); }
    1b7a:	bl	95fc <usb_serial_getchar>
    1b7e:	uxtb	r4, r0
    char c=SERIALX.read();
    
    if (strchr("?!xa", c))
    1b80:	mov	r1, r4
    1b82:	ldr	r0, [pc, #628]	; (1df8 <doMenu()+0x290>)
    1b84:	bl	d19c <strchr>
    1b88:	cmp	r0, #0
    1b8a:	beq.n	1b72 <doMenu()+0xa>
    { switch (c)
    1b8c:	cmp	r4, #63	; 0x3f
    1b8e:	beq.n	1bae <doMenu()+0x46>
    1b90:	ble.n	1c20 <doMenu()+0xb8>
    1b92:	cmp	r4, #97	; 0x61
    1b94:	beq.w	1cac <doMenu()+0x144>
    1b98:	cmp	r4, #120	; 0x78
    1b9a:	bne.n	1b72 <doMenu()+0xa>
      {
        case '?': doMenu1(); break;
        case '!': doMenu2(); break;
        case 'x': ret = SERIALX.parseInt(); break;
    1b9c:	ldr	r0, [pc, #604]	; (1dfc <doMenu()+0x294>)
    1b9e:	bl	b244 <Stream::parseInt()>
    1ba2:	sxth	r0, r0
        case 'a': printAll(); break;
      }
    }
  } while(ret==0);
    1ba4:	cmp	r0, #0
    1ba6:	beq.n	1b72 <doMenu()+0xa>
  return ret;
}
    1ba8:	add	sp, #52	; 0x34
    1baa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1bae:	bl	9674 <usb_serial_available>
  SERIALX.println();
}

static void doMenu1(void)
{ // for enquiries
    while(!SERIALX.available());
    1bb2:	cmp	r0, #0
    1bb4:	beq.n	1bae <doMenu()+0x46>
        virtual int read() { return usb_serial_getchar(); }
    1bb6:	bl	95fc <usb_serial_getchar>
    1bba:	uxtb	r4, r0
    char c=SERIALX.read();
    
    if (strchr("gpiuvfndtlm", c))
    1bbc:	mov	r1, r4
    1bbe:	ldr	r0, [pc, #576]	; (1e00 <doMenu()+0x298>)
    1bc0:	bl	d19c <strchr>
    1bc4:	cmp	r0, #0
    1bc6:	beq.n	1b72 <doMenu()+0xa>
    { switch (c)
    1bc8:	subs	r4, #100	; 0x64
    1bca:	cmp	r4, #18
    1bcc:	bhi.n	1b72 <doMenu()+0xa>
    1bce:	add	r3, pc, #4	; (adr r3, 1bd4 <doMenu()+0x6c>)
    1bd0:	ldr.w	pc, [r3, r4, lsl #2]
    1bd4:	.word	0x00001d75
    1bd8:	.word	0x00001b73
    1bdc:	.word	0x00001d9b
    1be0:	.word	0x00001da9
    1be4:	.word	0x00001b73
    1be8:	.word	0x00001db7
    1bec:	.word	0x00001b73
    1bf0:	.word	0x00001b73
    1bf4:	.word	0x00001dc5
    1bf8:	.word	0x00001dd1
    1bfc:	.word	0x00001de3
    1c00:	.word	0x00001b73
    1c04:	.word	0x00001e31
    1c08:	.word	0x00001b73
    1c0c:	.word	0x00001b73
    1c10:	.word	0x00001b73
    1c14:	.word	0x00001e3f
    1c18:	.word	0x00001e55
    1c1c:	.word	0x00001e63
  {
    while(!SERIALX.available());
    char c=SERIALX.read();
    
    if (strchr("?!xa", c))
    { switch (c)
    1c20:	cmp	r4, #33	; 0x21
    1c22:	bne.n	1b72 <doMenu()+0xa>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1c24:	bl	9674 <usb_serial_available>
! t timestring\n ESM_Logger sets time
! x delay\n      ESM_Logger exits menu and hibernates for the amount given in delay
*/
static void doMenu2(void)
{ // for settings
    while(!SERIALX.available());
    1c28:	cmp	r0, #0
    1c2a:	beq.n	1c24 <doMenu()+0xbc>
        virtual int read() { return usb_serial_getchar(); }
    1c2c:	bl	95fc <usb_serial_getchar>
    1c30:	uxtb	r4, r0
    char c=SERIALX.read();
    uint16_t year,month,day,hour,minutes,seconds;
    
    if (strchr("gpiuvfndt", c))
    1c32:	mov	r1, r4
    1c34:	ldr	r0, [pc, #460]	; (1e04 <doMenu()+0x29c>)
    1c36:	bl	d19c <strchr>
    1c3a:	cmp	r0, #0
    1c3c:	beq.n	1b72 <doMenu()+0xa>
    { switch (c)
    1c3e:	subs	r4, #100	; 0x64
    1c40:	cmp	r4, #18
    1c42:	bhi.n	1ca4 <doMenu()+0x13c>
    1c44:	tbb	[pc, r4]
    1c48:	.word	0x473e2e0a
    1c4c:	.word	0x2e2e502e
    1c50:	.word	0x2e592e2e
    1c54:	.word	0x2e2e2e68
    1c58:	.short	0x8d71
    1c5a:	.byte	0x35
    1c5b:	.byte	0x00
        case 'v': parameters.third_hour  =SERIALX.parseInt();break;
        case 'f': parameters.last_hour   =SERIALX.parseInt();break;
        case 'n': for(int ii=0; ii<4;ii++) parameters.name[ii] = SERIALX.read();
                  parameters.name[4]=0; break;
        case 'd':     
                  year= SERIALX.parseInt();
    1c5c:	ldr	r0, [pc, #412]	; (1dfc <doMenu()+0x294>)
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1c5e:	ldr.w	r9, [pc, #436]	; 1e14 <doMenu()+0x2ac>
        case 'v': parameters.third_hour  =SERIALX.parseInt();break;
        case 'f': parameters.last_hour   =SERIALX.parseInt();break;
        case 'n': for(int ii=0; ii<4;ii++) parameters.name[ii] = SERIALX.read();
                  parameters.name[4]=0; break;
        case 'd':     
                  year= SERIALX.parseInt();
    1c62:	bl	b244 <Stream::parseInt()>
    1c66:	mov	r8, r0
                  month= SERIALX.parseInt();
    1c68:	ldr	r0, [pc, #400]	; (1dfc <doMenu()+0x294>)
    1c6a:	bl	b244 <Stream::parseInt()>
    1c6e:	mov	r7, r0
                  day= SERIALX.parseInt();
    1c70:	ldr	r0, [pc, #392]	; (1dfc <doMenu()+0x294>)
    1c72:	bl	b244 <Stream::parseInt()>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1c76:	ldr.w	r1, [r9]
        case 'n': for(int ii=0; ii<4;ii++) parameters.name[ii] = SERIALX.read();
                  parameters.name[4]=0; break;
        case 'd':     
                  year= SERIALX.parseInt();
                  month= SERIALX.parseInt();
                  day= SERIALX.parseInt();
    1c7a:	mov	r4, r0
}

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    1c7c:	add	r0, sp, #12
    1c7e:	bl	1168 <seconds2tm(unsigned long)>
    tx.tm_year=year;
    tx.tm_mon=month;
    1c82:	uxth	r7, r7

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    tx.tm_year=year;
    1c84:	uxth.w	r3, r8
    tx.tm_mon=month;
    tx.tm_mday=day;
    1c88:	uxth	r4, r4
    tt=tm2seconds(&tx);
    1c8a:	add	r0, sp, #12

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    tx.tm_year=year;
    1c8c:	str	r3, [sp, #32]
    tx.tm_mon=month;
    1c8e:	str	r7, [sp, #28]
    tx.tm_mday=day;
    1c90:	str	r4, [sp, #24]
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    tx.tm_hour=hour;
    tx.tm_min=minutes;
    tx.tm_sec=seconds;
    tt=tm2seconds(&tx);
    1c92:	bl	1524 <tm2seconds(tm*)>
/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
static void setRTC(uint32_t tt)
{
  RTC_SR = 0;
    1c96:	movs	r3, #0
  RTC_TPR = 0;
  RTC_TSR = tt;
  RTC_SR = RTC_SR_TCE;
    1c98:	movs	r2, #16
/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
static void setRTC(uint32_t tt)
{
  RTC_SR = 0;
    1c9a:	str	r3, [r5, #0]
  RTC_TPR = 0;
    1c9c:	str	r3, [r6, #0]
  RTC_TSR = tt;
    1c9e:	str.w	r0, [r9]
  RTC_SR = RTC_SR_TCE;
    1ca2:	str	r2, [r5, #0]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1ca4:	ldr	r3, [pc, #352]	; (1e08 <doMenu()+0x2a0>)
    1ca6:	movs	r2, #1
    1ca8:	strh	r2, [r3, #0]
    1caa:	b.n	1b72 <doMenu()+0xa>
    { switch (c)
      {
        case '?': doMenu1(); break;
        case '!': doMenu2(); break;
        case 'x': ret = SERIALX.parseInt(); break;
        case 'a': printAll(); break;
    1cac:	bl	19c8 <printAll()>
    1cb0:	b.n	1b72 <doMenu()+0xa>
      {
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
        case 'i': parameters.first_hour  =SERIALX.parseInt();break;
        case 'u': parameters.second_hour =SERIALX.parseInt();break;
        case 'v': parameters.third_hour  =SERIALX.parseInt();break;
    1cb2:	ldr	r0, [pc, #328]	; (1dfc <doMenu()+0x294>)
    1cb4:	bl	b244 <Stream::parseInt()>
    1cb8:	ldr	r3, [pc, #336]	; (1e0c <doMenu()+0x2a4>)
    1cba:	strh	r0, [r3, #8]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1cbc:	ldr	r3, [pc, #328]	; (1e08 <doMenu()+0x2a0>)
    1cbe:	movs	r2, #1
    1cc0:	strh	r2, [r3, #0]
    1cc2:	b.n	1b72 <doMenu()+0xa>
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
        case 'i': parameters.first_hour  =SERIALX.parseInt();break;
        case 'u': parameters.second_hour =SERIALX.parseInt();break;
        case 'v': parameters.third_hour  =SERIALX.parseInt();break;
        case 'f': parameters.last_hour   =SERIALX.parseInt();break;
    1cc4:	ldr	r0, [pc, #308]	; (1dfc <doMenu()+0x294>)
    1cc6:	bl	b244 <Stream::parseInt()>
    1cca:	ldr	r3, [pc, #320]	; (1e0c <doMenu()+0x2a4>)
    1ccc:	strh	r0, [r3, #10]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1cce:	ldr	r3, [pc, #312]	; (1e08 <doMenu()+0x2a0>)
    1cd0:	movs	r2, #1
    1cd2:	strh	r2, [r3, #0]
    1cd4:	b.n	1b72 <doMenu()+0xa>
    uint16_t year,month,day,hour,minutes,seconds;
    
    if (strchr("gpiuvfndt", c))
    { switch (c)
      {
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
    1cd6:	ldr	r0, [pc, #292]	; (1dfc <doMenu()+0x294>)
    1cd8:	bl	b244 <Stream::parseInt()>
    1cdc:	ldr	r3, [pc, #300]	; (1e0c <doMenu()+0x2a4>)
    1cde:	strh	r0, [r3, #0]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1ce0:	ldr	r3, [pc, #292]	; (1e08 <doMenu()+0x2a0>)
    1ce2:	movs	r2, #1
    1ce4:	strh	r2, [r3, #0]
    1ce6:	b.n	1b72 <doMenu()+0xa>
    if (strchr("gpiuvfndt", c))
    { switch (c)
      {
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
        case 'i': parameters.first_hour  =SERIALX.parseInt();break;
    1ce8:	ldr	r0, [pc, #272]	; (1dfc <doMenu()+0x294>)
    1cea:	bl	b244 <Stream::parseInt()>
    1cee:	ldr	r3, [pc, #284]	; (1e0c <doMenu()+0x2a4>)
    1cf0:	strh	r0, [r3, #4]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1cf2:	ldr	r3, [pc, #276]	; (1e08 <doMenu()+0x2a0>)
    1cf4:	movs	r2, #1
    1cf6:	strh	r2, [r3, #0]
    1cf8:	b.n	1b72 <doMenu()+0xa>
    1cfa:	ldr	r4, [pc, #276]	; (1e10 <doMenu()+0x2a8>)
    1cfc:	adds	r7, r4, #4
    1cfe:	bl	95fc <usb_serial_getchar>
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
        case 'i': parameters.first_hour  =SERIALX.parseInt();break;
        case 'u': parameters.second_hour =SERIALX.parseInt();break;
        case 'v': parameters.third_hour  =SERIALX.parseInt();break;
        case 'f': parameters.last_hour   =SERIALX.parseInt();break;
        case 'n': for(int ii=0; ii<4;ii++) parameters.name[ii] = SERIALX.read();
    1d02:	strb.w	r0, [r4, #1]!
    1d06:	cmp	r4, r7
    1d08:	bne.n	1cfe <doMenu()+0x196>
                  parameters.name[4]=0; break;
    1d0a:	ldr	r3, [pc, #256]	; (1e0c <doMenu()+0x2a4>)
    1d0c:	movs	r2, #0
    1d0e:	strb	r2, [r3, #16]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1d10:	ldr	r3, [pc, #244]	; (1e08 <doMenu()+0x2a0>)
    1d12:	movs	r2, #1
    1d14:	strh	r2, [r3, #0]
    1d16:	b.n	1b72 <doMenu()+0xa>
    
    if (strchr("gpiuvfndt", c))
    { switch (c)
      {
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
    1d18:	ldr	r0, [pc, #224]	; (1dfc <doMenu()+0x294>)
    1d1a:	bl	b244 <Stream::parseInt()>
    1d1e:	ldr	r3, [pc, #236]	; (1e0c <doMenu()+0x2a4>)
    1d20:	strh	r0, [r3, #2]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1d22:	ldr	r3, [pc, #228]	; (1e08 <doMenu()+0x2a0>)
    1d24:	movs	r2, #1
    1d26:	strh	r2, [r3, #0]
    1d28:	b.n	1b72 <doMenu()+0xa>
                  month= SERIALX.parseInt();
                  day= SERIALX.parseInt();
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour= SERIALX.parseInt();
    1d2a:	ldr	r0, [pc, #208]	; (1dfc <doMenu()+0x294>)
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1d2c:	ldr.w	r9, [pc, #228]	; 1e14 <doMenu()+0x2ac>
                  month= SERIALX.parseInt();
                  day= SERIALX.parseInt();
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour= SERIALX.parseInt();
    1d30:	bl	b244 <Stream::parseInt()>
    1d34:	mov	r8, r0
                  minutes= SERIALX.parseInt();
    1d36:	ldr	r0, [pc, #196]	; (1dfc <doMenu()+0x294>)
    1d38:	bl	b244 <Stream::parseInt()>
    1d3c:	mov	r7, r0
                  seconds= SERIALX.parseInt();
    1d3e:	ldr	r0, [pc, #188]	; (1dfc <doMenu()+0x294>)
    1d40:	bl	b244 <Stream::parseInt()>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1d44:	ldr.w	r1, [r9]
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour= SERIALX.parseInt();
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
    1d48:	mov	r4, r0
}

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    1d4a:	add	r0, sp, #12
    1d4c:	bl	1168 <seconds2tm(unsigned long)>
    tx.tm_hour=hour;
    tx.tm_min=minutes;
    1d50:	uxth	r7, r7

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    tx.tm_hour=hour;
    1d52:	uxth.w	r3, r8
    tx.tm_min=minutes;
    tx.tm_sec=seconds;
    1d56:	uxth	r4, r4
    tt=tm2seconds(&tx);
    1d58:	add	r0, sp, #12

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    tx.tm_hour=hour;
    1d5a:	str	r3, [sp, #20]
    tx.tm_min=minutes;
    1d5c:	str	r7, [sp, #16]
    tx.tm_sec=seconds;
    1d5e:	str	r4, [sp, #12]
    1d60:	b.n	1c92 <doMenu()+0x12a>
    { switch (c)
      {
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
        case 'i': parameters.first_hour  =SERIALX.parseInt();break;
        case 'u': parameters.second_hour =SERIALX.parseInt();break;
    1d62:	ldr	r0, [pc, #152]	; (1dfc <doMenu()+0x294>)
    1d64:	bl	b244 <Stream::parseInt()>
    1d68:	ldr	r3, [pc, #160]	; (1e0c <doMenu()+0x2a4>)
    1d6a:	strh	r0, [r3, #6]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1d6c:	ldr	r3, [pc, #152]	; (1e08 <doMenu()+0x2a0>)
    1d6e:	movs	r2, #1
    1d70:	strh	r2, [r3, #0]
    1d72:	b.n	1b72 <doMenu()+0xa>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1d74:	ldr	r3, [pc, #156]	; (1e14 <doMenu()+0x2ac>)
}

static char * getDate(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1d76:	add	r0, sp, #12
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1d78:	ldr	r1, [r3, #0]
}

static char * getDate(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1d7a:	bl	1168 <seconds2tm(unsigned long)>
    sprintf(text,"%04d/%02d/%02d",tx.tm_year, tx.tm_mon, tx.tm_mday);
    1d7e:	ldr	r1, [sp, #24]
    1d80:	str	r1, [sp, #0]
    1d82:	ldr	r3, [sp, #28]
    1d84:	ldr	r2, [sp, #32]
    1d86:	ldr	r1, [pc, #144]	; (1e18 <doMenu()+0x2b0>)

static char * getTime(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    sprintf(text,"%02d:%02d:%02d",tx.tm_hour, tx.tm_min, tx.tm_sec);
    1d88:	ldr	r0, [pc, #144]	; (1e1c <doMenu()+0x2b4>)
    1d8a:	bl	d0f4 <sprintf>
        case 'u': SERIALX.printf("%02d\r\n",parameters.second_hour);break;
        case 'v': SERIALX.printf("%02d\r\n",parameters.third_hour);break;
        case 'f': SERIALX.printf("%02d\r\n",parameters.last_hour);break;
        case 'n': SERIALX.printf("%s\r\n",parameters.name);break;  // could be (unique) mac address
        case 'd': SERIALX.printf("%s\r\n",getDate(text));break;
        case 't': SERIALX.printf("%s\r\n",getTime(text));break;
    1d8e:	ldr	r2, [pc, #140]	; (1e1c <doMenu()+0x2b4>)
    1d90:	ldr	r1, [pc, #140]	; (1e20 <doMenu()+0x2b8>)
    1d92:	ldr	r0, [pc, #104]	; (1dfc <doMenu()+0x294>)
    1d94:	bl	b040 <Print::printf(char const*, ...)>
    1d98:	b.n	1b72 <doMenu()+0xa>
        case 'g': SERIALX.printf("%02d\r\n",parameters.on_time); break;
        case 'p': SERIALX.printf("%02d\r\n",parameters.off_time); break;
        case 'i': SERIALX.printf("%02d\r\n",parameters.first_hour);break;
        case 'u': SERIALX.printf("%02d\r\n",parameters.second_hour);break;
        case 'v': SERIALX.printf("%02d\r\n",parameters.third_hour);break;
        case 'f': SERIALX.printf("%02d\r\n",parameters.last_hour);break;
    1d9a:	ldr	r3, [pc, #112]	; (1e0c <doMenu()+0x2a4>)
    1d9c:	ldr	r1, [pc, #132]	; (1e24 <doMenu()+0x2bc>)
    1d9e:	ldrh	r2, [r3, #10]
    1da0:	ldr	r0, [pc, #88]	; (1dfc <doMenu()+0x294>)
    1da2:	bl	b040 <Print::printf(char const*, ...)>
    1da6:	b.n	1b72 <doMenu()+0xa>
    char c=SERIALX.read();
    
    if (strchr("gpiuvfndtlm", c))
    { switch (c)
      {
        case 'g': SERIALX.printf("%02d\r\n",parameters.on_time); break;
    1da8:	ldr	r3, [pc, #96]	; (1e0c <doMenu()+0x2a4>)
    1daa:	ldr	r1, [pc, #120]	; (1e24 <doMenu()+0x2bc>)
    1dac:	ldrh	r2, [r3, #0]
    1dae:	ldr	r0, [pc, #76]	; (1dfc <doMenu()+0x294>)
    1db0:	bl	b040 <Print::printf(char const*, ...)>
    1db4:	b.n	1b72 <doMenu()+0xa>
        case 'p': SERIALX.printf("%02d\r\n",parameters.off_time); break;
        case 'i': SERIALX.printf("%02d\r\n",parameters.first_hour);break;
    1db6:	ldr	r3, [pc, #84]	; (1e0c <doMenu()+0x2a4>)
    1db8:	ldr	r1, [pc, #104]	; (1e24 <doMenu()+0x2bc>)
    1dba:	ldrh	r2, [r3, #4]
    1dbc:	ldr	r0, [pc, #60]	; (1dfc <doMenu()+0x294>)
    1dbe:	bl	b040 <Print::printf(char const*, ...)>
    1dc2:	b.n	1b72 <doMenu()+0xa>
        case 'v': SERIALX.printf("%02d\r\n",parameters.third_hour);break;
        case 'f': SERIALX.printf("%02d\r\n",parameters.last_hour);break;
        case 'n': SERIALX.printf("%s\r\n",parameters.name);break;  // could be (unique) mac address
        case 'd': SERIALX.printf("%s\r\n",getDate(text));break;
        case 't': SERIALX.printf("%s\r\n",getTime(text));break;
        case 'l': SERIALX.printf("%04d\r\n",getLightSensor());break;
    1dc4:	movs	r2, #0
    1dc6:	ldr	r1, [pc, #96]	; (1e28 <doMenu()+0x2c0>)
    1dc8:	ldr	r0, [pc, #48]	; (1dfc <doMenu()+0x294>)
    1dca:	bl	b040 <Print::printf(char const*, ...)>
    1dce:	b.n	1b72 <doMenu()+0xa>
        case 'm': SERIALX.printf("%s\r\n",encode_mac(text)); break;
    1dd0:	ldr	r0, [pc, #72]	; (1e1c <doMenu()+0x2b4>)
    1dd2:	bl	186c <encode_mac(char*)>
    1dd6:	ldr	r1, [pc, #72]	; (1e20 <doMenu()+0x2b8>)
    1dd8:	mov	r2, r0
    1dda:	ldr	r0, [pc, #32]	; (1dfc <doMenu()+0x294>)
    1ddc:	bl	b040 <Print::printf(char const*, ...)>
    1de0:	b.n	1b72 <doMenu()+0xa>
        case 'p': SERIALX.printf("%02d\r\n",parameters.off_time); break;
        case 'i': SERIALX.printf("%02d\r\n",parameters.first_hour);break;
        case 'u': SERIALX.printf("%02d\r\n",parameters.second_hour);break;
        case 'v': SERIALX.printf("%02d\r\n",parameters.third_hour);break;
        case 'f': SERIALX.printf("%02d\r\n",parameters.last_hour);break;
        case 'n': SERIALX.printf("%s\r\n",parameters.name);break;  // could be (unique) mac address
    1de2:	ldr	r2, [pc, #72]	; (1e2c <doMenu()+0x2c4>)
    1de4:	ldr	r1, [pc, #56]	; (1e20 <doMenu()+0x2b8>)
    1de6:	ldr	r0, [pc, #20]	; (1dfc <doMenu()+0x294>)
    1de8:	bl	b040 <Print::printf(char const*, ...)>
    1dec:	b.n	1b72 <doMenu()+0xa>
    1dee:	nop
    1df0:	.word	0x4003d014
    1df4:	.word	0x4003d004
    1df8:	.word	0x00013ba4
    1dfc:	.word	0x1fff0898
    1e00:	.word	0x00013bac
    1e04:	.word	0x00013bd0
    1e08:	.word	0x1fff1f4c
    1e0c:	.word	0x1fff0734
    1e10:	.word	0x1fff073f
    1e14:	.word	0x4003d000
    1e18:	.word	0x000139c8
    1e1c:	.word	0x1fff245c
    1e20:	.word	0x00013bc0
    1e24:	.word	0x00013bb8
    1e28:	.word	0x00013bc8
    1e2c:	.word	0x1fff0740
    
    if (strchr("gpiuvfndtlm", c))
    { switch (c)
      {
        case 'g': SERIALX.printf("%02d\r\n",parameters.on_time); break;
        case 'p': SERIALX.printf("%02d\r\n",parameters.off_time); break;
    1e30:	ldr	r3, [pc, #60]	; (1e70 <doMenu()+0x308>)
    1e32:	ldr	r1, [pc, #64]	; (1e74 <doMenu()+0x30c>)
    1e34:	ldrh	r2, [r3, #2]
    1e36:	ldr	r0, [pc, #64]	; (1e78 <doMenu()+0x310>)
    1e38:	bl	b040 <Print::printf(char const*, ...)>
    1e3c:	b.n	1b72 <doMenu()+0xa>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1e3e:	ldr	r3, [pc, #60]	; (1e7c <doMenu()+0x314>)
}

static char * getTime(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1e40:	add	r0, sp, #12
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1e42:	ldr	r1, [r3, #0]
}

static char * getTime(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1e44:	bl	1168 <seconds2tm(unsigned long)>
    sprintf(text,"%02d:%02d:%02d",tx.tm_hour, tx.tm_min, tx.tm_sec);
    1e48:	ldr	r1, [sp, #12]
    1e4a:	str	r1, [sp, #0]
    1e4c:	ldr	r3, [sp, #16]
    1e4e:	ldr	r2, [sp, #20]
    1e50:	ldr	r1, [pc, #44]	; (1e80 <doMenu()+0x318>)
    1e52:	b.n	1d88 <doMenu()+0x220>
    { switch (c)
      {
        case 'g': SERIALX.printf("%02d\r\n",parameters.on_time); break;
        case 'p': SERIALX.printf("%02d\r\n",parameters.off_time); break;
        case 'i': SERIALX.printf("%02d\r\n",parameters.first_hour);break;
        case 'u': SERIALX.printf("%02d\r\n",parameters.second_hour);break;
    1e54:	ldr	r3, [pc, #24]	; (1e70 <doMenu()+0x308>)
    1e56:	ldr	r1, [pc, #28]	; (1e74 <doMenu()+0x30c>)
    1e58:	ldrh	r2, [r3, #6]
    1e5a:	ldr	r0, [pc, #28]	; (1e78 <doMenu()+0x310>)
    1e5c:	bl	b040 <Print::printf(char const*, ...)>
    1e60:	b.n	1b72 <doMenu()+0xa>
        case 'v': SERIALX.printf("%02d\r\n",parameters.third_hour);break;
    1e62:	ldr	r3, [pc, #12]	; (1e70 <doMenu()+0x308>)
    1e64:	ldr	r1, [pc, #12]	; (1e74 <doMenu()+0x30c>)
    1e66:	ldrh	r2, [r3, #8]
    1e68:	ldr	r0, [pc, #12]	; (1e78 <doMenu()+0x310>)
    1e6a:	bl	b040 <Print::printf(char const*, ...)>
    1e6e:	b.n	1b72 <doMenu()+0xa>
    1e70:	.word	0x1fff0734
    1e74:	.word	0x00013bb8
    1e78:	.word	0x1fff0898
    1e7c:	.word	0x4003d000
    1e80:	.word	0x000139e8

00001e84 <SdBase<FsVolume>::errorHalt(Print*)>:
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(Print* pr) {
    1e84:	mov	r5, r0
    1e86:	ldr.w	r0, [r0, #1156]	; 0x484
    1e8a:	push	{r3, lr}
    1e8c:	mov	r4, r1


  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1e8e:	cbz	r0, 1ec0 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
      return m_card->errorCode();
    1e90:	ldr	r3, [r0, #0]
    1e92:	ldr	r3, [r3, #36]	; 0x24
    1e94:	blx	r3
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(Print* pr) {
    if (sdErrorCode()) {
    1e96:	cbnz	r0, 1ec0 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
    1e98:	ldr.w	r3, [r5, #1144]	; 0x478
  /** \return Partition type, FAT_TYPE_EXFAT, FAT_TYPE_FAT32,
   *          FAT_TYPE_FAT16, or zero for error.
   */
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
    1e9c:	cbz	r3, 1eae <SdBase<FsVolume>::errorHalt(Print*)+0x2a>
    1e9e:	ldrb	r3, [r3, #7]
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    1ea0:	cbz	r3, 1ea4 <SdBase<FsVolume>::errorHalt(Print*)+0x20>
    1ea2:	b.n	1ea2 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
      pr->println(F("Check SD format."));
    1ea4:	mov	r0, r4
    1ea6:	ldr	r1, [pc, #104]	; (1f10 <SdBase<FsVolume>::errorHalt(Print*)+0x8c>)
    1ea8:	bl	1144 <Print::println(__FlashStringHelper const*)>
    1eac:	b.n	1ea2 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1eae:	ldr.w	r3, [r5, #1148]	; 0x47c
    1eb2:	cmp	r3, #0
    1eb4:	beq.n	1ea4 <SdBase<FsVolume>::errorHalt(Print*)+0x20>
    1eb6:	ldrb.w	r3, [r3, #1084]	; 0x43c
    if (sdErrorCode()) {
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    1eba:	cmp	r3, #0
    1ebc:	bne.n	1ea2 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1ebe:	b.n	1ea4 <SdBase<FsVolume>::errorHalt(Print*)+0x20>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1ec0:	ldr	r1, [pc, #80]	; (1f14 <SdBase<FsVolume>::errorHalt(Print*)+0x90>)
    1ec2:	mov	r0, r4
    1ec4:	bl	1128 <Print::write(char const*)>
    1ec8:	ldr.w	r0, [r5, #1156]	; 0x484


  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1ecc:	cbz	r0, 1f08 <SdBase<FsVolume>::errorHalt(Print*)+0x84>
      return m_card->errorCode();
    1ece:	ldr	r3, [r0, #0]
    1ed0:	ldr	r3, [r3, #36]	; 0x24
    1ed2:	blx	r3
    1ed4:	mov	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1ed6:	movs	r3, #0
    1ed8:	movs	r2, #16
    1eda:	mov	r0, r4
    1edc:	bl	b05c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1ee0:	ldr	r1, [pc, #52]	; (1f18 <SdBase<FsVolume>::errorHalt(Print*)+0x94>)
    1ee2:	mov	r0, r4
    1ee4:	bl	1128 <Print::write(char const*)>
    1ee8:	ldr.w	r0, [r5, #1156]	; 0x484
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    1eec:	cbz	r0, 1f0c <SdBase<FsVolume>::errorHalt(Print*)+0x88>
    1eee:	ldr	r3, [r0, #0]
    1ef0:	ldr	r3, [r3, #40]	; 0x28
    1ef2:	blx	r3
    1ef4:	uxtb	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1ef6:	movs	r3, #0
    1ef8:	movs	r2, #16
    1efa:	mov	r0, r4
    1efc:	bl	b05c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    1f00:	mov	r0, r4
    1f02:	bl	b010 <Print::println()>
    1f06:	b.n	1ea2 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>


  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1f08:	movs	r1, #39	; 0x27
    1f0a:	b.n	1ed6 <SdBase<FsVolume>::errorHalt(Print*)+0x52>
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    1f0c:	mov	r1, r0
    1f0e:	b.n	1ef6 <SdBase<FsVolume>::errorHalt(Print*)+0x72>
    1f10:	.word	0x00013bec
    1f14:	.word	0x00013bdc
    1f18:	.word	0x00013be8

00001f1c <SdBase<FsVolume>::errorHalt(char const*)>:
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1f1c:	ldr	r4, [pc, #28]	; (1f3c <SdBase<FsVolume>::errorHalt(char const*)+0x20>)
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] msg Message to print.
   */
  void errorHalt(const char* msg) {errorHalt(&Serial, msg);}
    1f1e:	push	{r3, lr}
    1f20:	mov	r5, r0
    1f22:	mov	r6, r1
    1f24:	mov	r0, r4
    1f26:	ldr	r1, [pc, #24]	; (1f40 <SdBase<FsVolume>::errorHalt(char const*)+0x24>)
    1f28:	bl	1128 <Print::write(char const*)>
   * \param[in] pr Print destination.
   * \param[in] msg Message to print.
   */
  void errorHalt(Print* pr, const char* msg) {
    pr->print(F("error: "));
    pr->println(msg);
    1f2c:	mov	r1, r6
    1f2e:	mov	r0, r4
    1f30:	bl	1144 <Print::println(__FlashStringHelper const*)>
    errorHalt(pr);
    1f34:	mov	r1, r4
    1f36:	mov	r0, r5
    1f38:	bl	1e84 <SdBase<FsVolume>::errorHalt(Print*)>
    1f3c:	.word	0x1fff0898
    1f40:	.word	0x00013c00

00001f44 <logLightSensor()>:
//  lux = LightSensor.GetLightIntensity();
  return lux;
}

void logLightSensor(void)
{
    1f44:	push	{r4, r5, lr}
  int lux =0;
  lux=getLightSensor();
  
  struct tm tx=seconds2tm(RTC_TSR);  
    1f46:	ldr	r3, [pc, #144]	; (1fd8 <logLightSensor()+0x94>)
//  lux = LightSensor.GetLightIntensity();
  return lux;
}

void logLightSensor(void)
{
    1f48:	sub	sp, #140	; 0x8c
  int lux =0;
  lux=getLightSensor();
  
  struct tm tx=seconds2tm(RTC_TSR);  
    1f4a:	ldr	r1, [r3, #0]
    1f4c:	add	r0, sp, #20
    1f4e:	bl	1168 <seconds2tm(unsigned long)>
  
  char txt[80];
  sprintf(txt,"%4d/%02d/%02d %02d:%02d %d\r\n", 
      tx.tm_year, tx.tm_mon, tx.tm_mday,tx.tm_hour, tx.tm_min, lux);
    1f52:	ldr	r1, [sp, #32]
    1f54:	ldr	r5, [sp, #28]
    1f56:	ldr	r0, [sp, #24]
    1f58:	ldr	r3, [sp, #36]	; 0x24
    1f5a:	str	r0, [sp, #8]
    1f5c:	movs	r4, #0
    1f5e:	stmia.w	sp, {r1, r5}
    1f62:	ldr	r2, [sp, #40]	; 0x28
    1f64:	str	r4, [sp, #12]
    1f66:	add	r0, sp, #56	; 0x38
    1f68:	ldr	r1, [pc, #112]	; (1fdc <logLightSensor()+0x98>)
    1f6a:	bl	d0f4 <sprintf>
      return nbuf;
    }

    void logText(char *filename, char * txt)
    { int nbuf=0;
      char *ptr=txt; while(*ptr++) nbuf++; // length of text without trailing zero (?)
    1f6e:	ldrb.w	r3, [sp, #56]	; 0x38
    1f72:	cbz	r3, 1fcc <logLightSensor()+0x88>
    1f74:	add	r3, sp, #56	; 0x38
    1f76:	ldrb.w	r2, [r3, #1]!
    1f7a:	adds	r4, #1
    1f7c:	cmp	r2, #0
    1f7e:	bne.n	1f76 <logLightSensor()+0x32>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    1f80:	ldr	r3, [pc, #92]	; (1fe0 <logLightSensor()+0x9c>)
    1f82:	ldr	r1, [r3, #0]
    1f84:	cbz	r1, 1fb2 <logLightSensor()+0x6e>
    1f86:	ldr	r5, [pc, #92]	; (1fe4 <logLightSensor()+0xa0>)
    1f88:	ldr	r2, [pc, #92]	; (1fe8 <logLightSensor()+0xa4>)
    1f8a:	add.w	r0, r5, #1208	; 0x4b8
    1f8e:	movs	r3, #70	; 0x46
    1f90:	bl	32e4 <FsFile::open(FsVolume*, char const*, unsigned char)>
    1f94:	cbz	r0, 1fb2 <logLightSensor()+0x6e>
    1f96:	ldr.w	r0, [r5, #1280]	; 0x500
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1f9a:	cbz	r0, 1fba <logLightSensor()+0x76>
    1f9c:	add	r1, sp, #56	; 0x38
    1f9e:	mov	r2, r4
    1fa0:	bl	57fc <FatFile::write(void const*, unsigned int)>
      if (!file.open(filename, O_CREAT | O_WRITE |O_APPEND)) sd.errorHalt("logText file.open failed");
      if (nbuf != file.write((uint8_t *)txt, nbuf)) sd.errorHalt("logText file.write failed");
    1fa4:	cmp	r4, r0
    1fa6:	bne.n	1fd0 <logLightSensor()+0x8c>
      file.close();
    1fa8:	ldr	r0, [pc, #64]	; (1fec <logLightSensor()+0xa8>)
    1faa:	bl	32bc <FsFile::close()>
  mFS.logText((char *)"lux.txt",(char *)txt);
}
    1fae:	add	sp, #140	; 0x8c
    1fb0:	pop	{r4, r5, pc}
    }

    void logText(char *filename, char * txt)
    { int nbuf=0;
      char *ptr=txt; while(*ptr++) nbuf++; // length of text without trailing zero (?)
      if (!file.open(filename, O_CREAT | O_WRITE |O_APPEND)) sd.errorHalt("logText file.open failed");
    1fb2:	ldr	r1, [pc, #60]	; (1ff0 <logLightSensor()+0xac>)
    1fb4:	ldr	r0, [pc, #44]	; (1fe4 <logLightSensor()+0xa0>)
    1fb6:	bl	1f1c <SdBase<FsVolume>::errorHalt(char const*)>
    1fba:	ldr.w	r0, [r5, #1284]	; 0x504
    1fbe:	cmp	r0, #0
    1fc0:	beq.n	1fa4 <logLightSensor()+0x60>
    1fc2:	add	r1, sp, #56	; 0x38
    1fc4:	mov	r2, r4
    1fc6:	bl	4d44 <ExFatFile::write(void const*, unsigned int)>
    1fca:	b.n	1fa4 <logLightSensor()+0x60>
      if ((int)nbuf != file.read(buffer, nbuf)) sd.errorHalt("read failed");
      return nbuf;
    }

    void logText(char *filename, char * txt)
    { int nbuf=0;
    1fcc:	mov	r4, r3
    1fce:	b.n	1f80 <logLightSensor()+0x3c>
      char *ptr=txt; while(*ptr++) nbuf++; // length of text without trailing zero (?)
      if (!file.open(filename, O_CREAT | O_WRITE |O_APPEND)) sd.errorHalt("logText file.open failed");
      if (nbuf != file.write((uint8_t *)txt, nbuf)) sd.errorHalt("logText file.write failed");
    1fd0:	ldr	r1, [pc, #32]	; (1ff4 <logLightSensor()+0xb0>)
    1fd2:	ldr	r0, [pc, #16]	; (1fe4 <logLightSensor()+0xa0>)
    1fd4:	bl	1f1c <SdBase<FsVolume>::errorHalt(char const*)>
    1fd8:	.word	0x4003d000
    1fdc:	.word	0x00013c08
    1fe0:	.word	0x20020360
    1fe4:	.word	0x1fff1f50
    1fe8:	.word	0x00013c28
    1fec:	.word	0x1fff2408
    1ff0:	.word	0x00013c4c
    1ff4:	.word	0x00013c30

00001ff8 <readConfig(void*)>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    1ff8:	ldr	r3, [pc, #176]	; (20ac <readConfig(void*)+0xb4>)
    1ffa:	ldr	r1, [r3, #0]
    1ffc:	cmp	r1, #0
    1ffe:	beq.n	2082 <readConfig(void*)+0x8a>
  mFS.close();
  
}

void readConfig(void * ptr)
{
    2000:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2004:	movs	r3, #1
    2006:	sub	sp, #32
    2008:	mov	r4, r0
    200a:	ldr	r2, [pc, #164]	; (20b0 <readConfig(void*)+0xb8>)
    200c:	ldr	r0, [pc, #164]	; (20b4 <readConfig(void*)+0xbc>)
    200e:	bl	32e4 <FsFile::open(FsVolume*, char const*, unsigned char)>
    2012:	cbz	r0, 207c <readConfig(void*)+0x84>
    2014:	ldr	r6, [pc, #160]	; (20b8 <readConfig(void*)+0xc0>)
    2016:	add.w	r7, r4, #12
    201a:	mov	r8, r6
    201c:	b.n	203c <readConfig(void*)+0x44>
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    201e:	movs	r2, #4
    2020:	mov	r1, sp
    2022:	bl	5380 <FatFile::read(void*, unsigned int)>
    2026:	mov	r5, r0
      return nbuf;
    }

    uint32_t read(uint8_t *buffer, uint32_t nbuf)
    {      
      if ((int)nbuf != file.read(buffer, nbuf)) sd.errorHalt("read failed");
    2028:	cmp	r5, #4
    202a:	bne.n	20a2 <readConfig(void*)+0xaa>
  char text[32];
  uint16_t *data = (uint16_t *) ptr;
  if(!mFS.open((char*)"Config.txt",O_RDONLY)) return;
  for(int ii=0; ii<6; ii++)
    {mFS.read((uint8_t*)text,4); sscanf(text,"%d",&data[ii]);}
    202c:	mov	r2, r4
    202e:	ldr	r1, [pc, #140]	; (20bc <readConfig(void*)+0xc4>)
    2030:	adds	r4, #2
    2032:	mov	r0, sp
    2034:	bl	d140 <sscanf>
void readConfig(void * ptr)
{
  char text[32];
  uint16_t *data = (uint16_t *) ptr;
  if(!mFS.open((char*)"Config.txt",O_RDONLY)) return;
  for(int ii=0; ii<6; ii++)
    2038:	cmp	r7, r4
    203a:	beq.n	2056 <readConfig(void*)+0x5e>
    203c:	ldr.w	r0, [r6, #1280]	; 0x500
    2040:	cmp	r0, #0
    2042:	bne.n	201e <readConfig(void*)+0x26>
    2044:	ldr.w	r0, [r8, #1284]	; 0x504
    2048:	cbz	r0, 20a2 <readConfig(void*)+0xaa>
    204a:	movs	r2, #4
    204c:	mov	r1, sp
    204e:	bl	356c <ExFatFile::read(void*, unsigned int)>
    2052:	mov	r5, r0
    2054:	b.n	2028 <readConfig(void*)+0x30>
    2056:	ldr.w	r0, [r6, #1280]	; 0x500
    205a:	ldr	r3, [pc, #92]	; (20b8 <readConfig(void*)+0xc0>)
    205c:	cbz	r0, 2092 <readConfig(void*)+0x9a>
    205e:	mov	r2, r5
    2060:	mov	r1, r7
    2062:	bl	5380 <FatFile::read(void*, unsigned int)>
    2066:	cmp	r0, #4
    2068:	bne.n	20a2 <readConfig(void*)+0xaa>
    206a:	ldr.w	r0, [r6, #1280]	; 0x500
    206e:	ldr	r3, [pc, #72]	; (20b8 <readConfig(void*)+0xc0>)
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    2070:	cbz	r0, 2084 <readConfig(void*)+0x8c>
    2072:	bl	5784 <FatFile::truncate()>
    }

    void close(void)
    {
      file.truncate();
      file.close();
    2076:	ldr	r0, [pc, #60]	; (20b4 <readConfig(void*)+0xbc>)
    2078:	bl	32bc <FsFile::close()>
    {mFS.read((uint8_t*)text,4); sscanf(text,"%d",&data[ii]);}
  mFS.read((uint8_t*)&data[6],4);
  mFS.close();
}
    207c:	add	sp, #32
    207e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2082:	bx	lr
    2084:	ldr.w	r0, [r3, #1284]	; 0x504
    2088:	cmp	r0, #0
    208a:	beq.n	2076 <readConfig(void*)+0x7e>
    208c:	bl	4c24 <ExFatFile::truncate()>
    2090:	b.n	2076 <readConfig(void*)+0x7e>
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    2092:	ldr.w	r0, [r3, #1284]	; 0x504
    2096:	cbz	r0, 20a2 <readConfig(void*)+0xaa>
    2098:	mov	r2, r5
    209a:	mov	r1, r7
    209c:	bl	356c <ExFatFile::read(void*, unsigned int)>
    20a0:	b.n	2066 <readConfig(void*)+0x6e>
      return nbuf;
    }

    uint32_t read(uint8_t *buffer, uint32_t nbuf)
    {      
      if ((int)nbuf != file.read(buffer, nbuf)) sd.errorHalt("read failed");
    20a2:	ldr	r1, [pc, #28]	; (20c0 <readConfig(void*)+0xc8>)
    20a4:	ldr	r0, [pc, #16]	; (20b8 <readConfig(void*)+0xc0>)
    20a6:	bl	1f1c <SdBase<FsVolume>::errorHalt(char const*)>
    20aa:	nop
    20ac:	.word	0x20020360
    20b0:	.word	0x00013c68
    20b4:	.word	0x1fff2408
    20b8:	.word	0x1fff1f50
    20bc:	.word	0x00013c80
    20c0:	.word	0x00013c74

000020c4 <storeConfig(void*)>:
  mFS.logText((char *)"lux.txt",(char *)txt);
}


void storeConfig(void * ptr)
{ char text[32];
    20c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    20c8:	ldr	r3, [pc, #184]	; (2184 <storeConfig(void*)+0xc0>)
    20ca:	ldr	r1, [r3, #0]
    20cc:	sub	sp, #36	; 0x24
    20ce:	mov	r8, r0
    20d0:	cbz	r1, 20dc <storeConfig(void*)+0x18>
    20d2:	movs	r3, #82	; 0x52
    20d4:	ldr	r2, [pc, #176]	; (2188 <storeConfig(void*)+0xc4>)
    20d6:	ldr	r0, [pc, #180]	; (218c <storeConfig(void*)+0xc8>)
    20d8:	bl	32e4 <FsFile::open(FsVolume*, char const*, unsigned char)>
    20dc:	ldr	r6, [pc, #176]	; (2190 <storeConfig(void*)+0xcc>)
    20de:	sub.w	r4, r8, #2
    20e2:	mov	r9, r6
    20e4:	add.w	r7, r8, #10
    20e8:	b.n	20fa <storeConfig(void*)+0x36>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    20ea:	mov	r2, r5
    20ec:	mov	r1, sp
    20ee:	bl	57fc <FatFile::write(void const*, unsigned int)>
      file.close();
    }

    uint32_t write(uint8_t *buffer, uint32_t nbuf)
    {
      if (nbuf != file.write(buffer, nbuf)) sd.errorHalt("write failed");
    20f2:	cmp	r5, r0
    20f4:	bne.n	217c <storeConfig(void*)+0xb8>
  uint16_t *data = (uint16_t *) ptr;
  mFS.open((char*)"Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<6; ii++)
    20f6:	cmp	r7, r4
    20f8:	beq.n	2128 <storeConfig(void*)+0x64>
    {sprintf(text,"%2d\r\n",data[ii]); mFS.write((uint8_t*)text,strlen(text));}
    20fa:	ldrh.w	r2, [r4, #2]!
    20fe:	ldr	r1, [pc, #148]	; (2194 <storeConfig(void*)+0xd0>)
    2100:	mov	r0, sp
    2102:	bl	d0f4 <sprintf>
    2106:	mov	r0, sp
    2108:	bl	d280 <strlen>
    210c:	mov	r5, r0
    210e:	ldr.w	r0, [r6, #1280]	; 0x500
    2112:	cmp	r0, #0
    2114:	bne.n	20ea <storeConfig(void*)+0x26>
    2116:	ldr.w	r0, [r9, #1284]	; 0x504
    211a:	cmp	r0, #0
    211c:	beq.n	20f2 <storeConfig(void*)+0x2e>
    211e:	mov	r2, r5
    2120:	mov	r1, sp
    2122:	bl	4d44 <ExFatFile::write(void const*, unsigned int)>
    2126:	b.n	20f2 <storeConfig(void*)+0x2e>
    2128:	ldr.w	r0, [r6, #1280]	; 0x500
    212c:	ldr	r3, [pc, #96]	; (2190 <storeConfig(void*)+0xcc>)
  mFS.write((uint8_t *)&data[6],4);
    212e:	add.w	r1, r8, #12
    2132:	cbz	r0, 2156 <storeConfig(void*)+0x92>
    2134:	movs	r2, #4
    2136:	bl	57fc <FatFile::write(void const*, unsigned int)>
    213a:	cmp	r0, #4
    213c:	bne.n	217c <storeConfig(void*)+0xb8>
    213e:	ldr.w	r0, [r6, #1280]	; 0x500
    2142:	ldr	r3, [pc, #76]	; (2190 <storeConfig(void*)+0xcc>)
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    2144:	cbz	r0, 2164 <storeConfig(void*)+0xa0>
    2146:	bl	5784 <FatFile::truncate()>
    }

    void close(void)
    {
      file.truncate();
      file.close();
    214a:	ldr	r0, [pc, #64]	; (218c <storeConfig(void*)+0xc8>)
    214c:	bl	32bc <FsFile::close()>
  mFS.close();
  
}
    2150:	add	sp, #36	; 0x24
    2152:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    2156:	ldr.w	r0, [r3, #1284]	; 0x504
    215a:	cbz	r0, 217c <storeConfig(void*)+0xb8>
    215c:	movs	r2, #4
    215e:	bl	4d44 <ExFatFile::write(void const*, unsigned int)>
    2162:	b.n	213a <storeConfig(void*)+0x76>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    2164:	ldr.w	r0, [r3, #1284]	; 0x504
    2168:	cmp	r0, #0
    216a:	beq.n	214a <storeConfig(void*)+0x86>
    216c:	bl	4c24 <ExFatFile::truncate()>
    2170:	ldr	r0, [pc, #24]	; (218c <storeConfig(void*)+0xc8>)
    2172:	bl	32bc <FsFile::close()>
    2176:	add	sp, #36	; 0x24
    2178:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

    uint32_t write(uint8_t *buffer, uint32_t nbuf)
    {
      if (nbuf != file.write(buffer, nbuf)) sd.errorHalt("write failed");
    217c:	ldr	r1, [pc, #24]	; (2198 <storeConfig(void*)+0xd4>)
    217e:	ldr	r0, [pc, #16]	; (2190 <storeConfig(void*)+0xcc>)
    2180:	bl	1f1c <SdBase<FsVolume>::errorHalt(char const*)>
    2184:	.word	0x20020360
    2188:	.word	0x00013c68
    218c:	.word	0x1fff2408
    2190:	.word	0x1fff1f50
    2194:	.word	0x00013c84
    2198:	.word	0x00013c8c
    219c:	.word	0xffffffff

000021a0 <setup>:
void mySystick_isr(void){ systick_millis_count++;}
void yield(void){}
//
// Arduino Setup
void setup(void)
{
    21a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // redirect Systick 
  _VectorsRam[15] = mySystick_isr;
    21a4:	ldr	r3, [pc, #720]	; (2478 <setup+0x2d8>)
    21a6:	ldr	r2, [pc, #724]	; (247c <setup+0x2dc>)
    21a8:	str	r2, [r3, #60]	; 0x3c

  // check first (with pin2 set to low) if we wanted to enter menu mode
  pinMode(2,INPUT_PULLUP);
    21aa:	movs	r1, #2
    21ac:	mov	r0, r1
void mySystick_isr(void){ systick_millis_count++;}
void yield(void){}
//
// Arduino Setup
void setup(void)
{
    21ae:	sub	sp, #60	; 0x3c
  // redirect Systick 
  _VectorsRam[15] = mySystick_isr;

  // check first (with pin2 set to low) if we wanted to enter menu mode
  pinMode(2,INPUT_PULLUP);
    21b0:	bl	9cec <pinMode>
  delay(1000);
    21b4:	mov.w	r0, #1000	; 0x3e8
    21b8:	bl	9da8 <delay>
    21bc:	ldr	r7, [pc, #704]	; (2480 <setup+0x2e0>)
  pinMode(23, OUTPUT);
    21be:	movs	r1, #1
    21c0:	movs	r0, #23
    21c2:	bl	9cec <pinMode>
    21c6:	movs	r2, #4
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
    21c8:	ldr	r3, [pc, #696]	; (2484 <setup+0x2e4>)
			} else if (pin == 21) {
				CORE_PIN21_PORTCLEAR = CORE_PIN21_BITMASK;
			} else if (pin == 22) {
				CORE_PIN22_PORTCLEAR = CORE_PIN22_BITMASK;
			} else if (pin == 23) {
				CORE_PIN23_PORTCLEAR = CORE_PIN23_BITMASK;
    21ca:	str	r2, [r7, #0]
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
    21cc:	ldr	r3, [r3, #0]
  digitalWriteFast(23,LOW); // turn sensor and mic ON 
  
  if(digitalReadFast(2)==LOW)
    21ce:	lsls	r2, r3, #31
    21d0:	bpl.w	23ae <setup+0x20e>
  SdFs sd;
  FsFile file;
  
  public:
    void init(void)
    { if(FS_started) return;
    21d4:	ldr	r5, [pc, #688]	; (2488 <setup+0x2e8>)

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    21d6:	ldr	r3, [pc, #692]	; (248c <setup+0x2ec>)
    21d8:	ldrh	r2, [r5, #0]
		header.nsamp = nsamp;
    21da:	movs	r0, #128	; 0x80
		header.fsamp = fsamp;
    21dc:	movw	r1, #44100	; 0xac44

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    21e0:	movs	r4, #1
		header.nsamp = nsamp;
    21e2:	str	r0, [r3, #20]
		header.fsamp = fsamp;
    21e4:	str	r1, [r3, #12]

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    21e6:	str	r4, [r3, #8]
    21e8:	cmp	r2, #0
    21ea:	beq.w	240c <setup+0x26c>
 * 
 */
void uSD_IF::init(void)
{
  mFS.init();
  fileStatus=0;
    21ee:	ldr	r7, [pc, #672]	; (2490 <setup+0x2f0>)
  }
  else
  {
    #ifdef DO_LOGGER
      loggerSetup(N_CHAN, F_SAMP, N_SAMP);
      readConfig(&parameters);
    21f0:	ldr	r0, [pc, #672]	; (2494 <setup+0x2f4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    21f2:	ldr	r4, [pc, #676]	; (2498 <setup+0x2f8>)
    21f4:	ldr.w	r9, [pc, #760]	; 24f0 <setup+0x350>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    21f8:	ldr.w	r8, [pc, #644]	; 2480 <setup+0x2e0>
    21fc:	movs	r3, #0
    21fe:	strh	r3, [r7, #14]
    2200:	bl	1ff8 <readConfig(void*)>
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
}

void doBlink(uint32_t dt, uint32_t msec)
{ pinMode(13,OUTPUT);
    2204:	movs	r1, #1
    2206:	movs	r0, #13
    2208:	bl	9cec <pinMode>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    220c:	ldr	r3, [r4, #0]
    220e:	str	r3, [sp, #52]	; 0x34
	return ret;
    2210:	ldr	r1, [sp, #52]	; 0x34
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    2212:	ldr.w	lr, [pc, #656]	; 24a4 <setup+0x304>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    2216:	ldr.w	ip, [pc, #732]	; 24f4 <setup+0x354>
    221a:	ldr.w	r0, [r9]
    221e:	addw	r1, r1, #1500	; 0x5dc
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2222:	mov	r5, r4
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2224:	movs	r6, #32
    2226:	b.n	2236 <setup+0x96>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2228:	ldr	r3, [r5, #0]
    222a:	str	r3, [sp, #44]	; 0x2c
	return ret;
    222c:	ldr	r3, [sp, #44]	; 0x2c

//------------------------ Asynchronous Blink ------------------------------
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1-to<msec) {yield(); return;}
    222e:	subs	r2, r3, r0
    2230:	cmp.w	r2, #500	; 0x1f4
    2234:	bcs.n	22a8 <setup+0x108>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2236:	ldr	r3, [r4, #0]
    2238:	str	r3, [sp, #48]	; 0x30
	return ret;
    223a:	ldr	r3, [sp, #48]	; 0x30
}

void doBlink(uint32_t dt, uint32_t msec)
{ pinMode(13,OUTPUT);
  uint32_t t0=millis();
  while(millis()<t0+dt) blink(msec);
    223c:	cmp	r3, r1
    223e:	bcc.n	2228 <setup+0x88>
    2240:	ldr	r5, [pc, #600]	; (249c <setup+0x2fc>)
    2242:	ldr	r6, [pc, #604]	; (24a0 <setup+0x300>)
    2244:	ldr.w	r8, [pc, #688]	; 24f8 <setup+0x358>
	#ifdef DO_USB_AUDIO
		usbAudio_init();
	#endif

  // limit acquisition to specific hours of day
  check_hibernate(&parameters,0);
    2248:	ldr	r0, [pc, #584]	; (2494 <setup+0x2f4>)
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    224a:	ldr.w	sl, [pc, #564]	; 2480 <setup+0x2e0>
    224e:	movs	r1, #0
    2250:	bl	1728 <check_hibernate(parameters_s*, int)>
       
	#if DO_DEBUG>0
    // wait for serial line to come up
    pinMode(13,OUTPUT); // for LED
    2254:	movs	r1, #1
    2256:	movs	r0, #13
    2258:	bl	9cec <pinMode>
    pinMode(13,HIGH);
    225c:	movs	r1, #1
    225e:	movs	r0, #13
    2260:	bl	9cec <pinMode>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    2264:	ldr	r0, [pc, #572]	; (24a4 <setup+0x304>)
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    2266:	ldr.w	ip, [pc, #652]	; 24f4 <setup+0x354>
    226a:	ldr.w	r1, [r9]
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    226e:	mov.w	lr, #32
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2272:	ldrb	r3, [r5, #0]
    2274:	cbz	r3, 2288 <setup+0xe8>
    2276:	ldrb	r3, [r6, #0]
    2278:	lsls	r3, r3, #31
    227a:	bpl.n	2288 <setup+0xe8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    227c:	ldr	r3, [r4, #0]
    227e:	ldr.w	r2, [r8]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2282:	subs	r3, r3, r2
    2284:	cmp	r3, #14
    2286:	bhi.n	22bc <setup+0x11c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2288:	ldr	r3, [r4, #0]
    228a:	str	r3, [sp, #28]
	return ret;
    228c:	ldr	r3, [sp, #28]

//------------------------ Asynchronous Blink ------------------------------
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1-to<msec) {yield(); return;}
    228e:	subs	r2, r3, r1
    2290:	cmp.w	r2, #500	; 0x1f4
    2294:	bcc.n	2272 <setup+0xd2>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    2296:	ldr	r2, [r0, #0]
    2298:	lsls	r2, r2, #26
    229a:	bmi.n	2370 <setup+0x1d0>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    229c:	str.w	lr, [ip]
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
    22a0:	str.w	r3, [r9]
    22a4:	mov	r1, r3
    22a6:	b.n	2272 <setup+0xd2>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    22a8:	ldr.w	r2, [lr]
    22ac:	lsls	r2, r2, #26
    22ae:	bmi.n	2376 <setup+0x1d6>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    22b0:	str.w	r6, [ip]
    22b4:	str.w	r3, [r9]
    22b8:	mov	r0, r3
    22ba:	b.n	2236 <setup+0x96>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    22bc:	movs	r1, #22
    22be:	ldr	r0, [pc, #488]	; (24a8 <setup+0x308>)
    22c0:	bl	96c8 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    22c4:	ldr	r0, [pc, #484]	; (24ac <setup+0x30c>)
    22c6:	bl	b010 <Print::println()>
    // blink for 1 second
    doBlink(1000,100);
	#endif

	#ifdef DO_LOGGER
    logLightSensor();  
    22ca:	bl	1f44 <logLightSensor()>
}

inline uint16_t acqSetup(void)
{
  // initialize and start ICS43432 interface
  uint32_t fs = ICS43432.init(F_SAMP, i2s_rx_buffer, N_BUF, I2S_CHAN);
    22ce:	movs	r3, #2
    22d0:	str	r3, [sp, #0]
    22d2:	ldr	r2, [pc, #476]	; (24b0 <setup+0x310>)
    22d4:	ldr	r0, [pc, #476]	; (24b4 <setup+0x314>)
    22d6:	mov.w	r3, #512	; 0x200
    22da:	movw	r1, #44100	; 0xac44
    22de:	bl	2ba4 <c_ICS43432::init(long, long*, unsigned long, unsigned short)>
  if(fs>0)
    22e2:	str	r0, [sp, #12]
    22e4:	mov	r3, r0
    22e6:	cmp	r0, #0
    22e8:	bne.n	237c <setup+0x1dc>

	#ifdef DO_LOGGER
    logLightSensor();  
	#endif

	haveAcq=acqSetup();
    22ea:	ldr	r1, [pc, #460]	; (24b8 <setup+0x318>)
 loopStatus=0;
 doHibernate=0;
    22ec:	ldr	r2, [pc, #460]	; (24bc <setup+0x31c>)
	#ifdef DO_LOGGER
    logLightSensor();  
	#endif

	haveAcq=acqSetup();
 loopStatus=0;
    22ee:	ldr	r6, [pc, #464]	; (24c0 <setup+0x320>)

	#ifdef DO_LOGGER
    logLightSensor();  
	#endif

	haveAcq=acqSetup();
    22f0:	str	r3, [r1, #0]
 loopStatus=0;
    22f2:	movs	r5, #0
    22f4:	movs	r1, #9
    22f6:	ldr	r0, [pc, #460]	; (24c4 <setup+0x324>)
 doHibernate=0;
    22f8:	str	r5, [r2, #0]
	#ifdef DO_LOGGER
    logLightSensor();  
	#endif

	haveAcq=acqSetup();
 loopStatus=0;
    22fa:	str	r5, [r6, #0]
    22fc:	bl	96c8 <usb_serial_write>
    2300:	ldr	r0, [pc, #424]	; (24ac <setup+0x30c>)
    2302:	bl	b010 <Print::println()>
inline void acqStart(void)
{ 
  #if DO_DEBUG == 2
    Serial.println("Start Acq");
  #endif
  ICS43432.start();
    2306:	ldr	r0, [pc, #428]	; (24b4 <setup+0x314>)
    2308:	bl	2c24 <c_ICS43432::start()>
 loopStatus=0;
 doHibernate=0;
 #if ON_TIME > 0
   acqStart();
   #ifdef DO_LOGGER
     delay(300); // delay logger to allow acq to settle down
    230c:	mov.w	r0, #300	; 0x12c
    2310:	bl	9da8 <delay>
    2314:	movs	r1, #12
    2316:	ldr	r0, [pc, #432]	; (24c8 <setup+0x328>)
    2318:	bl	96c8 <usb_serial_write>
    231c:	ldr	r0, [pc, #396]	; (24ac <setup+0x30c>)
    231e:	bl	b010 <Print::println()>

/*--------------- larger AudioRecorderLogger methods ------------------*/
template <typename T, int nq, int nd, int na>
void Logger<T,nq,nd,na>:: clear(void)
  {
    uint16_t t = tail;
    2322:	ldr.w	lr, [pc, #472]	; 24fc <setup+0x35c>
    2326:	ldrh.w	r2, [lr, #202]	; 0xca
    while (t != head) {
    232a:	ldrsh.w	r6, [lr, #200]	; 0xc8
    232e:	cmp	r2, r6
    2330:	beq.n	2350 <setup+0x1b0>
      if (++t >= nq) t = 0;
      pool.release(t);
      queue[t]=0; // remove address from queue
    2332:	mov	r0, r5
template <typename T, int nq, int nd, int na>
void Logger<T,nq,nd,na>:: clear(void)
  {
    uint16_t t = tail;
    while (t != head) {
      if (++t >= nq) t = 0;
    2334:	adds	r3, r2, #1
    2336:	uxth	r3, r3
    2338:	cmp.w	r3, #300	; 0x12c
    233c:	it	cs
    233e:	movcs	r3, #0
      pool.release(t);
      queue[t]=0; // remove address from queue
    2340:	add.w	r1, r3, #38400	; 0x9600
    2344:	adds	r1, #6
/*--------------- larger AudioRecorderLogger methods ------------------*/
template <typename T, int nq, int nd, int na>
void Logger<T,nq,nd,na>:: clear(void)
  {
    uint16_t t = tail;
    while (t != head) {
    2346:	cmp	r6, r3
    2348:	uxth	r2, r3
      if (++t >= nq) t = 0;
      pool.release(t);
      queue[t]=0; // remove address from queue
    234a:	str.w	r0, [r7, r1, lsl #2]
/*--------------- larger AudioRecorderLogger methods ------------------*/
template <typename T, int nq, int nd, int na>
void Logger<T,nq,nd,na>:: clear(void)
  {
    uint16_t t = tail;
    while (t != head) {
    234e:	bne.n	2334 <setup+0x194>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2350:	ldr	r3, [r4, #0]
    2352:	str	r3, [sp, #20]
     loggerStart(); 
   #endif
   startTime=millis();
    2354:	ldr	r1, [pc, #372]	; (24cc <setup+0x32c>)
	return ret;
    2356:	ldr	r0, [sp, #20]
      if (++t >= nq) t = 0;
      pool.release(t);
      queue[t]=0; // remove address from queue
    }
    tail = t;
    2358:	strh.w	r2, [lr, #202]	; 0xca
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
  { maxBlockSize = na*nd*sizeof(T);}

  void start(void) { clear(); reset(); isRunning=1; enabled = 1; }
    235c:	movs	r3, #1
class uSD_IF
{
  public:
  uSD_IF(void) {;}
  void init(void);
  void reset(void) {fileStatus=0;}
    235e:	movs	r2, #0
    2360:	str	r0, [r1, #0]
    2362:	strh	r2, [r7, #14]
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
  { maxBlockSize = na*nd*sizeof(T);}

  void start(void) { clear(); reset(); isRunning=1; enabled = 1; }
    2364:	strh	r3, [r7, #12]
    2366:	strh.w	r3, [lr, #204]	; 0xcc
 #endif

}
    236a:	add	sp, #60	; 0x3c
    236c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2370:	str.w	lr, [sl]
    2374:	b.n	22a0 <setup+0x100>
    2376:	str.w	r6, [r8]
    237a:	b.n	22b4 <setup+0x114>
    237c:	vmov	s15, r0
  uint32_t fs = ICS43432.init(F_SAMP, i2s_rx_buffer, N_BUF, I2S_CHAN);
  if(fs>0)
  {
    #if DO_DEBUG>0
      Serial.printf("Fsamp requested: %.3f kHz  got %.3f kHz\n\r" ,
          F_SAMP/1000.0f, fs/1000.0f);
    2380:	vcvt.f32.u32	s14, s15
    2384:	vldr	s15, [pc, #328]	; 24d0 <setup+0x330>
    2388:	vdiv.f32	s13, s14, s15
    238c:	vmov	r0, s13
    2390:	bl	b724 <__aeabi_f2d>
    2394:	add	r3, pc, #216	; (adr r3, 2470 <setup+0x2d0>)
    2396:	ldrd	r2, r3, [r3]
    239a:	strd	r0, r1, [sp]
    239e:	ldr	r1, [pc, #308]	; (24d4 <setup+0x334>)
    23a0:	ldr	r0, [pc, #264]	; (24ac <setup+0x30c>)
    23a2:	bl	b040 <Print::printf(char const*, ...)>
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    23a6:	bl	98d0 <usb_serial_flush_output>
    23aa:	movs	r3, #1
    23ac:	b.n	22ea <setup+0x14a>
    23ae:	ldr.w	r9, [pc, #320]	; 24f0 <setup+0x350>
    23b2:	ldr	r5, [pc, #232]	; (249c <setup+0x2fc>)
    23b4:	ldr	r6, [pc, #232]	; (24a0 <setup+0x300>)
    23b6:	ldr	r4, [pc, #224]	; (2498 <setup+0x2f8>)
    23b8:	ldr.w	r8, [pc, #316]	; 24f8 <setup+0x358>
  digitalWriteFast(23,LOW); // turn sensor and mic ON 
  
  if(digitalReadFast(2)==LOW)
  { 
    // signal begin of menu
    pinMode(13,OUTPUT); // for LED
    23bc:	movs	r1, #1
    23be:	movs	r0, #13
    23c0:	bl	9cec <pinMode>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    23c4:	ldr.w	lr, [pc, #220]	; 24a4 <setup+0x304>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    23c8:	ldr.w	ip, [pc, #296]	; 24f4 <setup+0x354>
    23cc:	ldr.w	r1, [r9]
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    23d0:	mov	r0, r7
    23d2:	movs	r7, #32
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    23d4:	ldrb	r3, [r5, #0]
    23d6:	cbz	r3, 23ec <setup+0x24c>
    23d8:	ldrb	r3, [r6, #0]
    23da:	lsls	r3, r3, #31
    23dc:	bpl.n	23ec <setup+0x24c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    23de:	ldr	r3, [r4, #0]
    23e0:	ldr.w	r2, [r8]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    23e4:	subs	r3, r3, r2
    23e6:	cmp	r3, #14
    23e8:	bhi.w	2500 <setup+0x360>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    23ec:	ldr	r3, [r4, #0]
    23ee:	str	r3, [sp, #24]
	return ret;
    23f0:	ldr	r3, [sp, #24]

//------------------------ Asynchronous Blink ------------------------------
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1-to<msec) {yield(); return;}
    23f2:	subs	r2, r3, r1
    23f4:	cmp.w	r2, #1000	; 0x3e8
    23f8:	bcc.n	23d4 <setup+0x234>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    23fa:	ldr.w	r2, [lr]
    23fe:	lsls	r2, r2, #26
    2400:	bpl.n	2460 <setup+0x2c0>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2402:	str	r7, [r0, #0]
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
    2404:	str.w	r3, [r9]
    2408:	mov	r1, r3
    240a:	b.n	23d4 <setup+0x234>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    240c:	ldr	r7, [pc, #200]	; (24d8 <setup+0x338>)
    240e:	add.w	r6, r7, #1160	; 0x488
    2412:	mov	r1, r4
    2414:	mov	r0, r6
    2416:	bl	8814 <SdioCard::begin(SdioConfig)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    241a:	movs	r1, #9
    241c:	ldr	r0, [pc, #188]	; (24dc <setup+0x33c>)
    241e:	bl	96c8 <usb_serial_write>
    2422:	ldr	r0, [pc, #136]	; (24ac <setup+0x30c>)
    2424:	bl	b010 <Print::println()>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    2428:	mov	r0, r6
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    242a:	str.w	r6, [r7, #1156]	; 0x484
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    242e:	bl	7e6c <SdioCard::errorCode() const>
    2432:	mov	r2, r6
    2434:	mov	r3, r0
    2436:	ldr	r1, [pc, #168]	; (24e0 <setup+0x340>)
    2438:	ldr	r0, [pc, #112]	; (24ac <setup+0x30c>)
    243a:	bl	b040 <Print::printf(char const*, ...)>
    return m_card && !m_card->errorCode();
    243e:	ldr.w	r0, [r7, #1156]	; 0x484
    2442:	cbz	r0, 2458 <setup+0x2b8>
    2444:	ldr	r3, [r0, #0]
    2446:	ldr	r3, [r3, #36]	; 0x24
    2448:	blx	r3
    244a:	cbnz	r0, 2458 <setup+0x2b8>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    244c:	ldr.w	r1, [r7, #1156]	; 0x484
    2450:	mov	r0, r7
    2452:	bl	3388 <FsVolume::begin(SdCardInterface*)>
    2456:	cbnz	r0, 2466 <setup+0x2c6>
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
    2458:	ldr	r1, [pc, #136]	; (24e4 <setup+0x344>)
    245a:	ldr	r0, [pc, #124]	; (24d8 <setup+0x338>)
    245c:	bl	1f1c <SdBase<FsVolume>::errorHalt(char const*)>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    2460:	str.w	r7, [ip]
    2464:	b.n	2404 <setup+0x264>
      // Set Time callback
      FsDateTime::callback = dateTime;
    2466:	ldr	r3, [pc, #128]	; (24e8 <setup+0x348>)
    2468:	ldr	r2, [pc, #128]	; (24ec <setup+0x34c>)

      FS_started=1;
    246a:	strh	r4, [r5, #0]
  public:
    void init(void)
    { if(FS_started) return;
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    246c:	str	r2, [r3, #0]
    246e:	b.n	21ee <setup+0x4e>
    2470:	.word	0xc0000000
    2474:	.word	0x40460ccc
    2478:	.word	0x1fff0200
    247c:	.word	0x00000f09
    2480:	.word	0x400ff088
    2484:	.word	0x400ff0d0
    2488:	.word	0x1fff152c
    248c:	.word	0x1fff1530
    2490:	.word	0x1fff2484
    2494:	.word	0x1fff0734
    2498:	.word	0x200203c0
    249c:	.word	0x200204a4
    24a0:	.word	0x200203bc
    24a4:	.word	0x400ff090
    24a8:	.word	0x00013d74
    24ac:	.word	0x1fff0898
    24b0:	.word	0x1fff174c
    24b4:	.word	0x1fff2480
    24b8:	.word	0x1fff173c
    24bc:	.word	0x1fff1738
    24c0:	.word	0x1fff2458
    24c4:	.word	0x00013d58
    24c8:	.word	0x00013d64
    24cc:	.word	0x20020158
    24d0:	.word	0x447a0000
    24d4:	.word	0x00013d2c
    24d8:	.word	0x1fff1f50
    24dc:	.word	0x00013c9c
    24e0:	.word	0x00013ca8
    24e4:	.word	0x00013cbc
    24e8:	.word	0x20020364
    24ec:	.word	0x000014a1
    24f0:	.word	0x1fff247c
    24f4:	.word	0x400ff084
    24f8:	.word	0x20020534
    24fc:	.word	0x20018084
  if(digitalReadFast(2)==LOW)
  { 
    // signal begin of menu
    pinMode(13,OUTPUT); // for LED
    while(!SERIALX) blink(1000);
    digitalWrite(13,LOW); // switch of Led
    2500:	movs	r1, #0
    2502:	movs	r0, #13
    2504:	bl	9ca4 <digitalWrite>
  SdFs sd;
  FsFile file;
  
  public:
    void init(void)
    { if(FS_started) return;
    2508:	ldr	r3, [pc, #460]	; (26d8 <setup+0x538>)
#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
		header.nsamp = nsamp;
    250a:	ldr	r0, [pc, #464]	; (26dc <setup+0x53c>)
    250c:	ldrh	r3, [r3, #0]
    250e:	movs	r1, #128	; 0x80
		header.fsamp = fsamp;
    2510:	movw	r2, #44100	; 0xac44

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    2514:	movs	r7, #1
		header.nsamp = nsamp;
    2516:	str	r1, [r0, #20]
		header.fsamp = fsamp;
    2518:	str	r2, [r0, #12]

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    251a:	str	r7, [r0, #8]
    251c:	cmp	r3, #0
    251e:	beq.n	2602 <setup+0x462>
 * 
 */
void uSD_IF::init(void)
{
  mFS.init();
  fileStatus=0;
    2520:	ldr	r7, [pc, #444]	; (26e0 <setup+0x540>)
      loggerSetup(N_CHAN, F_SAMP, N_SAMP);
      readConfig(&parameters);
    #endif
    printAll();

    parMods=0;
    2522:	ldr.w	fp, [pc, #488]	; 270c <setup+0x56c>

    SERIALX.begin(9600);

    #ifdef DO_LOGGER
      loggerSetup(N_CHAN, F_SAMP, N_SAMP);
      readConfig(&parameters);
    2526:	ldr	r0, [pc, #444]	; (26e4 <setup+0x544>)
    2528:	mov.w	sl, #0
    252c:	strh.w	sl, [r7, #14]
    2530:	bl	1ff8 <readConfig(void*)>
    #endif
    printAll();
    2534:	bl	19c8 <printAll()>

    parMods=0;
    2538:	strh.w	sl, [fp]
    int16_t ret=0;
    do ret=doMenu(); while(ret==0);
    253c:	bl	1b68 <doMenu()>
    2540:	cmp	r0, #0
    2542:	beq.n	253c <setup+0x39c>
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
}

void doBlink(uint32_t dt, uint32_t msec)
{ pinMode(13,OUTPUT);
    2544:	movs	r1, #1
    2546:	mov	sl, r0
    2548:	movs	r0, #13
    254a:	bl	9cec <pinMode>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    254e:	ldr	r3, [r4, #0]
    2550:	str	r3, [sp, #40]	; 0x28
	return ret;
    2552:	ldr	r1, [sp, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2554:	ldr.w	lr, [pc, #440]	; 2710 <setup+0x570>
    2558:	ldr.w	r2, [r9]
    255c:	add.w	r1, r1, #1000	; 0x3e8
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2560:	mov.w	ip, #32
    2564:	b.n	2574 <setup+0x3d4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2566:	ldr.w	r3, [lr]
    256a:	str	r3, [sp, #32]
	return ret;
    256c:	ldr	r3, [sp, #32]

//------------------------ Asynchronous Blink ------------------------------
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1-to<msec) {yield(); return;}
    256e:	subs	r0, r3, r2
    2570:	cmp	r0, #99	; 0x63
    2572:	bhi.n	25e4 <setup+0x444>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2574:	ldr	r3, [r4, #0]
    2576:	str	r3, [sp, #36]	; 0x24
	return ret;
    2578:	ldr	r3, [sp, #36]	; 0x24
}

void doBlink(uint32_t dt, uint32_t msec)
{ pinMode(13,OUTPUT);
  uint32_t t0=millis();
  while(millis()<t0+dt) blink(msec);
    257a:	cmp	r3, r1
    257c:	bcc.n	2566 <setup+0x3c6>
    //expect -1 to continue with program and a value >0 to hibernate for (val) minutes
    
    // signal end of menu
    doBlink(1000,100);

    if(parMods)
    257e:	ldrsh.w	r3, [fp]
    2582:	cbz	r3, 25ae <setup+0x40e>
    2584:	ldr	r3, [pc, #336]	; (26d8 <setup+0x538>)

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    2586:	ldr	r1, [pc, #340]	; (26dc <setup+0x53c>)
    2588:	ldrh	r3, [r3, #0]
		header.nsamp = nsamp;
    258a:	movs	r2, #128	; 0x80

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    258c:	mov.w	fp, #1
		header.nsamp = nsamp;
    2590:	str	r2, [r1, #20]
		header.fsamp = fsamp;
    2592:	movw	r2, #44100	; 0xac44

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    2596:	str.w	fp, [r1, #8]
		header.nsamp = nsamp;
		header.fsamp = fsamp;
    259a:	str	r2, [r1, #12]
    259c:	cmp	r3, #0
    259e:	beq.n	2668 <setup+0x4c8>
    25a0:	movs	r3, #0

    if(parMods)
    {
      #ifdef DO_LOGGER
        loggerSetup(N_CHAN, F_SAMP, N_SAMP);
        storeConfig(&parameters);
    25a2:	ldr	r0, [pc, #320]	; (26e4 <setup+0x544>)
    25a4:	strh	r3, [r7, #14]
    25a6:	bl	20c4 <storeConfig(void*)>
      #endif
      printAll();
    25aa:	bl	19c8 <printAll()>
    }

    if(ret>0) go_hibernate(ret*60);
    25ae:	cmp.w	sl, #0
    25b2:	ble.w	2248 <setup+0xa8>
			} else if (pin == 21) {
				CORE_PIN21_PORTCLEAR = CORE_PIN21_BITMASK;
			} else if (pin == 22) {
				CORE_PIN22_PORTCLEAR = CORE_PIN22_BITMASK;
			} else if (pin == 23) {
				CORE_PIN23_PORTCLEAR = CORE_PIN23_BITMASK;
    25b6:	ldr	r3, [pc, #304]	; (26e8 <setup+0x548>)
    25b8:	rsb	sl, sl, sl, lsl #4
    25bc:	movs	r2, #4
    25be:	mov.w	fp, sl, lsl #2
    25c2:	str	r2, [r3, #0]
 */
#include "hibernate.h"

void go_hibernate(uint32_t seconds)
{ digitalWriteFast(23,LOW); // turn sensor an micro OFF 
  for(int ii=0;ii<24;ii++) pinMode(ii,INPUT);   
    25c4:	mov.w	sl, #0
    25c8:	uxtb.w	r0, sl
    25cc:	movs	r1, #0
    25ce:	add.w	sl, sl, #1
    25d2:	bl	9cec <pinMode>
    25d6:	cmp.w	sl, #24
    25da:	bne.n	25c8 <setup+0x428>
  hibernate(seconds);
    25dc:	mov	r0, fp
    25de:	bl	da0 <hibernate>
    25e2:	b.n	2248 <setup+0xa8>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    25e4:	ldr	r2, [pc, #260]	; (26ec <setup+0x54c>)
    25e6:	ldr	r2, [r2, #0]
    25e8:	lsls	r0, r2, #26
    25ea:	bpl.n	25fa <setup+0x45a>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    25ec:	ldr	r2, [pc, #248]	; (26e8 <setup+0x548>)
    25ee:	str.w	ip, [r2]
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1-to<msec) {yield(); return;}
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
    25f2:	str.w	r3, [r9]
    25f6:	mov	r2, r3
    25f8:	b.n	2574 <setup+0x3d4>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    25fa:	ldr	r2, [pc, #244]	; (26f0 <setup+0x550>)
    25fc:	str.w	ip, [r2]
    2600:	b.n	25f2 <setup+0x452>
    2602:	ldr.w	sl, [pc, #260]	; 2708 <setup+0x568>
    2606:	add.w	fp, sl, #1160	; 0x488
    260a:	mov	r1, r7
    260c:	mov	r0, fp
    260e:	bl	8814 <SdioCard::begin(SdioConfig)>
    2612:	movs	r1, #9
    2614:	ldr	r0, [pc, #220]	; (26f4 <setup+0x554>)
    2616:	bl	96c8 <usb_serial_write>
    261a:	ldr	r0, [pc, #220]	; (26f8 <setup+0x558>)
    261c:	bl	b010 <Print::println()>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    2620:	mov	r0, fp
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    2622:	str.w	fp, [sl, #1156]	; 0x484
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    2626:	bl	7e6c <SdioCard::errorCode() const>
    262a:	mov	r2, fp
    262c:	mov	r3, r0
    262e:	ldr	r1, [pc, #204]	; (26fc <setup+0x55c>)
    2630:	ldr	r0, [pc, #196]	; (26f8 <setup+0x558>)
    2632:	bl	b040 <Print::printf(char const*, ...)>
    return m_card && !m_card->errorCode();
    2636:	ldr.w	r0, [sl, #1156]	; 0x484
    263a:	cmp	r0, #0
    263c:	beq.w	2458 <setup+0x2b8>
    2640:	ldr	r3, [r0, #0]
    2642:	ldr	r3, [r3, #36]	; 0x24
    2644:	blx	r3
    2646:	cmp	r0, #0
    2648:	bne.w	2458 <setup+0x2b8>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    264c:	ldr.w	r1, [sl, #1156]	; 0x484
    2650:	mov	r0, sl
    2652:	bl	3388 <FsVolume::begin(SdCardInterface*)>
    2656:	cmp	r0, #0
    2658:	beq.w	2458 <setup+0x2b8>
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    265c:	ldr	r3, [pc, #160]	; (2700 <setup+0x560>)

      FS_started=1;
    265e:	ldr	r1, [pc, #120]	; (26d8 <setup+0x538>)
  public:
    void init(void)
    { if(FS_started) return;
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    2660:	ldr	r2, [pc, #160]	; (2704 <setup+0x564>)

      FS_started=1;
    2662:	strh	r7, [r1, #0]
  public:
    void init(void)
    { if(FS_started) return;
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    2664:	str	r2, [r3, #0]
    2666:	b.n	2520 <setup+0x380>
    2668:	ldr	r3, [pc, #156]	; (2708 <setup+0x568>)
    266a:	add.w	r2, r3, #1160	; 0x488
    266e:	mov	r0, r2
    2670:	mov	r1, fp
    2672:	str	r2, [sp, #12]
    2674:	bl	8814 <SdioCard::begin(SdioConfig)>
    2678:	movs	r1, #9
    267a:	ldr	r0, [pc, #120]	; (26f4 <setup+0x554>)
    267c:	bl	96c8 <usb_serial_write>
    2680:	ldr	r0, [pc, #116]	; (26f8 <setup+0x558>)
    2682:	bl	b010 <Print::println()>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    2686:	ldr	r2, [sp, #12]
    2688:	mov	r0, r2
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    268a:	str.w	r2, [r2, #-4]
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    268e:	bl	7e6c <SdioCard::errorCode() const>
    2692:	ldr	r2, [sp, #12]
    2694:	ldr	r1, [pc, #100]	; (26fc <setup+0x55c>)
    2696:	mov	r3, r0
    2698:	ldr	r0, [pc, #92]	; (26f8 <setup+0x558>)
    269a:	bl	b040 <Print::printf(char const*, ...)>
    return m_card && !m_card->errorCode();
    269e:	ldr	r3, [pc, #104]	; (2708 <setup+0x568>)
    26a0:	ldr.w	r0, [r3, #1156]	; 0x484
    26a4:	cmp	r0, #0
    26a6:	beq.w	2458 <setup+0x2b8>
    26aa:	ldr	r3, [r0, #0]
    26ac:	ldr	r3, [r3, #36]	; 0x24
    26ae:	blx	r3
    26b0:	cmp	r0, #0
    26b2:	bne.w	2458 <setup+0x2b8>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    26b6:	ldr	r3, [pc, #80]	; (2708 <setup+0x568>)
    26b8:	ldr.w	r1, [r3, #1156]	; 0x484
    26bc:	mov	r0, r3
    26be:	bl	3388 <FsVolume::begin(SdCardInterface*)>
    26c2:	cmp	r0, #0
    26c4:	beq.w	2458 <setup+0x2b8>

      FS_started=1;
    26c8:	ldr	r2, [pc, #12]	; (26d8 <setup+0x538>)
  public:
    void init(void)
    { if(FS_started) return;
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    26ca:	ldr	r3, [pc, #52]	; (2700 <setup+0x560>)

      FS_started=1;
    26cc:	strh.w	fp, [r2]
  public:
    void init(void)
    { if(FS_started) return;
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    26d0:	ldr	r2, [pc, #48]	; (2704 <setup+0x564>)
    26d2:	str	r2, [r3, #0]
    26d4:	b.n	25a0 <setup+0x400>
    26d6:	nop
    26d8:	.word	0x1fff152c
    26dc:	.word	0x1fff1530
    26e0:	.word	0x1fff2484
    26e4:	.word	0x1fff0734
    26e8:	.word	0x400ff088
    26ec:	.word	0x400ff090
    26f0:	.word	0x400ff084
    26f4:	.word	0x00013c9c
    26f8:	.word	0x1fff0898
    26fc:	.word	0x00013ca8
    2700:	.word	0x20020364
    2704:	.word	0x000014a1
    2708:	.word	0x1fff1f50
    270c:	.word	0x1fff1f4c
    2710:	.word	0x200203c0

00002714 <loop>:
int menu(void);

/*************************** Arduino loop ************************************/
void loop(void)
{ 
  if(!haveAcq) return;
    2714:	ldr	r3, [pc, #696]	; (29d0 <loop+0x2bc>)
    2716:	ldr	r3, [r3, #0]
    2718:	cmp	r3, #0
    271a:	beq.n	27e8 <loop+0xd4>

int menu(void);

/*************************** Arduino loop ************************************/
void loop(void)
{ 
    271c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(!haveAcq) return;
  //
  if(doHibernate && (loopStatus<2)) 
    2720:	ldr	r4, [pc, #688]	; (29d4 <loop+0x2c0>)
    2722:	ldr	r5, [pc, #692]	; (29d8 <loop+0x2c4>)
    2724:	ldr	r3, [r4, #0]

int menu(void);

/*************************** Arduino loop ************************************/
void loop(void)
{ 
    2726:	sub	sp, #156	; 0x9c
  if(!haveAcq) return;
  //
  if(doHibernate && (loopStatus<2)) 
    2728:	cbz	r3, 275c <loop+0x48>
    272a:	ldr	r3, [r5, #0]
    272c:	cmp	r3, #1
    272e:	ble.n	273a <loop+0x26>
#if ON_TIME > 0
    #ifdef DO_LOGGER
      if(loopStatus==0) loopStatus=2;
    #endif
    
    if((loopStatus==2) && (millis()>(parameters.on_time*60+3)*1000))  //
    2730:	cmp	r3, #2
    2732:	beq.n	2766 <loop+0x52>
    	#else
    		acqLoop();
    	#endif
    }
#endif
}
    2734:	add	sp, #156	; 0x9c
    2736:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    273a:	movs	r1, #8
    273c:	ldr	r0, [pc, #668]	; (29dc <loop+0x2c8>)
    273e:	bl	96c8 <usb_serial_write>
    2742:	ldr	r0, [pc, #668]	; (29e0 <loop+0x2cc>)
    2744:	bl	b010 <Print::println()>
inline void acqStop(void)
{ 
  #if DO_DEBUG == 2
    Serial.println("Stop Acq");
  #endif
  ICS43432.stop();
    2748:	ldr	r0, [pc, #664]	; (29e4 <loop+0x2d0>)
    274a:	bl	2c38 <c_ICS43432::stop()>
}

inline void acqExit(void)
{
  ICS43432.exit();
    274e:	ldr	r0, [pc, #660]	; (29e4 <loop+0x2d0>)
    2750:	bl	2c48 <c_ICS43432::exit()>
  //
  if(doHibernate && (loopStatus<2)) 
  { acqStop();
    acqExit();

    check_hibernate(&parameters,1); 
    2754:	movs	r1, #1
    2756:	ldr	r0, [pc, #656]	; (29e8 <loop+0x2d4>)
    2758:	bl	1728 <check_hibernate(parameters_s*, int)>
    275c:	ldr	r3, [r5, #0]
  }
  
#if ON_TIME > 0
    #ifdef DO_LOGGER
      if(loopStatus==0) loopStatus=2;
    275e:	cmp	r3, #0
    2760:	bne.n	2730 <loop+0x1c>
    2762:	movs	r3, #2
    2764:	str	r3, [r5, #0]
    #endif
    
    if((loopStatus==2) && (millis()>(parameters.on_time*60+3)*1000))  //
    2766:	ldr	r2, [pc, #640]	; (29e8 <loop+0x2d4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2768:	ldr	r3, [pc, #640]	; (29ec <loop+0x2d8>)
    276a:	ldrh	r1, [r2, #0]
    276c:	ldr	r3, [r3, #0]
    276e:	str	r3, [sp, #32]
    2770:	movw	r3, #60000	; 0xea60
	return ret;
    2774:	ldr	r2, [sp, #32]
    2776:	mul.w	r3, r3, r1
    277a:	addw	r3, r3, #3000	; 0xbb8
    277e:	cmp	r3, r2
    2780:	bcc.n	27c2 <loop+0xae>

  char filename[80];
  uint16_t nbuf = maxBlockSize;
  uint32_t maxLoggerCount = (max_mb*1024*1024)/maxBlockSize;

  if (isLogging) return 1; // we are already busy (should not happen)
    2782:	ldr	r7, [pc, #620]	; (29f0 <loop+0x2dc>)
    2784:	ldrh	r3, [r7, #0]
    2786:	cmp	r3, #0
    2788:	bne.n	2734 <loop+0x20>
{ // does also open/close a file when required
  //
  static uint16_t isLogging = 0; // flag to ensure single access to function

  char filename[80];
  uint16_t nbuf = maxBlockSize;
    278a:	ldr	r6, [pc, #616]	; (29f4 <loop+0x2e0>)
    278c:	ldr	r2, [r6, #8]
  uint32_t maxLoggerCount = (max_mb*1024*1024)/maxBlockSize;

  if (isLogging) return 1; // we are already busy (should not happen)
  isLogging = 1;

  if(fileStatus==0)
    278e:	ldrh	r3, [r6, #14]
{ // does also open/close a file when required
  //
  static uint16_t isLogging = 0; // flag to ensure single access to function

  char filename[80];
  uint16_t nbuf = maxBlockSize;
    2790:	str	r2, [sp, #28]
    2792:	mov	r1, r2
  uint32_t maxLoggerCount = (max_mb*1024*1024)/maxBlockSize;

  if (isLogging) return 1; // we are already busy (should not happen)
  isLogging = 1;
    2794:	movs	r2, #1
  //
  static uint16_t isLogging = 0; // flag to ensure single access to function

  char filename[80];
  uint16_t nbuf = maxBlockSize;
  uint32_t maxLoggerCount = (max_mb*1024*1024)/maxBlockSize;
    2796:	mov.w	r8, #41943040	; 0x2800000

  if (isLogging) return 1; // we are already busy (should not happen)
  isLogging = 1;
    279a:	strh	r2, [r7, #0]
  //
  static uint16_t isLogging = 0; // flag to ensure single access to function

  char filename[80];
  uint16_t nbuf = maxBlockSize;
  uint32_t maxLoggerCount = (max_mb*1024*1024)/maxBlockSize;
    279c:	udiv	r2, r8, r1
    27a0:	str	r2, [sp, #24]

  if (isLogging) return 1; // we are already busy (should not happen)
  isLogging = 1;

  if(fileStatus==0)
    27a2:	cbz	r3, 27fa <loop+0xe6>
      fileStatus = 3; // close file on write failure
    else
      fileStatus = 2; // flag as open
  }

  if(fileStatus==2)
    27a4:	cmp	r3, #2
    27a6:	beq.n	2896 <loop+0x182>
    { fileStatus=3; // flag to stop logging
      isRunning=0;  // tell close to finish to finish aquisition
    }
  }

  if(fileStatus==3)
    27a8:	cmp	r3, #3
    27aa:	beq.w	2964 <loop+0x250>
    #endif
    //
    fileStatus= 0; // flag file as closed   
  }

  if(isRunning==0) // we should stop logging
    27ae:	ldrsh.w	r2, [r6, #12]
    27b2:	cbz	r2, 27ea <loop+0xd6>
  { haveFinished(); fileStatus = 4; 
  }

  isLogging = 0;
    27b4:	movs	r2, #0
  if(fileStatus==4) { return -1; } // don't do anything anymore 
    27b6:	cmp	r3, #4

  if(isRunning==0) // we should stop logging
  { haveFinished(); fileStatus = 4; 
  }

  isLogging = 0;
    27b8:	strh	r2, [r7, #0]
  if(fileStatus==4) { return -1; } // don't do anything anymore 
    27ba:	bne.n	2734 <loop+0x20>
    }
    
    #ifdef DO_LOGGER
      if(loopStatus==2)
      { int16_t stat = loggerLoop();
        if(stat <= 0 ) loopStatus=1; 
    27bc:	movs	r3, #1
    27be:	str	r3, [r5, #0]
    27c0:	b.n	2734 <loop+0x20>
    #ifdef DO_LOGGER
      if(loopStatus==0) loopStatus=2;
    #endif
    
    if((loopStatus==2) && (millis()>(parameters.on_time*60+3)*1000))  //
    { doHibernate=1; 
    27c2:	movs	r3, #1
    27c4:	movs	r1, #11
    27c6:	ldr	r0, [pc, #560]	; (29f8 <loop+0x2e4>)
    27c8:	str	r3, [r4, #0]
    27ca:	bl	96c8 <usb_serial_write>
    27ce:	ldr	r0, [pc, #528]	; (29e0 <loop+0x2cc>)
    27d0:	bl	b010 <Print::println()>
        loggerStop(1);
      #endif
    }
    
    #ifdef DO_LOGGER
      if(loopStatus==2)
    27d4:	ldr	r3, [r5, #0]
  Logger (void) : head(0), tail(0), enabled(0)
  { maxBlockSize = na*nd*sizeof(T);}

  void start(void) { clear(); reset(); isRunning=1; enabled = 1; }
  void stop(void) { isRunning=0; } // tell uSD_IF
  void stopnow(void) { isRunning=-1; } // tell uSD_IF
    27d6:	ldr	r2, [pc, #540]	; (29f4 <loop+0x2e0>)
    27d8:	movw	r1, #65535	; 0xffff
    27dc:	cmp	r3, #2
    27de:	strh	r1, [r2, #12]
    27e0:	beq.n	2782 <loop+0x6e>
    	#else
    		acqLoop();
    	#endif
    }
#endif
}
    27e2:	add	sp, #156	; 0x9c
    27e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27e8:	bx	lr
  //
  void clear(void);
  //
  void *drain(void);
  int16_t write(void *src);
  void haveFinished(void) {enabled=0;} // got signal from uSD_IF
    27ea:	ldr	r1, [pc, #528]	; (29fc <loop+0x2e8>)
    27ec:	movs	r3, #0
    //
    fileStatus= 0; // flag file as closed   
  }

  if(isRunning==0) // we should stop logging
  { haveFinished(); fileStatus = 4; 
    27ee:	movs	r2, #4
  //
  void clear(void);
  //
  void *drain(void);
  int16_t write(void *src);
  void haveFinished(void) {enabled=0;} // got signal from uSD_IF
    27f0:	strh.w	r3, [r1, #204]	; 0xcc

  if(isRunning==0) // we should stop logging
  { haveFinished(); fileStatus = 4; 
  }

  isLogging = 0;
    27f4:	strh	r3, [r7, #0]
    //
    fileStatus= 0; // flag file as closed   
  }

  if(isRunning==0) // we should stop logging
  { haveFinished(); fileStatus = 4; 
    27f6:	strh	r2, [r6, #14]
    27f8:	b.n	27bc <loop+0xa8>
#include <time.h>
struct tm seconds2tm(uint32_t tt);

uint16_t generateFilename(char *dev, char *filename)
{
  struct tm tx=seconds2tm(RTC_TSR);;
    27fa:	ldr	r3, [pc, #516]	; (2a00 <loop+0x2ec>)
    27fc:	add	r0, sp, #36	; 0x24
    27fe:	ldr	r1, [r3, #0]
    2800:	bl	1168 <seconds2tm(unsigned long)>
  sprintf(filename,"%s_%04d%02d%02d_%02d%02d%02d.bin",dev,
          tx.tm_year, tx.tm_mon, tx.tm_mday,
          tx.tm_hour, tx.tm_min, tx.tm_sec);
    2804:	ldr	r1, [sp, #36]	; 0x24
    2806:	ldr	r2, [sp, #40]	; 0x28
    2808:	ldr	r0, [sp, #44]	; 0x2c
    280a:	str	r1, [sp, #16]
    280c:	str	r2, [sp, #12]
    280e:	ldr	r1, [sp, #48]	; 0x30
    2810:	ldr	r2, [sp, #52]	; 0x34
    2812:	ldr	r3, [sp, #56]	; 0x38
    2814:	str	r0, [sp, #8]
    2816:	str	r1, [sp, #4]
    2818:	str	r2, [sp, #0]
    281a:	ldr	r1, [pc, #488]	; (2a04 <loop+0x2f0>)
    281c:	ldr	r2, [pc, #488]	; (2a08 <loop+0x2f4>)
    281e:	add	r0, sp, #72	; 0x48
    2820:	bl	d0f4 <sprintf>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    2824:	ldr	r3, [pc, #484]	; (2a0c <loop+0x2f8>)
    2826:	ldr	r1, [r3, #0]
    2828:	cmp	r1, #0
    282a:	beq.w	295c <loop+0x248>
    282e:	ldr	r4, [pc, #480]	; (2a10 <loop+0x2fc>)
    2830:	movs	r3, #83	; 0x53
    2832:	add.w	r0, r4, #1208	; 0x4b8
    2836:	add	r2, sp, #72	; 0x48
    2838:	bl	32e4 <FsFile::open(FsVolume*, char const*, unsigned char)>
    283c:	cmp	r0, #0
    283e:	beq.w	295c <loop+0x248>
    2842:	ldr.w	r0, [r4, #1280]	; 0x500
   *
   * \param[in] length size of the file in bytes.
   * \return true for success else false.
   */
  bool preAllocate(uint64_t length) {
    if (m_fFile) {
    2846:	cmp	r0, #0
    2848:	beq.w	2ac4 <loop+0x3b0>
      return length < (1ULL << 32) ? m_fFile->preAllocate(length) : false;
    284c:	mov	r1, r8
    284e:	bl	51d8 <FatFile::preAllocate(unsigned long)>
    void open(char * filename)
    {
      if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) {
        sd.errorHalt("file.open failed");
      }
      if (!file.preAllocate(PRE_ALLOCATE_SIZE)) {
    2852:	cmp	r0, #0
    2854:	beq.w	2ab4 <loop+0x3a0>
      isLogging = 0; return 0; // tell calling loop() we have error
    } // end of all operations

    mFS.open(filename);
    #if DO_DEBUG > 0
        Serial.printf(" %s\n\r",filename);
    2858:	add	r2, sp, #72	; 0x48
    285a:	ldr	r1, [pc, #440]	; (2a14 <loop+0x300>)
    285c:	ldr	r0, [pc, #384]	; (29e0 <loop+0x2cc>)
    285e:	bl	b040 <Print::printf(char const*, ...)>
        Serial.printf(" %d blocks max: %d  MB\n\r",maxLoggerCount,max_mb);
    2862:	movs	r3, #40	; 0x28
    2864:	ldr	r2, [sp, #24]
    2866:	ldr	r1, [pc, #432]	; (2a18 <loop+0x304>)
    2868:	ldr	r0, [pc, #372]	; (29e0 <loop+0x2cc>)
    286a:	bl	b040 <Print::printf(char const*, ...)>
    286e:	ldr.w	r0, [r4, #1280]	; 0x500
    2872:	ldr	r2, [pc, #412]	; (2a10 <loop+0x2fc>)
    #endif
    loggerCount=0;  // count successful transfers
    2874:	movs	r3, #0
    2876:	str	r3, [r6, #20]
    overrun=0;      // count buffer overruns
    2878:	str	r3, [r6, #4]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    287a:	cmp	r0, #0
    287c:	beq.w	29a4 <loop+0x290>
    2880:	mov.w	r2, #512	; 0x200
    2884:	ldr	r1, [pc, #404]	; (2a1c <loop+0x308>)
    2886:	bl	57fc <FatFile::write(void const*, unsigned int)>
      file.close();
    }

    uint32_t write(uint8_t *buffer, uint32_t nbuf)
    {
      if (nbuf != file.write(buffer, nbuf)) sd.errorHalt("write failed");
    288a:	cmp.w	r0, #512	; 0x200
    288e:	bne.w	2abc <loop+0x3a8>
    //
    if (!mFS.write((uint8_t*)&header, sizeof(header_s)))
      fileStatus = 3; // close file on write failure
    else
      fileStatus = 2; // flag as open
    2892:	movs	r3, #2
    2894:	strh	r3, [r6, #14]
  
template <typename T, int nq, int nd, int na>
void * Logger<T,nq,nd,na>:: drain(void)
  {
    uint16_t n;
    if(head>tail) n=head-tail; else n = nq + head -tail;
    2896:	ldr	r3, [pc, #356]	; (29fc <loop+0x2e8>)
    2898:	ldrsh.w	r9, [r3, #202]	; 0xca
    289c:	ldrsh.w	sl, [r3, #200]	; 0xc8
    28a0:	cmp	sl, r9
    28a2:	it	le
    28a4:	addle.w	r3, sl, #300	; 0x12c
    28a8:	uxth.w	r4, r9
    28ac:	ite	gt
    28ae:	rsbgt	r3, r4, sl
    28b2:	suble	r3, r3, r4
    28b4:	uxth	r3, r3

    int16_t nb=na; // na is number of buffers to fetched from queue and written to disk
    if(n>nb)
    28b6:	cmp	r3, #64	; 0x40
    28b8:	ble.n	29ba <loop+0x2a6>
    28ba:	movs	r3, #0
    28bc:	mov.w	lr, #64	; 0x40
    {
      T *bptr = buffer;
    28c0:	ldr.w	r8, [pc, #348]	; 2a20 <loop+0x30c>
    28c4:	mov	ip, r5
          // copy to buffer     
          { T *src = queue[t];
            if(src)
            { for(int jj=0; jj<nd; jj++) bptr[jj]=src[jj];
              pool.release(t);
              queue[t]=0;
    28c6:	mov	fp, r3
    28c8:	mov	r5, lr
      T *bptr = buffer;
      //
      uint16_t t = tail;
      while(--nb>=0)
      {
        if (t != head) 
    28ca:	cmp	sl, r4
    28cc:	beq.n	290c <loop+0x1f8>
        {
          if (++t >= nq) t = 0;
    28ce:	adds	r4, #1
    28d0:	uxth	r4, r4
    28d2:	cmp.w	r4, #300	; 0x12c
    28d6:	bcs.n	2952 <loop+0x23e>
    28d8:	mov	lr, r4
    28da:	sxth.w	r9, r4
          
          // copy to buffer     
          { T *src = queue[t];
    28de:	add.w	lr, lr, #38400	; 0x9600
    28e2:	add.w	lr, lr, #6
    28e6:	ldr.w	r0, [r6, lr, lsl #2]
            if(src)
    28ea:	cbz	r0, 2906 <loop+0x1f2>
    28ec:	subs	r3, r0, #4
    28ee:	sub.w	r2, r8, #4
    28f2:	add.w	r0, r0, #508	; 0x1fc
            { for(int jj=0; jj<nd; jj++) bptr[jj]=src[jj];
    28f6:	ldr.w	r1, [r3, #4]!
    28fa:	str.w	r1, [r2, #4]!
    28fe:	cmp	r3, r0
    2900:	bne.n	28f6 <loop+0x1e2>
              pool.release(t);
              queue[t]=0;
    2902:	str.w	fp, [r6, lr, lsl #2]
            }
          }
          tail = t;
          bptr += nd;
    2906:	add.w	r8, r8, #512	; 0x200
    290a:	movs	r3, #1
    290c:	subs	r5, #1
    290e:	uxth	r5, r5
    if(n>nb)
    {
      T *bptr = buffer;
      //
      uint16_t t = tail;
      while(--nb>=0)
    2910:	cmp	r5, #0
    2912:	bne.n	28ca <loop+0x1b6>
    2914:	mov	r5, ip
    2916:	cmp	r3, #0
    2918:	bne.w	2aac <loop+0x398>
    291c:	ldr	r4, [pc, #240]	; (2a10 <loop+0x2fc>)
    291e:	ldrh.w	r8, [sp, #28]
    2922:	ldr.w	r0, [r4, #1280]	; 0x500
    2926:	cmp	r0, #0
    2928:	beq.w	2a86 <loop+0x372>
    292c:	mov	r2, r8
    292e:	ldr	r1, [pc, #240]	; (2a20 <loop+0x30c>)
    2930:	bl	57fc <FatFile::write(void const*, unsigned int)>
    2934:	cmp	r8, r0
    2936:	bne.w	2abc <loop+0x3a8>
  { 
    // write to file
    uint8_t *buffer=(uint8_t*)drain();
    if(buffer)
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
    293a:	cmp.w	r8, #0
    293e:	bne.n	2a30 <loop+0x31c>
    2940:	movs	r3, #3
    2942:	strh	r3, [r6, #14]
            Serial.flush();
          }
        #endif
      }
    }
    if(isRunning<0) 
    2944:	ldrsh.w	r2, [r6, #12]
    2948:	ldr	r3, [pc, #168]	; (29f4 <loop+0x2e0>)
    294a:	cmp	r2, #0
    294c:	blt.n	29c4 <loop+0x2b0>
    294e:	ldrh	r3, [r3, #14]
    2950:	b.n	27a8 <loop+0x94>
      uint16_t t = tail;
      while(--nb>=0)
      {
        if (t != head) 
        {
          if (++t >= nq) t = 0;
    2952:	mov.w	r9, #0
    2956:	mov	lr, r9
    2958:	mov	r4, r9
    295a:	b.n	28de <loop+0x1ca>
    }
    
    void open(char * filename)
    {
      if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) {
        sd.errorHalt("file.open failed");
    295c:	ldr	r1, [pc, #196]	; (2a24 <loop+0x310>)
    295e:	ldr	r0, [pc, #176]	; (2a10 <loop+0x2fc>)
    2960:	bl	1f1c <SdBase<FsVolume>::errorHalt(char const*)>
    2964:	ldr	r4, [pc, #168]	; (2a10 <loop+0x2fc>)
    2966:	ldr.w	r0, [r4, #1280]	; 0x500
    296a:	ldr	r3, [pc, #164]	; (2a10 <loop+0x2fc>)
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    296c:	cbz	r0, 2996 <loop+0x282>
    296e:	bl	5784 <FatFile::truncate()>
    }

    void close(void)
    {
      file.truncate();
      file.close();
    2972:	ldr	r0, [pc, #180]	; (2a28 <loop+0x314>)
    2974:	bl	32bc <FsFile::close()>
  if(fileStatus==3)
  {
    //close file
    mFS.close();
    #if DO_DEBUG ==2
        Serial.printf("\n\r overrun: (%d)\n\r",overrun);
    2978:	ldr	r2, [r6, #4]
    297a:	ldr	r1, [pc, #176]	; (2a2c <loop+0x318>)
    297c:	ldr	r0, [pc, #96]	; (29e0 <loop+0x2cc>)
    297e:	bl	b040 <Print::printf(char const*, ...)>
    #endif
    //
    fileStatus= 0; // flag file as closed   
    2982:	movs	r3, #0
    2984:	strh	r3, [r6, #14]
    2986:	ldrsh.w	r3, [r6, #12]
  }

  if(isRunning==0) // we should stop logging
    298a:	cmp	r3, #0
    298c:	beq.w	27ea <loop+0xd6>
  { haveFinished(); fileStatus = 4; 
  }

  isLogging = 0;
    2990:	movs	r3, #0
    2992:	strh	r3, [r7, #0]
    2994:	b.n	2734 <loop+0x20>
    2996:	ldr.w	r0, [r3, #1284]	; 0x504
    299a:	cmp	r0, #0
    299c:	beq.n	2972 <loop+0x25e>
    299e:	bl	4c24 <ExFatFile::truncate()>
    29a2:	b.n	2972 <loop+0x25e>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    29a4:	ldr.w	r0, [r2, #1284]	; 0x504
    29a8:	cmp	r0, #0
    29aa:	beq.w	2abc <loop+0x3a8>
    29ae:	mov.w	r2, #512	; 0x200
    29b2:	ldr	r1, [pc, #104]	; (2a1c <loop+0x308>)
    29b4:	bl	4d44 <ExFatFile::write(void const*, unsigned int)>
    29b8:	b.n	288a <loop+0x176>
            Serial.flush();
          }
        #endif
      }
    }
    if(isRunning<0) 
    29ba:	ldrsh.w	r3, [r6, #12]
    29be:	cmp	r3, #0
    29c0:	bge.n	298a <loop+0x276>
    29c2:	ldr	r4, [pc, #76]	; (2a10 <loop+0x2fc>)
    { fileStatus=3; // flag to stop logging
    29c4:	movs	r2, #3
      isRunning=0;  // tell close to finish to finish aquisition
    29c6:	movs	r3, #0
          }
        #endif
      }
    }
    if(isRunning<0) 
    { fileStatus=3; // flag to stop logging
    29c8:	strh	r2, [r6, #14]
      isRunning=0;  // tell close to finish to finish aquisition
    29ca:	strh	r3, [r6, #12]
    29cc:	b.n	2966 <loop+0x252>
    29ce:	nop
    29d0:	.word	0x1fff173c
    29d4:	.word	0x1fff1738
    29d8:	.word	0x1fff2458
    29dc:	.word	0x00013d8c
    29e0:	.word	0x1fff0898
    29e4:	.word	0x1fff2480
    29e8:	.word	0x1fff0734
    29ec:	.word	0x200203c0
    29f0:	.word	0x20020154
    29f4:	.word	0x1fff2484
    29f8:	.word	0x00013d98
    29fc:	.word	0x20018084
    2a00:	.word	0x4003d000
    2a04:	.word	0x00013888
    2a08:	.word	0x1fff0740
    2a0c:	.word	0x20020360
    2a10:	.word	0x1fff1f50
    2a14:	.word	0x00013ce4
    2a18:	.word	0x00013cfc
    2a1c:	.word	0x1fff1530
    2a20:	.word	0x20018154
    2a24:	.word	0x00013c54
    2a28:	.word	0x1fff2408
    2a2c:	.word	0x00013d18
    // write to file
    uint8_t *buffer=(uint8_t*)drain();
    if(buffer)
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
      if(fileStatus == 2)
    2a30:	ldrh	r3, [r6, #14]
    2a32:	ldr.w	r8, [pc, #196]	; 2af8 <loop+0x3e4>
    2a36:	cmp	r3, #2
    2a38:	bne.n	2944 <loop+0x230>
      { loggerCount++;
    2a3a:	ldr.w	r3, [r8, #20]
        if(loggerCount == maxLoggerCount)
    2a3e:	ldr	r2, [sp, #24]
    uint8_t *buffer=(uint8_t*)drain();
    if(buffer)
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
      if(fileStatus == 2)
      { loggerCount++;
    2a40:	adds	r3, #1
        if(loggerCount == maxLoggerCount)
    2a42:	cmp	r2, r3
    uint8_t *buffer=(uint8_t*)drain();
    if(buffer)
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
      if(fileStatus == 2)
      { loggerCount++;
    2a44:	str.w	r3, [r8, #20]
        if(loggerCount == maxLoggerCount)
    2a48:	beq.n	2a9a <loop+0x386>
        { fileStatus= 3;}
        #if DO_DEBUG == 2
          else
          { if (!(loggerCount % 10)) Serial.printf(".");
    2a4a:	ldr	r2, [pc, #140]	; (2ad8 <loop+0x3c4>)
    2a4c:	umull	r1, r2, r2, r3
    2a50:	lsrs	r2, r2, #3
    2a52:	add.w	r2, r2, r2, lsl #2
    2a56:	cmp.w	r3, r2, lsl #1
    2a5a:	bne.n	2a68 <loop+0x354>
    2a5c:	ldr	r1, [pc, #124]	; (2adc <loop+0x3c8>)
    2a5e:	ldr	r0, [pc, #128]	; (2ae0 <loop+0x3cc>)
    2a60:	bl	b040 <Print::printf(char const*, ...)>
    2a64:	ldr.w	r3, [r8, #20]
            if (!(loggerCount % 640)) {Serial.println(); }
    2a68:	ldr	r2, [pc, #108]	; (2ad8 <loop+0x3c4>)
    2a6a:	umull	r1, r2, r2, r3
    2a6e:	lsrs	r2, r2, #9
    2a70:	add.w	r2, r2, r2, lsl #2
    2a74:	cmp.w	r3, r2, lsl #7
    2a78:	bne.n	2a80 <loop+0x36c>
    2a7a:	ldr	r0, [pc, #100]	; (2ae0 <loop+0x3cc>)
    2a7c:	bl	b010 <Print::println()>
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2a80:	bl	98d0 <usb_serial_flush_output>
    2a84:	b.n	2944 <loop+0x230>
    2a86:	ldr.w	r0, [r4, #1284]	; 0x504
    2a8a:	cmp	r0, #0
    2a8c:	beq.w	2934 <loop+0x220>
    2a90:	mov	r2, r8
    2a92:	ldr	r1, [pc, #80]	; (2ae4 <loop+0x3d0>)
    2a94:	bl	4d44 <ExFatFile::write(void const*, unsigned int)>
    2a98:	b.n	2934 <loop+0x220>
            Serial.flush();
          }
        #endif
      }
    }
    if(isRunning<0) 
    2a9a:	ldrsh.w	r3, [r8, #12]
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
      if(fileStatus == 2)
      { loggerCount++;
        if(loggerCount == maxLoggerCount)
        { fileStatus= 3;}
    2a9e:	movs	r2, #3
            Serial.flush();
          }
        #endif
      }
    }
    if(isRunning<0) 
    2aa0:	cmp	r3, #0
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
      if(fileStatus == 2)
      { loggerCount++;
        if(loggerCount == maxLoggerCount)
        { fileStatus= 3;}
    2aa2:	strh.w	r2, [r8, #14]
            Serial.flush();
          }
        #endif
      }
    }
    if(isRunning<0) 
    2aa6:	bge.w	2966 <loop+0x252>
    2aaa:	b.n	29c4 <loop+0x2b0>
    2aac:	ldr	r3, [pc, #56]	; (2ae8 <loop+0x3d4>)
    2aae:	strh.w	r9, [r3, #202]	; 0xca
    2ab2:	b.n	291c <loop+0x208>
    {
      if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) {
        sd.errorHalt("file.open failed");
      }
      if (!file.preAllocate(PRE_ALLOCATE_SIZE)) {
        sd.errorHalt("file.preAllocate failed");    
    2ab4:	ldr	r1, [pc, #52]	; (2aec <loop+0x3d8>)
    2ab6:	ldr	r0, [pc, #56]	; (2af0 <loop+0x3dc>)
    2ab8:	bl	1f1c <SdBase<FsVolume>::errorHalt(char const*)>
      file.close();
    }

    uint32_t write(uint8_t *buffer, uint32_t nbuf)
    {
      if (nbuf != file.write(buffer, nbuf)) sd.errorHalt("write failed");
    2abc:	ldr	r1, [pc, #52]	; (2af4 <loop+0x3e0>)
    2abe:	ldr	r0, [pc, #48]	; (2af0 <loop+0x3dc>)
    2ac0:	bl	1f1c <SdBase<FsVolume>::errorHalt(char const*)>
   */
  bool preAllocate(uint64_t length) {
    if (m_fFile) {
      return length < (1ULL << 32) ? m_fFile->preAllocate(length) : false;
    }
    return m_xFile ? m_xFile->preAllocate(length) : false;
    2ac4:	ldr.w	r0, [r4, #1284]	; 0x504
    2ac8:	cmp	r0, #0
    2aca:	beq.n	2ab4 <loop+0x3a0>
    2acc:	mov.w	r2, #41943040	; 0x2800000
    2ad0:	movs	r3, #0
    2ad2:	bl	4a48 <ExFatFile::preAllocate(unsigned long long)>
    2ad6:	b.n	2852 <loop+0x13e>
    2ad8:	.word	0xcccccccd
    2adc:	.word	0x00013cec
    2ae0:	.word	0x1fff0898
    2ae4:	.word	0x20018154
    2ae8:	.word	0x20018084
    2aec:	.word	0x00013ccc
    2af0:	.word	0x1fff1f50
    2af4:	.word	0x00013c8c
    2af8:	.word	0x1fff2484

00002afc <_GLOBAL__sub_I_parameters>:
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
  }
  text[jj]=0;

  return text;
}
    2afc:	push	{r3, r4, r5, r6, r7, lr}
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    2afe:	ldr	r3, [pc, #128]	; (2b80 <_GLOBAL__sub_I_parameters+0x84>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2b00:	ldr	r4, [pc, #128]	; (2b84 <_GLOBAL__sub_I_parameters+0x88>)
    2b02:	str.w	r4, [r3, #1160]	; 0x488
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    2b06:	movs	r4, #38	; 0x26
    2b08:	strb.w	r4, [r3, #1192]	; 0x4a8
    2b0c:	ldr	r0, [pc, #120]	; (2b88 <_GLOBAL__sub_I_parameters+0x8c>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    2b0e:	ldr	r7, [pc, #124]	; (2b8c <_GLOBAL__sub_I_parameters+0x90>)
class FsFile : public Stream {
#else  // ENABLE_ARDUINO_FEATURES
class FsFile {
#endif  // ENABLE_ARDUINO_FEATURES
 public:
  FsFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    2b10:	ldr	r5, [pc, #124]	; (2b90 <_GLOBAL__sub_I_parameters+0x94>)
    2b12:	str.w	r0, [r3, #1176]	; 0x498
    2b16:	movs	r4, #0
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2b18:	mov.w	r6, #1000	; 0x3e8
  void release(uint16_t ii) {;}
};


#include "mfs.h"
c_mFS mFS;
    2b1c:	ldr	r2, [pc, #116]	; (2b94 <_GLOBAL__sub_I_parameters+0x98>)
    2b1e:	ldr	r1, [pc, #120]	; (2b98 <_GLOBAL__sub_I_parameters+0x9c>)
    2b20:	str.w	r7, [r3, #1200]	; 0x4b0
    2b24:	mov	r0, r3
    2b26:	str.w	r6, [r3, #1216]	; 0x4c0
    2b2a:	str.w	r5, [r3, #1208]	; 0x4b8
    2b2e:	str.w	r4, [r3, #1144]	; 0x478
    2b32:	str.w	r4, [r3, #1148]	; 0x47c
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    2b36:	strb.w	r4, [r3, #1172]	; 0x494
    2b3a:	strb.w	r4, [r3, #1195]	; 0x4ab
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiAltDriver {
 public:
#if IMPLEMENT_SPI_PORT_SELECTION
  SdSpiAltDriver() : m_spi(nullptr) {}
    2b3e:	str.w	r4, [r3, #1196]	; 0x4ac
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2b42:	strb.w	r4, [r3, #1212]	; 0x4bc
    2b46:	strb.w	r4, [r3, #1220]	; 0x4c4
    2b4a:	str.w	r4, [r3, #1280]	; 0x500
    2b4e:	str.w	r4, [r3, #1284]	; 0x504
    2b52:	bl	c4a0 <__aeabi_atexit>

/*--------------  - uSDLogger class          ------------------*/
class uSD_IF
{
  public:
  uSD_IF(void) {;}
    2b56:	ldr	r3, [pc, #68]	; (2b9c <_GLOBAL__sub_I_parameters+0xa0>)
 */
template <typename T, int nq, int nd, int na>
class Logger : public uSD_IF
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
    2b58:	ldr	r0, [pc, #68]	; (2ba0 <_GLOBAL__sub_I_parameters+0xa4>)

/*--------------  - uSDLogger class          ------------------*/
class uSD_IF
{
  public:
  uSD_IF(void) {;}
    2b5a:	str	r4, [r3, #4]
 */
template <typename T, int nq, int nd, int na>
class Logger : public uSD_IF
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
    2b5c:	add.w	r2, r3, #154624	; 0x25c00
  { maxBlockSize = na*nd*sizeof(T);}
    2b60:	mov.w	r1, #32768	; 0x8000

/*--------------  - uSDLogger class          ------------------*/
class uSD_IF
{
  public:
  uSD_IF(void) {;}
    2b64:	strh	r4, [r3, #12]
    2b66:	strh	r4, [r3, #14]
    2b68:	str	r4, [r3, #16]
    2b6a:	str	r4, [r3, #20]
 */
template <typename T, int nq, int nd, int na>
class Logger : public uSD_IF
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
    2b6c:	str	r0, [r3, #0]
  { maxBlockSize = na*nd*sizeof(T);}
    2b6e:	str	r1, [r3, #8]
 */
template <typename T, int nq, int nd, int na>
class Logger : public uSD_IF
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
    2b70:	strh.w	r4, [r2, #200]	; 0xc8
    2b74:	strh.w	r4, [r2, #202]	; 0xca
    2b78:	strh.w	r4, [r2, #204]	; 0xcc
    2b7c:	pop	{r3, r4, r5, r6, r7, pc}
    2b7e:	nop
    2b80:	.word	0x1fff1f50
    2b84:	.word	0x00013e90
    2b88:	.word	0x00013e38
    2b8c:	.word	0x38011001
    2b90:	.word	0x00013858
    2b94:	.word	0x1fff0730
    2b98:	.word	0x00000fbd
    2b9c:	.word	0x1fff2484
    2ba0:	.word	0x0001387c

00002ba4 <c_ICS43432::init(long, long*, unsigned long, unsigned short)>:
 */

  extern int iscl[];

uint32_t c_ICS43432::init(int32_t fsamp, int32_t *buffer, uint32_t nbuf, uint16_t nch)
{
    2ba4:	push	{r4, r5, r6, r7, lr}
    2ba6:	vpush	{d8}
    2baa:	sub	sp, #12
    2bac:	mov	r4, r1
    2bae:	mov	r5, r2
    2bb0:	mov	r6, r3
    2bb2:	ldrh.w	r7, [sp, #40]	; 0x28
  i2s_init();
    2bb6:	bl	47c <i2s_init>
  
  float fs = i2s_speedConfig(ICS43432_DEV,N_BITS, fsamp);
    2bba:	mov	r2, r4
    2bbc:	movs	r1, #32
    2bbe:	movs	r0, #5
    2bc0:	bl	48c <i2s_speedConfig>
  if(fs<1.0f) return 0;
    2bc4:	vmov.f32	s15, #112	; 0x3f800000  1.0
    2bc8:	vcmpe.f32	s0, s15
    2bcc:	vmrs	APSR_nzcv, fpscr
    2bd0:	bmi.n	2c14 <c_ICS43432::init(long, long*, unsigned long, unsigned short)+0x70>

  if(nch>2)  
    2bd2:	cmp	r7, #2
  	i2s_config(1, N_BITS, I2S_RX_2CH, 0); // both RX channels
    2bd4:	mov.w	r3, #0
  else
	  i2s_config(1, N_BITS, 0, 0);  // only 1 RX channel
    2bd8:	ite	ls
    2bda:	movls	r2, r3
  
  float fs = i2s_speedConfig(ICS43432_DEV,N_BITS, fsamp);
  if(fs<1.0f) return 0;

  if(nch>2)  
  	i2s_config(1, N_BITS, I2S_RX_2CH, 0); // both RX channels
    2bdc:	movhi	r2, #2
  else
	  i2s_config(1, N_BITS, 0, 0);  // only 1 RX channel
    2bde:	movs	r1, #32
    2be0:	movs	r0, #1
    2be2:	vmov.f32	s16, s0
    2be6:	bl	734 <i2s_config>
  i2s_configurePorts(2);
    2bea:	movs	r0, #2
    2bec:	bl	8e8 <i2s_configurePorts>

  DMA_init();
    2bf0:	bl	b0c <DMA_init>
  i2s_setupInput(buffer,nbuf,2,5); //port, prio (8=normal)
    2bf4:	mov	r0, r5
    2bf6:	mov	r1, r6
    2bf8:	movs	r3, #5
    2bfa:	movs	r2, #2
    2bfc:	bl	994 <i2s_setupInput>
  return (uint32_t) fs;
    2c00:	vcvt.u32.f32	s15, s16
    2c04:	vmov	r0, s15
    2c08:	vstr	s15, [sp, #4]
}
    2c0c:	add	sp, #12
    2c0e:	vpop	{d8}
    2c12:	pop	{r4, r5, r6, r7, pc}
uint32_t c_ICS43432::init(int32_t fsamp, int32_t *buffer, uint32_t nbuf, uint16_t nch)
{
  i2s_init();
  
  float fs = i2s_speedConfig(ICS43432_DEV,N_BITS, fsamp);
  if(fs<1.0f) return 0;
    2c14:	movs	r3, #0
    2c16:	mov	r0, r3
    2c18:	str	r3, [sp, #4]
  i2s_configurePorts(2);

  DMA_init();
  i2s_setupInput(buffer,nbuf,2,5); //port, prio (8=normal)
  return (uint32_t) fs;
}
    2c1a:	add	sp, #12
    2c1c:	vpop	{d8}
    2c20:	pop	{r4, r5, r6, r7, pc}
    2c22:	nop

00002c24 <c_ICS43432::start()>:

void c_ICS43432::start(void)
{
    2c24:	push	{r3, lr}
  i2s_enableInputDMA();
    2c26:	bl	ae8 <i2s_enableInputDMA>
  DMA_startAll();
    2c2a:	bl	d00 <DMA_startAll>
  i2s_startInput();
}
    2c2e:	ldmia.w	sp!, {r3, lr}

void c_ICS43432::start(void)
{
  i2s_enableInputDMA();
  DMA_startAll();
  i2s_startInput();
    2c32:	b.w	ad8 <i2s_startInput>
    2c36:	nop

00002c38 <c_ICS43432::stop()>:
}

void c_ICS43432::stop(void)
{
    2c38:	push	{r3, lr}
  i2s_stopInput();
    2c3a:	bl	ac8 <i2s_stopInput>
  DMA_haltAll();
}
    2c3e:	ldmia.w	sp!, {r3, lr}
}

void c_ICS43432::stop(void)
{
  i2s_stopInput();
  DMA_haltAll();
    2c42:	b.w	cf0 <DMA_haltAll>
    2c46:	nop

00002c48 <c_ICS43432::exit()>:
}

void c_ICS43432::exit(void) { i2s_stopClock();}
    2c48:	b.w	46c <i2s_stopClock>

00002c4c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    2c4c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2c4e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2c50:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2c52:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2c54:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2c56:	beq.n	2c60 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    2c58:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2c5c:	b.w	ac2c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2c60:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    2c62:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2c66:	bx	r3

00002c68 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    2c68:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c6c:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    2c6e:	ldr	r5, [r4, #12]
    2c70:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    2c74:	ldr	r5, [pc, #484]	; (2e5c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    2c76:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    2c78:	bne.n	2d20 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2c7a:	lsls	r7, r3, #31
    2c7c:	bpl.w	2de6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    2c80:	cmp	r1, #0
    2c82:	beq.w	2e4c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2c86:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    2c88:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2c8a:	it	ne
    2c8c:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    2c90:	str	r5, [r4, #52]	; 0x34
    2c92:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2c94:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    2c98:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2c9c:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2ca0:	cmp.w	ip, #0
    2ca4:	beq.w	2df8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    2ca8:	cbz	r1, 2cb4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    2caa:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    2cac:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    2cb0:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2cb4:	ldr	r5, [r0, #4]
    2cb6:	ldrb	r6, [r5, #8]
			if (count == 2)
    2cb8:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2cbc:	add.w	r6, r6, #4294967295
    2cc0:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    2cc4:	ite	eq
    2cc6:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2cca:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2cce:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2cd0:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    2cd2:	sub.w	ip, ip, #2
    2cd6:	b.n	2cea <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    2cd8:	cbz	r2, 2cde <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    2cda:	strb	r4, [r2, #0]
    2cdc:	adds	r2, #1
						} 
						count_read--;
    2cde:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2ce0:	and.w	r5, r5, #61440	; 0xf000
    2ce4:	cmp	r5, r6
    2ce6:	bls.n	2d16 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    2ce8:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    2cea:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    2cec:	tst.w	r5, #240	; 0xf0
    2cf0:	beq.n	2ce0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    2cf2:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    2cf4:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    2cf8:	mov	r7, r2
    2cfa:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    2cfe:	bne.n	2cd8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    2d00:	cbz	r2, 2d0a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    2d02:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    2d06:	strb	r4, [r2, #1]
    2d08:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2d0a:	and.w	r5, r5, #61440	; 0xf000
    2d0e:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    2d10:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2d14:	bhi.n	2ce8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    2d16:	cmp.w	ip, #0
    2d1a:	beq.n	2df8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    2d1c:	ldr	r4, [r0, #0]
    2d1e:	b.n	2ca8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2d20:	lsls	r5, r3, #31
    2d22:	bpl.n	2dbe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    2d24:	cmp	r1, #0
    2d26:	beq.w	2e3c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2d2a:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    2d2c:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2d2e:	it	ne
    2d30:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    2d34:	str	r5, [r4, #52]	; 0x34
    2d36:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    2d38:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    2d3c:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    2d40:	cmp.w	lr, #0
    2d44:	beq.n	2dca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    2d46:	cbz	r1, 2d54 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    2d48:	ldrb.w	ip, [r1, #1]
    2d4c:	ldrb	r5, [r1, #0]
    2d4e:	adds	r1, #2
    2d50:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2d54:	ldr	r5, [r0, #4]
    2d56:	ldrb	r6, [r5, #8]
			if (count == 2)
    2d58:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2d5c:	add.w	r6, r6, #4294967295
    2d60:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    2d64:	ite	eq
    2d66:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2d6a:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2d6e:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2d70:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    2d72:	sub.w	lr, lr, #2
    2d76:	b.n	2d8a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    2d78:	cbz	r2, 2d7e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    2d7a:	strb	r4, [r2, #0]
    2d7c:	adds	r2, #1
						} 
						count_read--;
    2d7e:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2d80:	and.w	r5, r5, #61440	; 0xf000
    2d84:	cmp	r5, r6
    2d86:	bls.n	2db4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    2d88:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    2d8a:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    2d8c:	tst.w	r5, #240	; 0xf0
    2d90:	beq.n	2d80 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    2d92:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    2d96:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    2d98:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    2d9a:	bne.n	2d78 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    2d9c:	cbz	r2, 2da8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    2d9e:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    2da2:	asrs	r4, r4, #8
    2da4:	strb	r4, [r2, #1]
    2da6:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2da8:	and.w	r5, r5, #61440	; 0xf000
    2dac:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    2dae:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2db2:	bhi.n	2d88 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    2db4:	cmp.w	lr, #0
    2db8:	beq.n	2dca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    2dba:	ldr	r4, [r0, #0]
    2dbc:	b.n	2d46 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2dbe:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    2dc0:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    2dc4:	cmp.w	lr, #0
    2dc8:	bne.n	2d46 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    2dca:	cbz	r3, 2e14 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    2dcc:	ldr	r4, [r0, #0]
			sr = port().SR;
    2dce:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2dd0:	tst.w	r1, #240	; 0xf0
    2dd4:	beq.n	2dce <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    2dd6:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    2dd8:	lsls	r4, r3, #31
    2dda:	bpl.n	2e18 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    2ddc:	cbz	r2, 2de2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    2dde:	strb	r1, [r2, #0]
    2de0:	adds	r2, #1
					count_read--;
    2de2:	subs	r3, #1
    2de4:	b.n	2dca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2de6:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2dea:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2dec:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2df0:	cmp.w	ip, #0
    2df4:	bne.w	2ca8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    2df8:	cbz	r3, 2e14 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    2dfa:	ldr	r4, [r0, #0]
			sr = port().SR;
    2dfc:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2dfe:	tst.w	r1, #240	; 0xf0
    2e02:	beq.n	2dfc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    2e04:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    2e06:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    2e08:	bpl.n	2e2a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    2e0a:	cbz	r2, 2e10 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    2e0c:	strb	r1, [r2, #0]
    2e0e:	adds	r2, #1
					count_read--;
    2e10:	subs	r3, #1
    2e12:	b.n	2df8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    2e14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    2e18:	cbz	r2, 2e26 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    2e1a:	mov	r4, r2
						*p_read++ = w >> 8;
    2e1c:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    2e1e:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    2e22:	strb	r5, [r2, #1]
    2e24:	mov	r2, r4
					}
					count_read -= 2;
    2e26:	subs	r3, #2
    2e28:	b.n	2dca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    2e2a:	cbz	r2, 2e38 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    2e2c:	mov	r4, r2
    2e2e:	asrs	r5, r1, #8
    2e30:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    2e34:	strb	r1, [r2, #1]
    2e36:	mov	r2, r4
					}
					count_read -= 2;
    2e38:	subs	r3, #2
    2e3a:	b.n	2df8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2e3c:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    2e40:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2e42:	it	ne
    2e44:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    2e48:	str	r5, [r4, #52]	; 0x34
    2e4a:	b.n	2d38 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2e4c:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    2e50:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2e52:	it	ne
    2e54:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    2e58:	str	r5, [r4, #52]	; 0x34
    2e5a:	b.n	2c94 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    2e5c:	.word	0x801f0400

00002e60 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    2e60:	cbz	r3, 2e66 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    2e62:	b.w	2c68 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    2e66:	bx	lr

00002e68 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    2e68:	ldrb.w	r2, [r0, #57]	; 0x39
    2e6c:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    2e70:	subs	r0, r2, r0
    2e72:	bx	lr

00002e74 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2e74:	ldrb.w	r3, [r0, #56]	; 0x38
    2e78:	ldrb.w	r2, [r0, #57]	; 0x39
    2e7c:	cmp	r2, r3
    2e7e:	bls.n	2e8c <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    2e80:	adds	r2, r3, #1
    2e82:	add	r3, r0
    2e84:	strb.w	r2, [r0, #56]	; 0x38
    2e88:	ldrb	r0, [r3, #24]
    2e8a:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2e8c:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    2e90:	bx	lr
    2e92:	nop

00002e94 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2e94:	ldrb.w	r3, [r0, #56]	; 0x38
    2e98:	ldrb.w	r2, [r0, #57]	; 0x39
    2e9c:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    2e9e:	itte	hi
    2ea0:	addhi	r3, r3, r0
    2ea2:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2ea4:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    2ea8:	bx	lr
    2eaa:	nop

00002eac <TwoWire::flush()>:
	virtual void flush(void) {
    2eac:	bx	lr
    2eae:	nop

00002eb0 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2eb0:	push	{r3, r4, r5, lr}
    2eb2:	mov	r5, r0
	if (transmitting || slave_mode) {
    2eb4:	ldrh.w	r0, [r0, #94]	; 0x5e
    2eb8:	cbz	r0, 2ee0 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    2eba:	ldrb.w	r3, [r5, #93]	; 0x5d
    2ebe:	mov	r4, r2
    2ec0:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    2ec4:	cmp	r4, r2
    2ec6:	bhi.n	2ee2 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    2ec8:	add.w	r0, r5, #59	; 0x3b
    2ecc:	add	r0, r3
    2ece:	mov	r2, r4
    2ed0:	bl	94c8 <memcpy>
		txBufferLength += quantity;
    2ed4:	ldrb.w	r3, [r5, #93]	; 0x5d
    2ed8:	add	r3, r4
    2eda:	strb.w	r3, [r5, #93]	; 0x5d
    2ede:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    2ee0:	pop	{r3, r4, r5, pc}
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    2ee2:	movs	r0, #1
    2ee4:	mov	r4, r2
    2ee6:	strb	r0, [r5, #4]
    2ee8:	b.n	2ec8 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    2eea:	nop

00002eec <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    2eec:	ldrh.w	r3, [r0, #94]	; 0x5e
    2ef0:	cbz	r3, 2f0e <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    2ef2:	ldrb.w	r3, [r0, #93]	; 0x5d
    2ef6:	cmp	r3, #32
    2ef8:	bhi.n	2f0a <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    2efa:	adds	r2, r0, r3
    2efc:	adds	r3, #1
    2efe:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    2f02:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    2f04:	strb.w	r1, [r2, #59]	; 0x3b
    2f08:	bx	lr
    2f0a:	movs	r3, #1
    2f0c:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    2f0e:	movs	r0, #0
    2f10:	bx	lr
    2f12:	nop

00002f14 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    2f14:	push	{r3, r4, r5, lr}
    2f16:	ldr	r5, [pc, #300]	; (3044 <i2c0_isr+0x130>)
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    2f18:	ldr	r2, [r5, #16]
void TwoWire::isr(void)
{
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    2f1a:	ldrb	r4, [r2, #3]
    2f1c:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    2f1e:	lsls	r1, r4, #27
    2f20:	bpl.n	2f6e <i2c0_isr+0x5a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    2f22:	movs	r3, #16
    2f24:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    2f26:	lsls	r3, r4, #25
    2f28:	bpl.n	2f6c <i2c0_isr+0x58>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    2f2a:	and.w	r4, r4, #4
    2f2e:	and.w	r3, r4, #255	; 0xff
    2f32:	cmp	r4, #0
    2f34:	beq.n	2ff2 <i2c0_isr+0xde>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    2f36:	ldr	r1, [pc, #272]	; (3048 <i2c0_isr+0x134>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    2f38:	ldr	r2, [r5, #100]	; 0x64
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
			txBufferLength = 0;
    2f3a:	ldr	r4, [pc, #264]	; (3044 <i2c0_isr+0x130>)
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    2f3c:	movs	r3, #0
    2f3e:	strb	r3, [r1, #0]
			txBufferLength = 0;
    2f40:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    2f44:	cmp	r2, #0
    2f46:	beq.n	301a <i2c0_isr+0x106>
				user_onRequest();
    2f48:	blx	r2
			}
			if (txBufferLength == 0) {
    2f4a:	ldrb.w	r3, [r4, #93]	; 0x5d
    2f4e:	cmp	r3, #0
    2f50:	beq.n	301a <i2c0_isr+0x106>
    2f52:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    2f54:	movs	r2, #208	; 0xd0
    2f56:	strb	r2, [r3, #2]
    2f58:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    2f5a:	ldrb.w	r2, [r5, #59]	; 0x3b
    2f5e:	strb	r2, [r3, #4]
    2f60:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    2f62:	movs	r2, #1
    2f64:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2f68:	movs	r2, #2
    2f6a:	strb	r2, [r3, #3]
    2f6c:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    2f6e:	and.w	r3, r4, #64	; 0x40
    2f72:	and.w	r0, r3, #255	; 0xff
    2f76:	cmp	r3, #0
    2f78:	bne.n	2f2a <i2c0_isr+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    2f7a:	ldrb	r3, [r2, #6]
    2f7c:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    2f7e:	and.w	r1, r3, #96	; 0x60
    2f82:	cmp	r1, #96	; 0x60
    2f84:	beq.n	3028 <i2c0_isr+0x114>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    2f86:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    2f88:	and.w	r3, r3, #16
    2f8c:	and.w	r1, r3, #255	; 0xff
    2f90:	cbz	r3, 2fc2 <i2c0_isr+0xae>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    2f92:	ands.w	r4, r4, #1
    2f96:	bne.n	300c <i2c0_isr+0xf8>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    2f98:	ldrb.w	r3, [r5, #92]	; 0x5c
    2f9c:	ldrb.w	r0, [r5, #93]	; 0x5d
    2fa0:	ldr	r1, [pc, #160]	; (3044 <i2c0_isr+0x130>)
    2fa2:	cmp	r0, r3
    2fa4:	bls.n	3040 <i2c0_isr+0x12c>
				port().D = txBuffer[txBufferIndex++];
    2fa6:	adds	r0, r1, r3
    2fa8:	adds	r3, #1
    2faa:	ldrb.w	r0, [r0, #59]	; 0x3b
    2fae:	strb.w	r3, [r1, #92]	; 0x5c
    2fb2:	strb	r0, [r2, #4]
    2fb4:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    2fb6:	movs	r2, #208	; 0xd0
    2fb8:	strb	r2, [r3, #2]
    2fba:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2fbc:	movs	r2, #2
    2fbe:	strb	r2, [r3, #3]
    2fc0:	b.n	2f6c <i2c0_isr+0x58>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    2fc2:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    2fc6:	ldrb	r3, [r2, #6]
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    2fc8:	ldr	r0, [pc, #120]	; (3044 <i2c0_isr+0x130>)
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    2fca:	orr.w	r3, r3, #32
    2fce:	strb	r3, [r2, #6]
    2fd0:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    2fd2:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    2fd6:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    2fd8:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    2fda:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    2fdc:	bhi.n	2f68 <i2c0_isr+0x54>
    2fde:	ldr	r4, [pc, #104]	; (3048 <i2c0_isr+0x134>)
    2fe0:	ldrb	r4, [r4, #0]
    2fe2:	cmp	r4, #0
    2fe4:	beq.n	2f68 <i2c0_isr+0x54>
			rxBuffer[rxBufferLength++] = data;
    2fe6:	adds	r4, r0, r1
    2fe8:	adds	r1, #1
    2fea:	strb	r2, [r4, #24]
    2fec:	strb.w	r1, [r0, #57]	; 0x39
    2ff0:	b.n	2f68 <i2c0_isr+0x54>
    2ff2:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    2ff4:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    2ff8:	movs	r3, #192	; 0xc0
    2ffa:	strb	r3, [r2, #2]
    2ffc:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    2ffe:	ldr	r2, [pc, #72]	; (3048 <i2c0_isr+0x134>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    3000:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    3002:	movs	r1, #1
    3004:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3006:	movs	r2, #2
    3008:	strb	r2, [r3, #3]
    300a:	b.n	2f6c <i2c0_isr+0x58>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    300c:	movs	r3, #192	; 0xc0
    300e:	strb	r3, [r2, #2]
    3010:	ldr	r3, [r5, #16]
			data = port().D;
    3012:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3014:	movs	r2, #2
    3016:	strb	r2, [r3, #3]
    3018:	b.n	2f6c <i2c0_isr+0x58>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    301a:	movs	r2, #1
				txBuffer[0] = 0;
    301c:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    301e:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    3022:	strb.w	r3, [r5, #59]	; 0x3b
    3026:	b.n	2f52 <i2c0_isr+0x3e>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    3028:	and.w	r3, r3, #223	; 0xdf
    302c:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    302e:	ldr	r3, [r5, #104]	; 0x68
    3030:	cbz	r3, 303c <i2c0_isr+0x128>
			rxBufferIndex = 0;
    3032:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    3036:	ldrb.w	r0, [r5, #57]	; 0x39
    303a:	blx	r3
    303c:	ldr	r2, [r5, #16]
    303e:	b.n	2f86 <i2c0_isr+0x72>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    3040:	strb	r4, [r2, #4]
    3042:	b.n	2fb4 <i2c0_isr+0xa0>
    3044:	.word	0x1fff07b4
    3048:	.word	0x2002035c

0000304c <i2c1_isr>:
void i2c0_isr(void) { Wire.isr(); }
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    304c:	push	{r3, r4, r5, lr}
    304e:	ldr	r5, [pc, #300]	; (317c <i2c1_isr+0x130>)
    3050:	ldr	r2, [r5, #16]
void TwoWire::isr(void)
{
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    3052:	ldrb	r4, [r2, #3]
    3054:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    3056:	lsls	r1, r4, #27
    3058:	bpl.n	30a6 <i2c1_isr+0x5a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    305a:	movs	r3, #16
    305c:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    305e:	lsls	r3, r4, #25
    3060:	bpl.n	30a4 <i2c1_isr+0x58>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    3062:	and.w	r4, r4, #4
    3066:	and.w	r3, r4, #255	; 0xff
    306a:	cmp	r4, #0
    306c:	beq.n	312a <i2c1_isr+0xde>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    306e:	ldr	r1, [pc, #272]	; (3180 <i2c1_isr+0x134>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    3070:	ldr	r2, [r5, #100]	; 0x64
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
			txBufferLength = 0;
    3072:	ldr	r4, [pc, #264]	; (317c <i2c1_isr+0x130>)
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    3074:	movs	r3, #0
    3076:	strb	r3, [r1, #0]
			txBufferLength = 0;
    3078:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    307c:	cmp	r2, #0
    307e:	beq.n	3152 <i2c1_isr+0x106>
				user_onRequest();
    3080:	blx	r2
			}
			if (txBufferLength == 0) {
    3082:	ldrb.w	r3, [r4, #93]	; 0x5d
    3086:	cmp	r3, #0
    3088:	beq.n	3152 <i2c1_isr+0x106>
    308a:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    308c:	movs	r2, #208	; 0xd0
    308e:	strb	r2, [r3, #2]
    3090:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    3092:	ldrb.w	r2, [r5, #59]	; 0x3b
    3096:	strb	r2, [r3, #4]
    3098:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    309a:	movs	r2, #1
    309c:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    30a0:	movs	r2, #2
    30a2:	strb	r2, [r3, #3]
    30a4:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    30a6:	and.w	r3, r4, #64	; 0x40
    30aa:	and.w	r0, r3, #255	; 0xff
    30ae:	cmp	r3, #0
    30b0:	bne.n	3062 <i2c1_isr+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    30b2:	ldrb	r3, [r2, #6]
    30b4:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    30b6:	and.w	r1, r3, #96	; 0x60
    30ba:	cmp	r1, #96	; 0x60
    30bc:	beq.n	3160 <i2c1_isr+0x114>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    30be:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    30c0:	and.w	r3, r3, #16
    30c4:	and.w	r1, r3, #255	; 0xff
    30c8:	cbz	r3, 30fa <i2c1_isr+0xae>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    30ca:	ands.w	r4, r4, #1
    30ce:	bne.n	3144 <i2c1_isr+0xf8>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    30d0:	ldrb.w	r3, [r5, #92]	; 0x5c
    30d4:	ldrb.w	r0, [r5, #93]	; 0x5d
    30d8:	ldr	r1, [pc, #160]	; (317c <i2c1_isr+0x130>)
    30da:	cmp	r0, r3
    30dc:	bls.n	3178 <i2c1_isr+0x12c>
				port().D = txBuffer[txBufferIndex++];
    30de:	adds	r0, r1, r3
    30e0:	adds	r3, #1
    30e2:	ldrb.w	r0, [r0, #59]	; 0x3b
    30e6:	strb.w	r3, [r1, #92]	; 0x5c
    30ea:	strb	r0, [r2, #4]
    30ec:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    30ee:	movs	r2, #208	; 0xd0
    30f0:	strb	r2, [r3, #2]
    30f2:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    30f4:	movs	r2, #2
    30f6:	strb	r2, [r3, #3]
    30f8:	b.n	30a4 <i2c1_isr+0x58>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    30fa:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    30fe:	ldrb	r3, [r2, #6]
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    3100:	ldr	r0, [pc, #120]	; (317c <i2c1_isr+0x130>)
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    3102:	orr.w	r3, r3, #32
    3106:	strb	r3, [r2, #6]
    3108:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    310a:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    310e:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    3110:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    3112:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    3114:	bhi.n	30a0 <i2c1_isr+0x54>
    3116:	ldr	r4, [pc, #104]	; (3180 <i2c1_isr+0x134>)
    3118:	ldrb	r4, [r4, #0]
    311a:	cmp	r4, #0
    311c:	beq.n	30a0 <i2c1_isr+0x54>
			rxBuffer[rxBufferLength++] = data;
    311e:	adds	r4, r0, r1
    3120:	adds	r1, #1
    3122:	strb	r2, [r4, #24]
    3124:	strb.w	r1, [r0, #57]	; 0x39
    3128:	b.n	30a0 <i2c1_isr+0x54>
    312a:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    312c:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    3130:	movs	r3, #192	; 0xc0
    3132:	strb	r3, [r2, #2]
    3134:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    3136:	ldr	r2, [pc, #72]	; (3180 <i2c1_isr+0x134>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    3138:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    313a:	movs	r1, #1
    313c:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    313e:	movs	r2, #2
    3140:	strb	r2, [r3, #3]
    3142:	b.n	30a4 <i2c1_isr+0x58>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    3144:	movs	r3, #192	; 0xc0
    3146:	strb	r3, [r2, #2]
    3148:	ldr	r3, [r5, #16]
			data = port().D;
    314a:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    314c:	movs	r2, #2
    314e:	strb	r2, [r3, #3]
    3150:	b.n	30a4 <i2c1_isr+0x58>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    3152:	movs	r2, #1
				txBuffer[0] = 0;
    3154:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    3156:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    315a:	strb.w	r3, [r5, #59]	; 0x3b
    315e:	b.n	308a <i2c1_isr+0x3e>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    3160:	and.w	r3, r3, #223	; 0xdf
    3164:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    3166:	ldr	r3, [r5, #104]	; 0x68
    3168:	cbz	r3, 3174 <i2c1_isr+0x128>
			rxBufferIndex = 0;
    316a:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    316e:	ldrb.w	r0, [r5, #57]	; 0x39
    3172:	blx	r3
    3174:	ldr	r2, [r5, #16]
    3176:	b.n	30be <i2c1_isr+0x72>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    3178:	strb	r4, [r2, #4]
    317a:	b.n	30ec <i2c1_isr+0xa0>
    317c:	.word	0x1fff0820
    3180:	.word	0x2002035c

00003184 <i2c2_isr>:
void i2c1_isr(void) { Wire1.isr(); }
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    3184:	push	{r3, r4, r5, lr}
    3186:	ldr	r5, [pc, #300]	; (32b4 <i2c2_isr+0x130>)
    3188:	ldr	r2, [r5, #16]
void TwoWire::isr(void)
{
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    318a:	ldrb	r4, [r2, #3]
    318c:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    318e:	lsls	r1, r4, #27
    3190:	bpl.n	31de <i2c2_isr+0x5a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    3192:	movs	r3, #16
    3194:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    3196:	lsls	r3, r4, #25
    3198:	bpl.n	31dc <i2c2_isr+0x58>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    319a:	and.w	r4, r4, #4
    319e:	and.w	r3, r4, #255	; 0xff
    31a2:	cmp	r4, #0
    31a4:	beq.n	3262 <i2c2_isr+0xde>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    31a6:	ldr	r1, [pc, #272]	; (32b8 <i2c2_isr+0x134>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    31a8:	ldr	r2, [r5, #100]	; 0x64
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
			txBufferLength = 0;
    31aa:	ldr	r4, [pc, #264]	; (32b4 <i2c2_isr+0x130>)
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    31ac:	movs	r3, #0
    31ae:	strb	r3, [r1, #0]
			txBufferLength = 0;
    31b0:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    31b4:	cmp	r2, #0
    31b6:	beq.n	328a <i2c2_isr+0x106>
				user_onRequest();
    31b8:	blx	r2
			}
			if (txBufferLength == 0) {
    31ba:	ldrb.w	r3, [r4, #93]	; 0x5d
    31be:	cmp	r3, #0
    31c0:	beq.n	328a <i2c2_isr+0x106>
    31c2:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    31c4:	movs	r2, #208	; 0xd0
    31c6:	strb	r2, [r3, #2]
    31c8:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    31ca:	ldrb.w	r2, [r5, #59]	; 0x3b
    31ce:	strb	r2, [r3, #4]
    31d0:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    31d2:	movs	r2, #1
    31d4:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    31d8:	movs	r2, #2
    31da:	strb	r2, [r3, #3]
    31dc:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    31de:	and.w	r3, r4, #64	; 0x40
    31e2:	and.w	r0, r3, #255	; 0xff
    31e6:	cmp	r3, #0
    31e8:	bne.n	319a <i2c2_isr+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    31ea:	ldrb	r3, [r2, #6]
    31ec:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    31ee:	and.w	r1, r3, #96	; 0x60
    31f2:	cmp	r1, #96	; 0x60
    31f4:	beq.n	3298 <i2c2_isr+0x114>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    31f6:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    31f8:	and.w	r3, r3, #16
    31fc:	and.w	r1, r3, #255	; 0xff
    3200:	cbz	r3, 3232 <i2c2_isr+0xae>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    3202:	ands.w	r4, r4, #1
    3206:	bne.n	327c <i2c2_isr+0xf8>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    3208:	ldrb.w	r3, [r5, #92]	; 0x5c
    320c:	ldrb.w	r0, [r5, #93]	; 0x5d
    3210:	ldr	r1, [pc, #160]	; (32b4 <i2c2_isr+0x130>)
    3212:	cmp	r0, r3
    3214:	bls.n	32b0 <i2c2_isr+0x12c>
				port().D = txBuffer[txBufferIndex++];
    3216:	adds	r0, r1, r3
    3218:	adds	r3, #1
    321a:	ldrb.w	r0, [r0, #59]	; 0x3b
    321e:	strb.w	r3, [r1, #92]	; 0x5c
    3222:	strb	r0, [r2, #4]
    3224:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    3226:	movs	r2, #208	; 0xd0
    3228:	strb	r2, [r3, #2]
    322a:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    322c:	movs	r2, #2
    322e:	strb	r2, [r3, #3]
    3230:	b.n	31dc <i2c2_isr+0x58>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    3232:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    3236:	ldrb	r3, [r2, #6]
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    3238:	ldr	r0, [pc, #120]	; (32b4 <i2c2_isr+0x130>)
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    323a:	orr.w	r3, r3, #32
    323e:	strb	r3, [r2, #6]
    3240:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    3242:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    3246:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    3248:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    324a:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    324c:	bhi.n	31d8 <i2c2_isr+0x54>
    324e:	ldr	r4, [pc, #104]	; (32b8 <i2c2_isr+0x134>)
    3250:	ldrb	r4, [r4, #0]
    3252:	cmp	r4, #0
    3254:	beq.n	31d8 <i2c2_isr+0x54>
			rxBuffer[rxBufferLength++] = data;
    3256:	adds	r4, r0, r1
    3258:	adds	r1, #1
    325a:	strb	r2, [r4, #24]
    325c:	strb.w	r1, [r0, #57]	; 0x39
    3260:	b.n	31d8 <i2c2_isr+0x54>
    3262:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    3264:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    3268:	movs	r3, #192	; 0xc0
    326a:	strb	r3, [r2, #2]
    326c:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    326e:	ldr	r2, [pc, #72]	; (32b8 <i2c2_isr+0x134>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    3270:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    3272:	movs	r1, #1
    3274:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3276:	movs	r2, #2
    3278:	strb	r2, [r3, #3]
    327a:	b.n	31dc <i2c2_isr+0x58>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    327c:	movs	r3, #192	; 0xc0
    327e:	strb	r3, [r2, #2]
    3280:	ldr	r3, [r5, #16]
			data = port().D;
    3282:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3284:	movs	r2, #2
    3286:	strb	r2, [r3, #3]
    3288:	b.n	31dc <i2c2_isr+0x58>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    328a:	movs	r2, #1
				txBuffer[0] = 0;
    328c:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    328e:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    3292:	strb.w	r3, [r5, #59]	; 0x3b
    3296:	b.n	31c2 <i2c2_isr+0x3e>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    3298:	and.w	r3, r3, #223	; 0xdf
    329c:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    329e:	ldr	r3, [r5, #104]	; 0x68
    32a0:	cbz	r3, 32ac <i2c2_isr+0x128>
			rxBufferIndex = 0;
    32a2:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    32a6:	ldrb.w	r0, [r5, #57]	; 0x39
    32aa:	blx	r3
    32ac:	ldr	r2, [r5, #16]
    32ae:	b.n	31f6 <i2c2_isr+0x72>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    32b0:	strb	r4, [r2, #4]
    32b2:	b.n	3224 <i2c2_isr+0xa0>
    32b4:	.word	0x1fff0748
    32b8:	.word	0x2002035c

000032bc <FsFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//-----------------------------------------------------------------------------
bool FsFile::close() {
    32bc:	push	{r4, lr}
    32be:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    32c0:	ldr	r0, [r0, #72]	; 0x48
    32c2:	cbz	r0, 32d0 <FsFile::close()+0x14>
    32c4:	bl	5120 <FatFile::close()>
    32c8:	cbz	r0, 32d0 <FsFile::close()+0x14>
    m_fFile = nullptr;
    32ca:	movs	r3, #0
    32cc:	str	r3, [r4, #72]	; 0x48
    return true;
    32ce:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    32d0:	ldr	r0, [r4, #76]	; 0x4c
    32d2:	cbz	r0, 32e0 <FsFile::close()+0x24>
    32d4:	bl	3474 <ExFatFile::close()>
    32d8:	cbz	r0, 32e0 <FsFile::close()+0x24>
    m_xFile = nullptr;
    32da:	movs	r3, #0
    32dc:	str	r3, [r4, #76]	; 0x4c
    32de:	pop	{r4, pc}
    return true;
  }
  return false;
    32e0:	movs	r0, #0
}
    32e2:	pop	{r4, pc}

000032e4 <FsFile::open(FsVolume*, char const*, unsigned char)>:
  }
  return false;
}
//-----------------------------------------------------------------------------
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
  if (!vol) {
    32e4:	cmp	r1, #0
    32e6:	beq.n	337e <FsFile::open(FsVolume*, char const*, unsigned char)+0x9a>
    m_xFile = nullptr;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
    32e8:	push	{r3, r4, r5, r6, r7, lr}
    32ea:	mov	r4, r0
  }
  return *this;
}
//-----------------------------------------------------------------------------
bool FsFile::close() {
  if (m_fFile && m_fFile->close()) {
    32ec:	ldr	r0, [r0, #72]	; 0x48
    32ee:	mov	r5, r1
    32f0:	mov	r7, r3
    32f2:	mov	r6, r2
    32f4:	cbz	r0, 332c <FsFile::open(FsVolume*, char const*, unsigned char)+0x48>
    32f6:	bl	5120 <FatFile::close()>
    32fa:	cbz	r0, 332c <FsFile::open(FsVolume*, char const*, unsigned char)+0x48>
    m_fFile = nullptr;
    32fc:	movs	r3, #0
    32fe:	str	r3, [r4, #72]	; 0x48
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    3300:	ldr.w	r3, [r5, #1144]	; 0x478
    3304:	cbz	r3, 3346 <FsFile::open(FsVolume*, char const*, unsigned char)+0x62>
    m_fFile = new (m_fileMem) FatFile;
    3306:	add.w	r1, r4, #16
    330a:	movs	r0, #36	; 0x24
    330c:	bl	3470 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    3310:	movs	r3, #0
    3312:	strb	r3, [r0, #0]
    3314:	strb	r3, [r0, #1]
    3316:	strb	r3, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    3318:	mov	r2, r6
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    331a:	str	r0, [r4, #72]	; 0x48
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    331c:	mov	r3, r7
    331e:	ldr.w	r1, [r5, #1144]	; 0x478
    3322:	bl	5330 <FatFile::open(FatVolume*, char const*, unsigned char)>
    3326:	cbz	r0, 337a <FsFile::open(FsVolume*, char const*, unsigned char)+0x96>
      return true;
    3328:	movs	r0, #1
    332a:	pop	{r3, r4, r5, r6, r7, pc}
bool FsFile::close() {
  if (m_fFile && m_fFile->close()) {
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    332c:	ldr	r0, [r4, #76]	; 0x4c
    332e:	cmp	r0, #0
    3330:	beq.n	3300 <FsFile::open(FsVolume*, char const*, unsigned char)+0x1c>
    3332:	bl	3474 <ExFatFile::close()>
    3336:	cmp	r0, #0
    3338:	beq.n	3300 <FsFile::open(FsVolume*, char const*, unsigned char)+0x1c>
    m_xFile = nullptr;
    333a:	movs	r3, #0
    333c:	str	r3, [r4, #76]	; 0x4c
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    333e:	ldr.w	r3, [r5, #1144]	; 0x478
    3342:	cmp	r3, #0
    3344:	bne.n	3306 <FsFile::open(FsVolume*, char const*, unsigned char)+0x22>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    3346:	ldr.w	r3, [r5, #1148]	; 0x47c
    334a:	cbz	r3, 3382 <FsFile::open(FsVolume*, char const*, unsigned char)+0x9e>
    m_xFile = new (m_fileMem) ExFatFile;
    334c:	add.w	r1, r4, #16
    3350:	movs	r0, #56	; 0x38
    3352:	bl	3470 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    3356:	movs	r3, #0
    3358:	strb.w	r3, [r0, #49]	; 0x31
    335c:	strb.w	r3, [r0, #50]	; 0x32
    3360:	strb.w	r3, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    3364:	ldr.w	r1, [r5, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    3368:	str	r0, [r4, #76]	; 0x4c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    336a:	mov	r3, r7
    336c:	mov	r2, r6
    336e:	bl	3d0c <ExFatFile::open(ExFatVolume*, char const*, int)>
    3372:	cmp	r0, #0
    3374:	bne.n	3328 <FsFile::open(FsVolume*, char const*, unsigned char)+0x44>
      return true;
    }
    m_xFile = nullptr;
    3376:	str	r0, [r4, #76]	; 0x4c
  }
  return false;
}
    3378:	pop	{r3, r4, r5, r6, r7, pc}
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
    337a:	str	r0, [r4, #72]	; 0x48
    return false;
    337c:	pop	{r3, r4, r5, r6, r7, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
  if (!vol) {
    return false;
    337e:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    3380:	bx	lr
  return false;
}
//-----------------------------------------------------------------------------
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
  if (!vol) {
    return false;
    3382:	movs	r0, #0
    3384:	pop	{r3, r4, r5, r6, r7, pc}
    3386:	nop

00003388 <FsVolume::begin(SdCardInterface*)>:
 */
#include "FsVolume.h"
#include "FsFile.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    3388:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    338a:	movs	r6, #0
 */
#include "FsVolume.h"
#include "FsFile.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    338c:	mov	r5, r0
  m_blockDev = blockDev;
    338e:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    3392:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    3396:	mov	r1, r0
    3398:	mov.w	r0, #1144	; 0x478
    339c:	bl	3470 <operator new(unsigned int, unsigned long*)>
    33a0:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    33a2:	str	r6, [r0, #4]
    invalidate();
    33a4:	bl	3d1c <FsCache::invalidate()>
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    33a8:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    33ac:	add.w	r0, r4, #524	; 0x20c
    33b0:	bl	3d1c <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    33b4:	strb.w	r6, [r4, #1084]	; 0x43c
    33b8:	strb.w	r6, [r4, #1137]	; 0x471
    33bc:	strb.w	r6, [r4, #1138]	; 0x472
    33c0:	strb.w	r6, [r4, #1139]	; 0x473
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    33c4:	ldr.w	r6, [r5, #1152]	; 0x480
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    33c8:	str.w	r4, [r5, #1148]	; 0x47c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 0) {
    if (!(part ? init(dev, part) : init(dev, 1) || init(dev, 0))) {
    33cc:	mov	r1, r6
    33ce:	mov	r0, r4
    33d0:	movs	r2, #1
    33d2:	bl	3dd8 <ExFatPartition::init(SdCardInterface*, unsigned char)>
    33d6:	cbz	r0, 33f6 <FsVolume::begin(SdCardInterface*)+0x6e>
  /**
   * Set volume working directory to root.
   * \return true for success else false.
   */
  bool chdir() {
    m_vwd.close();
    33d8:	add.w	r6, r4, #1088	; 0x440
    33dc:	mov	r0, r6
    33de:	bl	3474 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    33e2:	mov	r1, r4
    33e4:	mov	r0, r6
    33e6:	bl	3544 <ExFatFile::openRoot(ExFatVolume*)>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    33ea:	cbz	r0, 3404 <FsVolume::begin(SdCardInterface*)+0x7c>
    33ec:	ldr	r2, [pc, #124]	; (346c <FsVolume::begin(SdCardInterface*)+0xe4>)
  return false;

 done:
  m_cwv = this;

  return true;
    33ee:	mov	r3, r5
    33f0:	movs	r0, #1
    33f2:	str	r3, [r2, #0]
}
    33f4:	pop	{r4, r5, r6, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 0) {
    if (!(part ? init(dev, part) : init(dev, 1) || init(dev, 0))) {
    33f6:	mov	r2, r0
    33f8:	mov	r1, r6
    33fa:	mov	r0, r4
    33fc:	bl	3dd8 <ExFatPartition::init(SdCardInterface*, unsigned char)>
    3400:	cmp	r0, #0
    3402:	bne.n	33d8 <FsVolume::begin(SdCardInterface*)+0x50>
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    3404:	movs	r6, #0
    3406:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    340a:	mov	r1, r5
    340c:	mov.w	r0, #1120	; 0x460
    3410:	bl	3470 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    3414:	strb	r6, [r0, #7]
    3416:	strb.w	r6, [r0, #1084]	; 0x43c
    341a:	strb.w	r6, [r0, #1085]	; 0x43d
    341e:	strb.w	r6, [r0, #1086]	; 0x43e
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    3422:	ldr.w	r6, [r5, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
    3426:	str.w	r0, [r5, #1144]	; 0x478
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 0) {
    if (!(part ? init(dev, part) : init(dev, 1) || init(dev, 0))) {
    342a:	movs	r2, #1
    342c:	mov	r1, r6
    342e:	mov	r4, r0
    3430:	bl	651c <FatPartition::init(SdCardInterface*, unsigned char)>
    3434:	cbz	r0, 345c <FsVolume::begin(SdCardInterface*)+0xd4>
  /**
   * Set volume working directory to root.
   * \return true for success else false.
   */
  bool chdir() {
    m_vwd.close();
    3436:	addw	r6, r4, #1084	; 0x43c
    343a:	mov	r0, r6
    343c:	bl	5120 <FatFile::close()>
    return m_vwd.openRoot(this);
    3440:	mov	r1, r4
    3442:	mov	r0, r6
    3444:	bl	5340 <FatFile::openRoot(FatVolume*)>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    3448:	cmp	r0, #0
    344a:	bne.n	33ec <FsVolume::begin(SdCardInterface*)+0x64>
    goto done;
  }
  m_cwv = nullptr;
  m_fVol = nullptr;
    344c:	movs	r2, #0
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    344e:	mov	r3, r2
  m_fVol = nullptr;
    3450:	str.w	r2, [r5, #1144]	; 0x478
  return false;
    3454:	mov	r0, r2
    3456:	ldr	r2, [pc, #20]	; (346c <FsVolume::begin(SdCardInterface*)+0xe4>)
    3458:	str	r3, [r2, #0]

 done:
  m_cwv = this;

  return true;
}
    345a:	pop	{r4, r5, r6, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 0) {
    if (!(part ? init(dev, part) : init(dev, 1) || init(dev, 0))) {
    345c:	mov	r2, r0
    345e:	mov	r1, r6
    3460:	mov	r0, r4
    3462:	bl	651c <FatPartition::init(SdCardInterface*, unsigned char)>
    3466:	cmp	r0, #0
    3468:	bne.n	3436 <FsVolume::begin(SdCardInterface*)+0xae>
    346a:	b.n	344c <FsVolume::begin(SdCardInterface*)+0xc4>
    346c:	.word	0x20020360

00003470 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    3470:	mov	r0, r1
    3472:	bx	lr

00003474 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    3474:	push	{r4, lr}
    3476:	mov	r4, r0
  bool rtn = sync();
    3478:	bl	49e8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    347c:	movs	r3, #0
    347e:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3482:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    3486:	pop	{r4, pc}

00003488 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    3488:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    348a:	ldrb	r0, [r1, #0]
    348c:	cmp	r0, #32
    348e:	bne.n	3498 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    3490:	ldrb.w	r0, [r1, #1]!
    3494:	cmp	r0, #32
    3496:	beq.n	3490 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    3498:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    349a:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    349c:	cmp	r0, #0
    349e:	beq.n	353a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb2>
    34a0:	cmp	r0, #47	; 0x2f
    34a2:	beq.n	34fc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    34a4:	cmp	r0, #92	; 0x5c
    34a6:	beq.n	34ea <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    34a8:	sub.w	r4, r0, #34	; 0x22
    34ac:	uxtb	r4, r4
    34ae:	cmp	r4, #29
    34b0:	bls.n	34ee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    34b2:	ldr.w	lr, [pc, #140]	; 3540 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb8>
    34b6:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    34b8:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    34ba:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    34bc:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    34c0:	mov	r7, r6
    34c2:	beq.n	34ea <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    34c4:	cmp	r5, #94	; 0x5e
    34c6:	bhi.n	34ea <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    34c8:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    34cc:	sub.w	r5, r0, #34	; 0x22
    34d0:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    34d2:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    34d4:	cbz	r0, 352c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa4>
    34d6:	cmp	r0, #47	; 0x2f
    34d8:	beq.n	34fe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    34da:	cmp	r0, #92	; 0x5c
    34dc:	lsr.w	r7, lr, r5
    34e0:	beq.n	34ea <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    34e2:	cmp	r5, #29
    34e4:	bhi.n	34ba <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    34e6:	lsls	r5, r7, #31
    34e8:	bpl.n	34ba <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    34ea:	movs	r0, #0
    34ec:	pop	{r4, r5, r6, r7, pc}
    34ee:	ldr	r5, [pc, #80]	; (3540 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb8>)
    34f0:	lsr.w	r4, r5, r4
    34f4:	lsls	r6, r4, #31
    34f6:	bpl.n	34b2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    34f8:	movs	r0, #0
    34fa:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    34fc:	movs	r4, #0
    34fe:	add	r1, r4
    3500:	mov	r0, r1
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    3502:	mov	r6, r0
    3504:	ldrb.w	r5, [r0], #1
    3508:	cmp	r5, #32
    350a:	beq.n	3502 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7a>
    350c:	cmp	r5, #47	; 0x2f
    350e:	beq.n	3502 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7a>
  *ptr = &path[end];
    3510:	str	r6, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    3512:	cbz	r4, 3524 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>
    c = path[len - 1];
    3514:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    3518:	cmp	r3, #46	; 0x2e
    351a:	beq.n	3520 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>
    351c:	cmp	r3, #32
    351e:	bne.n	3532 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xaa>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    3520:	subs	r4, #1
    3522:	bne.n	3514 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    3524:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    3526:	str	r0, [r2, #0]
  return true;
    3528:	movs	r0, #1
    352a:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    352c:	str	r7, [r3, #0]
    352e:	add	r1, r4
    3530:	b.n	3514 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    3532:	cmp	r4, #255	; 0xff
    3534:	ble.n	3524 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3536:	movs	r0, #0
    3538:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    353a:	str	r1, [r3, #0]
    353c:	b.n	3526 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9e>
    353e:	nop
    3540:	.word	0x35000101

00003544 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    3544:	ldrb.w	r2, [r0, #49]	; 0x31
    3548:	cbz	r2, 354e <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    354a:	movs	r0, #0
    354c:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    354e:	push	{r3, r4, r5, lr}
    3550:	mov	r4, r0
    3552:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3554:	mov	r1, r2
    3556:	movs	r2, #56	; 0x38
    3558:	bl	cc4c <memset>
  m_attributes = FILE_ATTR_ROOT;
    355c:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    355e:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3560:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3564:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    3568:	str	r5, [r4, #32]
    356a:	pop	{r3, r4, r5, pc}

0000356c <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    356c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3570:	ldrb.w	r3, [r0, #51]	; 0x33
    3574:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3576:	lsls	r0, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3578:	sub	sp, #8
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    357a:	bpl.w	36e2 <ExFatFile::read(void*, unsigned int)+0x176>
    357e:	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3580:	lsls	r1, r3, #25
    3582:	mov	r6, r2
    3584:	bpl.w	36f8 <ExFatFile::read(void*, unsigned int)+0x18c>
    if ((m_curPosition + count) > m_validLength) {
    3588:	ldrd	r0, r1, [r4]
    358c:	ldrd	r2, r3, [r4, #16]
    3590:	adds.w	r8, r0, r6
    3594:	adc.w	r9, r1, #0
    3598:	cmp	r3, r9
    359a:	it	eq
    359c:	cmpeq	r2, r8
    359e:	bcc.w	3704 <ExFatFile::read(void*, unsigned int)+0x198>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    35a2:	cmp	r6, #0
    35a4:	beq.w	3708 <ExFatFile::read(void*, unsigned int)+0x19c>
    35a8:	mov	r9, r4
    35aa:	ldrd	r2, r3, [r9], #24
    35ae:	mov	r8, r6
    35b0:	b.n	365e <ExFatFile::read(void*, unsigned int)+0xf2>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    35b2:	orrs	r3, r2
    35b4:	bne.n	369a <ExFatFile::read(void*, unsigned int)+0x12e>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    35b6:	ldrb.w	r3, [r4, #49]	; 0x31
    35ba:	lsls	r3, r3, #25
    35bc:	ite	mi
    35be:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    35c2:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    35c4:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    35c6:	ldrb.w	lr, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    35ca:	ldr.w	r3, [r0, #1060]	; 0x424
    35ce:	subs	r1, #2
    35d0:	lsrs	r7, r7, #9
    35d2:	lsl.w	r2, r1, lr
    35d6:	adds	r1, r7, r3
    35d8:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    35da:	cmp.w	sl, #0
    35de:	bne.n	3672 <ExFatFile::read(void*, unsigned int)+0x106>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    35e0:	cmp.w	r8, #512	; 0x200
    35e4:	bcc.n	3672 <ExFatFile::read(void*, unsigned int)+0x106>
    35e6:	ldr.w	r3, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    35ea:	cmp	r1, r3
    35ec:	beq.n	3672 <ExFatFile::read(void*, unsigned int)+0x106>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    35ee:	cmp.w	r8, #1024	; 0x400
    35f2:	bcc.n	36a8 <ExFatFile::read(void*, unsigned int)+0x13c>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isContiguous()) {
    35f4:	ldrb.w	r2, [r4, #51]	; 0x33
    35f8:	lsls	r2, r2, #25
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    35fa:	mov.w	sl, r8, lsr #9
      if (!isContiguous()) {
    35fe:	bmi.n	3610 <ExFatFile::read(void*, unsigned int)+0xa4>
        uint32_t maxNs = m_vol->sectorsPerCluster()
                         - (clusterOffset >> m_vol->bytesPerSectorShift());
    3600:	movs	r2, #1
    3602:	lsl.w	lr, r2, lr
    3606:	rsb	r7, r7, lr
    360a:	cmp	sl, r7
    360c:	it	cs
    360e:	movcs	sl, r7
          ns = maxNs;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (m_vol->dataCacheSector() <= sector
          && m_vol->dataCacheSector() < (sector + ns)) {
    3610:	cmp	r1, r3
                         - (clusterOffset >> m_vol->bytesPerSectorShift());
        if (ns > maxNs) {
          ns = maxNs;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    3612:	mov.w	r7, sl, lsl #9
      if (m_vol->dataCacheSector() <= sector
          && m_vol->dataCacheSector() < (sector + ns)) {
    3616:	bcc.n	3632 <ExFatFile::read(void*, unsigned int)+0xc6>
    3618:	add.w	r2, sl, r1
    361c:	cmp	r2, r3
    361e:	bls.n	3632 <ExFatFile::read(void*, unsigned int)+0xc6>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    3620:	add.w	r0, r0, #524	; 0x20c
    3624:	str	r1, [sp, #4]
    3626:	bl	3dac <FsCache::sync()>
        // flush cache if a sector is in the cache
        if (!m_vol->dataCacheSync()) {
    362a:	cmp	r0, #0
    362c:	beq.n	36e2 <ExFatFile::read(void*, unsigned int)+0x176>
    362e:	ldr	r0, [r4, #32]
    3630:	ldr	r1, [sp, #4]
    3632:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    3636:	ldr	r2, [r0, #0]
    3638:	mov	r3, sl
    363a:	ldr.w	sl, [r2, #12]
    363e:	mov	r2, r5
    3640:	blx	sl
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    3642:	cmp	r0, #0
    3644:	beq.n	36e2 <ExFatFile::read(void*, unsigned int)+0x176>
    3646:	mov	r0, r7
    3648:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    364a:	ldrd	r2, r3, [r4]
    364e:	adds	r2, r2, r0
    3650:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3652:	subs.w	r8, r8, r7
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    3656:	add	r5, r7
    m_curPosition += n;
    3658:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    365c:	beq.n	3708 <ExFatFile::read(void*, unsigned int)+0x19c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    365e:	ldr	r0, [r4, #32]
    3660:	ldr.w	r7, [r0, #1072]	; 0x430
    3664:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3666:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    366a:	cmp	r7, #0
    366c:	beq.n	35b2 <ExFatFile::read(void*, unsigned int)+0x46>
    366e:	ldr	r1, [r4, #24]
    3670:	b.n	35c6 <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    3672:	add.w	r0, r0, #524	; 0x20c
    3676:	movs	r2, #0
    3678:	bl	3d28 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    367c:	cbz	r0, 36e2 <ExFatFile::read(void*, unsigned int)+0x176>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    367e:	rsb	r7, sl, #512	; 0x200
    3682:	cmp	r7, r8
    3684:	it	cs
    3686:	movcs	r7, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    3688:	add.w	r1, r0, sl
    368c:	mov	r2, r7
    368e:	mov	r0, r5
    3690:	bl	94c8 <memcpy>
    3694:	mov	r0, r7
    3696:	movs	r1, #0
    3698:	b.n	364a <ExFatFile::read(void*, unsigned int)+0xde>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    369a:	ldrb.w	r3, [r4, #51]	; 0x33
    369e:	lsls	r1, r3, #25
    36a0:	bpl.n	36c2 <ExFatFile::read(void*, unsigned int)+0x156>
        m_curCluster++;
    36a2:	ldr	r1, [r4, #24]
    36a4:	adds	r1, #1
    36a6:	b.n	35c4 <ExFatFile::read(void*, unsigned int)+0x58>
    36a8:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    36ac:	ldr	r3, [r0, #0]
    36ae:	mov	r2, r5
    36b0:	ldr	r3, [r3, #8]
    36b2:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    36b4:	cbz	r0, 36e2 <ExFatFile::read(void*, unsigned int)+0x176>
    36b6:	mov.w	r0, #512	; 0x200
    36ba:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    36bc:	mov.w	r7, #512	; 0x200
    36c0:	b.n	364a <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    36c2:	mov	r2, r9
    36c4:	ldr	r1, [r4, #24]
    36c6:	bl	4380 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    36ca:	sxtb	r0, r0
        if (fg < 0) {
    36cc:	cmp	r0, #0
    36ce:	blt.n	36e2 <ExFatFile::read(void*, unsigned int)+0x176>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    36d0:	beq.n	36d8 <ExFatFile::read(void*, unsigned int)+0x16c>
    36d2:	ldr	r0, [r4, #32]
    36d4:	ldr	r1, [r4, #24]
    36d6:	b.n	35c6 <ExFatFile::read(void*, unsigned int)+0x5a>
          // EOF if directory.
          if (isDir()) {
    36d8:	ldrb.w	r3, [r4, #49]	; 0x31
    36dc:	tst.w	r3, #80	; 0x50
    36e0:	bne.n	370c <ExFatFile::read(void*, unsigned int)+0x1a0>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    36e2:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    36e6:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    36ea:	orr.w	r3, r3, #2
    36ee:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    36f2:	add	sp, #8
    36f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    36f8:	ldrb.w	r3, [r4, #49]	; 0x31
    36fc:	lsls	r2, r3, #28
    36fe:	bmi.w	3588 <ExFatFile::read(void*, unsigned int)+0x1c>
    3702:	b.n	35a2 <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    3704:	subs	r6, r2, r0
    3706:	b.n	35a2 <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3708:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    370c:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    3710:	add	sp, #8
    3712:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3716:	nop

00003718 <ExFatFile::peek()>:
 fail:
  *name = 0;
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    3718:	push	{r4, r5, r6, r7, lr}
    371a:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    371c:	movs	r2, #1
    371e:	add.w	r1, sp, #7
    3722:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    3724:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    3728:	ldr	r5, [r0, #24]
    372a:	bl	356c <ExFatFile::read(void*, unsigned int)>
    372e:	cmp	r0, #1
    3730:	it	eq
    3732:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    3736:	str	r5, [r4, #24]
    3738:	it	ne
    373a:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    373e:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    3742:	add	sp, #12
    3744:	pop	{r4, r5, r6, r7, pc}
    3746:	nop

00003748 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3748:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    374c:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3750:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3752:	sub	sp, #12
    3754:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3756:	cmp.w	lr, #0
    375a:	beq.n	3794 <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    375c:	ldrd	r0, r1, [r0]
    3760:	cmp	r1, r3
    3762:	it	eq
    3764:	cmpeq	r0, r2
    3766:	mov	r6, r2
    3768:	mov	r7, r3
    376a:	beq.n	37e4 <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    376c:	orrs.w	r3, r6, r7
    3770:	bne.n	3782 <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    3772:	movs	r3, #0
    3774:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    3776:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    3778:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    377c:	add	sp, #12
    377e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    3782:	tst.w	lr, #8
    3786:	beq.n	379e <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    3788:	ldrd	r2, r3, [r4, #16]
    378c:	cmp	r3, r7
    378e:	it	eq
    3790:	cmpeq	r2, r6
    3792:	bcs.n	379e <ExFatFile::seekSet(unsigned long long)+0x56>
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    3794:	str	r5, [r4, #24]
  return false;
    3796:	movs	r0, #0
}
    3798:	add	sp, #12
    379a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    379e:	ldr	r3, [r4, #32]
    37a0:	str	r3, [sp, #4]
    37a2:	ldrb.w	ip, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    37a6:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    37aa:	add.w	ip, ip, #9
    37ae:	uxtb.w	ip, ip
    37b2:	adds.w	r2, r6, #4294967295
    37b6:	adc.w	r3, r7, #4294967295
    37ba:	rsb	r8, ip, #32
    37be:	lsl.w	fp, r3, r8
    37c2:	lsr.w	r2, r2, ip
    37c6:	orr.w	r2, r2, fp
    37ca:	sub.w	fp, ip, #32
    37ce:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    37d2:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    37d6:	orr.w	r2, r2, r3
  if (isContiguous()) {
    37da:	beq.n	37e8 <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    37dc:	ldr	r3, [r4, #28]
    37de:	add	r2, r3
    37e0:	str	r2, [r4, #24]
    goto done;
    37e2:	b.n	3776 <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    37e4:	movs	r0, #1
    37e6:	b.n	3798 <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    37e8:	adds.w	r9, r0, #4294967295
    37ec:	adc.w	sl, r1, #4294967295
    37f0:	lsr.w	ip, r9, ip
    37f4:	lsl.w	r8, sl, r8
    37f8:	orr.w	ip, ip, r8
    37fc:	lsr.w	fp, sl, fp
    3800:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    3804:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3806:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    3808:	bcs.n	383a <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    380a:	tst.w	lr, #64	; 0x40
    380e:	itet	ne
    3810:	ldrne	r3, [sp, #4]
    3812:	ldreq	r3, [r4, #28]
    3814:	ldrne.w	r3, [r3, #1068]	; 0x42c
    3818:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    381a:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    381c:	add.w	r9, r4, #24
    3820:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    3822:	cmp.w	r8, #0
    3826:	beq.n	3776 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3828:	ldr	r1, [r4, #24]
    382a:	ldr	r0, [r4, #32]
    382c:	bl	4380 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3830:	add.w	r8, r8, #4294967295
    3834:	cmp	r0, #0
    3836:	bne.n	3820 <ExFatFile::seekSet(unsigned long long)+0xd8>
    3838:	b.n	3794 <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    383a:	orrs.w	r3, r0, r1
    383e:	beq.n	380a <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    3840:	rsb	r2, ip, r2
    3844:	b.n	381a <ExFatFile::seekSet(unsigned long long)+0xd2>
    3846:	nop

00003848 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, uint8_t oflag) {
    3848:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    384c:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    384e:	ldrb.w	r4, [r0, #49]	; 0x31
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, uint8_t oflag) {
    3852:	str	r2, [sp, #0]
    3854:	mov	r5, r1
    3856:	ldrb.w	r1, [sp, #112]	; 0x70
    385a:	str	r1, [sp, #8]
    385c:	mov	r6, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    385e:	cbnz	r4, 386c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    3860:	mov	sl, r3
    3862:	ldrb.w	r3, [r5, #49]	; 0x31
    3866:	tst.w	r3, #80	; 0x50
    386a:	bne.n	387c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x34>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    386c:	movs	r0, #0
    386e:	strb.w	r0, [r6, #49]	; 0x31
  m_flags = 0;
    3872:	strb.w	r0, [r6, #51]	; 0x33
  return false;
}
    3876:	add	sp, #76	; 0x4c
    3878:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    387c:	mov	r3, r2
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (name) {
    387e:	cmp	r2, #0
    3880:	beq.w	3ab2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x26a>
    3884:	mov	r0, r3
    nameHash = exFatHashName(name, nameLength, 0);
    3886:	mov	r2, r4
    3888:	mov	r1, sl
    388a:	bl	4760 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    388e:	ldrb.w	r3, [r5, #49]	; 0x31
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    3892:	str	r0, [sp, #16]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3894:	cmp	r3, #0
    3896:	bne.w	3a9c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x254>
  }
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    389a:	ldr	r2, [pc, #540]	; (3ab8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x270>)
    389c:	add.w	r3, sl, #14
    38a0:	smull	r1, r2, r2, r3
    38a4:	add	r2, r3
    38a6:	asrs	r3, r3, #31
    38a8:	rsb	r3, r3, r2, asr #3
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
    38ac:	ldr	r2, [sp, #8]
  }
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    38ae:	uxtb	r3, r3
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
    38b0:	and.w	r2, r2, #7
  }
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    38b4:	str	r3, [sp, #20]
    38b6:	adds	r3, #2
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    38b8:	mov.w	r9, #0
  }
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    38bc:	uxtb.w	fp, r3

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
    38c0:	orr.w	r3, r2, #64	; 0x40
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
    38c4:	str	r2, [sp, #4]

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    38c6:	mov	r4, r9
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, uint8_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    38c8:	mov	r7, r9

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
    38ca:	str	r3, [sp, #12]
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    38cc:	movs	r2, #32
    38ce:	add	r1, sp, #40	; 0x28
    38d0:	mov	r0, r5
    38d2:	bl	356c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    38d6:	cmp	r0, #0
    38d8:	beq.n	3956 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x10e>
      goto create;
    }
    if (n != 32) {
    38da:	cmp	r0, #32
    38dc:	bne.n	386c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    38de:	ldrb.w	r3, [sp, #40]	; 0x28
    38e2:	lsls	r2, r3, #24
    38e4:	bmi.n	39ae <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x166>
      if (freeCount == 0) {
    38e6:	cmp	r4, #0
    38e8:	bne.n	39a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x160>
        freePos.position = dir->curPosition() - 32;
    38ea:	ldr	r2, [r5, #0]
        freePos.cluster = dir->curCluster();
    38ec:	ldr	r1, [r5, #24]
    38ee:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    38f0:	subs	r2, #32
    38f2:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    38f4:	adds	r4, #1
    38f6:	uxtb	r4, r4
      }
      if (!buf[0]) {
    38f8:	cbz	r3, 3956 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x10e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    38fa:	cmp	r3, #192	; 0xc0
    38fc:	beq.w	3a48 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x200>
    3900:	cmp	r3, #193	; 0xc1
    3902:	beq.n	39c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x17c>
    3904:	cmp	r3, #133	; 0x85
    3906:	bne.n	38cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    3908:	movs	r2, #56	; 0x38
    390a:	movs	r1, #0
    390c:	mov	r0, r6
    390e:	bl	cc4c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    3912:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    3916:	ldrb.w	r2, [sp, #41]	; 0x29
    391a:	strb.w	r2, [r6, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    391e:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    3922:	lsls	r3, r3, #27
          m_attributes |= FILE_ATTR_FILE;
    3924:	it	pl
    3926:	orrpl.w	r2, r2, #8
    392a:	strb.w	r2, [r6, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    392e:	ldr	r3, [r5, #0]
    3930:	ldr	r1, [r5, #32]
    3932:	ldr	r2, [r5, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    3934:	str	r2, [r6, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    3936:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    3938:	str	r1, [r6, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    393a:	str	r3, [r6, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    393c:	ldrb.w	r3, [r5, #51]	; 0x33
    3940:	ubfx	r3, r3, #6, #1
    3944:	strb.w	r3, [r6, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    3948:	movs	r2, #32
    394a:	add	r1, sp, #40	; 0x28
    394c:	mov	r0, r5
    394e:	bl	356c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3952:	cmp	r0, #0
    3954:	bne.n	38da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x92>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE) || !name) {
    3956:	ldr	r3, [sp, #8]
    3958:	and.w	r3, r3, #66	; 0x42
    395c:	cmp	r3, #66	; 0x42
    395e:	bne.n	386c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    3960:	ldr	r3, [sp, #0]
    3962:	cmp	r3, #0
    3964:	beq.n	386c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    3966:	cmp	r4, fp
    3968:	bcc.n	3986 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x13e>
    396a:	b.n	3abc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x274>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    396c:	cmp	r0, #32
    396e:	bne.w	386c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    3972:	cbnz	r4, 397e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x136>
      freePos.position = dir->curPosition() - 32;
    3974:	ldr	r2, [r5, #0]
      freePos.cluster = dir->curCluster();
    3976:	ldr	r1, [r5, #24]
    3978:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    397a:	subs	r2, #32
    397c:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    397e:	uxtb	r4, r3
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    3980:	cmp	fp, r4
    3982:	bls.w	3abc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x274>
    n = dir->read(buf, 32);
    3986:	movs	r2, #32
    3988:	add	r1, sp, #40	; 0x28
    398a:	mov	r0, r5
    398c:	bl	356c <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    3990:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    3992:	cmp	r0, #0
    3994:	bne.n	396c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x124>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    3996:	mov	r0, r5
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    3998:	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    399a:	bl	4ae8 <ExFatFile::addDirCluster()>
    399e:	cmp	r0, #0
    39a0:	beq.w	386c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    39a4:	str	r7, [r5, #24]
      continue;
    39a6:	b.n	3980 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x138>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    39a8:	cmp	r4, fp
    39aa:	bcs.n	38f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0xb0>
    39ac:	b.n	38f4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0xac>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    39ae:	cmp.w	r9, #0
    39b2:	bne.n	38fa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0xb2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    39b4:	cmp	r4, fp
    39b6:	it	cc
    39b8:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    39ba:	cmp	r3, #133	; 0x85
    39bc:	bne.n	38cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
        continue;
      }
      inSet = true;
    39be:	mov.w	r9, #1
    39c2:	b.n	3908 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0xc0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    39c4:	rsb	r8, r7, sl
    39c8:	uxtb.w	r8, r8
    39cc:	cmp.w	r8, #15
    39d0:	it	cs
    39d2:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    39d6:	mov	r3, r8
    39d8:	mov	r2, r7
    39da:	ldr	r1, [sp, #0]
    39dc:	add	r0, sp, #40	; 0x28
    39de:	bl	479c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    39e2:	cmp	r0, #0
    39e4:	beq.n	3a8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x242>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    39e6:	add	r7, r8
    39e8:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    39ea:	cmp	sl, r7
    39ec:	bne.w	38cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    39f0:	ldr	r3, [sp, #8]
    39f2:	lsls	r0, r3, #24
    39f4:	bmi.w	386c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
    39f8:	tst.w	r3, #50	; 0x32
    39fc:	beq.n	3a0a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x1c2>
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    39fe:	ldrb.w	r3, [r6, #49]	; 0x31
    3a02:	tst.w	r3, #17
    3a06:	bne.w	386c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
#if !READ_ONLY
  if (oflag & O_TRUNC) {
    3a0a:	ldr	r2, [sp, #8]
    3a0c:	lsls	r1, r2, #27
    3a0e:	mov	r3, r2
    3a10:	bpl.w	3b8c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x344>
    if (!(oflag & O_WRITE)) {
    3a14:	lsls	r2, r3, #30
    3a16:	bpl.w	386c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3a1a:	ldrb.w	r3, [r6, #49]	; 0x31
    3a1e:	cmp	r3, #0
    3a20:	beq.w	386c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3a24:	ldrd	r2, r3, [r6]
    3a28:	orrs	r3, r2
    3a2a:	beq.n	3a38 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x1f0>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    3a2c:	movs	r2, #0
    3a2e:	movs	r3, #0
    3a30:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    3a34:	movs	r1, #0
    3a36:	str	r1, [r6, #24]
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    3a38:	mov	r0, r6
    3a3a:	bl	4c24 <ExFatFile::truncate()>
    3a3e:	cmp	r0, #0
    3a40:	beq.w	386c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    3a44:	movs	r0, #1
    3a46:	b.n	3876 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x2e>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    3a48:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
    3a4c:	ldrb.w	r2, [sp, #4]
    3a50:	strb.w	r2, [r6, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    3a54:	lsls	r7, r3, #30
          m_flags |= FILE_FLAG_CONTIGUOUS;
    3a56:	itt	mi
    3a58:	ldrbmi.w	r3, [sp, #12]
    3a5c:	strbmi.w	r3, [r6, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    3a60:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    3a64:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    3a68:	strd	r2, r3, [r6, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    3a6c:	ldr	r3, [sp, #60]	; 0x3c
    3a6e:	str	r3, [r6, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    3a70:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    3a72:	strd	r0, r1, [r6, #8]
        if (!name) {
    3a76:	cmp	r3, #0
    3a78:	beq.n	39f0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x1a8>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    3a7a:	ldrb.w	r3, [sp, #43]	; 0x2b
    3a7e:	cmp	r3, sl
    3a80:	beq.n	3a8e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x246>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    3a82:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    3a86:	mov	r7, r9
    3a88:	b.n	38cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    3a8a:	mov	r9, r0
    3a8c:	b.n	38cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    3a8e:	ldrh.w	r3, [sp, #44]	; 0x2c
    3a92:	ldr	r2, [sp, #16]
    3a94:	cmp	r3, r2
    3a96:	bne.n	3a82 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x23a>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    3a98:	movs	r7, #0
    3a9a:	b.n	38cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3a9c:	ldrd	r2, r3, [r5]
    3aa0:	orrs	r3, r2
    3aa2:	beq.w	389a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x52>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    3aa6:	movs	r2, #0
    3aa8:	movs	r3, #0
    3aaa:	strd	r2, r3, [r5]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    3aae:	str	r4, [r5, #24]
    3ab0:	b.n	389a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x52>
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, uint8_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint16_t nameHash = 0;
    3ab2:	str	r2, [sp, #16]
    3ab4:	b.n	389a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x52>
    3ab6:	nop
    3ab8:	.word	0x88888889
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    3abc:	ldrb.w	r3, [r5, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    3ac0:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    3ac2:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    3ac6:	movs	r1, #0
    3ac8:	mov	r0, r6
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    3aca:	add	r4, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    3acc:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    3ad0:	bl	cc4c <memset>
    3ad4:	ldr	r3, [r5, #32]
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = EXFAT_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
      m_flags |= oflag & FILE_FLAG_OFLAG;
    3ad6:	ldr	r5, [sp, #8]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    3ad8:	str	r3, [r6, #32]
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    3ada:	ldmia.w	r4, {r0, r1, r2}
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = EXFAT_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
      m_flags |= oflag & FILE_FLAG_OFLAG;
    3ade:	and.w	r7, r5, #7
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    3ae2:	movs	r5, #8
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = EXFAT_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
      m_flags |= oflag & FILE_FLAG_OFLAG;
    3ae4:	orn	r9, r7, #125	; 0x7d
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    3ae8:	strb.w	r5, [r6, #49]	; 0x31
    3aec:	add.w	r7, sl, #30
  m_dirPos = freePos;
    3af0:	add.w	r5, r6, #36	; 0x24
    3af4:	stmia.w	r5, {r0, r1, r2}
    3af8:	uxtb	r7, r7
    3afa:	ldr	r5, [sp, #0]
    3afc:	str.w	r9, [sp]
  for (uint8_t i = 0; i < freeNeed; i++) {
    3b00:	mov.w	r8, #0
    3b04:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    3b06:	movs	r2, #1
    3b08:	mov	r1, r4
    3b0a:	bl	4204 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    3b0e:	mov	r9, r0
    3b10:	cmp	r0, #0
    3b12:	beq.w	386c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    3b16:	ldrsb.w	r2, [r0]
    3b1a:	cmp	r2, #0
    3b1c:	blt.w	386c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    3b20:	movs	r2, #32
    3b22:	movs	r1, #0
    3b24:	bl	cc4c <memset>
    if (i == 0) {
    3b28:	cmp.w	r8, #0
    3b2c:	beq.n	3bd0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x388>
        uint16_t date, time;
        FsDateTime::callback(&date, &time);
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    3b2e:	cmp.w	r8, #1
    3b32:	beq.n	3bae <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x366>
    3b34:	rsb	r2, r8, r8, lsl #4
    3b38:	cmp	r7, #15
    3b3a:	sub.w	r2, r2, #30
      m_flags |= oflag & FILE_FLAG_OFLAG;
      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    3b3e:	mov.w	r1, #193	; 0xc1
    3b42:	mov	r0, r7
    3b44:	it	cs
    3b46:	movcs	r0, #15
    3b48:	uxtb	r2, r2
    3b4a:	strb.w	r1, [r9]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    3b4e:	cbz	r0, 3b68 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x320>
    3b50:	add.w	r3, r9, #2
    3b54:	sxth	r0, r0
    3b56:	add.w	r0, r3, r0, lsl #1
    3b5a:	add	r2, r5
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    3b5c:	ldrb.w	r1, [r2], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    3b60:	strh.w	r1, [r3], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    3b64:	cmp	r0, r3
    3b66:	bne.n	3b5c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x314>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    3b68:	add.w	r8, r8, #1
    3b6c:	uxtb.w	r8, r8
    3b70:	cmp	fp, r8
    3b72:	bls.n	3ba6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x35e>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    3b74:	movs	r2, #32
    3b76:	mov	r1, r4
    3b78:	ldr	r0, [r6, #32]
    3b7a:	bl	42b0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3b7e:	cmp	r0, #1
    3b80:	bne.w	386c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    3b84:	subs	r7, #15
    3b86:	uxtb	r7, r7
    3b88:	ldr	r0, [r6, #32]
    3b8a:	b.n	3b06 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x2be>
    3b8c:	mov	r3, r2
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    3b8e:	lsls	r3, r3, #26
    3b90:	bpl.w	3a44 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x1fc>
    3b94:	ldrd	r2, r3, [r6, #16]
    3b98:	mov	r0, r6
    3b9a:	bl	3748 <ExFatFile::seekSet(unsigned long long)>
    3b9e:	cmp	r0, #0
    3ba0:	bne.w	3a44 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x1fc>
    3ba4:	b.n	386c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    3ba6:	mov	r0, r6
    3ba8:	bl	49e8 <ExFatFile::sync()>
    3bac:	b.n	3876 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x2e>
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = EXFAT_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
      m_flags |= oflag & FILE_FLAG_OFLAG;
    3bae:	ldrb.w	r3, [sp]
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    3bb2:	movs	r1, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    3bb4:	movs	r2, #3
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    3bb6:	strb.w	r1, [r9]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    3bba:	strb.w	r2, [r9, #1]
      m_flags = EXFAT_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
      m_flags |= oflag & FILE_FLAG_OFLAG;
    3bbe:	strb.w	r3, [r6, #51]	; 0x33
    3bc2:	ldrh.w	r3, [sp, #16]
      dirStream->nameLength = nameLength;
    3bc6:	strb.w	sl, [r9, #3]
    3bca:	strh.w	r3, [r9, #4]
    3bce:	b.n	3b68 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x320>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3bd0:	ldr	r3, [sp, #20]
    3bd2:	adds	r2, r3, #1
    3bd4:	uxtb	r2, r2
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    3bd6:	movs	r1, #133	; 0x85
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    3bd8:	ldr	r3, [pc, #44]	; (3c08 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x3c0>)
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    3bda:	strb.w	r1, [r9]
      m_setCount = freeNeed - 1;
    3bde:	strb.w	r2, [r6, #48]	; 0x30
      dirFile->setCount = m_setCount;
    3be2:	strb.w	r2, [r9, #1]
      if (FsDateTime::callback) {
    3be6:	ldr	r2, [r3, #0]
    3be8:	cmp	r2, #0
    3bea:	beq.n	3b68 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x320>
        uint16_t date, time;
        FsDateTime::callback(&date, &time);
    3bec:	add.w	r1, sp, #26
    3bf0:	add	r0, sp, #24
    3bf2:	blx	r2
    3bf4:	ldrh.w	r1, [sp, #26]
    3bf8:	ldrh.w	r2, [sp, #24]
    3bfc:	strh.w	r1, [r9, #8]
    3c00:	strh.w	r2, [r9, #10]
    3c04:	b.n	3b68 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x320>
    3c06:	nop
    3c08:	.word	0x20020364

00003c0c <ExFatFile::open(ExFatFile*, char const*, unsigned char)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, uint8_t oflag) {
    3c0c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3c10:	mov	r6, r0
    3c12:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    3c14:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, uint8_t oflag) {
    3c18:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    3c1a:	movs	r0, #0
    3c1c:	strb.w	r0, [sp, #73]	; 0x49
    3c20:	strb.w	r0, [sp, #74]	; 0x4a
    3c24:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    3c28:	cbnz	r4, 3c38 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x2c>
    3c2a:	mov	r9, r3
    3c2c:	ldrb.w	r3, [r1, #49]	; 0x31
    3c30:	tst.w	r3, #80	; 0x50
    3c34:	mov	r5, r1
    3c36:	bne.n	3c40 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    3c38:	movs	r0, #0
}
    3c3a:	add	sp, #84	; 0x54
    3c3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    3c40:	ldrb	r3, [r2, #0]
    3c42:	cmp	r3, #47	; 0x2f
    3c44:	mov	r4, r2
    3c46:	beq.n	3cb0 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0xa4>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, uint8_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, uint8_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    3c48:	mov.w	r8, #1
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    3c4c:	mov	r1, r4
    3c4e:	add	r3, sp, #12
    3c50:	add	r2, sp, #16
    3c52:	mov	r0, r6
    3c54:	bl	3488 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    3c58:	cmp	r0, #0
    3c5a:	beq.n	3c38 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    3c5c:	ldr	r3, [sp, #12]
    3c5e:	ldrb	r3, [r3, #0]
    3c60:	cmp	r3, #0
    3c62:	beq.n	3cda <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0xce>
    3c64:	ldrb.w	r3, [sp, #16]
    3c68:	ldr	r2, [sp, #20]
    3c6a:	str.w	r8, [sp]
    3c6e:	mov	r1, r5
    3c70:	mov	r0, r6
    3c72:	bl	3848 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
    3c76:	cmp	r0, #0
    3c78:	beq.n	3c38 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    3c7a:	mov	r4, r6
    3c7c:	add	r7, sp, #24
    3c7e:	add.w	lr, r6, #48	; 0x30
    3c82:	ldr	r0, [r4, #0]
    3c84:	ldr	r1, [r4, #4]
    3c86:	ldr	r2, [r4, #8]
    3c88:	ldr	r3, [r4, #12]
    3c8a:	mov	r5, r7
    3c8c:	stmia	r5!, {r0, r1, r2, r3}
    3c8e:	adds	r4, #16
    3c90:	cmp	r4, lr
    3c92:	mov	r7, r5
    3c94:	bne.n	3c82 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x76>
    3c96:	ldr	r0, [r4, #0]
    3c98:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    3c9a:	mov	r0, r6
    3c9c:	bl	49e8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3ca0:	movs	r3, #0
    3ca2:	strb.w	r3, [r6, #49]	; 0x31
  m_flags = 0;
    3ca6:	strb.w	r3, [r6, #51]	; 0x33
    3caa:	ldr	r4, [sp, #12]
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    3cac:	add	r5, sp, #24
    3cae:	b.n	3c4c <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    3cb0:	adds	r4, #1
    3cb2:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    3cb4:	ldrb	r1, [r4, #0]
    3cb6:	cmp	r1, #47	; 0x2f
    3cb8:	beq.n	3cb0 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0xa4>
      path++;
    }
    if (*path == 0) {
    3cba:	cbz	r1, 3cf2 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0xe6>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3cbc:	movs	r2, #56	; 0x38
    3cbe:	add	r0, sp, #24
    3cc0:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    3cc2:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3cc4:	bl	cc4c <memset>
  m_attributes = FILE_ATTR_ROOT;
    3cc8:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3cca:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    3ccc:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    3cce:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3cd0:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3cd4:	strb.w	r3, [sp, #75]	; 0x4b
    3cd8:	b.n	3c48 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x3c>
    3cda:	ldrb.w	r3, [sp, #16]
    3cde:	ldr	r2, [sp, #20]
    3ce0:	str.w	r9, [sp]
    3ce4:	mov	r1, r5
    3ce6:	mov	r0, r6
    3ce8:	bl	3848 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    3cec:	add	sp, #84	; 0x54
    3cee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3cf2:	movs	r2, #56	; 0x38
    3cf4:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    3cf6:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3cf8:	bl	cc4c <memset>
  m_attributes = FILE_ATTR_ROOT;
    3cfc:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3cfe:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    3d00:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3d02:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3d06:	strb.w	r0, [r6, #51]	; 0x33
    3d0a:	b.n	3c3a <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x2e>

00003d0c <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    3d0c:	cbz	r1, 3d18 <ExFatFile::open(ExFatVolume*, char const*, int)+0xc>
    3d0e:	uxtb	r3, r3
    3d10:	add.w	r1, r1, #1088	; 0x440
    3d14:	b.w	3c0c <ExFatFile::open(ExFatFile*, char const*, unsigned char)>
}
    3d18:	mov	r0, r1
    3d1a:	bx	lr

00003d1c <FsCache::invalidate()>:
#include "ExFatVolume.h"
#include "../common/FsStructs.h"

//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    3d1c:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    3d1e:	mov.w	r3, #4294967295
#include "ExFatVolume.h"
#include "../common/FsStructs.h"

//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    3d22:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    3d24:	str	r3, [r0, #8]
    3d26:	bx	lr

00003d28 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3d28:	ldr	r3, [r0, #4]
    3d2a:	cmp	r3, #0
    3d2c:	beq.n	3da6 <FsCache::get(unsigned long, unsigned char)+0x7e>
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    3d2e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d32:	mov	r6, r1
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    3d34:	ldr	r1, [r0, #8]
    3d36:	cmp	r1, r6
    3d38:	mov	r7, r2
    3d3a:	mov	r4, r0
    3d3c:	beq.n	3d5e <FsCache::get(unsigned long, unsigned char)+0x36>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3d3e:	ldrb	r2, [r0, #0]
    3d40:	lsls	r2, r2, #31
    3d42:	bmi.n	3d72 <FsCache::get(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    3d44:	lsls	r3, r7, #30
    3d46:	add.w	r5, r0, #12
    3d4a:	bpl.n	3d90 <FsCache::get(unsigned long, unsigned char)+0x68>
    3d4c:	movs	r3, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    3d4e:	and.w	r2, r7, #1
    3d52:	orrs	r2, r3
    3d54:	strb	r2, [r4, #0]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    3d56:	str	r6, [r4, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;
    3d58:	mov	r0, r5
    3d5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d5e:	mov	r5, r0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    3d60:	and.w	r2, r7, #1
    3d64:	ldrsb.w	r3, [r5], #12
    3d68:	orrs	r2, r3
    3d6a:	strb	r2, [r4, #0]
  return m_cacheBuffer;
    3d6c:	mov	r0, r5
    3d6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    3d72:	ldr	r2, [r3, #0]
    3d74:	add.w	r5, r0, #12
    3d78:	ldr.w	r8, [r2, #24]
    3d7c:	mov	r0, r3
    3d7e:	mov	r2, r5
    3d80:	blx	r8
    3d82:	cbz	r0, 3da0 <FsCache::get(unsigned long, unsigned char)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    3d84:	ldrb	r3, [r4, #0]
    3d86:	bic.w	r3, r3, #1
    3d8a:	strb	r3, [r4, #0]
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    3d8c:	lsls	r3, r7, #30
    3d8e:	bmi.n	3d4c <FsCache::get(unsigned long, unsigned char)+0x24>
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    3d90:	ldr	r0, [r4, #4]
    3d92:	ldr	r3, [r0, #0]
    3d94:	mov	r2, r5
    3d96:	ldr	r3, [r3, #8]
    3d98:	mov	r1, r6
    3d9a:	blx	r3
    3d9c:	cmp	r0, #0
    3d9e:	bne.n	3d4c <FsCache::get(unsigned long, unsigned char)+0x24>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    3da0:	movs	r0, #0
    3da2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3da6:	movs	r0, #0
}
    3da8:	bx	lr
    3daa:	nop

00003dac <FsCache::sync()>:
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3dac:	ldrb	r3, [r0, #0]
    3dae:	lsls	r3, r3, #31
    3db0:	bmi.n	3db6 <FsCache::sync()+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
    3db2:	movs	r0, #1
    3db4:	bx	lr

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    3db6:	push	{r4, lr}
    3db8:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    3dba:	ldr	r0, [r0, #4]
    3dbc:	ldr	r1, [r4, #8]
    3dbe:	ldr	r3, [r0, #0]
    3dc0:	add.w	r2, r4, #12
    3dc4:	ldr	r3, [r3, #24]
    3dc6:	blx	r3
    3dc8:	cbz	r0, 3dd4 <FsCache::sync()+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    3dca:	ldrb	r3, [r4, #0]
    3dcc:	bic.w	r3, r3, #1
    3dd0:	strb	r3, [r4, #0]
    3dd2:	pop	{r4, pc}
  }
  return true;

fail:
  return false;
}
    3dd4:	pop	{r4, pc}
    3dd6:	nop

00003dd8 <ExFatPartition::init(SdCardInterface*, unsigned char)>:
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    3dd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#include "../common/FsStructs.h"

//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    3ddc:	mov.w	r3, #4294967295
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    3de0:	movs	r5, #0
  m_blockDev = dev;
    3de2:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    3de6:	str	r1, [r0, #4]
    3de8:	str.w	r1, [r0, #528]	; 0x210
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    3dec:	strb.w	r5, [r0, #1084]	; 0x43c
#include "ExFatVolume.h"
#include "../common/FsStructs.h"

//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    3df0:	strb	r5, [r0, #0]
    3df2:	strb.w	r5, [r0, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    3df6:	str	r3, [r0, #8]
    3df8:	str.w	r3, [r0, #532]	; 0x214
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3dfc:	cbz	r1, 3e3a <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    3dfe:	ldr	r3, [r1, #0]
    3e00:	add.w	r8, r0, #536	; 0x218
    3e04:	mov	r6, r2
    3e06:	mov	r4, r0
    3e08:	ldr	r3, [r3, #8]
    3e0a:	mov	r0, r1
    3e0c:	mov	r2, r8
    3e0e:	mov	r1, r5
    3e10:	blx	r3
    3e12:	mov	r7, r0
    3e14:	cbz	r0, 3e3a <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    3e16:	cmp	r6, #4
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    3e18:	strb.w	r5, [r4, #524]	; 0x20c
    m_sector = sector;
    3e1c:	str.w	r5, [r4, #532]	; 0x214

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    3e20:	bhi.n	3e3a <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    3e22:	cbnz	r6, 3e42 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    3e24:	movs	r2, #5
    3e26:	ldr	r1, [pc, #476]	; (4004 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x22c>)
    3e28:	addw	r0, r4, #539	; 0x21b
    3e2c:	bl	d35c <strncmp>
    3e30:	cbnz	r0, 3e3a <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    3e32:	ldrb.w	r3, [r4, #644]	; 0x284
    3e36:	cmp	r3, #9
    3e38:	beq.n	3e86 <ExFatPartition::init(SdCardInterface*, unsigned char)+0xae>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    3e3a:	movs	r7, #0
}
    3e3c:	mov	r0, r7
    3e3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    3e42:	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    3e44:	add.w	r3, r4, r3, lsl #4
    3e48:	ldrb.w	r2, [r3, #982]	; 0x3d6
    3e4c:	ands.w	r5, r2, #127	; 0x7f
    3e50:	bne.n	3e3a <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
    3e52:	ldrb.w	r3, [r3, #986]	; 0x3da
    3e56:	cmp	r3, #0
    3e58:	beq.n	3e3a <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    3e5a:	add.w	r6, r8, r6, lsl #4
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3e5e:	ldr.w	r0, [r4, #528]	; 0x210
    3e62:	ldr.w	r6, [r6, #438]	; 0x1b6
    3e66:	cmp	r0, #0
    3e68:	beq.n	3e3a <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    3e6a:	cmp	r6, #0
    3e6c:	beq.n	3e24 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x4c>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    3e6e:	ldr	r3, [r0, #0]
    3e70:	mov	r2, r8
    3e72:	ldr	r3, [r3, #8]
    3e74:	mov	r1, r6
    3e76:	blx	r3
    3e78:	cmp	r0, #0
    3e7a:	beq.n	3e3a <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    3e7c:	strb.w	r5, [r4, #524]	; 0x20c
    m_sector = sector;
    3e80:	str.w	r6, [r4, #532]	; 0x214
    3e84:	b.n	3e24 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x4c>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    3e86:	ldrb.w	lr, [r4, #645]	; 0x285
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3e8a:	ldr.w	r3, [r4, #624]	; 0x270
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3e8e:	ldr.w	r1, [r4, #616]	; 0x268
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    3e92:	str.w	r0, [r4, #1048]	; 0x418
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3e96:	add.w	r5, lr, #9
    3e9a:	movs	r2, #1
    3e9c:	lsls	r2, r5
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3e9e:	add	r1, r6
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3ea0:	add	r6, r3
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
    3ea2:	ldr.w	r3, [r4, #620]	; 0x26c
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3ea6:	str.w	r2, [r4, #1076]	; 0x434
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    3eaa:	mov	r5, r0
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
    3eac:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
    3eb0:	subs	r0, r2, #1
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    3eb2:	ldr.w	r3, [r4, #632]	; 0x278
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
    3eb6:	ldr.w	r2, [r4, #628]	; 0x274
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    3eba:	strb.w	lr, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
    3ebe:	str.w	r0, [r4, #1072]	; 0x430
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3ec2:	str.w	r1, [r4, #1052]	; 0x41c
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3ec6:	str.w	r6, [r4, #1060]	; 0x424
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    3eca:	mov	r8, r5
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    3ecc:	mov	r9, r5
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
    3ece:	str.w	r2, [r4, #1064]	; 0x428
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    3ed2:	str.w	r3, [r4, #1068]	; 0x42c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3ed6:	ldr	r0, [r4, #4]
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    3ed8:	add.w	r6, r6, r8, lsr #12
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3edc:	cmp	r0, #0
    3ede:	beq.n	3fba <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1e2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    3ee0:	ldr	r1, [r4, #8]
    3ee2:	cmp	r6, r1
    3ee4:	beq.n	3fe0 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x208>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3ee6:	ldrb	r3, [r4, #0]
    3ee8:	lsls	r3, r3, #31
    3eea:	bmi.n	3fe6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x20e>
    3eec:	add.w	sl, r4, #12
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    3ef0:	ldr	r3, [r0, #0]
    3ef2:	mov	r2, sl
    3ef4:	ldr	r3, [r3, #8]
    3ef6:	mov	r1, r6
    3ef8:	blx	r3
    3efa:	cmp	r0, #0
    3efc:	beq.n	3fba <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1e2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    3efe:	strb.w	r9, [r4]
    m_sector = sector;
    3f02:	str	r6, [r4, #8]
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    3f04:	movs	r0, #0
    3f06:	ldrb.w	r3, [sl, r0]
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3f0a:	lsls	r2, r3, #31
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3f0c:	add.w	r1, r8, #1
        if (!(mask & cache[i])) {
    3f10:	bmi.n	3faa <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1d2>
          if ((endAlloc - bgnAlloc) == count) {
    3f12:	subs	r2, r1, r5
    3f14:	cmp	r2, #1
    3f16:	beq.n	3fb6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3f18:	ldr.w	r2, [r4, #1064]	; 0x428
    3f1c:	cmp	r2, r1
    3f1e:	bls.n	3fd6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3f20:	lsls	r6, r3, #30
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3f22:	add.w	r1, r8, #2
        if (!(mask & cache[i])) {
    3f26:	bmi.n	3fae <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1d6>
          if ((endAlloc - bgnAlloc) == count) {
    3f28:	subs	r6, r1, r5
    3f2a:	cmp	r6, #1
    3f2c:	beq.n	3fb6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3f2e:	cmp	r1, r2
    3f30:	bcs.n	3fd6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3f32:	lsls	r6, r3, #29
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3f34:	add.w	r1, r8, #3
        if (!(mask & cache[i])) {
    3f38:	bmi.n	3fb2 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1da>
          if ((endAlloc - bgnAlloc) == count) {
    3f3a:	subs	r6, r1, r5
    3f3c:	cmp	r6, #1
    3f3e:	beq.n	3fb6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3f40:	cmp	r2, r1
    3f42:	bls.n	3fd6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3f44:	lsls	r6, r3, #28
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3f46:	add.w	r1, r8, #4
        if (!(mask & cache[i])) {
    3f4a:	bmi.n	3fc2 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1ea>
          if ((endAlloc - bgnAlloc) == count) {
    3f4c:	subs	r6, r1, r5
    3f4e:	cmp	r6, #1
    3f50:	beq.n	3fb6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3f52:	cmp	r2, r1
    3f54:	bls.n	3fd6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3f56:	lsls	r6, r3, #27
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3f58:	add.w	r1, r8, #5
        if (!(mask & cache[i])) {
    3f5c:	bmi.n	3fc6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1ee>
          if ((endAlloc - bgnAlloc) == count) {
    3f5e:	subs	r6, r1, r5
    3f60:	cmp	r6, #1
    3f62:	beq.n	3fb6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3f64:	cmp	r2, r1
    3f66:	bls.n	3fd6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3f68:	lsls	r6, r3, #26
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3f6a:	add.w	r1, r8, #6
        if (!(mask & cache[i])) {
    3f6e:	bmi.n	3fca <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1f2>
          if ((endAlloc - bgnAlloc) == count) {
    3f70:	subs	r6, r1, r5
    3f72:	cmp	r6, #1
    3f74:	beq.n	3fb6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3f76:	cmp	r2, r1
    3f78:	bls.n	3fd6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3f7a:	lsls	r6, r3, #25
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3f7c:	add.w	r1, r8, #7
        if (!(mask & cache[i])) {
    3f80:	bmi.n	3fce <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1f6>
          if ((endAlloc - bgnAlloc) == count) {
    3f82:	subs	r6, r1, r5
    3f84:	cmp	r6, #1
    3f86:	beq.n	3fb6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3f88:	cmp	r1, r2
    3f8a:	bcs.n	3fd6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3f8c:	lsls	r3, r3, #24
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3f8e:	add.w	r8, r8, #8
        if (!(mask & cache[i])) {
    3f92:	bmi.n	3fd2 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fa>
          if ((endAlloc - bgnAlloc) == count) {
    3f94:	rsb	r3, r5, r8
    3f98:	cmp	r3, #1
    3f9a:	beq.n	3fb6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3f9c:	cmp	r2, r8
    3f9e:	bls.n	3fd6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
    3fa0:	adds	r0, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    3fa2:	cmp.w	r0, #512	; 0x200
    3fa6:	bne.n	3f06 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x12e>
    3fa8:	b.n	3fda <ExFatPartition::init(SdCardInterface*, unsigned char)+0x202>
      for (; mask; mask <<= 1) {
        endAlloc++;
    3faa:	mov	r5, r1
    3fac:	b.n	3f18 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x140>
    3fae:	mov	r5, r1
    3fb0:	b.n	3f2e <ExFatPartition::init(SdCardInterface*, unsigned char)+0x156>
    3fb2:	mov	r5, r1
    3fb4:	b.n	3f40 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x168>
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    3fb6:	str.w	r5, [r4, #1048]	; 0x418
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
    3fba:	movs	r3, #64	; 0x40
    3fbc:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    3fc0:	b.n	3e3c <ExFatPartition::init(SdCardInterface*, unsigned char)+0x64>
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3fc2:	mov	r5, r1
    3fc4:	b.n	3f52 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x17a>
    3fc6:	mov	r5, r1
    3fc8:	b.n	3f64 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x18c>
    3fca:	mov	r5, r1
    3fcc:	b.n	3f76 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x19e>
    3fce:	mov	r5, r1
    3fd0:	b.n	3f88 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1b0>
    3fd2:	mov	r5, r8
    3fd4:	b.n	3f9c <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1c4>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3fd6:	movs	r5, #0
    3fd8:	mov	r8, r5
    3fda:	ldr.w	r6, [r4, #1060]	; 0x424
    3fde:	b.n	3ed6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0xfe>
    3fe0:	add.w	sl, r4, #12
    3fe4:	b.n	3f04 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x12c>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    3fe6:	ldr	r3, [r0, #0]
    3fe8:	add.w	sl, r4, #12
    3fec:	ldr	r3, [r3, #24]
    3fee:	mov	r2, sl
    3ff0:	blx	r3
    3ff2:	cmp	r0, #0
    3ff4:	beq.n	3fba <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1e2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    3ff6:	ldrb	r3, [r4, #0]
    3ff8:	ldr	r0, [r4, #4]
    3ffa:	bic.w	r3, r3, #1
    3ffe:	strb	r3, [r4, #0]
    4000:	b.n	3ef0 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x118>
    4002:	nop
    4004:	.word	0x00013e28

00004008 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    4008:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    400c:	sub	sp, #12
    400e:	mov	r7, r0
    4010:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4012:	str	r1, [sp, #4]
    4014:	cmp	r1, #0
    4016:	beq.n	40ce <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xc6>
    4018:	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    401c:	ldr.w	r3, [r7, #1064]	; 0x428
    4020:	cmp	r8, r3
    4022:	bcs.n	40c4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xbc>
    4024:	and.w	r5, r8, #7
    4028:	movs	r3, #1
    402a:	lsl.w	r5, r3, r5
    402e:	uxtb	r5, r5
    4030:	ubfx	sl, r8, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    4034:	mov	r6, r8
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    4036:	mov	r4, r8
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    4038:	ldr.w	r3, [r7, #1060]	; 0x424
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    403c:	ldr	r0, [r7, #4]
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    403e:	add.w	r3, r3, r4, lsr #12
    4042:	str	r3, [sp, #0]
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4044:	cmp	r0, #0
    4046:	beq.n	410a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x102>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4048:	ldr	r1, [r7, #8]
    404a:	cmp	r3, r1
    404c:	beq.n	40ea <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe2>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    404e:	ldrb	r3, [r7, #0]
    4050:	lsls	r3, r3, #31
    4052:	bmi.n	40f0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe8>
    4054:	add.w	fp, r7, #12
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4058:	ldr	r3, [r0, #0]
    405a:	ldr	r1, [sp, #0]
    405c:	ldr	r3, [r3, #8]
    405e:	mov	r2, fp
    4060:	blx	r3
    4062:	cmp	r0, #0
    4064:	beq.n	410a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x102>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4066:	mov.w	r3, #0
    406a:	strb	r3, [r7, #0]
    m_sector = sector;
    406c:	ldr	r3, [sp, #0]
    406e:	str	r3, [r7, #8]
    4070:	ldrb.w	r1, [fp, sl]
    4074:	b.n	408c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4076:	cmp	r2, r9
    4078:	beq.n	40d4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xcc>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    407a:	cmp	r8, r4
    407c:	beq.n	40a0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    407e:	ldr.w	r2, [r7, #1064]	; 0x428
    4082:	cmp	r4, r2
    4084:	bcs.n	40b8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xb0>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4086:	ands.w	r5, r3, #255	; 0xff
    408a:	beq.n	40a8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
        endAlloc++;
    408c:	adds	r4, #1
        if (!(mask & cache[i])) {
    408e:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4090:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4094:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4098:	beq.n	4076 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    409a:	cmp	r8, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    409c:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    409e:	bne.n	407e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x76>
          return 1;
    40a0:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    40a2:	add	sp, #12
    40a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40a8:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    40ac:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    40b0:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    40b4:	bne.n	4070 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x68>
    40b6:	b.n	40bc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xb4>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    40b8:	movs	r6, #0
    40ba:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    40bc:	mov.w	sl, #0
    40c0:	movs	r5, #1
    40c2:	b.n	4038 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x30>
    40c4:	mov.w	r8, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    40c8:	mov	sl, r8
    40ca:	movs	r5, #1
    40cc:	b.n	4034 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    40ce:	ldr.w	r8, [r0, #1048]	; 0x418
    40d2:	b.n	401c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x14>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    40d4:	ldr	r3, [sp, #4]
    40d6:	cbnz	r3, 40e2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xda>
    40d8:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    40dc:	it	eq
    40de:	streq.w	r6, [r7, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    40e2:	adds	r0, r6, #2
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    40e4:	add	sp, #12
    40e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40ea:	add.w	fp, r7, #12
    40ee:	b.n	4070 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x68>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    40f0:	ldr	r3, [r0, #0]
    40f2:	add.w	fp, r7, #12
    40f6:	ldr	r3, [r3, #24]
    40f8:	mov	r2, fp
    40fa:	blx	r3
    40fc:	cbz	r0, 410a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x102>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    40fe:	ldrb	r3, [r7, #0]
    4100:	ldr	r0, [r7, #4]
    4102:	bic.w	r3, r3, #1
    4106:	strb	r3, [r7, #0]
    4108:	b.n	4058 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x50>
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    410a:	movs	r0, #0
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    410c:	add	sp, #12
    410e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4112:	nop

00004114 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4114:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    4118:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    411a:	mov	r6, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    411c:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4120:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4122:	adds	r2, r1, r2
    4124:	cmp	r2, r0
    4126:	bhi.n	41ba <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa6>
    4128:	mov	r8, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    412a:	ldr.w	r3, [r6, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    412e:	cmp.w	r8, #0
    4132:	bne.n	41c0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xac>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    4134:	cmp	r1, r3
      m_bitmapStart = start;
    4136:	it	cc
    4138:	strcc.w	r1, [r6, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    413c:	and.w	r4, r1, #7
    4140:	movs	r3, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4142:	ldr.w	r2, [r6, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4146:	lsl.w	r4, r3, r4
    414a:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    414c:	add.w	sl, r2, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    4150:	ubfx	r9, r1, #3, #9
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4154:	ldr	r0, [r6, #4]
  mask = 1 << (start & 7);
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    4156:	add.w	r7, sl, #1
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    415a:	cbz	r0, 41ba <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    415c:	ldr	r1, [r6, #8]
    415e:	cmp	sl, r1
    4160:	beq.n	41da <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc6>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4162:	ldrb	r3, [r6, #0]
    4164:	lsls	r3, r3, #31
    4166:	bmi.n	41e6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xd2>
    4168:	add.w	fp, r6, #12
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    416c:	ldr	r3, [r0, #0]
    416e:	mov	r2, fp
    4170:	ldr	r3, [r3, #8]
    4172:	mov	r1, sl
    4174:	blx	r3
    4176:	cbz	r0, 41ba <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa6>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    4178:	str.w	sl, [r6, #8]
    417c:	movs	r3, #1
    417e:	add.w	r1, fp, r9
  }
  m_status |= option & CACHE_STATUS_MASK;
    4182:	strb	r3, [r6, #0]
    4184:	add.w	fp, fp, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    4188:	ldrb	r2, [r1, #0]
    418a:	tst	r2, r4
    418c:	ite	ne
    418e:	movne	r3, #1
    4190:	moveq	r3, #0
    4192:	cmp	r3, r8
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4194:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4198:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    419c:	beq.n	41ba <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    419e:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    41a0:	strb	r2, [r1, #0]
        if (--count == 0) {
    41a2:	beq.n	41d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    41a4:	ands.w	r4, r4, #255	; 0xff
    41a8:	bne.n	4188 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x74>
    41aa:	adds	r1, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    41ac:	cmp	fp, r1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    41ae:	mov	r9, r4
    41b0:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    41b4:	bne.n	4188 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x74>
  mask = 1 << (start & 7);
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    41b6:	mov	sl, r7
    41b8:	b.n	4154 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    41ba:	movs	r0, #0
}
    41bc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    41c0:	cmp	r1, r3
    41c2:	bhi.n	413c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    41c4:	cmp	r2, r3
    41c6:	bls.n	413c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    41c8:	cmp	r2, r0
    41ca:	it	cs
    41cc:	movcs	r2, #0
    41ce:	str.w	r2, [r6, #1048]	; 0x418
    41d2:	b.n	413c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    41d4:	movs	r0, #1
    41d6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    41da:	mov	fp, r6
    41dc:	ldrb.w	r3, [fp], #12
    41e0:	orr.w	r3, r3, #1
    41e4:	b.n	417e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x6a>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    41e6:	ldr	r3, [r0, #0]
    41e8:	add.w	fp, r6, #12
    41ec:	ldr	r3, [r3, #24]
    41ee:	mov	r2, fp
    41f0:	blx	r3
    41f2:	cmp	r0, #0
    41f4:	beq.n	41ba <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    41f6:	ldrb	r3, [r6, #0]
    41f8:	ldr	r0, [r6, #4]
    41fa:	bic.w	r3, r3, #1
    41fe:	strb	r3, [r6, #0]
    4200:	b.n	416c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    4202:	nop

00004204 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4204:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    4208:	ldmia.w	r1, {r3, r5}
    420c:	ldr.w	r6, [r0, #1072]	; 0x430
    4210:	ldrb.w	r4, [r0, #1085]	; 0x43d
    4214:	ldr.w	r7, [r0, #1060]	; 0x424
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4218:	ldr.w	lr, [r0, #528]	; 0x210
  return n;
}
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    421c:	ands	r5, r6
    421e:	subs	r3, #2
    4220:	add.w	r6, r7, r5, lsr #9
    4224:	lsls	r3, r4
    4226:	adds	r4, r6, r3
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4228:	cmp.w	lr, #0
    422c:	beq.n	42a8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0xa4>
    422e:	mov	r8, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4230:	ldr.w	r1, [r0, #532]	; 0x214
    4234:	cmp	r4, r1
    4236:	mov	r5, r2
    4238:	mov	r6, r0
    423a:	beq.n	426a <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x66>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    423c:	ldrb.w	r3, [r0, #524]	; 0x20c
    4240:	lsls	r2, r3, #31
    4242:	bmi.n	4274 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x70>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    4244:	lsls	r3, r5, #30
    4246:	add.w	r7, r0, #536	; 0x218
    424a:	bpl.n	4296 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x92>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    424c:	str.w	r4, [r6, #532]	; 0x214
    4250:	movs	r2, #0
  }
  m_status |= option & CACHE_STATUS_MASK;
    4252:	and.w	r5, r5, #1
    4256:	orrs	r5, r2
    4258:	strb.w	r5, [r6, #524]	; 0x20c
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    425c:	ldr.w	r0, [r8, #4]
    4260:	ubfx	r0, r0, #0, #9
    4264:	add	r0, r7
    4266:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    426a:	ldrsb.w	r2, [r0, #524]	; 0x20c
    426e:	add.w	r7, r0, #536	; 0x218
    4272:	b.n	4252 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x4e>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4274:	ldr.w	r3, [lr]
    4278:	add.w	r7, r0, #536	; 0x218
    427c:	ldr	r3, [r3, #24]
    427e:	mov	r0, lr
    4280:	mov	r2, r7
    4282:	blx	r3
    4284:	cbz	r0, 42a8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4286:	ldrb.w	r3, [r6, #524]	; 0x20c
    428a:	bic.w	r3, r3, #1
    428e:	strb.w	r3, [r6, #524]	; 0x20c
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    4292:	lsls	r3, r5, #30
    4294:	bmi.n	424c <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x48>
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4296:	ldr.w	r0, [r6, #528]	; 0x210
    429a:	ldr	r3, [r0, #0]
    429c:	mov	r2, r7
    429e:	ldr	r3, [r3, #8]
    42a0:	mov	r1, r4
    42a2:	blx	r3
    42a4:	cmp	r0, #0
    42a6:	bne.n	424c <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x48>
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    42a8:	movs	r0, #0
}
    42aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42ae:	nop

000042b0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    42b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    42b4:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    42b6:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    42b8:	adds	r3, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    42ba:	ldr.w	r1, [r0, #1072]	; 0x430
  pos->position += offset;
    42be:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    42c0:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    42c4:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    42c6:	adds	r3, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    42c8:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    42ca:	uxtb	r3, r3
    42cc:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    42d0:	mov	r7, r0
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    42d2:	movs	r6, #0
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    42d4:	cbz	r4, 42e6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
    if (pos->isContiguous) {
    42d6:	ldrb	r3, [r5, #8]
    42d8:	cbz	r3, 42ec <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3c>
      pos->cluster++;
    42da:	ldr	r3, [r5, #0]
    42dc:	adds	r3, #1
    42de:	str	r3, [r5, #0]
    42e0:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    42e2:	cmp	r4, #0
    42e4:	bne.n	42d6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x26>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    42e6:	movs	r0, #1
    42e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    42ec:	ldr.w	r3, [r7, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    42f0:	ldr.w	r8, [r5]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    42f4:	adds	r3, #1
    42f6:	cmp	r8, r3
    42f8:	bls.n	4302 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x52>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    42fa:	mov.w	r0, #4294967295
    42fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4302:	ldr.w	r3, [r7, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4306:	ldr.w	r0, [r7, #528]	; 0x210

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    430a:	add.w	r9, r3, r8, lsr #7
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    430e:	cmp	r0, #0
    4310:	beq.n	42fa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4312:	ldr.w	r1, [r7, #532]	; 0x214
    4316:	cmp	r9, r1
    4318:	beq.n	4350 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0xa0>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    431a:	ldrb.w	r3, [r7, #524]	; 0x20c
    431e:	lsls	r3, r3, #31
    4320:	bmi.n	4356 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0xa6>
    4322:	add.w	sl, r7, #536	; 0x218
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4326:	ldr	r3, [r0, #0]
    4328:	mov	r2, sl
    432a:	ldr	r3, [r3, #8]
    432c:	mov	r1, r9
    432e:	blx	r3
    4330:	cmp	r0, #0
    4332:	beq.n	42fa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4334:	strb.w	r6, [r7, #524]	; 0x20c
    m_sector = sector;
    4338:	str.w	r9, [r7, #532]	; 0x214
    433c:	mov.w	r8, r8, lsl #2
    4340:	ubfx	r8, r8, #0, #9
    4344:	ldr.w	r3, [sl, r8]
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    4348:	adds	r2, r3, #1
    434a:	beq.n	4378 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0xc8>
    return 0;
  }
  *value = next;
    434c:	str	r3, [r5, #0]
    434e:	b.n	42e0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x30>
    4350:	add.w	sl, r7, #536	; 0x218
    4354:	b.n	433c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x8c>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4356:	ldr	r3, [r0, #0]
    4358:	add.w	sl, r7, #536	; 0x218
    435c:	ldr	r3, [r3, #24]
    435e:	mov	r2, sl
    4360:	blx	r3
    4362:	cmp	r0, #0
    4364:	beq.n	42fa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4366:	ldrb.w	r3, [r7, #524]	; 0x20c
    436a:	ldr.w	r0, [r7, #528]	; 0x210
    436e:	bic.w	r3, r3, #1
    4372:	strb.w	r3, [r7, #524]	; 0x20c
    4376:	b.n	4326 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x76>
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    4378:	movs	r0, #0
        return status;
      }
    }
  }
  return 1;
}
    437a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    437e:	nop

00004380 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4380:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4384:	ldr.w	r3, [r0, #1064]	; 0x428
    4388:	adds	r3, #1
    438a:	cmp	r3, r1
    438c:	bcs.n	4394 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    438e:	movs	r0, #255	; 0xff
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    4390:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4394:	ldr.w	r7, [r0, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4398:	ldr.w	r3, [r0, #528]	; 0x210

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    439c:	add.w	r7, r7, r1, lsr #7
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    43a0:	cmp	r3, #0
    43a2:	beq.n	438e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    43a4:	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    43a6:	ldr.w	r1, [r0, #532]	; 0x214
    43aa:	cmp	r7, r1
    43ac:	mov	r6, r2
    43ae:	mov	r4, r0
    43b0:	beq.n	43f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x70>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    43b2:	ldrb.w	r2, [r0, #524]	; 0x20c
    43b6:	lsls	r0, r2, #31
    43b8:	bmi.n	43f6 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x76>
    43ba:	add.w	r8, r4, #536	; 0x218
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    43be:	ldr	r2, [r3, #0]
    43c0:	mov	r0, r3
    43c2:	mov	r1, r7
    43c4:	ldr	r3, [r2, #8]
    43c6:	mov	r2, r8
    43c8:	blx	r3
    43ca:	cmp	r0, #0
    43cc:	beq.n	438e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    43ce:	movs	r3, #0
    m_sector = sector;
    43d0:	str.w	r7, [r4, #532]	; 0x214
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    43d4:	strb.w	r3, [r4, #524]	; 0x20c
    43d8:	lsls	r1, r5, #2
    43da:	ubfx	r1, r1, #0, #9
    43de:	ldr.w	r3, [r8, r1]
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    43e2:	adds	r2, r3, #1
    return 0;
  }
  *value = next;
  return 1;
    43e4:	itte	ne
    43e6:	movne	r0, #1
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
    43e8:	strne	r3, [r6, #0]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    43ea:	moveq	r0, #0
    43ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    43f0:	add.w	r8, r0, #536	; 0x218
    43f4:	b.n	43d8 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x58>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    43f6:	ldr	r2, [r3, #0]
    43f8:	add.w	r8, r4, #536	; 0x218
    43fc:	ldr.w	r9, [r2, #24]
    4400:	mov	r0, r3
    4402:	mov	r2, r8
    4404:	blx	r9
    4406:	cmp	r0, #0
    4408:	beq.n	438e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    440a:	ldrb.w	r2, [r4, #524]	; 0x20c
    440e:	ldr.w	r3, [r4, #528]	; 0x210
    4412:	bic.w	r2, r2, #1
    4416:	strb.w	r2, [r4, #524]	; 0x20c
    441a:	b.n	43be <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>

0000441c <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    441c:	cmp	r1, #1
    441e:	bls.n	44ae <ExFatPartition::fatPut(unsigned long, unsigned long)+0x92>
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4420:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4424:	ldr.w	r3, [r0, #1064]	; 0x428
    4428:	adds	r3, #1
    442a:	cmp	r1, r3
    442c:	bls.n	4434 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    442e:	movs	r0, #0
}
    4430:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4434:	ldr.w	r7, [r0, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4438:	ldr.w	r3, [r0, #528]	; 0x210
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    443c:	add.w	r7, r7, r1, lsr #7
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4440:	cmp	r3, #0
    4442:	beq.n	442e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
    4444:	mov	r4, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4446:	ldr.w	r1, [r0, #532]	; 0x214
    444a:	cmp	r7, r1
    444c:	mov	r6, r2
    444e:	mov	r5, r0
    4450:	beq.n	44b2 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x96>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4452:	ldrb.w	r2, [r0, #524]	; 0x20c
    4456:	lsls	r2, r2, #31
    4458:	bmi.n	4488 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x6c>
    445a:	add.w	r8, r0, #536	; 0x218
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    445e:	ldr	r2, [r3, #0]
    4460:	mov	r0, r3
    4462:	mov	r1, r7
    4464:	ldr	r3, [r2, #8]
    4466:	mov	r2, r8
    4468:	blx	r3
    446a:	cmp	r0, #0
    446c:	beq.n	442e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    446e:	str.w	r7, [r5, #532]	; 0x214
    4472:	movs	r3, #1
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4474:	lsls	r1, r4, #2
    4476:	ubfx	r1, r1, #0, #9
  }
  m_status |= option & CACHE_STATUS_MASK;
    447a:	strb.w	r3, [r5, #524]	; 0x20c
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    447e:	movs	r0, #1
    4480:	str.w	r6, [r8, r1]
    4484:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4488:	ldr	r2, [r3, #0]
    448a:	add.w	r8, r0, #536	; 0x218
    448e:	ldr.w	r9, [r2, #24]
    4492:	mov	r0, r3
    4494:	mov	r2, r8
    4496:	blx	r9
    4498:	cmp	r0, #0
    449a:	beq.n	442e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    449c:	ldrb.w	r2, [r5, #524]	; 0x20c
    44a0:	ldr.w	r3, [r5, #528]	; 0x210
    44a4:	bic.w	r2, r2, #1
    44a8:	strb.w	r2, [r5, #524]	; 0x20c
    44ac:	b.n	445e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x42>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    44ae:	movs	r0, #0
}
    44b0:	bx	lr
    44b2:	ldrb.w	r3, [r0, #524]	; 0x20c
    44b6:	add.w	r8, r0, #536	; 0x218
    44ba:	orr.w	r3, r3, #1
    44be:	b.n	4474 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x58>

000044c0 <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    44c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44c4:	mov	r5, r1
    44c6:	sub	sp, #12
    44c8:	mov	r6, r0
  uint32_t next;
  uint32_t start = cluster;
    44ca:	mov	r7, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    44cc:	ldr.w	r3, [r6, #1064]	; 0x428
    44d0:	adds	r3, #1
    44d2:	cmp	r5, r3
    44d4:	bls.n	44de <ExFatPartition::freeChain(unsigned long)+0x1e>
  } while (status);

  return true;

 fail:
  return false;
    44d6:	movs	r0, #0
}
    44d8:	add	sp, #12
    44da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    44de:	ldr.w	r3, [r6, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    44e2:	ldr.w	r0, [r6, #528]	; 0x210

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    44e6:	lsrs	r4, r5, #7
    44e8:	add.w	r9, r4, r3
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    44ec:	cmp	r0, #0
    44ee:	beq.n	44d6 <ExFatPartition::freeChain(unsigned long)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    44f0:	ldr.w	r1, [r6, #532]	; 0x214
    44f4:	cmp	r9, r1
    44f6:	beq.w	4684 <ExFatPartition::freeChain(unsigned long)+0x1c4>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    44fa:	ldrb.w	r3, [r6, #524]	; 0x20c
    44fe:	lsls	r3, r3, #31
    4500:	bmi.w	468a <ExFatPartition::freeChain(unsigned long)+0x1ca>
    4504:	add.w	fp, r6, #536	; 0x218
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4508:	ldr	r3, [r0, #0]
    450a:	mov	r2, fp
    450c:	ldr	r3, [r3, #8]
    450e:	mov	r1, r9
    4510:	blx	r3
    4512:	cmp	r0, #0
    4514:	beq.n	44d6 <ExFatPartition::freeChain(unsigned long)+0x16>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4516:	movs	r3, #0
    m_sector = sector;
    4518:	str.w	r9, [r6, #532]	; 0x214
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    451c:	strb.w	r3, [r6, #524]	; 0x20c

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4520:	lsls	r3, r5, #2
    4522:	ubfx	r3, r3, #0, #9
    4526:	add.w	sl, fp, r3
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    452a:	ldr.w	r3, [fp, r3]

  if (next == EXFAT_EOC) {
    452e:	adds	r1, r3, #1
    4530:	itet	ne
    4532:	movne	r8, r3
    4534:	moveq	r3, #0
    4536:	movne	r3, #1
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4538:	cmp	r5, #1
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    453a:	str	r3, [sp, #4]
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    453c:	bls.n	44d6 <ExFatPartition::freeChain(unsigned long)+0x16>
    453e:	ldr.w	r3, [r6, #1064]	; 0x428
    4542:	adds	r3, #1
    4544:	cmp	r5, r3
    4546:	bhi.n	44d6 <ExFatPartition::freeChain(unsigned long)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4548:	ldr.w	r3, [r6, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    454c:	ldr.w	r0, [r6, #528]	; 0x210
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4550:	add	r4, r3
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4552:	cmp	r0, #0
    4554:	beq.n	44d6 <ExFatPartition::freeChain(unsigned long)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4556:	cmp	r9, r4
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4558:	ldrb.w	r3, [r6, #524]	; 0x20c
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    455c:	beq.n	4632 <ExFatPartition::freeChain(unsigned long)+0x172>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    455e:	lsls	r2, r3, #31
    4560:	bmi.n	4638 <ExFatPartition::freeChain(unsigned long)+0x178>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4562:	ldr	r3, [r0, #0]
    4564:	mov	r2, fp
    4566:	ldr	r3, [r3, #8]
    4568:	mov	r1, r4
    456a:	blx	r3
    456c:	cmp	r0, #0
    456e:	beq.n	44d6 <ExFatPartition::freeChain(unsigned long)+0x16>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    4570:	str.w	r4, [r6, #532]	; 0x214
    4574:	movs	r3, #1
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4576:	adds	r5, #1
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4578:	movs	r2, #0
    457a:	cmp	r5, r8
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    457c:	strb.w	r3, [r6, #524]	; 0x20c
    4580:	str.w	r2, [sl]
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4584:	bne.n	458c <ExFatPartition::freeChain(unsigned long)+0xcc>
    4586:	ldr	r3, [sp, #4]
    4588:	cmp	r3, #0
    458a:	bne.n	462e <ExFatPartition::freeChain(unsigned long)+0x16e>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    458c:	subs	r5, r5, r7
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    458e:	ldr.w	r3, [r6, #1064]	; 0x428
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    4592:	subs	r7, #2
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4594:	adds	r2, r5, r7
    4596:	cmp	r2, r3
    4598:	bhi.n	44d6 <ExFatPartition::freeChain(unsigned long)+0x16>
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    459a:	ldr.w	r3, [r6, #1048]	; 0x418
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    459e:	and.w	r4, r7, #7
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    45a2:	cmp	r7, r3
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    45a4:	mov.w	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    45a8:	ldr.w	r3, [r6, #1060]	; 0x424
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    45ac:	it	cc
    45ae:	strcc.w	r7, [r6, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    45b2:	lsl.w	r4, r2, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    45b6:	add.w	r9, r3, r7, lsr #12
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    45ba:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    45bc:	ubfx	r7, r7, #3, #9
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    45c0:	ldr	r0, [r6, #4]
  mask = 1 << (start & 7);
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    45c2:	add.w	sl, r9, #1
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    45c6:	cmp	r0, #0
    45c8:	beq.n	44d6 <ExFatPartition::freeChain(unsigned long)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    45ca:	ldr	r1, [r6, #8]
    45cc:	cmp	r9, r1
    45ce:	beq.n	465a <ExFatPartition::freeChain(unsigned long)+0x19a>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    45d0:	ldrb	r3, [r6, #0]
    45d2:	lsls	r3, r3, #31
    45d4:	bmi.n	4666 <ExFatPartition::freeChain(unsigned long)+0x1a6>
    45d6:	add.w	fp, r6, #12
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    45da:	ldr	r3, [r0, #0]
    45dc:	mov	r2, fp
    45de:	ldr	r3, [r3, #8]
    45e0:	mov	r1, r9
    45e2:	blx	r3
    45e4:	cmp	r0, #0
    45e6:	beq.w	44d6 <ExFatPartition::freeChain(unsigned long)+0x16>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    45ea:	str.w	r9, [r6, #8]
    45ee:	movs	r3, #1
    45f0:	add.w	r1, fp, r7
  }
  m_status |= option & CACHE_STATUS_MASK;
    45f4:	strb	r3, [r6, #0]
    45f6:	add.w	fp, fp, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    45fa:	ldrb	r3, [r1, #0]
    45fc:	tst	r3, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    45fe:	eor.w	r0, r3, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4602:	mov.w	r2, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    4606:	beq.w	44d6 <ExFatPartition::freeChain(unsigned long)+0x16>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    460a:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    460c:	strb	r0, [r1, #0]
        if (--count == 0) {
    460e:	beq.n	4626 <ExFatPartition::freeChain(unsigned long)+0x166>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4610:	ands.w	r4, r2, #255	; 0xff
    4614:	bne.n	45fa <ExFatPartition::freeChain(unsigned long)+0x13a>
    4616:	adds	r1, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4618:	cmp	r1, fp
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    461a:	mov	r7, r4
    461c:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4620:	bne.n	45fa <ExFatPartition::freeChain(unsigned long)+0x13a>
  mask = 1 << (start & 7);
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    4622:	mov	r9, sl
    4624:	b.n	45c0 <ExFatPartition::freeChain(unsigned long)+0x100>
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    4626:	ldr	r3, [sp, #4]
    4628:	cmp	r3, #0
    462a:	beq.n	46ae <ExFatPartition::freeChain(unsigned long)+0x1ee>
    462c:	mov	r7, r8
    462e:	mov	r5, r8
    4630:	b.n	44cc <ExFatPartition::freeChain(unsigned long)+0xc>
    4632:	orr.w	r3, r3, #1
    4636:	b.n	4576 <ExFatPartition::freeChain(unsigned long)+0xb6>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4638:	ldr	r3, [r0, #0]
    463a:	mov	r1, r9
    463c:	ldr	r3, [r3, #24]
    463e:	mov	r2, fp
    4640:	blx	r3
    4642:	cmp	r0, #0
    4644:	beq.w	44d6 <ExFatPartition::freeChain(unsigned long)+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4648:	ldrb.w	r3, [r6, #524]	; 0x20c
    464c:	ldr.w	r0, [r6, #528]	; 0x210
    4650:	bic.w	r3, r3, #1
    4654:	strb.w	r3, [r6, #524]	; 0x20c
    4658:	b.n	4562 <ExFatPartition::freeChain(unsigned long)+0xa2>
    465a:	mov	fp, r6
    465c:	ldrb.w	r3, [fp], #12
    4660:	orr.w	r3, r3, #1
    4664:	b.n	45f0 <ExFatPartition::freeChain(unsigned long)+0x130>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4666:	ldr	r3, [r0, #0]
    4668:	add.w	fp, r6, #12
    466c:	ldr	r3, [r3, #24]
    466e:	mov	r2, fp
    4670:	blx	r3
    4672:	cmp	r0, #0
    4674:	beq.w	44d6 <ExFatPartition::freeChain(unsigned long)+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4678:	ldrb	r3, [r6, #0]
    467a:	ldr	r0, [r6, #4]
    467c:	bic.w	r3, r3, #1
    4680:	strb	r3, [r6, #0]
    4682:	b.n	45da <ExFatPartition::freeChain(unsigned long)+0x11a>
    4684:	add.w	fp, r6, #536	; 0x218
    4688:	b.n	4520 <ExFatPartition::freeChain(unsigned long)+0x60>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    468a:	ldr	r3, [r0, #0]
    468c:	add.w	fp, r6, #536	; 0x218
    4690:	ldr	r3, [r3, #24]
    4692:	mov	r2, fp
    4694:	blx	r3
    4696:	cmp	r0, #0
    4698:	beq.w	44d6 <ExFatPartition::freeChain(unsigned long)+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    469c:	ldrb.w	r3, [r6, #524]	; 0x20c
    46a0:	ldr.w	r0, [r6, #528]	; 0x210
    46a4:	bic.w	r3, r3, #1
    46a8:	strb.w	r3, [r6, #524]	; 0x20c
    46ac:	b.n	4508 <ExFatPartition::freeChain(unsigned long)+0x48>
      start = next;
    }
    cluster = next;
  } while (status);

  return true;
    46ae:	movs	r0, #1

 fail:
  return false;
}
    46b0:	add	sp, #12
    46b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46b6:	nop

000046b8 <ExFatPartition::rootLength()>:
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    46b8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
    46bc:	mov.w	r8, #0
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    46c0:	ldr.w	r4, [r0, #1068]	; 0x42c
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    46c4:	mov	r6, r0
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    46c6:	mov	r7, r8
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    46c8:	ldr.w	r3, [r6, #1064]	; 0x428
    46cc:	adds	r3, #1
    46ce:	cmp	r3, r4
    46d0:	bcs.n	46e4 <ExFatPartition::rootLength()+0x2c>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    46d2:	movs	r3, #0
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
  return nc << bytesPerClusterShift();
    46d4:	ldrb.w	r0, [r6, #1085]	; 0x43d
    46d8:	adds	r0, #9
    46da:	uxtb	r0, r0
    46dc:	lsl.w	r0, r3, r0
}
    46e0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    46e4:	ldr.w	r5, [r6, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    46e8:	ldr.w	r0, [r6, #528]	; 0x210

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    46ec:	add.w	r5, r5, r4, lsr #7
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    46f0:	cmp	r0, #0
    46f2:	beq.n	46d2 <ExFatPartition::rootLength()+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    46f4:	ldr.w	r1, [r6, #532]	; 0x214
    46f8:	cmp	r5, r1
    46fa:	beq.n	4732 <ExFatPartition::rootLength()+0x7a>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    46fc:	ldrb.w	r3, [r6, #524]	; 0x20c
    4700:	lsls	r2, r3, #31
    4702:	bmi.n	4738 <ExFatPartition::rootLength()+0x80>
    4704:	add.w	r9, r6, #536	; 0x218
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4708:	ldr	r3, [r0, #0]
    470a:	mov	r2, r9
    470c:	ldr	r3, [r3, #8]
    470e:	mov	r1, r5
    4710:	blx	r3
    4712:	cmp	r0, #0
    4714:	beq.n	46d2 <ExFatPartition::rootLength()+0x1a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4716:	strb.w	r7, [r6, #524]	; 0x20c
    m_sector = sector;
    471a:	str.w	r5, [r6, #532]	; 0x214

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    471e:	lsls	r4, r4, #2
    4720:	ubfx	r4, r4, #0, #9
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4724:	ldr.w	r4, [r9, r4]

  if (next == EXFAT_EOC) {
    4728:	adds	r3, r4, #1
    472a:	beq.n	475a <ExFatPartition::rootLength()+0xa2>
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    472c:	add.w	r8, r8, #1
    4730:	b.n	46c8 <ExFatPartition::rootLength()+0x10>
    4732:	add.w	r9, r6, #536	; 0x218
    4736:	b.n	471e <ExFatPartition::rootLength()+0x66>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4738:	ldr	r3, [r0, #0]
    473a:	add.w	r9, r6, #536	; 0x218
    473e:	ldr	r3, [r3, #24]
    4740:	mov	r2, r9
    4742:	blx	r3
    4744:	cmp	r0, #0
    4746:	beq.n	46d2 <ExFatPartition::rootLength()+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4748:	ldrb.w	r3, [r6, #524]	; 0x20c
    474c:	ldr.w	r0, [r6, #528]	; 0x210
    4750:	bic.w	r3, r3, #1
    4754:	strb.w	r3, [r6, #524]	; 0x20c
    4758:	b.n	4708 <ExFatPartition::rootLength()+0x50>
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    475a:	add.w	r3, r8, #1
    475e:	b.n	46d4 <ExFatPartition::rootLength()+0x1c>

00004760 <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4760:	cbz	r1, 4798 <exFatHashName(char const*, unsigned int, unsigned short)+0x38>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    4762:	push	{r4, r5, r6}
    4764:	add	r1, r0
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    4766:	ldrb.w	r4, [r0], #1
    if ('a' <= c && c <= 'z') {
      c -= 'a' - 'A';
    476a:	sub.w	r5, r4, #32
    476e:	lsls	r3, r2, #15
    4770:	uxtb	r5, r5
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
    4772:	sub.w	r6, r4, #97	; 0x61
      c -= 'a' - 'A';
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    4776:	cmp	r6, #25
    4778:	it	ls
    477a:	movls	r4, r5
    477c:	orr.w	r2, r3, r2, lsr #1
    4780:	uxtah	r2, r4, r2
    4784:	uxth	r2, r2
    4786:	lsls	r3, r2, #15
    4788:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    478c:	cmp	r1, r0
    478e:	uxth	r2, r2
    4790:	bne.n	4766 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    4792:	mov	r0, r2
    4794:	pop	{r4, r5, r6}
    4796:	bx	lr
    4798:	mov	r0, r2
    479a:	bx	lr

0000479c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    479c:	cbz	r3, 47f0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    479e:	push	{r4, r5, r6}
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    47a0:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    47a2:	cmp	r4, #126	; 0x7e
    47a4:	bhi.n	47e4 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    47a6:	add	r3, r2
    47a8:	adds	r5, r1, r3
    47aa:	add	r2, r1
    47ac:	adds	r0, #2
    47ae:	ldrb.w	r3, [r2], #1
    47b2:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    47b4:	sub.w	r1, r3, #97	; 0x61
    47b8:	cmp	r1, #25
    47ba:	sub.w	r1, r4, #97	; 0x61
    47be:	ite	ls
    47c0:	movls	r6, #32
    47c2:	movhi	r6, #0
    47c4:	cmp	r1, #25
    47c6:	ite	ls
    47c8:	movls	r1, #32
    47ca:	movhi	r1, #0
    47cc:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    47ce:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    47d0:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    47d2:	uxtb	r4, r4
    47d4:	cmp	r4, r3
    47d6:	bne.n	47e4 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    47d8:	cmp	r5, r2
    47da:	beq.n	47ea <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    47dc:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    47e0:	cmp	r4, #126	; 0x7e
    47e2:	bls.n	47ae <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    47e4:	movs	r0, #0
    }
  }
  return true;
}
    47e6:	pop	{r4, r5, r6}
    47e8:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    47ea:	movs	r0, #1
}
    47ec:	pop	{r4, r5, r6}
    47ee:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    47f0:	movs	r0, #1
}
    47f2:	bx	lr

000047f4 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    47f4:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    47f6:	push	{r3, r4, r5, r6, r7, lr}
    47f8:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    47fa:	ldr	r0, [r0, #32]
    47fc:	cbz	r1, 4800 <ExFatFile::addCluster()+0xc>
    47fe:	adds	r1, #1
    4800:	movs	r2, #1
    4802:	bl	4008 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4806:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4808:	mov	r6, r0
  if (find < 2) {
    480a:	bls.n	486c <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    480c:	movs	r3, #1
    480e:	mov	r1, r0
    4810:	mov	r2, r3
    4812:	ldr	r0, [r4, #32]
    4814:	bl	4114 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4818:	mov	r7, r0
    481a:	cbz	r0, 486c <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    481c:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    481e:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4822:	cbz	r0, 4872 <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4824:	lsls	r2, r3, #25
    4826:	bpl.n	4850 <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    4828:	adds	r2, r0, #1
    482a:	cmp	r6, r2
    482c:	beq.n	487a <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    482e:	bic.w	r2, r3, #64	; 0x40
    4832:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4836:	ldr	r3, [r4, #28]
    4838:	b.n	4846 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    483a:	ldr	r0, [r4, #32]
    483c:	bl	441c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4840:	cbz	r0, 486c <ExFatFile::addCluster()+0x78>
    4842:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4844:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    4846:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4848:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    484a:	mov	r1, r3
    484c:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    484e:	bcc.n	483a <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4850:	mov.w	r2, #4294967295
    4854:	mov	r1, r6
    4856:	ldr	r0, [r4, #32]
    4858:	bl	441c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    485c:	cbz	r0, 486c <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    485e:	ldr	r1, [r4, #24]
    4860:	cbz	r1, 487a <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    4862:	mov	r2, r6
    4864:	ldr	r0, [r4, #32]
    4866:	bl	441c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    486a:	cbnz	r0, 487a <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    486c:	movs	r7, #0
}
    486e:	mov	r0, r7
    4870:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4872:	orr.w	r3, r3, #64	; 0x40
    4876:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    487a:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    487c:	mov	r0, r7
    487e:	pop	{r3, r4, r5, r6, r7, pc}

00004880 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4880:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4884:	add.w	sl, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4888:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    488a:	ldmia.w	sl, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    488e:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4890:	add.w	r8, sp, #12
    4894:	stmia.w	r8, {r0, r1, r2}
    4898:	movs	r7, #0
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    489a:	ldr.w	fp, [pc, #328]	; 49e4 <ExFatFile::syncDir()+0x164>
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    489e:	mov	r9, r7
//-----------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    48a0:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    48a2:	movs	r2, #0
    48a4:	mov	r1, r8
    48a6:	ldr	r0, [r6, #32]
    48a8:	bl	4204 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    48ac:	uxtb	r3, r7
    if (!cache) {
    48ae:	mov	r5, r0
    48b0:	cbz	r0, 48c0 <ExFatFile::syncDir()+0x40>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    48b2:	ldrb	r2, [r0, #0]
    48b4:	cmp	r2, #192	; 0xc0
    48b6:	beq.n	496a <ExFatFile::syncDir()+0xea>
    48b8:	cmp	r2, #193	; 0xc1
    48ba:	beq.n	4918 <ExFatFile::syncDir()+0x98>
    48bc:	cmp	r2, #133	; 0x85
    48be:	beq.n	48d4 <ExFatFile::syncDir()+0x54>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    48c0:	ldrb.w	r3, [r6, #50]	; 0x32
    48c4:	orr.w	r3, r3, #1
    48c8:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    48cc:	movs	r0, #0
}
    48ce:	add	sp, #28
    48d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    48d4:	ldrb.w	r1, [r6, #49]	; 0x31
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    48d8:	ldr.w	r2, [fp]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    48dc:	ldrb.w	r9, [r0, #1]
    48e0:	and.w	r1, r1, #55	; 0x37
    48e4:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    48e6:	cbz	r2, 4948 <ExFatFile::syncDir()+0xc8>
          m_vol->dataCacheDirty();
    48e8:	ldr	r0, [r6, #32]
    48ea:	str	r3, [sp, #4]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    48ec:	ldrb.w	r1, [r0, #524]	; 0x20c
    48f0:	orr.w	r1, r1, #1
    48f4:	strb.w	r1, [r0, #524]	; 0x20c
          uint16_t date, time;
          FsDateTime::callback(&date, &time);
    48f8:	add.w	r1, sp, #10
    48fc:	add	r0, sp, #8
    48fe:	blx	r2
          setLe16(df->modifyTime, time);
          setLe16(df->modifyDate, date);
    4900:	ldrh.w	r2, [sp, #8]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          FsDateTime::callback(&date, &time);
          setLe16(df->modifyTime, time);
    4904:	ldrh.w	r1, [sp, #10]
    4908:	strh	r2, [r5, #14]
    490a:	strh	r2, [r5, #18]
    490c:	ldr	r3, [sp, #4]
    490e:	ldrb	r2, [r5, #0]
    4910:	strh	r1, [r5, #12]
    4912:	strh	r1, [r5, #16]
    4914:	cmp	r2, #133	; 0x85
    4916:	beq.n	4948 <ExFatFile::syncDir()+0xc8>
    4918:	subs	r1, r5, #1
    491a:	adds	r5, #31
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    491c:	ldrb.w	r0, [r1, #1]!
    4920:	lsls	r2, r4, #15
    4922:	orr.w	r4, r2, r4, lsr #1
    4926:	uxtah	r4, r0, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    492a:	cmp	r5, r1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    492c:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    492e:	bne.n	491c <ExFatFile::syncDir()+0x9c>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    4930:	cmp	r3, r9
    4932:	beq.n	49a6 <ExFatFile::syncDir()+0x126>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    4934:	movs	r2, #32
    4936:	mov	r1, r8
    4938:	ldr	r0, [r6, #32]
    493a:	bl	42b0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    493e:	cmp	r0, #1
    4940:	add.w	r7, r7, #1
    4944:	beq.n	48a2 <ExFatFile::syncDir()+0x22>
    4946:	b.n	48c0 <ExFatFile::syncDir()+0x40>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4948:	movs	r1, #0
    494a:	b.n	4950 <ExFatFile::syncDir()+0xd0>
    494c:	cmp	r1, #31
    494e:	bhi.n	4930 <ExFatFile::syncDir()+0xb0>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4950:	ldrb	r0, [r5, r1]
    4952:	lsls	r2, r4, #15
    4954:	orr.w	r4, r2, r4, lsr #1
    4958:	uxtah	r4, r0, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    495c:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    495e:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4960:	add.w	r1, r1, #1
    4964:	bne.n	494c <ExFatFile::syncDir()+0xcc>
    4966:	movs	r1, #4
    4968:	b.n	4950 <ExFatFile::syncDir()+0xd0>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    496a:	ldrb.w	r2, [r6, #51]	; 0x33
    496e:	tst.w	r2, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    4972:	ldrb	r2, [r0, #1]
    4974:	ite	ne
    4976:	orrne.w	r2, r2, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    497a:	andeq.w	r2, r2, #253	; 0xfd
    497e:	strb	r2, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    4980:	ldrd	r0, r1, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    4984:	strd	r0, r1, [r5, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    4988:	ldrd	r0, r1, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    498c:	ldr	r2, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    498e:	str	r2, [r5, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    4990:	strd	r0, r1, [r5, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    4994:	ldr	r1, [r6, #32]
    4996:	ldrb.w	r2, [r1, #524]	; 0x20c
    499a:	orr.w	r2, r2, #1
    499e:	strb.w	r2, [r1, #524]	; 0x20c
    49a2:	ldrb	r2, [r5, #0]
    49a4:	b.n	4914 <ExFatFile::syncDir()+0x94>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    49a6:	mov	r1, sl
    49a8:	movs	r2, #1
    49aa:	ldr	r0, [r6, #32]
    49ac:	bl	4204 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    49b0:	cmp	r0, #0
    49b2:	beq.n	48c0 <ExFatFile::syncDir()+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    49b4:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    49b6:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    49b8:	mov	r0, r5
    49ba:	bl	3dac <FsCache::sync()>
    49be:	cmp	r0, #0
    49c0:	beq.w	48c0 <ExFatFile::syncDir()+0x40>
    49c4:	add.w	r0, r5, #524	; 0x20c
    49c8:	bl	3dac <FsCache::sync()>
    49cc:	cmp	r0, #0
    49ce:	beq.w	48c0 <ExFatFile::syncDir()+0x40>
    49d2:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    49d6:	ldr	r3, [r0, #0]
    49d8:	ldr	r3, [r3, #20]
    49da:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    49dc:	cmp	r0, #0
    49de:	beq.w	48c0 <ExFatFile::syncDir()+0x40>
    49e2:	b.n	48ce <ExFatFile::syncDir()+0x4e>
    49e4:	.word	0x20020364

000049e8 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    49e8:	ldrb.w	r2, [r0, #49]	; 0x31
    49ec:	cbz	r2, 4a14 <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    49ee:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    49f0:	ldrb.w	r2, [r0, #51]	; 0x33
    49f4:	lsls	r1, r2, #24
    49f6:	bmi.n	4a18 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    49f8:	ldr	r5, [r0, #32]
    49fa:	mov	r4, r0
    49fc:	mov	r0, r5
    49fe:	bl	3dac <FsCache::sync()>
    4a02:	cbnz	r0, 4a28 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4a04:	ldrb.w	r3, [r4, #50]	; 0x32
    4a08:	orr.w	r3, r3, #1
    4a0c:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    4a10:	movs	r0, #0
}
    4a12:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4a14:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4a16:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4a18:	and.w	r2, r2, #127	; 0x7f
    4a1c:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4a20:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4a24:	b.w	4880 <ExFatFile::syncDir()>
    4a28:	add.w	r0, r5, #524	; 0x20c
    4a2c:	bl	3dac <FsCache::sync()>
    4a30:	cmp	r0, #0
    4a32:	beq.n	4a04 <ExFatFile::sync()+0x1c>
    4a34:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4a38:	ldr	r3, [r0, #0]
    4a3a:	ldr	r3, [r3, #20]
    4a3c:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4a3e:	cmp	r0, #0
    4a40:	beq.n	4a04 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4a42:	movs	r0, #1
    4a44:	pop	{r3, r4, r5, pc}
    4a46:	nop

00004a48 <ExFatFile::preAllocate(unsigned long long)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    4a48:	orrs.w	r1, r2, r3
    4a4c:	beq.n	4a56 <ExFatFile::preAllocate(unsigned long long)+0xe>
    4a4e:	ldrb.w	r1, [r0, #51]	; 0x33
    4a52:	lsls	r1, r1, #30
    4a54:	bmi.n	4a5a <ExFatFile::preAllocate(unsigned long long)+0x12>
    goto fail;
  }
  return true;

 fail:
  return false;
    4a56:	movs	r0, #0
}
    4a58:	bx	lr
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    4a5a:	ldr	r1, [r0, #28]
    4a5c:	cmp	r1, #0
    4a5e:	bne.n	4a56 <ExFatFile::preAllocate(unsigned long long)+0xe>
  return sync(); 
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
    4a60:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4a64:	mov	r6, r0
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    4a66:	ldr	r0, [r0, #32]
    4a68:	mov	r5, r3
    4a6a:	ldrb.w	r3, [r0, #1085]	; 0x43d
    4a6e:	adds	r3, #9
    4a70:	adds.w	r8, r2, #4294967295
    4a74:	uxtb	r3, r3
    4a76:	adc.w	r9, r5, #4294967295
    4a7a:	rsb	r7, r3, #32
    4a7e:	lsl.w	r7, r9, r7
    4a82:	mov	r4, r2
    4a84:	lsr.w	r2, r8, r3
    4a88:	subs	r3, #32
    4a8a:	orrs	r2, r7
    4a8c:	lsr.w	r3, r9, r3
    4a90:	orrs	r2, r3
    4a92:	adds	r7, r2, #1
  find = m_vol->bitmapFind(0, need);
    4a94:	mov	r2, r7
    4a96:	bl	4008 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4a9a:	cmp	r0, #1
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
  find = m_vol->bitmapFind(0, need);
    4a9c:	mov	r8, r0
  if (find < 2) {
    4a9e:	bls.n	4aae <ExFatFile::preAllocate(unsigned long long)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    4aa0:	mov	r1, r0
    4aa2:	mov	r2, r7
    4aa4:	movs	r3, #1
    4aa6:	ldr	r0, [r6, #32]
    4aa8:	bl	4114 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4aac:	cbnz	r0, 4ab4 <ExFatFile::preAllocate(unsigned long long)+0x6c>
    goto fail;
  }
  return true;

 fail:
  return false;
    4aae:	movs	r0, #0
    4ab0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    4ab4:	ldrb.w	r3, [r6, #51]	; 0x33
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4ab8:	ldrb.w	r2, [r6, #49]	; 0x31
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
    4abc:	str.w	r8, [r6, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    4ac0:	orn	r1, r3, #63	; 0x3f
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
    4ac4:	strd	r4, r5, [r6, #8]
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    4ac8:	strb.w	r1, [r6, #51]	; 0x33
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4acc:	cbz	r2, 4ae4 <ExFatFile::preAllocate(unsigned long long)+0x9c>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4ace:	and.w	r3, r3, #127	; 0x7f
    4ad2:	orr.w	r3, r3, #64	; 0x40
    4ad6:	strb.w	r3, [r6, #51]	; 0x33
    return syncDir();
    4ada:	mov	r0, r6
  }
  return true;

 fail:
  return false;
}
    4adc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4ae0:	b.w	4880 <ExFatFile::syncDir()>
  }
  return true;

 fail:
  return false;
}
    4ae4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004ae8 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4ae8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4aec:	ldrb.w	r3, [r0, #49]	; 0x31
    4af0:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4af2:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4af4:	bmi.n	4bae <ExFatFile::addDirCluster()+0xc6>
    4af6:	ldr	r0, [r0, #8]
    4af8:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    4afa:	ldr.w	r3, [r3, #1076]	; 0x434
    4afe:	add	r0, r3
    4b00:	cmp.w	r0, #67108864	; 0x4000000
    4b04:	bcc.n	4b0e <ExFatFile::addDirCluster()+0x26>
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
    4b06:	movs	r6, #0
  }
  return sync();

 fail:
  return false;
}
    4b08:	mov	r0, r6
    4b0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    4b0e:	mov	r0, r4
    4b10:	bl	47f4 <ExFatFile::addCluster()>
    4b14:	mov	r6, r0
    4b16:	cmp	r0, #0
    4b18:	beq.n	4b06 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    4b1a:	ldr	r5, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4b1c:	ldrb.w	r3, [r5, #524]	; 0x20c
    4b20:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    4b22:	add.w	r7, r5, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4b26:	bmi.n	4bea <ExFatFile::addDirCluster()+0x102>
      return nullptr;
    }
    invalidate();
    4b28:	mov	r0, r7
    return m_cacheBuffer;
    4b2a:	add.w	r8, r5, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    4b2e:	bl	3d1c <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    4b32:	mov.w	r2, #512	; 0x200
    4b36:	movs	r1, #0
    4b38:	mov	r0, r8
    4b3a:	bl	cc4c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    4b3e:	ldr	r5, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4b40:	ldr	r3, [r4, #24]
    4b42:	ldrb.w	r1, [r5, #1085]	; 0x43d
    4b46:	ldr.w	r2, [r5, #1060]	; 0x424
    4b4a:	sub.w	sl, r3, #2
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4b4e:	mov.w	r9, #1
    4b52:	lsl.w	sl, sl, r1
    4b56:	lsls.w	r3, r9, r1
    4b5a:	add	sl, r2
    4b5c:	it	ne
    4b5e:	movne	r7, #0
    4b60:	beq.n	4b86 <ExFatFile::addDirCluster()+0x9e>
    4b62:	ldr.w	r0, [r5, #1080]	; 0x438
  }
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    4b66:	ldr	r3, [r0, #0]
    4b68:	add.w	r1, sl, r7
    4b6c:	ldr	r3, [r3, #24]
    4b6e:	mov	r2, r8
    4b70:	blx	r3
    4b72:	adds	r7, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    4b74:	cmp	r0, #0
    4b76:	beq.n	4b06 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4b78:	ldr	r5, [r4, #32]
    4b7a:	ldrb.w	r3, [r5, #1085]	; 0x43d
    4b7e:	lsl.w	r3, r9, r3
    4b82:	cmp	r3, r7
    4b84:	bhi.n	4b62 <ExFatFile::addDirCluster()+0x7a>
    4b86:	ldrb.w	lr, [r4, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4b8a:	ldrb.w	r7, [r4, #51]	; 0x33
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    4b8e:	tst.w	lr, #64	; 0x40
    4b92:	beq.n	4bb6 <ExFatFile::addDirCluster()+0xce>
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4b94:	lsls	r3, r7, #24
    4b96:	bmi.n	4c12 <ExFatFile::addDirCluster()+0x12a>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4b98:	mov	r0, r5
    4b9a:	bl	3dac <FsCache::sync()>
    4b9e:	cbnz	r0, 4bf6 <ExFatFile::addDirCluster()+0x10e>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4ba0:	ldrb.w	r3, [r4, #50]	; 0x32
    4ba4:	orr.w	r3, r3, #1
    4ba8:	strb.w	r3, [r4, #50]	; 0x32
    4bac:	b.n	4b06 <ExFatFile::addDirCluster()+0x1e>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4bae:	ldr	r0, [r0, #32]
    4bb0:	bl	46b8 <ExFatPartition::rootLength()>
    4bb4:	b.n	4af8 <ExFatFile::addDirCluster()+0x10>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4bb6:	orr.w	r7, r7, #128	; 0x80
    m_dataLength  += m_vol->bytesPerCluster();
    4bba:	ldrd	r2, r3, [r4, #8]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4bbe:	strb.w	r7, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    4bc2:	ldr.w	r0, [r5, #1076]	; 0x434
    m_validLength += m_vol->bytesPerCluster();
    4bc6:	ldrd	r8, r9, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4bca:	adds	r2, r2, r0
    4bcc:	mov.w	r1, #0
    4bd0:	adcs	r3, r1
    m_validLength += m_vol->bytesPerCluster();
    4bd2:	adds.w	r0, r0, r8
    4bd6:	adc.w	r1, r1, r9
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4bda:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    4bde:	strd	r0, r1, [r4, #16]
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4be2:	cmp.w	lr, #0
    4be6:	beq.n	4b08 <ExFatFile::addDirCluster()+0x20>
    4be8:	b.n	4b94 <ExFatFile::addDirCluster()+0xac>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4bea:	mov	r0, r7
    4bec:	bl	3dac <FsCache::sync()>
    4bf0:	cmp	r0, #0
    4bf2:	bne.n	4b28 <ExFatFile::addDirCluster()+0x40>
    4bf4:	b.n	4b06 <ExFatFile::addDirCluster()+0x1e>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4bf6:	add.w	r0, r5, #524	; 0x20c
    4bfa:	bl	3dac <FsCache::sync()>
    4bfe:	cmp	r0, #0
    4c00:	beq.n	4ba0 <ExFatFile::addDirCluster()+0xb8>
    4c02:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4c06:	ldr	r3, [r0, #0]
    4c08:	ldr	r3, [r3, #20]
    4c0a:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4c0c:	cmp	r0, #0
    4c0e:	beq.n	4ba0 <ExFatFile::addDirCluster()+0xb8>
    4c10:	b.n	4b08 <ExFatFile::addDirCluster()+0x20>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4c12:	and.w	r7, r7, #127	; 0x7f
    4c16:	strb.w	r7, [r4, #51]	; 0x33
    return syncDir();
    4c1a:	mov	r0, r4
  }
  return sync();

 fail:
  return false;
}
    4c1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4c20:	b.w	4880 <ExFatFile::syncDir()>

00004c24 <ExFatFile::truncate()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4c24:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    4c28:	lsls	r2, r3, #30
    4c2a:	bpl.n	4cc0 <ExFatFile::truncate()+0x9c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    4c2c:	ldr	r1, [r0, #28]
    4c2e:	cmp	r1, #0
    4c30:	beq.n	4cbc <ExFatFile::truncate()+0x98>
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4c32:	push	{r4, r5, r6, r7, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    4c34:	and.w	r2, r3, #64	; 0x40
    4c38:	mov	r4, r0
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4c3a:	sub	sp, #12
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    4c3c:	and.w	r0, r2, #255	; 0xff
    4c40:	cmp	r2, #0
    4c42:	beq.n	4cc4 <ExFatFile::truncate()+0xa0>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4c44:	ldr	r0, [r4, #32]
    if (m_curCluster) {
    4c46:	ldr.w	lr, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4c4a:	ldrb.w	r5, [r0, #1085]	; 0x43d
    4c4e:	ldrd	r6, r7, [r4, #8]
    4c52:	adds	r5, #9
    4c54:	uxtb	r5, r5
    4c56:	adds.w	r6, r6, #4294967295
    4c5a:	rsb	ip, r5, #32
    4c5e:	adc.w	r7, r7, #4294967295
    4c62:	lsr.w	r2, r6, r5
    4c66:	lsl.w	ip, r7, ip
    4c6a:	subs	r5, #32
    4c6c:	orr.w	r2, r2, ip
    4c70:	lsr.w	r5, r7, r5
    4c74:	orrs	r2, r5
    4c76:	adds	r2, #1
    if (m_curCluster) {
    4c78:	cmp.w	lr, #0
    4c7c:	beq.n	4d06 <ExFatFile::truncate()+0xe2>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    4c7e:	subs	r1, #1
    4c80:	rsb	r1, lr, r1
    4c84:	add	r2, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    4c86:	add.w	r1, lr, #1
    4c8a:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4c8c:	cmp	r2, #0
    4c8e:	bne.n	4cfa <ExFatFile::truncate()+0xd6>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4c90:	ldrd	r0, r1, [r4]
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4c94:	ldrb.w	r2, [r4, #49]	; 0x31
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4c98:	orr.w	r3, r3, #128	; 0x80
    4c9c:	strb.w	r3, [r4, #51]	; 0x33
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4ca0:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    4ca4:	strd	r0, r1, [r4, #16]
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4ca8:	cbz	r2, 4cf4 <ExFatFile::truncate()+0xd0>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4caa:	and.w	r3, r3, #127	; 0x7f
    4cae:	strb.w	r3, [r4, #51]	; 0x33
    return syncDir();
    4cb2:	mov	r0, r4
    4cb4:	bl	4880 <ExFatFile::syncDir()>
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4cb8:	add	sp, #12
    4cba:	pop	{r4, r5, r6, r7, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    4cbc:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4cbe:	bx	lr
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    4cc0:	movs	r0, #0
}
    4cc2:	bx	lr
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    4cc4:	ldr	r3, [r4, #24]
    4cc6:	cbnz	r3, 4d0c <ExFatFile::truncate()+0xe8>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    4cc8:	str	r1, [sp, #4]
      m_firstCluster = 0;
    4cca:	str	r3, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    4ccc:	ldr	r0, [r4, #32]
    4cce:	bl	44c0 <ExFatPartition::freeChain(unsigned long)>
    4cd2:	cbz	r0, 4d02 <ExFatFile::truncate()+0xde>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4cd4:	ldrb.w	r3, [r4, #51]	; 0x33
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4cd8:	ldrb.w	r2, [r4, #49]	; 0x31
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4cdc:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4ce0:	orr.w	r3, r3, #128	; 0x80
    4ce4:	strb.w	r3, [r4, #51]	; 0x33
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4ce8:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    4cec:	strd	r0, r1, [r4, #16]
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4cf0:	cmp	r2, #0
    4cf2:	bne.n	4caa <ExFatFile::truncate()+0x86>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    4cf4:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4cf6:	add	sp, #12
    4cf8:	pop	{r4, r5, r6, r7, pc}
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4cfa:	movs	r3, #0
    4cfc:	bl	4114 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4d00:	cbnz	r0, 4d2a <ExFatFile::truncate()+0x106>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    4d02:	movs	r0, #0
    4d04:	b.n	4cb8 <ExFatFile::truncate()+0x94>
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    4d06:	str.w	lr, [r4, #28]
    4d0a:	b.n	4c8a <ExFatFile::truncate()+0x66>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    4d0c:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4d0e:	mov	r1, r3
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    4d10:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4d14:	ldr	r0, [r4, #32]
    4d16:	bl	4380 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4d1a:	sxtb	r0, r0
      if (fg < 0) {
    4d1c:	cmp	r0, #0
    4d1e:	blt.n	4d02 <ExFatFile::truncate()+0xde>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    4d20:	bne.n	4d30 <ExFatFile::truncate()+0x10c>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    4d22:	ldr	r1, [sp, #4]
    4d24:	cmp	r1, #0
    4d26:	beq.n	4cd4 <ExFatFile::truncate()+0xb0>
    4d28:	b.n	4ccc <ExFatFile::truncate()+0xa8>
    4d2a:	ldrb.w	r3, [r4, #51]	; 0x33
    4d2e:	b.n	4c90 <ExFatFile::truncate()+0x6c>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    4d30:	mov.w	r2, #4294967295
    4d34:	ldr	r1, [r4, #24]
    4d36:	ldr	r0, [r4, #32]
    4d38:	bl	441c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4d3c:	cmp	r0, #0
    4d3e:	bne.n	4d22 <ExFatFile::truncate()+0xfe>
    4d40:	b.n	4d02 <ExFatFile::truncate()+0xde>
    4d42:	nop

00004d44 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4d44:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d48:	ldrb.w	r3, [r0, #51]	; 0x33
    4d4c:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4d4e:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4d50:	mov	r6, r0
    4d52:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4d54:	bmi.n	4d6c <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    4d56:	ldrb.w	r3, [r6, #50]	; 0x32
    4d5a:	orr.w	r3, r3, #1
    4d5e:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    4d62:	mov.w	r0, #4294967295
}
    4d66:	add	sp, #20
    4d68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
    4d6c:	lsls	r2, r3, #29
    4d6e:	mov	sl, r1
    4d70:	bmi.w	4f96 <ExFatFile::write(void const*, unsigned int)+0x252>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    4d74:	ldr	r3, [sp, #4]
    4d76:	cmp	r3, #0
    4d78:	beq.w	4fbe <ExFatFile::write(void const*, unsigned int)+0x27a>
    4d7c:	mov	r1, r6
    4d7e:	mov	r8, r3
    4d80:	ldrd	r2, r3, [r1], #24
    4d84:	str	r1, [sp, #12]
    4d86:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4d88:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    4d8a:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4d8c:	ldr.w	r4, [r0, #1072]	; 0x430
    4d90:	mov	r3, fp
    4d92:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    4d94:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    4d98:	cbnz	r4, 4dee <ExFatFile::write(void const*, unsigned int)+0xaa>
      // start of new cluster
      if (m_curCluster != 0) {
    4d9a:	cmp	r5, #0
    4d9c:	beq.w	4f1c <ExFatFile::write(void const*, unsigned int)+0x1d8>
        int fg;

        if (isContiguous()) {
    4da0:	ldrb.w	r3, [r6, #51]	; 0x33
    4da4:	lsls	r3, r3, #25
    4da6:	bpl.w	4f64 <ExFatFile::write(void const*, unsigned int)+0x220>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    4daa:	ldrd	r2, r3, [r6, #8]
    4dae:	ldrb.w	r7, [r0, #1085]	; 0x43d
    4db2:	adds	r7, #9
    4db4:	uxtb	r7, r7
    4db6:	adds.w	r2, r2, #4294967295
    4dba:	adc.w	r3, r3, #4294967295
    4dbe:	rsb	lr, r7, #32
    4dc2:	lsl.w	lr, r3, lr
    4dc6:	lsr.w	r1, r2, r7
    4dca:	subs	r7, #32
    4dcc:	lsr.w	r7, r3, r7
    4dd0:	orr.w	r1, r1, lr
    4dd4:	ldr	r3, [r6, #28]
    4dd6:	orrs	r1, r7
    4dd8:	add	r3, r1
    4dda:	cmp	r5, r3
    4ddc:	bcc.w	4f4a <ExFatFile::write(void const*, unsigned int)+0x206>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    4de0:	mov	r0, r6
    4de2:	bl	47f4 <ExFatFile::addCluster()>
    4de6:	cmp	r0, #0
    4de8:	beq.n	4d56 <ExFatFile::write(void const*, unsigned int)+0x12>
    4dea:	ldr	r0, [r6, #32]
    4dec:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    4dee:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4df2:	ldrb.w	lr, [r0, #1085]	; 0x43d
    4df6:	lsrs	r4, r4, #9
    4df8:	subs	r5, #2
    4dfa:	adds	r1, r4, r7
    4dfc:	lsl.w	r5, r5, lr
    4e00:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    4e02:	cmp.w	r9, #0
    4e06:	bne.w	4f0e <ExFatFile::write(void const*, unsigned int)+0x1ca>
    4e0a:	cmp.w	r8, #512	; 0x200
    4e0e:	bcs.n	4ec0 <ExFatFile::write(void const*, unsigned int)+0x17c>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    4e10:	ldrd	r2, r3, [r6, #16]
    4e14:	ldrd	r4, r5, [r6]
    4e18:	cmp.w	r8, #512	; 0x200
    4e1c:	mov	r7, r8
    4e1e:	it	cs
    4e20:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    4e24:	cmp	r5, r3
    4e26:	it	eq
    4e28:	cmpeq	r4, r2
    4e2a:	ite	cc
    4e2c:	movcc	r2, #1
    4e2e:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4e30:	add.w	r0, r0, #524	; 0x20c
    4e34:	bl	3d28 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    4e38:	cmp	r0, #0
    4e3a:	beq.n	4d56 <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    4e3c:	add	r0, r9
    4e3e:	mov	r2, r7
    4e40:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4e42:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    4e44:	bl	94c8 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4e48:	cmp.w	r9, #512	; 0x200
    4e4c:	beq.w	4f74 <ExFatFile::write(void const*, unsigned int)+0x230>
    4e50:	mov	r0, r7
    4e52:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4e54:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4e58:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4e5c:	adds.w	fp, r2, r0
    4e60:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4e64:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4e66:	mov	r2, fp
    4e68:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4e6a:	it	eq
    4e6c:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    4e6e:	add	sl, r7
    toWrite -= n;
    4e70:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4e74:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4e78:	bcs.n	4e8e <ExFatFile::write(void const*, unsigned int)+0x14a>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4e7a:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    4e7e:	mov	r4, ip
    4e80:	mov	r3, fp
    4e82:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4e86:	orn	r1, r1, #127	; 0x7f
    4e8a:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    4e8e:	cmp.w	r8, #0
    4e92:	bne.w	4d88 <ExFatFile::write(void const*, unsigned int)+0x44>
    4e96:	mov	r2, fp
    4e98:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    4e9a:	ldrd	r0, r1, [r6, #8]
    4e9e:	cmp	r1, r3
    4ea0:	it	eq
    4ea2:	cmpeq	r0, r2
    4ea4:	bcc.n	4fa6 <ExFatFile::write(void const*, unsigned int)+0x262>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    4ea6:	ldr	r3, [pc, #284]	; (4fc4 <ExFatFile::write(void const*, unsigned int)+0x280>)
    4ea8:	ldr	r3, [r3, #0]
    4eaa:	cmp	r3, #0
    4eac:	beq.w	4fba <ExFatFile::write(void const*, unsigned int)+0x276>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4eb0:	ldrb.w	r3, [r6, #51]	; 0x33
    4eb4:	ldr	r0, [sp, #4]
    4eb6:	orn	r3, r3, #127	; 0x7f
    4eba:	strb.w	r3, [r6, #51]	; 0x33
    4ebe:	b.n	4d66 <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    4ec0:	cmp.w	r8, #1024	; 0x400
    4ec4:	bcc.n	4f24 <ExFatFile::write(void const*, unsigned int)+0x1e0>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    4ec6:	movs	r3, #1
    4ec8:	lsl.w	lr, r3, lr
    4ecc:	rsb	lr, r4, lr
    4ed0:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    4ed4:	mov.w	r4, r8, lsr #9
    4ed8:	cmp	r4, lr
    4eda:	it	cs
    4edc:	movcs	r4, lr
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (m_vol->dataCacheSector() <= sector
          && m_vol->dataCacheSector() < (sector + ns)) {
    4ede:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    4ee0:	mov.w	r7, r4, lsl #9
      if (m_vol->dataCacheSector() <= sector
          && m_vol->dataCacheSector() < (sector + ns)) {
    4ee4:	bcc.n	4efa <ExFatFile::write(void const*, unsigned int)+0x1b6>
    4ee6:	adds	r2, r4, r1
    4ee8:	cmp	r2, r3
    4eea:	bls.n	4efa <ExFatFile::write(void const*, unsigned int)+0x1b6>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    4eec:	add.w	r0, r0, #524	; 0x20c
    4ef0:	str	r1, [sp, #8]
    4ef2:	bl	3d1c <FsCache::invalidate()>
    4ef6:	ldr	r0, [r6, #32]
    4ef8:	ldr	r1, [sp, #8]
    4efa:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    4efe:	ldr	r5, [r0, #0]
    4f00:	mov	r3, r4
    4f02:	mov	r2, sl
    4f04:	ldr	r4, [r5, #28]
    4f06:	blx	r4
        // invalidate cache if sector is in cache
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    4f08:	cmp	r0, #0
    4f0a:	bne.n	4e50 <ExFatFile::write(void const*, unsigned int)+0x10c>
    4f0c:	b.n	4d56 <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    4f0e:	rsb	r7, r9, #512	; 0x200
    4f12:	cmp	r7, r8
    4f14:	it	cs
    4f16:	movcs	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    4f18:	movs	r2, #1
    4f1a:	b.n	4e30 <ExFatFile::write(void const*, unsigned int)+0xec>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    4f1c:	ldr	r5, [r6, #28]
    4f1e:	cbz	r5, 4f50 <ExFatFile::write(void const*, unsigned int)+0x20c>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    4f20:	str	r5, [r6, #24]
    4f22:	b.n	4dee <ExFatFile::write(void const*, unsigned int)+0xaa>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    4f24:	ldr.w	r3, [r0, #532]	; 0x214
    4f28:	cmp	r1, r3
    4f2a:	beq.n	4f86 <ExFatFile::write(void const*, unsigned int)+0x242>
    4f2c:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    4f30:	ldr	r3, [r0, #0]
    4f32:	mov	r2, sl
    4f34:	ldr	r3, [r3, #24]
    4f36:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    4f38:	cmp	r0, #0
    4f3a:	beq.w	4d56 <ExFatFile::write(void const*, unsigned int)+0x12>
    4f3e:	mov.w	r0, #512	; 0x200
    4f42:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    4f44:	mov.w	r7, #512	; 0x200
    4f48:	b.n	4e54 <ExFatFile::write(void const*, unsigned int)+0x110>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    4f4a:	adds	r5, #1
    4f4c:	str	r5, [r6, #24]
    4f4e:	b.n	4dee <ExFatFile::write(void const*, unsigned int)+0xaa>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    4f50:	mov	r0, r6
    4f52:	bl	47f4 <ExFatFile::addCluster()>
    4f56:	cmp	r0, #0
    4f58:	beq.w	4d56 <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    4f5c:	ldr	r5, [r6, #24]
    4f5e:	str	r5, [r6, #28]
    4f60:	ldr	r0, [r6, #32]
    4f62:	b.n	4dee <ExFatFile::write(void const*, unsigned int)+0xaa>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4f64:	mov	r1, r5
    4f66:	ldr	r2, [sp, #12]
    4f68:	bl	4380 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    4f6c:	cmp	r0, #0
    4f6e:	bne.w	4dea <ExFatFile::write(void const*, unsigned int)+0xa6>
    4f72:	b.n	4de0 <ExFatFile::write(void const*, unsigned int)+0x9c>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    4f74:	ldr	r0, [r6, #32]
    4f76:	add.w	r0, r0, #524	; 0x20c
    4f7a:	bl	3dac <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    4f7e:	cmp	r0, #0
    4f80:	bne.w	4e50 <ExFatFile::write(void const*, unsigned int)+0x10c>
    4f84:	b.n	4d56 <ExFatFile::write(void const*, unsigned int)+0x12>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    4f86:	add.w	r0, r0, #524	; 0x20c
    4f8a:	str	r1, [sp, #8]
    4f8c:	bl	3d1c <FsCache::invalidate()>
    4f90:	ldr	r0, [r6, #32]
    4f92:	ldr	r1, [sp, #8]
    4f94:	b.n	4f2c <ExFatFile::write(void const*, unsigned int)+0x1e8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
    if (!seekSet(m_validLength)) {
    4f96:	ldrd	r2, r3, [r0, #16]
    4f9a:	bl	3748 <ExFatFile::seekSet(unsigned long long)>
    4f9e:	cmp	r0, #0
    4fa0:	beq.w	4d56 <ExFatFile::write(void const*, unsigned int)+0x12>
    4fa4:	b.n	4d74 <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4fa6:	ldrb.w	r1, [r6, #51]	; 0x33
    4faa:	ldr	r0, [sp, #4]
    4fac:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    4fb0:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4fb4:	strb.w	r1, [r6, #51]	; 0x33
    4fb8:	b.n	4d66 <ExFatFile::write(void const*, unsigned int)+0x22>
    4fba:	ldr	r0, [sp, #4]
    4fbc:	b.n	4d66 <ExFatFile::write(void const*, unsigned int)+0x22>
    4fbe:	ldrd	r2, r3, [r6]
    4fc2:	b.n	4e9a <ExFatFile::write(void const*, unsigned int)+0x156>
    4fc4:	.word	0x20020364

00004fc8 <FatFile::sync() [clone .part.39]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    4fc8:	push	{r4, r5, lr}
  uint16_t date, time;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4fca:	ldrsb.w	r3, [r0, #2]
    4fce:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    4fd0:	sub	sp, #12
    4fd2:	mov	r4, r0
  uint16_t date, time;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4fd4:	blt.n	500a <FatFile::sync() [clone .part.39]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    4fd6:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    4fd8:	add.w	r0, r5, #36	; 0x24
    4fdc:	bl	5aac <FatCache::sync()>
    4fe0:	cbnz	r0, 4ff0 <FatFile::sync() [clone .part.39]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    4fe2:	ldrb	r3, [r4, #1]
    4fe4:	orr.w	r3, r3, #1
    4fe8:	strb	r3, [r4, #1]
  return false;
    4fea:	movs	r0, #0
}
    4fec:	add	sp, #12
    4fee:	pop	{r4, r5, pc}
    4ff0:	add.w	r0, r5, #560	; 0x230
    4ff4:	bl	5aac <FatCache::sync()>
    4ff8:	cmp	r0, #0
    4ffa:	beq.n	4fe2 <FatFile::sync() [clone .part.39]+0x1a>
    4ffc:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4ffe:	ldr	r3, [r0, #0]
    5000:	ldr	r3, [r3, #20]
    5002:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5004:	cmp	r0, #0
    5006:	beq.n	4fe2 <FatFile::sync() [clone .part.39]+0x1a>
    5008:	b.n	4fec <FatFile::sync() [clone .part.39]+0x24>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    500a:	ldr	r0, [r0, #8]
    500c:	ldr	r1, [r4, #24]
    500e:	adds	r0, #36	; 0x24
    5010:	movs	r2, #1
    5012:	bl	5a1c <FatCache::read(unsigned long, unsigned char)>
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    5016:	cmp	r0, #0
    5018:	beq.n	4fe2 <FatFile::sync() [clone .part.39]+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    501a:	ldrh	r3, [r4, #4]
    501c:	and.w	r3, r3, #15
    5020:	lsls	r3, r3, #5
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5022:	adds	r5, r0, r3
    5024:	beq.n	4fe2 <FatFile::sync() [clone .part.39]+0x1a>
    5026:	ldrb	r3, [r0, r3]
    5028:	cmp	r3, #229	; 0xe5
    502a:	beq.n	4fe2 <FatFile::sync() [clone .part.39]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    502c:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    502e:	ldr	r2, [pc, #52]	; (5064 <FatFile::sync() [clone .part.39]+0x9c>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5030:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    5032:	itt	mi
    5034:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5036:	strmi	r3, [r5, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5038:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    503a:	ldr	r2, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    503c:	strh	r3, [r5, #26]
    503e:	lsrs	r3, r3, #16
    5040:	strh	r3, [r5, #20]
    5042:	cbz	r2, 505a <FatFile::sync() [clone .part.39]+0x92>
      FsDateTime::callback(&date, &time);
    5044:	add.w	r1, sp, #6
    5048:	add	r0, sp, #4
    504a:	blx	r2
      setLe16(dir->modifyDate, date);
    504c:	ldrh.w	r3, [sp, #4]
    5050:	ldrh.w	r2, [sp, #6]
    5054:	strh	r3, [r5, #24]
    5056:	strh	r3, [r5, #18]
    5058:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    505a:	ldrb	r3, [r4, #2]
    505c:	and.w	r3, r3, #127	; 0x7f
    5060:	strb	r3, [r4, #2]
    5062:	b.n	4fd6 <FatFile::sync() [clone .part.39]+0xe>
    5064:	.word	0x20020364

00005068 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    5068:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    506c:	ldrb	r3, [r0, #0]
    506e:	lsls	r3, r3, #26
    5070:	bmi.n	507a <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    5072:	ldr	r3, [pc, #168]	; (511c <FatFile::addDirCluster()+0xb4>)
    5074:	ldr	r2, [r0, #20]
    5076:	cmp	r2, r3
    5078:	bls.n	5082 <FatFile::addDirCluster()+0x1a>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    507a:	movs	r6, #0
}
    507c:	mov	r0, r6
    507e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5082:	mov	r2, r0
    5084:	mov	r5, r0
    5086:	ldr.w	r4, [r2, #16]!
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    508a:	ldr	r0, [r0, #8]
    508c:	mov	r1, r4
    508e:	bl	5dac <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5092:	mov	r6, r0
    5094:	cmp	r0, #0
    5096:	beq.n	507a <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    5098:	cbnz	r4, 50f6 <FatFile::addDirCluster()+0x8e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    509a:	ldrb	r3, [r5, #2]
    509c:	ldr	r1, [r5, #16]
    509e:	orr.w	r3, r3, #64	; 0x40
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    50a2:	orn	r3, r3, #127	; 0x7f
    50a6:	strb	r3, [r5, #2]
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    50a8:	ldr	r0, [r5, #8]
    50aa:	bl	5b00 <FatPartition::clusterStartSector(unsigned long) const>
    50ae:	mov	r7, r0
    50b0:	ldr	r0, [r5, #8]
    50b2:	mov	r1, r7
    50b4:	adds	r0, #36	; 0x24
    50b6:	movs	r2, #5
    50b8:	bl	5a1c <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    50bc:	mov	r8, r0
    50be:	cmp	r0, #0
    50c0:	beq.n	507a <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    50c2:	mov.w	r2, #512	; 0x200
    50c6:	movs	r1, #0
    50c8:	bl	cc4c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    50cc:	ldr	r3, [r5, #8]
    50ce:	ldrb	r2, [r3, #4]
    50d0:	cmp	r2, #1
    50d2:	bls.n	5106 <FatFile::addDirCluster()+0x9e>
    50d4:	movs	r4, #1
    50d6:	b.n	50e0 <FatFile::addDirCluster()+0x78>
    50d8:	ldr	r3, [r5, #8]
    50da:	ldrb	r2, [r3, #4]
    50dc:	cmp	r2, r4
    50de:	bls.n	5106 <FatFile::addDirCluster()+0x9e>
    50e0:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    50e2:	ldr	r3, [r0, #0]
    50e4:	adds	r1, r4, r7
    50e6:	ldr	r3, [r3, #24]
    50e8:	mov	r2, r8
    50ea:	blx	r3
    50ec:	adds	r4, #1
    50ee:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    50f0:	cmp	r0, #0
    50f2:	bne.n	50d8 <FatFile::addDirCluster()+0x70>
    50f4:	b.n	507a <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    50f6:	ldr	r1, [r5, #16]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    50f8:	ldrb	r3, [r5, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    50fa:	adds	r4, #1
    50fc:	cmp	r1, r4
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    50fe:	it	ne
    5100:	andne.w	r3, r3, #191	; 0xbf
    5104:	b.n	50a2 <FatFile::addDirCluster()+0x3a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    5106:	ldrb	r3, [r3, #6]
    5108:	ldr	r1, [r5, #20]
    510a:	mov.w	r2, #512	; 0x200
    510e:	lsl.w	r3, r2, r3
    5112:	uxtah	r3, r1, r3
    5116:	str	r3, [r5, #20]
    5118:	b.n	507c <FatFile::addDirCluster()+0x14>
    511a:	nop
    511c:	.word	0x001ffdff

00005120 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5120:	push	{r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    5122:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5124:	sub	sp, #12
    5126:	mov	r4, r0
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    5128:	cbnz	r3, 5136 <FatFile::close()+0x16>
    return true;
    512a:	movs	r0, #1
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    512c:	movs	r3, #0
    512e:	strb	r3, [r4, #0]
  m_flags = 0;
    5130:	strb	r3, [r4, #2]
  return rtn;
}
    5132:	add	sp, #12
    5134:	pop	{r4, r5, pc}
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5136:	ldrsb.w	r3, [r0, #2]
    513a:	cmp	r3, #0
    513c:	blt.n	5178 <FatFile::close()+0x58>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    513e:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5140:	add.w	r0, r5, #36	; 0x24
    5144:	bl	5aac <FatCache::sync()>
    5148:	cbnz	r0, 515e <FatFile::close()+0x3e>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    514a:	ldrb	r3, [r4, #1]
    514c:	orr.w	r3, r3, #1
    5150:	strb	r3, [r4, #1]
  return false;
    5152:	movs	r0, #0
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5154:	movs	r3, #0
    5156:	strb	r3, [r4, #0]
  m_flags = 0;
    5158:	strb	r3, [r4, #2]
  return rtn;
}
    515a:	add	sp, #12
    515c:	pop	{r4, r5, pc}
    515e:	add.w	r0, r5, #560	; 0x230
    5162:	bl	5aac <FatCache::sync()>
    5166:	cmp	r0, #0
    5168:	beq.n	514a <FatFile::close()+0x2a>
    516a:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    516c:	ldr	r3, [r0, #0]
    516e:	ldr	r3, [r3, #20]
    5170:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5172:	cmp	r0, #0
    5174:	beq.n	514a <FatFile::close()+0x2a>
    5176:	b.n	512c <FatFile::close()+0xc>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5178:	ldr	r0, [r0, #8]
    517a:	ldr	r1, [r4, #24]
    517c:	adds	r0, #36	; 0x24
    517e:	movs	r2, #1
    5180:	bl	5a1c <FatCache::read(unsigned long, unsigned char)>
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    5184:	cmp	r0, #0
    5186:	beq.n	514a <FatFile::close()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    5188:	ldrh	r3, [r4, #4]
    518a:	and.w	r3, r3, #15
    518e:	lsls	r3, r3, #5
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5190:	adds	r5, r0, r3
    5192:	beq.n	514a <FatFile::close()+0x2a>
    5194:	ldrb	r3, [r0, r3]
    5196:	cmp	r3, #229	; 0xe5
    5198:	beq.n	514a <FatFile::close()+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    519a:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    519c:	ldr	r2, [pc, #52]	; (51d4 <FatFile::close()+0xb4>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    519e:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    51a0:	itt	mi
    51a2:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    51a4:	strmi	r3, [r5, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    51a6:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    51a8:	ldr	r2, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    51aa:	strh	r3, [r5, #26]
    51ac:	lsrs	r3, r3, #16
    51ae:	strh	r3, [r5, #20]
    51b0:	cbz	r2, 51c8 <FatFile::close()+0xa8>
      FsDateTime::callback(&date, &time);
    51b2:	add.w	r1, sp, #6
    51b6:	add	r0, sp, #4
    51b8:	blx	r2
      setLe16(dir->modifyDate, date);
    51ba:	ldrh.w	r3, [sp, #4]
    51be:	ldrh.w	r2, [sp, #6]
    51c2:	strh	r3, [r5, #24]
    51c4:	strh	r3, [r5, #18]
    51c6:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    51c8:	ldrb	r3, [r4, #2]
    51ca:	and.w	r3, r3, #127	; 0x7f
    51ce:	strb	r3, [r4, #2]
    51d0:	b.n	513e <FatFile::close()+0x1e>
    51d2:	nop
    51d4:	.word	0x20020364

000051d8 <FatFile::preAllocate(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    51d8:	cbnz	r1, 51de <FatFile::preAllocate(unsigned long)+0x6>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    51da:	movs	r0, #0
}
    51dc:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
    51de:	push	{r3, r4, r5, lr}
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    51e0:	ldrb	r3, [r0, #2]
    51e2:	lsls	r3, r3, #30
    51e4:	bmi.n	51ea <FatFile::preAllocate(unsigned long)+0x12>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    51e6:	movs	r0, #0
    51e8:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    51ea:	ldr	r3, [r0, #32]
    51ec:	cmp	r3, #0
    51ee:	bne.n	51e6 <FatFile::preAllocate(unsigned long)+0xe>
    51f0:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    51f2:	ldr	r0, [r0, #8]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    51f4:	ldrb	r3, [r0, #6]
    51f6:	adds	r3, #9
    51f8:	mov	r5, r1
    51fa:	uxtb	r3, r3
    51fc:	subs	r1, #1
    51fe:	lsrs	r1, r3
    5200:	adds	r1, #1
    5202:	add.w	r2, r4, #32
    5206:	bl	5f58 <FatPartition::allocContiguous(unsigned long, unsigned long*)>
    520a:	cmp	r0, #0
    520c:	beq.n	51e6 <FatFile::preAllocate(unsigned long)+0xe>
  }
  m_fileSize = length;

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    520e:	ldrb	r3, [r4, #2]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    5210:	ldrb	r2, [r4, #0]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fileSize = length;
    5212:	str	r5, [r4, #28]

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5214:	orn	r3, r3, #31
    5218:	strb	r3, [r4, #2]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    521a:	cbnz	r2, 521e <FatFile::preAllocate(unsigned long)+0x46>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
}
    521c:	pop	{r3, r4, r5, pc}
    521e:	mov	r0, r4
    5220:	ldmia.w	sp!, {r3, r4, r5, lr}
    5224:	b.w	4fc8 <FatFile::sync() [clone .part.39]>

00005228 <FatFile::open(FatFile*, char const*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, uint8_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
    5228:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    522c:	mov	r6, r0
    522e:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5230:	ldrb	r4, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, uint8_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
    5232:	str	r2, [sp, #4]
    5234:	movs	r0, #0
    5236:	strb.w	r0, [sp, #36]	; 0x24
    523a:	strb.w	r0, [sp, #37]	; 0x25
    523e:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5242:	cbnz	r4, 5250 <FatFile::open(FatFile*, char const*, unsigned char)+0x28>
    5244:	mov	r7, r3
    5246:	ldrb	r3, [r1, #0]
    5248:	tst.w	r3, #112	; 0x70
    524c:	mov	r5, r1
    524e:	bne.n	5258 <FatFile::open(FatFile*, char const*, unsigned char)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    5250:	movs	r0, #0
}
    5252:	add	sp, #72	; 0x48
    5254:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5258:	ldrb	r3, [r2, #0]
    525a:	cmp	r3, #47	; 0x2f
    525c:	mov	r4, r2
    525e:	bne.n	52ac <FatFile::open(FatFile*, char const*, unsigned char)+0x84>
    while (isDirSeparator(*path)) {
      path++;
    5260:	adds	r4, #1
    5262:	str	r4, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5264:	ldrb.w	r8, [r4]
    5268:	cmp.w	r8, #47	; 0x2f
    526c:	beq.n	5260 <FatFile::open(FatFile*, char const*, unsigned char)+0x38>
      path++;
    }
    if (*path == 0) {
    526e:	cmp.w	r8, #0
    5272:	beq.n	5302 <FatFile::open(FatFile*, char const*, unsigned char)+0xda>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5274:	ldr	r5, [r5, #8]
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    5276:	add	r0, sp, #36	; 0x24
    5278:	movs	r2, #36	; 0x24
    527a:	movs	r1, #0
    527c:	bl	cc4c <memset>

  m_vol = vol;
    5280:	str	r5, [sp, #44]	; 0x2c
  switch (vol->fatType()) {
    5282:	ldrb	r3, [r5, #7]
    5284:	cmp	r3, #16
    5286:	beq.n	52fa <FatFile::open(FatFile*, char const*, unsigned char)+0xd2>
    5288:	cmp	r3, #32
    528a:	bne.n	5250 <FatFile::open(FatFile*, char const*, unsigned char)+0x28>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    528c:	movs	r3, #64	; 0x40
    528e:	strb.w	r3, [sp, #36]	; 0x24
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5292:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    5294:	add	r5, sp, #36	; 0x24
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5296:	strb.w	r3, [sp, #38]	; 0x26
    529a:	b.n	52ac <FatFile::open(FatFile*, char const*, unsigned char)+0x84>
    529c:	mov	r0, r6
    529e:	bl	4fc8 <FatFile::sync() [clone .part.39]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    52a2:	movs	r3, #0
    52a4:	ldr	r4, [sp, #4]
    52a6:	strb	r3, [r6, #0]
  m_flags = 0;
    52a8:	strb	r3, [r6, #2]
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    52aa:	add	r5, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    52ac:	add	r2, sp, #4
    52ae:	add	r1, sp, #12
    52b0:	mov	r0, r4
    52b2:	bl	6678 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
    52b6:	add	r2, sp, #12
    52b8:	mov	r1, r5
    52ba:	movs	r3, #1
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    52bc:	cmp	r0, #0
    52be:	beq.n	5250 <FatFile::open(FatFile*, char const*, unsigned char)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    52c0:	ldr	r4, [sp, #4]
    52c2:	ldrb	r4, [r4, #0]
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
    52c4:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    52c6:	cbz	r4, 52e8 <FatFile::open(FatFile*, char const*, unsigned char)+0xc0>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
    52c8:	bl	69c4 <FatFile::open(FatFile*, fname_t*, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    52cc:	mov	r5, r6
    52ce:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
    52d0:	cmp	r0, #0
    52d2:	beq.n	5250 <FatFile::open(FatFile*, char const*, unsigned char)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    52d4:	ldmia	r5!, {r0, r1, r2, r3}
    52d6:	stmia	r4!, {r0, r1, r2, r3}
    52d8:	ldmia	r5!, {r0, r1, r2, r3}
    52da:	stmia	r4!, {r0, r1, r2, r3}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    52dc:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    52de:	ldr	r2, [r5, #0]
    52e0:	str	r2, [r4, #0]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    52e2:	cmp	r3, #0
    52e4:	beq.n	52a2 <FatFile::open(FatFile*, char const*, unsigned char)+0x7a>
    52e6:	b.n	529c <FatFile::open(FatFile*, char const*, unsigned char)+0x74>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    52e8:	mov	r3, r7
    52ea:	add	r2, sp, #12
    52ec:	mov	r1, r5
    52ee:	mov	r0, r6
    52f0:	bl	69c4 <FatFile::open(FatFile*, fname_t*, unsigned char)>

fail:
  return false;
}
    52f4:	add	sp, #72	; 0x48
    52f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    52fa:	movs	r3, #32
    52fc:	strb.w	r3, [sp, #36]	; 0x24
    5300:	b.n	5292 <FatFile::open(FatFile*, char const*, unsigned char)+0x6a>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    5302:	ldr	r4, [r5, #8]
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    5304:	movs	r2, #36	; 0x24
    5306:	mov	r1, r8
    5308:	mov	r0, r6
    530a:	bl	cc4c <memset>

  m_vol = vol;
    530e:	str	r4, [r6, #8]
  switch (vol->fatType()) {
    5310:	ldrb	r3, [r4, #7]
    5312:	cmp	r3, #16
    5314:	beq.n	5324 <FatFile::open(FatFile*, char const*, unsigned char)+0xfc>
    5316:	cmp	r3, #32
    5318:	bne.n	532a <FatFile::open(FatFile*, char const*, unsigned char)+0x102>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    531a:	movs	r3, #64	; 0x40
    531c:	strb	r3, [r6, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    531e:	movs	r0, #1
    5320:	strb	r0, [r6, #2]
    5322:	b.n	5252 <FatFile::open(FatFile*, char const*, unsigned char)+0x2a>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5324:	movs	r3, #32
    5326:	strb	r3, [r6, #0]
    5328:	b.n	531e <FatFile::open(FatFile*, char const*, unsigned char)+0xf6>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    532a:	mov	r0, r8
    532c:	b.n	5252 <FatFile::open(FatFile*, char const*, unsigned char)+0x2a>
    532e:	nop

00005330 <FatFile::open(FatVolume*, char const*, unsigned char)>:
bool FatFile::open(const char* path, uint8_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, uint8_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    5330:	cbz	r1, 533a <FatFile::open(FatVolume*, char const*, unsigned char)+0xa>
    5332:	addw	r1, r1, #1084	; 0x43c
    5336:	b.w	5228 <FatFile::open(FatFile*, char const*, unsigned char)>
}
    533a:	mov	r0, r1
    533c:	bx	lr
    533e:	nop

00005340 <FatFile::openRoot(FatVolume*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    5340:	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
    5342:	ldrb	r4, [r0, #0]
    5344:	cbz	r4, 534a <FatFile::openRoot(FatVolume*)+0xa>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    5346:	movs	r0, #0
    5348:	pop	{r4, r5, r6, pc}
    534a:	mov	r5, r0
    534c:	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    534e:	movs	r2, #36	; 0x24
    5350:	mov	r1, r4
    5352:	bl	cc4c <memset>

  m_vol = vol;
    5356:	str	r6, [r5, #8]
  switch (vol->fatType()) {
    5358:	ldrb	r3, [r6, #7]
    535a:	cmp	r3, #16
    535c:	beq.n	5372 <FatFile::openRoot(FatVolume*)+0x32>
    535e:	cmp	r3, #32
    5360:	bne.n	536e <FatFile::openRoot(FatVolume*)+0x2e>
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5362:	movs	r4, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5364:	movs	r3, #64	; 0x40
    5366:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5368:	strb	r4, [r5, #2]
  return true;
    536a:	mov	r0, r4
    536c:	pop	{r4, r5, r6, pc}

fail:
  return false;
    536e:	mov	r0, r4
}
    5370:	pop	{r4, r5, r6, pc}
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5372:	movs	r4, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5374:	movs	r3, #32
    5376:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5378:	strb	r4, [r5, #2]
  return true;
    537a:	mov	r0, r4
    537c:	pop	{r4, r5, r6, pc}
    537e:	nop

00005380 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5380:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5384:	ldrb	r3, [r0, #2]
    5386:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5388:	sub	sp, #12
    538a:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    538c:	bpl.w	54b0 <FatFile::read(void*, unsigned int)+0x130>
    5390:	mov	r7, r1
    5392:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    5394:	lsls	r6, r1, #28
    5396:	mov	r9, r2
    5398:	bmi.w	54c2 <FatFile::read(void*, unsigned int)+0x142>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    539c:	lsls	r4, r1, #26
    539e:	bpl.n	53b2 <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    53a0:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    53a2:	ldr	r3, [r0, #20]
    53a4:	ldrh	r2, [r2, #8]
    53a6:	rsb	r3, r3, r2, lsl #5
    53aa:	uxth	r3, r3
    53ac:	cmp	r9, r3
    53ae:	it	cs
    53b0:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    53b2:	cmp.w	r9, #0
    53b6:	beq.w	550e <FatFile::read(void*, unsigned int)+0x18e>
    53ba:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    53bc:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    53be:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    53c0:	mov	r6, r9
    53c2:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    53c6:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    53ca:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    53ce:	bpl.n	5450 <FatFile::read(void*, unsigned int)+0xd0>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    53d0:	ldr	r1, [r2, #32]
    53d2:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    53d6:	cmp.w	fp, #0
    53da:	bne.n	5484 <FatFile::read(void*, unsigned int)+0x104>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    53dc:	cmp.w	r6, #512	; 0x200
    53e0:	bcc.n	5484 <FatFile::read(void*, unsigned int)+0x104>
    53e2:	ldr	r3, [r2, #44]	; 0x2c
        || sector == m_vol->cacheSectorNumber()) {
    53e4:	cmp	r1, r3
    53e6:	beq.n	5484 <FatFile::read(void*, unsigned int)+0x104>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    53e8:	cmp.w	r6, #1024	; 0x400
    53ec:	bcc.n	54d4 <FatFile::read(void*, unsigned int)+0x154>
      uint8_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    53ee:	ldrb	r0, [r5, #0]
    53f0:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint8_t ns = toRead >> m_vol->bytesPerSectorShift();
    53f2:	ubfx	fp, r6, #9, #8
      if (!isRootFixed()) {
    53f6:	bmi.n	5406 <FatFile::read(void*, unsigned int)+0x86>
        uint8_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    53f8:	ldrb	r0, [r2, #4]
    53fa:	rsb	r0, r8, r0
    53fe:	uxtb	r0, r0
    5400:	cmp	fp, r0
    5402:	it	cs
    5404:	movcs	fp, r0
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (m_vol->cacheSectorNumber() <= sector
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5406:	cmp	r1, r3
        uint8_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    5408:	mov.w	r4, fp, lsl #9
      if (m_vol->cacheSectorNumber() <= sector
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    540c:	bcc.n	5426 <FatFile::read(void*, unsigned int)+0xa6>
    540e:	add	r3, fp
    5410:	cmp	r1, r3
    5412:	bcs.n	5426 <FatFile::read(void*, unsigned int)+0xa6>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5414:	add.w	r0, r2, #36	; 0x24
    5418:	str	r1, [sp, #4]
    541a:	bl	5aac <FatCache::sync()>
        // flush cache if a sector is in the cache
        if (!m_vol->cacheSyncData()) {
    541e:	cmp	r0, #0
    5420:	beq.n	54b0 <FatFile::read(void*, unsigned int)+0x130>
    5422:	ldr	r2, [r5, #8]
    5424:	ldr	r1, [sp, #4]
    5426:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    5428:	ldr	r2, [r0, #0]
    542a:	mov	r3, fp
    542c:	ldr.w	fp, [r2, #12]
    5430:	mov	r2, r7
    5432:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    5434:	cmp	r0, #0
    5436:	beq.n	54b0 <FatFile::read(void*, unsigned int)+0x130>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5438:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    543a:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    543c:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    543e:	add	r7, r4
    m_curPosition += n;
    5440:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5442:	beq.n	550e <FatFile::read(void*, unsigned int)+0x18e>
    5444:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5446:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5448:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    544a:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    544e:	bmi.n	53d0 <FatFile::read(void*, unsigned int)+0x50>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5450:	ldrb.w	r8, [r2, #5]
    5454:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    5458:	cmp.w	fp, #0
    545c:	bne.n	54d0 <FatFile::read(void*, unsigned int)+0x150>
    545e:	cmp.w	r8, #0
    5462:	bne.n	54d0 <FatFile::read(void*, unsigned int)+0x150>
        // start of new cluster
        if (m_curPosition == 0) {
    5464:	cmp	r3, #0
    5466:	bne.n	54e8 <FatFile::read(void*, unsigned int)+0x168>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5468:	lsls	r1, r1, #25
    546a:	ite	mi
    546c:	ldrmi	r1, [r2, #32]
    546e:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    5470:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    5472:	mov	r0, r2
    5474:	bl	5b00 <FatPartition::clusterStartSector(unsigned long) const>
    5478:	ldr	r2, [r5, #8]
    547a:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    547e:	cmp.w	fp, #0
    5482:	beq.n	53dc <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5484:	add.w	r0, r2, #36	; 0x24
    5488:	movs	r2, #0
    548a:	bl	5a1c <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    548e:	cbz	r0, 54b0 <FatFile::read(void*, unsigned int)+0x130>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    5490:	rsb	r4, fp, #512	; 0x200
    5494:	cmp	r4, r6
    5496:	it	cs
    5498:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    549a:	add.w	r1, r0, fp
    549e:	mov	r2, r4
    54a0:	mov	r0, r7
    54a2:	bl	94c8 <memcpy>
    54a6:	b.n	5438 <FatFile::read(void*, unsigned int)+0xb8>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    54a8:	ldrb	r3, [r5, #0]
    54aa:	tst.w	r3, #112	; 0x70
    54ae:	bne.n	5510 <FatFile::read(void*, unsigned int)+0x190>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    54b0:	ldrb	r3, [r5, #1]
  return -1;
    54b2:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    54b6:	orr.w	r3, r3, #2
    54ba:	strb	r3, [r5, #1]
  return -1;
}
    54bc:	add	sp, #12
    54be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    54c2:	ldr	r3, [r0, #28]
    54c4:	ldr	r2, [r0, #20]
    54c6:	subs	r3, r3, r2
    54c8:	cmp	r9, r3
    54ca:	it	cs
    54cc:	movcs	r9, r3
    54ce:	b.n	53b2 <FatFile::read(void*, unsigned int)+0x32>
    54d0:	ldr	r1, [r5, #16]
    54d2:	b.n	5472 <FatFile::read(void*, unsigned int)+0xf2>
    54d4:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    54d6:	ldr	r3, [r0, #0]
    54d8:	mov	r2, r7
    54da:	ldr	r3, [r3, #8]
    54dc:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    54de:	cmp	r0, #0
    54e0:	beq.n	54b0 <FatFile::read(void*, unsigned int)+0x130>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    54e2:	mov.w	r4, #512	; 0x200
    54e6:	b.n	5438 <FatFile::read(void*, unsigned int)+0xb8>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    54e8:	lsls	r3, r1, #28
    54ea:	bpl.n	54f8 <FatFile::read(void*, unsigned int)+0x178>
    54ec:	ldrb	r3, [r5, #2]
    54ee:	lsls	r4, r3, #25
    54f0:	bpl.n	54f8 <FatFile::read(void*, unsigned int)+0x178>
          m_curCluster++;
    54f2:	ldr	r1, [r5, #16]
    54f4:	adds	r1, #1
    54f6:	b.n	5470 <FatFile::read(void*, unsigned int)+0xf0>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    54f8:	mov	r0, r2
    54fa:	ldr	r1, [r5, #16]
    54fc:	mov	r2, sl
    54fe:	bl	5b0c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5502:	cmp	r0, #0
    5504:	blt.n	54b0 <FatFile::read(void*, unsigned int)+0x130>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    5506:	beq.n	54a8 <FatFile::read(void*, unsigned int)+0x128>
    5508:	ldr	r2, [r5, #8]
    550a:	ldr	r1, [r5, #16]
    550c:	b.n	5472 <FatFile::read(void*, unsigned int)+0xf2>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    550e:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    5510:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    5514:	add	sp, #12
    5516:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    551a:	nop

0000551c <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    551c:	push	{r4, r5, r6, lr}
    551e:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5520:	movs	r2, #1
    5522:	add.w	r1, sp, #7
    5526:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5528:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    552a:	ldr	r5, [r0, #16]
    552c:	bl	5380 <FatFile::read(void*, unsigned int)>
    5530:	cmp	r0, #1
    5532:	it	eq
    5534:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    5538:	str	r6, [r4, #20]
    553a:	it	ne
    553c:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    5540:	str	r5, [r4, #16]
  return c;
}
    5542:	add	sp, #8
    5544:	pop	{r4, r5, r6, pc}
    5546:	nop

00005548 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
    5548:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    554a:	ldr	r3, [r0, #20]
    554c:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
    5550:	sub	sp, #12
    5552:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    5554:	cbz	r5, 5558 <FatFile::readDirCache(bool)+0x10>
    5556:	cbnz	r1, 557c <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    5558:	movs	r2, #1
    555a:	add.w	r1, sp, #7
    555e:	mov	r0, r4
    5560:	bl	5380 <FatFile::read(void*, unsigned int)>
    5564:	sxtb	r0, r0
    if  (n != 1) {
    5566:	cmp	r0, #1
    5568:	bne.n	5582 <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    556a:	ldr	r3, [r4, #20]
    556c:	adds	r3, #31
    556e:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    5570:	ldr	r0, [r4, #8]
    5572:	adds	r0, #48	; 0x30
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<dir_t*>(m_vol->cacheAddress()) + i;
    5574:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    5578:	add	sp, #12
    557a:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    557c:	adds	r3, #32
    557e:	str	r3, [r0, #20]
    5580:	b.n	5570 <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<dir_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    5582:	movs	r0, #0
}
    5584:	add	sp, #12
    5586:	pop	{r4, r5, pc}

00005588 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5588:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    558c:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    558e:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5590:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    5592:	cbz	r3, 55c2 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5594:	ldr	r2, [r0, #20]
    5596:	cmp	r2, r1
    5598:	mov	r6, r1
    559a:	beq.n	5612 <FatFile::seekSet(unsigned long)+0x8a>
    return true;
  }
  if (pos == 0) {
    559c:	cbnz	r1, 55b0 <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    559e:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    55a0:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    55a2:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    55a4:	bic.w	r3, r3, #32
    55a8:	strb	r3, [r4, #2]
  return true;
    55aa:	movs	r0, #1
    55ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    55b0:	lsls	r0, r3, #28
    55b2:	bmi.n	55ca <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    55b4:	lsls	r1, r3, #26
    55b6:	bpl.n	55d0 <FatFile::seekSet(unsigned long)+0x48>
    55b8:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    55ba:	ldrh	r3, [r3, #8]
    55bc:	cmp.w	r6, r3, lsl #5
    55c0:	bls.n	55a0 <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    55c2:	str	r7, [r4, #16]
  return false;
    55c4:	movs	r0, #0
    55c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    55ca:	ldr	r1, [r4, #28]
    55cc:	cmp	r6, r1
    55ce:	bhi.n	55c2 <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    55d0:	ldr.w	lr, [r4, #8]
    55d4:	ldrb.w	r5, [lr, #6]
    55d8:	adds	r5, #9
    55da:	uxtb	r1, r5
    55dc:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    55de:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    55e0:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    55e2:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    55e4:	cmp	r0, r5
    55e6:	bhi.n	55ea <FatFile::seekSet(unsigned long)+0x62>
    55e8:	cbnz	r2, 5618 <FatFile::seekSet(unsigned long)+0x90>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    55ea:	lsls	r3, r3, #25
    55ec:	ite	mi
    55ee:	ldrmi.w	r3, [lr, #32]
    55f2:	ldrpl	r3, [r4, #32]
    55f4:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    55f6:	add.w	r8, r4, #16
    55fa:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    55fc:	cmp	r5, #0
    55fe:	beq.n	55a0 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5600:	ldr	r1, [r4, #16]
    5602:	ldr	r0, [r4, #8]
    5604:	bl	5b0c <FatPartition::fatGet(unsigned long, unsigned long*)>
    5608:	cmp	r0, #0
    560a:	add.w	r5, r5, #4294967295
    560e:	bgt.n	55fa <FatFile::seekSet(unsigned long)+0x72>
    5610:	b.n	55c2 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    5612:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    5614:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    5618:	subs	r5, r5, r0
    561a:	b.n	55f6 <FatFile::seekSet(unsigned long)+0x6e>

0000561c <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
    561c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5620:	mov	r5, r1
    5622:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5624:	movs	r1, #0
    5626:	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
    5628:	mov	r4, r0
    562a:	mov	r7, r3
    562c:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5630:	bl	cc4c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5634:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    5636:	ldr	r3, [r5, #32]
    5638:	str	r3, [r4, #12]
  dir_t* dir = reinterpret_cast<dir_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    563a:	and.w	r5, r8, #15
    563e:	add.w	r3, r0, #48	; 0x30
    5642:	add.w	r5, r3, r5, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5646:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    5648:	strh.w	r8, [r4, #4]
    564c:	ldrb	r2, [r5, #11]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = reinterpret_cast<dir_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    564e:	lsls	r3, r2, #28
    5650:	bmi.n	5674 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    5652:	and.w	r2, r2, #23
    5656:	strb	r2, [r4, #0]
  if (isFileDir(dir)) {
    5658:	ldrb	r3, [r5, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    565a:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    565c:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    5660:	itt	eq
    5662:	orreq.w	r2, r2, #8
    5666:	strbeq	r2, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
    5668:	tst.w	r7, #50	; 0x32
    566c:	beq.n	567e <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x62>
    if (isSubDir() || isReadOnly()) {
    566e:	tst.w	r2, #17
    5672:	beq.n	567e <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x62>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    5674:	movs	r0, #0
    5676:	strb	r0, [r4, #0]
  m_flags = 0;
    5678:	strb	r0, [r4, #2]
  return false;
    567a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // save open flags for read/write
  m_flags = oflag & FILE_FLAG_OFLAG;
    567e:	and.w	r2, r7, #7
    5682:	strb	r2, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    5684:	ldrh	r1, [r5, #20]
    5686:	ldrh	r3, [r5, #26]
    5688:	ldr	r6, [r0, #44]	; 0x2c
    }
  }
  // save open flags for read/write
  m_flags = oflag & FILE_FLAG_OFLAG;

  m_dirSector = m_vol->cacheSectorNumber();
    568a:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    568c:	lsls	r6, r7, #27

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    568e:	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
    5692:	bpl.n	56a2 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x86>
    if (!(oflag & O_WRITE)) {
    5694:	lsls	r5, r7, #30
    5696:	bpl.n	5674 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x58>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5698:	cbnz	r1, 56c0 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    569a:	orn	r2, r2, #127	; 0x7f
    569e:	strb	r2, [r4, #2]
    56a0:	b.n	56a8 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x8c>
  } else {
    m_firstCluster = firstCluster;
    56a2:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    56a4:	ldr	r3, [r5, #28]
    m_fileSize = getLe32(dir->fileSize);
    56a6:	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    56a8:	lsls	r3, r7, #26
    56aa:	bmi.n	56b2 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    56ac:	movs	r0, #1

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
    56ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    56b2:	ldr	r1, [r4, #28]
    56b4:	mov	r0, r4
    56b6:	bl	5588 <FatFile::seekSet(unsigned long)>
    56ba:	cmp	r0, #0
    56bc:	bne.n	56ac <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x90>
    56be:	b.n	5674 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x58>
  if (oflag & O_TRUNC) {
    if (!(oflag & O_WRITE)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    56c0:	bl	6264 <FatPartition::freeChain(unsigned long)>
    56c4:	cmp	r0, #0
    56c6:	beq.n	5674 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x58>
    56c8:	ldrb	r2, [r4, #2]
    56ca:	b.n	569a <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x7e>

000056cc <FatFile::sync()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    56cc:	ldrb	r3, [r0, #0]
    56ce:	cbz	r3, 5712 <FatFile::sync()+0x46>
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    56d0:	push	{r4, r5, lr}
  uint16_t date, time;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    56d2:	ldrsb.w	r3, [r0, #2]
    56d6:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    56d8:	sub	sp, #12
    56da:	mov	r4, r0
  uint16_t date, time;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    56dc:	blt.n	5716 <FatFile::sync()+0x4a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    56de:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    56e0:	add.w	r0, r5, #36	; 0x24
    56e4:	bl	5aac <FatCache::sync()>
    56e8:	cbnz	r0, 56f8 <FatFile::sync()+0x2c>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    56ea:	ldrb	r3, [r4, #1]
    56ec:	orr.w	r3, r3, #1
    56f0:	strb	r3, [r4, #1]
  return false;
    56f2:	movs	r0, #0
}
    56f4:	add	sp, #12
    56f6:	pop	{r4, r5, pc}
    56f8:	add.w	r0, r5, #560	; 0x230
    56fc:	bl	5aac <FatCache::sync()>
    5700:	cmp	r0, #0
    5702:	beq.n	56ea <FatFile::sync()+0x1e>
    5704:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5706:	ldr	r3, [r0, #0]
    5708:	ldr	r3, [r3, #20]
    570a:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    570c:	cmp	r0, #0
    570e:	beq.n	56ea <FatFile::sync()+0x1e>
    5710:	b.n	56f4 <FatFile::sync()+0x28>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    return true;
    5712:	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5714:	bx	lr
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5716:	ldr	r0, [r0, #8]
    5718:	ldr	r1, [r4, #24]
    571a:	adds	r0, #36	; 0x24
    571c:	movs	r2, #1
    571e:	bl	5a1c <FatCache::read(unsigned long, unsigned char)>
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    5722:	cmp	r0, #0
    5724:	beq.n	56ea <FatFile::sync()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    5726:	ldrh	r3, [r4, #4]
    5728:	and.w	r3, r3, #15
    572c:	lsls	r3, r3, #5
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    572e:	adds	r5, r0, r3
    5730:	beq.n	56ea <FatFile::sync()+0x1e>
    5732:	ldrb	r3, [r0, r3]
    5734:	cmp	r3, #229	; 0xe5
    5736:	beq.n	56ea <FatFile::sync()+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5738:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    573a:	ldr	r2, [pc, #68]	; (5780 <FatFile::sync()+0xb4>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    573c:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    573e:	itt	mi
    5740:	ldrmi	r3, [r4, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5742:	strmi	r3, [r5, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5744:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5746:	ldr	r2, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5748:	strh	r3, [r5, #26]
    574a:	lsrs	r3, r3, #16
    574c:	strh	r3, [r5, #20]
    574e:	cbz	r2, 5766 <FatFile::sync()+0x9a>
      FsDateTime::callback(&date, &time);
    5750:	add.w	r1, sp, #6
    5754:	add	r0, sp, #4
    5756:	blx	r2
      setLe16(dir->modifyDate, date);
    5758:	ldrh.w	r3, [sp, #4]
    575c:	ldrh.w	r2, [sp, #6]
    5760:	strh	r3, [r5, #24]
    5762:	strh	r3, [r5, #18]
    5764:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5766:	ldrb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
    5768:	ldr	r5, [r4, #8]
      setLe16(dir->modifyDate, date);
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    576a:	and.w	r3, r3, #127	; 0x7f
    576e:	strb	r3, [r4, #2]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5770:	add.w	r0, r5, #36	; 0x24
    5774:	bl	5aac <FatCache::sync()>
    5778:	cmp	r0, #0
    577a:	beq.n	56ea <FatFile::sync()+0x1e>
    577c:	b.n	56f8 <FatFile::sync()+0x2c>
    577e:	nop
    5780:	.word	0x20020364

00005784 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5784:	ldrb	r3, [r0, #2]
    5786:	lsls	r3, r3, #30
    5788:	bpl.n	57c0 <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    578a:	ldr	r3, [r0, #32]
    578c:	cbz	r3, 57bc <FatFile::truncate()+0x38>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    578e:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    5790:	ldr	r1, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    5792:	sub	sp, #8
    5794:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    5796:	cbnz	r1, 57d6 <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    5798:	str	r3, [sp, #4]
    m_firstCluster = 0;
    579a:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    579c:	mov	r1, r3
    579e:	ldr	r0, [r4, #8]
    57a0:	bl	6264 <FatPartition::freeChain(unsigned long)>
    57a4:	cbz	r0, 57d2 <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    57a6:	ldrb	r3, [r4, #2]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    57a8:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    57aa:	ldr	r1, [r4, #20]
    57ac:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    57ae:	orn	r3, r3, #127	; 0x7f
    57b2:	strb	r3, [r4, #2]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    57b4:	cbnz	r2, 57f2 <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    57b6:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    57b8:	add	sp, #8
    57ba:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    57bc:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    57be:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    57c0:	movs	r0, #0
}
    57c2:	bx	lr
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    57c4:	mvn.w	r2, #4026531840	; 0xf0000000
    57c8:	ldr	r1, [r4, #16]
    57ca:	ldr	r0, [r4, #8]
    57cc:	bl	5c5c <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    57d0:	cbnz	r0, 57ea <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    57d2:	movs	r0, #0
    57d4:	b.n	57b8 <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    57d6:	add	r2, sp, #8
    57d8:	movs	r3, #0
    57da:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    57de:	ldr	r0, [r0, #8]
    57e0:	bl	5b0c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    57e4:	cmp	r0, #0
    57e6:	blt.n	57d2 <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    57e8:	bne.n	57c4 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    57ea:	ldr	r3, [sp, #4]
    57ec:	cmp	r3, #0
    57ee:	beq.n	57a6 <FatFile::truncate()+0x22>
    57f0:	b.n	579c <FatFile::truncate()+0x18>
    57f2:	mov	r0, r4
    57f4:	bl	4fc8 <FatFile::sync() [clone .part.39]>
    57f8:	b.n	57b8 <FatFile::truncate()+0x34>
    57fa:	nop

000057fc <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    57fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5800:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5802:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5804:	sub	sp, #12
    5806:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5808:	bmi.n	581c <FatFile::write(void const*, unsigned int)+0x20>

  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    580a:	ldrb	r3, [r4, #1]
    580c:	orr.w	r3, r3, #1
    5810:	strb	r3, [r4, #1]
  return -1;
    5812:	mov.w	r0, #4294967295
}
    5816:	add	sp, #12
    5818:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    581c:	mov	r8, r1
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
    581e:	lsls	r1, r3, #29
    5820:	mov	r9, r2
    5822:	bmi.w	59ce <FatFile::write(void const*, unsigned int)+0x1d2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    5826:	ldr	r3, [r4, #20]
    5828:	mvns	r2, r3
    582a:	cmp	r9, r2
    582c:	bhi.n	580a <FatFile::write(void const*, unsigned int)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    582e:	cmp.w	r9, #0
    5832:	beq.w	59e6 <FatFile::write(void const*, unsigned int)+0x1ea>
    5836:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5838:	mov.w	sl, #0
    583c:	b.n	58b4 <FatFile::write(void const*, unsigned int)+0xb8>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    583e:	cmp	r1, #0
    5840:	beq.w	594c <FatFile::write(void const*, unsigned int)+0x150>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    5844:	ldrb	r2, [r4, #2]
    5846:	lsls	r2, r2, #25
    5848:	bpl.w	5970 <FatFile::write(void const*, unsigned int)+0x174>
    584c:	ldr	r2, [r4, #28]
    584e:	cmp	r2, r3
    5850:	bls.w	5970 <FatFile::write(void const*, unsigned int)+0x174>
          m_curCluster++;
    5854:	adds	r1, #1
    5856:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5858:	bl	5b00 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    585c:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5860:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5862:	bcc.n	5916 <FatFile::write(void const*, unsigned int)+0x11a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    5864:	cmp.w	r6, #1024	; 0x400
    5868:	ldr	r0, [r4, #8]
    586a:	bcc.n	5930 <FatFile::write(void const*, unsigned int)+0x134>
      // use multiple sector write command
      uint8_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    586c:	ldrb	r2, [r0, #4]
    586e:	ldr	r7, [r0, #44]	; 0x2c
    5870:	subs	r2, r2, r5
      uint8_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    5872:	ubfx	r3, r6, #9, #8
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint8_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    5876:	uxtb	r2, r2
    5878:	cmp	r3, r2
    587a:	it	cs
    587c:	movcs	r3, r2
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      if (m_vol->cacheSectorNumber() <= sector
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    587e:	cmp	r7, r1
      uint8_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint8_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    5880:	mov.w	r5, r3, lsl #9
      if (m_vol->cacheSectorNumber() <= sector
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    5884:	bhi.n	5898 <FatFile::write(void const*, unsigned int)+0x9c>
    5886:	add	r7, r3
    5888:	cmp	r7, r1
    588a:	bls.n	5898 <FatFile::write(void const*, unsigned int)+0x9c>
    588c:	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    5890:	mov.w	r2, #4294967295
    5894:	str	r2, [r0, #44]	; 0x2c
    5896:	ldr	r0, [r4, #8]
    5898:	ldr	r0, [r0, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    589a:	ldr	r7, [r0, #0]
    589c:	mov	r2, r8
    589e:	ldr	r7, [r7, #28]
    58a0:	blx	r7
        // invalidate cache if sector is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    58a2:	cmp	r0, #0
    58a4:	beq.n	580a <FatFile::write(void const*, unsigned int)+0xe>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    58a6:	ldr	r3, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    58a8:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    58aa:	add	r3, r5
    src += n;
    58ac:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    58ae:	str	r3, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    58b0:	beq.w	59e6 <FatFile::write(void const*, unsigned int)+0x1ea>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    58b4:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    58b6:	ldr	r1, [r4, #16]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    58b8:	ldrb	r2, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    58ba:	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    58be:	ubfx	r7, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    58c2:	bne.n	5906 <FatFile::write(void const*, unsigned int)+0x10a>
    58c4:	cmp	r7, #0
    58c6:	beq.n	583e <FatFile::write(void const*, unsigned int)+0x42>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    58c8:	bl	5b00 <FatPartition::clusterStartSector(unsigned long) const>
    58cc:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    58ce:	rsb	r5, r7, #512	; 0x200
    58d2:	cmp	r5, r6
    58d4:	ldr	r0, [r4, #8]
    58d6:	it	cs
    58d8:	movcs	r5, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    58da:	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    58dc:	adds	r0, #36	; 0x24
    58de:	bl	5a1c <FatCache::read(unsigned long, unsigned char)>
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    58e2:	cmp	r0, #0
    58e4:	beq.n	580a <FatFile::write(void const*, unsigned int)+0xe>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    58e6:	add	r0, r7
    58e8:	mov	r2, r5
    58ea:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    58ec:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    58ee:	bl	94c8 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    58f2:	cmp.w	r7, #512	; 0x200
    58f6:	bne.n	58a6 <FatFile::write(void const*, unsigned int)+0xaa>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    58f8:	ldr	r0, [r4, #8]
    58fa:	adds	r0, #36	; 0x24
    58fc:	bl	5aac <FatCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    5900:	cmp	r0, #0
    5902:	bne.n	58a6 <FatFile::write(void const*, unsigned int)+0xaa>
    5904:	b.n	580a <FatFile::write(void const*, unsigned int)+0xe>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5906:	bl	5b00 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    590a:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    590c:	cmp	r7, #0
    590e:	bne.n	58ce <FatFile::write(void const*, unsigned int)+0xd2>
    5910:	cmp.w	r6, #512	; 0x200
    5914:	bcs.n	5864 <FatFile::write(void const*, unsigned int)+0x68>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5916:	ldr	r2, [r4, #20]
    5918:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    591a:	ldr	r0, [r4, #8]
    591c:	cmp.w	r6, #512	; 0x200
    5920:	mov	r5, r6
    5922:	it	cs
    5924:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5928:	cmp	r2, r3
    592a:	bcc.n	59b2 <FatFile::write(void const*, unsigned int)+0x1b6>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    592c:	movs	r2, #5
    592e:	b.n	58dc <FatFile::write(void const*, unsigned int)+0xe0>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    5930:	ldr	r3, [r0, #44]	; 0x2c
    5932:	cmp	r3, r1
    5934:	beq.n	59c0 <FatFile::write(void const*, unsigned int)+0x1c4>
    5936:	ldr	r0, [r0, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5938:	ldr	r3, [r0, #0]
    593a:	mov	r2, r8
    593c:	ldr	r3, [r3, #24]
    593e:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    5940:	cmp	r0, #0
    5942:	beq.w	580a <FatFile::write(void const*, unsigned int)+0xe>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5946:	mov.w	r5, #512	; 0x200
    594a:	b.n	58a6 <FatFile::write(void const*, unsigned int)+0xaa>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    594c:	ldr	r1, [r4, #32]
    594e:	cmp	r1, #0
    5950:	bne.n	5856 <FatFile::write(void const*, unsigned int)+0x5a>
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5952:	add.w	r2, r4, #16
    5956:	bl	5dac <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    595a:	cmp	r0, #0
    595c:	beq.w	580a <FatFile::write(void const*, unsigned int)+0xe>
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5960:	ldrb	r3, [r4, #2]
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5962:	ldr	r1, [r4, #16]
    5964:	str	r1, [r4, #32]
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5966:	orn	r3, r3, #63	; 0x3f
    596a:	strb	r3, [r4, #2]
    596c:	ldr	r0, [r4, #8]
    596e:	b.n	5858 <FatFile::write(void const*, unsigned int)+0x5c>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5970:	add.w	fp, r4, #16
    5974:	mov	r2, fp
    5976:	bl	5b0c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    597a:	cmp	r0, #0
    597c:	blt.w	580a <FatFile::write(void const*, unsigned int)+0xe>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    5980:	bne.n	5a10 <FatFile::write(void const*, unsigned int)+0x214>
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5982:	ldr	r3, [r4, #16]
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5984:	ldr	r0, [r4, #8]
    5986:	str	r3, [sp, #4]
    5988:	mov	r2, fp
    598a:	mov	r1, r3
    598c:	bl	5dac <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5990:	cmp	r0, #0
    5992:	beq.w	580a <FatFile::write(void const*, unsigned int)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    5996:	ldr	r3, [sp, #4]
    5998:	cbz	r3, 59dc <FatFile::write(void const*, unsigned int)+0x1e0>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    599a:	ldr	r1, [r4, #16]
    599c:	adds	r3, #1
    599e:	cmp	r1, r3
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    59a0:	ldrb	r3, [r4, #2]
    59a2:	it	ne
    59a4:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    59a8:	orn	r3, r3, #127	; 0x7f
    59ac:	strb	r3, [r4, #2]
    59ae:	ldr	r0, [r4, #8]
    59b0:	b.n	5858 <FatFile::write(void const*, unsigned int)+0x5c>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    59b2:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    59b4:	tst.w	r3, #32
    59b8:	ite	eq
    59ba:	moveq	r2, #1
    59bc:	movne	r2, #5
    59be:	b.n	58dc <FatFile::write(void const*, unsigned int)+0xe0>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    59c0:	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    59c4:	mov.w	r3, #4294967295
    59c8:	str	r3, [r0, #44]	; 0x2c
    59ca:	ldr	r0, [r4, #8]
    59cc:	b.n	5936 <FatFile::write(void const*, unsigned int)+0x13a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
    if (!seekSet(m_fileSize)) {
    59ce:	ldr	r1, [r0, #28]
    59d0:	bl	5588 <FatFile::seekSet(unsigned long)>
    59d4:	cmp	r0, #0
    59d6:	beq.w	580a <FatFile::write(void const*, unsigned int)+0xe>
    59da:	b.n	5826 <FatFile::write(void const*, unsigned int)+0x2a>
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    59dc:	ldrb	r3, [r4, #2]
    59de:	ldr	r1, [r4, #16]
    59e0:	orr.w	r3, r3, #64	; 0x40
    59e4:	b.n	59a8 <FatFile::write(void const*, unsigned int)+0x1ac>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    59e6:	ldr	r2, [r4, #28]
    59e8:	cmp	r2, r3
    59ea:	bcc.n	59fe <FatFile::write(void const*, unsigned int)+0x202>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    59ec:	ldr	r3, [pc, #40]	; (5a18 <FatFile::write(void const*, unsigned int)+0x21c>)
    59ee:	ldr	r3, [r3, #0]
    59f0:	cbz	r3, 5a0c <FatFile::write(void const*, unsigned int)+0x210>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    59f2:	ldrb	r3, [r4, #2]
    59f4:	orn	r3, r3, #127	; 0x7f
    59f8:	mov	r0, r9
    59fa:	strb	r3, [r4, #2]
    59fc:	b.n	5816 <FatFile::write(void const*, unsigned int)+0x1a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    59fe:	ldrb	r2, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    5a00:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5a02:	orn	r3, r2, #127	; 0x7f
    5a06:	mov	r0, r9
    5a08:	strb	r3, [r4, #2]
    5a0a:	b.n	5816 <FatFile::write(void const*, unsigned int)+0x1a>
    5a0c:	mov	r0, r9
    5a0e:	b.n	5816 <FatFile::write(void const*, unsigned int)+0x1a>
    5a10:	ldr	r0, [r4, #8]
    5a12:	ldr	r1, [r4, #16]
    5a14:	b.n	5858 <FatFile::write(void const*, unsigned int)+0x5c>
    5a16:	nop
    5a18:	.word	0x20020364

00005a1c <FatCache::read(unsigned long, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    5a1c:	push	{r3, r4, r5, r6, r7, lr}
    5a1e:	mov	r7, r1
  if (m_lbn != sector) {
    5a20:	ldr	r1, [r0, #8]
    5a22:	cmp	r1, r7
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    5a24:	mov	r5, r0
    5a26:	mov	r4, r2
  if (m_lbn != sector) {
    5a28:	beq.n	5a48 <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5a2a:	ldrb	r3, [r0, #0]
    5a2c:	lsls	r0, r3, #31
    5a2e:	bmi.n	5a5a <FatCache::read(unsigned long, unsigned char)+0x3e>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    5a30:	lsls	r3, r4, #29
    5a32:	add.w	r6, r5, #12
    5a36:	bpl.n	5a7c <FatCache::read(unsigned long, unsigned char)+0x60>
    5a38:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    5a3a:	and.w	r4, r4, #3
    5a3e:	orrs	r4, r3
    5a40:	strb	r4, [r5, #0]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5a42:	str	r7, [r5, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;
    5a44:	mov	r0, r6
    5a46:	pop	{r3, r4, r5, r6, r7, pc}
    5a48:	mov	r6, r0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    5a4a:	and.w	r4, r4, #3
    5a4e:	ldrsb.w	r3, [r6], #12
    5a52:	orrs	r4, r3
    5a54:	strb	r4, [r5, #0]
  return &m_buffer;
    5a56:	mov	r0, r6
    5a58:	pop	{r3, r4, r5, r6, r7, pc}
    5a5a:	ldr	r3, [r5, #4]
    5a5c:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5a5e:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5a60:	add.w	r6, r5, #12
    5a64:	ldr	r3, [r3, #24]
    5a66:	mov	r2, r6
    5a68:	blx	r3
    5a6a:	cbz	r0, 5a8e <FatCache::read(unsigned long, unsigned char)+0x72>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5a6c:	ldrb	r3, [r5, #0]
    5a6e:	lsls	r2, r3, #30
    5a70:	bmi.n	5a92 <FatCache::read(unsigned long, unsigned char)+0x76>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5a72:	bic.w	r3, r3, #1
    5a76:	strb	r3, [r5, #0]
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    5a78:	lsls	r3, r4, #29
    5a7a:	bmi.n	5a38 <FatCache::read(unsigned long, unsigned char)+0x1c>
    5a7c:	ldr	r3, [r5, #4]
    5a7e:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5a80:	ldr	r3, [r0, #0]
    5a82:	mov	r2, r6
    5a84:	ldr	r3, [r3, #8]
    5a86:	mov	r1, r7
    5a88:	blx	r3
      if (!m_part->readSector(sector, m_buffer.data)) {
    5a8a:	cmp	r0, #0
    5a8c:	bne.n	5a38 <FatCache::read(unsigned long, unsigned char)+0x1c>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    5a8e:	movs	r0, #0
    5a90:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5a92:	ldr	r3, [r5, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5a94:	ldr	r2, [r5, #8]
    5a96:	ldr	r0, [r3, #0]
    5a98:	ldr	r1, [r3, #16]
    5a9a:	ldr	r3, [r0, #0]
    5a9c:	add	r1, r2
    5a9e:	ldr	r3, [r3, #24]
    5aa0:	mov	r2, r6
    5aa2:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5aa4:	cmp	r0, #0
    5aa6:	beq.n	5a8e <FatCache::read(unsigned long, unsigned char)+0x72>
    5aa8:	ldrb	r3, [r5, #0]
    5aaa:	b.n	5a72 <FatCache::read(unsigned long, unsigned char)+0x56>

00005aac <FatCache::sync()>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    5aac:	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    5aae:	ldrb	r3, [r0, #0]
    5ab0:	lsls	r1, r3, #31
    5ab2:	bmi.n	5aba <FatCache::sync()+0xe>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
    5ab4:	movs	r4, #1

fail:
  return false;
}
    5ab6:	mov	r0, r4
    5ab8:	pop	{r3, r4, r5, r6, r7, pc}
    5aba:	ldr	r3, [r0, #4]
    5abc:	ldr	r1, [r0, #8]
    5abe:	mov	r5, r0
    5ac0:	ldr	r0, [r3, #0]
    5ac2:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5ac4:	add.w	r6, r5, #12
    5ac8:	ldr	r3, [r3, #24]
    5aca:	mov	r2, r6
    5acc:	blx	r3
    5ace:	mov	r4, r0
    5ad0:	cbz	r0, 5afa <FatCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5ad2:	ldrb	r3, [r5, #0]
    5ad4:	lsls	r2, r3, #30
    5ad6:	bmi.n	5ae2 <FatCache::sync()+0x36>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5ad8:	bic.w	r3, r3, #1
    5adc:	strb	r3, [r5, #0]
  }
  return true;

fail:
  return false;
}
    5ade:	mov	r0, r4
    5ae0:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5ae2:	ldr	r3, [r5, #4]
    5ae4:	ldr	r1, [r5, #8]
    5ae6:	ldr	r0, [r3, #0]
    5ae8:	ldr	r7, [r3, #16]
    5aea:	ldr	r3, [r0, #0]
    5aec:	mov	r2, r6
    5aee:	add	r1, r7
    5af0:	ldr	r3, [r3, #24]
    5af2:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5af4:	cbz	r0, 5afa <FatCache::sync()+0x4e>
    5af6:	ldrb	r3, [r5, #0]
    5af8:	b.n	5ad8 <FatCache::sync()+0x2c>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    5afa:	movs	r4, #0
}
    5afc:	mov	r0, r4
    5afe:	pop	{r3, r4, r5, r6, r7, pc}

00005b00 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5b00:	ldrb	r3, [r0, #6]
    5b02:	ldr	r0, [r0, #20]
    5b04:	subs	r1, #2
    5b06:	lsls	r1, r3
}
    5b08:	add	r0, r1
    5b0a:	bx	lr

00005b0c <FatPartition::fatGet(unsigned long, unsigned long*)>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5b0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b10:	ldrb	r3, [r0, #7]
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5b12:	cmp	r3, #32
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5b14:	mov	r4, r0
    5b16:	mov	r5, r1
    5b18:	mov	r7, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5b1a:	beq.n	5ba8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5b1c:	cmp	r3, #16
    5b1e:	bne.n	5b72 <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5b20:	ldr	r3, [r0, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5b22:	ldr.w	r1, [r0, #568]	; 0x238
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5b26:	ubfx	r6, r5, #8, #8
    5b2a:	add	r6, r3
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5b2c:	cmp	r6, r1

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5b2e:	ldrb.w	r3, [r0, #560]	; 0x230
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5b32:	beq.n	5b7a <FatPartition::fatGet(unsigned long, unsigned long*)+0x6e>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5b34:	lsls	r0, r3, #31
    5b36:	bmi.n	5b80 <FatPartition::fatGet(unsigned long, unsigned long*)+0x74>
    5b38:	add.w	r8, r4, #572	; 0x23c
    5b3c:	ldr.w	r3, [r4, #564]	; 0x234
    5b40:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5b42:	ldr	r3, [r0, #0]
    5b44:	mov	r2, r8
    5b46:	ldr	r3, [r3, #8]
    5b48:	mov	r1, r6
    5b4a:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5b4c:	cbz	r0, 5b72 <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5b4e:	str.w	r6, [r4, #568]	; 0x238
    5b52:	movs	r3, #2
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5b54:	uxtb	r5, r5
    5b56:	add.w	r5, r4, r5, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    5b5a:	strb.w	r3, [r4, #560]	; 0x230
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    5b5e:	ldrh.w	r3, [r5, #572]	; 0x23c
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    5b62:	ldr	r2, [r4, #28]
    5b64:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    5b66:	itte	ls
    5b68:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    5b6a:	strls	r3, [r7, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    5b6c:	movhi	r0, #0
    5b6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    5b72:	mov.w	r0, #4294967295
    5b76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b7a:	orr.w	r3, r3, #2
    5b7e:	b.n	5b54 <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    5b80:	ldr.w	r3, [r4, #564]	; 0x234
    5b84:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5b86:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5b88:	add.w	r8, r4, #572	; 0x23c
    5b8c:	ldr	r3, [r3, #24]
    5b8e:	mov	r2, r8
    5b90:	blx	r3
    5b92:	cmp	r0, #0
    5b94:	beq.n	5b72 <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5b96:	ldrb.w	r3, [r4, #560]	; 0x230
    5b9a:	lsls	r2, r3, #30
    5b9c:	bmi.n	5c1c <FatPartition::fatGet(unsigned long, unsigned long*)+0x110>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5b9e:	bic.w	r3, r3, #1
    5ba2:	strb.w	r3, [r4, #560]	; 0x230
    5ba6:	b.n	5b3c <FatPartition::fatGet(unsigned long, unsigned long*)+0x30>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5ba8:	ldr	r6, [r0, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5baa:	ldr.w	r1, [r0, #568]	; 0x238

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5bae:	ldrb.w	r3, [r0, #560]	; 0x230

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5bb2:	add.w	r6, r6, r5, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5bb6:	cmp	r6, r1
    5bb8:	beq.n	5bee <FatPartition::fatGet(unsigned long, unsigned long*)+0xe2>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5bba:	lsls	r0, r3, #31
    5bbc:	bmi.n	5bf4 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe8>
    5bbe:	add.w	r8, r4, #572	; 0x23c
    5bc2:	ldr.w	r3, [r4, #564]	; 0x234
    5bc6:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5bc8:	ldr	r3, [r0, #0]
    5bca:	mov	r2, r8
    5bcc:	ldr	r3, [r3, #8]
    5bce:	mov	r1, r6
    5bd0:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5bd2:	cmp	r0, #0
    5bd4:	beq.n	5b72 <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5bd6:	str.w	r6, [r4, #568]	; 0x238
    5bda:	movs	r3, #2
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5bdc:	and.w	r5, r5, #127	; 0x7f
    5be0:	add.w	r5, r4, r5, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    5be4:	strb.w	r3, [r4, #560]	; 0x230
    5be8:	ldr.w	r3, [r5, #572]	; 0x23c
    5bec:	b.n	5b62 <FatPartition::fatGet(unsigned long, unsigned long*)+0x56>
    5bee:	orr.w	r3, r3, #2
    5bf2:	b.n	5bdc <FatPartition::fatGet(unsigned long, unsigned long*)+0xd0>
    5bf4:	ldr.w	r3, [r4, #564]	; 0x234
    5bf8:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5bfa:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5bfc:	add.w	r8, r4, #572	; 0x23c
    5c00:	ldr	r3, [r3, #24]
    5c02:	mov	r2, r8
    5c04:	blx	r3
    5c06:	cmp	r0, #0
    5c08:	beq.n	5b72 <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5c0a:	ldrb.w	r3, [r4, #560]	; 0x230
    5c0e:	lsls	r2, r3, #30
    5c10:	bmi.n	5c3c <FatPartition::fatGet(unsigned long, unsigned long*)+0x130>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5c12:	bic.w	r3, r3, #1
    5c16:	strb.w	r3, [r4, #560]	; 0x230
    5c1a:	b.n	5bc2 <FatPartition::fatGet(unsigned long, unsigned long*)+0xb6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5c1c:	ldr.w	r3, [r4, #564]	; 0x234
    5c20:	ldr.w	r2, [r4, #568]	; 0x238
    5c24:	ldr	r0, [r3, #0]
    5c26:	ldr	r1, [r3, #16]
    5c28:	ldr	r3, [r0, #0]
    5c2a:	add	r1, r2
    5c2c:	ldr	r3, [r3, #24]
    5c2e:	mov	r2, r8
    5c30:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5c32:	cmp	r0, #0
    5c34:	beq.n	5b72 <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
    5c36:	ldrb.w	r3, [r4, #560]	; 0x230
    5c3a:	b.n	5b9e <FatPartition::fatGet(unsigned long, unsigned long*)+0x92>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5c3c:	ldr.w	r3, [r4, #564]	; 0x234
    5c40:	ldr.w	r2, [r4, #568]	; 0x238
    5c44:	ldr	r0, [r3, #0]
    5c46:	ldr	r1, [r3, #16]
    5c48:	ldr	r3, [r0, #0]
    5c4a:	add	r1, r2
    5c4c:	ldr	r3, [r3, #24]
    5c4e:	mov	r2, r8
    5c50:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5c52:	cmp	r0, #0
    5c54:	beq.n	5b72 <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
    5c56:	ldrb.w	r3, [r4, #560]	; 0x230
    5c5a:	b.n	5c12 <FatPartition::fatGet(unsigned long, unsigned long*)+0x106>

00005c5c <FatPartition::fatPut(unsigned long, unsigned long)>:
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5c5c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c60:	ldrb	r3, [r0, #7]
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5c62:	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5c64:	mov	r4, r0
    5c66:	mov	r5, r1
    5c68:	mov	r7, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5c6a:	beq.n	5cc0 <FatPartition::fatPut(unsigned long, unsigned long)+0x64>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    5c6c:	cmp	r3, #16
    5c6e:	beq.n	5c76 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    5c70:	movs	r0, #0
    5c72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5c76:	ldr	r3, [r0, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5c78:	ldr.w	r1, [r0, #568]	; 0x238
    return true;
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5c7c:	ubfx	r6, r5, #8, #8
    5c80:	add	r6, r3
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5c82:	cmp	r6, r1

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5c84:	ldrb.w	r3, [r0, #560]	; 0x230
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5c88:	beq.n	5d0a <FatPartition::fatPut(unsigned long, unsigned long)+0xae>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5c8a:	lsls	r0, r3, #31
    5c8c:	bmi.n	5d16 <FatPartition::fatPut(unsigned long, unsigned long)+0xba>
    5c8e:	add.w	r8, r4, #572	; 0x23c
    5c92:	ldr.w	r3, [r4, #564]	; 0x234
    5c96:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5c98:	ldr	r3, [r0, #0]
    5c9a:	mov	r2, r8
    5c9c:	ldr	r3, [r3, #8]
    5c9e:	mov	r1, r6
    5ca0:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5ca2:	cmp	r0, #0
    5ca4:	beq.n	5c70 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5ca6:	str.w	r6, [r4, #568]	; 0x238
    5caa:	movs	r3, #3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5cac:	uxtb	r5, r5
    5cae:	add.w	r5, r4, r5, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    5cb2:	strb.w	r3, [r4, #560]	; 0x230
    5cb6:	strh.w	r7, [r5, #572]	; 0x23c
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    5cba:	movs	r0, #1
    5cbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5cc0:	ldr	r6, [r0, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5cc2:	ldr.w	r1, [r0, #568]	; 0x238

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5cc6:	ldrb.w	r3, [r0, #560]	; 0x230

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5cca:	add.w	r6, r6, r5, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5cce:	cmp	r1, r6
    5cd0:	beq.n	5d10 <FatPartition::fatPut(unsigned long, unsigned long)+0xb4>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5cd2:	lsls	r0, r3, #31
    5cd4:	bmi.n	5d3e <FatPartition::fatPut(unsigned long, unsigned long)+0xe2>
    5cd6:	add.w	r8, r4, #572	; 0x23c
    5cda:	ldr.w	r3, [r4, #564]	; 0x234
    5cde:	ldr	r0, [r3, #0]
    5ce0:	ldr	r3, [r0, #0]
    5ce2:	mov	r2, r8
    5ce4:	ldr	r3, [r3, #8]
    5ce6:	mov	r1, r6
    5ce8:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5cea:	cmp	r0, #0
    5cec:	beq.n	5c70 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5cee:	str.w	r6, [r4, #568]	; 0x238
    5cf2:	movs	r3, #3
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5cf4:	and.w	r5, r5, #127	; 0x7f
    5cf8:	add.w	r5, r4, r5, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    5cfc:	strb.w	r3, [r4, #560]	; 0x230
    5d00:	str.w	r7, [r5, #572]	; 0x23c
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    5d04:	movs	r0, #1
    5d06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d0a:	orr.w	r3, r3, #3
    5d0e:	b.n	5cac <FatPartition::fatPut(unsigned long, unsigned long)+0x50>
    5d10:	orr.w	r3, r3, #3
    5d14:	b.n	5cf4 <FatPartition::fatPut(unsigned long, unsigned long)+0x98>
    5d16:	ldr.w	r3, [r4, #564]	; 0x234
    5d1a:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5d1c:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5d1e:	add.w	r8, r4, #572	; 0x23c
    5d22:	ldr	r3, [r3, #24]
    5d24:	mov	r2, r8
    5d26:	blx	r3
    5d28:	cmp	r0, #0
    5d2a:	beq.n	5c70 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5d2c:	ldrb.w	r3, [r4, #560]	; 0x230
    5d30:	lsls	r2, r3, #30
    5d32:	bmi.n	5d66 <FatPartition::fatPut(unsigned long, unsigned long)+0x10a>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5d34:	bic.w	r3, r3, #1
    5d38:	strb.w	r3, [r4, #560]	; 0x230
    5d3c:	b.n	5c92 <FatPartition::fatPut(unsigned long, unsigned long)+0x36>
    5d3e:	ldr.w	r3, [r4, #564]	; 0x234
    5d42:	ldr	r0, [r3, #0]
    5d44:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5d46:	add.w	r8, r4, #572	; 0x23c
    5d4a:	ldr	r3, [r3, #24]
    5d4c:	mov	r2, r8
    5d4e:	blx	r3
    5d50:	cmp	r0, #0
    5d52:	beq.n	5c70 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5d54:	ldrb.w	r3, [r4, #560]	; 0x230
    5d58:	lsls	r2, r3, #30
    5d5a:	bmi.n	5d88 <FatPartition::fatPut(unsigned long, unsigned long)+0x12c>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5d5c:	bic.w	r3, r3, #1
    5d60:	strb.w	r3, [r4, #560]	; 0x230
    5d64:	b.n	5cda <FatPartition::fatPut(unsigned long, unsigned long)+0x7e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5d66:	ldr.w	r3, [r4, #564]	; 0x234
    5d6a:	ldr.w	r2, [r4, #568]	; 0x238
    5d6e:	ldr	r0, [r3, #0]
    5d70:	ldr	r1, [r3, #16]
    5d72:	ldr	r3, [r0, #0]
    5d74:	add	r1, r2
    5d76:	ldr	r3, [r3, #24]
    5d78:	mov	r2, r8
    5d7a:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5d7c:	cmp	r0, #0
    5d7e:	beq.w	5c70 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
    5d82:	ldrb.w	r3, [r4, #560]	; 0x230
    5d86:	b.n	5d34 <FatPartition::fatPut(unsigned long, unsigned long)+0xd8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5d88:	ldr.w	r3, [r4, #564]	; 0x234
    5d8c:	ldr.w	r2, [r4, #568]	; 0x238
    5d90:	ldr	r0, [r3, #0]
    5d92:	ldr	r1, [r3, #16]
    5d94:	ldr	r3, [r0, #0]
    5d96:	add	r1, r2
    5d98:	ldr	r3, [r3, #24]
    5d9a:	mov	r2, r8
    5d9c:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5d9e:	cmp	r0, #0
    5da0:	beq.w	5c70 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
    5da4:	ldrb.w	r3, [r4, #560]	; 0x230
    5da8:	b.n	5d5c <FatPartition::fatPut(unsigned long, unsigned long)+0x100>
    5daa:	nop

00005dac <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    5dac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5db0:	mov	r4, r0
    5db2:	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
    5db4:	mov	r7, r1
    5db6:	cmp	r1, #0
    5db8:	bne.w	5ec4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x118>
    5dbc:	ldr	r6, [r0, #12]
    5dbe:	ldr	r3, [r4, #28]
    5dc0:	mov	r5, r6
    5dc2:	b.n	5e06 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5a>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5dc4:	ldrb.w	r3, [r4, #560]	; 0x230
    5dc8:	lsls	r0, r3, #31
    5dca:	bmi.n	5e4a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x9e>
    5dcc:	add.w	sl, r4, #572	; 0x23c
    5dd0:	ldr.w	r3, [r4, #564]	; 0x234
    5dd4:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5dd6:	ldr	r3, [r0, #0]
    5dd8:	mov	r2, sl
    5dda:	ldr	r3, [r3, #8]
    5ddc:	mov	r1, r9
    5dde:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5de0:	cbz	r0, 5e42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    5de2:	ldr	r3, [r4, #28]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5de4:	str.w	r9, [r4, #568]	; 0x238
    5de8:	movs	r1, #2
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5dea:	uxtb	r2, r5
    5dec:	add.w	r2, r4, r2, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    5df0:	strb.w	r1, [r4, #560]	; 0x230
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    5df4:	ldrh.w	r2, [r2, #572]	; 0x23c
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    5df8:	cmp	r2, r3
    5dfa:	bhi.n	5e02 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
    int8_t fg = fatGet(find, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    5dfc:	cmp	r2, #0
    5dfe:	beq.w	5f30 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x184>
      break;
    }
    if (find == start) {
    5e02:	cmp	r5, r6
    5e04:	beq.n	5e42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    5e06:	ldrb	r2, [r4, #7]
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
    5e08:	adds	r5, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
    5e0a:	cmp	r5, r3
    5e0c:	it	hi
    5e0e:	movhi	r5, #2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5e10:	cmp	r2, #32
    5e12:	beq.n	5e72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xc6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5e14:	cmp	r2, #16
    5e16:	bne.n	5e42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5e18:	ldr	r2, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5e1a:	ldr.w	r1, [r4, #568]	; 0x238
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5e1e:	ubfx	r9, r5, #8, #8
    5e22:	add	r9, r2
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5e24:	cmp	r9, r1
    5e26:	bne.n	5dc4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    5e28:	ldrb.w	r1, [r4, #560]	; 0x230
    5e2c:	orr.w	r1, r1, #2
    5e30:	b.n	5dea <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // link clusters
    if (!fatPut(current, find)) {
    5e32:	mov	r1, r7
    5e34:	mov	r0, r4
    5e36:	mov	r2, r5
    5e38:	bl	5c5c <FatPartition::fatPut(unsigned long, unsigned long)>
    5e3c:	cmp	r0, #0
    5e3e:	bne.w	5f4c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x1a0>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    5e42:	movs	r6, #0
}
    5e44:	mov	r0, r6
    5e46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e4a:	ldr.w	r3, [r4, #564]	; 0x234
    5e4e:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5e50:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5e52:	add.w	sl, r4, #572	; 0x23c
    5e56:	ldr	r3, [r3, #24]
    5e58:	mov	r2, sl
    5e5a:	blx	r3
    5e5c:	cmp	r0, #0
    5e5e:	beq.n	5e42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5e60:	ldrb.w	r3, [r4, #560]	; 0x230
    5e64:	lsls	r2, r3, #30
    5e66:	bmi.n	5ef0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x144>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5e68:	bic.w	r3, r3, #1
    5e6c:	strb.w	r3, [r4, #560]	; 0x230
    5e70:	b.n	5dd0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5e72:	ldr	r2, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5e74:	ldr.w	r1, [r4, #568]	; 0x238

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5e78:	add.w	r9, r2, r5, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5e7c:	cmp	r1, r9
    5e7e:	beq.n	5eba <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10e>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5e80:	ldrb.w	r3, [r4, #560]	; 0x230
    5e84:	lsls	r0, r3, #31
    5e86:	bmi.n	5ec8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x11c>
    5e88:	add.w	sl, r4, #572	; 0x23c
    5e8c:	ldr.w	r3, [r4, #564]	; 0x234
    5e90:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5e92:	ldr	r3, [r0, #0]
    5e94:	mov	r2, sl
    5e96:	ldr	r3, [r3, #8]
    5e98:	mov	r1, r9
    5e9a:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5e9c:	cmp	r0, #0
    5e9e:	beq.n	5e42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    5ea0:	ldr	r3, [r4, #28]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5ea2:	str.w	r9, [r4, #568]	; 0x238
    5ea6:	movs	r1, #2
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5ea8:	and.w	r2, r5, #127	; 0x7f
    5eac:	add.w	r2, r4, r2, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    5eb0:	strb.w	r1, [r4, #560]	; 0x230
    5eb4:	ldr.w	r2, [r2, #572]	; 0x23c
    5eb8:	b.n	5df8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4c>
    5eba:	ldrb.w	r1, [r4, #560]	; 0x230
    5ebe:	orr.w	r1, r1, #2
    5ec2:	b.n	5ea8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xfc>
    5ec4:	mov	r6, r1
    5ec6:	b.n	5dbe <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x12>
    5ec8:	ldr.w	r3, [r4, #564]	; 0x234
    5ecc:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5ece:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5ed0:	add.w	sl, r4, #572	; 0x23c
    5ed4:	ldr	r3, [r3, #24]
    5ed6:	mov	r2, sl
    5ed8:	blx	r3
    5eda:	cmp	r0, #0
    5edc:	beq.n	5e42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5ede:	ldrb.w	r3, [r4, #560]	; 0x230
    5ee2:	lsls	r2, r3, #30
    5ee4:	bmi.n	5f10 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x164>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5ee6:	bic.w	r3, r3, #1
    5eea:	strb.w	r3, [r4, #560]	; 0x230
    5eee:	b.n	5e8c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xe0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5ef0:	ldr.w	r3, [r4, #564]	; 0x234
    5ef4:	ldr.w	r2, [r4, #568]	; 0x238
    5ef8:	ldr	r0, [r3, #0]
    5efa:	ldr	r1, [r3, #16]
    5efc:	ldr	r3, [r0, #0]
    5efe:	add	r1, r2
    5f00:	ldr	r3, [r3, #24]
    5f02:	mov	r2, sl
    5f04:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5f06:	cmp	r0, #0
    5f08:	beq.n	5e42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    5f0a:	ldrb.w	r3, [r4, #560]	; 0x230
    5f0e:	b.n	5e68 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xbc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5f10:	ldr.w	r3, [r4, #564]	; 0x234
    5f14:	ldr.w	r2, [r4, #568]	; 0x238
    5f18:	ldr	r0, [r3, #0]
    5f1a:	ldr	r1, [r3, #16]
    5f1c:	ldr	r3, [r0, #0]
    5f1e:	add	r1, r2
    5f20:	ldr	r3, [r3, #24]
    5f22:	mov	r2, sl
    5f24:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5f26:	cmp	r0, #0
    5f28:	beq.n	5e42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    5f2a:	ldrb.w	r3, [r4, #560]	; 0x230
    5f2e:	b.n	5ee6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x13a>
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5f30:	mvn.w	r2, #4026531840	; 0xf0000000
    5f34:	mov	r1, r5
    5f36:	mov	r0, r4
    5f38:	bl	5c5c <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
    5f3c:	mov	r6, r0
    5f3e:	cmp	r0, #0
    5f40:	beq.w	5e42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    5f44:	cmp	r7, #0
    5f46:	bne.w	5e32 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x86>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
    5f4a:	str	r5, [r4, #12]
  }
  updateFreeClusterCount(-1);
  *next = find;
    5f4c:	str.w	r5, [r8]
  return true;

fail:
  return false;
}
    5f50:	mov	r0, r6
    5f52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f56:	nop

00005f58 <FatPartition::allocContiguous(unsigned long, unsigned long*)>:
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    5f58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  uint32_t startCluster = m_allocSearchStart;
    5f5c:	ldr.w	r8, [r0, #12]
    5f60:	ldr	r3, [r0, #28]
fail:
  return false;
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    5f62:	sub	sp, #12
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  uint32_t startCluster = m_allocSearchStart;
  endCluster = bgnCluster = startCluster + 1;
    5f64:	add.w	r7, r8, #1
fail:
  return false;
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    5f68:	str	r2, [sp, #4]
    5f6a:	mov	r4, r0
    5f6c:	mov	fp, r1
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  uint32_t startCluster = m_allocSearchStart;
  endCluster = bgnCluster = startCluster + 1;
    5f6e:	mov	r2, r7
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
  // flag to save place to start next search
  bool setStart = true;
    5f70:	mov.w	sl, #1
    5f74:	b.n	5f88 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x30>
    int8_t fg = fatGet(endCluster, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    5f76:	cmp	r2, #0
    5f78:	bne.n	5fe6 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x8e>
    5f7a:	adds	r2, r6, #1

      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
    } else if ((endCluster - bgnCluster + 1) == count) {
    5f7c:	subs	r1, r2, r7
    5f7e:	cmp	r1, fp
    5f80:	beq.w	60e8 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x190>
      // done - found space
      break;
    }
    // Can't find space if all clusters checked.
    if (startCluster == endCluster) {
    5f84:	cmp	r6, r8
    5f86:	beq.n	5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
  endCluster = bgnCluster = startCluster + 1;

  // search the FAT for free clusters
  while (1) {
    // If past end - start from beginning of FAT.
    if (endCluster > m_lastCluster) {
    5f88:	cmp	r2, r3
    5f8a:	it	ls
    5f8c:	movls	r6, r2
    5f8e:	ldrb	r2, [r4, #7]
      bgnCluster = endCluster = 2;
    5f90:	itt	hi
    5f92:	movhi	r7, #2
    5f94:	movhi	r6, r7
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5f96:	cmp	r2, #32
    5f98:	beq.n	602e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xd6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5f9a:	cmp	r2, #16
    5f9c:	bne.n	5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5f9e:	ldr	r2, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5fa0:	ldr.w	r1, [r4, #568]	; 0x238
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5fa4:	ubfx	r5, r6, #8, #8
    5fa8:	add	r5, r2
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5faa:	cmp	r5, r1
    5fac:	beq.n	5ffc <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa4>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5fae:	ldrb.w	r3, [r4, #560]	; 0x230
    5fb2:	lsls	r0, r3, #31
    5fb4:	bmi.n	6006 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xae>
    5fb6:	add.w	r9, r4, #572	; 0x23c
    5fba:	ldr.w	r3, [r4, #564]	; 0x234
    5fbe:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5fc0:	ldr	r3, [r0, #0]
    5fc2:	mov	r2, r9
    5fc4:	ldr	r3, [r3, #8]
    5fc6:	mov	r1, r5
    5fc8:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5fca:	cbz	r0, 5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    5fcc:	ldr	r3, [r4, #28]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5fce:	str.w	r5, [r4, #568]	; 0x238
    5fd2:	movs	r1, #2
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5fd4:	uxtb	r2, r6
    5fd6:	add.w	r2, r4, r2, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    5fda:	strb.w	r1, [r4, #560]	; 0x230
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    5fde:	ldrh.w	r2, [r2, #572]	; 0x23c
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    5fe2:	cmp	r2, r3
    5fe4:	bls.n	5f76 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    5fe6:	adds	r7, r6, #1
    } else if ((endCluster - bgnCluster + 1) == count) {
      // done - found space
      break;
    }
    // Can't find space if all clusters checked.
    if (startCluster == endCluster) {
    5fe8:	cmp	r6, r8
    5fea:	mov	r2, r7
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;

      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
    5fec:	mov.w	sl, #0
    } else if ((endCluster - bgnCluster + 1) == count) {
      // done - found space
      break;
    }
    // Can't find space if all clusters checked.
    if (startCluster == endCluster) {
    5ff0:	bne.n	5f88 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x30>
  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;

fail:
  return false;
    5ff2:	movs	r5, #0
}
    5ff4:	mov	r0, r5
    5ff6:	add	sp, #12
    5ff8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ffc:	ldrb.w	r1, [r4, #560]	; 0x230
    6000:	orr.w	r1, r1, #2
    6004:	b.n	5fd4 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x7c>
    6006:	ldr.w	r3, [r4, #564]	; 0x234
    600a:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    600c:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    600e:	add.w	r9, r4, #572	; 0x23c
    6012:	ldr	r3, [r3, #24]
    6014:	mov	r2, r9
    6016:	blx	r3
    6018:	cmp	r0, #0
    601a:	beq.n	5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    601c:	ldrb.w	r3, [r4, #560]	; 0x230
    6020:	lsls	r2, r3, #30
    6022:	bmi.n	60a8 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x150>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6024:	bic.w	r3, r3, #1
    6028:	strb.w	r3, [r4, #560]	; 0x230
    602c:	b.n	5fba <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x62>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    602e:	ldr	r5, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6030:	ldr.w	r1, [r4, #568]	; 0x238

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6034:	add.w	r5, r5, r6, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6038:	cmp	r1, r5
    603a:	beq.n	6076 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x11e>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    603c:	ldrb.w	r3, [r4, #560]	; 0x230
    6040:	lsls	r0, r3, #31
    6042:	bmi.n	6080 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x128>
    6044:	add.w	r9, r4, #572	; 0x23c
    6048:	ldr.w	r3, [r4, #564]	; 0x234
    604c:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    604e:	ldr	r3, [r0, #0]
    6050:	mov	r2, r9
    6052:	ldr	r3, [r3, #8]
    6054:	mov	r1, r5
    6056:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6058:	cmp	r0, #0
    605a:	beq.n	5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    605c:	ldr	r3, [r4, #28]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    605e:	str.w	r5, [r4, #568]	; 0x238
    6062:	movs	r1, #2
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6064:	and.w	r2, r6, #127	; 0x7f
    6068:	add.w	r2, r4, r2, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    606c:	strb.w	r1, [r4, #560]	; 0x230
    6070:	ldr.w	r2, [r2, #572]	; 0x23c
    6074:	b.n	5fe2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x8a>
    6076:	ldrb.w	r1, [r4, #560]	; 0x230
    607a:	orr.w	r1, r1, #2
    607e:	b.n	6064 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x10c>
    6080:	ldr.w	r3, [r4, #564]	; 0x234
    6084:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    6086:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    6088:	add.w	r9, r4, #572	; 0x23c
    608c:	ldr	r3, [r3, #24]
    608e:	mov	r2, r9
    6090:	blx	r3
    6092:	cmp	r0, #0
    6094:	beq.n	5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6096:	ldrb.w	r3, [r4, #560]	; 0x230
    609a:	lsls	r2, r3, #30
    609c:	bmi.n	60c8 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x170>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    609e:	bic.w	r3, r3, #1
    60a2:	strb.w	r3, [r4, #560]	; 0x230
    60a6:	b.n	6048 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xf0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    60a8:	ldr.w	r3, [r4, #564]	; 0x234
    60ac:	ldr.w	r2, [r4, #568]	; 0x238
    60b0:	ldr	r0, [r3, #0]
    60b2:	ldr	r1, [r3, #16]
    60b4:	ldr	r3, [r0, #0]
    60b6:	add	r1, r2
    60b8:	ldr	r3, [r3, #24]
    60ba:	mov	r2, r9
    60bc:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    60be:	cmp	r0, #0
    60c0:	beq.n	5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    60c2:	ldrb.w	r3, [r4, #560]	; 0x230
    60c6:	b.n	6024 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xcc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    60c8:	ldr.w	r3, [r4, #564]	; 0x234
    60cc:	ldr.w	r2, [r4, #568]	; 0x238
    60d0:	ldr	r0, [r3, #0]
    60d2:	ldr	r1, [r3, #16]
    60d4:	ldr	r3, [r0, #0]
    60d6:	add	r1, r2
    60d8:	ldr	r3, [r3, #24]
    60da:	mov	r2, r9
    60dc:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    60de:	cmp	r0, #0
    60e0:	beq.n	5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    60e2:	ldrb.w	r3, [r4, #560]	; 0x230
    60e6:	b.n	609e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x146>
      goto fail;
    }
    endCluster++;
  }
  // remember possible next free cluster
  if (setStart) {
    60e8:	cmp.w	sl, #0
    60ec:	beq.n	60f0 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x198>
    m_allocSearchStart = endCluster + 1;
    60ee:	str	r2, [r4, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    60f0:	mvn.w	r2, #4026531840	; 0xf0000000
    60f4:	mov	r1, r6
    60f6:	mov	r0, r4
    60f8:	bl	5c5c <FatPartition::fatPut(unsigned long, unsigned long)>
  }

  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    60fc:	mov	r5, r0
    60fe:	cmp	r0, #0
    6100:	beq.w	5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    6104:	cmp	r7, r6
    6106:	bcs.n	61bc <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x264>
    6108:	ldrb	r3, [r4, #7]
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    610a:	cmp	r3, #32
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) {
    610c:	add.w	r8, r6, #4294967295
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    6110:	beq.n	6168 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x210>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    6112:	cmp	r3, #16
    6114:	bne.w	5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    6118:	ldr	r3, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    611a:	ldr.w	r1, [r4, #568]	; 0x238
    return true;
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    611e:	ubfx	r6, r8, #8, #8
    6122:	add	r6, r3
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6124:	cmp	r6, r1
    6126:	beq.n	61b2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x25a>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6128:	ldrb.w	r3, [r4, #560]	; 0x230
    612c:	lsls	r0, r3, #31
    612e:	bmi.n	61cc <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x274>
    6130:	add.w	r9, r4, #572	; 0x23c
    6134:	ldr.w	r3, [r4, #564]	; 0x234
    6138:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    613a:	ldr	r3, [r0, #0]
    613c:	mov	r2, r9
    613e:	ldr	r3, [r3, #8]
    6140:	mov	r1, r6
    6142:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6144:	cmp	r0, #0
    6146:	beq.w	5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    614a:	str.w	r6, [r4, #568]	; 0x238
    614e:	movs	r1, #3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6150:	uxtb.w	r3, r8
    6154:	add.w	r3, r4, r3, lsl #1
    6158:	add.w	r2, r8, #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    615c:	strb.w	r1, [r4, #560]	; 0x230
    6160:	mov	r6, r8
    6162:	strh.w	r2, [r3, #572]	; 0x23c
    6166:	b.n	6104 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1ac>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6168:	ldr	r3, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    616a:	ldr.w	r1, [r4, #568]	; 0x238

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    616e:	add.w	r9, r3, r8, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6172:	cmp	r9, r1
    6174:	beq.n	61c2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x26a>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6176:	ldrb.w	r3, [r4, #560]	; 0x230
    617a:	lsls	r0, r3, #31
    617c:	bmi.n	61f6 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x29e>
    617e:	add.w	sl, r4, #572	; 0x23c
    6182:	ldr.w	r3, [r4, #564]	; 0x234
    6186:	ldr	r0, [r3, #0]
    6188:	ldr	r3, [r0, #0]
    618a:	mov	r2, sl
    618c:	ldr	r3, [r3, #8]
    618e:	mov	r1, r9
    6190:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6192:	cmp	r0, #0
    6194:	beq.w	5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    6198:	str.w	r9, [r4, #568]	; 0x238
    619c:	movs	r2, #3
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    619e:	and.w	r3, r8, #127	; 0x7f
    61a2:	add.w	r3, r4, r3, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    61a6:	strb.w	r2, [r4, #560]	; 0x230
    61aa:	str.w	r6, [r3, #572]	; 0x23c
    61ae:	mov	r6, r8
    61b0:	b.n	6104 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1ac>
    61b2:	ldrb.w	r1, [r4, #560]	; 0x230
    61b6:	orr.w	r1, r1, #3
    61ba:	b.n	6150 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1f8>
  }
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
    61bc:	ldr	r3, [sp, #4]
    61be:	str	r7, [r3, #0]
  return true;
    61c0:	b.n	5ff4 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9c>
    61c2:	ldrb.w	r2, [r4, #560]	; 0x230
    61c6:	orr.w	r2, r2, #3
    61ca:	b.n	619e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x246>
    61cc:	ldr.w	r3, [r4, #564]	; 0x234
    61d0:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    61d2:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    61d4:	add.w	r9, r4, #572	; 0x23c
    61d8:	ldr	r3, [r3, #24]
    61da:	mov	r2, r9
    61dc:	blx	r3
    61de:	cmp	r0, #0
    61e0:	beq.w	5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    61e4:	ldrb.w	r3, [r4, #560]	; 0x230
    61e8:	lsls	r2, r3, #30
    61ea:	bmi.n	6220 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x2c8>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    61ec:	bic.w	r3, r3, #1
    61f0:	strb.w	r3, [r4, #560]	; 0x230
    61f4:	b.n	6134 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1dc>
    61f6:	ldr.w	r3, [r4, #564]	; 0x234
    61fa:	ldr	r0, [r3, #0]
    61fc:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    61fe:	add.w	sl, r4, #572	; 0x23c
    6202:	ldr	r3, [r3, #24]
    6204:	mov	r2, sl
    6206:	blx	r3
    6208:	cmp	r0, #0
    620a:	beq.w	5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    620e:	ldrb.w	r3, [r4, #560]	; 0x230
    6212:	lsls	r2, r3, #30
    6214:	bmi.n	6242 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x2ea>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6216:	bic.w	r3, r3, #1
    621a:	strb.w	r3, [r4, #560]	; 0x230
    621e:	b.n	6182 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x22a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    6220:	ldr.w	r3, [r4, #564]	; 0x234
    6224:	ldr.w	r2, [r4, #568]	; 0x238
    6228:	ldr	r0, [r3, #0]
    622a:	ldr	r1, [r3, #16]
    622c:	ldr	r3, [r0, #0]
    622e:	add	r1, r2
    6230:	ldr	r3, [r3, #24]
    6232:	mov	r2, r9
    6234:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    6236:	cmp	r0, #0
    6238:	beq.w	5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    623c:	ldrb.w	r3, [r4, #560]	; 0x230
    6240:	b.n	61ec <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x294>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    6242:	ldr.w	r3, [r4, #564]	; 0x234
    6246:	ldr.w	r2, [r4, #568]	; 0x238
    624a:	ldr	r0, [r3, #0]
    624c:	ldr	r1, [r3, #16]
    624e:	ldr	r3, [r0, #0]
    6250:	add	r1, r2
    6252:	ldr	r3, [r3, #24]
    6254:	mov	r2, sl
    6256:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    6258:	cmp	r0, #0
    625a:	beq.w	5ff2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    625e:	ldrb.w	r3, [r4, #560]	; 0x230
    6262:	b.n	6216 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x2be>

00006264 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6264:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6268:	mov	r4, r0
    626a:	mov	r5, r1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    626c:	mov.w	r8, #0
    6270:	ldrb	r3, [r4, #7]
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    6272:	cmp	r3, #32
    6274:	beq.n	6368 <FatPartition::freeChain(unsigned long)+0x104>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    6276:	cmp	r3, #16
    6278:	bne.n	62d2 <FatPartition::freeChain(unsigned long)+0x6e>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    627a:	ldr	r2, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    627c:	ldr.w	r1, [r4, #568]	; 0x238
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    6280:	ubfx	r6, r5, #8, #8
    6284:	add	r6, r2
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6286:	cmp	r6, r1
    6288:	beq.n	62d8 <FatPartition::freeChain(unsigned long)+0x74>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    628a:	ldrb.w	r3, [r4, #560]	; 0x230
    628e:	lsls	r0, r3, #31
    6290:	bmi.n	633e <FatPartition::freeChain(unsigned long)+0xda>
    6292:	add.w	r9, r4, #572	; 0x23c
    6296:	ldr.w	r3, [r4, #564]	; 0x234
    629a:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    629c:	ldr	r3, [r0, #0]
    629e:	mov	r2, r9
    62a0:	ldr	r3, [r3, #8]
    62a2:	mov	r1, r6
    62a4:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    62a6:	cbz	r0, 62d2 <FatPartition::freeChain(unsigned long)+0x6e>
    62a8:	ldrb	r3, [r4, #7]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    62aa:	str.w	r6, [r4, #568]	; 0x238
    62ae:	movs	r1, #2
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    62b0:	uxtb	r2, r5
    62b2:	add.w	r2, r4, r2, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    62b6:	strb.w	r1, [r4, #560]	; 0x230
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    62ba:	ldrh.w	r2, [r2, #572]	; 0x23c
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    62be:	ldr	r1, [r4, #28]
    return 0;
    62c0:	cmp	r1, r2
    62c2:	itte	cs
    62c4:	movcs	r7, r2
    62c6:	movcs	r6, #1
    62c8:	movcc	r6, #0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    62ca:	cmp	r3, #32
    62cc:	beq.n	63b0 <FatPartition::freeChain(unsigned long)+0x14c>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    62ce:	cmp	r3, #16
    62d0:	beq.n	62e2 <FatPartition::freeChain(unsigned long)+0x7e>
  } while (fg);

  return true;

fail:
  return false;
    62d2:	movs	r0, #0
    62d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    62d8:	ldrb.w	r1, [r4, #560]	; 0x230
    62dc:	orr.w	r1, r1, #2
    62e0:	b.n	62b0 <FatPartition::freeChain(unsigned long)+0x4c>
    return true;
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    62e2:	ldr	r3, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    62e4:	ldr.w	r1, [r4, #568]	; 0x238
    return true;
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    62e8:	ubfx	r9, r5, #8, #8
    62ec:	add	r9, r3
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    62ee:	cmp	r9, r1
    62f0:	beq.w	63f8 <FatPartition::freeChain(unsigned long)+0x194>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    62f4:	ldrb.w	r3, [r4, #560]	; 0x230
    62f8:	lsls	r0, r3, #31
    62fa:	bmi.w	6416 <FatPartition::freeChain(unsigned long)+0x1b2>
    62fe:	add.w	sl, r4, #572	; 0x23c
    6302:	ldr.w	r3, [r4, #564]	; 0x234
    6306:	ldr	r0, [r3, #0]
    6308:	ldr	r3, [r0, #0]
    630a:	mov	r2, sl
    630c:	ldr	r3, [r3, #8]
    630e:	mov	r1, r9
    6310:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6312:	cmp	r0, #0
    6314:	beq.n	62d2 <FatPartition::freeChain(unsigned long)+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    6316:	str.w	r9, [r4, #568]	; 0x238
    631a:	movs	r2, #3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    631c:	uxtb	r3, r5
    631e:	add.w	r3, r4, r3, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    6322:	strb.w	r2, [r4, #560]	; 0x230
    6326:	strh.w	r8, [r3, #572]	; 0x23c
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
    632a:	ldr	r3, [r4, #12]
    632c:	cmp	r5, r3
    632e:	bcs.n	6332 <FatPartition::freeChain(unsigned long)+0xce>
      m_allocSearchStart = cluster;
    6330:	str	r5, [r4, #12]
    6332:	mov	r5, r7
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    6334:	cmp	r6, #0
    6336:	bne.n	6270 <FatPartition::freeChain(unsigned long)+0xc>
      m_allocSearchStart = cluster;
    }
    cluster = next;
  } while (fg);

  return true;
    6338:	movs	r0, #1
    633a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    633e:	ldr.w	r3, [r4, #564]	; 0x234
    6342:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    6344:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    6346:	add.w	r9, r4, #572	; 0x23c
    634a:	ldr	r3, [r3, #24]
    634c:	mov	r2, r9
    634e:	blx	r3
    6350:	cmp	r0, #0
    6352:	beq.n	62d2 <FatPartition::freeChain(unsigned long)+0x6e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6354:	ldrb.w	r3, [r4, #560]	; 0x230
    6358:	lsls	r2, r3, #30
    635a:	bmi.w	6494 <FatPartition::freeChain(unsigned long)+0x230>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    635e:	bic.w	r3, r3, #1
    6362:	strb.w	r3, [r4, #560]	; 0x230
    6366:	b.n	6296 <FatPartition::freeChain(unsigned long)+0x32>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6368:	ldr	r6, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    636a:	ldr.w	r1, [r4, #568]	; 0x238

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    636e:	add.w	r6, r6, r5, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6372:	cmp	r1, r6
    6374:	beq.n	6402 <FatPartition::freeChain(unsigned long)+0x19e>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6376:	ldrb.w	r3, [r4, #560]	; 0x230
    637a:	lsls	r0, r3, #31
    637c:	bmi.n	6440 <FatPartition::freeChain(unsigned long)+0x1dc>
    637e:	add.w	r9, r4, #572	; 0x23c
    6382:	ldr.w	r3, [r4, #564]	; 0x234
    6386:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    6388:	ldr	r3, [r0, #0]
    638a:	mov	r2, r9
    638c:	ldr	r3, [r3, #8]
    638e:	mov	r1, r6
    6390:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6392:	cmp	r0, #0
    6394:	beq.n	62d2 <FatPartition::freeChain(unsigned long)+0x6e>
    6396:	ldrb	r3, [r4, #7]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    6398:	str.w	r6, [r4, #568]	; 0x238
    639c:	movs	r1, #2
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    639e:	and.w	r2, r5, #127	; 0x7f
    63a2:	add.w	r2, r4, r2, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    63a6:	strb.w	r1, [r4, #560]	; 0x230
    63aa:	ldr.w	r2, [r2, #572]	; 0x23c
    63ae:	b.n	62be <FatPartition::freeChain(unsigned long)+0x5a>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    63b0:	ldr	r3, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    63b2:	ldr.w	r1, [r4, #568]	; 0x238

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    63b6:	add.w	r9, r3, r5, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    63ba:	cmp	r9, r1
    63bc:	beq.n	640c <FatPartition::freeChain(unsigned long)+0x1a8>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    63be:	ldrb.w	r3, [r4, #560]	; 0x230
    63c2:	lsls	r0, r3, #31
    63c4:	bmi.n	646a <FatPartition::freeChain(unsigned long)+0x206>
    63c6:	add.w	sl, r4, #572	; 0x23c
    63ca:	ldr.w	r3, [r4, #564]	; 0x234
    63ce:	ldr	r0, [r3, #0]
    63d0:	ldr	r3, [r0, #0]
    63d2:	mov	r2, sl
    63d4:	ldr	r3, [r3, #8]
    63d6:	mov	r1, r9
    63d8:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    63da:	cmp	r0, #0
    63dc:	beq.w	62d2 <FatPartition::freeChain(unsigned long)+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    63e0:	str.w	r9, [r4, #568]	; 0x238
    63e4:	movs	r2, #3
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    63e6:	and.w	r3, r5, #127	; 0x7f
    63ea:	add.w	r3, r4, r3, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    63ee:	strb.w	r2, [r4, #560]	; 0x230
    63f2:	str.w	r8, [r3, #572]	; 0x23c
    63f6:	b.n	632a <FatPartition::freeChain(unsigned long)+0xc6>
    63f8:	ldrb.w	r2, [r4, #560]	; 0x230
    63fc:	orr.w	r2, r2, #3
    6400:	b.n	631c <FatPartition::freeChain(unsigned long)+0xb8>
    6402:	ldrb.w	r1, [r4, #560]	; 0x230
    6406:	orr.w	r1, r1, #2
    640a:	b.n	639e <FatPartition::freeChain(unsigned long)+0x13a>
    640c:	ldrb.w	r2, [r4, #560]	; 0x230
    6410:	orr.w	r2, r2, #3
    6414:	b.n	63e6 <FatPartition::freeChain(unsigned long)+0x182>
    6416:	ldr.w	r3, [r4, #564]	; 0x234
    641a:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    641c:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    641e:	add.w	sl, r4, #572	; 0x23c
    6422:	ldr	r3, [r3, #24]
    6424:	mov	r2, sl
    6426:	blx	r3
    6428:	cmp	r0, #0
    642a:	beq.w	62d2 <FatPartition::freeChain(unsigned long)+0x6e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    642e:	ldrb.w	r3, [r4, #560]	; 0x230
    6432:	lsls	r2, r3, #30
    6434:	bmi.n	64b6 <FatPartition::freeChain(unsigned long)+0x252>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6436:	bic.w	r3, r3, #1
    643a:	strb.w	r3, [r4, #560]	; 0x230
    643e:	b.n	6302 <FatPartition::freeChain(unsigned long)+0x9e>
    6440:	ldr.w	r3, [r4, #564]	; 0x234
    6444:	ldr	r0, [r3, #0]
    6446:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    6448:	add.w	r9, r4, #572	; 0x23c
    644c:	ldr	r3, [r3, #24]
    644e:	mov	r2, r9
    6450:	blx	r3
    6452:	cmp	r0, #0
    6454:	beq.w	62d2 <FatPartition::freeChain(unsigned long)+0x6e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6458:	ldrb.w	r3, [r4, #560]	; 0x230
    645c:	lsls	r2, r3, #30
    645e:	bmi.n	64d8 <FatPartition::freeChain(unsigned long)+0x274>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6460:	bic.w	r3, r3, #1
    6464:	strb.w	r3, [r4, #560]	; 0x230
    6468:	b.n	6382 <FatPartition::freeChain(unsigned long)+0x11e>
    646a:	ldr.w	r3, [r4, #564]	; 0x234
    646e:	ldr	r0, [r3, #0]
    6470:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    6472:	add.w	sl, r4, #572	; 0x23c
    6476:	ldr	r3, [r3, #24]
    6478:	mov	r2, sl
    647a:	blx	r3
    647c:	cmp	r0, #0
    647e:	beq.w	62d2 <FatPartition::freeChain(unsigned long)+0x6e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6482:	ldrb.w	r3, [r4, #560]	; 0x230
    6486:	lsls	r2, r3, #30
    6488:	bmi.n	64fa <FatPartition::freeChain(unsigned long)+0x296>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    648a:	bic.w	r3, r3, #1
    648e:	strb.w	r3, [r4, #560]	; 0x230
    6492:	b.n	63ca <FatPartition::freeChain(unsigned long)+0x166>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    6494:	ldr.w	r3, [r4, #564]	; 0x234
    6498:	ldr.w	r2, [r4, #568]	; 0x238
    649c:	ldr	r0, [r3, #0]
    649e:	ldr	r1, [r3, #16]
    64a0:	ldr	r3, [r0, #0]
    64a2:	add	r1, r2
    64a4:	ldr	r3, [r3, #24]
    64a6:	mov	r2, r9
    64a8:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    64aa:	cmp	r0, #0
    64ac:	beq.w	62d2 <FatPartition::freeChain(unsigned long)+0x6e>
    64b0:	ldrb.w	r3, [r4, #560]	; 0x230
    64b4:	b.n	635e <FatPartition::freeChain(unsigned long)+0xfa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    64b6:	ldr.w	r3, [r4, #564]	; 0x234
    64ba:	ldr.w	r2, [r4, #568]	; 0x238
    64be:	ldr	r0, [r3, #0]
    64c0:	ldr	r1, [r3, #16]
    64c2:	ldr	r3, [r0, #0]
    64c4:	add	r1, r2
    64c6:	ldr	r3, [r3, #24]
    64c8:	mov	r2, sl
    64ca:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    64cc:	cmp	r0, #0
    64ce:	beq.w	62d2 <FatPartition::freeChain(unsigned long)+0x6e>
    64d2:	ldrb.w	r3, [r4, #560]	; 0x230
    64d6:	b.n	6436 <FatPartition::freeChain(unsigned long)+0x1d2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    64d8:	ldr.w	r3, [r4, #564]	; 0x234
    64dc:	ldr.w	r2, [r4, #568]	; 0x238
    64e0:	ldr	r0, [r3, #0]
    64e2:	ldr	r1, [r3, #16]
    64e4:	ldr	r3, [r0, #0]
    64e6:	add	r1, r2
    64e8:	ldr	r3, [r3, #24]
    64ea:	mov	r2, r9
    64ec:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    64ee:	cmp	r0, #0
    64f0:	beq.w	62d2 <FatPartition::freeChain(unsigned long)+0x6e>
    64f4:	ldrb.w	r3, [r4, #560]	; 0x230
    64f8:	b.n	6460 <FatPartition::freeChain(unsigned long)+0x1fc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    64fa:	ldr.w	r3, [r4, #564]	; 0x234
    64fe:	ldr.w	r2, [r4, #568]	; 0x238
    6502:	ldr	r0, [r3, #0]
    6504:	ldr	r1, [r3, #16]
    6506:	ldr	r3, [r0, #0]
    6508:	add	r1, r2
    650a:	ldr	r3, [r3, #24]
    650c:	mov	r2, sl
    650e:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    6510:	cmp	r0, #0
    6512:	beq.w	62d2 <FatPartition::freeChain(unsigned long)+0x6e>
    6516:	ldrb.w	r3, [r4, #560]	; 0x230
    651a:	b.n	648a <FatPartition::freeChain(unsigned long)+0x226>

0000651c <FatPartition::init(SdCardInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    651c:	push	{r3, r4, r5, r6, r7, lr}
    651e:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6520:	movs	r5, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    6522:	mov.w	r3, #4294967295
  m_allocSearchStart = 1;
    6526:	movs	r0, #1
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    6528:	str	r4, [r4, #40]	; 0x28
    652a:	str.w	r4, [r4, #564]	; 0x234
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    652e:	str	r1, [r4, #0]
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    6530:	str	r0, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6532:	strb	r5, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6534:	strb.w	r5, [r4, #36]	; 0x24
    6538:	strb.w	r5, [r4, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
    653c:	str	r3, [r4, #44]	; 0x2c
    653e:	str.w	r3, [r4, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6542:	mov	r6, r2
    6544:	cmp	r2, #0
    6546:	beq.n	65ee <FatPartition::init(SdCardInterface*, unsigned char)+0xd2>
    if (part > 4) {
    6548:	cmp	r2, #4
    654a:	bls.n	6550 <FatPartition::init(SdCardInterface*, unsigned char)+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    654c:	movs	r0, #0
    654e:	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    6550:	ldr	r3, [r1, #0]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6552:	add.w	r7, r4, #48	; 0x30
    6556:	mov	r0, r1
    6558:	ldr	r3, [r3, #8]
    655a:	mov	r2, r7
    655c:	mov	r1, r5
    655e:	blx	r3
    6560:	cmp	r0, #0
    6562:	beq.n	654c <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    6564:	add.w	r6, r6, #268435456	; 0x10000000
    6568:	subs	r6, #1
    656a:	lsls	r6, r6, #4
    656c:	add.w	r3, r4, #494	; 0x1ee
    6570:	adds	r2, r3, r6
      if (!m_part->readSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    6572:	strb.w	r5, [r4, #36]	; 0x24
    m_lbn = sector;
    6576:	str	r5, [r4, #44]	; 0x2c
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    6578:	ldrb	r1, [r2, #4]
    657a:	cmp	r1, #0
    657c:	beq.n	654c <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
    657e:	ldrb	r3, [r3, r6]
    6580:	lsls	r3, r3, #25
    6582:	bne.n	654c <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6584:	ldr	r6, [r2, #8]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6586:	cbz	r6, 65a2 <FatPartition::init(SdCardInterface*, unsigned char)+0x86>
    6588:	ldr	r3, [r4, #40]	; 0x28
    658a:	ldr	r0, [r3, #0]
    658c:	ldr	r3, [r0, #0]
    658e:	mov	r2, r7
    6590:	ldr	r3, [r3, #8]
    6592:	mov	r1, r6
    6594:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6596:	cmp	r0, #0
    6598:	beq.n	654c <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    659a:	movs	r3, #0
    m_lbn = sector;
    659c:	str	r6, [r4, #44]	; 0x2c
      if (!m_part->readSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    659e:	strb.w	r3, [r4, #36]	; 0x24
    volumeStartSector = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    65a2:	ldrb.w	r2, [r4, #64]	; 0x40
    65a6:	cmp	r2, #2
    65a8:	bne.n	654c <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
    65aa:	ldrh.w	r3, [r4, #59]	; 0x3b
    65ae:	cmp.w	r3, #512	; 0x200
    65b2:	bne.n	654c <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    65b4:	ldrb.w	r3, [r4, #61]	; 0x3d
    65b8:	strb	r3, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    65ba:	subs	r0, r3, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    65bc:	movs	r1, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    65be:	cmp	r3, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    65c0:	strb	r0, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    65c2:	strb	r1, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    65c4:	beq.n	665e <FatPartition::init(SdCardInterface*, unsigned char)+0x142>
    65c6:	cmp	r3, #2
    65c8:	beq.n	6662 <FatPartition::init(SdCardInterface*, unsigned char)+0x146>
    65ca:	cmp	r3, #4
    65cc:	beq.n	65f8 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    65ce:	cmp	r3, #8
    65d0:	beq.n	6666 <FatPartition::init(SdCardInterface*, unsigned char)+0x14a>
    65d2:	cmp	r3, #16
    65d4:	beq.n	666a <FatPartition::init(SdCardInterface*, unsigned char)+0x14e>
    65d6:	cmp	r3, #32
    65d8:	beq.n	666e <FatPartition::init(SdCardInterface*, unsigned char)+0x152>
    65da:	cmp	r3, #64	; 0x40
    65dc:	beq.n	6672 <FatPartition::init(SdCardInterface*, unsigned char)+0x156>
    65de:	cmp	r3, #128	; 0x80
    65e0:	beq.n	65f6 <FatPartition::init(SdCardInterface*, unsigned char)+0xda>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
    65e2:	movs	r2, #8
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    65e4:	cbz	r3, 65f8 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    65e6:	movs	r3, #8
    65e8:	strb	r3, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    65ea:	movs	r0, #0
    65ec:	pop	{r3, r4, r5, r6, r7, pc}
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    65ee:	mov	r0, r1
    65f0:	add.w	r7, r4, #48	; 0x30
    65f4:	b.n	658c <FatPartition::init(SdCardInterface*, unsigned char)+0x70>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
    65f6:	movs	r2, #7
    65f8:	strb	r2, [r4, #6]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    65fa:	ldrh.w	r0, [r4, #70]	; 0x46
    65fe:	str	r0, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6600:	cbnz	r0, 6606 <FatPartition::init(SdCardInterface*, unsigned char)+0xea>
    6602:	ldr	r0, [r4, #84]	; 0x54
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6604:	str	r0, [r4, #16]
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6606:	ldrh.w	r3, [r4, #65]	; 0x41
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    660a:	ldrh	r5, [r4, #62]	; 0x3e

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    660c:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    660e:	add	r5, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6610:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6612:	add.w	r0, r5, r0, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6616:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    661a:	ldrh.w	r1, [r4, #67]	; 0x43

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    661e:	str	r0, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6620:	add.w	r3, r0, r3, asr #9
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6624:	str	r5, [r4, #24]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    6626:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    6628:	cbnz	r1, 662c <FatPartition::init(SdCardInterface*, unsigned char)+0x110>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    662a:	ldr	r1, [r4, #80]	; 0x50
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    662c:	subs	r6, r6, r3
    662e:	add	r6, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    6630:	lsr.w	r2, r6, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6634:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6638:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    663a:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    663c:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    663e:	bls.n	6656 <FatPartition::init(SdCardInterface*, unsigned char)+0x13a>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    6640:	movw	r3, #65524	; 0xfff4
    6644:	cmp	r2, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    6646:	ittet	hi
    6648:	ldrhi	r3, [r4, #92]	; 0x5c
    664a:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    664c:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    664e:	movhi	r3, #32
    6650:	strb	r3, [r4, #7]
  }
  return true;
    6652:	movs	r0, #1
    6654:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    6656:	movs	r3, #12
    6658:	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    665a:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    665c:	pop	{r3, r4, r5, r6, r7, pc}
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    665e:	mov	r2, r1
    6660:	b.n	65fa <FatPartition::init(SdCardInterface*, unsigned char)+0xde>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
    6662:	movs	r2, #1
    6664:	b.n	65f8 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    6666:	movs	r2, #3
    6668:	b.n	65f8 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    666a:	movs	r2, #4
    666c:	b.n	65f8 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    666e:	movs	r2, #5
    6670:	b.n	65f8 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    6672:	movs	r2, #6
    6674:	b.n	65f8 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    6676:	nop

00006678 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    6678:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    667c:	ldrb	r3, [r0, #0]
    667e:	cmp	r3, #32
    6680:	bne.n	668a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    6682:	ldrb.w	r3, [r0, #1]!
    6686:	cmp	r3, #32
    6688:	beq.n	6682 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    668a:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    668c:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    668e:	cmp	r3, #0
    6690:	beq.w	689a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x222>
    6694:	cmp	r3, #47	; 0x2f
    6696:	beq.n	66f8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6698:	cmp	r3, #92	; 0x5c
    669a:	beq.n	66e2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    669c:	sub.w	r4, r3, #34	; 0x22
    66a0:	uxtb	r4, r4
    66a2:	cmp	r4, #29
    66a4:	bls.n	66e8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    66a6:	ldr.w	lr, [pc, #528]	; 68b8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x240>
    66aa:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    66ac:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    66ae:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    66b0:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    66b4:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    66b6:	beq.n	66e2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    66b8:	cmp	r5, #94	; 0x5e
    66ba:	bhi.n	66e2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    66bc:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    66c0:	sub.w	r5, r3, #34	; 0x22
    66c4:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    66c6:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    66c8:	cmp	r3, #0
    66ca:	beq.w	686c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f4>
    66ce:	cmp	r3, #47	; 0x2f
    66d0:	beq.n	66fa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    66d2:	cmp	r3, #92	; 0x5c
    66d4:	lsr.w	r7, lr, r5
    66d8:	beq.n	66e2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    66da:	cmp	r5, #29
    66dc:	bhi.n	66ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    66de:	lsls	r7, r7, #31
    66e0:	bpl.n	66ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    66e2:	movs	r0, #0
    66e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    66e8:	ldr	r5, [pc, #460]	; (68b8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x240>)
    66ea:	lsr.w	r4, r5, r4
    66ee:	lsls	r4, r4, #31
    66f0:	bpl.n	66a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    66f2:	movs	r0, #0
    66f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    66f8:	movs	r4, #0
    66fa:	adds	r6, r0, r4
    66fc:	mov	r3, r6
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    66fe:	mov	r7, r3
    6700:	ldrb.w	r5, [r3], #1
    6704:	cmp	r5, #32
    6706:	beq.n	66fe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x86>
    6708:	cmp	r5, #47	; 0x2f
    670a:	beq.n	66fe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x86>
  *ptr = &path[end];
    670c:	str	r7, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    670e:	cbz	r4, 6724 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xac>
    6710:	mov	r2, r6
    c = path[len - 1];
    6712:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    6716:	cmp	r3, #46	; 0x2e
    6718:	beq.n	6720 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa8>
    671a:	cmp	r3, #32
    671c:	bne.w	6872 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fa>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    6720:	subs	r4, #1
    6722:	bne.n	6712 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9a>
    6724:	mov.w	r5, #4294967295
    6728:	mov	r3, r4
    672a:	add.w	r2, r1, #13
    672e:	mov.w	r7, #538976288	; 0x20202020
  }
  // Max length of LFN is 255.
  if (len > 255) {
    return false;
  }
  fname->len = len;
    6732:	str	r3, [r1, #4]
    6734:	str.w	r7, [r1, #13]
    6738:	subs	r6, r0, #1
    673a:	str	r7, [r2, #4]
    673c:	str.w	r7, [r2, #7]
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    6740:	movs	r2, #0
    6742:	b.n	6746 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xce>
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    6744:	adds	r2, #1
    6746:	ldrb.w	r3, [r6, #1]!
    674a:	cmp	r3, #46	; 0x2e
    674c:	beq.n	6744 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xcc>
    674e:	cmp	r3, #32
    6750:	beq.n	6744 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xcc>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    6752:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    6756:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    6758:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    675c:	beq.n	6778 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x100>
    675e:	ldrb	r7, [r0, r5]
    6760:	cmp	r7, #46	; 0x2e
    6762:	add.w	r6, r0, r5
    6766:	bne.n	6772 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
    6768:	b.n	6778 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x100>
    676a:	ldrb.w	r7, [r6, #-1]!
    676e:	cmp	r7, #46	; 0x2e
    6770:	beq.n	6778 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x100>
    6772:	adds.w	r5, r5, #4294967295
    6776:	bcs.n	676a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xf2>
  for (; si < len; si++) {
    6778:	cmp	r2, r4
    677a:	mov.w	r9, #0
    677e:	bge.w	68a4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22c>
    6782:	mov	r6, r9
    6784:	mov	sl, r9
    6786:	movs	r7, #7
    6788:	mov.w	r8, #8
    678c:	b.n	67da <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    678e:	cmp	r3, #46	; 0x2e
    6790:	beq.n	6822 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1aa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    6792:	cmp	r3, #34	; 0x22
    6794:	beq.n	67ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x136>
    6796:	cmp	r3, #124	; 0x7c
    6798:	beq.n	67ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x136>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    679a:	sub.w	lr, r3, #42	; 0x2a
    679e:	cmp.w	lr, #5
    67a2:	bls.n	6836 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1be>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    67a4:	sub.w	lr, r3, #58	; 0x3a
    67a8:	cmp.w	lr, #5
    67ac:	bhi.n	6860 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1e8>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    67ae:	cmp	r5, r2
    67b0:	beq.n	6826 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    67b2:	cmp	r7, r6
    67b4:	bcc.n	680a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x192>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    67b6:	mov.w	ip, #0
      c = '_';
    67ba:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    67bc:	add.w	lr, r6, #1
    67c0:	add.w	fp, r1, r6
    67c4:	uxtb.w	r6, lr
      if (i < 7) {
    67c8:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    67ca:	strb.w	r3, [fp, #13]
      if (i < 7) {
    67ce:	bhi.n	67d2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15a>
        fname->seqPos = i;
    67d0:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    67d2:	adds	r2, #1
    67d4:	cmp	r2, r4
    67d6:	bge.n	67e8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x170>
    67d8:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    67da:	cmp	r3, #32
    67dc:	bne.n	678e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x116>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    67de:	adds	r2, #1
    67e0:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    67e2:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    67e6:	blt.n	67d8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    67e8:	ldrb	r3, [r1, #13]
    67ea:	cmp	r3, #32
    67ec:	beq.w	66e2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    return false;
  }

  if (is83) {
    67f0:	cmp.w	ip, #0
    67f4:	beq.n	6886 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    67f6:	tst.w	sl, r9
    67fa:	it	ne
    67fc:	movne.w	r9, #2
    6800:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    6804:	movs	r0, #1
    6806:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    680a:	cmp	r7, #10
    680c:	beq.n	687e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x206>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    680e:	cmp	r5, r2
    6810:	blt.n	687e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x206>
    6812:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    6814:	movs	r7, #10
      i = 8;    // Place for extension.
    6816:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    6818:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    681c:	mov.w	ip, #0
    6820:	b.n	67d2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15a>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    6822:	cmp	r5, r2
    6824:	bne.n	67de <FatFile::parsePathName(char const*, fname_t*, char const**)+0x166>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    6826:	cmp	r7, #10
    6828:	beq.n	687e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x206>
    682a:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    682c:	movs	r7, #10
      i = 8;    // Place for extension.
    682e:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    6830:	mov.w	r8, #16
    6834:	b.n	67d2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15a>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    6836:	cmp	r3, #45	; 0x2d
    6838:	bne.n	67ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x136>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    683a:	sub.w	lr, r3, #33	; 0x21
    683e:	cmp.w	lr, #93	; 0x5d
    6842:	bhi.n	67ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x136>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    6844:	cmp	r5, r2
    6846:	beq.n	6826 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
    6848:	cmp	r7, r6
    684a:	bcc.n	680a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x192>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    684c:	sub.w	lr, r3, #97	; 0x61
    6850:	cmp.w	lr, #25
    6854:	bhi.n	68a8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x230>
        c += 'A' - 'a';
    6856:	subs	r3, #32
    6858:	uxtb	r3, r3
        lc |= bit;
    685a:	orr.w	r9, r8, r9
    685e:	b.n	67bc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x144>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    6860:	sub.w	lr, r3, #91	; 0x5b
    6864:	cmp.w	lr, #2
    6868:	bls.n	67ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x136>
    686a:	b.n	683a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c2>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    686c:	str	r7, [r2, #0]
    686e:	adds	r6, r0, r4
    6870:	b.n	6710 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x98>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    6872:	cmp	r4, #255	; 0xff
    6874:	bgt.w	66e2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6878:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    687a:	mov	r3, r4
    687c:	b.n	672a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb2>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    687e:	ldrb	r3, [r1, #13]
    6880:	cmp	r3, #32
    6882:	beq.w	66e2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    6886:	ldrb	r3, [r1, #12]
    6888:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    688a:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    688c:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    688e:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    6890:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    6892:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    6894:	strb	r2, [r3, #14]
    6896:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    689a:	str	r0, [r2, #0]
    689c:	mov	r4, r3
    689e:	mov.w	r5, #4294967295
    68a2:	b.n	672a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb2>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    68a4:	mov	sl, r9
    68a6:	b.n	67e8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x170>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    68a8:	sub.w	lr, r3, #65	; 0x41
    68ac:	cmp.w	lr, #25
        uc |= bit;
    68b0:	it	ls
    68b2:	orrls.w	sl, r8, sl
    68b6:	b.n	67bc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x144>
    68b8:	.word	0x35000101

000068bc <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    68bc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    68c0:	ldrb	r5, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    68c2:	mov	r6, r1
    68c4:	mov	r4, r0
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    68c6:	movs	r7, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    68c8:	mov.w	r8, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    68cc:	ldr	r0, [r6, #4]
    68ce:	ldr	r1, [r6, #8]
    68d0:	adds	r3, r7, r0
    68d2:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    68d4:	cbz	r0, 68e8 <FatFile::lfnUniqueSfn(fname_t*)+0x2c>
    68d6:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    68d8:	ldrb.w	r2, [r1], #1
    68dc:	add.w	r3, r3, r3, lsl #5
    68e0:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    68e2:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    68e4:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    68e6:	bne.n	68d8 <FatFile::lfnUniqueSfn(fname_t*)+0x1c>
    68e8:	cmp	r5, #3
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
    68ea:	and.w	r2, r3, #15
    68ee:	it	cs
    68f0:	movcs	r5, #3
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    68f2:	adds	r1, r5, #4
    68f4:	cmp	r2, #9
    68f6:	ite	hi
    68f8:	addhi.w	r0, r2, #55	; 0x37
    68fc:	addls.w	r0, r2, #48	; 0x30
    6900:	uxtb	r1, r1
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6902:	adds	r2, r5, #3
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6904:	add	r1, r6
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6906:	uxtb	r2, r2
    6908:	cmp	r5, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    690a:	strb	r0, [r1, #13]
        hex >>= 4;
    690c:	mov.w	r3, r3, asr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6910:	bcs.n	69ac <FatFile::lfnUniqueSfn(fname_t*)+0xf0>
        uint8_t h = hex & 0XF;
    6912:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6916:	cmp	r1, #9
    6918:	ite	hi
    691a:	addhi.w	r0, r1, #55	; 0x37
    691e:	addls.w	r0, r1, #48	; 0x30
    6922:	adds	r1, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6924:	adds	r2, r5, #2
    6926:	uxtb	r2, r2
    6928:	cmp	r5, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    692a:	strb	r0, [r1, #13]
    692c:	mov.w	r3, r3, asr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6930:	bcs.n	69ae <FatFile::lfnUniqueSfn(fname_t*)+0xf2>
        uint8_t h = hex & 0XF;
    6932:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6936:	cmp	r1, #9
    6938:	ite	hi
    693a:	addhi.w	r0, r1, #55	; 0x37
    693e:	addls.w	r0, r1, #48	; 0x30
    6942:	adds	r1, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6944:	adds	r2, r5, #1
    6946:	uxtb	r2, r2
    6948:	cmp	r5, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    694a:	strb	r0, [r1, #13]
    694c:	mov.w	r3, r3, asr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6950:	bcs.n	69ae <FatFile::lfnUniqueSfn(fname_t*)+0xf2>
        uint8_t h = hex & 0XF;
    6952:	uxtb	r3, r3
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6954:	cmp	r3, #9
    6956:	ite	hi
    6958:	addhi	r3, #55	; 0x37
    695a:	addls	r3, #48	; 0x30
    695c:	add	r2, r6
    695e:	uxtb	r3, r3
    6960:	mov	r1, r5
    6962:	strb	r3, [r2, #13]
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    6964:	adds	r3, r6, r1
   * the value false is returned for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    6966:	mov	r0, r4
    6968:	movs	r1, #0
    696a:	strb.w	r8, [r3, #13]
    696e:	bl	5588 <FatFile::seekSet(unsigned long)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6972:	add.w	r9, r6, #13
      }
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
    6976:	movs	r1, #1
    6978:	mov	r0, r4
    697a:	bl	5548 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    697e:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    6980:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6982:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    6984:	cbz	r0, 69b2 <FatFile::lfnUniqueSfn(fname_t*)+0xf6>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6986:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    698a:	mov	r0, r9
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    698c:	cmp.w	lr, #0
    6990:	beq.n	69be <FatFile::lfnUniqueSfn(fname_t*)+0x102>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6992:	ldrb	r3, [r3, #11]
    6994:	lsls	r3, r3, #28
    6996:	bmi.n	6976 <FatFile::lfnUniqueSfn(fname_t*)+0xba>
    6998:	bl	cb20 <memcmp>
    699c:	cmp	r0, #0
    699e:	bne.n	6976 <FatFile::lfnUniqueSfn(fname_t*)+0xba>
    69a0:	adds	r7, #1
    69a2:	uxth	r7, r7
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    69a4:	cmp	r7, #100	; 0x64
    69a6:	bne.n	68cc <FatFile::lfnUniqueSfn(fname_t*)+0x10>
fail:
  return false;

done:
  return true;
}
    69a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    69ac:	movs	r5, #3
    69ae:	mov	r1, r5
    69b0:	b.n	6964 <FatFile::lfnUniqueSfn(fname_t*)+0xa8>
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    69b2:	ldrb	r0, [r4, #1]
    69b4:	clz	r0, r0
    69b8:	lsrs	r0, r0, #5
    69ba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    69be:	movs	r0, #1
    69c0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000069c4 <FatFile::open(FatFile*, fname_t*, unsigned char)>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
    69c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    69c8:	ldrb	r4, [r1, #0]
    69ca:	tst.w	r4, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
    69ce:	sub	sp, #44	; 0x2c
  uint16_t time;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    69d0:	beq.n	69d6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    69d2:	ldrb	r4, [r0, #0]
    69d4:	cbz	r4, 69de <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    69d6:	movs	r0, #0
}
    69d8:	add	sp, #44	; 0x2c
    69da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    69de:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
    69e0:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    69e4:	lsls	r4, r4, #30
    69e6:	bne.n	6a62 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x9e>
    69e8:	mov.w	r8, #1
    69ec:	mov	r5, r1
    69ee:	mov	r9, r2
    69f0:	str	r0, [sp, #28]
    69f2:	movs	r1, #0
    69f4:	mov	r0, r5
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint16_t freeIndex = 0;
    69f6:	mov	r6, r1
    69f8:	str	r3, [sp, #24]
    69fa:	bl	5588 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    69fe:	add.w	r3, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    6a02:	str	r6, [sp, #20]
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    6a04:	str	r6, [sp, #8]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    6a06:	mov	r4, r6
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    6a08:	mov	r7, r6
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
    6a0a:	str	r6, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6a0c:	str	r3, [sp, #12]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6a0e:	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
    6a10:	movs	r1, #1
    6a12:	mov	r0, r5
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6a14:	ubfx	fp, r3, #5, #16
    dir = dirFile->readDirCache(true);
    6a18:	bl	5548 <FatFile::readDirCache(bool)>
    if (!dir) {
    6a1c:	cmp	r0, #0
    6a1e:	beq.w	6b3e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x17a>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    6a22:	ldrb	r3, [r0, #0]
    6a24:	cmp	r3, #229	; 0xe5
    6a26:	beq.n	6a92 <FatFile::open(FatFile*, fname_t*, unsigned char)+0xce>
    6a28:	cmp	r3, #0
    6a2a:	beq.n	6a92 <FatFile::open(FatFile*, fname_t*, unsigned char)+0xce>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    6a2c:	cmp	r4, r8
    6a2e:	it	cc
    6a30:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6a32:	cmp	r3, #46	; 0x2e
    6a34:	beq.n	6a8e <FatFile::open(FatFile*, fname_t*, unsigned char)+0xca>
    6a36:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    6a38:	cmp	r2, #15
    6a3a:	beq.n	6aac <FatFile::open(FatFile*, fname_t*, unsigned char)+0xe8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    6a3c:	lsls	r2, r2, #28
    6a3e:	bmi.n	6a8e <FatFile::open(FatFile*, fname_t*, unsigned char)+0xca>
      if (lfnOrd) {
    6a40:	cmp	r7, #0
    6a42:	bne.w	6cf4 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x330>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6a46:	movs	r2, #11
    6a48:	ldr	r1, [sp, #12]
    6a4a:	bl	cb20 <memcmp>
    6a4e:	cmp	r0, #0
    6a50:	bne.n	6a0e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    6a52:	ldrb.w	r3, [r9]
    6a56:	lsls	r3, r3, #31
    6a58:	bpl.w	6d90 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x3cc>
          goto found;
        }
        fnameFound = true;
    6a5c:	movs	r3, #1
    6a5e:	str	r3, [sp, #16]
    6a60:	b.n	6a0e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6a62:	ldr	r5, [pc, #652]	; (6cf0 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x32c>)
    6a64:	add.w	r4, sl, #12
    6a68:	umull	r4, r8, r5, r4
    6a6c:	mov.w	r8, r8, lsr #2
    6a70:	add.w	r8, r8, #1
    6a74:	uxtb.w	r8, r8
    6a78:	b.n	69ec <FatFile::open(FatFile*, fname_t*, unsigned char)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    6a7a:	ldr	r2, [sp, #8]
    6a7c:	subs	r2, #1
    6a7e:	uxtb	r2, r2
    6a80:	cmp	r3, r2
    6a82:	str	r2, [sp, #8]
    6a84:	bne.n	6a8e <FatFile::open(FatFile*, fname_t*, unsigned char)+0xca>
    6a86:	ldrb	r3, [r0, #13]
    6a88:	ldr	r2, [sp, #20]
    6a8a:	cmp	r2, r3
    6a8c:	beq.n	6abe <FatFile::open(FatFile*, fname_t*, unsigned char)+0xfa>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6a8e:	movs	r7, #0
    6a90:	b.n	6a0e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6a92:	cmp	r4, #0
    6a94:	it	eq
    6a96:	moveq	r6, fp
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    6a98:	cmp	r4, r8
        freeFound++;
    6a9a:	itt	cc
    6a9c:	addcc	r4, #1
    6a9e:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6aa0:	cmp	r3, #0
    6aa2:	beq.n	6b46 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x182>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6aa4:	cmp	r3, #229	; 0xe5
    6aa6:	bne.n	6a32 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x6e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6aa8:	movs	r7, #0
    6aaa:	b.n	6a0e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
    6aac:	cmp	r7, #0
    6aae:	bne.n	6a7a <FatFile::open(FatFile*, fname_t*, unsigned char)+0xb6>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    6ab0:	lsls	r1, r3, #25
    6ab2:	bpl.n	6a0e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    6ab4:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    6ab8:	ldrb	r3, [r0, #13]
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    6aba:	str	r7, [sp, #8]
        checksum = ldir->checksum;
    6abc:	str	r3, [sp, #20]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    6abe:	ldr	r3, [sp, #8]
    6ac0:	subs	r3, #1
    6ac2:	add.w	r1, r3, r3, lsl #1
    6ac6:	add.w	r1, r3, r1, lsl #2
      if (k >= len) {
    6aca:	cmp	sl, r1
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    6acc:	mov	r3, r1
      if (k >= len) {
    6ace:	bls.n	6a8e <FatFile::open(FatFile*, fname_t*, unsigned char)+0xca>
    6ad0:	adds	r0, #4
    6ad2:	add.w	lr, r1, #13
    6ad6:	b.n	6b12 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x14e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6ad8:	uxtb.w	ip, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6adc:	sub.w	r2, ip, #65	; 0x41
    6ae0:	cmp	r2, #25
    6ae2:	itt	ls
    6ae4:	addls.w	r2, ip, #32
    6ae8:	uxtbls.w	ip, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6aec:	ldr.w	r2, [r9, #8]
    6af0:	ldrb	r2, [r2, r3]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6af2:	sub.w	fp, r2, #65	; 0x41
    6af6:	cmp.w	fp, #25
    6afa:	itt	ls
    6afc:	addls	r2, #32
    6afe:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6b00:	cmp	r2, ip
    6b02:	add.w	r3, r3, #1
    6b06:	bne.n	6a8e <FatFile::open(FatFile*, fname_t*, unsigned char)+0xca>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    6b08:	cmp	r3, lr
    6b0a:	add.w	r0, r0, #2
    6b0e:	beq.w	6a0e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
    6b12:	subs	r2, r3, r1
    6b14:	uxtb	r2, r2
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < 5) {
    6b16:	cmp	r2, #4
    6b18:	bls.n	6b2e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x16a>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    6b1a:	cmp	r2, #10
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6b1c:	ite	ls
    6b1e:	ldrhls	r2, [r0, #0]
    6b20:	ldrhhi	r2, [r0, #2]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    6b22:	cmp	sl, r3
    6b24:	beq.n	6b36 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x172>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6b26:	cmp	r2, #255	; 0xff
    6b28:	bls.n	6ad8 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x114>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6b2a:	movs	r7, #0
    6b2c:	b.n	6a0e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    6b2e:	cmp	sl, r3
    6b30:	ldrh.w	r2, [r0, #-3]
    6b34:	bne.n	6b26 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x162>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    6b36:	cmp	r2, #0
    6b38:	it	ne
    6b3a:	movne	r7, #0
    6b3c:	b.n	6a0e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    6b3e:	ldrb	r3, [r5, #1]
    6b40:	cmp	r3, #0
    6b42:	bne.w	69d6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
    6b46:	ldr	r3, [sp, #24]
    6b48:	and.w	r3, r3, #66	; 0x42
    6b4c:	cmp	r3, #66	; 0x42
    6b4e:	bne.w	69d6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    6b52:	cmp	r4, #0
    6b54:	it	eq
    6b56:	moveq	r6, fp
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    6b58:	cmp	r4, r8
    6b5a:	bcc.n	6b64 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1a0>
    6b5c:	b.n	6b94 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1d0>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    6b5e:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    6b60:	cmp	r8, r4
    6b62:	bls.n	6b94 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1d0>
    dir = dirFile->readDirCache();
    6b64:	movs	r1, #0
    6b66:	mov	r0, r5
    6b68:	bl	5548 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    6b6c:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    6b6e:	cmp	r0, #0
    6b70:	bne.n	6b5e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x19a>
      if (dirFile->getError()) {
    6b72:	ldrb	r3, [r5, #1]
    6b74:	cbz	r3, 6b80 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1bc>
    6b76:	b.n	69d6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    6b78:	ldr	r3, [r5, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    6b7a:	ldrb	r3, [r3, #4]
    6b7c:	cmp	r3, #1
    6b7e:	bhi.n	6b94 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1d0>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    6b80:	cmp	r8, r4
    6b82:	bls.n	6b94 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1d0>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6b84:	mov	r0, r5
    6b86:	bl	5068 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    6b8a:	adds	r4, #16
    6b8c:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6b8e:	cmp	r0, #0
    6b90:	bne.n	6b78 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1b4>
    6b92:	b.n	69d6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    6b94:	ldr	r3, [sp, #16]
    6b96:	cbz	r3, 6ba6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1e2>
    if (!dirFile->lfnUniqueSfn(fname)) {
    6b98:	mov	r1, r9
    6b9a:	mov	r0, r5
    6b9c:	bl	68bc <FatFile::lfnUniqueSfn(fname_t*)>
    6ba0:	cmp	r0, #0
    6ba2:	beq.w	69d6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    6ba6:	lsls	r1, r6, #5
    6ba8:	mov	r0, r5
    6baa:	bl	5588 <FatFile::seekSet(unsigned long)>
    6bae:	cmp	r0, #0
    6bb0:	beq.w	69d6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    6bb4:	add.w	r7, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    6bb8:	ands.w	r7, r7, #255	; 0xff
    6bbc:	beq.w	6db2 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x3ee>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6bc0:	orr.w	r6, r7, #64	; 0x40
    6bc4:	uxtb	r6, r6
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6bc6:	mov	r8, r7
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
    6bc8:	movs	r4, #0
    6bca:	movs	r1, #0
    6bcc:	mov	r0, r5
    6bce:	bl	5548 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6bd2:	cmp	r0, #0
    6bd4:	beq.w	69d6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    6bd8:	ldr	r1, [r5, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    6bda:	ldrb.w	r2, [r1, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6bde:	cmp	r7, r8
    6be0:	orr.w	r2, r2, #1
    6be4:	ite	ne
    6be6:	movne	r3, r8
    6be8:	moveq	r3, r6
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6bea:	mov.w	lr, #15
    6bee:	strb.w	r2, [r1, #36]	; 0x24
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6bf2:	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    6bf4:	strb	r4, [r0, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6bf6:	strb.w	lr, [r0, #11]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6bfa:	ldrb.w	lr, [r9, #13]
    6bfe:	ldrb.w	r1, [r9, #14]
    6c02:	mov.w	r2, lr, lsr #1
    6c06:	orr.w	r2, r2, lr, lsl #7
    6c0a:	add	r2, r1
    6c0c:	uxtb	r2, r2
    6c0e:	ldrb.w	lr, [r9, #15]
    6c12:	lsrs	r1, r2, #1
    6c14:	orr.w	r2, r1, r2, lsl #7
    6c18:	uxtab	r2, lr, r2
    6c1c:	uxtb	r2, r2
    6c1e:	ldrb.w	lr, [r9, #16]
    6c22:	lsrs	r1, r2, #1
    6c24:	orr.w	r2, r1, r2, lsl #7
    6c28:	uxtab	r2, lr, r2
    6c2c:	uxtb	r2, r2
    6c2e:	ldrb.w	lr, [r9, #17]
    6c32:	lsrs	r1, r2, #1
    6c34:	orr.w	r2, r1, r2, lsl #7
    6c38:	uxtab	r2, lr, r2
    6c3c:	uxtb	r2, r2
    6c3e:	ldrb.w	lr, [r9, #18]
    6c42:	lsrs	r1, r2, #1
    6c44:	orr.w	r2, r1, r2, lsl #7
    6c48:	uxtab	r2, lr, r2
    6c4c:	uxtb	r2, r2
    6c4e:	ldrb.w	lr, [r9, #19]
    6c52:	lsrs	r1, r2, #1
    6c54:	orr.w	r2, r1, r2, lsl #7
    6c58:	uxtab	r2, lr, r2
    6c5c:	uxtb	r2, r2
    6c5e:	ldrb.w	lr, [r9, #20]
    6c62:	lsrs	r1, r2, #1
    6c64:	orr.w	r2, r1, r2, lsl #7
    6c68:	uxtab	r2, lr, r2
    6c6c:	uxtb	r2, r2
    6c6e:	ldrb.w	lr, [r9, #21]
    6c72:	lsrs	r1, r2, #1
    6c74:	orr.w	r2, r1, r2, lsl #7
    6c78:	uxtab	r2, lr, r2
    6c7c:	uxtb	r2, r2
    6c7e:	ldrb.w	lr, [r9, #22]
    6c82:	lsrs	r1, r2, #1
    6c84:	orr.w	r2, r1, r2, lsl #7
    6c88:	uxtab	r2, lr, r2
    6c8c:	uxtb	r2, r2
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6c8e:	ldrb.w	lr, [r9, #23]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6c92:	strh	r4, [r0, #26]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6c94:	lsrs	r1, r2, #1
    6c96:	orr.w	r2, r1, r2, lsl #7
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6c9a:	and.w	r3, r3, #31
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6c9e:	uxtab	r2, lr, r2
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6ca2:	subs	r3, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6ca4:	strb	r2, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6ca6:	add.w	r2, r3, r3, lsl #1
    6caa:	add.w	r2, r3, r2, lsl #2
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    6cae:	ldr.w	lr, [r9, #8]
    6cb2:	adds	r0, #4
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    6cb4:	movs	r3, #0
    6cb6:	b.n	6cd8 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x314>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6cb8:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6cba:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6cbe:	bls.n	6cea <FatFile::open(FatFile*, fname_t*, unsigned char)+0x326>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    6cc0:	cmp	r3, #10
    6cc2:	ite	ls
    6cc4:	strhls	r1, [r0, #0]
    6cc6:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    6cc8:	adds	r3, #1
    6cca:	uxtb	r3, r3
    6ccc:	cmp	r3, #13
    6cce:	add.w	r2, r2, #1
    6cd2:	add.w	r0, r0, #2
    6cd6:	beq.n	6da6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x3e2>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6cd8:	cmp	sl, r2
    6cda:	bhi.n	6cb8 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x2f4>
    6cdc:	ite	ne
    6cde:	movne.w	r1, #4294967295
    6ce2:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6ce4:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6ce6:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6ce8:	bhi.n	6cc0 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x2fc>
    6cea:	strh.w	r1, [r0, #-3]
    6cee:	b.n	6cc8 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x304>
    6cf0:	.word	0x4ec4ec4f
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6cf4:	ldr	r3, [sp, #8]
    6cf6:	cmp	r3, #1
    6cf8:	bne.w	69d6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6cfc:	ldrb	r1, [r0, #0]
    6cfe:	ldrb	r3, [r0, #1]
    6d00:	ldrb	r4, [r0, #9]
    6d02:	lsls	r2, r1, #7
    6d04:	orr.w	r2, r2, r1, lsr #1
    6d08:	add	r3, r2
    6d0a:	uxtb	r3, r3
    6d0c:	lsls	r2, r3, #7
    6d0e:	ldrb	r1, [r0, #2]
    6d10:	orr.w	r3, r2, r3, lsr #1
    6d14:	uxtab	r3, r1, r3
    6d18:	uxtb	r3, r3
    6d1a:	lsls	r2, r3, #7
    6d1c:	ldrb	r1, [r0, #3]
    6d1e:	orr.w	r3, r2, r3, lsr #1
    6d22:	uxtab	r3, r1, r3
    6d26:	uxtb	r3, r3
    6d28:	lsls	r2, r3, #7
    6d2a:	ldrb	r1, [r0, #4]
    6d2c:	orr.w	r3, r2, r3, lsr #1
    6d30:	uxtab	r3, r1, r3
    6d34:	uxtb	r3, r3
    6d36:	lsrs	r2, r3, #1
    6d38:	ldrb	r1, [r0, #5]
    6d3a:	orr.w	r3, r2, r3, lsl #7
    6d3e:	uxtab	r3, r1, r3
    6d42:	uxtb	r3, r3
    6d44:	lsrs	r2, r3, #1
    6d46:	ldrb	r1, [r0, #6]
    6d48:	orr.w	r3, r2, r3, lsl #7
    6d4c:	uxtab	r3, r1, r3
    6d50:	uxtb	r3, r3
    6d52:	lsrs	r2, r3, #1
    6d54:	ldrb	r1, [r0, #7]
    6d56:	orr.w	r3, r2, r3, lsl #7
    6d5a:	uxtab	r3, r1, r3
    6d5e:	uxtb	r3, r3
    6d60:	lsrs	r2, r3, #1
    6d62:	ldrb	r1, [r0, #8]
    6d64:	orr.w	r3, r2, r3, lsl #7
    6d68:	uxtab	r3, r1, r3
    6d6c:	uxtb	r3, r3
    6d6e:	lsrs	r2, r3, #1
    6d70:	orr.w	r3, r2, r3, lsl #7
    6d74:	uxtab	r3, r4, r3
    6d78:	uxtb	r3, r3
    6d7a:	lsrs	r2, r3, #1
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6d7c:	ldrb	r1, [r0, #10]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6d7e:	orr.w	r3, r2, r3, lsl #7
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6d82:	uxtab	r3, r1, r3
    6d86:	ldr	r2, [sp, #20]
    6d88:	uxtb	r3, r3
    6d8a:	cmp	r2, r3
    6d8c:	bne.w	69d6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    6d90:	ldr	r3, [sp, #24]
    6d92:	lsls	r6, r3, #24
    6d94:	bmi.w	69d6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    6d98:	str	r7, [sp, #0]
    6d9a:	mov	r2, fp
    6d9c:	mov	r1, r5
    6d9e:	ldr	r0, [sp, #28]
    6da0:	bl	561c <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)>
    6da4:	b.n	69d8 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x14>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6da6:	add.w	r8, r8, #4294967295
    6daa:	ands.w	r8, r8, #255	; 0xff
    6dae:	bne.w	6bca <FatFile::open(FatFile*, fname_t*, unsigned char)+0x206>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6db2:	ldr	r3, [r5, #20]
  dir = dirFile->readDirCache();
    6db4:	movs	r1, #0
    6db6:	mov	r0, r5
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6db8:	ubfx	fp, r3, #5, #16
  dir = dirFile->readDirCache();
    6dbc:	bl	5548 <FatFile::readDirCache(bool)>
  if (!dir) {
    6dc0:	mov	r4, r0
    6dc2:	cmp	r0, #0
    6dc4:	beq.w	69d6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
    6dc8:	movs	r2, #32
    6dca:	movs	r1, #0
    6dcc:	bl	cc4c <memset>
  memcpy(dir->name, fname->sfn, 11);
    6dd0:	mov	r3, r9

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    6dd2:	ldr	r2, [pc, #76]	; (6e20 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x45c>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
  memcpy(dir->name, fname->sfn, 11);
    6dd4:	ldr.w	r1, [r3, #13]!
    6dd8:	ldr	r0, [r3, #4]
    6dda:	str	r0, [r4, #4]
    6ddc:	str	r1, [r4, #0]
    6dde:	ldrh	r1, [r3, #8]
    6de0:	ldrb	r3, [r3, #10]
    6de2:	strb	r3, [r4, #10]
    6de4:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6de6:	ldrb.w	r3, [r9]

  // set timestamps
  if (FsDateTime::callback) {
    6dea:	ldr	r2, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6dec:	and.w	r3, r3, #24
    6df0:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    6df2:	cbz	r2, 6e0e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x44a>
    // call user date/time function
    FsDateTime::callback(&date, &time);
    6df4:	add.w	r1, sp, #38	; 0x26
    6df8:	add	r0, sp, #36	; 0x24
    6dfa:	blx	r2
    setLe16(dir->createDate, date);
    6dfc:	ldrh.w	r3, [sp, #36]	; 0x24
    setLe16(dir->createTime, time);
    6e00:	ldrh.w	r2, [sp, #38]	; 0x26
    6e04:	strh	r3, [r4, #16]
    6e06:	strh	r3, [r4, #18]
    6e08:	strh	r3, [r4, #24]
    6e0a:	strh	r2, [r4, #14]
    6e0c:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    6e0e:	ldr	r2, [r5, #8]
    6e10:	ldrb.w	r3, [r2, #36]	; 0x24
    6e14:	orr.w	r3, r3, #1
    6e18:	strb.w	r3, [r2, #36]	; 0x24
    6e1c:	ldr	r3, [sp, #24]
    6e1e:	b.n	6d98 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x3d4>
    6e20:	.word	0x20020364

00006e24 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    6e24:	ldrb	r0, [r0, #16]
    6e26:	bx	lr

00006e28 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    6e28:	ldrb	r0, [r0, #18]
    6e2a:	bx	lr

00006e2c <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    6e2c:	ldrb	r0, [r0, #19]
    6e2e:	bx	lr

00006e30 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    6e30:	bx	lr
    6e32:	nop

00006e34 <SdSpiCard::~SdSpiCard()>:
    6e34:	push	{r4, lr}
    6e36:	movs	r1, #20
    6e38:	mov	r4, r0
    6e3a:	bl	b24c <operator delete(void*, unsigned int)>
    6e3e:	mov	r0, r4
    6e40:	pop	{r4, pc}
    6e42:	nop

00006e44 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6e44:	push	{r4, r5, r6, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    6e46:	ldrb	r6, [r0, #17]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6e48:	mov	r5, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    6e4a:	cbnz	r6, 6e60 <SdSpiCard::isBusy()+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
    6e4c:	ldr	r0, [r0, #12]
    6e4e:	bl	9348 <SdSpiAltDriver::activate()>
    6e52:	ldr	r3, [r5, #12]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
    6e54:	mov	r1, r6
    6e56:	ldrb	r0, [r3, #8]
    6e58:	bl	9ca4 <digitalWrite>
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    6e5c:	movs	r3, #1
    6e5e:	strb	r3, [r5, #17]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6e60:	movs	r4, #8
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6e62:	ldr	r0, [r5, #12]
    6e64:	bl	9420 <SdSpiAltDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    6e68:	cmp	r0, #255	; 0xff
    6e6a:	add.w	r3, r4, #4294967295
    6e6e:	beq.n	6ea0 <SdSpiCard::isBusy()+0x5c>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    6e70:	ands.w	r4, r3, #255	; 0xff
    6e74:	bne.n	6e62 <SdSpiCard::isBusy()+0x1e>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    6e76:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    6e78:	cbnz	r6, 6e7e <SdSpiCard::isBusy()+0x3a>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6e7a:	ldrb	r3, [r5, #17]
    6e7c:	cbnz	r3, 6e82 <SdSpiCard::isBusy()+0x3e>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    6e7e:	mov	r0, r4
    6e80:	pop	{r4, r5, r6, pc}
    6e82:	ldr	r3, [r5, #12]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
    6e84:	movs	r1, #1
    6e86:	ldrb	r0, [r3, #8]
    6e88:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6e8c:	movs	r1, #255	; 0xff
    6e8e:	ldr	r0, [r5, #12]
    6e90:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6e94:	ldr	r0, [r5, #12]
    6e96:	bl	93d8 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6e9a:	strb	r6, [r5, #17]
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    6e9c:	mov	r0, r4
    6e9e:	pop	{r4, r5, r6, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    6ea0:	movs	r4, #0
    6ea2:	b.n	6e78 <SdSpiCard::isBusy()+0x34>

00006ea4 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    6ea4:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6ea6:	ldr	r7, [pc, #136]	; (6f30 <SdSpiCard::writeStop()+0x8c>)
    6ea8:	sub	sp, #12
    6eaa:	ldr	r3, [r7, #0]
    6eac:	str	r3, [sp, #4]
	return ret;
    6eae:	ldr	r6, [sp, #4]
    6eb0:	mov	r5, r0
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    6eb2:	uxth	r6, r6
    6eb4:	b.n	6ec6 <SdSpiCard::writeStop()+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6eb6:	ldr	r3, [r7, #0]
    6eb8:	str	r3, [sp, #0]
	return ret;
    6eba:	ldr	r3, [sp, #0]
    6ebc:	uxth	r3, r3
    6ebe:	subs	r3, r3, r6
    6ec0:	cmp.w	r3, #600	; 0x258
    6ec4:	bgt.n	6ee6 <SdSpiCard::writeStop()+0x42>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6ec6:	ldr	r0, [r5, #12]
    6ec8:	bl	9420 <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    6ecc:	cmp	r0, #255	; 0xff
    6ece:	mov	r4, r0
    6ed0:	bne.n	6eb6 <SdSpiCard::writeStop()+0x12>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6ed2:	movs	r1, #253	; 0xfd
    6ed4:	ldr	r0, [r5, #12]
    6ed6:	bl	945c <SdSpiAltDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6eda:	ldrb	r6, [r5, #17]
    6edc:	cbnz	r6, 6f12 <SdSpiCard::writeStop()+0x6e>
    6ede:	movs	r6, #1

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    6ee0:	mov	r0, r6
    6ee2:	add	sp, #12
    6ee4:	pop	{r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6ee6:	ldrb	r6, [r5, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6ee8:	movs	r3, #29
    6eea:	strb	r3, [r5, #16]
    6eec:	cmp	r6, #0
    6eee:	beq.n	6ee0 <SdSpiCard::writeStop()+0x3c>
    6ef0:	ldr	r3, [r5, #12]
    6ef2:	movs	r1, #1
    6ef4:	ldrb	r0, [r3, #8]
    6ef6:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6efa:	movs	r1, #255	; 0xff
    6efc:	ldr	r0, [r5, #12]
    6efe:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6f02:	ldr	r0, [r5, #12]
    6f04:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6f08:	movs	r6, #0

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    6f0a:	mov	r0, r6
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6f0c:	strb	r6, [r5, #17]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    6f0e:	add	sp, #12
    6f10:	pop	{r4, r5, r6, r7, pc}
    6f12:	ldr	r3, [r5, #12]
    6f14:	movs	r1, #1
    6f16:	ldrb	r0, [r3, #8]
    6f18:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6f1c:	mov	r1, r4
    6f1e:	ldr	r0, [r5, #12]
    6f20:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6f24:	ldr	r0, [r5, #12]
    6f26:	bl	93d8 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6f2a:	movs	r3, #0
    6f2c:	strb	r3, [r5, #17]
    6f2e:	b.n	6ee0 <SdSpiCard::writeStop()+0x3c>
    6f30:	.word	0x200203c0

00006f34 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    6f34:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f38:	ldr	r7, [pc, #192]	; (6ffc <SdSpiCard::writeData(unsigned char const*)+0xc8>)
    6f3a:	sub	sp, #8
    6f3c:	ldr	r3, [r7, #0]
    6f3e:	str	r3, [sp, #4]
	return ret;
    6f40:	ldr	r6, [sp, #4]
    6f42:	mov	r5, r0
    6f44:	mov	r8, r1
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    6f46:	uxth	r6, r6
    6f48:	b.n	6f5a <SdSpiCard::writeData(unsigned char const*)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f4a:	ldr	r3, [r7, #0]
    6f4c:	str	r3, [sp, #0]
	return ret;
    6f4e:	ldr	r3, [sp, #0]
    6f50:	uxth	r3, r3
    6f52:	subs	r3, r3, r6
    6f54:	cmp.w	r3, #600	; 0x258
    6f58:	bgt.n	6faa <SdSpiCard::writeData(unsigned char const*)+0x76>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6f5a:	ldr	r0, [r5, #12]
    6f5c:	bl	9420 <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    6f60:	cmp	r0, #255	; 0xff
    6f62:	mov	r4, r0
    6f64:	bne.n	6f4a <SdSpiCard::writeData(unsigned char const*)+0x16>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6f66:	movs	r1, #252	; 0xfc
    6f68:	ldr	r0, [r5, #12]
    6f6a:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
    6f6e:	mov.w	r2, #512	; 0x200
    6f72:	mov	r1, r8
    6f74:	ldr	r0, [r5, #12]
    6f76:	bl	9474 <SdSpiAltDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6f7a:	mov	r1, r4
    6f7c:	ldr	r0, [r5, #12]
    6f7e:	bl	945c <SdSpiAltDriver::send(unsigned char)>
    6f82:	mov	r1, r4
    6f84:	ldr	r0, [r5, #12]
    6f86:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6f8a:	ldr	r0, [r5, #12]
    6f8c:	bl	9420 <SdSpiAltDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    6f90:	and.w	r3, r0, #31
    6f94:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    6f96:	strb	r0, [r5, #18]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    6f98:	beq.n	6fd6 <SdSpiCard::writeData(unsigned char const*)+0xa2>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6f9a:	ldrb	r3, [r5, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6f9c:	movs	r2, #30
    6f9e:	strb	r2, [r5, #16]
    6fa0:	cbnz	r3, 6fde <SdSpiCard::writeData(unsigned char const*)+0xaa>
  }
  return true;

fail:
  spiStop();
  return false;
    6fa2:	movs	r0, #0
}
    6fa4:	add	sp, #8
    6fa6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6faa:	ldrb	r3, [r5, #17]
    6fac:	movs	r2, #33	; 0x21
    6fae:	strb	r2, [r5, #16]
    6fb0:	cmp	r3, #0
    6fb2:	beq.n	6fa2 <SdSpiCard::writeData(unsigned char const*)+0x6e>
    6fb4:	ldr	r3, [r5, #12]
    6fb6:	movs	r1, #1
    6fb8:	ldrb	r0, [r3, #8]
    6fba:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6fbe:	movs	r1, #255	; 0xff
    6fc0:	ldr	r0, [r5, #12]
    6fc2:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6fc6:	ldr	r0, [r5, #12]
    6fc8:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6fcc:	movs	r0, #0
    6fce:	strb	r0, [r5, #17]
  return true;

fail:
  spiStop();
  return false;
}
    6fd0:	add	sp, #8
    6fd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    goto fail;
  }
  return true;
    6fd6:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    6fd8:	add	sp, #8
    6fda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fde:	ldr	r3, [r5, #12]
    6fe0:	movs	r1, #1
    6fe2:	ldrb	r0, [r3, #8]
    6fe4:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6fe8:	mov	r1, r4
    6fea:	ldr	r0, [r5, #12]
    6fec:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6ff0:	ldr	r0, [r5, #12]
    6ff2:	bl	93d8 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6ff6:	movs	r3, #0
    6ff8:	strb	r3, [r5, #17]
    6ffa:	b.n	6fa2 <SdSpiCard::writeData(unsigned char const*)+0x6e>
    6ffc:	.word	0x200203c0

00007000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7000:	push	{r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
    7002:	ldrb	r5, [r0, #17]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7004:	sub	sp, #20
    7006:	mov	r4, r0
    7008:	mov	r7, r1
    700a:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    700c:	cbnz	r5, 7022 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
    700e:	ldr	r0, [r0, #12]
    7010:	bl	9348 <SdSpiAltDriver::activate()>
    7014:	ldr	r3, [r4, #12]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
    7016:	mov	r1, r5
    7018:	ldrb	r0, [r3, #8]
    701a:	bl	9ca4 <digitalWrite>
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    701e:	movs	r3, #1
    7020:	strb	r3, [r4, #17]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7022:	ldr	r6, [pc, #128]	; (70a4 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>)
    7024:	ldr	r3, [r6, #0]
    7026:	str	r3, [sp, #12]
	return ret;
    7028:	ldr	r5, [sp, #12]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    702a:	uxth	r5, r5
    702c:	b.n	703e <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x3e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    702e:	ldr	r3, [r6, #0]
    7030:	str	r3, [sp, #8]
	return ret;
    7032:	ldr	r3, [sp, #8]
    7034:	uxth	r3, r3
    7036:	subs	r3, r3, r5
    7038:	cmp.w	r3, #600	; 0x258
    703c:	bgt.n	7048 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    703e:	ldr	r0, [r4, #12]
    7040:	bl	9420 <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7044:	cmp	r0, #255	; 0xff
    7046:	bne.n	702e <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7048:	orr.w	r1, r7, #64	; 0x40
    704c:	ldr	r0, [r4, #12]
    704e:	bl	945c <SdSpiAltDriver::send(unsigned char)>
    7052:	add	r6, sp, #4
    7054:	add	r5, sp, #8
    7056:	ldrb.w	r1, [r5, #-1]!
    705a:	ldr	r0, [r4, #12]
    705c:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    7060:	cmp	r5, r6
    7062:	bne.n	7056 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x56>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    7064:	cbz	r7, 7090 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x90>
    7066:	movs	r1, #135	; 0x87
    7068:	ldr	r0, [r4, #12]
    706a:	bl	945c <SdSpiAltDriver::send(unsigned char)>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
    706e:	cmp	r7, #12
    7070:	beq.n	709a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7072:	movs	r5, #0
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7074:	ldr	r0, [r4, #12]
    7076:	bl	9420 <SdSpiAltDriver::receive()>
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
    707a:	lsls	r3, r0, #24
    707c:	strb	r0, [r4, #18]
    707e:	bmi.n	7084 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x84>
  }
  return m_status;
}
    7080:	add	sp, #20
    7082:	pop	{r4, r5, r6, r7, pc}
    7084:	adds	r5, #1
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
    7086:	cmp.w	r5, #256	; 0x100
    708a:	bne.n	7074 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
  }
  return m_status;
}
    708c:	add	sp, #20
    708e:	pop	{r4, r5, r6, r7, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7090:	movs	r1, #149	; 0x95
    7092:	ldr	r0, [r4, #12]
    7094:	bl	945c <SdSpiAltDriver::send(unsigned char)>
    7098:	b.n	7072 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x72>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    709a:	ldr	r0, [r4, #12]
    709c:	bl	9420 <SdSpiAltDriver::receive()>
    70a0:	b.n	7072 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x72>
    70a2:	nop
    70a4:	.word	0x200203c0

000070a8 <SdSpiCard::readOCR(unsigned long*)>:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    70a8:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    70aa:	push	{r4, r5, r6, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    70ac:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    70ae:	mov	r4, r0
    70b0:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    70b2:	blx	r3
  if (cardCommand(CMD58, 0)) {
    70b4:	mov	r0, r4
    70b6:	movs	r2, #0
    70b8:	movs	r1, #58	; 0x3a
    70ba:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    70be:	cbnz	r0, 70da <SdSpiCard::readOCR(unsigned long*)+0x32>
    70c0:	adds	r5, r6, #4
    70c2:	ldr	r0, [r4, #12]
    70c4:	bl	9420 <SdSpiAltDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    70c8:	strb.w	r0, [r5, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    70cc:	cmp	r5, r6
    70ce:	bne.n	70c2 <SdSpiCard::readOCR(unsigned long*)+0x1a>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    70d0:	ldrb	r5, [r4, #17]
    70d2:	cbnz	r5, 7104 <SdSpiCard::readOCR(unsigned long*)+0x5c>
    70d4:	movs	r5, #1
  return true;

fail:
  spiStop();
  return false;
}
    70d6:	mov	r0, r5
    70d8:	pop	{r4, r5, r6, pc}
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    70da:	ldrb	r5, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    70dc:	movs	r3, #18
    70de:	strb	r3, [r4, #16]
    70e0:	cmp	r5, #0
    70e2:	beq.n	70d6 <SdSpiCard::readOCR(unsigned long*)+0x2e>
    70e4:	ldr	r3, [r4, #12]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
    70e6:	movs	r1, #1
    70e8:	ldrb	r0, [r3, #8]
    70ea:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    70ee:	movs	r1, #255	; 0xff
    70f0:	ldr	r0, [r4, #12]
    70f2:	bl	945c <SdSpiAltDriver::send(unsigned char)>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    70f6:	movs	r5, #0
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    70f8:	ldr	r0, [r4, #12]
    70fa:	bl	93d8 <SdSpiAltDriver::deactivate()>
    70fe:	strb	r5, [r4, #17]
  return true;

fail:
  spiStop();
  return false;
}
    7100:	mov	r0, r5
    7102:	pop	{r4, r5, r6, pc}
    7104:	ldr	r3, [r4, #12]
    7106:	movs	r1, #1
    7108:	ldrb	r0, [r3, #8]
    710a:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    710e:	movs	r1, #255	; 0xff
    7110:	ldr	r0, [r4, #12]
    7112:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7116:	ldr	r0, [r4, #12]
    7118:	bl	93d8 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    711c:	movs	r3, #0
    711e:	strb	r3, [r4, #17]
  return true;

fail:
  spiStop();
  return false;
}
    7120:	mov	r0, r5
    7122:	pop	{r4, r5, r6, pc}

00007124 <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    7124:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7126:	ldr	r3, [r0, #0]
    7128:	ldr	r5, [pc, #88]	; (7184 <SdSpiCard::writeStart(unsigned long)+0x60>)
    712a:	ldr	r3, [r3, #64]	; 0x40
    712c:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    712e:	sub	sp, #12
    7130:	mov	r4, r0
    7132:	mov	r2, r1
    7134:	bne.n	717a <SdSpiCard::writeStart(unsigned long)+0x56>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    7136:	ldrb	r0, [r0, #19]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7138:	cmp	r0, #3
    sector <<= 9;
    713a:	it	ne
    713c:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    713e:	movs	r1, #25
    7140:	mov	r0, r4
    7142:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7146:	cbz	r0, 7174 <SdSpiCard::writeStart(unsigned long)+0x50>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7148:	ldrb	r0, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    714a:	movs	r3, #14
    714c:	strb	r3, [r4, #16]
    714e:	cbnz	r0, 7154 <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    7150:	add	sp, #12
    7152:	pop	{r4, r5, pc}
    7154:	ldr	r3, [r4, #12]
    7156:	movs	r1, #1
    7158:	ldrb	r0, [r3, #8]
    715a:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    715e:	movs	r1, #255	; 0xff
    7160:	ldr	r0, [r4, #12]
    7162:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7166:	ldr	r0, [r4, #12]
    7168:	bl	93d8 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    716c:	movs	r0, #0
    716e:	strb	r0, [r4, #17]
  return true;

fail:
  spiStop();
  return false;
}
    7170:	add	sp, #12
    7172:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    7174:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    7176:	add	sp, #12
    7178:	pop	{r4, r5, pc}
    717a:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    717c:	blx	r3
    717e:	ldr	r2, [sp, #4]
    7180:	b.n	7138 <SdSpiCard::writeStart(unsigned long)+0x14>
    7182:	nop
    7184:	.word	0x00006e2d

00007188 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    7188:	push	{r4, r5, r6, r7, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    718a:	ldrb	r5, [r0, #8]
    718c:	cmp	r5, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    718e:	sub	sp, #12
    7190:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    7192:	beq.n	71a2 <SdSpiCard::syncDevice()+0x1a>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    7194:	cmp	r5, #2
    7196:	beq.n	71c0 <SdSpiCard::syncDevice()+0x38>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    7198:	movs	r3, #0
#endif  // ENABLE_DEDICATED_SPI
  return true;
    719a:	movs	r0, #1
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    719c:	strb	r3, [r4, #8]
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    719e:	add	sp, #12
    71a0:	pop	{r4, r5, r6, r7, pc}
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    71a2:	movs	r2, #0
    71a4:	movs	r1, #12
    71a6:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    71aa:	ldrb	r3, [r4, #17]
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    71ac:	mov	r6, r0
    71ae:	cmp	r0, #0
    71b0:	beq.n	723c <SdSpiCard::syncDevice()+0xb4>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    71b2:	movs	r2, #9
    71b4:	strb	r2, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    71b6:	cmp	r3, #0
    71b8:	bne.n	725c <SdSpiCard::syncDevice()+0xd4>
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
      return false;
    71ba:	movs	r0, #0
    }
  }
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    71bc:	add	sp, #12
    71be:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    71c0:	ldr	r7, [pc, #160]	; (7264 <SdSpiCard::syncDevice()+0xdc>)
    71c2:	ldr	r3, [r7, #0]
    71c4:	str	r3, [sp, #4]
	return ret;
    71c6:	ldr	r6, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    71c8:	uxth	r6, r6
    71ca:	b.n	71dc <SdSpiCard::syncDevice()+0x54>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    71cc:	ldr	r3, [r7, #0]
    71ce:	str	r3, [sp, #0]
	return ret;
    71d0:	ldr	r3, [sp, #0]
    71d2:	uxth	r3, r3
    71d4:	subs	r3, r3, r6
    71d6:	cmp.w	r3, #600	; 0x258
    71da:	bgt.n	7214 <SdSpiCard::syncDevice()+0x8c>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    71dc:	ldr	r0, [r4, #12]
    71de:	bl	9420 <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    71e2:	cmp	r0, #255	; 0xff
    71e4:	mov	r5, r0
    71e6:	bne.n	71cc <SdSpiCard::syncDevice()+0x44>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    71e8:	movs	r1, #253	; 0xfd
    71ea:	ldr	r0, [r4, #12]
    71ec:	bl	945c <SdSpiAltDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    71f0:	ldrb	r3, [r4, #17]
    71f2:	cmp	r3, #0
    71f4:	beq.n	7198 <SdSpiCard::syncDevice()+0x10>
    71f6:	ldr	r3, [r4, #12]
    71f8:	movs	r1, #1
    71fa:	ldrb	r0, [r3, #8]
    71fc:	bl	9ca4 <digitalWrite>
    7200:	mov	r1, r5
    7202:	ldr	r0, [r4, #12]
    7204:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7208:	ldr	r0, [r4, #12]
    720a:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    720e:	movs	r3, #0
    7210:	strb	r3, [r4, #17]
    7212:	b.n	7198 <SdSpiCard::syncDevice()+0x10>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7214:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7216:	movs	r2, #29
    7218:	strb	r2, [r4, #16]
    721a:	cmp	r3, #0
    721c:	beq.n	71ba <SdSpiCard::syncDevice()+0x32>
    721e:	ldr	r3, [r4, #12]
    7220:	movs	r1, #1
    7222:	ldrb	r0, [r3, #8]
    7224:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7228:	movs	r1, #255	; 0xff
    722a:	ldr	r0, [r4, #12]
    722c:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7230:	ldr	r0, [r4, #12]
    7232:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7236:	movs	r3, #0
    7238:	strb	r3, [r4, #17]
    723a:	b.n	71ba <SdSpiCard::syncDevice()+0x32>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    723c:	cmp	r3, #0
    723e:	beq.n	7198 <SdSpiCard::syncDevice()+0x10>
    7240:	ldr	r3, [r4, #12]
    7242:	mov	r1, r5
    7244:	ldrb	r0, [r3, #8]
    7246:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    724a:	movs	r1, #255	; 0xff
    724c:	ldr	r0, [r4, #12]
    724e:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7252:	ldr	r0, [r4, #12]
    7254:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7258:	strb	r6, [r4, #17]
    725a:	b.n	7198 <SdSpiCard::syncDevice()+0x10>
    725c:	ldr	r3, [r4, #12]
    725e:	mov	r1, r5
    7260:	b.n	7222 <SdSpiCard::syncDevice()+0x9a>
    7262:	nop
    7264:	.word	0x200203c0

00007268 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    7268:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    726c:	ldr	r3, [r0, #0]
    726e:	ldr	r6, [pc, #264]	; (7378 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x110>)
    7270:	ldr	r5, [r3, #12]
    7272:	cmp	r5, r6
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    7274:	sub	sp, #8
    7276:	bne.n	7356 <SdSpiCard::readSector(unsigned long, unsigned char*)+0xee>
    7278:	mov	r7, r2
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    727a:	ldrb	r2, [r0, #8]
    727c:	cmp	r2, #1
    727e:	mov	r4, r0
    7280:	mov	r8, r1
    7282:	beq.n	7296 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x2e>
    if (!syncDevice()) {
    7284:	ldr	r3, [r3, #20]
    7286:	mov	r0, r4
    7288:	blx	r3
    728a:	cmp	r0, #0
    728c:	bne.n	72f0 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x88>
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    728e:	movs	r0, #0
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  //  ENABLE_DEDICATED_SPI
  }
    7290:	add	sp, #8
    7292:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7296:	ldr	r2, [r0, #4]
    7298:	cmp	r1, r2
    729a:	bne.n	7284 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    729c:	ldr	r6, [pc, #220]	; (737c <SdSpiCard::readSector(unsigned long, unsigned char*)+0x114>)
    729e:	ldr	r3, [r6, #0]
    72a0:	str	r3, [sp, #4]
	return ret;
    72a2:	ldr	r5, [sp, #4]
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    72a4:	uxth	r5, r5
    72a6:	b.n	72b8 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x50>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    72a8:	ldr	r3, [r6, #0]
    72aa:	str	r3, [sp, #0]
	return ret;
    72ac:	ldr	r3, [sp, #0]
    72ae:	uxth	r3, r3
    72b0:	subs	r3, r3, r5
    72b2:	cmp.w	r3, #300	; 0x12c
    72b6:	bgt.n	731c <SdSpiCard::readSector(unsigned long, unsigned char*)+0xb4>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    72b8:	ldr	r0, [r4, #12]
    72ba:	bl	9420 <SdSpiAltDriver::receive()>
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    72be:	cmp	r0, #255	; 0xff
    72c0:	strb	r0, [r4, #18]
    72c2:	beq.n	72a8 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x40>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_SECTOR) {
    72c4:	cmp	r0, #254	; 0xfe
    72c6:	beq.n	7322 <SdSpiCard::readSector(unsigned long, unsigned char*)+0xba>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    72c8:	movs	r3, #23
    72ca:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    72cc:	ldrb	r3, [r4, #17]
    72ce:	cmp	r3, #0
    72d0:	beq.n	728e <SdSpiCard::readSector(unsigned long, unsigned char*)+0x26>
    72d2:	ldr	r3, [r4, #12]
    72d4:	movs	r1, #1
    72d6:	ldrb	r0, [r3, #8]
    72d8:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    72dc:	movs	r1, #255	; 0xff
    72de:	ldr	r0, [r4, #12]
    72e0:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    72e4:	ldr	r0, [r4, #12]
    72e6:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    72ea:	movs	r3, #0
    72ec:	strb	r3, [r4, #17]
    72ee:	b.n	728e <SdSpiCard::readSector(unsigned long, unsigned char*)+0x26>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    72f0:	ldr	r3, [r4, #0]
    72f2:	ldr	r2, [pc, #140]	; (7380 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x118>)
    72f4:	ldr	r3, [r3, #64]	; 0x40
    72f6:	cmp	r3, r2
    72f8:	bne.n	7366 <SdSpiCard::readSector(unsigned long, unsigned char*)+0xfe>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    72fa:	ldrb	r0, [r4, #19]
    72fc:	cmp	r0, #3
    sector <<= 9;
    72fe:	ite	ne
    7300:	movne.w	r2, r8, lsl #9
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    7304:	moveq	r2, r8
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    7306:	movs	r1, #18
    7308:	mov	r0, r4
    730a:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    730e:	cbz	r0, 735c <SdSpiCard::readSector(unsigned long, unsigned char*)+0xf4>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7310:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7312:	movs	r2, #12
    7314:	strb	r2, [r4, #16]
    7316:	cmp	r3, #0
    7318:	beq.n	728e <SdSpiCard::readSector(unsigned long, unsigned char*)+0x26>
    731a:	b.n	72d2 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x6a>
    731c:	movs	r3, #28
    731e:	strb	r3, [r4, #16]
    7320:	b.n	72cc <SdSpiCard::readSector(unsigned long, unsigned char*)+0x64>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
    7322:	mov	r1, r7
    7324:	mov.w	r2, #512	; 0x200
    7328:	ldr	r0, [r4, #12]
    732a:	bl	943c <SdSpiAltDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    732e:	strb	r0, [r4, #18]
    7330:	cbz	r0, 7338 <SdSpiCard::readSector(unsigned long, unsigned char*)+0xd0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7332:	movs	r3, #34	; 0x22
    7334:	strb	r3, [r4, #16]
    7336:	b.n	72cc <SdSpiCard::readSector(unsigned long, unsigned char*)+0x64>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7338:	ldr	r0, [r4, #12]
    733a:	bl	9420 <SdSpiAltDriver::receive()>
    733e:	ldr	r0, [r4, #12]
    7340:	bl	9420 <SdSpiAltDriver::receive()>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    7344:	ldr	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    7346:	ldrb	r2, [r4, #9]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    7348:	adds	r3, #1
    734a:	str	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    734c:	cbnz	r2, 736c <SdSpiCard::readSector(unsigned long, unsigned char*)+0x104>
    734e:	movs	r0, #1
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  //  ENABLE_DEDICATED_SPI
  }
    7350:	add	sp, #8
    7352:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    7356:	movs	r3, #1
    7358:	blx	r5
    735a:	b.n	7290 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x28>
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    735c:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    735e:	str.w	r8, [r4, #4]
    m_curState = READ_STATE;
    7362:	strb	r3, [r4, #8]
    7364:	b.n	729c <SdSpiCard::readSector(unsigned long, unsigned char*)+0x34>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    7366:	mov	r0, r4
    7368:	blx	r3
    736a:	b.n	72fc <SdSpiCard::readSector(unsigned long, unsigned char*)+0x94>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    736c:	ldr	r3, [r4, #0]
    736e:	mov	r0, r4
    7370:	ldr	r3, [r3, #20]
    7372:	blx	r3
    7374:	b.n	7290 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x28>
    7376:	nop
    7378:	.word	0x000074ed
    737c:	.word	0x200203c0
    7380:	.word	0x00006e2d

00007384 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    7384:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    7388:	ldr	r3, [r0, #0]
    738a:	ldr	r6, [pc, #332]	; (74d8 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x154>)
    738c:	ldr	r5, [r3, #28]
    738e:	cmp	r5, r6
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    7390:	sub	sp, #8
    7392:	bne.w	74ac <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x128>
    7396:	mov	r8, r2
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7398:	ldrb	r2, [r0, #8]
    739a:	cmp	r2, #2
    739c:	mov	r4, r0
    739e:	mov	r7, r1
    73a0:	beq.n	73b4 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    if (!syncDevice()) {
    73a2:	ldr	r3, [r3, #20]
    73a4:	mov	r0, r4
    73a6:	blx	r3
    73a8:	cmp	r0, #0
    73aa:	bne.n	7446 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xc2>
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    73ac:	movs	r0, #0
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    73ae:	add	sp, #8
    73b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    73b4:	ldr	r2, [r0, #4]
    73b6:	cmp	r1, r2
    73b8:	bne.n	73a2 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x1e>
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
    73ba:	ldr	r3, [r3, #68]	; 0x44
    73bc:	ldr	r2, [pc, #284]	; (74dc <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x158>)
    73be:	cmp	r3, r2
    73c0:	bne.n	7478 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xf4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    73c2:	ldr	r7, [pc, #284]	; (74e0 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x15c>)
    73c4:	ldr	r3, [r7, #0]
    73c6:	str	r3, [sp, #4]
	return ret;
    73c8:	ldr	r6, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    73ca:	uxth	r6, r6
    73cc:	b.n	73de <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    73ce:	ldr	r3, [r7, #0]
    73d0:	str	r3, [sp, #0]
	return ret;
    73d2:	ldr	r3, [sp, #0]
    73d4:	uxth	r3, r3
    73d6:	subs	r3, r3, r6
    73d8:	cmp.w	r3, #600	; 0x258
    73dc:	bgt.n	7494 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x110>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    73de:	ldr	r0, [r4, #12]
    73e0:	bl	9420 <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    73e4:	cmp	r0, #255	; 0xff
    73e6:	mov	r5, r0
    73e8:	bne.n	73ce <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x4a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    73ea:	movs	r1, #252	; 0xfc
    73ec:	ldr	r0, [r4, #12]
    73ee:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
    73f2:	mov.w	r2, #512	; 0x200
    73f6:	mov	r1, r8
    73f8:	ldr	r0, [r4, #12]
    73fa:	bl	9474 <SdSpiAltDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    73fe:	mov	r1, r5
    7400:	ldr	r0, [r4, #12]
    7402:	bl	945c <SdSpiAltDriver::send(unsigned char)>
    7406:	mov	r1, r5
    7408:	ldr	r0, [r4, #12]
    740a:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    740e:	ldr	r0, [r4, #12]
    7410:	bl	9420 <SdSpiAltDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7414:	and.w	r3, r0, #31
    7418:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    741a:	strb	r0, [r4, #18]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    741c:	beq.n	7482 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xfe>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    741e:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7420:	movs	r2, #30
    7422:	strb	r2, [r4, #16]
    7424:	cmp	r3, #0
    7426:	beq.n	73ac <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
    7428:	ldr	r3, [r4, #12]
    742a:	movs	r1, #1
    742c:	ldrb	r0, [r3, #8]
    742e:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7432:	mov	r1, r5
    7434:	ldr	r0, [r4, #12]
    7436:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    743a:	ldr	r0, [r4, #12]
    743c:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7440:	movs	r3, #0
    7442:	strb	r3, [r4, #17]
    7444:	b.n	73ac <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    7446:	ldr	r3, [r4, #0]
    7448:	ldr	r1, [pc, #152]	; (74e4 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x160>)
    744a:	ldr	r2, [r3, #72]	; 0x48
    744c:	cmp	r2, r1
    744e:	bne.n	74b2 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x12e>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7450:	ldr	r3, [r3, #64]	; 0x40
    7452:	ldr	r2, [pc, #148]	; (74e8 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x164>)
    7454:	cmp	r3, r2
    7456:	bne.n	74d2 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x14e>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    7458:	ldrb	r0, [r4, #19]
    745a:	cmp	r0, #3
    sector <<= 9;
    745c:	ite	ne
    745e:	lslne	r2, r7, #9
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7460:	moveq	r2, r7
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    7462:	movs	r1, #25
    7464:	mov	r0, r4
    7466:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    746a:	cbz	r0, 74be <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x13a>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    746c:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    746e:	movs	r2, #14
    7470:	strb	r2, [r4, #16]
    7472:	cmp	r3, #0
    7474:	beq.n	73ac <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
    7476:	b.n	749e <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x11a>
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
    7478:	mov	r1, r8
    747a:	mov	r0, r4
    747c:	blx	r3
    747e:	cmp	r0, #0
    7480:	beq.n	73ac <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
      return false;
    }
  }
  m_curSector += ns;
    7482:	ldr	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    7484:	ldrb	r2, [r4, #9]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    7486:	adds	r3, #1
    7488:	str	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    748a:	cbnz	r2, 74c8 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x144>
    748c:	movs	r0, #1
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    748e:	add	sp, #8
    7490:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7494:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7496:	movs	r2, #33	; 0x21
    7498:	strb	r2, [r4, #16]
    749a:	cmp	r3, #0
    749c:	beq.n	73ac <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
    749e:	ldr	r3, [r4, #12]
    74a0:	movs	r1, #1
    74a2:	ldrb	r0, [r3, #8]
    74a4:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    74a8:	movs	r1, #255	; 0xff
    74aa:	b.n	7434 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xb0>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    74ac:	movs	r3, #1
    74ae:	blx	r5
    74b0:	b.n	73ae <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x2a>
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    74b2:	mov	r1, r7
    74b4:	mov	r0, r4
    74b6:	blx	r2
    74b8:	cmp	r0, #0
    74ba:	beq.w	73ac <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    74be:	movs	r3, #2
    74c0:	strb	r3, [r4, #8]
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    74c2:	str	r7, [r4, #4]
    74c4:	ldr	r3, [r4, #0]
    74c6:	b.n	73ba <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x36>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    74c8:	ldr	r3, [r4, #0]
    74ca:	mov	r0, r4
    74cc:	ldr	r3, [r3, #20]
    74ce:	blx	r3
    74d0:	b.n	73ae <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x2a>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    74d2:	mov	r0, r4
    74d4:	blx	r3
    74d6:	b.n	745a <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xd6>
    74d8:	.word	0x00007609
    74dc:	.word	0x00006f35
    74e0:	.word	0x200203c0
    74e4:	.word	0x00007125
    74e8:	.word	0x00006e2d

000074ec <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    74ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    74f0:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    74f2:	ldrb	r1, [r0, #8]
    74f4:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    74f6:	sub	sp, #12
    74f8:	mov	r4, r0
    74fa:	mov	r8, r2
    74fc:	mov	r9, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    74fe:	beq.n	7514 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!syncDevice()) {
    7500:	ldr	r3, [r4, #0]
    7502:	mov	r0, r4
    7504:	ldr	r3, [r3, #20]
    7506:	blx	r3
    7508:	cmp	r0, #0
    750a:	bne.n	757c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x90>
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    750c:	movs	r0, #0
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    750e:	add	sp, #12
    7510:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7514:	ldr	r3, [r0, #4]
    7516:	cmp	r3, r5
    7518:	bne.n	7500 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x14>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    751a:	cmp.w	r9, #0
    751e:	beq.n	75fc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x110>
    7520:	ldr	r6, [pc, #220]	; (7600 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x114>)
    7522:	movs	r7, #0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7524:	ldr	r3, [r6, #0]
    7526:	str	r3, [sp, #4]
	return ret;
    7528:	ldr	r5, [sp, #4]
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    752a:	uxth	r5, r5
    752c:	b.n	753e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x52>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    752e:	ldr	r3, [r6, #0]
    7530:	str	r3, [sp, #0]
	return ret;
    7532:	ldr	r3, [sp, #0]
    7534:	uxth	r3, r3
    7536:	subs	r3, r3, r5
    7538:	cmp.w	r3, #300	; 0x12c
    753c:	bgt.n	7576 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x8a>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    753e:	ldr	r0, [r4, #12]
    7540:	bl	9420 <SdSpiAltDriver::receive()>
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    7544:	cmp	r0, #255	; 0xff
    7546:	strb	r0, [r4, #18]
    7548:	beq.n	752e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_SECTOR) {
    754a:	cmp	r0, #254	; 0xfe
    754c:	beq.n	75a6 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xba>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    754e:	movs	r3, #23
    7550:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7552:	ldrb	r3, [r4, #17]
    7554:	cmp	r3, #0
    7556:	beq.n	750c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
    7558:	ldr	r3, [r4, #12]
    755a:	movs	r1, #1
    755c:	ldrb	r0, [r3, #8]
    755e:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7562:	movs	r1, #255	; 0xff
    7564:	ldr	r0, [r4, #12]
    7566:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    756a:	ldr	r0, [r4, #12]
    756c:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7570:	movs	r3, #0
    7572:	strb	r3, [r4, #17]
    7574:	b.n	750c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7576:	movs	r3, #28
    7578:	strb	r3, [r4, #16]
    757a:	b.n	7552 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x66>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    757c:	ldr	r3, [r4, #0]
    757e:	ldr	r2, [pc, #132]	; (7604 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x118>)
    7580:	ldr	r3, [r3, #64]	; 0x40
    7582:	cmp	r3, r2
    7584:	bne.n	75ec <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x100>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    7586:	ldrb	r0, [r4, #19]
    7588:	cmp	r0, #3
    sector <<= 9;
    758a:	ite	ne
    758c:	lslne	r2, r5, #9
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    758e:	moveq	r2, r5
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    7590:	movs	r1, #18
    7592:	mov	r0, r4
    7594:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7598:	cbz	r0, 75e4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xf8>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    759a:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    759c:	movs	r2, #12
    759e:	strb	r2, [r4, #16]
    75a0:	cmp	r3, #0
    75a2:	beq.n	750c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
    75a4:	b.n	7558 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6c>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
    75a6:	mov.w	r2, #512	; 0x200
    75aa:	mov	r1, r8
    75ac:	ldr	r0, [r4, #12]
    75ae:	bl	943c <SdSpiAltDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    75b2:	strb	r0, [r4, #18]
    75b4:	cbz	r0, 75bc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xd0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    75b6:	movs	r3, #34	; 0x22
    75b8:	strb	r3, [r4, #16]
    75ba:	b.n	7552 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x66>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    75bc:	ldr	r0, [r4, #12]
    75be:	bl	9420 <SdSpiAltDriver::receive()>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    75c2:	adds	r7, #1
    75c4:	ldr	r0, [r4, #12]
    75c6:	bl	9420 <SdSpiAltDriver::receive()>
    75ca:	cmp	r9, r7
    75cc:	add.w	r8, r8, #512	; 0x200
    75d0:	bne.n	7524 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    75d2:	ldr	r3, [r4, #4]
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    75d4:	ldrb	r2, [r4, #9]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    75d6:	add	r3, r9
    75d8:	str	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    75da:	cbnz	r2, 75f2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x106>
    75dc:	movs	r0, #1
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    75de:	add	sp, #12
    75e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    75e4:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    75e6:	str	r5, [r4, #4]
    m_curState = READ_STATE;
    75e8:	strb	r3, [r4, #8]
    75ea:	b.n	751a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    75ec:	mov	r0, r4
    75ee:	blx	r3
    75f0:	b.n	7588 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x9c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    75f2:	ldr	r3, [r4, #0]
    75f4:	mov	r0, r4
    75f6:	ldr	r3, [r3, #20]
    75f8:	blx	r3
    75fa:	b.n	750e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    75fc:	mov	r3, r5
    75fe:	b.n	75d4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xe8>
    7600:	.word	0x200203c0
    7604:	.word	0x00006e2d

00007608 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    7608:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    760c:	mov	r5, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    760e:	ldrb	r1, [r0, #8]
    7610:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    7612:	sub	sp, #12
    7614:	mov	r4, r0
    7616:	mov	r8, r2
    7618:	mov	r9, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    761a:	beq.n	7630 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!syncDevice()) {
    761c:	ldr	r3, [r4, #0]
    761e:	mov	r0, r4
    7620:	ldr	r3, [r3, #20]
    7622:	blx	r3
    7624:	cmp	r0, #0
    7626:	bne.n	7710 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x108>
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    7628:	movs	r0, #0

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    762a:	add	sp, #12
    762c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7630:	ldr	r3, [r0, #4]
    7632:	cmp	r3, r5
    7634:	bne.n	761c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7636:	cmp.w	r9, #0
    763a:	beq.w	7768 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x160>
    763e:	ldr.w	sl, [pc, #312]	; 7778 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x170>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7642:	ldr	r6, [pc, #296]	; (776c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x164>)
    7644:	movs	r7, #0
    if (!writeData(src)) {
    7646:	ldr	r3, [r4, #0]
    7648:	ldr	r3, [r3, #68]	; 0x44
    764a:	cmp	r3, sl
    764c:	bne.n	76d0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc8>
    764e:	ldr	r3, [r6, #0]
    7650:	str	r3, [sp, #4]
	return ret;
    7652:	ldr	r5, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7654:	uxth	r5, r5
    7656:	b.n	7668 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x60>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7658:	ldr	r3, [r6, #0]
    765a:	str	r3, [sp, #0]
	return ret;
    765c:	ldr	r3, [sp, #0]
    765e:	uxth	r3, r3
    7660:	subs	r3, r3, r5
    7662:	cmp.w	r3, #600	; 0x258
    7666:	bgt.n	76f8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xf0>
    7668:	ldr	r0, [r4, #12]
    766a:	bl	9420 <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    766e:	cmp	r0, #255	; 0xff
    7670:	mov	fp, r0
    7672:	bne.n	7658 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7674:	movs	r1, #252	; 0xfc
    7676:	ldr	r0, [r4, #12]
    7678:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
    767c:	mov.w	r2, #512	; 0x200
    7680:	mov	r1, r8
    7682:	ldr	r0, [r4, #12]
    7684:	bl	9474 <SdSpiAltDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7688:	mov	r1, fp
    768a:	ldr	r0, [r4, #12]
    768c:	bl	945c <SdSpiAltDriver::send(unsigned char)>
    7690:	mov	r1, fp
    7692:	ldr	r0, [r4, #12]
    7694:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7698:	ldr	r0, [r4, #12]
    769a:	bl	9420 <SdSpiAltDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    769e:	and.w	r3, r0, #31
    76a2:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    76a4:	strb	r0, [r4, #18]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    76a6:	beq.n	76da <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd2>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    76a8:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    76aa:	movs	r2, #30
    76ac:	strb	r2, [r4, #16]
    76ae:	cmp	r3, #0
    76b0:	beq.n	7628 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
    76b2:	ldr	r3, [r4, #12]
    76b4:	movs	r1, #1
    76b6:	ldrb	r0, [r3, #8]
    76b8:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    76bc:	mov	r1, fp
    76be:	ldr	r0, [r4, #12]
    76c0:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    76c4:	ldr	r0, [r4, #12]
    76c6:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    76ca:	movs	r3, #0
    76cc:	strb	r3, [r4, #17]
    76ce:	b.n	7628 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
    76d0:	mov	r1, r8
    76d2:	mov	r0, r4
    76d4:	blx	r3
    76d6:	cmp	r0, #0
    76d8:	beq.n	7628 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    76da:	adds	r7, #1
    76dc:	cmp	r9, r7
    76de:	add.w	r8, r8, #512	; 0x200
    76e2:	bne.n	7646 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    76e4:	ldr	r3, [r4, #4]
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    76e6:	ldrb	r2, [r4, #9]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    76e8:	add	r3, r9
    76ea:	str	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    76ec:	cmp	r2, #0
    76ee:	bne.n	7758 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x150>
    76f0:	movs	r0, #1

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    76f2:	add	sp, #12
    76f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    76f8:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    76fa:	movs	r2, #33	; 0x21
    76fc:	strb	r2, [r4, #16]
    76fe:	cmp	r3, #0
    7700:	beq.n	7628 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
    7702:	ldr	r3, [r4, #12]
    7704:	movs	r1, #1
    7706:	ldrb	r0, [r3, #8]
    7708:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    770c:	movs	r1, #255	; 0xff
    770e:	b.n	76be <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xb6>
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    7710:	ldr	r3, [r4, #0]
    7712:	ldr	r1, [pc, #92]	; (7770 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x168>)
    7714:	ldr	r2, [r3, #72]	; 0x48
    7716:	cmp	r2, r1
    7718:	bne.n	7744 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x13c>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    771a:	ldr	r3, [r3, #64]	; 0x40
    771c:	ldr	r2, [pc, #84]	; (7774 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16c>)
    771e:	cmp	r3, r2
    7720:	bne.n	7762 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x15a>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    7722:	ldrb	r0, [r4, #19]
    7724:	cmp	r0, #3
    sector <<= 9;
    7726:	ite	ne
    7728:	lslne	r2, r5, #9
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    772a:	moveq	r2, r5
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    772c:	movs	r1, #25
    772e:	mov	r0, r4
    7730:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7734:	cbz	r0, 7750 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x148>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7736:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7738:	movs	r2, #14
    773a:	strb	r2, [r4, #16]
    773c:	cmp	r3, #0
    773e:	beq.w	7628 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
    7742:	b.n	7702 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xfa>
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    7744:	mov	r1, r5
    7746:	mov	r0, r4
    7748:	blx	r2
    774a:	cmp	r0, #0
    774c:	beq.w	7628 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    7750:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    7752:	str	r5, [r4, #4]
    m_curState = WRITE_STATE;
    7754:	strb	r3, [r4, #8]
    7756:	b.n	7636 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7758:	ldr	r3, [r4, #0]
    775a:	mov	r0, r4
    775c:	ldr	r3, [r3, #20]
    775e:	blx	r3
    7760:	b.n	762a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7762:	mov	r0, r4
    7764:	blx	r3
    7766:	b.n	7724 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x11c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7768:	mov	r3, r5
    776a:	b.n	76e6 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xde>
    776c:	.word	0x200203c0
    7770:	.word	0x00007125
    7774:	.word	0x00006e2d
    7778:	.word	0x00006f35

0000777c <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    777c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7780:	ldr	r5, [pc, #160]	; (7824 <SdSpiCard::readData(unsigned char*, unsigned int)+0xa8>)
    7782:	sub	sp, #8
    7784:	ldr	r3, [r5, #0]
    7786:	str	r3, [sp, #0]
	return ret;
    7788:	ldr	r4, [sp, #0]
    778a:	mov	r8, r0
    778c:	mov	r6, r1
    778e:	mov	r7, r2
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    7790:	uxth	r4, r4
    7792:	b.n	77a4 <SdSpiCard::readData(unsigned char*, unsigned int)+0x28>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7794:	ldr	r3, [r5, #0]
    7796:	str	r3, [sp, #4]
	return ret;
    7798:	ldr	r3, [sp, #4]
    779a:	uxth	r3, r3
    779c:	subs	r3, r3, r4
    779e:	cmp.w	r3, #300	; 0x12c
    77a2:	bgt.n	77ee <SdSpiCard::readData(unsigned char*, unsigned int)+0x72>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    77a4:	ldr.w	r0, [r8, #12]
    77a8:	bl	9420 <SdSpiAltDriver::receive()>
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    77ac:	cmp	r0, #255	; 0xff
    77ae:	strb.w	r0, [r8, #18]
    77b2:	beq.n	7794 <SdSpiCard::readData(unsigned char*, unsigned int)+0x18>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_SECTOR) {
    77b4:	cmp	r0, #254	; 0xfe
    77b6:	beq.n	77f6 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    77b8:	movs	r3, #23
    77ba:	strb.w	r3, [r8, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    77be:	ldrb.w	r0, [r8, #17]
    77c2:	cbz	r0, 77e8 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6c>
    77c4:	ldr.w	r3, [r8, #12]
    77c8:	movs	r1, #1
    77ca:	ldrb	r0, [r3, #8]
    77cc:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    77d0:	movs	r1, #255	; 0xff
    77d2:	ldr.w	r0, [r8, #12]
    77d6:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    77da:	ldr.w	r0, [r8, #12]
    77de:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    77e2:	movs	r0, #0
    77e4:	strb.w	r0, [r8, #17]
  return true;

fail:
  spiStop();
  return false;
}
    77e8:	add	sp, #8
    77ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    77ee:	movs	r3, #28
    77f0:	strb.w	r3, [r8, #16]
    77f4:	b.n	77be <SdSpiCard::readData(unsigned char*, unsigned int)+0x42>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
    77f6:	mov	r2, r7
    77f8:	mov	r1, r6
    77fa:	ldr.w	r0, [r8, #12]
    77fe:	bl	943c <SdSpiAltDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    7802:	strb.w	r0, [r8, #18]
    7806:	cbz	r0, 7810 <SdSpiCard::readData(unsigned char*, unsigned int)+0x94>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7808:	movs	r3, #34	; 0x22
    780a:	strb.w	r3, [r8, #16]
    780e:	b.n	77be <SdSpiCard::readData(unsigned char*, unsigned int)+0x42>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7810:	ldr.w	r0, [r8, #12]
    7814:	bl	9420 <SdSpiAltDriver::receive()>
    7818:	ldr.w	r0, [r8, #12]
    781c:	bl	9420 <SdSpiAltDriver::receive()>
#else
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    7820:	movs	r0, #1
    7822:	b.n	77e8 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6c>
    7824:	.word	0x200203c0

00007828 <SdSpiCard::readCID(CID*)>:
   *
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    7828:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    782c:	ldr	r3, [r0, #0]
    782e:	ldr	r2, [pc, #332]	; (797c <SdSpiCard::readCID(CID*)+0x154>)
    7830:	ldr	r3, [r3, #20]
    7832:	cmp	r3, r2
    7834:	sub	sp, #8
    7836:	mov	r4, r0
    7838:	mov	r6, r1
    783a:	bne.n	78b4 <SdSpiCard::readCID(CID*)+0x8c>
#endif  // ENABLE_DEDICATED_SPI
}
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    783c:	ldrb	r5, [r0, #8]
    783e:	cmp	r5, #1
    7840:	beq.n	78b8 <SdSpiCard::readCID(CID*)+0x90>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    7842:	cmp	r5, #2
    7844:	beq.n	78d6 <SdSpiCard::readCID(CID*)+0xae>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    7846:	movs	r3, #0
    7848:	strb	r3, [r4, #8]
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
  if (cardCommand(cmd, 0)) {
    784a:	movs	r2, #0
    784c:	movs	r1, #10
    784e:	mov	r0, r4
    7850:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7854:	mov	r5, r0
    7856:	cbz	r0, 7882 <SdSpiCard::readCID(CID*)+0x5a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7858:	movs	r3, #26
    785a:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    785c:	ldrb	r0, [r4, #17]
    785e:	cbz	r0, 787c <SdSpiCard::readCID(CID*)+0x54>
    7860:	ldr	r3, [r4, #12]
    7862:	movs	r1, #1
    7864:	ldrb	r0, [r3, #8]
    7866:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    786a:	movs	r1, #255	; 0xff
    786c:	ldr	r0, [r4, #12]
    786e:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7872:	ldr	r0, [r4, #12]
    7874:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7878:	movs	r0, #0
    787a:	strb	r0, [r4, #17]
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
  }
    787c:	add	sp, #8
    787e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    7882:	mov	r1, r6
    7884:	movs	r2, #16
    7886:	mov	r0, r4
    7888:	bl	777c <SdSpiCard::readData(unsigned char*, unsigned int)>
    788c:	cmp	r0, #0
    788e:	beq.n	785c <SdSpiCard::readCID(CID*)+0x34>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7890:	ldrb	r6, [r4, #17]
    7892:	cmp	r6, #0
    7894:	beq.n	787c <SdSpiCard::readCID(CID*)+0x54>
    7896:	ldr	r3, [r4, #12]
    7898:	movs	r1, #1
    789a:	ldrb	r0, [r3, #8]
    789c:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    78a0:	movs	r1, #255	; 0xff
    78a2:	ldr	r0, [r4, #12]
    78a4:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    78a8:	ldr	r0, [r4, #12]
    78aa:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    78ae:	strb	r5, [r4, #17]
    78b0:	mov	r0, r6
    78b2:	b.n	787c <SdSpiCard::readCID(CID*)+0x54>
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    78b4:	blx	r3
    78b6:	b.n	784a <SdSpiCard::readCID(CID*)+0x22>
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    78b8:	movs	r2, #0
    78ba:	movs	r1, #12
    78bc:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    78c0:	ldrb	r3, [r4, #17]
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    78c2:	mov	r7, r0
    78c4:	cmp	r0, #0
    78c6:	beq.n	7958 <SdSpiCard::readCID(CID*)+0x130>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    78c8:	movs	r2, #9
    78ca:	strb	r2, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    78cc:	cmp	r3, #0
    78ce:	beq.n	784a <SdSpiCard::readCID(CID*)+0x22>
    78d0:	ldr	r3, [r4, #12]
    78d2:	mov	r1, r5
    78d4:	b.n	793e <SdSpiCard::readCID(CID*)+0x116>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    78d6:	ldr.w	r8, [pc, #168]	; 7980 <SdSpiCard::readCID(CID*)+0x158>
    78da:	ldr.w	r3, [r8]
    78de:	str	r3, [sp, #4]
	return ret;
    78e0:	ldr	r7, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    78e2:	uxth	r7, r7
    78e4:	b.n	78f8 <SdSpiCard::readCID(CID*)+0xd0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    78e6:	ldr.w	r3, [r8]
    78ea:	str	r3, [sp, #0]
	return ret;
    78ec:	ldr	r3, [sp, #0]
    78ee:	uxth	r3, r3
    78f0:	subs	r3, r3, r7
    78f2:	cmp.w	r3, #600	; 0x258
    78f6:	bgt.n	7930 <SdSpiCard::readCID(CID*)+0x108>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    78f8:	ldr	r0, [r4, #12]
    78fa:	bl	9420 <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    78fe:	cmp	r0, #255	; 0xff
    7900:	mov	r5, r0
    7902:	bne.n	78e6 <SdSpiCard::readCID(CID*)+0xbe>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7904:	movs	r1, #253	; 0xfd
    7906:	ldr	r0, [r4, #12]
    7908:	bl	945c <SdSpiAltDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    790c:	ldrb	r3, [r4, #17]
    790e:	cmp	r3, #0
    7910:	beq.n	7846 <SdSpiCard::readCID(CID*)+0x1e>
    7912:	ldr	r3, [r4, #12]
    7914:	movs	r1, #1
    7916:	ldrb	r0, [r3, #8]
    7918:	bl	9ca4 <digitalWrite>
    791c:	mov	r1, r5
    791e:	ldr	r0, [r4, #12]
    7920:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7924:	ldr	r0, [r4, #12]
    7926:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    792a:	movs	r3, #0
    792c:	strb	r3, [r4, #17]
    792e:	b.n	7846 <SdSpiCard::readCID(CID*)+0x1e>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7930:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7932:	movs	r2, #29
    7934:	strb	r2, [r4, #16]
    7936:	cmp	r3, #0
    7938:	beq.n	784a <SdSpiCard::readCID(CID*)+0x22>
    793a:	ldr	r3, [r4, #12]
    793c:	movs	r1, #1
    793e:	ldrb	r0, [r3, #8]
    7940:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7944:	movs	r1, #255	; 0xff
    7946:	ldr	r0, [r4, #12]
    7948:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    794c:	ldr	r0, [r4, #12]
    794e:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7952:	movs	r3, #0
    7954:	strb	r3, [r4, #17]
    7956:	b.n	784a <SdSpiCard::readCID(CID*)+0x22>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7958:	cmp	r3, #0
    795a:	beq.w	7846 <SdSpiCard::readCID(CID*)+0x1e>
    795e:	ldr	r3, [r4, #12]
    7960:	mov	r1, r5
    7962:	ldrb	r0, [r3, #8]
    7964:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7968:	movs	r1, #255	; 0xff
    796a:	ldr	r0, [r4, #12]
    796c:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7970:	ldr	r0, [r4, #12]
    7972:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7976:	strb	r7, [r4, #17]
    7978:	b.n	7846 <SdSpiCard::readCID(CID*)+0x1e>
    797a:	nop
    797c:	.word	0x00007189
    7980:	.word	0x200203c0

00007984 <SdSpiCard::readCSD(csd_t*)>:
   *
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    7984:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7988:	ldr	r3, [r0, #0]
    798a:	ldr	r2, [pc, #332]	; (7ad8 <SdSpiCard::readCSD(csd_t*)+0x154>)
    798c:	ldr	r3, [r3, #20]
    798e:	cmp	r3, r2
    7990:	sub	sp, #8
    7992:	mov	r4, r0
    7994:	mov	r6, r1
    7996:	bne.n	7a10 <SdSpiCard::readCSD(csd_t*)+0x8c>
#endif  // ENABLE_DEDICATED_SPI
}
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    7998:	ldrb	r5, [r0, #8]
    799a:	cmp	r5, #1
    799c:	beq.n	7a14 <SdSpiCard::readCSD(csd_t*)+0x90>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    799e:	cmp	r5, #2
    79a0:	beq.n	7a32 <SdSpiCard::readCSD(csd_t*)+0xae>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    79a2:	movs	r3, #0
    79a4:	strb	r3, [r4, #8]
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
  if (cardCommand(cmd, 0)) {
    79a6:	movs	r2, #0
    79a8:	movs	r1, #9
    79aa:	mov	r0, r4
    79ac:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    79b0:	mov	r5, r0
    79b2:	cbz	r0, 79de <SdSpiCard::readCSD(csd_t*)+0x5a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    79b4:	movs	r3, #26
    79b6:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    79b8:	ldrb	r0, [r4, #17]
    79ba:	cbz	r0, 79d8 <SdSpiCard::readCSD(csd_t*)+0x54>
    79bc:	ldr	r3, [r4, #12]
    79be:	movs	r1, #1
    79c0:	ldrb	r0, [r3, #8]
    79c2:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    79c6:	movs	r1, #255	; 0xff
    79c8:	ldr	r0, [r4, #12]
    79ca:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    79ce:	ldr	r0, [r4, #12]
    79d0:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    79d4:	movs	r0, #0
    79d6:	strb	r0, [r4, #17]
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
  }
    79d8:	add	sp, #8
    79da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    79de:	mov	r1, r6
    79e0:	movs	r2, #16
    79e2:	mov	r0, r4
    79e4:	bl	777c <SdSpiCard::readData(unsigned char*, unsigned int)>
    79e8:	cmp	r0, #0
    79ea:	beq.n	79b8 <SdSpiCard::readCSD(csd_t*)+0x34>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    79ec:	ldrb	r6, [r4, #17]
    79ee:	cmp	r6, #0
    79f0:	beq.n	79d8 <SdSpiCard::readCSD(csd_t*)+0x54>
    79f2:	ldr	r3, [r4, #12]
    79f4:	movs	r1, #1
    79f6:	ldrb	r0, [r3, #8]
    79f8:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    79fc:	movs	r1, #255	; 0xff
    79fe:	ldr	r0, [r4, #12]
    7a00:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7a04:	ldr	r0, [r4, #12]
    7a06:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7a0a:	strb	r5, [r4, #17]
    7a0c:	mov	r0, r6
    7a0e:	b.n	79d8 <SdSpiCard::readCSD(csd_t*)+0x54>
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7a10:	blx	r3
    7a12:	b.n	79a6 <SdSpiCard::readCSD(csd_t*)+0x22>
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7a14:	movs	r2, #0
    7a16:	movs	r1, #12
    7a18:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7a1c:	ldrb	r3, [r4, #17]
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7a1e:	mov	r7, r0
    7a20:	cmp	r0, #0
    7a22:	beq.n	7ab4 <SdSpiCard::readCSD(csd_t*)+0x130>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7a24:	movs	r2, #9
    7a26:	strb	r2, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7a28:	cmp	r3, #0
    7a2a:	beq.n	79a6 <SdSpiCard::readCSD(csd_t*)+0x22>
    7a2c:	ldr	r3, [r4, #12]
    7a2e:	mov	r1, r5
    7a30:	b.n	7a9a <SdSpiCard::readCSD(csd_t*)+0x116>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7a32:	ldr.w	r8, [pc, #168]	; 7adc <SdSpiCard::readCSD(csd_t*)+0x158>
    7a36:	ldr.w	r3, [r8]
    7a3a:	str	r3, [sp, #4]
	return ret;
    7a3c:	ldr	r7, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7a3e:	uxth	r7, r7
    7a40:	b.n	7a54 <SdSpiCard::readCSD(csd_t*)+0xd0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7a42:	ldr.w	r3, [r8]
    7a46:	str	r3, [sp, #0]
	return ret;
    7a48:	ldr	r3, [sp, #0]
    7a4a:	uxth	r3, r3
    7a4c:	subs	r3, r3, r7
    7a4e:	cmp.w	r3, #600	; 0x258
    7a52:	bgt.n	7a8c <SdSpiCard::readCSD(csd_t*)+0x108>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7a54:	ldr	r0, [r4, #12]
    7a56:	bl	9420 <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7a5a:	cmp	r0, #255	; 0xff
    7a5c:	mov	r5, r0
    7a5e:	bne.n	7a42 <SdSpiCard::readCSD(csd_t*)+0xbe>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7a60:	movs	r1, #253	; 0xfd
    7a62:	ldr	r0, [r4, #12]
    7a64:	bl	945c <SdSpiAltDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7a68:	ldrb	r3, [r4, #17]
    7a6a:	cmp	r3, #0
    7a6c:	beq.n	79a2 <SdSpiCard::readCSD(csd_t*)+0x1e>
    7a6e:	ldr	r3, [r4, #12]
    7a70:	movs	r1, #1
    7a72:	ldrb	r0, [r3, #8]
    7a74:	bl	9ca4 <digitalWrite>
    7a78:	mov	r1, r5
    7a7a:	ldr	r0, [r4, #12]
    7a7c:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7a80:	ldr	r0, [r4, #12]
    7a82:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7a86:	movs	r3, #0
    7a88:	strb	r3, [r4, #17]
    7a8a:	b.n	79a2 <SdSpiCard::readCSD(csd_t*)+0x1e>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7a8c:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7a8e:	movs	r2, #29
    7a90:	strb	r2, [r4, #16]
    7a92:	cmp	r3, #0
    7a94:	beq.n	79a6 <SdSpiCard::readCSD(csd_t*)+0x22>
    7a96:	ldr	r3, [r4, #12]
    7a98:	movs	r1, #1
    7a9a:	ldrb	r0, [r3, #8]
    7a9c:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7aa0:	movs	r1, #255	; 0xff
    7aa2:	ldr	r0, [r4, #12]
    7aa4:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7aa8:	ldr	r0, [r4, #12]
    7aaa:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7aae:	movs	r3, #0
    7ab0:	strb	r3, [r4, #17]
    7ab2:	b.n	79a6 <SdSpiCard::readCSD(csd_t*)+0x22>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7ab4:	cmp	r3, #0
    7ab6:	beq.w	79a2 <SdSpiCard::readCSD(csd_t*)+0x1e>
    7aba:	ldr	r3, [r4, #12]
    7abc:	mov	r1, r5
    7abe:	ldrb	r0, [r3, #8]
    7ac0:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7ac4:	movs	r1, #255	; 0xff
    7ac6:	ldr	r0, [r4, #12]
    7ac8:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7acc:	ldr	r0, [r4, #12]
    7ace:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7ad2:	strb	r7, [r4, #17]
    7ad4:	b.n	79a2 <SdSpiCard::readCSD(csd_t*)+0x1e>
    7ad6:	nop
    7ad8:	.word	0x00007189
    7adc:	.word	0x200203c0

00007ae0 <SdSpiCard::sectorCount()>:
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
  }
  return m_status;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    7ae0:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7ae2:	ldr	r3, [r0, #0]
    7ae4:	ldr	r1, [pc, #456]	; (7cb0 <SdSpiCard::sectorCount()+0x1d0>)
    7ae6:	ldr	r2, [r3, #52]	; 0x34
    7ae8:	cmp	r2, r1
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
  }
  return m_status;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    7aea:	sub	sp, #28
    7aec:	bne.n	7b72 <SdSpiCard::sectorCount()+0x92>
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7aee:	ldr	r3, [r3, #20]
    7af0:	ldr	r2, [pc, #448]	; (7cb4 <SdSpiCard::sectorCount()+0x1d4>)
    7af2:	cmp	r3, r2
    7af4:	mov	r4, r0
    7af6:	bne.w	7c40 <SdSpiCard::sectorCount()+0x160>
#endif  // ENABLE_DEDICATED_SPI
}
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    7afa:	ldrb	r5, [r0, #8]
    7afc:	cmp	r5, #1
    7afe:	beq.w	7c44 <SdSpiCard::sectorCount()+0x164>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    7b02:	cmp	r5, #2
    7b04:	beq.n	7bea <SdSpiCard::sectorCount()+0x10a>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    7b06:	movs	r3, #0
    7b08:	strb	r3, [r4, #8]
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
  if (cardCommand(cmd, 0)) {
    7b0a:	movs	r2, #0
    7b0c:	movs	r1, #9
    7b0e:	mov	r0, r4
    7b10:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7b14:	mov	r5, r0
    7b16:	cbz	r0, 7b44 <SdSpiCard::sectorCount()+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7b18:	movs	r3, #26
    7b1a:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7b1c:	ldrb	r3, [r4, #17]
    7b1e:	cbnz	r3, 7b26 <SdSpiCard::sectorCount()+0x46>
  return m_status;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7b20:	movs	r0, #0
}
    7b22:	add	sp, #28
    7b24:	pop	{r4, r5, r6, r7, pc}
    7b26:	ldr	r3, [r4, #12]
    7b28:	movs	r1, #1
    7b2a:	ldrb	r0, [r3, #8]
    7b2c:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7b30:	movs	r1, #255	; 0xff
    7b32:	ldr	r0, [r4, #12]
    7b34:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7b38:	ldr	r0, [r4, #12]
    7b3a:	bl	93d8 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7b3e:	movs	r3, #0
    7b40:	strb	r3, [r4, #17]
    7b42:	b.n	7b20 <SdSpiCard::sectorCount()+0x40>
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    7b44:	movs	r2, #16
    7b46:	add	r1, sp, #8
    7b48:	mov	r0, r4
    7b4a:	bl	777c <SdSpiCard::readData(unsigned char*, unsigned int)>
    7b4e:	cmp	r0, #0
    7b50:	beq.n	7b1c <SdSpiCard::sectorCount()+0x3c>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7b52:	ldrb	r3, [r4, #17]
    7b54:	cbz	r3, 7b7a <SdSpiCard::sectorCount()+0x9a>
    7b56:	ldr	r3, [r4, #12]
    7b58:	movs	r1, #1
    7b5a:	ldrb	r0, [r3, #8]
    7b5c:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7b60:	movs	r1, #255	; 0xff
    7b62:	ldr	r0, [r4, #12]
    7b64:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7b68:	ldr	r0, [r4, #12]
    7b6a:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7b6e:	strb	r5, [r4, #17]
    7b70:	b.n	7b7a <SdSpiCard::sectorCount()+0x9a>
  return m_status;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7b72:	add	r1, sp, #8
    7b74:	blx	r2
    7b76:	cmp	r0, #0
    7b78:	beq.n	7b20 <SdSpiCard::sectorCount()+0x40>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7b7a:	ldrb.w	r3, [sp, #8]
    7b7e:	ands.w	r3, r3, #192	; 0xc0
    7b82:	beq.n	7ba8 <SdSpiCard::sectorCount()+0xc8>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7b84:	cmp	r3, #64	; 0x40
    7b86:	bne.n	7b20 <SdSpiCard::sectorCount()+0x40>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7b88:	ldrb.w	r3, [sp, #17]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7b8c:	ldrb.w	r1, [sp, #15]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7b90:	ldrb.w	r0, [sp, #16]
    7b94:	adds	r2, r3, #1
    7b96:	and.w	r3, r1, #63	; 0x3f
    7b9a:	add.w	r3, r2, r3, lsl #16
    7b9e:	add.w	r0, r3, r0, lsl #8
    7ba2:	lsls	r0, r0, #10
}
    7ba4:	add	sp, #28
    7ba6:	pop	{r4, r5, r6, r7, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7ba8:	ldrb.w	r4, [sp, #17]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7bac:	ldrb.w	r3, [sp, #14]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7bb0:	ldrb.w	r2, [sp, #15]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7bb4:	ldrb.w	r0, [sp, #18]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7bb8:	ldrb.w	r1, [sp, #13]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7bbc:	ldrb.w	r5, [sp, #16]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7bc0:	and.w	r4, r4, #3
    7bc4:	lsls	r4, r4, #1
    7bc6:	lsls	r2, r2, #2
    7bc8:	and.w	r3, r3, #3
    7bcc:	orr.w	r0, r4, r0, lsr #7
    7bd0:	and.w	r1, r1, #15
    7bd4:	orr.w	r3, r2, r3, lsl #10
    7bd8:	add	r0, r1
    7bda:	orr.w	r3, r3, r5, lsr #6
    7bde:	adds	r3, #1
    7be0:	subs	r0, #7
    7be2:	lsl.w	r0, r3, r0
    7be6:	add	sp, #28
    7be8:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7bea:	ldr	r7, [pc, #204]	; (7cb8 <SdSpiCard::sectorCount()+0x1d8>)
    7bec:	ldr	r3, [r7, #0]
    7bee:	str	r3, [sp, #4]
	return ret;
    7bf0:	ldr	r6, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7bf2:	uxth	r6, r6
    7bf4:	b.n	7c06 <SdSpiCard::sectorCount()+0x126>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7bf6:	ldr	r3, [r7, #0]
    7bf8:	str	r3, [sp, #0]
	return ret;
    7bfa:	ldr	r3, [sp, #0]
    7bfc:	uxth	r3, r3
    7bfe:	subs	r3, r3, r6
    7c00:	cmp.w	r3, #600	; 0x258
    7c04:	bgt.n	7c7a <SdSpiCard::sectorCount()+0x19a>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7c06:	ldr	r0, [r4, #12]
    7c08:	bl	9420 <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7c0c:	cmp	r0, #255	; 0xff
    7c0e:	mov	r5, r0
    7c10:	bne.n	7bf6 <SdSpiCard::sectorCount()+0x116>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7c12:	movs	r1, #253	; 0xfd
    7c14:	ldr	r0, [r4, #12]
    7c16:	bl	945c <SdSpiAltDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7c1a:	ldrb	r3, [r4, #17]
    7c1c:	cmp	r3, #0
    7c1e:	beq.w	7b06 <SdSpiCard::sectorCount()+0x26>
    7c22:	ldr	r3, [r4, #12]
    7c24:	movs	r1, #1
    7c26:	ldrb	r0, [r3, #8]
    7c28:	bl	9ca4 <digitalWrite>
    7c2c:	mov	r1, r5
    7c2e:	ldr	r0, [r4, #12]
    7c30:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7c34:	ldr	r0, [r4, #12]
    7c36:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7c3a:	movs	r3, #0
    7c3c:	strb	r3, [r4, #17]
    7c3e:	b.n	7b06 <SdSpiCard::sectorCount()+0x26>
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7c40:	blx	r3
    7c42:	b.n	7b0a <SdSpiCard::sectorCount()+0x2a>
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7c44:	movs	r2, #0
    7c46:	movs	r1, #12
    7c48:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7c4c:	ldrb	r3, [r4, #17]
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7c4e:	mov	r6, r0
    7c50:	cbz	r0, 7c8c <SdSpiCard::sectorCount()+0x1ac>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7c52:	movs	r2, #9
    7c54:	strb	r2, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7c56:	cmp	r3, #0
    7c58:	beq.w	7b0a <SdSpiCard::sectorCount()+0x2a>
    7c5c:	ldr	r3, [r4, #12]
    7c5e:	mov	r1, r5
    7c60:	ldrb	r0, [r3, #8]
    7c62:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7c66:	movs	r1, #255	; 0xff
    7c68:	ldr	r0, [r4, #12]
    7c6a:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7c6e:	ldr	r0, [r4, #12]
    7c70:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7c74:	movs	r3, #0
    7c76:	strb	r3, [r4, #17]
    7c78:	b.n	7b0a <SdSpiCard::sectorCount()+0x2a>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7c7a:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7c7c:	movs	r2, #29
    7c7e:	strb	r2, [r4, #16]
    7c80:	cmp	r3, #0
    7c82:	beq.w	7b0a <SdSpiCard::sectorCount()+0x2a>
    7c86:	ldr	r3, [r4, #12]
    7c88:	movs	r1, #1
    7c8a:	b.n	7c60 <SdSpiCard::sectorCount()+0x180>
    7c8c:	cmp	r3, #0
    7c8e:	beq.w	7b06 <SdSpiCard::sectorCount()+0x26>
    7c92:	ldr	r3, [r4, #12]
    7c94:	mov	r1, r5
    7c96:	ldrb	r0, [r3, #8]
    7c98:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7c9c:	movs	r1, #255	; 0xff
    7c9e:	ldr	r0, [r4, #12]
    7ca0:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7ca4:	ldr	r0, [r4, #12]
    7ca6:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7caa:	strb	r6, [r4, #17]
    7cac:	b.n	7b06 <SdSpiCard::sectorCount()+0x26>
    7cae:	nop
    7cb0:	.word	0x00007985
    7cb4:	.word	0x00007189
    7cb8:	.word	0x200203c0

00007cbc <SdSpiCard::erase(unsigned long, unsigned long)>:
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7cbc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    7cc0:	ldr	r3, [r0, #0]
    7cc2:	ldr.w	lr, [pc, #360]	; 7e2c <SdSpiCard::erase(unsigned long, unsigned long)+0x170>
    7cc6:	ldr	r7, [r3, #52]	; 0x34
    7cc8:	cmp	r7, lr
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7cca:	sub	sp, #24
    7ccc:	mov	r4, r0
    7cce:	mov	r5, r1
    7cd0:	mov	r6, r2
    7cd2:	bne.n	7d44 <SdSpiCard::erase(unsigned long, unsigned long)+0x88>
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7cd4:	ldr	r3, [r3, #20]
    7cd6:	blx	r3
  if (cardCommand(cmd, 0)) {
    7cd8:	movs	r2, #0
    7cda:	movs	r1, #9
    7cdc:	mov	r0, r4
    7cde:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7ce2:	mov	r7, r0
    7ce4:	cbz	r0, 7d16 <SdSpiCard::erase(unsigned long, unsigned long)+0x5a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7ce6:	movs	r3, #26
    7ce8:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7cea:	ldrb	r3, [r4, #17]
    7cec:	cbnz	r3, 7cf8 <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    7cee:	movs	r5, #0
}
    7cf0:	mov	r0, r5
    7cf2:	add	sp, #24
    7cf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7cf8:	ldr	r3, [r4, #12]
    7cfa:	movs	r1, #1
    7cfc:	ldrb	r0, [r3, #8]
    7cfe:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7d02:	movs	r1, #255	; 0xff
    7d04:	ldr	r0, [r4, #12]
    7d06:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7d0a:	ldr	r0, [r4, #12]
    7d0c:	bl	93d8 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7d10:	movs	r3, #0
    7d12:	strb	r3, [r4, #17]
    7d14:	b.n	7cee <SdSpiCard::erase(unsigned long, unsigned long)+0x32>
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    7d16:	movs	r2, #16
    7d18:	add	r1, sp, #8
    7d1a:	mov	r0, r4
    7d1c:	bl	777c <SdSpiCard::readData(unsigned char*, unsigned int)>
    7d20:	cmp	r0, #0
    7d22:	beq.n	7cea <SdSpiCard::erase(unsigned long, unsigned long)+0x2e>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7d24:	ldrb	r3, [r4, #17]
    7d26:	cbz	r3, 7d4a <SdSpiCard::erase(unsigned long, unsigned long)+0x8e>
    7d28:	ldr	r3, [r4, #12]
    7d2a:	movs	r1, #1
    7d2c:	ldrb	r0, [r3, #8]
    7d2e:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7d32:	movs	r1, #255	; 0xff
    7d34:	ldr	r0, [r4, #12]
    7d36:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7d3a:	ldr	r0, [r4, #12]
    7d3c:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7d40:	strb	r7, [r4, #17]
    7d42:	b.n	7d4a <SdSpiCard::erase(unsigned long, unsigned long)+0x8e>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    7d44:	add	r1, sp, #8
    7d46:	blx	r7
    7d48:	cbz	r0, 7d86 <SdSpiCard::erase(unsigned long, unsigned long)+0xca>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    7d4a:	ldrb.w	r3, [sp, #18]
    7d4e:	lsls	r2, r3, #25
    7d50:	bmi.n	7d68 <SdSpiCard::erase(unsigned long, unsigned long)+0xac>
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7d52:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    7d56:	ldrb.w	r1, [sp, #19]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7d5a:	lsls	r3, r3, #1
    7d5c:	adds	r2, r6, #1
    7d5e:	orr.w	r3, r3, r1, lsr #7
    7d62:	orrs	r2, r5
    7d64:	tst	r3, r2
    7d66:	bne.n	7db0 <SdSpiCard::erase(unsigned long, unsigned long)+0xf4>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    7d68:	ldrb	r3, [r4, #19]
    7d6a:	cmp	r3, #3
    firstSector <<= 9;
    7d6c:	it	ne
    7d6e:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    7d70:	mov	r2, r5
    7d72:	mov.w	r1, #32
    7d76:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    7d78:	it	ne
    7d7a:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    7d7c:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    7d80:	cbz	r0, 7db6 <SdSpiCard::erase(unsigned long, unsigned long)+0xfa>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7d82:	movs	r3, #35	; 0x23
    7d84:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7d86:	ldrb	r3, [r4, #17]
    7d88:	cmp	r3, #0
    7d8a:	beq.n	7cee <SdSpiCard::erase(unsigned long, unsigned long)+0x32>
    7d8c:	ldr	r3, [r4, #12]
    7d8e:	movs	r1, #1
    7d90:	ldrb	r0, [r3, #8]
    7d92:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7d96:	movs	r1, #255	; 0xff
    7d98:	ldr	r0, [r4, #12]
    7d9a:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7d9e:	ldr	r0, [r4, #12]
    7da0:	bl	93d8 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7da4:	movs	r5, #0
  return true;

fail:
  spiStop();
  return false;
}
    7da6:	mov	r0, r5
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7da8:	strb	r5, [r4, #17]
  return true;

fail:
  spiStop();
  return false;
}
    7daa:	add	sp, #24
    7dac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7db0:	movs	r3, #36	; 0x24
    7db2:	strb	r3, [r4, #16]
    7db4:	b.n	7d86 <SdSpiCard::erase(unsigned long, unsigned long)+0xca>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    7db6:	mov	r2, r6
    7db8:	movs	r1, #33	; 0x21
    7dba:	mov	r0, r4
    7dbc:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7dc0:	cmp	r0, #0
    7dc2:	bne.n	7d82 <SdSpiCard::erase(unsigned long, unsigned long)+0xc6>
      || cardCommand(CMD38, 0)) {
    7dc4:	mov	r2, r0
    7dc6:	movs	r1, #38	; 0x26
    7dc8:	mov	r0, r4
    7dca:	bl	7000 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7dce:	cmp	r0, #0
    7dd0:	bne.n	7d82 <SdSpiCard::erase(unsigned long, unsigned long)+0xc6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7dd2:	ldr	r7, [pc, #84]	; (7e28 <SdSpiCard::erase(unsigned long, unsigned long)+0x16c>)
    7dd4:	ldr	r3, [r7, #0]
    7dd6:	str	r3, [sp, #4]
	return ret;
    7dd8:	ldr	r5, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7dda:	movw	r8, #10000	; 0x2710
    7dde:	uxth	r5, r5
    7de0:	b.n	7df0 <SdSpiCard::erase(unsigned long, unsigned long)+0x134>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7de2:	ldr	r3, [r7, #0]
    7de4:	str	r3, [sp, #0]
	return ret;
    7de6:	ldr	r3, [sp, #0]
    7de8:	uxth	r3, r3
    7dea:	subs	r3, r3, r5
    7dec:	cmp	r3, r8
    7dee:	bgt.n	7e04 <SdSpiCard::erase(unsigned long, unsigned long)+0x148>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7df0:	ldr	r0, [r4, #12]
    7df2:	bl	9420 <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7df6:	cmp	r0, #255	; 0xff
    7df8:	mov	r6, r0
    7dfa:	bne.n	7de2 <SdSpiCard::erase(unsigned long, unsigned long)+0x126>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7dfc:	ldrb	r5, [r4, #17]
    7dfe:	cbnz	r5, 7e0a <SdSpiCard::erase(unsigned long, unsigned long)+0x14e>
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  spiStop();
  return true;
    7e00:	movs	r5, #1
    7e02:	b.n	7cf0 <SdSpiCard::erase(unsigned long, unsigned long)+0x34>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7e04:	movs	r3, #37	; 0x25
    7e06:	strb	r3, [r4, #16]
    7e08:	b.n	7d86 <SdSpiCard::erase(unsigned long, unsigned long)+0xca>
    7e0a:	ldr	r3, [r4, #12]
    7e0c:	movs	r1, #1
    7e0e:	ldrb	r0, [r3, #8]
    7e10:	bl	9ca4 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7e14:	mov	r1, r6
    7e16:	ldr	r0, [r4, #12]
    7e18:	bl	945c <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7e1c:	ldr	r0, [r4, #12]
    7e1e:	bl	93d8 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7e22:	movs	r3, #0
    7e24:	strb	r3, [r4, #17]
    7e26:	b.n	7cf0 <SdSpiCard::erase(unsigned long, unsigned long)+0x34>
    7e28:	.word	0x200203c0
    7e2c:	.word	0x00007985

00007e30 <m_sdhc_isr()>:
  m_errorLine = line;
  return false;  // setSdErrorCode
}
//=============================================================================
// ISR
static void m_sdhc_isr() {
    7e30:	push	{r4}
  SDHC_IRQSIGEN = 0;
    7e32:	ldr	r4, [pc, #28]	; (7e50 <m_sdhc_isr()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    7e34:	ldr	r2, [pc, #28]	; (7e54 <m_sdhc_isr()+0x24>)
    7e36:	ldr	r1, [pc, #32]	; (7e58 <m_sdhc_isr()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
  m_dmaBusy = false;
    7e38:	ldr	r0, [pc, #32]	; (7e5c <m_sdhc_isr()+0x2c>)
  return false;  // setSdErrorCode
}
//=============================================================================
// ISR
static void m_sdhc_isr() {
  SDHC_IRQSIGEN = 0;
    7e3a:	movs	r3, #0
    7e3c:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    7e3e:	ldr	r4, [r2, #0]
    7e40:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    7e42:	ldr	r1, [r1, #0]
    7e44:	str	r1, [r2, #0]
  m_dmaBusy = false;
}
    7e46:	ldr.w	r4, [sp], #4
// ISR
static void m_sdhc_isr() {
  SDHC_IRQSIGEN = 0;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  m_dmaBusy = false;
    7e4a:	strb	r3, [r0, #0]
}
    7e4c:	bx	lr
    7e4e:	nop
    7e50:	.word	0x400b1038
    7e54:	.word	0x400b1030
    7e58:	.word	0x20020384
    7e5c:	.word	0x200203a0

00007e60 <isBusyDMA()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//-----------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    7e60:	ldr	r3, [pc, #4]	; (7e68 <isBusyDMA()+0x8>)
    7e62:	ldrb	r0, [r3, #0]
}
    7e64:	bx	lr
    7e66:	nop
    7e68:	.word	0x200203a0

00007e6c <SdioCard::errorCode() const>:
  }
  return true;
}
//-----------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    7e6c:	ldr	r3, [pc, #4]	; (7e74 <SdioCard::errorCode() const+0x8>)
}
    7e6e:	ldrb	r0, [r3, #0]
    7e70:	bx	lr
    7e72:	nop
    7e74:	.word	0x1fff088c

00007e78 <SdioCard::errorData() const>:
//-----------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    7e78:	ldr	r3, [pc, #4]	; (7e80 <SdioCard::errorData() const+0x8>)
    7e7a:	ldr	r0, [r3, #0]
}
    7e7c:	bx	lr
    7e7e:	nop
    7e80:	.word	0x20020384

00007e84 <SdioCard::readCID(CID*)>:
    }
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    7e84:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    7e86:	ldr	r4, [pc, #20]	; (7e9c <SdioCard::readCID(CID*)+0x18>)
    }
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    7e88:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    7e8a:	ldmia	r4!, {r0, r1, r2, r3}
    7e8c:	str	r0, [r5, #0]
    7e8e:	str	r1, [r5, #4]
    7e90:	str	r2, [r5, #8]
    7e92:	str	r3, [r5, #12]
  return true;
}
    7e94:	movs	r0, #1
    7e96:	pop	{r4, r5}
    7e98:	bx	lr
    7e9a:	nop
    7e9c:	.word	0x20020368

00007ea0 <SdioCard::readCSD(csd_t*)>:
//-----------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7ea0:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    7ea2:	ldr	r4, [pc, #20]	; (7eb8 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7ea4:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    7ea6:	ldmia	r4!, {r0, r1, r2, r3}
    7ea8:	str	r0, [r5, #0]
    7eaa:	str	r1, [r5, #4]
    7eac:	str	r2, [r5, #8]
    7eae:	str	r3, [r5, #12]
  return true;
}
    7eb0:	movs	r0, #1
    7eb2:	pop	{r4, r5}
    7eb4:	bx	lr
    7eb6:	nop
    7eb8:	.word	0x20020390

00007ebc <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    7ebc:	ldr	r3, [pc, #8]	; (7ec8 <SdioCard::readOCR(unsigned long*)+0xc>)
    7ebe:	ldr	r3, [r3, #0]
    7ec0:	str	r3, [r1, #0]
  return true;
}
    7ec2:	movs	r0, #1
    7ec4:	bx	lr
    7ec6:	nop
    7ec8:	.word	0x2002037c

00007ecc <SdioCard::writeStart(unsigned long)>:
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ecc:	ldr	r1, [pc, #16]	; (7ee0 <SdioCard::writeStart(unsigned long)+0x14>)
  m_errorLine = line;
    7ece:	ldr	r3, [pc, #20]	; (7ee4 <SdioCard::writeStart(unsigned long)+0x18>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ed0:	movs	r0, #40	; 0x28
  m_errorLine = line;
    7ed2:	movw	r2, #1297	; 0x511
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ed6:	strb	r0, [r1, #0]
  m_errorLine = line;
    7ed8:	str	r2, [r3, #0]
}
//-----------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  // K66/K65 Errata - SDHC: Does not support Infinite Sector Transfer Mode.
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
    7eda:	movs	r0, #0
    7edc:	bx	lr
    7ede:	nop
    7ee0:	.word	0x1fff088c
    7ee4:	.word	0x20020380

00007ee8 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    7ee8:	bx	lr
    7eea:	nop

00007eec <SdioCard::~SdioCard()>:
    7eec:	push	{r4, lr}
    7eee:	movs	r1, #16
    7ef0:	mov	r4, r0
    7ef2:	bl	b24c <operator delete(void*, unsigned int)>
    7ef6:	mov	r0, r4
    7ef8:	pop	{r4, pc}
    7efa:	nop

00007efc <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    7efc:	ldr	r3, [pc, #20]	; (7f14 <SdioCard::type() const+0x18>)
    7efe:	ldrb	r3, [r3, #0]
    7f00:	cbz	r3, 7f10 <SdioCard::type() const+0x14>
    7f02:	ldr	r3, [pc, #20]	; (7f18 <SdioCard::type() const+0x1c>)
    7f04:	ldrb	r3, [r3, #0]
    7f06:	cmp	r3, #0
    7f08:	ite	ne
    7f0a:	movne	r0, #3
    7f0c:	moveq	r0, #2
    7f0e:	bx	lr
    7f10:	movs	r0, #1
}
    7f12:	bx	lr
    7f14:	.word	0x20020378
    7f18:	.word	0x20020379

00007f1c <SdioCard::sectorCount()>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//-----------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    7f1c:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7f1e:	ldr	r1, [pc, #100]	; (7f84 <SdioCard::sectorCount()+0x68>)
    7f20:	ldrb	r3, [r1, #0]
    7f22:	ands.w	r3, r3, #192	; 0xc0
    7f26:	beq.n	7f4c <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7f28:	cmp	r3, #64	; 0x40
    7f2a:	beq.n	7f32 <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    7f2c:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    7f2e:	pop	{r4, r5, r6}
    7f30:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7f32:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7f34:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7f36:	ldrb	r0, [r1, #8]
    7f38:	adds	r2, r3, #1
    7f3a:	and.w	r3, r4, #63	; 0x3f
    7f3e:	add.w	r3, r2, r3, lsl #16
    7f42:	add.w	r0, r3, r0, lsl #8
    7f46:	lsls	r0, r0, #10
    7f48:	pop	{r4, r5, r6}
    7f4a:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7f4c:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7f4e:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7f50:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7f52:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7f54:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7f56:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7f58:	and.w	r1, r5, #3
    7f5c:	lsls	r1, r1, #1
    7f5e:	and.w	r3, r3, #3
    7f62:	lsls	r2, r2, #2
    7f64:	orr.w	r0, r1, r0, lsr #7
    7f68:	orr.w	r3, r2, r3, lsl #10
    7f6c:	and.w	r1, r4, #15
    7f70:	orr.w	r3, r3, r6, lsr #6
    7f74:	add	r0, r1
    7f76:	subs	r0, #7
    7f78:	adds	r3, #1
    7f7a:	lsl.w	r0, r3, r0
    7f7e:	pop	{r4, r5, r6}
    7f80:	bx	lr
    7f82:	nop
    7f84:	.word	0x20020390

00007f88 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//-----------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7f88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DBG_IRQSTAT();
    7f8c:	ldr	r4, [pc, #156]	; (802c <cardCommand(unsigned long, unsigned long)+0xa4>)
    7f8e:	ldr	r3, [r4, #0]
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//-----------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7f90:	mov	r7, r0
    7f92:	mov	r8, r1
  DBG_IRQSTAT();
    7f94:	cmp	r3, #0
    7f96:	bne.n	7ffe <cardCommand(unsigned long, unsigned long)+0x76>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7f98:	bl	9d64 <micros>
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT &(SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//-----------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    7f9c:	ldr	r4, [pc, #144]	; (8030 <cardCommand(unsigned long, unsigned long)+0xa8>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7f9e:	ldr	r6, [pc, #148]	; (8034 <cardCommand(unsigned long, unsigned long)+0xac>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7fa0:	mov	r5, r0
    7fa2:	b.n	7fae <cardCommand(unsigned long, unsigned long)+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7fa4:	bl	9d64 <micros>
    7fa8:	subs	r0, r0, r5
    7faa:	cmp	r0, r6
    7fac:	bhi.n	7ff8 <cardCommand(unsigned long, unsigned long)+0x70>
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT &(SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//-----------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    7fae:	ldr	r3, [r4, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7fb0:	lsls	r1, r3, #31
    7fb2:	bmi.n	7fa4 <cardCommand(unsigned long, unsigned long)+0x1c>
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    7fb4:	ldr	r2, [pc, #128]	; (8038 <cardCommand(unsigned long, unsigned long)+0xb0>)
  SDHC_XFERTYP = xfertyp;
    7fb6:	ldr	r3, [pc, #132]	; (803c <cardCommand(unsigned long, unsigned long)+0xb4>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    7fb8:	str.w	r8, [r2]
  SDHC_XFERTYP = xfertyp;
    7fbc:	str	r7, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7fbe:	bl	9d64 <micros>
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//-----------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT &(SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    7fc2:	ldr	r4, [pc, #104]	; (802c <cardCommand(unsigned long, unsigned long)+0xa4>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7fc4:	ldr	r5, [pc, #108]	; (8034 <cardCommand(unsigned long, unsigned long)+0xac>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7fc6:	mov	r6, r0
    7fc8:	b.n	7fd4 <cardCommand(unsigned long, unsigned long)+0x4c>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7fca:	bl	9d64 <micros>
    7fce:	subs	r0, r0, r6
    7fd0:	cmp	r0, r5
    7fd2:	bhi.n	7ff8 <cardCommand(unsigned long, unsigned long)+0x70>
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//-----------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT &(SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    7fd4:	ldr	r2, [r4, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7fd6:	ldr	r3, [pc, #104]	; (8040 <cardCommand(unsigned long, unsigned long)+0xb8>)
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//-----------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT &(SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    7fd8:	ldr	r1, [pc, #80]	; (802c <cardCommand(unsigned long, unsigned long)+0xa4>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7fda:	ands	r3, r2
    7fdc:	cmp	r3, #0
    7fde:	beq.n	7fca <cardCommand(unsigned long, unsigned long)+0x42>
  SDHC_CMDARG = arg;
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    7fe0:	ldr	r3, [pc, #96]	; (8044 <cardCommand(unsigned long, unsigned long)+0xbc>)
    7fe2:	ldr	r2, [r1, #0]
    7fe4:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7fe6:	ldr	r2, [r3, #0]
    7fe8:	str	r2, [r1, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7fea:	ldr	r2, [r3, #0]
    7fec:	lsls	r2, r2, #31
    7fee:	bpl.n	7ff8 <cardCommand(unsigned long, unsigned long)+0x70>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    7ff0:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7ff2:	tst.w	r3, #983040	; 0xf0000
    7ff6:	beq.n	8024 <cardCommand(unsigned long, unsigned long)+0x9c>
    7ff8:	movs	r0, #0
    7ffa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7ffe:	movw	r1, #527	; 0x20f
    8002:	ldr	r0, [pc, #68]	; (8048 <cardCommand(unsigned long, unsigned long)+0xc0>)
    8004:	bl	af60 <Print::print(long)>
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8008:	movs	r1, #9
    800a:	ldr	r0, [pc, #64]	; (804c <cardCommand(unsigned long, unsigned long)+0xc4>)
    800c:	bl	96c8 <usb_serial_write>
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//-----------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
    8010:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    8012:	ldr	r0, [pc, #52]	; (8048 <cardCommand(unsigned long, unsigned long)+0xc0>)
    8014:	movs	r3, #0
    8016:	movs	r2, #16
    8018:	bl	b05c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    801c:	ldr	r0, [pc, #40]	; (8048 <cardCommand(unsigned long, unsigned long)+0xc0>)
    801e:	bl	b010 <Print::println()>
    8022:	b.n	7f98 <cardCommand(unsigned long, unsigned long)+0x10>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8024:	movs	r0, #1
    8026:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    802a:	nop
    802c:	.word	0x400b1030
    8030:	.word	0x400b1024
    8034:	.word	0x000f4240
    8038:	.word	0x400b1008
    803c:	.word	0x400b100c
    8040:	.word	0x000f0001
    8044:	.word	0x20020384
    8048:	.word	0x1fff0898
    804c:	.word	0x00013ee0

00008050 <isBusyCMD13()>:
//-----------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
    8050:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    8052:	ldr	r3, [pc, #28]	; (8070 <isBusyCMD13()+0x20>)
    8054:	ldr	r0, [pc, #28]	; (8074 <isBusyCMD13()+0x24>)
    8056:	ldr	r1, [r3, #0]
    8058:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    805c:	cbz	r0, 806c <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    805e:	ldr	r3, [pc, #24]	; (8078 <isBusyCMD13()+0x28>)
    8060:	ldr	r0, [r3, #0]
    8062:	eor.w	r0, r0, #256	; 0x100
    8066:	ubfx	r0, r0, #8, #1
    806a:	pop	{r3, pc}
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    806c:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    806e:	pop	{r3, pc}
    8070:	.word	0x20020388
    8074:	.word	0x0d1a0000
    8078:	.word	0x400b1010

0000807c <SdioCard::status()>:
//-----------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//-----------------------------------------------------------------------------
uint32_t SdioCard::status() {
    807c:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//-----------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    807e:	ldr	r3, [pc, #16]	; (8090 <SdioCard::status()+0x14>)
    8080:	ldr	r0, [pc, #16]	; (8094 <SdioCard::status()+0x18>)
    8082:	ldr	r1, [r3, #0]
    8084:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8088:	cbz	r0, 808e <SdioCard::status()+0x12>
    808a:	ldr	r3, [pc, #12]	; (8098 <SdioCard::status()+0x1c>)
    808c:	ldr	r0, [r3, #0]
  return transferStop();
}
//-----------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    808e:	pop	{r3, pc}
    8090:	.word	0x20020388
    8094:	.word	0x0d1a0000
    8098:	.word	0x400b1010

0000809c <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//-----------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    809c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    80a0:	mov	r9, r0
    80a2:	mov	sl, r1
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    80a4:	bl	9d64 <micros>
    80a8:	ldr	r5, [pc, #200]	; (8174 <cardCMD6(unsigned long, unsigned char*)+0xd8>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    80aa:	ldr.w	r8, [pc, #264]	; 81b4 <cardCMD6(unsigned long, unsigned char*)+0x118>
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    80ae:	ldr	r7, [pc, #200]	; (8178 <cardCMD6(unsigned long, unsigned char*)+0xdc>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    80b0:	mov	r6, r0
    80b2:	b.n	80be <cardCMD6(unsigned long, unsigned char*)+0x22>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    80b4:	bl	9d64 <micros>
    80b8:	subs	r0, r0, r6
    80ba:	cmp	r0, r7
    80bc:	bhi.n	8144 <cardCMD6(unsigned long, unsigned char*)+0xa8>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    80be:	ldr	r1, [r5, #0]
    80c0:	ldr	r0, [pc, #184]	; (817c <cardCMD6(unsigned long, unsigned char*)+0xe0>)
    80c2:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    80c6:	mov	r4, r0
    80c8:	cmp	r0, #0
    80ca:	beq.n	80b4 <cardCMD6(unsigned long, unsigned char*)+0x18>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    80cc:	ldr.w	r3, [r8]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    80d0:	lsls	r2, r3, #23
    80d2:	bpl.n	80b4 <cardCMD6(unsigned long, unsigned char*)+0x18>
	  }
	}		
#endif
//-----------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    80d4:	ldr	r5, [pc, #168]	; (8180 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  m_irqstat = 0;
    80d6:	ldr	r7, [pc, #172]	; (8184 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    80d8:	ldr	r2, [pc, #172]	; (8188 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  SDHC_CMDARG = arg;
    80da:	ldr	r0, [pc, #176]	; (818c <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    80dc:	ldr	r1, [pc, #176]	; (8190 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    80de:	ldr	r3, [pc, #180]	; (8194 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
	  }
	}		
#endif
//-----------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    80e0:	movs	r6, #1
    80e2:	strb	r6, [r5, #0]
  m_irqstat = 0;
    80e4:	movs	r6, #0
    80e6:	str	r6, [r7, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_CMDARG = arg;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    80e8:	ldr	r6, [pc, #172]	; (8198 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    80ea:	str.w	sl, [r2]
  SDHC_CMDARG = arg;
    80ee:	str.w	r9, [r0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    80f2:	str	r6, [r1, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    80f4:	ldr	r0, [pc, #164]	; (819c <cardCMD6(unsigned long, unsigned char*)+0x100>)
  SDHC_XFERTYP = CMD6_XFERTYP;
    80f6:	ldr	r1, [pc, #168]	; (81a0 <cardCMD6(unsigned long, unsigned char*)+0x104>)
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    80f8:	ldr.w	r9, [pc, #188]	; 81b8 <cardCMD6(unsigned long, unsigned char*)+0x11c>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_CMDARG = arg;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    80fc:	str	r0, [r3, #0]
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    80fe:	ldr	r3, [pc, #164]	; (81a4 <cardCMD6(unsigned long, unsigned char*)+0x108>)
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_CMDARG = arg;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = CMD6_XFERTYP;
    8100:	str	r1, [r2, #12]
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    8102:	str.w	r3, [r9]
  uint32_t m = micros();
    8106:	bl	9d64 <micros>
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//-----------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    810a:	ldrb	r3, [r5, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
    810c:	mov	r6, r0
  while (fcn()) {
    810e:	cbz	r3, 815a <cardCMD6(unsigned long, unsigned char*)+0xbe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8110:	ldr.w	r8, [pc, #100]	; 8178 <cardCMD6(unsigned long, unsigned char*)+0xdc>
    8114:	b.n	811e <cardCMD6(unsigned long, unsigned char*)+0x82>
      m_busyFcn = 0;
      return true;
    }
    yield();
    8116:	bl	1724 <yield>
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//-----------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    811a:	ldrb	r3, [r5, #0]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    811c:	cbz	r3, 815a <cardCMD6(unsigned long, unsigned char*)+0xbe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    811e:	bl	9d64 <micros>
    8122:	subs	r0, r0, r6
    8124:	cmp	r0, r8
    8126:	bls.n	8116 <cardCMD6(unsigned long, unsigned char*)+0x7a>
      m_busyFcn = 0;
    8128:	movs	r3, #0
    812a:	str.w	r3, [r9]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    812e:	ldr	r1, [pc, #120]	; (81a8 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
  m_errorLine = line;
    8130:	ldr	r3, [pc, #120]	; (81ac <cardCMD6(unsigned long, unsigned char*)+0x110>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8132:	movs	r0, #4
  m_errorLine = line;
    8134:	mov.w	r2, #556	; 0x22c
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8138:	strb	r0, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = CMD6_XFERTYP;

  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_CMD6);
    813a:	movs	r4, #0
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    813c:	str	r2, [r3, #0]

  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  return true;
}
    813e:	mov	r0, r4
    8140:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8144:	ldr	r1, [pc, #96]	; (81a8 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
  m_errorLine = line;
    8146:	ldr	r3, [pc, #100]	; (81ac <cardCMD6(unsigned long, unsigned char*)+0x110>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8148:	movs	r0, #10
  m_errorLine = line;
    814a:	movw	r2, #546	; 0x222
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    814e:	strb	r0, [r1, #0]
  m_errorLine = line;
    8150:	str	r2, [r3, #0]
}
//-----------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8152:	movs	r4, #0

  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  return true;
}
    8154:	mov	r0, r4
    8156:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    815a:	ldr	r3, [r7, #0]
    815c:	ldr	r1, [pc, #36]	; (8184 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    815e:	movs	r2, #0
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8160:	lsls	r3, r3, #30
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    8162:	str.w	r2, [r9]
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8166:	bpl.n	812e <cardCMD6(unsigned long, unsigned char*)+0x92>
    8168:	ldr	r2, [r1, #0]
    816a:	ldr	r3, [pc, #68]	; (81b0 <cardCMD6(unsigned long, unsigned char*)+0x114>)
    816c:	ands	r3, r2
    816e:	cmp	r3, #0
    8170:	bne.n	812e <cardCMD6(unsigned long, unsigned char*)+0x92>
    8172:	b.n	8154 <cardCMD6(unsigned long, unsigned char*)+0xb8>
    8174:	.word	0x20020388
    8178:	.word	0x000f4240
    817c:	.word	0x0d1a0000
    8180:	.word	0x200203a0
    8184:	.word	0x20020384
    8188:	.word	0x400b1000
    818c:	.word	0x400b1008
    8190:	.word	0x400b1004
    8194:	.word	0x400b1038
    8198:	.word	0x00010040
    819c:	.word	0x117f0002
    81a0:	.word	0x063a0011
    81a4:	.word	0x00007e61
    81a8:	.word	0x1fff088c
    81ac:	.word	0x20020380
    81b0:	.word	0x117f0000
    81b4:	.word	0x400b1010
    81b8:	.word	0x200203a4

000081bc <SdioCard::erase(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//-----------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    81bc:	push	{r3, r4, r5, r6, r7, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    81be:	ldr	r6, [pc, #200]	; (8288 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    81c0:	ldrb	r3, [r6, #10]
    81c2:	and.w	r4, r3, #64	; 0x40
//-----------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//-----------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    81c6:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    81c8:	cbnz	r4, 81e2 <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    81ca:	and.w	r3, r3, #63	; 0x3f
//-----------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    81ce:	ldrb	r2, [r6, #11]
    81d0:	and.w	r0, r4, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    81d4:	lsls	r3, r3, #1
    81d6:	adds	r4, r5, #1
    81d8:	orr.w	r3, r3, r2, lsr #7
    81dc:	orrs	r4, r1
    81de:	tst	r3, r4
    81e0:	bne.n	821e <SdioCard::erase(unsigned long, unsigned long)+0x62>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    81e2:	ldr	r3, [pc, #168]	; (828c <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    81e4:	ldrb	r3, [r3, #0]
    81e6:	cbnz	r3, 81ec <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    81e8:	lsls	r1, r1, #9
    lastSector <<= 9;
    81ea:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    81ec:	ldr	r0, [pc, #160]	; (8290 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    81ee:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    81f2:	cbnz	r0, 8204 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81f4:	ldr	r1, [pc, #156]	; (8294 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    81f6:	ldr	r3, [pc, #160]	; (8298 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81f8:	movs	r4, #15
  m_errorLine = line;
    81fa:	movw	r2, #999	; 0x3e7
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81fe:	strb	r4, [r1, #0]
  m_errorLine = line;
    8200:	str	r2, [r3, #0]
    8202:	pop	{r3, r4, r5, r6, r7, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    8204:	mov	r1, r5
    8206:	ldr	r0, [pc, #148]	; (829c <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    8208:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    820c:	cbnz	r0, 822e <SdioCard::erase(unsigned long, unsigned long)+0x72>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    820e:	ldr	r1, [pc, #132]	; (8294 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    8210:	ldr	r3, [pc, #132]	; (8298 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8212:	movs	r4, #16
  m_errorLine = line;
    8214:	movw	r2, #1002	; 0x3ea
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8218:	strb	r4, [r1, #0]
  m_errorLine = line;
    821a:	str	r2, [r3, #0]
    821c:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    821e:	ldr	r1, [pc, #116]	; (8294 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    8220:	ldr	r3, [pc, #116]	; (8298 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8222:	movs	r4, #36	; 0x24
  m_errorLine = line;
    8224:	movw	r2, #991	; 0x3df
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8228:	strb	r4, [r1, #0]
  m_errorLine = line;
    822a:	str	r2, [r3, #0]
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    822c:	pop	{r3, r4, r5, r6, r7, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    822e:	movs	r1, #0
    8230:	ldr	r0, [pc, #108]	; (82a0 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    8232:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8236:	cbnz	r0, 8248 <SdioCard::erase(unsigned long, unsigned long)+0x8c>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8238:	ldr	r1, [pc, #88]	; (8294 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    823a:	ldr	r3, [pc, #92]	; (8298 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    823c:	movs	r4, #17
  m_errorLine = line;
    823e:	movw	r2, #1005	; 0x3ed
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8242:	strb	r4, [r1, #0]
  m_errorLine = line;
    8244:	str	r2, [r3, #0]
    8246:	pop	{r3, r4, r5, r6, r7, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8248:	bl	9d64 <micros>
    824c:	ldr	r4, [pc, #84]	; (82a4 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    824e:	ldr	r7, [pc, #88]	; (82a8 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8250:	ldr	r6, [pc, #88]	; (82ac <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8252:	mov	r5, r0
    8254:	b.n	8260 <SdioCard::erase(unsigned long, unsigned long)+0xa4>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8256:	bl	9d64 <micros>
    825a:	subs	r0, r0, r5
    825c:	cmp	r0, r6
    825e:	bhi.n	8274 <SdioCard::erase(unsigned long, unsigned long)+0xb8>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    8260:	ldr	r1, [r4, #0]
    8262:	ldr	r0, [pc, #76]	; (82b0 <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
    8264:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8268:	cmp	r0, #0
    826a:	beq.n	8256 <SdioCard::erase(unsigned long, unsigned long)+0x9a>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    826c:	ldr	r3, [r7, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    826e:	lsls	r3, r3, #23
    8270:	bpl.n	8256 <SdioCard::erase(unsigned long, unsigned long)+0x9a>
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8272:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8274:	ldr	r1, [pc, #28]	; (8294 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    8276:	ldr	r3, [pc, #32]	; (8298 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8278:	movs	r0, #37	; 0x25
  m_errorLine = line;
    827a:	mov.w	r2, #1008	; 0x3f0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    827e:	strb	r0, [r1, #0]
  m_errorLine = line;
    8280:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    8282:	movs	r0, #0
    8284:	b.n	8272 <SdioCard::erase(unsigned long, unsigned long)+0xb6>
    8286:	nop
    8288:	.word	0x20020390
    828c:	.word	0x20020379
    8290:	.word	0x201a0000
    8294:	.word	0x1fff088c
    8298:	.word	0x20020380
    829c:	.word	0x211a0000
    82a0:	.word	0x261b0000
    82a4:	.word	0x20020388
    82a8:	.word	0x400b1010
    82ac:	.word	0x000f4240
    82b0:	.word	0x0d1a0000

000082b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//-----------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    82b4:	tst.w	r2, #3
    82b8:	bne.n	82bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    82ba:	cbnz	r3, 82ce <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82bc:	ldr	r1, [pc, #252]	; (83bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>)
  m_errorLine = line;
    82be:	ldr	r3, [pc, #256]	; (83c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10c>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82c0:	movs	r0, #34	; 0x22
  m_errorLine = line;
    82c2:	movw	r2, #755	; 0x2f3
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82c6:	strb	r0, [r1, #0]
  m_errorLine = line;
    82c8:	str	r2, [r3, #0]
}
//-----------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
    82ca:	movs	r0, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = xfertyp;

  return waitDmaStatus();
}
    82cc:	bx	lr
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//-----------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    82ce:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    82d2:	ldr.w	fp, [pc, #296]	; 83fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>
    82d6:	ldr	r4, [pc, #236]	; (83c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x110>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    82d8:	ldr.w	sl, [pc, #292]	; 8400 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    82dc:	ldr	r6, [pc, #232]	; (83c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x114>)
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//-----------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    82de:	sub	sp, #12
    82e0:	mov	r7, r3
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    82e2:	ldr	r3, [pc, #232]	; (83cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x118>)
    82e4:	str	r0, [sp, #4]
    82e6:	mov	r9, r1
    82e8:	mov	r8, r2
    82ea:	str.w	r3, [fp]
  uint32_t m = micros();
    82ee:	bl	9d64 <micros>
    82f2:	mov	r5, r0
    82f4:	b.n	8304 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x50>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    82f6:	bl	9d64 <micros>
    82fa:	subs	r0, r0, r5
    82fc:	cmp	r0, r6
    82fe:	bhi.n	8380 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xcc>
      m_busyFcn = 0;
      return true;
    }
    yield();
    8300:	bl	1724 <yield>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    8304:	ldr	r1, [r4, #0]
    8306:	ldr	r0, [pc, #200]	; (83d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x11c>)
    8308:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    830c:	cmp	r0, #0
    830e:	beq.n	82f6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x42>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8310:	ldr.w	r3, [sl]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8314:	lsls	r3, r3, #23
    8316:	bpl.n	82f6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x42>
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
    8318:	ldr	r3, [pc, #184]	; (83d4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
	  }
	}		
#endif
//-----------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    831a:	ldr	r4, [pc, #188]	; (83d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
  m_irqstat = 0;
    831c:	ldr	r5, [pc, #188]	; (83dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    831e:	ldr	r2, [pc, #192]	; (83e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
    8320:	ldrb	r3, [r3, #0]
	  }
	}		
#endif
//-----------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8322:	movs	r1, #1
    8324:	strb	r1, [r4, #0]
  m_irqstat = 0;
    8326:	movs	r1, #0
    8328:	str	r1, [r5, #0]
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    832a:	str.w	r8, [r2]
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
    832e:	cmp	r3, #0
    8330:	bne.n	83b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    8332:	mov.w	r1, r9, lsl #9
    8336:	ldr	r3, [pc, #172]	; (83e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8338:	ldr	r0, [pc, #172]	; (83e8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
    833a:	str	r1, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    833c:	lsls	r7, r7, #16
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = xfertyp;
    833e:	ldr	r2, [pc, #172]	; (83ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8340:	ldr	r1, [pc, #172]	; (83f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8342:	orr.w	r7, r7, #512	; 0x200
    8346:	str	r7, [r0, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8348:	str	r1, [r3, #48]	; 0x30
  SDHC_XFERTYP = xfertyp;
    834a:	ldr	r1, [sp, #4]
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    834c:	ldr	r3, [pc, #164]	; (83f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = xfertyp;
    834e:	str	r1, [r2, #0]
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    8350:	str.w	r3, [fp]
  uint32_t m = micros();
    8354:	bl	9d64 <micros>
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//-----------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    8358:	ldrb	r3, [r4, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
    835a:	mov	r6, r0
  while (fcn()) {
    835c:	cbz	r3, 839a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe6>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    835e:	ldr	r7, [pc, #104]	; (83c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x114>)
    8360:	b.n	836a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb6>
      m_busyFcn = 0;
      return true;
    }
    yield();
    8362:	bl	1724 <yield>
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//-----------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    8366:	ldrb	r3, [r4, #0]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8368:	cbz	r3, 839a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe6>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    836a:	bl	9d64 <micros>
    836e:	subs	r0, r0, r6
    8370:	cmp	r0, r7
    8372:	bls.n	8362 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
      m_busyFcn = 0;
    8374:	movs	r0, #0
    8376:	str.w	r0, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = xfertyp;

  return waitDmaStatus();
}
    837a:	add	sp, #12
    837c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8380:	ldr	r1, [pc, #56]	; (83bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>)
  m_errorLine = line;
    8382:	ldr	r3, [pc, #60]	; (83c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10c>)
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    8384:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8386:	movs	r4, #10
  m_errorLine = line;
    8388:	movw	r2, #758	; 0x2f6
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    838c:	strb	r4, [r1, #0]
  m_errorLine = line;
    838e:	str	r2, [r3, #0]
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    8390:	str.w	r0, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = xfertyp;

  return waitDmaStatus();
}
    8394:	add	sp, #12
    8396:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    839a:	ldr	r0, [r5, #0]
    839c:	ldr	r2, [pc, #60]	; (83dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    839e:	movs	r3, #0
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    83a0:	ands.w	r0, r0, #2
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    83a4:	str.w	r3, [fp]
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    83a8:	beq.n	837a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xc6>
    83aa:	ldr	r3, [r2, #0]
    83ac:	ldr	r0, [pc, #72]	; (83f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    83ae:	ands	r0, r3
    83b0:	clz	r0, r0
    83b4:	lsrs	r0, r0, #5
    83b6:	b.n	837a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xc6>
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
    83b8:	mov	r1, r9
    83ba:	b.n	8336 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    83bc:	.word	0x1fff088c
    83c0:	.word	0x20020380
    83c4:	.word	0x20020388
    83c8:	.word	0x000f4240
    83cc:	.word	0x00008051
    83d0:	.word	0x0d1a0000
    83d4:	.word	0x20020379
    83d8:	.word	0x200203a0
    83dc:	.word	0x20020384
    83e0:	.word	0x400b1000
    83e4:	.word	0x400b1008
    83e8:	.word	0x400b1004
    83ec:	.word	0x400b100c
    83f0:	.word	0x117f0002
    83f4:	.word	0x00007e61
    83f8:	.word	0x117f0000
    83fc:	.word	0x200203a4
    8400:	.word	0x400b1010

00008404 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    }
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8404:	push	{r3, r4, r5, r6, r7, lr}
    8406:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    8408:	ldrb	r0, [r0, #12]
    840a:	lsls	r0, r0, #31
    }
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    840c:	mov	r4, r1
    840e:	mov	r5, r2
    8410:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    8412:	bmi.n	843c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    8414:	cbz	r3, 8438 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8416:	add	r7, r1
    8418:	b.n	841e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    841a:	cmp	r4, r7
    841c:	beq.n	8438 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    841e:	ldr	r3, [r6, #0]
    8420:	mov	r2, r5
    8422:	mov	r1, r4
    8424:	ldr	r3, [r3, #8]
    8426:	mov	r0, r6
    8428:	blx	r3
    842a:	adds	r4, #1
    842c:	add.w	r5, r5, #512	; 0x200
    8430:	cmp	r0, #0
    8432:	bne.n	841a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    8434:	movs	r0, #0
    8436:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    8438:	movs	r0, #1
    843a:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    843c:	lsls	r0, r2, #30
    843e:	beq.n	8466 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8440:	cmp	r3, #0
    8442:	beq.n	8438 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8444:	add	r7, r1
    8446:	b.n	844c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    8448:	cmp	r7, r4
    844a:	beq.n	8438 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    844c:	ldr	r3, [r6, #0]
    844e:	mov	r2, r5
    8450:	mov	r1, r4
    8452:	ldr	r3, [r3, #8]
    8454:	mov	r0, r6
    8456:	blx	r3
}
//-----------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8458:	adds	r4, #1
    845a:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    845e:	cmp	r0, #0
    8460:	bne.n	8448 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    8462:	movs	r0, #0
    8464:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    8466:	ldr	r0, [pc, #24]	; (8480 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    8468:	bl	82b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    846c:	cmp	r0, #0
    846e:	bne.n	8438 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8470:	ldr	r1, [pc, #16]	; (8484 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    8472:	ldr	r3, [pc, #20]	; (8488 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8474:	movs	r4, #12
  m_errorLine = line;
    8476:	movw	r2, #1078	; 0x436
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    847a:	strb	r4, [r1, #0]
  m_errorLine = line;
    847c:	str	r2, [r3, #0]
    847e:	pop	{r3, r4, r5, r6, r7, pc}
    8480:	.word	0x123a0037
    8484:	.word	0x1fff088c
    8488:	.word	0x20020380

0000848c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    848c:	push	{r3, r4, r5, r6, r7, lr}
    848e:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    8490:	ldrb	r0, [r0, #12]
    8492:	lsls	r0, r0, #31
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    8494:	mov	r4, r1
    8496:	mov	r5, r2
    8498:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    849a:	bmi.n	84c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
  for (size_t i = 0; i < n; i++) {
    849c:	cbz	r3, 84c0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    849e:	add	r7, r1
    84a0:	b.n	84a6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    84a2:	cmp	r4, r7
    84a4:	beq.n	84c0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!writeSector(sector + i, src + i*512UL)) {
    84a6:	ldr	r3, [r6, #0]
    84a8:	mov	r2, r5
    84aa:	mov	r1, r4
    84ac:	ldr	r3, [r3, #24]
    84ae:	mov	r0, r6
    84b0:	blx	r3
    84b2:	adds	r4, #1
    84b4:	add.w	r5, r5, #512	; 0x200
    84b8:	cmp	r0, #0
    84ba:	bne.n	84a2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    84bc:	movs	r0, #0
    84be:	pop	{r3, r4, r5, r6, r7, pc}
    if (!writeSector(sector + i, src + i*512UL)) {
      return false;
    }
  }
  }
  return true;
    84c0:	movs	r0, #1
    84c2:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    84c4:	lsls	r0, r2, #30
    84c6:	beq.n	84ee <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    84c8:	cmp	r3, #0
    84ca:	beq.n	84c0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    84cc:	add	r7, r1
    84ce:	b.n	84d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    84d0:	cmp	r7, r4
    84d2:	beq.n	84c0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    84d4:	ldr	r3, [r6, #0]
    84d6:	mov	r2, r5
    84d8:	mov	r1, r4
    84da:	ldr	r3, [r3, #24]
    84dc:	mov	r0, r6
    84de:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    84e0:	adds	r4, #1
    84e2:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    84e6:	cmp	r0, #0
    84e8:	bne.n	84d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    84ea:	movs	r0, #0
    84ec:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    84ee:	ldr	r0, [pc, #24]	; (8508 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    84f0:	bl	82b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    84f4:	cmp	r0, #0
    84f6:	bne.n	84c0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84f8:	ldr	r1, [pc, #16]	; (850c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    84fa:	ldr	r3, [pc, #20]	; (8510 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84fc:	movs	r4, #14
  m_errorLine = line;
    84fe:	movw	r2, #1250	; 0x4e2
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8502:	strb	r4, [r1, #0]
  m_errorLine = line;
    8504:	str	r2, [r3, #0]
    8506:	pop	{r3, r4, r5, r6, r7, pc}
    8508:	.word	0x193a0027
    850c:	.word	0x1fff088c
    8510:	.word	0x20020380

00008514 <SdioCard::writeData(unsigned char const*)>:
  }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8514:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DBG_IRQSTAT();
    8518:	ldr	r4, [pc, #360]	; (8684 <SdioCard::writeData(unsigned char const*)+0x170>)
    851a:	ldr	r3, [r4, #0]
  }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    851c:	mov	r6, r1
  DBG_IRQSTAT();
    851e:	cmp	r3, #0
    8520:	bne.w	865c <SdioCard::writeData(unsigned char const*)+0x148>
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8524:	ldr	r3, [pc, #352]	; (8688 <SdioCard::writeData(unsigned char const*)+0x174>)
    8526:	ldr	r3, [r3, #0]
    8528:	lsls	r2, r3, #23
    852a:	bmi.n	8554 <SdioCard::writeData(unsigned char const*)+0x40>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    852c:	ldr	r3, [pc, #348]	; (868c <SdioCard::writeData(unsigned char const*)+0x178>)
    // Don't stop at sector gap if last sector.  Allows auto CMD12.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    852e:	ldr	r1, [pc, #352]	; (8690 <SdioCard::writeData(unsigned char const*)+0x17c>)
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8530:	ldr	r2, [r3, #0]
    8532:	bic.w	r2, r2, #65536	; 0x10000
    8536:	str	r2, [r3, #0]
    // Don't stop at sector gap if last sector.  Allows auto CMD12.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    8538:	ldr	r2, [r1, #0]
    853a:	lsrs	r2, r2, #16
    853c:	lsls	r2, r2, #16
    853e:	cmp.w	r2, #65536	; 0x10000
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8542:	ldr	r2, [r3, #0]
    8544:	orr.w	r2, r2, #131072	; 0x20000
    8548:	str	r2, [r3, #0]
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    // Don't stop at sector gap if last sector.  Allows auto CMD12.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    854a:	beq.n	8554 <SdioCard::writeData(unsigned char const*)+0x40>
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    } else {
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
      SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    854c:	ldr	r2, [r3, #0]
    854e:	orr.w	r2, r2, #65536	; 0x10000
    8552:	str	r2, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8554:	bl	9d64 <micros>
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
}
//-----------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    8558:	ldr	r5, [pc, #300]	; (8688 <SdioCard::writeData(unsigned char const*)+0x174>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    855a:	ldr.w	r8, [pc, #316]	; 8698 <SdioCard::writeData(unsigned char const*)+0x184>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    855e:	mov	r7, r0
    8560:	b.n	856c <SdioCard::writeData(unsigned char const*)+0x58>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8562:	bl	9d64 <micros>
    8566:	subs	r0, r0, r7
    8568:	cmp	r0, r8
    856a:	bhi.n	8634 <SdioCard::writeData(unsigned char const*)+0x120>
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
}
//-----------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    856c:	ldr	r0, [r5, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    856e:	ands.w	r4, r0, #1024	; 0x400
    8572:	beq.n	8562 <SdioCard::writeData(unsigned char const*)+0x4e>
  }
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8574:	ldr	r0, [pc, #272]	; (8688 <SdioCard::writeData(unsigned char const*)+0x174>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    8576:	ldr	r1, [pc, #284]	; (8694 <SdioCard::writeData(unsigned char const*)+0x180>)
    8578:	add.w	r2, r6, #64	; 0x40
    857c:	add.w	r6, r6, #576	; 0x240
  }
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8580:	ldr	r3, [r0, #0]
    8582:	lsls	r3, r3, #21
    8584:	bpl.n	8580 <SdioCard::writeData(unsigned char const*)+0x6c>
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    8586:	ldr.w	r3, [r2, #-64]
    858a:	str	r3, [r1, #0]
    858c:	ldr.w	r3, [r2, #-60]
    8590:	str	r3, [r1, #0]
    8592:	ldr.w	r3, [r2, #-56]
    8596:	str	r3, [r1, #0]
    8598:	ldr.w	r3, [r2, #-52]
    859c:	str	r3, [r1, #0]
    859e:	ldr.w	r3, [r2, #-48]
    85a2:	str	r3, [r1, #0]
    85a4:	ldr.w	r3, [r2, #-44]
    85a8:	str	r3, [r1, #0]
    85aa:	ldr.w	r3, [r2, #-40]
    85ae:	str	r3, [r1, #0]
    85b0:	ldr.w	r3, [r2, #-36]
    85b4:	str	r3, [r1, #0]
    85b6:	ldr.w	r3, [r2, #-32]
    85ba:	str	r3, [r1, #0]
    85bc:	ldr.w	r3, [r2, #-28]
    85c0:	str	r3, [r1, #0]
    85c2:	ldr.w	r3, [r2, #-24]
    85c6:	str	r3, [r1, #0]
    85c8:	ldr.w	r3, [r2, #-20]
    85cc:	str	r3, [r1, #0]
    85ce:	ldr.w	r3, [r2, #-16]
    85d2:	str	r3, [r1, #0]
    85d4:	ldr.w	r3, [r2, #-12]
    85d8:	str	r3, [r1, #0]
    85da:	ldr.w	r3, [r2, #-8]
    85de:	str	r3, [r1, #0]
    85e0:	ldr.w	r3, [r2, #-4]
    85e4:	str	r3, [r1, #0]
    85e6:	adds	r2, #64	; 0x40
    }
  }
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    85e8:	cmp	r2, r6
    85ea:	bne.n	8580 <SdioCard::writeData(unsigned char const*)+0x6c>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    85ec:	bl	9d64 <micros>
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    85f0:	ldr	r5, [pc, #144]	; (8684 <SdioCard::writeData(unsigned char const*)+0x170>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    85f2:	ldr	r7, [pc, #164]	; (8698 <SdioCard::writeData(unsigned char const*)+0x184>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    85f4:	mov	r6, r0
    85f6:	b.n	8602 <SdioCard::writeData(unsigned char const*)+0xee>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    85f8:	bl	9d64 <micros>
    85fc:	subs	r0, r0, r6
    85fe:	cmp	r0, r7
    8600:	bhi.n	8648 <SdioCard::writeData(unsigned char const*)+0x134>
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8602:	ldr	r3, [r5, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8604:	ldr	r4, [pc, #148]	; (869c <SdioCard::writeData(unsigned char const*)+0x188>)
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8606:	ldr	r2, [pc, #124]	; (8684 <SdioCard::writeData(unsigned char const*)+0x170>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8608:	ands	r4, r3
    860a:	cmp	r4, #0
    860c:	beq.n	85f8 <SdioCard::writeData(unsigned char const*)+0xe4>
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    860e:	ldr	r1, [pc, #144]	; (86a0 <SdioCard::writeData(unsigned char const*)+0x18c>)
    8610:	ldr	r3, [r2, #0]
    8612:	str	r3, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    8614:	ldr	r3, [r1, #0]
    8616:	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8618:	ldr	r3, [r1, #0]
    861a:	ands.w	r0, r3, #2
    861e:	beq.n	8630 <SdioCard::writeData(unsigned char const*)+0x11c>
    8620:	ldr	r3, [r1, #0]
    8622:	ldr	r0, [pc, #128]	; (86a4 <SdioCard::writeData(unsigned char const*)+0x190>)
    8624:	ands	r0, r3
    8626:	clz	r0, r0
    862a:	lsrs	r0, r0, #5
    862c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
    8630:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8634:	ldr	r1, [pc, #112]	; (86a8 <SdioCard::writeData(unsigned char const*)+0x194>)
  m_errorLine = line;
    8636:	ldr	r3, [pc, #116]	; (86ac <SdioCard::writeData(unsigned char const*)+0x198>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8638:	movs	r5, #31
  m_errorLine = line;
    863a:	movw	r2, #1277	; 0x4fd
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    863e:	strb	r5, [r1, #0]
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
      SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    }
  }
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    8640:	mov	r0, r4
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8642:	str	r2, [r3, #0]
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
      SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    }
  }
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    8644:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8648:	ldr	r1, [pc, #92]	; (86a8 <SdioCard::writeData(unsigned char const*)+0x194>)
  m_errorLine = line;
    864a:	ldr	r3, [pc, #96]	; (86ac <SdioCard::writeData(unsigned char const*)+0x198>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    864c:	movs	r5, #33	; 0x21
  m_errorLine = line;
    864e:	mov.w	r2, #1288	; 0x508
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8652:	strb	r5, [r1, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    8654:	mov	r0, r4
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8656:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    8658:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    865c:	movw	r1, #1263	; 0x4ef
    8660:	ldr	r0, [pc, #76]	; (86b0 <SdioCard::writeData(unsigned char const*)+0x19c>)
    8662:	bl	af60 <Print::print(long)>
    8666:	movs	r1, #9
    8668:	ldr	r0, [pc, #72]	; (86b4 <SdioCard::writeData(unsigned char const*)+0x1a0>)
    866a:	bl	96c8 <usb_serial_write>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
    866e:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    8670:	ldr	r0, [pc, #60]	; (86b0 <SdioCard::writeData(unsigned char const*)+0x19c>)
    8672:	movs	r3, #0
    8674:	movs	r2, #16
    8676:	bl	b05c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    867a:	ldr	r0, [pc, #52]	; (86b0 <SdioCard::writeData(unsigned char const*)+0x19c>)
    867c:	bl	b010 <Print::println()>
    8680:	b.n	8524 <SdioCard::writeData(unsigned char const*)+0x10>
    8682:	nop
    8684:	.word	0x400b1030
    8688:	.word	0x400b1024
    868c:	.word	0x400b1028
    8690:	.word	0x400b1004
    8694:	.word	0x400b1020
    8698:	.word	0x000f4240
    869c:	.word	0x117f0002
    86a0:	.word	0x20020384
    86a4:	.word	0x117f0000
    86a8:	.word	0x1fff088c
    86ac:	.word	0x20020380
    86b0:	.word	0x1fff0898
    86b4:	.word	0x00013ee0

000086b8 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//-----------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    86b8:	ldr	r3, [pc, #44]	; (86e8 <SdioCard::isBusy()+0x30>)
    86ba:	ldr	r3, [r3, #0]
    86bc:	cbz	r3, 86c0 <SdioCard::isBusy()+0x8>
    86be:	bx	r3
    86c0:	ldr	r3, [pc, #40]	; (86ec <SdioCard::isBusy()+0x34>)
//-----------------------------------------------------------------------------
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//-----------------------------------------------------------------------------
bool SdioCard::isBusy() {
    86c2:	push	{r4, lr}
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    86c4:	ldrb	r4, [r3, #0]
    86c6:	cbnz	r4, 86cc <SdioCard::isBusy()+0x14>
}
    86c8:	mov	r0, r4
    86ca:	pop	{r4, pc}
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    86cc:	ldr	r3, [pc, #32]	; (86f0 <SdioCard::isBusy()+0x38>)
    86ce:	ldr	r0, [pc, #36]	; (86f4 <SdioCard::isBusy()+0x3c>)
    86d0:	ldr	r1, [r3, #0]
    86d2:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    86d6:	cmp	r0, #0
    86d8:	beq.n	86c8 <SdioCard::isBusy()+0x10>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    86da:	ldr	r3, [pc, #28]	; (86f8 <SdioCard::isBusy()+0x40>)
    86dc:	ldr	r4, [r3, #0]
    86de:	eor.w	r4, r4, #256	; 0x100
    86e2:	ubfx	r4, r4, #8, #1
    86e6:	b.n	86c8 <SdioCard::isBusy()+0x10>
    86e8:	.word	0x200203a4
    86ec:	.word	0x2002038c
    86f0:	.word	0x20020388
    86f4:	.word	0x0d1a0000
    86f8:	.word	0x400b1010

000086fc <transferStop()>:
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
	#endif
}
//-----------------------------------------------------------------------------
static bool transferStop() {
    86fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DBG_IRQSTAT();
    8700:	ldr	r4, [pc, #188]	; (87c0 <transferStop()+0xc4>)
    8702:	ldr	r3, [r4, #0]
    8704:	cmp	r3, #0
    8706:	bne.n	8780 <transferStop()+0x84>

  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8708:	movs	r1, #0
    870a:	ldr	r0, [pc, #184]	; (87c4 <transferStop()+0xc8>)
    870c:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8710:	cbnz	r0, 8724 <transferStop()+0x28>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8712:	ldr	r1, [pc, #180]	; (87c8 <transferStop()+0xcc>)
  m_errorLine = line;
    8714:	ldr	r3, [pc, #180]	; (87cc <transferStop()+0xd0>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8716:	movs	r4, #9
  m_errorLine = line;
    8718:	movw	r2, #830	; 0x33e
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    871c:	strb	r4, [r1, #0]
  m_errorLine = line;
    871e:	str	r2, [r3, #0]
//-----------------------------------------------------------------------------
static bool transferStop() {
  DBG_IRQSTAT();

  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
    8720:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    8724:	ldr.w	r8, [pc, #208]	; 87f8 <transferStop()+0xfc>
    8728:	ldr	r3, [pc, #164]	; (87d0 <transferStop()+0xd4>)
    872a:	str.w	r3, [r8]
  uint32_t m = micros();
    872e:	bl	9d64 <micros>
    8732:	ldr	r4, [pc, #160]	; (87d4 <transferStop()+0xd8>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8734:	ldr	r7, [pc, #160]	; (87d8 <transferStop()+0xdc>)
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8736:	ldr	r6, [pc, #164]	; (87dc <transferStop()+0xe0>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
    8738:	mov	r5, r0
    873a:	b.n	874a <transferStop()+0x4e>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    873c:	bl	9d64 <micros>
    8740:	subs	r0, r0, r5
    8742:	cmp	r0, r6
    8744:	bhi.n	87a6 <transferStop()+0xaa>
      m_busyFcn = 0;
      return true;
    }
    yield();
    8746:	bl	1724 <yield>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    874a:	ldr	r1, [r4, #0]
    874c:	ldr	r0, [pc, #144]	; (87e0 <transferStop()+0xe4>)
    874e:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8752:	cmp	r0, #0
    8754:	beq.n	873c <transferStop()+0x40>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8756:	ldr	r3, [r7, #0]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8758:	lsls	r3, r3, #23
    875a:	bpl.n	873c <transferStop()+0x40>
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    875c:	ldr	r4, [pc, #132]	; (87e4 <transferStop()+0xe8>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    875e:	ldr	r1, [pc, #136]	; (87e8 <transferStop()+0xec>)

  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8760:	ldr	r5, [pc, #136]	; (87ec <transferStop()+0xf0>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    8762:	ldr	r6, [r4, #0]
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    8764:	movs	r3, #0
    8766:	str.w	r3, [r8]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    876a:	ldr	r3, [r1, #0]

  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    876c:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    876e:	bic.w	r3, r3, #65536	; 0x10000

  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8772:	orr.w	r2, r2, #67108864	; 0x4000000
    8776:	str	r2, [r5, #0]

  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    8778:	str	r6, [r4, #0]
  SDHC_PROCTL = proctl;
    877a:	str	r3, [r1, #0]

  return true;
}
    877c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8780:	movw	r1, #827	; 0x33b
    8784:	ldr	r0, [pc, #104]	; (87f0 <transferStop()+0xf4>)
    8786:	bl	af60 <Print::print(long)>
    878a:	movs	r1, #9
    878c:	ldr	r0, [pc, #100]	; (87f4 <transferStop()+0xf8>)
    878e:	bl	96c8 <usb_serial_write>
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
	#endif
}
//-----------------------------------------------------------------------------
static bool transferStop() {
  DBG_IRQSTAT();
    8792:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    8794:	ldr	r0, [pc, #88]	; (87f0 <transferStop()+0xf4>)
    8796:	movs	r3, #0
    8798:	movs	r2, #16
    879a:	bl	b05c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    879e:	ldr	r0, [pc, #80]	; (87f0 <transferStop()+0xf4>)
    87a0:	bl	b010 <Print::println()>
    87a4:	b.n	8708 <transferStop()+0xc>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    87a6:	ldr	r1, [pc, #32]	; (87c8 <transferStop()+0xcc>)
  m_errorLine = line;
    87a8:	ldr	r3, [pc, #32]	; (87cc <transferStop()+0xd0>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    87aa:	movs	r4, #10
  m_errorLine = line;
    87ac:	movw	r2, #833	; 0x341
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    87b0:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    87b2:	strb	r4, [r1, #0]
  m_errorLine = line;
    87b4:	str	r2, [r3, #0]
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    87b6:	str.w	r0, [r8]

  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    87ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87be:	nop
    87c0:	.word	0x400b1030
    87c4:	.word	0x0cdb0000
    87c8:	.word	0x1fff088c
    87cc:	.word	0x20020380
    87d0:	.word	0x00008051
    87d4:	.word	0x20020388
    87d8:	.word	0x400b1010
    87dc:	.word	0x000f4240
    87e0:	.word	0x0d1a0000
    87e4:	.word	0x400b1034
    87e8:	.word	0x400b1028
    87ec:	.word	0x400b102c
    87f0:	.word	0x1fff0898
    87f4:	.word	0x00013ee0
    87f8:	.word	0x200203a4

000087fc <SdioCard::readStop()>:
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    87fc:	b.w	86fc <transferStop()>

00008800 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    8800:	ldrb	r3, [r0, #13]
    8802:	subs	r3, #1
    8804:	cmp	r3, #1
    8806:	bls.n	880c <SdioCard::syncDevice()+0xc>
    if (!SdioCard::writeStop()) {
      return false;
    }
  }
  return true;
}
    8808:	movs	r0, #1
    880a:	bx	lr
  return statusCMD13();
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    880c:	movs	r3, #0
    880e:	strb	r3, [r0, #13]
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    8810:	b.w	86fc <transferStop()>

00008814 <SdioCard::begin(SdioConfig)>:
    }
  }
  return false;  // Caller will set errorCode.
}
//=============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8814:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8818:	ldr	r4, [pc, #544]	; (8a3c <SdioCard::begin(SdioConfig)+0x228>)

	static void initClock()
	{
		#ifdef HAS_KINETIS_MPU
		  // Allow SDHC Bus Master access.
		  MPU_RGDAAC0 |= 0x0C000000;
    881a:	ldr.w	lr, [pc, #648]	; 8aa4 <SdioCard::begin(SdioConfig)+0x290>
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    881e:	ldr	r7, [pc, #544]	; (8a40 <SdioCard::begin(SdioConfig)+0x22c>)
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    8820:	ldr	r6, [pc, #544]	; (8a44 <SdioCard::begin(SdioConfig)+0x230>)
  m_version2 = false;
    8822:	ldr	r5, [pc, #548]	; (8a48 <SdioCard::begin(SdioConfig)+0x234>)
}
//=============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    8824:	strb	r1, [r0, #12]
  m_curState = IDLE_STATE;
    8826:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8828:	strb	r3, [r4, #0]
//=============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    882a:	strb	r3, [r0, #13]
  m_initDone = false;
    882c:	strb	r3, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    882e:	strb	r3, [r6, #0]
  m_version2 = false;
    8830:	strb	r3, [r5, #0]

	static void initClock()
	{
		#ifdef HAS_KINETIS_MPU
		  // Allow SDHC Bus Master access.
		  MPU_RGDAAC0 |= 0x0C000000;
    8832:	ldr.w	r3, [lr]
		#endif
		// Enable SDHC clock.
		SIM_SCGC3 |= SIM_SCGC3_SDHC; 
    8836:	ldr	r2, [pc, #532]	; (8a4c <SdioCard::begin(SdioConfig)+0x238>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8838:	ldr	r0, [pc, #532]	; (8a50 <SdioCard::begin(SdioConfig)+0x23c>)
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    883a:	ldr	r1, [pc, #536]	; (8a54 <SdioCard::begin(SdioConfig)+0x240>)
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    883c:	ldr.w	ip, [pc, #616]	; 8aa8 <SdioCard::begin(SdioConfig)+0x294>

	static void initClock()
	{
		#ifdef HAS_KINETIS_MPU
		  // Allow SDHC Bus Master access.
		  MPU_RGDAAC0 |= 0x0C000000;
    8840:	orr.w	r3, r3, #201326592	; 0xc000000
    8844:	str.w	r3, [lr]
		#endif
		// Enable SDHC clock.
		SIM_SCGC3 |= SIM_SCGC3_SDHC; 
    8848:	ldr	r3, [r2, #0]
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    884a:	add.w	lr, lr, #260096	; 0x3f800
		#ifdef HAS_KINETIS_MPU
		  // Allow SDHC Bus Master access.
		  MPU_RGDAAC0 |= 0x0C000000;
		#endif
		// Enable SDHC clock.
		SIM_SCGC3 |= SIM_SCGC3_SDHC; 
    884e:	orr.w	r3, r3, #131072	; 0x20000
    8852:	str	r3, [r2, #0]
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8854:	add.w	lr, lr, #12

  // Disable GPIO clock.
  enableGPIO(false);

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL = SDHC_SYSCTL_RSTA;
    8858:	add.w	r2, r2, #428032	; 0x68800
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    885c:	movw	r3, #259	; 0x103

  // Disable GPIO clock.
  enableGPIO(false);

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL = SDHC_SYSCTL_RSTA;
    8860:	addw	r2, r2, #2044	; 0x7fc
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8864:	str	r3, [r0, #0]
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8866:	str.w	r3, [ip]
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    886a:	str	r3, [r1, #0]
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    886c:	str.w	r3, [lr]
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8870:	str	r3, [r0, #16]

  // Disable GPIO clock.
  enableGPIO(false);

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL = SDHC_SYSCTL_RSTA;
    8872:	mov.w	r0, #16777216	; 0x1000000
	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8876:	str	r3, [r1, #12]
    }
  }
  return false;  // Caller will set errorCode.
}
//=============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8878:	sub	sp, #76	; 0x4c
  // Disable GPIO clock.
  enableGPIO(false);

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL = SDHC_SYSCTL_RSTA;
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    887a:	mov	r1, r2

  // Disable GPIO clock.
  enableGPIO(false);

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL = SDHC_SYSCTL_RSTA;
    887c:	str	r0, [r2, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    887e:	ldr	r3, [r1, #0]
    8880:	ldr	r2, [pc, #468]	; (8a58 <SdioCard::begin(SdioConfig)+0x244>)
    8882:	lsls	r3, r3, #7
    8884:	bmi.n	887e <SdioCard::begin(SdioConfig)+0x6a>
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = f_pll/(1000*sdclkfs*dvs);
    8886:	ldr.w	r8, [pc, #548]	; 8aac <SdioCard::begin(SdioConfig)+0x298>

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    888a:	ldr	r1, [pc, #464]	; (8a5c <SdioCard::begin(SdioConfig)+0x248>)
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = f_pll/(1000*sdclkfs*dvs);
    888c:	mov.w	r3, #400	; 0x190
    8890:	str.w	r3, [r8]
  sdclkfs >>= 1;
  dvs--;

	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Disable SDHC clock.
		SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    8894:	ldr	r3, [r2, #0]
    8896:	bic.w	r3, r3, #8
    889a:	str	r3, [r2, #0]
	#endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    889c:	ldr	r3, [r2, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    889e:	bic.w	r3, r3, #1044480	; 0xff000
    88a2:	bic.w	r3, r3, #4080	; 0xff0

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    88a6:	orr.w	r3, r3, #917504	; 0xe0000
    88aa:	orr.w	r3, r3, #2272	; 0x8e0
    88ae:	str	r3, [r2, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    88b0:	ldr	r3, [r1, #0]
    88b2:	lsls	r0, r3, #28
    88b4:	bpl.n	88b0 <SdioCard::begin(SdioConfig)+0x9c>
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    88b6:	ldr.w	r9, [pc, #416]	; 8a58 <SdioCard::begin(SdioConfig)+0x244>
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    88ba:	ldr.w	ip, [pc, #404]	; 8a50 <SdioCard::begin(SdioConfig)+0x23c>
  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    88be:	ldr.w	r3, [r9]
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    88c2:	ldr.w	lr, [pc, #484]	; 8aa8 <SdioCard::begin(SdioConfig)+0x294>
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    88c6:	ldr	r0, [pc, #396]	; (8a54 <SdioCard::begin(SdioConfig)+0x240>)
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    88c8:	ldr	r1, [pc, #404]	; (8a60 <SdioCard::begin(SdioConfig)+0x24c>)
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    88ca:	ldr	r2, [pc, #408]	; (8a64 <SdioCard::begin(SdioConfig)+0x250>)
  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    88cc:	orr.w	r3, r3, #8
    88d0:	str.w	r3, [r9]
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    88d4:	movw	r3, #1091	; 0x443
    88d8:	str.w	r3, [ip]
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    88dc:	str.w	r3, [lr]
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    88e0:	mov.w	lr, #1088	; 0x440
    88e4:	str.w	lr, [r0]
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    88e8:	str	r3, [r1, #0]
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    88ea:	str	r3, [r2, #0]
  setSdclk(400);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
	SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    88ec:	add.w	r1, r1, #409600	; 0x64000
	SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    88f0:	add.w	r2, r2, #409600	; 0x64000
    88f4:	adds	r2, #40	; 0x28
  setSdclk(400);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
	SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    88f6:	adds	r1, #40	; 0x28
	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    88f8:	str	r3, [r0, #12]

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
	SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
	SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    88fa:	ldr	r3, [pc, #364]	; (8a68 <SdioCard::begin(SdioConfig)+0x254>)
  setSdclk(400);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
	SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    88fc:	ldr	r0, [pc, #364]	; (8a6c <SdioCard::begin(SdioConfig)+0x258>)
    88fe:	str	r0, [r1, #0]
	SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8900:	str	r3, [r2, #0]
//		SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL;

	#endif
		

  attachInterruptVector(IRQ_SDHC, m_sdhc_isr);
    8902:	ldr	r1, [pc, #364]	; (8a70 <SdioCard::begin(SdioConfig)+0x25c>)
    8904:	movs	r0, #81	; 0x51
    8906:	bl	99fc <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    890a:	ldr	r3, [pc, #360]	; (8a74 <SdioCard::begin(SdioConfig)+0x260>)

	#endif
		

  attachInterruptVector(IRQ_SDHC, m_sdhc_isr);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    890c:	ldr	r1, [pc, #360]	; (8a78 <SdioCard::begin(SdioConfig)+0x264>)
    890e:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8910:	mov.w	r2, #131072	; 0x20000

	#endif
		

  attachInterruptVector(IRQ_SDHC, m_sdhc_isr);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8914:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8916:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    8918:	ldr.w	r3, [r9]
    891c:	orr.w	r3, r3, #134217728	; 0x8000000
    8920:	str.w	r3, [r9]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    8924:	mov	r3, r9
    8926:	ldr	r1, [r3, #0]
    8928:	ands.w	r1, r1, #134217728	; 0x8000000
    892c:	bne.n	8926 <SdioCard::begin(SdioConfig)+0x112>
  m_version2 = false;

  // initialize controller.
  initSDHC();
  
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    892e:	mov	r0, r1
    8930:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8934:	mov	r9, r0
    8936:	cmp	r0, #0
    8938:	beq.n	89e0 <SdioCard::begin(SdioConfig)+0x1cc>
    893a:	mov.w	r9, #10
    return sdError(SD_CARD_ERROR_CMD0);
  }
  
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    893e:	mov.w	r1, #426	; 0x1aa
    8942:	ldr	r0, [pc, #312]	; (8a7c <SdioCard::begin(SdioConfig)+0x268>)
    8944:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8948:	cmp	r0, #0
    894a:	bne.n	8a10 <SdioCard::begin(SdioConfig)+0x1fc>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    894c:	subs.w	r9, r9, #1
    8950:	bne.n	893e <SdioCard::begin(SdioConfig)+0x12a>
      m_version2 = true;
      break;
    }
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8952:	ldrb	r2, [r5, #0]
    8954:	ldr	r3, [pc, #296]	; (8a80 <SdioCard::begin(SdioConfig)+0x26c>)
    8956:	cmp	r2, #0
    8958:	ite	eq
    895a:	moveq.w	r9, #3145728	; 0x300000
    895e:	movne	r9, r3
  uint32_t m = micros();
    8960:	bl	9d64 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8964:	ldr	r5, [pc, #284]	; (8a84 <SdioCard::begin(SdioConfig)+0x270>)
      break;
    }
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
    8966:	mov	sl, r0
  m_dmaBusy = false;
}
//=============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8968:	movs	r1, #0
    896a:	ldr	r0, [pc, #284]	; (8a88 <SdioCard::begin(SdioConfig)+0x274>)
    896c:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8970:	cbnz	r0, 898a <SdioCard::begin(SdioConfig)+0x176>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8972:	ldr	r2, [pc, #280]	; (8a8c <SdioCard::begin(SdioConfig)+0x278>)
    8974:	movw	r1, #915	; 0x393
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8978:	movs	r3, #22
  m_errorLine = line;
    897a:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    897c:	strb	r3, [r4, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    897e:	mov.w	r9, #0

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8982:	mov	r0, r9
    8984:	add	sp, #76	; 0x4c
    8986:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_dmaBusy = false;
}
//=============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    898a:	mov	r1, r9
    898c:	ldr	r0, [pc, #256]	; (8a90 <SdioCard::begin(SdioConfig)+0x27c>)
    898e:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8992:	cmp	r0, #0
    8994:	beq.n	8972 <SdioCard::begin(SdioConfig)+0x15e>
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    8996:	bl	9d64 <micros>
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    899a:	ldr	r3, [pc, #248]	; (8a94 <SdioCard::begin(SdioConfig)+0x280>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    899c:	ldr	r2, [pc, #228]	; (8a84 <SdioCard::begin(SdioConfig)+0x270>)
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    899e:	rsb	r0, sl, r0
    89a2:	cmp	r0, r3
    89a4:	bhi.n	8972 <SdioCard::begin(SdioConfig)+0x15e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    89a6:	ldr	r3, [r5, #0]
    }
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
  do {
    89a8:	cmp	r3, #0
    89aa:	bge.n	8968 <SdioCard::begin(SdioConfig)+0x154>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);

  m_ocr = SDHC_CMDRSP0;
    89ac:	ldr	r3, [pc, #232]	; (8a98 <SdioCard::begin(SdioConfig)+0x284>)
    89ae:	ldr	r1, [r2, #0]
    89b0:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    89b2:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    89b4:	ldr	r0, [pc, #228]	; (8a9c <SdioCard::begin(SdioConfig)+0x288>)
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);

  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    89b6:	lsls	r1, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    89b8:	it	mi
    89ba:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    89bc:	mov.w	r1, #0
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);

  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    89c0:	it	mi
    89c2:	strbmi	r3, [r6, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    89c4:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    89c8:	mov	r9, r0
    89ca:	cbnz	r0, 89f4 <SdioCard::begin(SdioConfig)+0x1e0>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    89cc:	ldr	r2, [pc, #188]	; (8a8c <SdioCard::begin(SdioConfig)+0x278>)
    89ce:	movw	r1, #925	; 0x39d
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89d2:	movs	r3, #2

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    89d4:	mov	r0, r9
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    89d6:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89d8:	strb	r3, [r4, #0]

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    89da:	add	sp, #76	; 0x4c
    89dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    89e0:	ldr	r2, [pc, #168]	; (8a8c <SdioCard::begin(SdioConfig)+0x278>)
    89e2:	mov.w	r1, #896	; 0x380
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89e6:	movs	r3, #1

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    89e8:	mov	r0, r9
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    89ea:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89ec:	strb	r3, [r4, #0]

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    89ee:	add	sp, #76	; 0x4c
    89f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    89f4:	movs	r1, #0
    89f6:	ldr	r0, [pc, #168]	; (8aa0 <SdioCard::begin(SdioConfig)+0x28c>)
    89f8:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    89fc:	mov	r9, r0
    89fe:	cmp	r0, #0
    8a00:	bne.n	8ab0 <SdioCard::begin(SdioConfig)+0x29c>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8a02:	ldr	r2, [pc, #136]	; (8a8c <SdioCard::begin(SdioConfig)+0x278>)
    8a04:	mov.w	r1, #928	; 0x3a0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a08:	movs	r3, #3
  m_errorLine = line;
    8a0a:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a0c:	strb	r3, [r4, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    8a0e:	b.n	8982 <SdioCard::begin(SdioConfig)+0x16e>
  }
  
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    8a10:	ldr	r3, [pc, #112]	; (8a84 <SdioCard::begin(SdioConfig)+0x270>)
    8a12:	ldr	r3, [r3, #0]
    8a14:	cmp.w	r3, #426	; 0x1aa
    8a18:	beq.n	8a32 <SdioCard::begin(SdioConfig)+0x21e>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8a1a:	ldr	r2, [pc, #112]	; (8a8c <SdioCard::begin(SdioConfig)+0x278>)
  
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    8a1c:	mov.w	r9, #0
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8a20:	movw	r1, #903	; 0x387
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a24:	movs	r3, #6

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8a26:	mov	r0, r9
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8a28:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a2a:	strb	r3, [r4, #0]

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8a2c:	add	sp, #76	; 0x4c
    8a2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
    8a32:	movs	r3, #1
    8a34:	strb	r3, [r5, #0]
      break;
    }
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8a36:	ldr.w	r9, [pc, #72]	; 8a80 <SdioCard::begin(SdioConfig)+0x26c>
    8a3a:	b.n	8960 <SdioCard::begin(SdioConfig)+0x14c>
    8a3c:	.word	0x1fff088c
    8a40:	.word	0x2002038c
    8a44:	.word	0x20020379
    8a48:	.word	0x20020378
    8a4c:	.word	0x40048030
    8a50:	.word	0x4004d000
    8a54:	.word	0x4004d008
    8a58:	.word	0x400b102c
    8a5c:	.word	0x400b1024
    8a60:	.word	0x4004d00c
    8a64:	.word	0x4004d010
    8a68:	.word	0x117f0002
    8a6c:	.word	0x117f000b
    8a70:	.word	0x00007e31
    8a74:	.word	0xe000e108
    8a78:	.word	0xe000e451
    8a7c:	.word	0x081a0000
    8a80:	.word	0x40300000
    8a84:	.word	0x400b1010
    8a88:	.word	0x371a0000
    8a8c:	.word	0x20020380
    8a90:	.word	0x29020000
    8a94:	.word	0x000f4240
    8a98:	.word	0x2002037c
    8a9c:	.word	0x02090000
    8aa0:	.word	0x031a0000
    8aa4:	.word	0x4000d800
    8aa8:	.word	0x4004d004
    8aac:	.word	0x200203a8
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8ab0:	ldr	r6, [pc, #620]	; (8d20 <SdioCard::begin(SdioConfig)+0x50c>)
    8ab2:	ldr	r5, [pc, #624]	; (8d24 <SdioCard::begin(SdioConfig)+0x510>)
    8ab4:	ldr	r3, [r6, #0]
}
//-----------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8ab6:	ldr	r0, [pc, #624]	; (8d28 <SdioCard::begin(SdioConfig)+0x514>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8ab8:	lsrs	r3, r3, #16
    8aba:	lsls	r3, r3, #16
}
//-----------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8abc:	mov	r1, r3
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8abe:	str	r3, [r5, #0]
}
//-----------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8ac0:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8ac4:	mov	r9, r0
    8ac6:	cmp	r0, #0
    8ac8:	beq.w	8be8 <SdioCard::begin(SdioConfig)+0x3d4>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8acc:	ldr	r2, [pc, #604]	; (8d2c <SdioCard::begin(SdioConfig)+0x518>)
    8ace:	ldr.w	r9, [r6]
    8ad2:	ldr	r1, [r2, #0]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8ad4:	ldr.w	lr, [pc, #676]	; 8d7c <SdioCard::begin(SdioConfig)+0x568>
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8ad8:	ldr	r3, [pc, #596]	; (8d30 <SdioCard::begin(SdioConfig)+0x51c>)
    8ada:	ldr.w	fp, [pc, #676]	; 8d80 <SdioCard::begin(SdioConfig)+0x56c>
    8ade:	ldr	r0, [r3, #0]
    8ae0:	ldr.w	ip, [fp]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8ae4:	strb.w	r9, [lr, #14]
    8ae8:	mov.w	sl, r1, lsr #8
    8aec:	strb.w	sl, [lr, #9]
    8af0:	mov.w	sl, r9, lsr #8
    8af4:	strb.w	sl, [lr, #13]
    8af8:	mov.w	sl, r9, lsr #16
    8afc:	mov.w	r9, r9, lsr #24
    8b00:	strb.w	r9, [lr, #11]
    8b04:	mov.w	r9, r1, lsr #16
    8b08:	strb.w	r1, [lr, #10]
    8b0c:	strb.w	sl, [lr, #12]
    8b10:	lsrs	r1, r1, #24
    8b12:	mov.w	sl, r0, lsr #8
    8b16:	strb.w	r9, [lr, #8]
    8b1a:	mov.w	r9, r0, lsr #16
    8b1e:	strb.w	r0, [lr, #6]
    8b22:	strb.w	r1, [lr, #7]
    8b26:	strb.w	sl, [lr, #5]
    8b2a:	lsrs	r1, r0, #24
    8b2c:	strb.w	r9, [lr, #4]
    8b30:	mov.w	r0, ip, lsr #8
    8b34:	mov.w	r9, ip, lsr #16
  }
  d[15] = 0;
    8b38:	mov.w	sl, #0
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8b3c:	strb.w	r1, [lr, #3]
    8b40:	strb.w	r0, [lr, #1]
    8b44:	strb.w	r9, [lr]
    8b48:	strb.w	ip, [lr, #2]
}
//-----------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8b4c:	ldr	r1, [r5, #0]
    8b4e:	ldr	r0, [pc, #484]	; (8d34 <SdioCard::begin(SdioConfig)+0x520>)
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    8b50:	strb.w	sl, [lr, #15]
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8b54:	str	r2, [sp, #4]
    8b56:	str	r3, [sp, #0]
}
//-----------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8b58:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8b5c:	mov	r9, r0
    8b5e:	cmp	r0, #0
    8b60:	beq.n	8bf6 <SdioCard::begin(SdioConfig)+0x3e2>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8b62:	ldr	r2, [sp, #4]
    8b64:	ldr	r3, [sp, #0]
    8b66:	ldr	r0, [r6, #0]
    8b68:	ldr	r6, [r2, #0]
    8b6a:	ldr	r2, [r3, #0]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8b6c:	ldr	r3, [pc, #456]	; (8d38 <SdioCard::begin(SdioConfig)+0x524>)
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8b6e:	ldr.w	ip, [fp]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    8b72:	strb.w	sl, [r3, #15]
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8b76:	mov.w	lr, r0, lsr #8
    8b7a:	mov.w	sl, r6, lsr #8
    8b7e:	mov.w	r9, r6, lsr #16
    8b82:	strb.w	lr, [r3, #13]
    8b86:	mov.w	lr, r0, lsr #16
    8b8a:	strb	r0, [r3, #14]
    8b8c:	strb	r6, [r3, #10]
    8b8e:	lsrs	r0, r0, #24
    8b90:	strb	r2, [r3, #6]
    8b92:	strb.w	lr, [r3, #12]
    8b96:	mov.w	fp, r2, lsr #8
    8b9a:	mov.w	lr, r6, lsr #24
    8b9e:	strb.w	sl, [r3, #9]
    8ba2:	strb.w	r9, [r3, #8]
    8ba6:	mov.w	sl, r2, lsr #16
    8baa:	mov.w	r9, ip, lsr #8
    8bae:	lsrs	r2, r2, #24
    8bb0:	mov.w	r6, ip, lsr #16
    8bb4:	strb	r0, [r3, #11]
    8bb6:	strb.w	r9, [r3, #1]
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8bba:	ldr	r1, [r5, #0]
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8bbc:	strb.w	ip, [r3, #2]
    8bc0:	strb.w	lr, [r3, #7]
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8bc4:	ldr	r0, [pc, #372]	; (8d3c <SdioCard::begin(SdioConfig)+0x528>)
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8bc6:	strb.w	fp, [r3, #5]
    8bca:	strb.w	sl, [r3, #4]
    8bce:	strb	r2, [r3, #3]
    8bd0:	strb	r6, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8bd2:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8bd6:	mov	r9, r0
    8bd8:	cbnz	r0, 8c04 <SdioCard::begin(SdioConfig)+0x3f0>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8bda:	ldr	r2, [pc, #356]	; (8d40 <SdioCard::begin(SdioConfig)+0x52c>)
    8bdc:	movw	r1, #939	; 0x3ab
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8be0:	movs	r3, #5
  m_errorLine = line;
    8be2:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8be4:	strb	r3, [r4, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    8be6:	b.n	8982 <SdioCard::begin(SdioConfig)+0x16e>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8be8:	ldr	r2, [pc, #340]	; (8d40 <SdioCard::begin(SdioConfig)+0x52c>)
    8bea:	movw	r1, #933	; 0x3a5
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8bee:	movs	r3, #7
  m_errorLine = line;
    8bf0:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8bf2:	strb	r3, [r4, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    8bf4:	b.n	8982 <SdioCard::begin(SdioConfig)+0x16e>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8bf6:	ldr	r2, [pc, #328]	; (8d40 <SdioCard::begin(SdioConfig)+0x52c>)
    8bf8:	mov.w	r1, #936	; 0x3a8
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8bfc:	movs	r3, #8
  m_errorLine = line;
    8bfe:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c00:	strb	r3, [r4, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    8c02:	b.n	8982 <SdioCard::begin(SdioConfig)+0x16e>
  m_dmaBusy = false;
}
//=============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8c04:	ldr	r1, [r5, #0]
    8c06:	ldr	r0, [pc, #316]	; (8d44 <SdioCard::begin(SdioConfig)+0x530>)
    8c08:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8c0c:	cbnz	r0, 8c20 <SdioCard::begin(SdioConfig)+0x40c>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8c0e:	ldr	r2, [pc, #304]	; (8d40 <SdioCard::begin(SdioConfig)+0x52c>)
    8c10:	mov.w	r1, #944	; 0x3b0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c14:	movs	r3, #20
  m_errorLine = line;
    8c16:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c18:	strb	r3, [r4, #0]
    return sdError(SD_CARD_ERROR_CMD7);
  }
  
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    8c1a:	mov.w	r9, #0
    8c1e:	b.n	8982 <SdioCard::begin(SdioConfig)+0x16e>
  m_dmaBusy = false;
}
//=============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8c20:	movs	r1, #2
    8c22:	ldr	r0, [pc, #292]	; (8d48 <SdioCard::begin(SdioConfig)+0x534>)
    8c24:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8c28:	mov	r9, r0
    8c2a:	cmp	r0, #0
    8c2c:	beq.n	8c0e <SdioCard::begin(SdioConfig)+0x3fa>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8c2e:	ldr	r3, [pc, #284]	; (8d4c <SdioCard::begin(SdioConfig)+0x538>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
    8c30:	ldr	r0, [pc, #284]	; (8d50 <SdioCard::begin(SdioConfig)+0x53c>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8c32:	ldr	r2, [r3, #0]
    8c34:	bic.w	r2, r2, #6
    8c38:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8c3a:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
    8c3c:	mov.w	r4, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8c40:	orr.w	r2, r2, #2
    8c44:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
  
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) //|| defined(__IMXRT1052__)
  // Determine if High Speed mode is supported and set frequency.
	  uint8_t status[64];
	  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8c46:	add	r1, sp, #8
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
    8c48:	str	r4, [r0, #0]
  
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) //|| defined(__IMXRT1052__)
  // Determine if High Speed mode is supported and set frequency.
	  uint8_t status[64];
	  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8c4a:	mvn.w	r0, #4278190080	; 0xff000000
    8c4e:	bl	809c <cardCMD6(unsigned long, unsigned char*)>
		  cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8c52:	cbz	r0, 8c5c <SdioCard::begin(SdioConfig)+0x448>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
  
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) //|| defined(__IMXRT1052__)
  // Determine if High Speed mode is supported and set frequency.
	  uint8_t status[64];
	  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8c54:	ldrb.w	r3, [sp, #21]
    8c58:	lsls	r2, r3, #30
    8c5a:	bmi.n	8ce8 <SdioCard::begin(SdioConfig)+0x4d4>
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8c5c:	ldr	r2, [pc, #244]	; (8d54 <SdioCard::begin(SdioConfig)+0x540>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8c5e:	ldr	r6, [pc, #248]	; (8d58 <SdioCard::begin(SdioConfig)+0x544>)
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8c60:	ldr	r5, [pc, #248]	; (8d5c <SdioCard::begin(SdioConfig)+0x548>)
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8c62:	ldr	r4, [pc, #252]	; (8d60 <SdioCard::begin(SdioConfig)+0x54c>)
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8c64:	ldr	r0, [pc, #252]	; (8d64 <SdioCard::begin(SdioConfig)+0x550>)
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8c66:	ldr	r1, [pc, #256]	; (8d68 <SdioCard::begin(SdioConfig)+0x554>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8c68:	movw	r3, #259	; 0x103
    8c6c:	str	r3, [r6, #0]
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8c6e:	str	r3, [r5, #0]
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8c70:	str	r3, [r4, #0]
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8c72:	str	r3, [r2, #0]
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8c74:	str	r3, [r0, #0]
	
  while ((f_pll/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    8c76:	movs	r2, #4
	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8c78:	str	r3, [r1, #0]
  sdclkfs >>= 1;
  dvs--;

	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Disable SDHC clock.
		SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    8c7a:	ldr	r1, [pc, #240]	; (8d6c <SdioCard::begin(SdioConfig)+0x558>)
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = f_pll/(1000*sdclkfs*dvs);
    8c7c:	ldr	r3, [pc, #240]	; (8d70 <SdioCard::begin(SdioConfig)+0x55c>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8c7e:	ldr	r0, [pc, #244]	; (8d74 <SdioCard::begin(SdioConfig)+0x560>)
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = f_pll/(1000*sdclkfs*dvs);
    8c80:	mov.w	r4, #1000	; 0x3e8
    8c84:	mul.w	r4, r4, r2
    8c88:	udiv	r3, r3, r4
    8c8c:	str.w	r3, [r8]
  sdclkfs >>= 1;
  dvs--;

	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Disable SDHC clock.
		SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    8c90:	ldr	r3, [r1, #0]
    8c92:	bic.w	r3, r3, #8
    8c96:	str	r3, [r1, #0]
	#endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8c98:	ldr	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8c9a:	bic.w	r3, r3, #1044480	; 0xff000
    8c9e:	bic.w	r3, r3, #4080	; 0xff0
    8ca2:	subs	r2, #1
    8ca4:	orr.w	r3, r3, #917504	; 0xe0000
    8ca8:	orr.w	r3, r3, r2, lsl #4
    8cac:	str	r3, [r1, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8cae:	ldr	r3, [r0, #0]
    8cb0:	lsls	r3, r3, #28
    8cb2:	bpl.n	8cae <SdioCard::begin(SdioConfig)+0x49a>
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    8cb4:	ldr	r2, [pc, #180]	; (8d6c <SdioCard::begin(SdioConfig)+0x558>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8cb6:	ldr.w	lr, [pc, #160]	; 8d58 <SdioCard::begin(SdioConfig)+0x544>
  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    8cba:	ldr	r3, [r2, #0]
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8cbc:	ldr	r6, [pc, #156]	; (8d5c <SdioCard::begin(SdioConfig)+0x548>)
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8cbe:	ldr	r5, [pc, #160]	; (8d60 <SdioCard::begin(SdioConfig)+0x54c>)
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8cc0:	ldr	r4, [pc, #144]	; (8d54 <SdioCard::begin(SdioConfig)+0x540>)
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8cc2:	ldr	r0, [pc, #160]	; (8d64 <SdioCard::begin(SdioConfig)+0x550>)
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8cc4:	ldr	r1, [pc, #160]	; (8d68 <SdioCard::begin(SdioConfig)+0x554>)
  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    8cc6:	orr.w	r3, r3, #8
    8cca:	str	r3, [r2, #0]
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8ccc:	movw	r3, #1091	; 0x443
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8cd0:	mov.w	r2, #1088	; 0x440
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8cd4:	str.w	r3, [lr]
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8cd8:	str	r3, [r6, #0]
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8cda:	str	r2, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
    8cdc:	movs	r2, #1
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8cde:	str	r3, [r4, #0]
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8ce0:	str	r3, [r0, #0]
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8ce2:	str	r3, [r1, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
    8ce4:	strb	r2, [r7, #0]
  return true;
    8ce6:	b.n	8982 <SdioCard::begin(SdioConfig)+0x16e>
  
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) //|| defined(__IMXRT1052__)
  // Determine if High Speed mode is supported and set frequency.
	  uint8_t status[64];
	  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
		  cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8ce8:	add	r1, sp, #8
    8cea:	ldr	r0, [pc, #140]	; (8d78 <SdioCard::begin(SdioConfig)+0x564>)
    8cec:	bl	809c <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
  
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) //|| defined(__IMXRT1052__)
  // Determine if High Speed mode is supported and set frequency.
	  uint8_t status[64];
	  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8cf0:	cmp	r0, #0
    8cf2:	beq.n	8c5c <SdioCard::begin(SdioConfig)+0x448>
		  cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8cf4:	ldrb.w	r3, [sp, #24]
    8cf8:	and.w	r3, r3, #15
    8cfc:	cmp	r3, #1
    8cfe:	bne.n	8c5c <SdioCard::begin(SdioConfig)+0x448>
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8d00:	ldr	r2, [pc, #80]	; (8d54 <SdioCard::begin(SdioConfig)+0x540>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8d02:	ldr	r6, [pc, #84]	; (8d58 <SdioCard::begin(SdioConfig)+0x544>)
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8d04:	ldr	r5, [pc, #84]	; (8d5c <SdioCard::begin(SdioConfig)+0x548>)
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8d06:	ldr	r4, [pc, #88]	; (8d60 <SdioCard::begin(SdioConfig)+0x54c>)
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8d08:	ldr	r0, [pc, #88]	; (8d64 <SdioCard::begin(SdioConfig)+0x550>)
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8d0a:	ldr	r1, [pc, #92]	; (8d68 <SdioCard::begin(SdioConfig)+0x554>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8d0c:	movw	r3, #259	; 0x103
    8d10:	str	r3, [r6, #0]
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8d12:	str	r3, [r5, #0]
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8d14:	str	r3, [r4, #0]
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8d16:	str	r3, [r2, #0]
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8d18:	str	r3, [r0, #0]
	
  while ((f_pll/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    8d1a:	movs	r2, #2
	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8d1c:	str	r3, [r1, #0]
    8d1e:	b.n	8c7a <SdioCard::begin(SdioConfig)+0x466>
    8d20:	.word	0x400b1010
    8d24:	.word	0x20020388
    8d28:	.word	0x09090000
    8d2c:	.word	0x400b1014
    8d30:	.word	0x400b1018
    8d34:	.word	0x0a090000
    8d38:	.word	0x20020368
    8d3c:	.word	0x071b0000
    8d40:	.word	0x20020380
    8d44:	.word	0x371a0000
    8d48:	.word	0x061a0000
    8d4c:	.word	0x400b1028
    8d50:	.word	0x400b1044
    8d54:	.word	0x4004d00c
    8d58:	.word	0x4004d000
    8d5c:	.word	0x4004d004
    8d60:	.word	0x4004d008
    8d64:	.word	0x4004d010
    8d68:	.word	0x4004d014
    8d6c:	.word	0x400b102c
    8d70:	.word	0x05b8d800
    8d74:	.word	0x400b1024
    8d78:	.word	0x80fffff1
    8d7c:	.word	0x20020390
    8d80:	.word	0x400b101c

00008d84 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    8d84:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DBG_IRQSTAT();
    8d88:	ldr	r4, [pc, #376]	; (8f04 <SdioCard::readData(unsigned char*)+0x180>)
    8d8a:	ldr	r3, [r4, #0]
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    8d8c:	mov	r6, r1
  DBG_IRQSTAT();
    8d8e:	cmp	r3, #0
    8d90:	bne.w	8ed2 <SdioCard::readData(unsigned char*)+0x14e>
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    8d94:	ldr	r3, [pc, #368]	; (8f08 <SdioCard::readData(unsigned char*)+0x184>)
    8d96:	ldr	r3, [r3, #0]
    8d98:	lsls	r2, r3, #22
    8d9a:	bmi.n	8dca <SdioCard::readData(unsigned char*)+0x46>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8d9c:	ldr	r3, [pc, #364]	; (8f0c <SdioCard::readData(unsigned char*)+0x188>)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    8d9e:	ldr	r1, [pc, #368]	; (8f10 <SdioCard::readData(unsigned char*)+0x18c>)
//-----------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8da0:	ldr	r2, [r3, #0]
    8da2:	bic.w	r2, r2, #65536	; 0x10000
    8da6:	str	r2, [r3, #0]
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    8da8:	ldr	r2, [r1, #0]
    8daa:	lsrs	r2, r2, #16
    8dac:	lsls	r2, r2, #16
    8dae:	cmp.w	r2, #65536	; 0x10000
    8db2:	beq.w	8ef8 <SdioCard::readData(unsigned char*)+0x174>
    // Don't stop at sector gap if last sector.  Allows auto CMD12.
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    } else {
      noInterrupts();
    8db6:	cpsid	i
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8db8:	ldr	r2, [r3, #0]
    8dba:	orr.w	r2, r2, #131072	; 0x20000
    8dbe:	str	r2, [r3, #0]
      SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8dc0:	ldr	r2, [r3, #0]
    8dc2:	orr.w	r2, r2, #65536	; 0x10000
    8dc6:	str	r2, [r3, #0]
      interrupts();
    8dc8:	cpsie	i
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8dca:	bl	9d64 <micros>
static bool isBusyDMA() {
  return m_dmaBusy;
}
//-----------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    8dce:	ldr	r5, [pc, #312]	; (8f08 <SdioCard::readData(unsigned char*)+0x184>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8dd0:	ldr.w	r8, [pc, #324]	; 8f18 <SdioCard::readData(unsigned char*)+0x194>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8dd4:	mov	r7, r0
    8dd6:	b.n	8de2 <SdioCard::readData(unsigned char*)+0x5e>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8dd8:	bl	9d64 <micros>
    8ddc:	subs	r0, r0, r7
    8dde:	cmp	r0, r8
    8de0:	bhi.n	8eaa <SdioCard::readData(unsigned char*)+0x126>
static bool isBusyDMA() {
  return m_dmaBusy;
}
//-----------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    8de2:	ldr	r0, [r5, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8de4:	ands.w	r4, r0, #2048	; 0x800
    8de8:	beq.n	8dd8 <SdioCard::readData(unsigned char*)+0x54>
*/
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    8dea:	ldr	r0, [pc, #284]	; (8f08 <SdioCard::readData(unsigned char*)+0x184>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    8dec:	ldr	r1, [pc, #292]	; (8f14 <SdioCard::readData(unsigned char*)+0x190>)
    8dee:	add.w	r2, r6, #64	; 0x40
    8df2:	add.w	r6, r6, #576	; 0x240
*/
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    8df6:	ldr	r3, [r0, #0]
    8df8:	lsls	r3, r3, #20
    8dfa:	bpl.n	8df6 <SdioCard::readData(unsigned char*)+0x72>
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    8dfc:	ldr	r3, [r1, #0]
    8dfe:	str.w	r3, [r2, #-64]
    8e02:	ldr	r3, [r1, #0]
    8e04:	str.w	r3, [r2, #-60]
    8e08:	ldr	r3, [r1, #0]
    8e0a:	str.w	r3, [r2, #-56]
    8e0e:	ldr	r3, [r1, #0]
    8e10:	str.w	r3, [r2, #-52]
    8e14:	ldr	r3, [r1, #0]
    8e16:	str.w	r3, [r2, #-48]
    8e1a:	ldr	r3, [r1, #0]
    8e1c:	str.w	r3, [r2, #-44]
    8e20:	ldr	r3, [r1, #0]
    8e22:	str.w	r3, [r2, #-40]
    8e26:	ldr	r3, [r1, #0]
    8e28:	str.w	r3, [r2, #-36]
    8e2c:	ldr	r3, [r1, #0]
    8e2e:	str.w	r3, [r2, #-32]
    8e32:	ldr	r3, [r1, #0]
    8e34:	str.w	r3, [r2, #-28]
    8e38:	ldr	r3, [r1, #0]
    8e3a:	str.w	r3, [r2, #-24]
    8e3e:	ldr	r3, [r1, #0]
    8e40:	str.w	r3, [r2, #-20]
    8e44:	ldr	r3, [r1, #0]
    8e46:	str.w	r3, [r2, #-16]
    8e4a:	ldr	r3, [r1, #0]
    8e4c:	str.w	r3, [r2, #-12]
    8e50:	ldr	r3, [r1, #0]
    8e52:	str.w	r3, [r2, #-8]
    8e56:	ldr	r3, [r1, #0]
    8e58:	str.w	r3, [r2, #-4]
    8e5c:	adds	r2, #64	; 0x40
													);
*/
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8e5e:	cmp	r2, r6
    8e60:	bne.n	8df6 <SdioCard::readData(unsigned char*)+0x72>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8e62:	bl	9d64 <micros>
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8e66:	ldr	r5, [pc, #156]	; (8f04 <SdioCard::readData(unsigned char*)+0x180>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8e68:	ldr	r7, [pc, #172]	; (8f18 <SdioCard::readData(unsigned char*)+0x194>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8e6a:	mov	r6, r0
    8e6c:	b.n	8e78 <SdioCard::readData(unsigned char*)+0xf4>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8e6e:	bl	9d64 <micros>
    8e72:	subs	r0, r0, r6
    8e74:	cmp	r0, r7
    8e76:	bhi.n	8ebe <SdioCard::readData(unsigned char*)+0x13a>
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8e78:	ldr	r3, [r5, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8e7a:	ldr	r4, [pc, #160]	; (8f1c <SdioCard::readData(unsigned char*)+0x198>)
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8e7c:	ldr	r2, [pc, #132]	; (8f04 <SdioCard::readData(unsigned char*)+0x180>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8e7e:	ands	r4, r3
    8e80:	cmp	r4, #0
    8e82:	beq.n	8e6e <SdioCard::readData(unsigned char*)+0xea>
//	Serial.println(";");
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    8e84:	ldr	r1, [pc, #152]	; (8f20 <SdioCard::readData(unsigned char*)+0x19c>)
    8e86:	ldr	r3, [r2, #0]
    8e88:	str	r3, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    8e8a:	ldr	r3, [r1, #0]
    8e8c:	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8e8e:	ldr	r3, [r1, #0]
    8e90:	ands.w	r0, r3, #2
    8e94:	beq.n	8ea6 <SdioCard::readData(unsigned char*)+0x122>
    8e96:	ldr	r3, [r1, #0]
    8e98:	ldr	r0, [pc, #136]	; (8f24 <SdioCard::readData(unsigned char*)+0x1a0>)
    8e9a:	ands	r0, r3
    8e9c:	clz	r0, r0
    8ea0:	lsrs	r0, r0, #5
    8ea2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
    8ea6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8eaa:	ldr	r1, [pc, #124]	; (8f28 <SdioCard::readData(unsigned char*)+0x1a4>)
  m_errorLine = line;
    8eac:	ldr	r3, [pc, #124]	; (8f2c <SdioCard::readData(unsigned char*)+0x1a8>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8eae:	movs	r5, #25
  m_errorLine = line;
    8eb0:	movw	r2, #1124	; 0x464
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8eb4:	strb	r5, [r1, #0]
													SDHC_PRSSTAT & SDHC_PRSSTAT_HCKOFF,
													SDHC_PRSSTAT & SDHC_PRSSTAT_SDOFF
													);
*/
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    8eb6:	mov	r0, r4
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8eb8:	str	r2, [r3, #0]
													SDHC_PRSSTAT & SDHC_PRSSTAT_HCKOFF,
													SDHC_PRSSTAT & SDHC_PRSSTAT_SDOFF
													);
*/
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    8eba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ebe:	ldr	r1, [pc, #104]	; (8f28 <SdioCard::readData(unsigned char*)+0x1a4>)
  m_errorLine = line;
    8ec0:	ldr	r3, [pc, #104]	; (8f2c <SdioCard::readData(unsigned char*)+0x1a8>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ec2:	movs	r5, #28
  m_errorLine = line;
    8ec4:	movw	r2, #1138	; 0x472
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ec8:	strb	r5, [r1, #0]
    }
    p32 += FIFO_WML;
//	Serial.println(";");
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    8eca:	mov	r0, r4
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8ecc:	str	r2, [r3, #0]
    }
    p32 += FIFO_WML;
//	Serial.println(";");
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    8ece:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8ed2:	movw	r1, #1101	; 0x44d
    8ed6:	ldr	r0, [pc, #88]	; (8f30 <SdioCard::readData(unsigned char*)+0x1ac>)
    8ed8:	bl	af60 <Print::print(long)>
    8edc:	movs	r1, #9
    8ede:	ldr	r0, [pc, #84]	; (8f34 <SdioCard::readData(unsigned char*)+0x1b0>)
    8ee0:	bl	96c8 <usb_serial_write>
  memcpy(csd, &m_csd, 16);
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
  DBG_IRQSTAT();
    8ee4:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    8ee6:	ldr	r0, [pc, #72]	; (8f30 <SdioCard::readData(unsigned char*)+0x1ac>)
    8ee8:	movs	r3, #0
    8eea:	movs	r2, #16
    8eec:	bl	b05c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    8ef0:	ldr	r0, [pc, #60]	; (8f30 <SdioCard::readData(unsigned char*)+0x1ac>)
    8ef2:	bl	b010 <Print::println()>
    8ef6:	b.n	8d94 <SdioCard::readData(unsigned char*)+0x10>
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    // Don't stop at sector gap if last sector.  Allows auto CMD12.
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8ef8:	ldr	r2, [r3, #0]
    8efa:	orr.w	r2, r2, #131072	; 0x20000
    8efe:	str	r2, [r3, #0]
    8f00:	b.n	8dca <SdioCard::readData(unsigned char*)+0x46>
    8f02:	nop
    8f04:	.word	0x400b1030
    8f08:	.word	0x400b1024
    8f0c:	.word	0x400b1028
    8f10:	.word	0x400b1004
    8f14:	.word	0x400b1020
    8f18:	.word	0x000f4240
    8f1c:	.word	0x117f0002
    8f20:	.word	0x20020384
    8f24:	.word	0x117f0000
    8f28:	.word	0x1fff088c
    8f2c:	.word	0x20020380
    8f30:	.word	0x1fff0898
    8f34:	.word	0x00013ee0

00008f38 <SdioCard::readStart(unsigned long, unsigned long)>:
  // K66/K65 Errata - SDHC: Does not support Infinite Sector Transfer Mode.
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector, uint32_t count) {
    8f38:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DBG_IRQSTAT();
    8f3c:	ldr	r4, [pc, #228]	; (9024 <SdioCard::readStart(unsigned long, unsigned long)+0xec>)
    8f3e:	ldr	r3, [r4, #0]
  // K66/K65 Errata - SDHC: Does not support Infinite Sector Transfer Mode.
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector, uint32_t count) {
    8f40:	mov	r9, r1
    8f42:	mov	r7, r2
  DBG_IRQSTAT();
    8f44:	cmp	r3, #0
    8f46:	bne.n	8fde <SdioCard::readStart(unsigned long, unsigned long)+0xa6>
  if (count > 0XFFFF) {
    8f48:	cmp.w	r7, #65536	; 0x10000
    8f4c:	bcc.n	8f62 <SdioCard::readStart(unsigned long, unsigned long)+0x2a>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f4e:	ldr	r1, [pc, #216]	; (9028 <SdioCard::readStart(unsigned long, unsigned long)+0xf0>)
  m_errorLine = line;
    8f50:	ldr	r3, [pc, #216]	; (902c <SdioCard::readStart(unsigned long, unsigned long)+0xf4>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f52:	movs	r0, #27
  m_errorLine = line;
    8f54:	movw	r2, #1159	; 0x487
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f58:	strb	r0, [r1, #0]
  m_errorLine = line;
    8f5a:	str	r2, [r3, #0]
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector, uint32_t count) {
  DBG_IRQSTAT();
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_READ_START);
    8f5c:	movs	r0, #0
    8f5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    8f62:	ldr.w	sl, [pc, #244]	; 9058 <SdioCard::readStart(unsigned long, unsigned long)+0x120>
    8f66:	ldr	r3, [pc, #200]	; (9030 <SdioCard::readStart(unsigned long, unsigned long)+0xf8>)
    8f68:	str.w	r3, [sl]
  uint32_t m = micros();
    8f6c:	bl	9d64 <micros>
    8f70:	ldr	r4, [pc, #192]	; (9034 <SdioCard::readStart(unsigned long, unsigned long)+0xfc>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8f72:	ldr.w	r8, [pc, #232]	; 905c <SdioCard::readStart(unsigned long, unsigned long)+0x124>
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8f76:	ldr	r6, [pc, #192]	; (9038 <SdioCard::readStart(unsigned long, unsigned long)+0x100>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
    8f78:	mov	r5, r0
    8f7a:	b.n	8f8a <SdioCard::readStart(unsigned long, unsigned long)+0x52>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8f7c:	bl	9d64 <micros>
    8f80:	subs	r0, r0, r5
    8f82:	cmp	r0, r6
    8f84:	bhi.n	900a <SdioCard::readStart(unsigned long, unsigned long)+0xd2>
      m_busyFcn = 0;
      return true;
    }
    yield();
    8f86:	bl	1724 <yield>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    8f8a:	ldr	r1, [r4, #0]
    8f8c:	ldr	r0, [pc, #172]	; (903c <SdioCard::readStart(unsigned long, unsigned long)+0x104>)
    8f8e:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8f92:	cmp	r0, #0
    8f94:	beq.n	8f7c <SdioCard::readStart(unsigned long, unsigned long)+0x44>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8f96:	ldr.w	r3, [r8]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8f9a:	lsls	r3, r3, #23
    8f9c:	bpl.n	8f7c <SdioCard::readStart(unsigned long, unsigned long)+0x44>
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    8f9e:	movs	r3, #0
    return sdError(SD_CARD_ERROR_READ_START);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    8fa0:	cmp	r7, #1
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    8fa2:	str.w	r3, [sl]
    return sdError(SD_CARD_ERROR_READ_START);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    8fa6:	bls.n	8fb2 <SdioCard::readStart(unsigned long, unsigned long)+0x7a>
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8fa8:	ldr	r2, [pc, #148]	; (9040 <SdioCard::readStart(unsigned long, unsigned long)+0x108>)
    8faa:	ldr	r3, [r2, #0]
    8fac:	orr.w	r3, r3, #65536	; 0x10000
    8fb0:	str	r3, [r2, #0]
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8fb2:	ldr	r3, [pc, #144]	; (9044 <SdioCard::readStart(unsigned long, unsigned long)+0x10c>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    8fb4:	ldr	r2, [pc, #144]	; (9048 <SdioCard::readStart(unsigned long, unsigned long)+0x110>)
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8fb6:	ldrb	r3, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    8fb8:	lsls	r7, r7, #16
    8fba:	orr.w	r7, r7, #512	; 0x200
    8fbe:	str	r7, [r2, #0]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8fc0:	cbz	r3, 9004 <SdioCard::readStart(unsigned long, unsigned long)+0xcc>
    8fc2:	mov	r1, r9
    8fc4:	ldr	r0, [pc, #132]	; (904c <SdioCard::readStart(unsigned long, unsigned long)+0x114>)
    8fc6:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    8fca:	cbnz	r0, 8fda <SdioCard::readStart(unsigned long, unsigned long)+0xa2>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fcc:	ldr	r1, [pc, #88]	; (9028 <SdioCard::readStart(unsigned long, unsigned long)+0xf0>)
  m_errorLine = line;
    8fce:	ldr	r3, [pc, #92]	; (902c <SdioCard::readStart(unsigned long, unsigned long)+0xf4>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fd0:	movs	r4, #12
  m_errorLine = line;
    8fd2:	movw	r2, #1169	; 0x491
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fd6:	strb	r4, [r1, #0]
  m_errorLine = line;
    8fd8:	str	r2, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    8fda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8fde:	movw	r1, #1157	; 0x485
    8fe2:	ldr	r0, [pc, #108]	; (9050 <SdioCard::readStart(unsigned long, unsigned long)+0x118>)
    8fe4:	bl	af60 <Print::print(long)>
    8fe8:	movs	r1, #9
    8fea:	ldr	r0, [pc, #104]	; (9054 <SdioCard::readStart(unsigned long, unsigned long)+0x11c>)
    8fec:	bl	96c8 <usb_serial_write>
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector, uint32_t count) {
  DBG_IRQSTAT();
    8ff0:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    8ff2:	ldr	r0, [pc, #92]	; (9050 <SdioCard::readStart(unsigned long, unsigned long)+0x118>)
    8ff4:	movs	r3, #0
    8ff6:	movs	r2, #16
    8ff8:	bl	b05c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    8ffc:	ldr	r0, [pc, #80]	; (9050 <SdioCard::readStart(unsigned long, unsigned long)+0x118>)
    8ffe:	bl	b010 <Print::println()>
    9002:	b.n	8f48 <SdioCard::readStart(unsigned long, unsigned long)+0x10>
  }
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9004:	mov.w	r1, r9, lsl #9
    9008:	b.n	8fc4 <SdioCard::readStart(unsigned long, unsigned long)+0x8c>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    900a:	ldr	r1, [pc, #28]	; (9028 <SdioCard::readStart(unsigned long, unsigned long)+0xf0>)
  m_errorLine = line;
    900c:	ldr	r3, [pc, #28]	; (902c <SdioCard::readStart(unsigned long, unsigned long)+0xf4>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    900e:	movs	r4, #10
  m_errorLine = line;
    9010:	movw	r2, #1162	; 0x48a
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    9014:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9016:	strb	r4, [r1, #0]
  m_errorLine = line;
    9018:	str	r2, [r3, #0]
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    901a:	str.w	r0, [sl]
  DBG_IRQSTAT();
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_READ_START);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    901e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9022:	nop
    9024:	.word	0x400b1030
    9028:	.word	0x1fff088c
    902c:	.word	0x20020380
    9030:	.word	0x00008051
    9034:	.word	0x20020388
    9038:	.word	0x000f4240
    903c:	.word	0x0d1a0000
    9040:	.word	0x400b1028
    9044:	.word	0x20020379
    9048:	.word	0x400b1004
    904c:	.word	0x123a0036
    9050:	.word	0x1fff0898
    9054:	.word	0x00013ee0
    9058:	.word	0x200203a4
    905c:	.word	0x400b1010

00009060 <SdioCard::readSector(unsigned long, unsigned char*)>:
//-----------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//-----------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9060:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    9062:	ldrb	r3, [r0, #12]
    9064:	lsls	r4, r3, #31
//-----------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//-----------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9066:	sub.w	sp, sp, #512	; 0x200
    906a:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    906c:	bpl.n	9094 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    906e:	lsls	r3, r2, #30
    9070:	beq.n	90ea <SdioCard::readSector(unsigned long, unsigned char*)+0x8a>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9072:	mov	r2, sp
    9074:	movs	r3, #1
    9076:	ldr	r0, [pc, #196]	; (913c <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    9078:	bl	82b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    907c:	cmp	r0, #0
    907e:	beq.n	90f6 <SdioCard::readSector(unsigned long, unsigned char*)+0x96>
      return sdError(SD_CARD_ERROR_CMD17); 
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    9080:	mov	r1, sp
    9082:	mov	r0, r6
    9084:	mov.w	r2, #512	; 0x200
    9088:	bl	94c8 <memcpy>
    m_curSector++;
    if (m_curSector >= m_limitSector) {
      m_curState = IDLE_STATE;
    }
  }
  return true;
    908c:	movs	r0, #1
}
    908e:	add.w	sp, sp, #512	; 0x200
    9092:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    9094:	ldrb	r3, [r0, #13]
    9096:	cmp	r3, #1
    9098:	mov	r4, r0
    909a:	mov	r5, r1
    909c:	beq.n	910c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      if (!syncDevice()) {
    909e:	ldr	r2, [r0, #0]
    90a0:	ldr	r1, [pc, #156]	; (9140 <SdioCard::readSector(unsigned long, unsigned char*)+0xe0>)
    90a2:	ldr	r2, [r2, #20]
    90a4:	cmp	r2, r1
    90a6:	bne.n	911c <SdioCard::readSector(unsigned long, unsigned char*)+0xbc>
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    if (!SdioCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    90a8:	cmp	r3, #2
    90aa:	beq.n	912c <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      } 
      m_limitSector = (sector + MAX_SDHC_COUNT) & ~RU_MASK;
    90ac:	add.w	r2, r5, #65280	; 0xff00
    90b0:	adds	r2, #255	; 0xff
    90b2:	bic.w	r2, r2, #1020	; 0x3fc
    90b6:	bic.w	r2, r2, #3
    90ba:	str	r2, [r4, #8]
      if (!SdioCard::readStart(sector, m_limitSector - sector)) {
    90bc:	mov	r1, r5
    90be:	subs	r2, r2, r5
    90c0:	mov	r0, r4
    90c2:	bl	8f38 <SdioCard::readStart(unsigned long, unsigned long)>
    90c6:	cbz	r0, 9124 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    90c8:	movs	r3, #1
      } 
      m_limitSector = (sector + MAX_SDHC_COUNT) & ~RU_MASK;
      if (!SdioCard::readStart(sector, m_limitSector - sector)) {
        return false;
      }
      m_curSector = sector;
    90ca:	str	r5, [r4, #4]
      m_curState = READ_STATE;
    90cc:	strb	r3, [r4, #13]
    }
    if (!SdioCard::readData(dst)) {
    90ce:	mov	r1, r6
    90d0:	mov	r0, r4
    90d2:	bl	8d84 <SdioCard::readData(unsigned char*)>
    90d6:	cbz	r0, 9124 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      return false;
    }
    m_curSector++;
    90d8:	ldr	r3, [r4, #4]
    if (m_curSector >= m_limitSector) {
    90da:	ldr	r2, [r4, #8]
      m_curState = READ_STATE;
    }
    if (!SdioCard::readData(dst)) {
      return false;
    }
    m_curSector++;
    90dc:	adds	r3, #1
    if (m_curSector >= m_limitSector) {
    90de:	cmp	r3, r2
      m_curState = READ_STATE;
    }
    if (!SdioCard::readData(dst)) {
      return false;
    }
    m_curSector++;
    90e0:	str	r3, [r4, #4]
    if (m_curSector >= m_limitSector) {
    90e2:	bcc.n	9106 <SdioCard::readSector(unsigned long, unsigned char*)+0xa6>
      m_curState = IDLE_STATE;
    90e4:	movs	r3, #0
    90e6:	strb	r3, [r4, #13]
    90e8:	b.n	9106 <SdioCard::readSector(unsigned long, unsigned char*)+0xa6>
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    90ea:	movs	r3, #1
    90ec:	ldr	r0, [pc, #76]	; (913c <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    90ee:	bl	82b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    90f2:	cmp	r0, #0
    90f4:	bne.n	908c <SdioCard::readSector(unsigned long, unsigned char*)+0x2c>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    90f6:	ldr	r1, [pc, #76]	; (9144 <SdioCard::readSector(unsigned long, unsigned char*)+0xe4>)
  m_errorLine = line;
    90f8:	ldr	r3, [pc, #76]	; (9148 <SdioCard::readSector(unsigned long, unsigned char*)+0xe8>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    90fa:	movs	r0, #11
  m_errorLine = line;
    90fc:	movw	r2, #1039	; 0x40f
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9100:	strb	r0, [r1, #0]
  m_errorLine = line;
    9102:	str	r2, [r3, #0]
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17); 
    9104:	movs	r0, #0
    if (m_curSector >= m_limitSector) {
      m_curState = IDLE_STATE;
    }
  }
  return true;
}
    9106:	add.w	sp, sp, #512	; 0x200
    910a:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    910c:	ldr	r3, [r0, #4]
    910e:	cmp	r1, r3
    9110:	beq.n	90ce <SdioCard::readSector(unsigned long, unsigned char*)+0x6e>
      if (!syncDevice()) {
    9112:	ldr	r2, [r0, #0]
    9114:	ldr	r3, [pc, #40]	; (9140 <SdioCard::readSector(unsigned long, unsigned char*)+0xe0>)
    9116:	ldr	r2, [r2, #20]
    9118:	cmp	r2, r3
    911a:	beq.n	912c <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
    911c:	mov	r0, r4
    911e:	blx	r2
    9120:	cmp	r0, #0
    9122:	bne.n	90ac <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
        return false;
    9124:	movs	r0, #0
    if (m_curSector >= m_limitSector) {
      m_curState = IDLE_STATE;
    }
  }
  return true;
}
    9126:	add.w	sp, sp, #512	; 0x200
    912a:	pop	{r4, r5, r6, pc}
  return statusCMD13();
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    912c:	movs	r3, #0
    912e:	strb	r3, [r4, #13]
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    9130:	bl	86fc <transferStop()>
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    if (!SdioCard::readStop()) {
    9134:	cmp	r0, #0
    9136:	bne.n	90ac <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
    9138:	b.n	9124 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
    913a:	nop
    913c:	.word	0x113a0011
    9140:	.word	0x00008801
    9144:	.word	0x1fff088c
    9148:	.word	0x20020380

0000914c <SdioCard::writeStart(unsigned long, unsigned long)>:
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::writeStart(uint32_t sector, uint32_t count) {
  if (count > 0XFFFF) {
    914c:	cmp.w	r2, #65536	; 0x10000
    9150:	bcs.n	91de <SdioCard::writeStart(unsigned long, unsigned long)+0x92>
  // K66/K65 Errata - SDHC: Does not support Infinite Sector Transfer Mode.
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::writeStart(uint32_t sector, uint32_t count) {
    9152:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_WRITE_START);
  }
  DBG_IRQSTAT();
    9156:	ldr	r4, [pc, #220]	; (9234 <SdioCard::writeStart(unsigned long, unsigned long)+0xe8>)
    9158:	ldr	r3, [r4, #0]
    915a:	mov	r9, r1
    915c:	mov	r7, r2
    915e:	cmp	r3, #0
    9160:	bne.n	920e <SdioCard::writeStart(unsigned long, unsigned long)+0xc2>
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    9162:	ldr.w	sl, [pc, #260]	; 9268 <SdioCard::writeStart(unsigned long, unsigned long)+0x11c>
    9166:	ldr	r3, [pc, #208]	; (9238 <SdioCard::writeStart(unsigned long, unsigned long)+0xec>)
    9168:	str.w	r3, [sl]
  uint32_t m = micros();
    916c:	bl	9d64 <micros>
    9170:	ldr	r4, [pc, #200]	; (923c <SdioCard::writeStart(unsigned long, unsigned long)+0xf0>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    9172:	ldr.w	r8, [pc, #248]	; 926c <SdioCard::writeStart(unsigned long, unsigned long)+0x120>
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9176:	ldr	r6, [pc, #200]	; (9240 <SdioCard::writeStart(unsigned long, unsigned long)+0xf4>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
    9178:	mov	r5, r0
    917a:	b.n	918a <SdioCard::writeStart(unsigned long, unsigned long)+0x3e>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    917c:	bl	9d64 <micros>
    9180:	subs	r0, r0, r5
    9182:	cmp	r0, r6
    9184:	bhi.n	91f0 <SdioCard::writeStart(unsigned long, unsigned long)+0xa4>
      m_busyFcn = 0;
      return true;
    }
    yield();
    9186:	bl	1724 <yield>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    918a:	ldr	r1, [r4, #0]
    918c:	ldr	r0, [pc, #180]	; (9244 <SdioCard::writeStart(unsigned long, unsigned long)+0xf8>)
    918e:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    9192:	cmp	r0, #0
    9194:	beq.n	917c <SdioCard::writeStart(unsigned long, unsigned long)+0x30>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    9196:	ldr.w	r3, [r8]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    919a:	lsls	r3, r3, #23
    919c:	bpl.n	917c <SdioCard::writeStart(unsigned long, unsigned long)+0x30>
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    919e:	movs	r3, #0
  }
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    91a0:	cmp	r7, #1
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    91a2:	str.w	r3, [sl]
  }
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    91a6:	bls.n	91b2 <SdioCard::writeStart(unsigned long, unsigned long)+0x66>
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    91a8:	ldr	r2, [pc, #156]	; (9248 <SdioCard::writeStart(unsigned long, unsigned long)+0xfc>)
    91aa:	ldr	r3, [r2, #0]
    91ac:	orr.w	r3, r3, #65536	; 0x10000
    91b0:	str	r3, [r2, #0]
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    91b2:	ldr	r3, [pc, #152]	; (924c <SdioCard::writeStart(unsigned long, unsigned long)+0x100>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    91b4:	ldr	r2, [pc, #152]	; (9250 <SdioCard::writeStart(unsigned long, unsigned long)+0x104>)

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    91b6:	ldrb	r3, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    91b8:	lsls	r7, r7, #16
    91ba:	orr.w	r7, r7, #512	; 0x200
    91be:	str	r7, [r2, #0]

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    91c0:	cbz	r3, 9208 <SdioCard::writeStart(unsigned long, unsigned long)+0xbc>
    91c2:	mov	r1, r9
    91c4:	ldr	r0, [pc, #140]	; (9254 <SdioCard::writeStart(unsigned long, unsigned long)+0x108>)
    91c6:	bl	7f88 <cardCommand(unsigned long, unsigned long)>
    91ca:	cbnz	r0, 91da <SdioCard::writeStart(unsigned long, unsigned long)+0x8e>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91cc:	ldr	r1, [pc, #136]	; (9258 <SdioCard::writeStart(unsigned long, unsigned long)+0x10c>)
  m_errorLine = line;
    91ce:	ldr	r3, [pc, #140]	; (925c <SdioCard::writeStart(unsigned long, unsigned long)+0x110>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91d0:	movs	r4, #14
  m_errorLine = line;
    91d2:	movw	r2, #1315	; 0x523
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91d6:	strb	r4, [r1, #0]
  m_errorLine = line;
    91d8:	str	r2, [r3, #0]

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    91da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91de:	ldr	r1, [pc, #120]	; (9258 <SdioCard::writeStart(unsigned long, unsigned long)+0x10c>)
  m_errorLine = line;
    91e0:	ldr	r3, [pc, #120]	; (925c <SdioCard::writeStart(unsigned long, unsigned long)+0x110>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91e2:	movs	r0, #32
  m_errorLine = line;
    91e4:	movw	r2, #1303	; 0x517
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91e8:	strb	r0, [r1, #0]
  m_errorLine = line;
    91ea:	str	r2, [r3, #0]
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::writeStart(uint32_t sector, uint32_t count) {
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_WRITE_START);
    91ec:	movs	r0, #0

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    91ee:	bx	lr
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91f0:	ldr	r1, [pc, #100]	; (9258 <SdioCard::writeStart(unsigned long, unsigned long)+0x10c>)
  m_errorLine = line;
    91f2:	ldr	r3, [pc, #104]	; (925c <SdioCard::writeStart(unsigned long, unsigned long)+0x110>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91f4:	movs	r4, #10
  m_errorLine = line;
    91f6:	movw	r2, #1307	; 0x51b
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    91fa:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91fc:	strb	r4, [r1, #0]
  m_errorLine = line;
    91fe:	str	r2, [r3, #0]
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    9200:	str.w	r0, [sl]
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_WRITE_START);
  }
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    9204:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9208:	mov.w	r1, r9, lsl #9
    920c:	b.n	91c4 <SdioCard::writeStart(unsigned long, unsigned long)+0x78>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    920e:	movw	r1, #1305	; 0x519
    9212:	ldr	r0, [pc, #76]	; (9260 <SdioCard::writeStart(unsigned long, unsigned long)+0x114>)
    9214:	bl	af60 <Print::print(long)>
    9218:	movs	r1, #9
    921a:	ldr	r0, [pc, #72]	; (9264 <SdioCard::writeStart(unsigned long, unsigned long)+0x118>)
    921c:	bl	96c8 <usb_serial_write>
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::writeStart(uint32_t sector, uint32_t count) {
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_WRITE_START);
  }
  DBG_IRQSTAT();
    9220:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    9222:	ldr	r0, [pc, #60]	; (9260 <SdioCard::writeStart(unsigned long, unsigned long)+0x114>)
    9224:	movs	r3, #0
    9226:	movs	r2, #16
    9228:	bl	b05c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    922c:	ldr	r0, [pc, #48]	; (9260 <SdioCard::writeStart(unsigned long, unsigned long)+0x114>)
    922e:	bl	b010 <Print::println()>
    9232:	b.n	9162 <SdioCard::writeStart(unsigned long, unsigned long)+0x16>
    9234:	.word	0x400b1030
    9238:	.word	0x00008051
    923c:	.word	0x20020388
    9240:	.word	0x000f4240
    9244:	.word	0x0d1a0000
    9248:	.word	0x400b1028
    924c:	.word	0x20020379
    9250:	.word	0x400b1004
    9254:	.word	0x193a0026
    9258:	.word	0x1fff088c
    925c:	.word	0x20020380
    9260:	.word	0x1fff0898
    9264:	.word	0x00013ee0
    9268:	.word	0x200203a4
    926c:	.word	0x400b1010

00009270 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9270:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    9272:	ldrb	r3, [r0, #12]
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9274:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9276:	lsls	r2, r3, #31
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9278:	sub.w	sp, sp, #512	; 0x200
    927c:	mov	r5, r1
  if (m_sdioConfig.useDma()) {
    927e:	bpl.n	92b4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    9280:	lsls	r3, r6, #30
    9282:	beq.n	9292 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    9284:	mov	r1, r6
    9286:	mov	r0, sp
    9288:	mov.w	r2, #512	; 0x200
    928c:	bl	94c8 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    9290:	mov	r6, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    9292:	mov	r2, r6
    9294:	mov	r1, r5
    9296:	movs	r3, #1
    9298:	ldr	r0, [pc, #156]	; (9338 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>)
    929a:	bl	82b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    929e:	cbnz	r0, 92ae <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92a0:	ldr	r1, [pc, #152]	; (933c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xcc>)
  m_errorLine = line;
    92a2:	ldr	r3, [pc, #156]	; (9340 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd0>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92a4:	movs	r4, #13
  m_errorLine = line;
    92a6:	movw	r2, #1213	; 0x4bd
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92aa:	strb	r4, [r1, #0]
  m_errorLine = line;
    92ac:	str	r2, [r3, #0]
    if (m_curSector >= m_limitSector) {
      m_curState = IDLE_STATE;
    }
  }
  return true;
}
    92ae:	add.w	sp, sp, #512	; 0x200
    92b2:	pop	{r4, r5, r6, pc}
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    92b4:	ldrb	r3, [r0, #13]
    92b6:	cmp	r3, #2
    92b8:	mov	r4, r0
    92ba:	beq.n	930a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9a>
      if (!syncDevice()) {
    92bc:	ldr	r2, [r0, #0]
    92be:	ldr	r1, [pc, #132]	; (9344 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd4>)
    92c0:	ldr	r2, [r2, #20]
    92c2:	cmp	r2, r1
    92c4:	bne.n	931a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xaa>
uint32_t SdioCard::status() {
  return statusCMD13();
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    92c6:	subs	r3, #1
    92c8:	cmp	r3, #1
    92ca:	bls.n	932a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      m_limitSector = (sector + MAX_SDHC_COUNT) & ~RU_MASK;
    92cc:	add.w	r2, r5, #65280	; 0xff00
    92d0:	adds	r2, #255	; 0xff
    92d2:	bic.w	r2, r2, #1020	; 0x3fc
    92d6:	bic.w	r2, r2, #3
    92da:	str	r2, [r4, #8]
      if (!SdioCard::writeStart(sector , m_limitSector - sector)) {
    92dc:	mov	r1, r5
    92de:	subs	r2, r2, r5
    92e0:	mov	r0, r4
    92e2:	bl	914c <SdioCard::writeStart(unsigned long, unsigned long)>
    92e6:	cbz	r0, 9322 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    92e8:	movs	r3, #2
      }
      m_limitSector = (sector + MAX_SDHC_COUNT) & ~RU_MASK;
      if (!SdioCard::writeStart(sector , m_limitSector - sector)) {
        return false;
      }
      m_curSector = sector;
    92ea:	str	r5, [r4, #4]
      m_curState = WRITE_STATE;
    92ec:	strb	r3, [r4, #13]
    }
    if (!SdioCard::writeData(src)) {
    92ee:	mov	r1, r6
    92f0:	mov	r0, r4
    92f2:	bl	8514 <SdioCard::writeData(unsigned char const*)>
    92f6:	cbz	r0, 9322 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      return false;
    }
    m_curSector++;
    92f8:	ldr	r3, [r4, #4]
    if (m_curSector >= m_limitSector) {
    92fa:	ldr	r2, [r4, #8]
      m_curState = WRITE_STATE;
    }
    if (!SdioCard::writeData(src)) {
      return false;
    }
    m_curSector++;
    92fc:	adds	r3, #1
    if (m_curSector >= m_limitSector) {
    92fe:	cmp	r3, r2
      m_curState = WRITE_STATE;
    }
    if (!SdioCard::writeData(src)) {
      return false;
    }
    m_curSector++;
    9300:	str	r3, [r4, #4]
    if (m_curSector >= m_limitSector) {
    9302:	bcc.n	92ae <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      m_curState = IDLE_STATE;
    9304:	movs	r3, #0
    9306:	strb	r3, [r4, #13]
    9308:	b.n	92ae <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    930a:	ldr	r3, [r0, #4]
    930c:	cmp	r1, r3
    930e:	beq.n	92ee <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7e>
      if (!syncDevice()) {
    9310:	ldr	r2, [r0, #0]
    9312:	ldr	r3, [pc, #48]	; (9344 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd4>)
    9314:	ldr	r2, [r2, #20]
    9316:	cmp	r2, r3
    9318:	beq.n	932a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
    931a:	mov	r0, r4
    931c:	blx	r2
    931e:	cmp	r0, #0
    9320:	bne.n	92cc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
        return false;
    9322:	movs	r0, #0
    if (m_curSector >= m_limitSector) {
      m_curState = IDLE_STATE;
    }
  }
  return true;
}
    9324:	add.w	sp, sp, #512	; 0x200
    9328:	pop	{r4, r5, r6, pc}
  return statusCMD13();
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    932a:	movs	r3, #0
    932c:	strb	r3, [r4, #13]
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    932e:	bl	86fc <transferStop()>
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    if (!SdioCard::readStop()) {
    9332:	cmp	r0, #0
    9334:	bne.n	92cc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
    9336:	b.n	9322 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
    9338:	.word	0x183a0001
    933c:	.word	0x1fff088c
    9340:	.word	0x20020380
    9344:	.word	0x00008801

00009348 <SdSpiAltDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiAltDriver::activate() {
    9348:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    934a:	ldr	r3, [r0, #0]
    934c:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    934e:	ldrb	r1, [r3, #11]
    9350:	cbz	r1, 9392 <SdSpiAltDriver::activate()+0x4a>
			__disable_irq();
    9352:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    9354:	ldrb	r1, [r3, #11]
    9356:	lsls	r0, r1, #31
    9358:	bpl.n	9368 <SdSpiAltDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    935a:	ldr	r0, [pc, #100]	; (93c0 <SdSpiAltDriver::activate()+0x78>)
    935c:	ldr	r1, [r3, #12]
    935e:	ldr	r4, [r0, #0]
    9360:	ands	r1, r4
    9362:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    9364:	str	r1, [r0, #0]
    9366:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    9368:	lsls	r4, r1, #30
    936a:	bpl.n	937a <SdSpiAltDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    936c:	ldr	r0, [pc, #84]	; (93c4 <SdSpiAltDriver::activate()+0x7c>)
    936e:	ldr	r1, [r3, #16]
    9370:	ldr	r4, [r0, #0]
    9372:	ands	r1, r4
    9374:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    9376:	str	r1, [r0, #0]
    9378:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    937a:	lsls	r0, r1, #29
    937c:	bpl.n	938c <SdSpiAltDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    937e:	ldr	r0, [pc, #72]	; (93c8 <SdSpiAltDriver::activate()+0x80>)
    9380:	ldr	r1, [r3, #20]
    9382:	ldr	r4, [r0, #0]
    9384:	ands	r1, r4
    9386:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    9388:	str	r1, [r0, #0]
    938a:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    938c:	lsls	r1, r1, #28
    938e:	bmi.n	93b0 <SdSpiAltDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    9390:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    9392:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    9394:	ldr	r1, [r3, #12]
    9396:	cmp	r1, r2
    9398:	beq.n	93aa <SdSpiAltDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    939a:	ldr	r0, [pc, #48]	; (93cc <SdSpiAltDriver::activate()+0x84>)
    939c:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    939e:	ldr	r1, [pc, #48]	; (93d0 <SdSpiAltDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    93a0:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    93a2:	orr.w	r0, r2, #1073741824	; 0x40000000
    93a6:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    93a8:	str	r1, [r3, #0]
}
    93aa:	ldr.w	r4, [sp], #4
    93ae:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    93b0:	ldr	r0, [pc, #32]	; (93d4 <SdSpiAltDriver::activate()+0x8c>)
    93b2:	ldr	r1, [r3, #24]
    93b4:	ldr	r4, [r0, #0]
    93b6:	ands	r1, r4
    93b8:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    93ba:	str	r1, [r0, #0]
    93bc:	b.n	9390 <SdSpiAltDriver::activate()+0x48>
    93be:	nop
    93c0:	.word	0xe000e180
    93c4:	.word	0xe000e184
    93c8:	.word	0xe000e188
    93cc:	.word	0x003f4001
    93d0:	.word	0x803f0000
    93d4:	.word	0xe000e18c

000093d8 <SdSpiAltDriver::deactivate()>:
  digitalWrite(m_csPin, HIGH);
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
    93d8:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    93da:	ldrb	r3, [r2, #11]
    93dc:	cbz	r3, 940c <SdSpiAltDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    93de:	lsls	r1, r3, #31
    93e0:	bpl.n	93ea <SdSpiAltDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    93e2:	ldr	r3, [pc, #44]	; (9410 <SdSpiAltDriver::deactivate()+0x38>)
    93e4:	ldr	r1, [r2, #28]
    93e6:	str	r1, [r3, #0]
    93e8:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    93ea:	lsls	r0, r3, #30
    93ec:	bpl.n	93f6 <SdSpiAltDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    93ee:	ldr	r3, [pc, #36]	; (9414 <SdSpiAltDriver::deactivate()+0x3c>)
    93f0:	ldr	r1, [r2, #32]
    93f2:	str	r1, [r3, #0]
    93f4:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    93f6:	lsls	r1, r3, #29
    93f8:	bpl.n	9402 <SdSpiAltDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    93fa:	ldr	r3, [pc, #28]	; (9418 <SdSpiAltDriver::deactivate()+0x40>)
    93fc:	ldr	r1, [r2, #36]	; 0x24
    93fe:	str	r1, [r3, #0]
    9400:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    9402:	lsls	r3, r3, #28
    9404:	bpl.n	940c <SdSpiAltDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    9406:	ldr	r3, [pc, #20]	; (941c <SdSpiAltDriver::deactivate()+0x44>)
    9408:	ldr	r2, [r2, #40]	; 0x28
    940a:	str	r2, [r3, #0]
    940c:	bx	lr
    940e:	nop
    9410:	.word	0xe000e100
    9414:	.word	0xe000e104
    9418:	.word	0xe000e108
    941c:	.word	0xe000e10c

00009420 <SdSpiAltDriver::receive()>:
//------------------------------------------------------------------------------
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
    9420:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    9422:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    9424:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    9428:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    942a:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    942c:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    942e:	ldr	r3, [r2, #44]	; 0x2c
    9430:	cmp	r3, #0
    9432:	bge.n	942e <SdSpiAltDriver::receive()+0xe>
		return port().POPR;
    9434:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    9436:	uxtb	r0, r0
    9438:	bx	lr
    943a:	nop

0000943c <SdSpiAltDriver::receive(unsigned char*, unsigned int)>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
    943c:	push	{r4, r5, r6, lr}
    943e:	mov	r5, r0
    9440:	mov	r4, r1
    9442:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, n);
    9444:	mov	r0, r1
    9446:	movs	r1, #255	; 0xff
    9448:	bl	cc4c <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    944c:	ldr	r0, [r5, #0]
    944e:	mov	r3, r6
    9450:	mov	r2, r4
    9452:	mov	r1, r4
    9454:	bl	2e60 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < n; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    9458:	movs	r0, #0
    945a:	pop	{r4, r5, r6, pc}

0000945c <SdSpiAltDriver::send(unsigned char)>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
    945c:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    945e:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    9460:	mov.w	r3, #2147483648	; 0x80000000
    9464:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    9466:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    9468:	ldr	r3, [r2, #44]	; 0x2c
    946a:	cmp	r3, #0
    946c:	bge.n	9468 <SdSpiAltDriver::send(unsigned char)+0xc>
		return port().POPR;
    946e:	ldr	r3, [r2, #56]	; 0x38
    9470:	bx	lr
    9472:	nop

00009474 <SdSpiAltDriver::send(unsigned char const*, unsigned int)>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
    9474:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < n && n <= 512) {
    9476:	subs	r5, r2, #1
    9478:	cmp.w	r5, #512	; 0x200
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
    947c:	sub.w	sp, sp, #516	; 0x204
    9480:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < n && n <= 512) {
    9482:	bcc.n	94aa <SdSpiAltDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, n);
    m_spi->transfer(tmp, n);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < n; i++) {
    9484:	cbz	r2, 94a4 <SdSpiAltDriver::send(unsigned char const*, unsigned int)+0x30>
    9486:	ldr	r2, [r0, #0]
    9488:	ldr	r2, [r2, #0]
    948a:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    948c:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    9490:	ldrb.w	r3, [r1], #1
    9494:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    9496:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    9498:	ldr	r3, [r2, #44]	; 0x2c
    949a:	cmp	r3, #0
    949c:	bge.n	9498 <SdSpiAltDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, n);
    m_spi->transfer(tmp, n);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < n; i++) {
    949e:	cmp	r1, r0
		return port().POPR;
    94a0:	ldr	r3, [r2, #56]	; 0x38
    94a2:	bne.n	9490 <SdSpiAltDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    94a4:	add.w	sp, sp, #516	; 0x204
    94a8:	pop	{r4, r5, pc}
    94aa:	mov	r5, r0
    94ac:	mov	r4, r2
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < n && n <= 512) {
    memcpy(tmp, buf, n);
    94ae:	mov	r0, sp
    94b0:	bl	94c8 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    94b4:	mov	r3, r4
    94b6:	mov	r2, sp
    94b8:	mov	r1, sp
    94ba:	ldr	r0, [r5, #0]
    94bc:	bl	2e60 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < n; i++) {
    m_spi->transfer(buf[i]);
  }
}
    94c0:	add.w	sp, sp, #516	; 0x204
    94c4:	pop	{r4, r5, pc}
    94c6:	nop

000094c8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    94c8:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    94ca:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    94ce:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    94d2:	bne.n	95b0 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    94d4:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    94d6:	bcc.n	955c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    94d8:	ldr.w	r3, [r1], #4
    94dc:	str.w	r3, [r0], #4
    94e0:	ldr.w	r3, [r1], #4
    94e4:	str.w	r3, [r0], #4
    94e8:	ldr.w	r3, [r1], #4
    94ec:	str.w	r3, [r0], #4
    94f0:	ldr.w	r3, [r1], #4
    94f4:	str.w	r3, [r0], #4
    94f8:	ldr.w	r3, [r1], #4
    94fc:	str.w	r3, [r0], #4
    9500:	ldr.w	r3, [r1], #4
    9504:	str.w	r3, [r0], #4
    9508:	ldr.w	r3, [r1], #4
    950c:	str.w	r3, [r0], #4
    9510:	ldr.w	r3, [r1], #4
    9514:	str.w	r3, [r0], #4
    9518:	ldr.w	r3, [r1], #4
    951c:	str.w	r3, [r0], #4
    9520:	ldr.w	r3, [r1], #4
    9524:	str.w	r3, [r0], #4
    9528:	ldr.w	r3, [r1], #4
    952c:	str.w	r3, [r0], #4
    9530:	ldr.w	r3, [r1], #4
    9534:	str.w	r3, [r0], #4
    9538:	ldr.w	r3, [r1], #4
    953c:	str.w	r3, [r0], #4
    9540:	ldr.w	r3, [r1], #4
    9544:	str.w	r3, [r0], #4
    9548:	ldr.w	r3, [r1], #4
    954c:	str.w	r3, [r0], #4
    9550:	ldr.w	r3, [r1], #4
    9554:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9558:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    955a:	bcs.n	94d8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    955c:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    955e:	bcc.n	9584 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9560:	ldr.w	r3, [r1], #4
    9564:	str.w	r3, [r0], #4
    9568:	ldr.w	r3, [r1], #4
    956c:	str.w	r3, [r0], #4
    9570:	ldr.w	r3, [r1], #4
    9574:	str.w	r3, [r0], #4
    9578:	ldr.w	r3, [r1], #4
    957c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9580:	subs	r2, #16
	bhs	.Lmid_block_loop
    9582:	bcs.n	9560 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9584:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9586:	bcc.n	9594 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9588:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    958c:	str.w	r3, [r0], #4
	subs	r2, #4
    9590:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9592:	bcs.n	9588 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9594:	adds	r2, #4
	beq	.Ldone
    9596:	beq.n	95aa <memcpy+0xe2>

	lsls	r2, r2, #31
    9598:	lsls	r2, r2, #31
	itt ne
    959a:	itt	ne
	ldrbne  r3, [r1], #1
    959c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    95a0:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    95a4:	bcc.n	95aa <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    95a6:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    95a8:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    95aa:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    95ac:	bx	lr
    95ae:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    95b0:	cmp	r2, #8
	blo	.Lbyte_copy
    95b2:	bcc.n	95dc <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    95b4:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    95b6:	beq.n	94d4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    95b8:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    95bc:	beq.n	94d4 <memcpy+0xc>

	rsb	r3, #4
    95be:	rsb	r3, r3, #4
	subs	r2, r3
    95c2:	subs	r2, r2, r3

	lsls    r3, r3, #31
    95c4:	lsls	r3, r3, #31
	itt ne
    95c6:	itt	ne
	ldrbne  r3, [r1], #1
    95c8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    95cc:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    95d0:	bcc.n	94d4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    95d2:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    95d6:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    95da:	b.n	94d4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    95dc:	subs	r2, #4
	blo	.Lcopy_less_than_4
    95de:	bcc.n	9594 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    95e0:	subs	r2, #1
	ldrb    r3, [r1], #1
    95e2:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    95e6:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    95ea:	bcs.n	95e0 <memcpy+0x118>

	ldrb	r3, [r1]
    95ec:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    95ee:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    95f0:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    95f2:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    95f4:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    95f6:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    95f8:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    95fa:	bx	lr

000095fc <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    95fc:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    95fe:	ldr	r5, [pc, #60]	; (963c <usb_serial_getchar+0x40>)
    9600:	ldr	r0, [r5, #0]
    9602:	cbz	r0, 9624 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    9604:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    9606:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    9608:	adds	r1, r0, r3
    960a:	adds	r3, #1
	if (i >= rx_packet->len) {
    960c:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    960e:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    9610:	bcs.n	9618 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    9612:	strh	r3, [r0, #2]
	}
	return c;
    9614:	mov	r0, r4
}
    9616:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    9618:	bl	9e84 <usb_free>
		rx_packet = NULL;
    961c:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    961e:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    9620:	str	r3, [r5, #0]
    9622:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9624:	ldr	r3, [pc, #24]	; (9640 <usb_serial_getchar+0x44>)
    9626:	ldrb	r3, [r3, #0]
    9628:	cbz	r3, 9636 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    962a:	movs	r0, #3
    962c:	bl	9ed0 <usb_rx>
    9630:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    9632:	cmp	r0, #0
    9634:	bne.n	9604 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9636:	mov.w	r0, #4294967295
    963a:	pop	{r3, r4, r5, pc}
    963c:	.word	0x200203b8
    9640:	.word	0x200204a4

00009644 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    9644:	push	{r4, lr}
	if (!rx_packet) {
    9646:	ldr	r4, [pc, #36]	; (966c <usb_serial_peekchar+0x28>)
    9648:	ldr	r0, [r4, #0]
    964a:	cbz	r0, 9654 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    964c:	ldrh	r3, [r0, #2]
    964e:	add	r0, r3
    9650:	ldrb	r0, [r0, #8]
}
    9652:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9654:	ldr	r3, [pc, #24]	; (9670 <usb_serial_peekchar+0x2c>)
    9656:	ldrb	r3, [r3, #0]
    9658:	cbz	r3, 9666 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    965a:	movs	r0, #3
    965c:	bl	9ed0 <usb_rx>
    9660:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    9662:	cmp	r0, #0
    9664:	bne.n	964c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9666:	mov.w	r0, #4294967295
    966a:	pop	{r4, pc}
    966c:	.word	0x200203b8
    9670:	.word	0x200204a4

00009674 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    9674:	ldr	r3, [pc, #16]	; (9688 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    9676:	ldr	r2, [pc, #20]	; (968c <usb_serial_available+0x18>)
    9678:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    967a:	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    967c:	cbz	r3, 9686 <usb_serial_available+0x12>
    967e:	ldrh	r2, [r3, #0]
    9680:	ldrh	r3, [r3, #2]
    9682:	subs	r3, r2, r3
    9684:	add	r0, r3
	return count;
}
    9686:	bx	lr
    9688:	.word	0x200203b8
    968c:	.word	0x20020538

00009690 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    9690:	ldr	r3, [pc, #44]	; (96c0 <usb_serial_flush_input+0x30>)
    9692:	ldrb	r3, [r3, #0]
    9694:	cbz	r3, 96be <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    9696:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    9698:	ldr	r4, [pc, #40]	; (96c4 <usb_serial_flush_input+0x34>)
    969a:	ldr	r0, [r4, #0]
    969c:	cbz	r0, 96b2 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    969e:	bl	9e84 <usb_free>
		rx_packet = NULL;
    96a2:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    96a4:	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    96a6:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    96a8:	bl	9ed0 <usb_rx>
		if (!rx) break;
    96ac:	cbz	r0, 96bc <usb_serial_flush_input+0x2c>
		usb_free(rx);
    96ae:	bl	9e84 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    96b2:	movs	r0, #3
    96b4:	bl	9ed0 <usb_rx>
		if (!rx) break;
    96b8:	cmp	r0, #0
    96ba:	bne.n	96ae <usb_serial_flush_input+0x1e>
    96bc:	pop	{r4, pc}
    96be:	bx	lr
    96c0:	.word	0x200204a4
    96c4:	.word	0x200203b8

000096c8 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    96c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    96cc:	ldr	r2, [pc, #396]	; (985c <usb_serial_write+0x194>)
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    96ce:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    96d0:	movs	r3, #1
    96d2:	strb	r3, [r2, #0]
	while (size > 0) {
    96d4:	str	r1, [sp, #4]
    96d6:	cmp	r1, #0
    96d8:	beq.n	97b4 <usb_serial_write+0xec>
    96da:	ldr.w	r8, [pc, #400]	; 986c <usb_serial_write+0x1a4>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    96de:	ldr	r7, [pc, #384]	; (9860 <usb_serial_write+0x198>)
    96e0:	mov	r4, r0
    96e2:	ldr.w	r0, [r8]
    96e6:	mov	r6, r1
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
    96e8:	cmp	r0, #0
    96ea:	beq.w	97f0 <usb_serial_write+0x128>
    96ee:	ldr	r5, [pc, #372]	; (9864 <usb_serial_write+0x19c>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    96f0:	ldrh	r3, [r0, #2]
    96f2:	rsb	r1, r3, #64	; 0x40
    96f6:	cmp	r1, r6
    96f8:	it	cs
    96fa:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    96fc:	add.w	r9, r3, r1
    9700:	uxth.w	r9, r9
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    9704:	add.w	r2, r0, #8
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    9708:	mov.w	lr, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    970c:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    970e:	strh.w	r9, [r0, #2]
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    9712:	add.w	ip, r1, #4294967295
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    9716:	add	r2, r3
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    9718:	strb.w	lr, [r5]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    971c:	cmp	r1, #0
    971e:	beq.n	97a4 <usb_serial_write+0xdc>
    9720:	add.w	r5, r3, #8
    9724:	adds	r3, #12
    9726:	add	r3, r0
    9728:	add	r5, r0
    972a:	add.w	r9, r4, #4
    972e:	cmp	r5, r9
    9730:	it	cc
    9732:	cmpcc	r4, r3
    9734:	ite	cs
    9736:	movcs	r3, #1
    9738:	movcc	r3, #0
    973a:	cmp	r1, #9
    973c:	ite	ls
    973e:	movls	r3, #0
    9740:	andhi.w	r3, r3, #1
    9744:	cmp	r3, #0
    9746:	beq.n	97de <usb_serial_write+0x116>
    9748:	orr.w	r3, r4, r5
    974c:	lsls	r3, r3, #30
    974e:	bne.n	97de <usb_serial_write+0x116>
    9750:	subs	r3, r1, #4
    9752:	lsrs	r3, r3, #2
    9754:	adds	r3, #1
    9756:	cmp.w	ip, #2
    975a:	mov.w	r9, r3, lsl #2
    975e:	bls.n	97da <usb_serial_write+0x112>
    9760:	sub.w	sl, r4, #4
    9764:	mov	fp, r3
    9766:	add.w	lr, lr, #1
    976a:	ldr.w	r3, [sl, #4]!
    976e:	str.w	r3, [r5], #4
    9772:	cmp	fp, lr
    9774:	bhi.n	9766 <usb_serial_write+0x9e>
    9776:	cmp	r1, r9
    9778:	add	r2, r9
    977a:	rsb	ip, r9, ip
    977e:	add.w	r3, r4, r9
    9782:	beq.n	9848 <usb_serial_write+0x180>
    9784:	ldrb	r5, [r3, #0]
    9786:	strb	r5, [r2, #0]
    9788:	cmp.w	ip, #0
    978c:	beq.n	97d6 <usb_serial_write+0x10e>
    978e:	ldrb	r5, [r3, #1]
    9790:	strb	r5, [r2, #1]
    9792:	cmp.w	ip, #1
    9796:	beq.n	97d6 <usb_serial_write+0x10e>
    9798:	ldrb	r3, [r3, #2]
    979a:	strb	r3, [r2, #2]
    979c:	add	r1, r4
    979e:	ldrh.w	r9, [r0, #2]
    97a2:	mov	r4, r1
		if (tx_packet->index >= CDC_TX_SIZE) {
    97a4:	cmp.w	r9, #63	; 0x3f
    97a8:	bhi.n	97c2 <usb_serial_write+0xfa>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    97aa:	ldr	r3, [pc, #188]	; (9868 <usb_serial_write+0x1a0>)
    97ac:	movs	r2, #5
    97ae:	strb	r2, [r3, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    97b0:	cmp	r6, #0
    97b2:	bne.n	96e8 <usb_serial_write+0x20>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    97b4:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    97b6:	ldr	r2, [pc, #164]	; (985c <usb_serial_write+0x194>)
    97b8:	movs	r3, #0
    97ba:	strb	r3, [r2, #0]
	return ret;
}
    97bc:	add	sp, #12
    97be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    97c2:	movs	r3, #64	; 0x40
    97c4:	strh	r3, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    97c6:	mov	r1, r0
    97c8:	movs	r0, #4
    97ca:	bl	a000 <usb_tx>
			tx_packet = NULL;
    97ce:	movs	r0, #0
    97d0:	str.w	r0, [r8]
    97d4:	b.n	97aa <usb_serial_write+0xe2>
    97d6:	add	r1, r4
    97d8:	b.n	979e <usb_serial_write+0xd6>
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    97da:	mov	r3, r4
    97dc:	b.n	9784 <usb_serial_write+0xbc>
    97de:	subs	r2, #1
    97e0:	add	r1, r4
    97e2:	ldrb.w	r3, [r4], #1
    97e6:	strb.w	r3, [r2, #1]!
    97ea:	cmp	r4, r1
    97ec:	bne.n	97e2 <usb_serial_write+0x11a>
    97ee:	b.n	979e <usb_serial_write+0xd6>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    97f0:	ldrb	r3, [r7, #0]
    97f2:	cbz	r3, 984c <usb_serial_write+0x184>
    97f4:	ldr	r5, [pc, #108]	; (9864 <usb_serial_write+0x19c>)
    97f6:	movw	r9, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    97fa:	mov.w	sl, #1
    97fe:	b.n	9812 <usb_serial_write+0x14a>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9800:	subs.w	r9, r9, #1
    9804:	beq.n	983a <usb_serial_write+0x172>
    9806:	ldrb	r3, [r5, #0]
    9808:	cbnz	r3, 983a <usb_serial_write+0x172>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    980a:	bl	1724 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    980e:	ldrb	r3, [r7, #0]
    9810:	cbz	r3, 984c <usb_serial_write+0x184>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    9812:	movs	r0, #4
    9814:	bl	9f0c <usb_tx_packet_count>
    9818:	cmp	r0, #7
    981a:	bhi.n	9800 <usb_serial_write+0x138>
					tx_noautoflush = 1;
    981c:	ldr	r3, [pc, #60]	; (985c <usb_serial_write+0x194>)
    981e:	strb.w	sl, [r3]
					tx_packet = usb_malloc();
    9822:	bl	9e44 <usb_malloc>
    9826:	str.w	r0, [r8]
					if (tx_packet) break;
    982a:	cmp	r0, #0
    982c:	bne.w	96f0 <usb_serial_write+0x28>
					tx_noautoflush = 0;
    9830:	ldr	r3, [pc, #40]	; (985c <usb_serial_write+0x194>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9832:	subs.w	r9, r9, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    9836:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9838:	bne.n	9806 <usb_serial_write+0x13e>
					transmit_previous_timeout = 1;
    983a:	movs	r3, #1
					return -1;
    983c:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    9840:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    9842:	add	sp, #12
    9844:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9848:	mov	r1, r3
    984a:	b.n	979e <usb_serial_write+0xd6>
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    984c:	ldr	r2, [pc, #12]	; (985c <usb_serial_write+0x194>)
    984e:	movs	r3, #0
					return -1;
    9850:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    9854:	strb	r3, [r2, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    9856:	add	sp, #12
    9858:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    985c:	.word	0x200203ad
    9860:	.word	0x200204a4
    9864:	.word	0x200203b4
    9868:	.word	0x200203ac
    986c:	.word	0x200203b0

00009870 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    9870:	push	{lr}
    9872:	sub	sp, #12
    9874:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    9876:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    9878:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    987c:	mov	r0, r3
    987e:	bl	96c8 <usb_serial_write>
}
    9882:	add	sp, #12
    9884:	ldr.w	pc, [sp], #4

00009888 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    9888:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    988a:	ldr	r5, [pc, #56]	; (98c4 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    988c:	ldr	r4, [pc, #56]	; (98c8 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    988e:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    9890:	movs	r3, #1
    9892:	strb	r3, [r4, #0]
	if (!tx_packet) {
    9894:	cbz	r0, 98a2 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    9896:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    9898:	movs	r3, #0
    989a:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    989c:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    98a0:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    98a2:	ldr	r3, [pc, #40]	; (98cc <usb_serial_write_buffer_free+0x44>)
    98a4:	ldrb	r3, [r3, #0]
    98a6:	cbnz	r3, 98ae <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    98a8:	movs	r0, #0
    98aa:	strb	r0, [r4, #0]
			return 0;
    98ac:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    98ae:	movs	r0, #4
    98b0:	bl	9f0c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    98b4:	cmp	r0, #7
    98b6:	bhi.n	98a8 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    98b8:	bl	9e44 <usb_malloc>
    98bc:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    98be:	cmp	r0, #0
    98c0:	bne.n	9896 <usb_serial_write_buffer_free+0xe>
    98c2:	b.n	98a8 <usb_serial_write_buffer_free+0x20>
    98c4:	.word	0x200203b0
    98c8:	.word	0x200203ad
    98cc:	.word	0x200204a4

000098d0 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    98d0:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    98d2:	ldr	r3, [pc, #68]	; (9918 <usb_serial_flush_output+0x48>)
    98d4:	ldrb	r3, [r3, #0]
    98d6:	cbz	r3, 98fc <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    98d8:	ldr	r6, [pc, #64]	; (991c <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    98da:	ldr	r5, [pc, #68]	; (9920 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    98dc:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    98de:	movs	r7, #1
    98e0:	strb	r7, [r5, #0]
	if (tx_packet) {
    98e2:	cbz	r4, 98fe <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    98e4:	ldr	r2, [pc, #60]	; (9924 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    98e6:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    98e8:	movs	r7, #0
    98ea:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    98ec:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    98ee:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    98f0:	movs	r0, #4
    98f2:	bl	a000 <usb_tx>
		tx_packet = NULL;
    98f6:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    98f8:	movs	r3, #0
    98fa:	strb	r3, [r5, #0]
    98fc:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    98fe:	bl	9e44 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    9902:	ldr	r3, [pc, #32]	; (9924 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    9904:	cbz	r0, 9912 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    9906:	mov	r1, r0
    9908:	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    990a:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    990c:	bl	a000 <usb_tx>
    9910:	b.n	98f8 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    9912:	strb	r7, [r3, #0]
    9914:	b.n	98f8 <usb_serial_flush_output+0x28>
    9916:	nop
    9918:	.word	0x200204a4
    991c:	.word	0x200203b0
    9920:	.word	0x200203ad
    9924:	.word	0x200203ac

00009928 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    9928:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    992a:	ldr	r3, [pc, #56]	; (9964 <usb_serial_flush_callback+0x3c>)
    992c:	ldrb	r3, [r3, #0]
    992e:	cbnz	r3, 994e <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    9930:	ldr	r4, [pc, #52]	; (9968 <usb_serial_flush_callback+0x40>)
    9932:	ldr	r1, [r4, #0]
    9934:	cbz	r1, 9950 <usb_serial_flush_callback+0x28>
    9936:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    993a:	ldrh	r3, [r1, #2]
    993c:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    993e:	movs	r0, #4
    9940:	bl	a000 <usb_tx>
		tx_packet = NULL;
    9944:	str	r5, [r4, #0]
    9946:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    9948:	ldr	r3, [pc, #32]	; (996c <usb_serial_flush_callback+0x44>)
    994a:	movs	r2, #1
    994c:	strb	r2, [r3, #0]
    994e:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    9950:	bl	9e44 <usb_malloc>
		if (tx) {
    9954:	cmp	r0, #0
    9956:	beq.n	9948 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    9958:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    995a:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    995e:	movs	r0, #4
    9960:	b.w	a000 <usb_tx>
    9964:	.word	0x200203ad
    9968:	.word	0x200203b0
    996c:	.word	0x200203ac

00009970 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    9970:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9972:	ldr	r4, [pc, #64]	; (99b4 <fault_isr+0x44>)
    9974:	b.n	9988 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9976:	ldr	r3, [r4, #0]
    9978:	lsls	r1, r3, #21
    997a:	bmi.n	9998 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    997c:	ldr	r3, [r4, #0]
    997e:	lsls	r2, r3, #20
    9980:	bmi.n	99a2 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    9982:	ldr	r3, [r4, #0]
    9984:	lsls	r3, r3, #19
    9986:	bmi.n	99ac <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9988:	ldr	r3, [r4, #0]
    998a:	lsls	r0, r3, #13
    998c:	bpl.n	9976 <fault_isr+0x6>
    998e:	bl	a084 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9992:	ldr	r3, [r4, #0]
    9994:	lsls	r1, r3, #21
    9996:	bpl.n	997c <fault_isr+0xc>
    9998:	bl	99b8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    999c:	ldr	r3, [r4, #0]
    999e:	lsls	r2, r3, #20
    99a0:	bpl.n	9982 <fault_isr+0x12>
    99a2:	bl	99b8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    99a6:	ldr	r3, [r4, #0]
    99a8:	lsls	r3, r3, #19
    99aa:	bpl.n	9988 <fault_isr+0x18>
    99ac:	bl	99b8 <unused_isr>
    99b0:	b.n	9988 <fault_isr+0x18>
    99b2:	nop
    99b4:	.word	0x40048034

000099b8 <unused_isr>:
	}
}

void unused_isr(void)
{
    99b8:	push	{r3, lr}
	fault_isr();
    99ba:	bl	9970 <fault_isr>
    99be:	nop

000099c0 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    99c0:	ldr	r3, [pc, #4]	; (99c8 <startup_early_hook+0x8>)
    99c2:	movs	r2, #16
    99c4:	strh	r2, [r3, #0]
    99c6:	bx	lr
    99c8:	.word	0x40052000

000099cc <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    99cc:	bx	lr
    99ce:	nop

000099d0 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    99d0:	ldr	r1, [pc, #36]	; (99f8 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    99d2:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    99d4:	ldr	r3, [r1, #0]
	if (incr != 0) {
    99d6:	cbz	r0, 99e6 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    99d8:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    99da:	add	r0, r3
    99dc:	sub.w	r2, r2, #8192	; 0x2000
    99e0:	cmp	r0, r2
    99e2:	bcs.n	99ea <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    99e4:	str	r0, [r1, #0]
	}
	return prev;
    99e6:	mov	r0, r3
}
    99e8:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    99ea:	bl	c4b8 <__errno>
    99ee:	movs	r3, #12
    99f0:	str	r3, [r0, #0]
			return (void *)-1;
    99f2:	mov.w	r0, #4294967295
    99f6:	pop	{r3, pc}
    99f8:	.word	0x1fff0890

000099fc <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    99fc:	adds	r0, #16
    99fe:	ldr	r3, [pc, #8]	; (9a08 <attachInterruptVector+0xc>)
    9a00:	str.w	r1, [r3, r0, lsl #2]
    9a04:	bx	lr
    9a06:	nop
    9a08:	.word	0x1fff0200

00009a0c <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    9a0c:	push	{r4, r5}
	RTC_SR = 0;
    9a0e:	ldr	r3, [pc, #20]	; (9a24 <rtc_set+0x18>)
	RTC_TPR = 0;
    9a10:	ldr	r5, [pc, #20]	; (9a28 <rtc_set+0x1c>)
	RTC_TSR = t;
    9a12:	ldr	r4, [pc, #24]	; (9a2c <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9a14:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    9a16:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9a18:	str	r2, [r3, #0]
	RTC_TPR = 0;
    9a1a:	str	r2, [r5, #0]
	RTC_TSR = t;
    9a1c:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    9a1e:	str	r1, [r3, #0]
}
    9a20:	pop	{r4, r5}
    9a22:	bx	lr
    9a24:	.word	0x4003d014
    9a28:	.word	0x4003d004
    9a2c:	.word	0x4003d000

00009a30 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    9a30:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9a34:	ldr	r3, [pc, #556]	; (9c64 <_init_Teensyduino_internal_+0x234>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    9a36:	ldr	r0, [pc, #560]	; (9c68 <_init_Teensyduino_internal_+0x238>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    9a38:	ldr.w	ip, [pc, #608]	; 9c9c <_init_Teensyduino_internal_+0x26c>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    9a3c:	ldr	r4, [pc, #556]	; (9c6c <_init_Teensyduino_internal_+0x23c>)
	FTM0_C2SC = 0x28;
    9a3e:	ldr	r1, [pc, #560]	; (9c70 <_init_Teensyduino_internal_+0x240>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9a40:	ldr.w	lr, [pc, #604]	; 9ca0 <_init_Teensyduino_internal_+0x270>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    9a44:	ldr	r6, [pc, #556]	; (9c74 <_init_Teensyduino_internal_+0x244>)
	FTM0_C4SC = 0x28;
    9a46:	ldr	r5, [pc, #560]	; (9c78 <_init_Teensyduino_internal_+0x248>)
	FTM0_C5SC = 0x28;
    9a48:	ldr	r7, [pc, #560]	; (9c7c <_init_Teensyduino_internal_+0x24c>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9a4a:	mov.w	r2, #134217728	; 0x8000000
    9a4e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    9a50:	mov.w	r2, #268435456	; 0x10000000
    9a54:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    9a56:	mov.w	r2, #536870912	; 0x20000000
    9a5a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    9a5c:	mov.w	r2, #1073741824	; 0x40000000
    9a60:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    9a62:	mov.w	r2, #2147483648	; 0x80000000
    9a66:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    9a68:	movs	r2, #0
    9a6a:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9a6c:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    9a6e:	movw	r0, #49151	; 0xbfff
    9a72:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9a76:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    9a7a:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    9a7c:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    9a80:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    9a82:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    9a84:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    9a86:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    9a8a:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    9a8c:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    9a90:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    9a92:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    9a96:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    9a98:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    9a9c:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    9aa0:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    9aa4:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    9aa8:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    9aac:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    9aae:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    9ab2:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    9ab4:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    9ab6:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    9ab8:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    9abc:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    9abe:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    9ac0:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9ac2:	ldr	r4, [pc, #444]	; (9c80 <_init_Teensyduino_internal_+0x250>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    9ac4:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    9ac6:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9ac8:	movs	r1, #9
    9aca:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    9acc:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    9ad0:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    9ad4:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    9ad6:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    9ad8:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    9ada:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    9adc:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    9ade:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9ae0:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    9ae4:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    9ae8:	add.w	r7, r7, #520192	; 0x7f000
    9aec:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    9aee:	addw	r4, r4, #2044	; 0x7fc
    9af2:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    9af4:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    9af6:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    9af8:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9afa:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    9afe:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    9b00:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    9b04:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    9b08:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9b0a:	sub.w	r4, r4, #460800	; 0x70800
    9b0e:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    9b12:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    9b14:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9b16:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9b1a:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9b1c:	ldr	r0, [pc, #356]	; (9c84 <_init_Teensyduino_internal_+0x254>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9b1e:	orr.w	r1, r1, #512	; 0x200
    9b22:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9b24:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9b26:	ldr	r4, [pc, #352]	; (9c88 <_init_Teensyduino_internal_+0x258>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    9b28:	add.w	lr, lr, #65280	; 0xff00
    9b2c:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    9b30:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    9b34:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    9b38:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9b3c:	orr.w	r1, r1, #33554432	; 0x2000000
    9b40:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    9b42:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    9b46:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9b4a:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    9b4c:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    9b4e:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    9b50:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9b52:	str	r2, [r4, #0]
#endif
	analog_init();
    9b54:	bl	b250 <analog_init>

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9b58:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9b5a:	ldr	r5, [pc, #304]	; (9c8c <_init_Teensyduino_internal_+0x25c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9b5c:	ldr	r3, [pc, #304]	; (9c90 <_init_Teensyduino_internal_+0x260>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9b5e:	ldr	r2, [pc, #308]	; (9c94 <_init_Teensyduino_internal_+0x264>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9b60:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9b62:	ldr	r4, [r5, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9b64:	ldr	r2, [r2, #0]
	__enable_irq();
    9b66:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9b68:	lsls	r1, r2, #5
    9b6a:	bpl.n	9b72 <_init_Teensyduino_internal_+0x142>
    9b6c:	cmp	r3, #50	; 0x32
    9b6e:	it	hi
    9b70:	addhi	r4, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9b72:	rsb	r3, r3, #95744	; 0x17600
    9b76:	ldr	r7, [pc, #288]	; (9c98 <_init_Teensyduino_internal_+0x268>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9b78:	ldr.w	r9, [pc, #276]	; 9c90 <_init_Teensyduino_internal_+0x260>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9b7c:	ldr.w	r8, [pc, #276]	; 9c94 <_init_Teensyduino_internal_+0x264>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9b80:	adds	r3, #255	; 0xff
    9b82:	mov.w	r2, #1000	; 0x3e8
    9b86:	umull	r1, r3, r7, r3
    9b8a:	mul.w	r4, r2, r4
    9b8e:	add.w	r4, r4, r3, lsr #6
    9b92:	movs	r6, #25

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9b94:	cpsid	i
	current = SYST_CVR;
    9b96:	ldr.w	r1, [r9]
	count = systick_millis_count;
    9b9a:	ldr	r2, [r5, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9b9c:	ldr.w	lr, [r8]
	__enable_irq();
    9ba0:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9ba2:	rsb	r3, r1, #95744	; 0x17600
    9ba6:	adds	r3, #255	; 0xff
    9ba8:	umull	r0, r3, r7, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9bac:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9bb0:	rsb	r3, r4, r3, lsr #6
    9bb4:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9bb8:	beq.n	9bc0 <_init_Teensyduino_internal_+0x190>
    9bba:	cmp	r1, #50	; 0x32
    9bbc:	it	hi
    9bbe:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9bc0:	mla	r3, r0, r2, r3
    9bc4:	cmp.w	r3, #1000	; 0x3e8
    9bc8:	bcc.n	9bd4 <_init_Teensyduino_internal_+0x1a4>
				ms--;
				if (ms == 0) return;
    9bca:	subs	r6, #1
    9bcc:	beq.n	9bda <_init_Teensyduino_internal_+0x1aa>
				start += 1000;
    9bce:	add.w	r4, r4, #1000	; 0x3e8
    9bd2:	b.n	9b94 <_init_Teensyduino_internal_+0x164>
			}
			yield();
    9bd4:	bl	1724 <yield>
    9bd8:	b.n	9b94 <_init_Teensyduino_internal_+0x164>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
    9bda:	bl	ab38 <usb_init>

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9bde:	cpsid	i
	current = SYST_CVR;
    9be0:	ldr	r3, [pc, #172]	; (9c90 <_init_Teensyduino_internal_+0x260>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9be2:	ldr	r2, [pc, #176]	; (9c94 <_init_Teensyduino_internal_+0x264>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9be4:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9be6:	ldr	r4, [r5, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9be8:	ldr	r2, [r2, #0]
	__enable_irq();
    9bea:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9bec:	lsls	r2, r2, #5
    9bee:	bpl.n	9bf6 <_init_Teensyduino_internal_+0x1c6>
    9bf0:	cmp	r3, #50	; 0x32
    9bf2:	it	hi
    9bf4:	addhi	r4, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9bf6:	rsb	r3, r3, #95744	; 0x17600
    9bfa:	ldr	r7, [pc, #156]	; (9c98 <_init_Teensyduino_internal_+0x268>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9bfc:	ldr.w	r9, [pc, #144]	; 9c90 <_init_Teensyduino_internal_+0x260>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9c00:	ldr.w	r8, [pc, #144]	; 9c94 <_init_Teensyduino_internal_+0x264>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9c04:	adds	r3, #255	; 0xff
    9c06:	mov.w	r2, #1000	; 0x3e8
    9c0a:	umull	r1, r3, r7, r3
    9c0e:	mul.w	r4, r2, r4
    9c12:	add.w	r4, r4, r3, lsr #6
    9c16:	movw	r6, #275	; 0x113

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9c1a:	cpsid	i
	current = SYST_CVR;
    9c1c:	ldr.w	r1, [r9]
	count = systick_millis_count;
    9c20:	ldr	r2, [r5, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9c22:	ldr.w	lr, [r8]
	__enable_irq();
    9c26:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9c28:	rsb	r3, r1, #95744	; 0x17600
    9c2c:	adds	r3, #255	; 0xff
    9c2e:	umull	r0, r3, r7, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9c32:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9c36:	rsb	r3, r4, r3, lsr #6
    9c3a:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9c3e:	beq.n	9c46 <_init_Teensyduino_internal_+0x216>
    9c40:	cmp	r1, #50	; 0x32
    9c42:	it	hi
    9c44:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9c46:	mla	r3, r0, r2, r3
    9c4a:	cmp.w	r3, #1000	; 0x3e8
    9c4e:	bcc.n	9c5a <_init_Teensyduino_internal_+0x22a>
				ms--;
				if (ms == 0) return;
    9c50:	subs	r6, #1
    9c52:	beq.n	9c60 <_init_Teensyduino_internal_+0x230>
				start += 1000;
    9c54:	add.w	r4, r4, #1000	; 0x3e8
    9c58:	b.n	9c1a <_init_Teensyduino_internal_+0x1ea>
			}
			yield();
    9c5a:	bl	1724 <yield>
    9c5e:	b.n	9c1a <_init_Teensyduino_internal_+0x1ea>
    9c60:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9c64:	.word	0xe000e104
    9c68:	.word	0x40038004
    9c6c:	.word	0x40038014
    9c70:	.word	0x4003801c
    9c74:	.word	0x40038024
    9c78:	.word	0x4003802c
    9c7c:	.word	0x40038034
    9c80:	.word	0x40038000
    9c84:	.word	0x40048004
    9c88:	.word	0x400c9000
    9c8c:	.word	0x200203c0
    9c90:	.word	0xe000e018
    9c94:	.word	0xe000ed04
    9c98:	.word	0xaaaaaaab
    9c9c:	.word	0x40038008
    9ca0:	.word	0x4003800c

00009ca4 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    9ca4:	cmp	r0, #63	; 0x3f
    9ca6:	bhi.n	9cc2 <digitalWrite+0x1e>


// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
    9ca8:	push	{r4}
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    9caa:	ldr	r3, [pc, #60]	; (9ce8 <digitalWrite+0x44>)
    9cac:	ldr.w	r2, [r3, r0, lsl #3]
    9cb0:	ldrb.w	r4, [r2, #640]	; 0x280
    9cb4:	cbz	r4, 9cc4 <digitalWrite+0x20>
		if (val) {
			*portSetRegister(pin) = 1;
    9cb6:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    9cb8:	cbz	r1, 9cda <digitalWrite+0x36>
			*portSetRegister(pin) = 1;
    9cba:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9cbe:	ldr.w	r4, [sp], #4
    9cc2:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    9cc4:	add.w	r0, r3, r0, lsl #3
    9cc8:	ldr	r3, [r0, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9cca:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    9ccc:	cbnz	r1, 9ce0 <digitalWrite+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    9cce:	bic.w	r2, r2, #2
    9cd2:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9cd4:	ldr.w	r4, [sp], #4
    9cd8:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    9cda:	strb.w	r3, [r2, #256]	; 0x100
    9cde:	b.n	9cd4 <digitalWrite+0x30>
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9ce0:	orr.w	r2, r2, #3
    9ce4:	str	r2, [r3, #0]
    9ce6:	b.n	9cd4 <digitalWrite+0x30>
    9ce8:	.word	0x00013eec

00009cec <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    9cec:	cmp	r0, #63	; 0x3f
    9cee:	bhi.n	9d32 <pinMode+0x46>
	config = portConfigRegister(pin);
    9cf0:	ldr	r2, [pc, #108]	; (9d60 <pinMode+0x74>)
    9cf2:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9cf6:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    9cf8:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9cfa:	beq.n	9d1c <pinMode+0x30>
    9cfc:	cmp	r1, #4
    9cfe:	beq.n	9d3c <pinMode+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    9d00:	ldr.w	r0, [r2, r0, lsl #3]
    9d04:	movs	r2, #0
    9d06:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    9d0a:	cbz	r1, 9d34 <pinMode+0x48>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    9d0c:	cmp	r1, #2
    9d0e:	beq.n	9d56 <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    9d10:	cmp	r1, #3
    9d12:	bne.n	9d30 <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    9d14:	mov.w	r2, #258	; 0x102
    9d18:	str	r2, [r3, #0]
    9d1a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9d1c:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9d20:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9d24:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9d28:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    9d2a:	ldr	r2, [r3, #0]
    9d2c:	bic.w	r2, r2, #32
    9d30:	str	r2, [r3, #0]
    9d32:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    9d34:	mov.w	r2, #256	; 0x100
    9d38:	str	r2, [r3, #0]
    9d3a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9d3c:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9d40:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9d44:	movs	r0, #1
    9d46:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9d4a:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    9d4c:	ldr	r2, [r3, #0]
    9d4e:	orr.w	r2, r2, #32
    9d52:	str	r2, [r3, #0]
    9d54:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    9d56:	movw	r2, #259	; 0x103
    9d5a:	str	r2, [r3, #0]
    9d5c:	bx	lr
    9d5e:	nop
    9d60:	.word	0x00013eec

00009d64 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9d64:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9d66:	ldr	r1, [pc, #48]	; (9d98 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9d68:	ldr	r3, [pc, #48]	; (9d9c <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9d6a:	ldr	r2, [pc, #52]	; (9da0 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9d6c:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9d6e:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9d70:	ldr	r2, [r2, #0]
	__enable_irq();
    9d72:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9d74:	lsls	r2, r2, #5
    9d76:	bpl.n	9d7e <micros+0x1a>
    9d78:	cmp	r3, #50	; 0x32
    9d7a:	it	hi
    9d7c:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9d7e:	ldr	r1, [pc, #36]	; (9da4 <micros+0x40>)
    9d80:	rsb	r3, r3, #95744	; 0x17600
    9d84:	mov.w	r2, #1000	; 0x3e8
    9d88:	adds	r3, #255	; 0xff
    9d8a:	umull	r1, r3, r1, r3
    9d8e:	mul.w	r0, r2, r0
}
    9d92:	add.w	r0, r0, r3, lsr #6
    9d96:	bx	lr
    9d98:	.word	0x200203c0
    9d9c:	.word	0xe000e018
    9da0:	.word	0xe000ed04
    9da4:	.word	0xaaaaaaab

00009da8 <delay>:

void delay(uint32_t ms)
{
    9da8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9dac:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9dae:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9db0:	ldr	r7, [pc, #128]	; (9e34 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9db2:	ldr	r3, [pc, #132]	; (9e38 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9db4:	ldr	r2, [pc, #132]	; (9e3c <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9db6:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9db8:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9dba:	ldr	r2, [r2, #0]
	__enable_irq();
    9dbc:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9dbe:	lsls	r2, r2, #5
    9dc0:	bpl.n	9dc8 <delay+0x20>
    9dc2:	cmp	r3, #50	; 0x32
    9dc4:	it	hi
    9dc6:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    9dc8:	cbz	r5, 9e30 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9dca:	rsb	r3, r3, #95744	; 0x17600
    9dce:	ldr	r6, [pc, #112]	; (9e40 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9dd0:	ldr.w	r9, [pc, #100]	; 9e38 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9dd4:	ldr.w	r8, [pc, #100]	; 9e3c <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9dd8:	adds	r3, #255	; 0xff
    9dda:	mov.w	r2, #1000	; 0x3e8
    9dde:	umull	r1, r3, r6, r3
    9de2:	mul.w	r4, r2, r4
    9de6:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9dea:	cpsid	i
	current = SYST_CVR;
    9dec:	ldr.w	r1, [r9]
	count = systick_millis_count;
    9df0:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9df2:	ldr.w	lr, [r8]
	__enable_irq();
    9df6:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9df8:	rsb	r3, r1, #95744	; 0x17600
    9dfc:	adds	r3, #255	; 0xff
    9dfe:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9e02:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9e06:	rsb	r3, r4, r3, lsr #6
    9e0a:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9e0e:	beq.n	9e16 <delay+0x6e>
    9e10:	cmp	r1, #50	; 0x32
    9e12:	it	hi
    9e14:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9e16:	mla	r3, r0, r2, r3
    9e1a:	cmp.w	r3, #1000	; 0x3e8
    9e1e:	bcc.n	9e2a <delay+0x82>
				ms--;
				if (ms == 0) return;
    9e20:	subs	r5, #1
    9e22:	beq.n	9e30 <delay+0x88>
				start += 1000;
    9e24:	add.w	r4, r4, #1000	; 0x3e8
    9e28:	b.n	9dea <delay+0x42>
			}
			yield();
    9e2a:	bl	1724 <yield>
		}
    9e2e:	b.n	9dea <delay+0x42>
    9e30:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9e34:	.word	0x200203c0
    9e38:	.word	0xe000e018
    9e3c:	.word	0xe000ed04
    9e40:	.word	0xaaaaaaab

00009e44 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    9e44:	cpsid	i
	avail = usb_buffer_available;
    9e46:	ldr	r0, [pc, #52]	; (9e7c <usb_malloc+0x38>)
    9e48:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    9e4a:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    9e4e:	cmp	r3, #11
    9e50:	bgt.n	9e74 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    9e52:	mov.w	r1, #2147483648	; 0x80000000
    9e56:	lsrs	r1, r3
    9e58:	bic.w	r2, r2, r1
    9e5c:	str	r2, [r0, #0]
	__enable_irq();
    9e5e:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    9e60:	ldr	r0, [pc, #28]	; (9e80 <usb_malloc+0x3c>)
    9e62:	add.w	r3, r3, r3, lsl #3
    9e66:	lsls	r3, r3, #3
    9e68:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    9e6a:	movs	r1, #0
    9e6c:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    9e6e:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    9e70:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    9e72:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    9e74:	cpsie	i
		return NULL;
    9e76:	movs	r0, #0
    9e78:	bx	lr
    9e7a:	nop
    9e7c:	.word	0x1fff0894
    9e80:	.word	0x1fff03d0

00009e84 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    9e84:	ldr	r3, [pc, #52]	; (9ebc <usb_free+0x38>)
    9e86:	ldr	r2, [pc, #56]	; (9ec0 <usb_free+0x3c>)
    9e88:	subs	r3, r0, r3
    9e8a:	umull	r2, r3, r2, r3
    9e8e:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    9e90:	cmp	r3, #11
    9e92:	bhi.n	9eae <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9e94:	ldr	r2, [pc, #44]	; (9ec4 <usb_free+0x40>)
    9e96:	ldrb	r2, [r2, #0]
    9e98:	cbnz	r2, 9eb0 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    9e9a:	cpsid	i
	usb_buffer_available |= mask;
    9e9c:	ldr	r0, [pc, #40]	; (9ec8 <usb_free+0x44>)
    9e9e:	mov.w	r1, #2147483648	; 0x80000000
    9ea2:	ldr	r2, [r0, #0]
    9ea4:	lsr.w	r3, r1, r3
    9ea8:	orrs	r2, r3
    9eaa:	str	r2, [r0, #0]
	__enable_irq();
    9eac:	cpsie	i
    9eae:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9eb0:	ldr	r2, [pc, #24]	; (9ecc <usb_free+0x48>)
    9eb2:	ldrb	r2, [r2, #0]
    9eb4:	cmp	r2, #0
    9eb6:	beq.n	9e9a <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    9eb8:	b.w	9f38 <usb_rx_memory>
    9ebc:	.word	0x1fff03d0
    9ec0:	.word	0x38e38e39
    9ec4:	.word	0x20020499
    9ec8:	.word	0x1fff0894
    9ecc:	.word	0x200204a4

00009ed0 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    9ed0:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9ed2:	cmp	r3, #3
    9ed4:	bhi.n	9f00 <usb_rx+0x30>
	__disable_irq();
    9ed6:	cpsid	i
	ret = rx_first[endpoint];
    9ed8:	ldr	r1, [pc, #40]	; (9f04 <usb_rx+0x34>)
    9eda:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    9ede:	cbz	r0, 9efc <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    9ee0:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9ee2:	ldr	r4, [pc, #36]	; (9f08 <usb_rx+0x38>)
    9ee4:	ldrh	r5, [r0, #0]
    9ee6:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    9eea:	ldr	r6, [r0, #4]
    9eec:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9ef0:	subs	r2, r2, r5
    9ef2:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    9ef6:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9ef8:	pop	{r4, r5, r6}
    9efa:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    9efc:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9efe:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9f00:	movs	r0, #0
    9f02:	bx	lr
    9f04:	.word	0x2002041c
    9f08:	.word	0x20020538

00009f0c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    9f0c:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    9f0e:	cmp	r0, #3
    9f10:	bhi.n	9f2a <usb_tx_packet_count+0x1e>
	__disable_irq();
    9f12:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    9f14:	ldr	r3, [pc, #28]	; (9f34 <usb_tx_packet_count+0x28>)
    9f16:	ldr.w	r3, [r3, r0, lsl #2]
    9f1a:	cbz	r3, 9f2e <usb_tx_packet_count+0x22>
    9f1c:	movs	r0, #0
    9f1e:	ldr	r3, [r3, #4]
    9f20:	adds	r0, #1
    9f22:	cmp	r3, #0
    9f24:	bne.n	9f1e <usb_tx_packet_count+0x12>
	__enable_irq();
    9f26:	cpsie	i
	return count;
    9f28:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    9f2a:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    9f2c:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    9f2e:	mov	r0, r3
    9f30:	b.n	9f26 <usb_tx_packet_count+0x1a>
    9f32:	nop
    9f34:	.word	0x20020470

00009f38 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    9f38:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    9f3a:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9f3c:	ldr	r2, [pc, #172]	; (9fec <usb_rx_memory+0xb4>)
    9f3e:	ldrb	r3, [r2, #0]
    9f40:	lsls	r5, r3, #28
    9f42:	bpl.n	9f52 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9f44:	ldr	r3, [pc, #168]	; (9ff0 <usb_rx_memory+0xb8>)
    9f46:	ldr	r1, [r3, #32]
    9f48:	cmp	r1, #0
    9f4a:	beq.n	9fba <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9f4c:	ldr	r1, [r3, #40]	; 0x28
    9f4e:	cmp	r1, #0
    9f50:	beq.n	9fd6 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9f52:	ldrb	r3, [r2, #1]
    9f54:	lsls	r4, r3, #28
    9f56:	bpl.n	9f66 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9f58:	ldr	r3, [pc, #148]	; (9ff0 <usb_rx_memory+0xb8>)
    9f5a:	ldr	r1, [r3, #64]	; 0x40
    9f5c:	cmp	r1, #0
    9f5e:	beq.n	9fde <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9f60:	ldr	r1, [r3, #72]	; 0x48
    9f62:	cmp	r1, #0
    9f64:	beq.n	9fda <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9f66:	ldrb	r3, [r2, #2]
    9f68:	lsls	r1, r3, #28
    9f6a:	bpl.n	9f78 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9f6c:	ldr	r3, [pc, #128]	; (9ff0 <usb_rx_memory+0xb8>)
    9f6e:	ldr	r1, [r3, #96]	; 0x60
    9f70:	cmp	r1, #0
    9f72:	beq.n	9fe2 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9f74:	ldr	r1, [r3, #104]	; 0x68
    9f76:	cbz	r1, 9f9c <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9f78:	ldrb	r3, [r2, #3]
    9f7a:	lsls	r3, r3, #28
    9f7c:	bpl.n	9f8e <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9f7e:	ldr	r3, [pc, #112]	; (9ff0 <usb_rx_memory+0xb8>)
    9f80:	ldr.w	r2, [r3, #128]	; 0x80
    9f84:	cbz	r2, 9fe6 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9f86:	ldr.w	r2, [r3, #136]	; 0x88
    9f8a:	movs	r1, #17
    9f8c:	cbz	r2, 9f9e <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    9f8e:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    9f90:	ldr	r3, [pc, #96]	; (9ff4 <usb_rx_memory+0xbc>)
    9f92:	movs	r2, #0
    9f94:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    9f96:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    9f98:	b.w	9e84 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9f9c:	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9f9e:	ldr	r4, [pc, #84]	; (9ff4 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9fa0:	ldr	r5, [pc, #84]	; (9ff8 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    9fa2:	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9fa4:	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9fa8:	add.w	r3, r3, r1, lsl #3
    9fac:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9fae:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9fb0:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9fb2:	strb	r2, [r4, #0]
				__enable_irq();
    9fb4:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    9fb6:	pop	{r4, r5}
    9fb8:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9fba:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9fbc:	ldr	r4, [pc, #52]	; (9ff4 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9fbe:	ldr	r5, [pc, #60]	; (9ffc <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    9fc0:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9fc2:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9fc6:	add.w	r3, r3, r2, lsl #3
    9fca:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9fcc:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9fce:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9fd0:	strb	r2, [r4, #0]
				__enable_irq();
    9fd2:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    9fd4:	b.n	9fb6 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9fd6:	movs	r1, #5
    9fd8:	b.n	9f9e <usb_rx_memory+0x66>
    9fda:	movs	r1, #9
    9fdc:	b.n	9f9e <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9fde:	movs	r2, #8
    9fe0:	b.n	9fbc <usb_rx_memory+0x84>
    9fe2:	movs	r2, #12
    9fe4:	b.n	9fbc <usb_rx_memory+0x84>
    9fe6:	movs	r2, #16
    9fe8:	b.n	9fbc <usb_rx_memory+0x84>
    9fea:	nop
    9fec:	.word	0x00014118
    9ff0:	.word	0x1fff0000
    9ff4:	.word	0x20020499
    9ff8:	.word	0x004000c8
    9ffc:	.word	0x00400088

0000a000 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    a000:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    a002:	cmp	r3, #3
    a004:	bhi.n	a042 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    a006:	ldr	r2, [pc, #108]	; (a074 <usb_tx+0x74>)
    a008:	lsls	r0, r0, #5
    a00a:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    a00e:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    a010:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    a012:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    a014:	ldr	r4, [pc, #96]	; (a078 <usb_tx+0x78>)
    a016:	ldrb	r2, [r4, r3]
    a018:	cmp	r2, #3
    a01a:	bhi.n	a054 <usb_tx+0x54>
    a01c:	tbb	[pc, r2]
    a020:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    a024:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a026:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    a028:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a02a:	tst.w	r0, #8
    a02e:	ite	ne
    a030:	movne	r3, #200	; 0xc8
    a032:	moveq	r3, #136	; 0x88
    a034:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    a038:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a03a:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    a03c:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    a03e:	cpsie	i
}
    a040:	pop	{r4, r5}
    a042:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    a044:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    a046:	movs	r2, #2
		break;
    a048:	b.n	a026 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    a04a:	movs	r2, #5
    a04c:	b.n	a026 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    a04e:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    a050:	movs	r2, #4
		break;
    a052:	b.n	a026 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    a054:	ldr	r2, [pc, #36]	; (a07c <usb_tx+0x7c>)
    a056:	ldr.w	r0, [r2, r3, lsl #2]
    a05a:	cbz	r0, a06c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    a05c:	ldr	r2, [pc, #32]	; (a080 <usb_tx+0x80>)
    a05e:	ldr.w	r0, [r2, r3, lsl #2]
    a062:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    a064:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    a068:	cpsie	i
		return;
    a06a:	b.n	a040 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    a06c:	str.w	r1, [r2, r3, lsl #2]
    a070:	ldr	r2, [pc, #12]	; (a080 <usb_tx+0x80>)
    a072:	b.n	a064 <usb_tx+0x64>
    a074:	.word	0x1fff0000
    a078:	.word	0x200204a8
    a07c:	.word	0x20020470
    a080:	.word	0x20020480

0000a084 <usb_isr>:
}



void usb_isr(void)
{
    a084:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    a088:	ldr.w	fp, [pc, #780]	; a398 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    a08c:	ldr.w	sl, [pc, #780]	; a39c <usb_isr+0x318>
}



void usb_isr(void)
{
    a090:	sub	sp, #28
    a092:	b.n	a11e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    a094:	ldr	r7, [pc, #684]	; (a344 <usb_isr+0x2c0>)
    a096:	mov.w	r8, r3, lsr #2
    a09a:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    a09e:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    a0a0:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    a0a4:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    a0a8:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    a0aa:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    a0ae:	and.w	r4, r3, #255	; 0xff
    a0b2:	cmp	r3, #0
    a0b4:	bne.w	a2bc <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    a0b8:	ldr.w	r3, [r7, r8, lsl #3]
    a0bc:	lsrs	r3, r3, #16
    a0be:	uxth	r1, r3
    a0c0:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    a0c4:	cmp	r3, #0
    a0c6:	beq.w	a2aa <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    a0ca:	ldr	r3, [pc, #636]	; (a348 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    a0cc:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    a0d0:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    a0d4:	ldr.w	r2, [r3, r6, lsl #2]
    a0d8:	cmp	r2, #0
    a0da:	beq.w	a668 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    a0de:	ldr	r5, [pc, #620]	; (a34c <usb_isr+0x2c8>)
    a0e0:	ldr.w	r3, [r5, r6, lsl #2]
    a0e4:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    a0e6:	ldr	r4, [pc, #616]	; (a350 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    a0e8:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    a0ec:	ldrh.w	r3, [r4, r6, lsl #1]
    a0f0:	add	r1, r3
    a0f2:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    a0f6:	bl	9e44 <usb_malloc>
					if (packet) {
    a0fa:	cmp	r0, #0
    a0fc:	beq.w	a65a <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    a100:	ldr	r2, [pc, #592]	; (a354 <usb_isr+0x2d0>)
    a102:	ldr	r3, [pc, #596]	; (a358 <usb_isr+0x2d4>)
    a104:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    a108:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    a10c:	it	ne
    a10e:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    a110:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    a114:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    a118:	movs	r3, #8
    a11a:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    a11e:	ldrb.w	r4, [fp]
    a122:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    a124:	lsls	r1, r4, #29
    a126:	bpl.n	a15e <usb_isr+0xda>
		if (usb_configuration) {
    a128:	ldr	r3, [pc, #560]	; (a35c <usb_isr+0x2d8>)
    a12a:	ldrb	r3, [r3, #0]
    a12c:	cbz	r3, a158 <usb_isr+0xd4>
			t = usb_reboot_timer;
    a12e:	ldr	r1, [pc, #560]	; (a360 <usb_isr+0x2dc>)
    a130:	ldrb	r2, [r1, #0]
			if (t) {
    a132:	and.w	r3, r2, #255	; 0xff
    a136:	cbz	r2, a142 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    a138:	subs	r3, #1
    a13a:	uxtb	r3, r3
    a13c:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    a13e:	cbnz	r3, a142 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    a140:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    a142:	ldr	r1, [pc, #544]	; (a364 <usb_isr+0x2e0>)
    a144:	ldrb	r2, [r1, #0]
			if (t) {
    a146:	and.w	r3, r2, #255	; 0xff
    a14a:	cbz	r2, a158 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    a14c:	subs	r3, #1
    a14e:	uxtb	r3, r3
    a150:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    a152:	cmp	r3, #0
    a154:	beq.w	a606 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    a158:	movs	r3, #4
    a15a:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    a15e:	and.w	r3, r4, #8
    a162:	and.w	r2, r3, #255	; 0xff
    a166:	cmp	r3, #0
    a168:	beq.w	a304 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    a16c:	ldrb.w	r3, [sl]
    a170:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    a172:	lsrs	r6, r3, #4
    a174:	bne.n	a094 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    a176:	lsrs	r4, r3, #2
    a178:	ldr.w	r9, [pc, #456]	; a344 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    a17c:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    a180:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    a184:	ubfx	r2, r2, #2, #4
    a188:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    a18a:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    a18c:	cmp	r2, #12
    a18e:	bhi.w	a2a2 <usb_isr+0x21e>
    a192:	tbb	[pc, r2]
    a196:	.short	0x7c7c
    a198:	.word	0x86868686
    a19c:	.word	0x86478686
    a1a0:	.short	0x8686
    a1a2:	.byte	0x07
    a1a3:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    a1a4:	ldr	r0, [r1, #0]
    a1a6:	ldr	r5, [pc, #448]	; (a368 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    a1a8:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a1aa:	ldr	r7, [pc, #448]	; (a36c <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a1ac:	ldr	r6, [pc, #448]	; (a370 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    a1ae:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a1b0:	uxth	r1, r0
    a1b2:	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a1b6:	ldr	r3, [pc, #412]	; (a354 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    a1b8:	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a1ba:	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a1be:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a1c0:	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a1c2:	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a1c6:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    a1c8:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    a1cc:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a1d0:	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    a1d4:	ldr	r4, [pc, #364]	; (a344 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a1d6:	bhi.w	a3a0 <usb_isr+0x31c>
    a1da:	cmp.w	r1, #1664	; 0x680
    a1de:	bcs.w	a86e <usb_isr+0x7ea>
    a1e2:	cmp.w	r1, #258	; 0x102
    a1e6:	beq.w	a7e2 <usb_isr+0x75e>
    a1ea:	bhi.w	a708 <usb_isr+0x684>
    a1ee:	cmp	r1, #128	; 0x80
    a1f0:	beq.w	a8e2 <usb_isr+0x85e>
    a1f4:	cmp	r1, #130	; 0x82
    a1f6:	bne.w	a7ee <usb_isr+0x76a>
    a1fa:	ldrh	r1, [r5, #4]
    a1fc:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    a200:	cmp	r1, #4
    a202:	bhi.w	a7ee <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a206:	ldr	r0, [pc, #364]	; (a374 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a208:	ldr	r4, [pc, #364]	; (a378 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a20a:	lsls	r1, r1, #2
    a20c:	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a20e:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a210:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a212:	ldrb	r2, [r0, #0]
    a214:	lsls	r3, r2, #30
    a216:	bpl.w	aac4 <usb_isr+0xa40>
    a21a:	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    a21e:	mov.w	lr, #2
    a222:	b.n	a8aa <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    a224:	ldr	r7, [pc, #324]	; (a36c <usb_isr+0x2e8>)
    a226:	ldr	r2, [r7, #0]
		if (data) {
    a228:	cbz	r2, a278 <usb_isr+0x1f4>
			size = ep0_tx_len;
    a22a:	ldr	r3, [pc, #336]	; (a37c <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a22c:	ldr	r6, [pc, #320]	; (a370 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a22e:	ldr	r1, [pc, #336]	; (a380 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    a230:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a232:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a234:	ldrb	r5, [r1, #0]
    a236:	cmp	r0, #64	; 0x40
    a238:	mov	lr, r0
    a23a:	orr.w	r8, r5, #2
    a23e:	it	cs
    a240:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a244:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    a246:	eor.w	r4, r4, #1
    a24a:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a24c:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a250:	ite	eq
    a252:	moveq	r4, #136	; 0x88
    a254:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a256:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a25a:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a25c:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a260:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a264:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a266:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a268:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    a26c:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a26e:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    a270:	cmp	r0, #0
    a272:	beq.w	a500 <usb_isr+0x47c>
    a276:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    a278:	ldr	r3, [pc, #236]	; (a368 <usb_isr+0x2e4>)
    a27a:	ldrh	r2, [r3, #0]
    a27c:	cmp.w	r2, #1280	; 0x500
    a280:	bne.n	a2a2 <usb_isr+0x21e>
			setup.bRequest = 0;
    a282:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    a284:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    a286:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    a288:	ldr	r3, [pc, #248]	; (a384 <usb_isr+0x300>)
    a28a:	strb	r2, [r3, #0]
    a28c:	b.n	a2a2 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    a28e:	ldr	r2, [pc, #216]	; (a368 <usb_isr+0x2e4>)
    a290:	ldrh	r0, [r2, #0]
    a292:	movw	r2, #8225	; 0x2021
    a296:	cmp	r0, r2
    a298:	beq.w	a50a <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a29c:	ldr	r2, [pc, #180]	; (a354 <usb_isr+0x2d0>)
    a29e:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a2a2:	ldr	r2, [pc, #228]	; (a388 <usb_isr+0x304>)
    a2a4:	movs	r3, #1
    a2a6:	strb	r3, [r2, #0]
    a2a8:	b.n	a118 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a2aa:	ldr	r2, [pc, #168]	; (a354 <usb_isr+0x2d0>)
    a2ac:	ldr	r3, [pc, #168]	; (a358 <usb_isr+0x2d4>)
    a2ae:	tst.w	r9, #8
    a2b2:	it	ne
    a2b4:	movne	r3, r2
    a2b6:	str.w	r3, [r7, r8, lsl #3]
    a2ba:	b.n	a118 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    a2bc:	bl	9e84 <usb_free>
				packet = tx_first[endpoint];
    a2c0:	ldr	r2, [pc, #200]	; (a38c <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    a2c2:	ldr	r1, [pc, #204]	; (a390 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    a2c4:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    a2c8:	cmp	r3, #0
    a2ca:	beq.w	a670 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    a2ce:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    a2d0:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    a2d2:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    a2d6:	add.w	r2, r3, #8
    a2da:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    a2de:	cmp	r4, #3
    a2e0:	bhi.n	a2ee <usb_isr+0x26a>
    a2e2:	tbb	[pc, r4]
    a2e6:	.short	0x022c
    a2e8:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    a2ea:	movs	r2, #2
    a2ec:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    a2ee:	ldrh	r2, [r3, #0]
    a2f0:	tst.w	r9, #8
    a2f4:	ite	eq
    a2f6:	moveq	r3, #136	; 0x88
    a2f8:	movne	r3, #200	; 0xc8
    a2fa:	orr.w	r3, r3, r2, lsl #16
    a2fe:	str.w	r3, [r7, r8, lsl #3]
    a302:	b.n	a118 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    a304:	lsls	r0, r4, #31
    a306:	bmi.w	a60c <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    a30a:	lsls	r1, r4, #24
    a30c:	bmi.w	a6f4 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    a310:	lsls	r2, r4, #30
    a312:	bpl.n	a322 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    a314:	ldr	r2, [pc, #124]	; (a394 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a316:	ldr	r1, [pc, #128]	; (a398 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    a318:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a31a:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    a31c:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    a31e:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a320:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    a322:	lsls	r3, r4, #27
    a324:	bpl.n	a32c <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    a326:	ldr	r3, [pc, #112]	; (a398 <usb_isr+0x314>)
    a328:	movs	r2, #16
    a32a:	strb	r2, [r3, #0]
	}

}
    a32c:	add	sp, #28
    a32e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    a332:	movs	r2, #4
    a334:	strb	r2, [r1, r6]
						break;
    a336:	b.n	a2ee <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    a338:	movs	r2, #5
    a33a:	strb	r2, [r1, r6]
						break;
    a33c:	b.n	a2ee <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    a33e:	movs	r2, #3
    a340:	strb	r2, [r1, r6]
						break;
    a342:	b.n	a2ee <usb_isr+0x26a>
    a344:	.word	0x1fff0000
    a348:	.word	0x2002041c
    a34c:	.word	0x200203c8
    a350:	.word	0x20020538
    a354:	.word	0x004000c8
    a358:	.word	0x00400088
    a35c:	.word	0x200204a4
    a360:	.word	0x2002042d
    a364:	.word	0x200203ac
    a368:	.word	0x20020490
    a36c:	.word	0x200203c4
    a370:	.word	0x2002042c
    a374:	.word	0x400720c0
    a378:	.word	0x2002049c
    a37c:	.word	0x200203d8
    a380:	.word	0x20020498
    a384:	.word	0x40072098
    a388:	.word	0x40072094
    a38c:	.word	0x20020470
    a390:	.word	0x200204a8
    a394:	.word	0x40072088
    a398:	.word	0x40072080
    a39c:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a3a0:	movw	r0, #8225	; 0x2021
    a3a4:	cmp	r1, r0
    a3a6:	beq.w	a5fe <usb_isr+0x57a>
    a3aa:	bhi.w	a55e <usb_isr+0x4da>
    a3ae:	cmp.w	r1, #2176	; 0x880
    a3b2:	beq.w	a8a2 <usb_isr+0x81e>
    a3b6:	cmp.w	r1, #2304	; 0x900
    a3ba:	bne.w	a7ee <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    a3be:	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    a3c0:	ldr	r1, [pc, #716]	; (a690 <usb_isr+0x60c>)
    a3c2:	ldrb	r0, [r5, #2]
    a3c4:	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    a3c6:	lsls	r2, r2, #24
    a3c8:	bmi.w	aa3a <usb_isr+0x9b6>
    a3cc:	ldr.w	r2, [r9, #40]	; 0x28
    a3d0:	ldr	r1, [pc, #704]	; (a694 <usb_isr+0x610>)
    a3d2:	lsls	r3, r2, #24
    a3d4:	bmi.w	aa30 <usb_isr+0x9ac>
    a3d8:	ldr.w	r2, [r9, #48]	; 0x30
    a3dc:	ldr	r1, [pc, #692]	; (a694 <usb_isr+0x610>)
    a3de:	lsls	r5, r2, #24
    a3e0:	bmi.w	a9e2 <usb_isr+0x95e>
    a3e4:	ldr.w	r2, [r9, #56]	; 0x38
    a3e8:	ldr	r1, [pc, #680]	; (a694 <usb_isr+0x610>)
    a3ea:	lsls	r4, r2, #24
    a3ec:	bmi.w	a9d8 <usb_isr+0x954>
    a3f0:	ldr.w	r2, [r9, #64]	; 0x40
    a3f4:	ldr	r1, [pc, #668]	; (a694 <usb_isr+0x610>)
    a3f6:	lsls	r0, r2, #24
    a3f8:	bmi.w	aa8a <usb_isr+0xa06>
    a3fc:	ldr.w	r2, [r9, #72]	; 0x48
    a400:	ldr	r1, [pc, #656]	; (a694 <usb_isr+0x610>)
    a402:	lsls	r2, r2, #24
    a404:	bmi.w	aa80 <usb_isr+0x9fc>
    a408:	ldr.w	r2, [r9, #80]	; 0x50
    a40c:	ldr	r1, [pc, #644]	; (a694 <usb_isr+0x610>)
    a40e:	lsls	r3, r2, #24
    a410:	bmi.w	aa76 <usb_isr+0x9f2>
    a414:	ldr.w	r2, [r9, #88]	; 0x58
    a418:	ldr	r1, [pc, #632]	; (a694 <usb_isr+0x610>)
    a41a:	lsls	r5, r2, #24
    a41c:	bmi.w	aa6c <usb_isr+0x9e8>
    a420:	ldr.w	r2, [r9, #96]	; 0x60
    a424:	ldr	r1, [pc, #620]	; (a694 <usb_isr+0x610>)
    a426:	lsls	r4, r2, #24
    a428:	bmi.w	aa62 <usb_isr+0x9de>
    a42c:	ldr.w	r2, [r9, #104]	; 0x68
    a430:	ldr	r1, [pc, #608]	; (a694 <usb_isr+0x610>)
    a432:	lsls	r0, r2, #24
    a434:	bmi.w	aa58 <usb_isr+0x9d4>
    a438:	ldr.w	r2, [r9, #112]	; 0x70
    a43c:	ldr	r1, [pc, #596]	; (a694 <usb_isr+0x610>)
    a43e:	lsls	r2, r2, #24
    a440:	bmi.w	aa4e <usb_isr+0x9ca>
    a444:	ldr.w	r2, [r9, #120]	; 0x78
    a448:	ldr	r1, [pc, #584]	; (a694 <usb_isr+0x610>)
    a44a:	lsls	r3, r2, #24
    a44c:	bmi.w	aa44 <usb_isr+0x9c0>
    a450:	ldr.w	r2, [r9, #128]	; 0x80
    a454:	ldr	r1, [pc, #572]	; (a694 <usb_isr+0x610>)
    a456:	lsls	r5, r2, #24
    a458:	bmi.w	aab8 <usb_isr+0xa34>
    a45c:	ldr.w	r2, [r9, #136]	; 0x88
    a460:	ldr	r1, [pc, #560]	; (a694 <usb_isr+0x610>)
    a462:	lsls	r4, r2, #24
    a464:	bmi.w	aaac <usb_isr+0xa28>
    a468:	ldr.w	r2, [r9, #144]	; 0x90
    a46c:	ldr	r1, [pc, #548]	; (a694 <usb_isr+0x610>)
    a46e:	lsls	r0, r2, #24
    a470:	bmi.w	aaa0 <usb_isr+0xa1c>
    a474:	ldr.w	r2, [r9, #152]	; 0x98
    a478:	ldr	r1, [pc, #536]	; (a694 <usb_isr+0x610>)
    a47a:	lsls	r2, r2, #24
    a47c:	bmi.w	aa94 <usb_isr+0xa10>
    a480:	ldr	r0, [pc, #532]	; (a698 <usb_isr+0x614>)
    a482:	ldr	r2, [pc, #536]	; (a69c <usb_isr+0x618>)
    a484:	ldr	r1, [pc, #536]	; (a6a0 <usb_isr+0x61c>)
    a486:	str	r0, [sp, #4]
    a488:	ldr	r0, [pc, #536]	; (a6a4 <usb_isr+0x620>)
    a48a:	ldr	r4, [pc, #540]	; (a6a8 <usb_isr+0x624>)
    a48c:	ldr	r5, [pc, #540]	; (a6ac <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a48e:	str	r4, [sp, #8]
}



void usb_isr(void)
{
    a490:	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a492:	str	r7, [sp, #16]
    a494:	str	r6, [sp, #20]
    a496:	mov	r8, r0
    a498:	mov	r4, r3
    a49a:	mov	r7, r1
    a49c:	mov	r6, r2
    a49e:	str	r5, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    a4a0:	ldr	r0, [r6, #0]
			while (p) {
    a4a2:	cbz	r0, a4b0 <usb_isr+0x42c>
				n = p->next;
    a4a4:	ldr	r5, [r0, #4]
				usb_free(p);
    a4a6:	bl	9e84 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    a4aa:	mov	r0, r5
    a4ac:	cmp	r5, #0
    a4ae:	bne.n	a4a4 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    a4b0:	movs	r3, #0
    a4b2:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    a4b4:	ldr	r3, [sp, #12]
			p = tx_first[i];
    a4b6:	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    a4b8:	mov	r2, r3
    a4ba:	movs	r3, #0
    a4bc:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    a4c0:	cbz	r0, a4ce <usb_isr+0x44a>
				n = p->next;
    a4c2:	ldr	r5, [r0, #4]
				usb_free(p);
    a4c4:	bl	9e84 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    a4c8:	mov	r0, r5
    a4ca:	cmp	r5, #0
    a4cc:	bne.n	a4c2 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    a4ce:	movs	r2, #0
    a4d0:	str	r2, [r7, #0]
			tx_last[i] = NULL;
    a4d2:	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    a4d4:	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    a4d8:	mov	r1, r2
    a4da:	movs	r2, #0
    a4dc:	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    a4e0:	ldr	r2, [sp, #8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    a4e2:	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    a4e4:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    a4e6:	mov.w	r1, #0
    a4ea:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    a4ee:	cmp	r3, #3
    a4f0:	bhi.w	a74a <usb_isr+0x6c6>
    a4f4:	tbh	[pc, r3, lsl #1]
    a4f8:	.word	0x01250170
    a4fc:	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    a500:	cmp.w	lr, #64	; 0x40
    a504:	it	ne
    a506:	movne	r2, #0
    a508:	b.n	a276 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    a50a:	ldr	r2, [pc, #420]	; (a6b0 <usb_isr+0x62c>)
    a50c:	ldrb	r5, [r1, #0]
    a50e:	ldrb	r0, [r1, #1]
    a510:	strb	r5, [r2, #0]
    a512:	strb	r0, [r2, #1]
    a514:	ldrb	r5, [r1, #2]
    a516:	ldrb	r0, [r1, #3]
    a518:	strb	r5, [r2, #2]
    a51a:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    a51c:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    a51e:	ldrb	r5, [r1, #4]
    a520:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    a522:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    a524:	ldrb	r5, [r1, #5]
    a526:	ldrb	r1, [r1, #6]
    a528:	strb	r5, [r2, #5]
    a52a:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    a52c:	beq.w	a866 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a530:	ldr	r1, [pc, #384]	; (a6b4 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a532:	ldr	r6, [pc, #388]	; (a6b8 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a534:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a536:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a538:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a53c:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a53e:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a542:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a544:	ite	eq
    a546:	moveq	r1, #136	; 0x88
    a548:	movne	r1, #200	; 0xc8
    a54a:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a54e:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a552:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a556:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a558:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a55a:	str	r1, [r2, #4]
    a55c:	b.n	a29c <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a55e:	movw	r0, #8737	; 0x2221
    a562:	cmp	r1, r0
    a564:	bne.w	a8fe <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a568:	ldr	r3, [pc, #336]	; (a6bc <usb_isr+0x638>)
    a56a:	ldr	r4, [pc, #340]	; (a6c0 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    a56c:	ldr	r1, [pc, #340]	; (a6c4 <usb_isr+0x640>)
    a56e:	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a570:	ldr	r5, [r3, #0]
    a572:	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    a574:	str.w	lr, [sp, #4]
    a578:	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a57a:	movs	r0, #0
    a57c:	str	r0, [sp, #8]
    a57e:	mov	r8, r0
    a580:	mov	ip, r0
    a582:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a584:	ldr	r1, [pc, #300]	; (a6b4 <usb_isr+0x630>)
    a586:	ldrb	r5, [r1, #0]
    a588:	orr.w	lr, r5, #2
    a58c:	add.w	r3, r9, lr, lsl #3
    a590:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a592:	ldr	r3, [sp, #4]
    a594:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a596:	ldr	r3, [sp, #12]
    a598:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a59a:	ite	eq
    a59c:	moveq	r4, #136	; 0x88
    a59e:	movne	r4, #200	; 0xc8
    a5a0:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a5a4:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a5a8:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    a5ac:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    a5ae:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a5b0:	ldr.w	lr, [pc, #224]	; a694 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    a5b4:	ldr	r3, [pc, #256]	; (a6b8 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    a5b6:	ldr.w	r8, [pc, #252]	; a6b4 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    a5ba:	cmp	r0, #0
    a5bc:	bne.w	a7fc <usb_isr+0x778>
    a5c0:	cmp.w	ip, #64	; 0x40
    a5c4:	bne.n	a5fe <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a5c6:	orr.w	ip, r4, #2
    a5ca:	add.w	r3, r9, ip, lsl #3
    a5ce:	ldr	r4, [sp, #8]
    a5d0:	ldr.w	lr, [pc, #192]	; a694 <usb_isr+0x610>
    a5d4:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a5d6:	cmp	r2, #0
    a5d8:	bne.w	a828 <usb_isr+0x7a4>
    a5dc:	lsls	r2, r0, #16
    a5de:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    a5e2:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a5e6:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a5ea:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a5ec:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    a5ee:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a5f0:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    a5f2:	cmp	r0, #64	; 0x40
    a5f4:	bne.n	a5fe <usb_isr+0x57a>
    a5f6:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    a5f8:	ldr	r2, [pc, #204]	; (a6c8 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    a5fa:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    a5fc:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a5fe:	ldr	r2, [pc, #204]	; (a6cc <usb_isr+0x648>)
    a600:	movs	r3, #1
    a602:	strb	r3, [r2, #0]
    a604:	b.n	a2a2 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    a606:	bl	9928 <usb_serial_flush_callback>
    a60a:	b.n	a158 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    a60c:	ldr	r3, [pc, #132]	; (a694 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    a60e:	ldr	r0, [pc, #188]	; (a6cc <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    a610:	ldr	r1, [pc, #160]	; (a6b4 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    a612:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    a614:	mov.w	lr, #2
    a618:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a61c:	ldr	r7, [pc, #176]	; (a6d0 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    a61e:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    a620:	ldr	r1, [pc, #176]	; (a6d4 <usb_isr+0x650>)
    a622:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    a624:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    a626:	ldr	r6, [pc, #176]	; (a6d8 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    a628:	ldr	r5, [pc, #176]	; (a6dc <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    a62a:	ldr	r4, [pc, #180]	; (a6e0 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    a62c:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a62e:	movs	r1, #13
    a630:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    a632:	movs	r1, #255	; 0xff
    a634:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    a636:	ldr.w	lr, [pc, #184]	; a6f0 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    a63a:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    a63c:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    a63e:	ldr	r5, [pc, #164]	; (a6e4 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    a640:	ldr	r2, [pc, #164]	; (a6e8 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    a642:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    a646:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    a648:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    a64a:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    a64e:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    a650:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    a652:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    a654:	add	sp, #28
    a656:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    a65a:	ldr	r2, [pc, #144]	; (a6ec <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    a65c:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    a660:	ldrb	r3, [r2, #0]
    a662:	adds	r3, #1
    a664:	strb	r3, [r2, #0]
    a666:	b.n	a118 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    a668:	str.w	r0, [r3, r6, lsl #2]
    a66c:	ldr	r5, [pc, #60]	; (a6ac <usb_isr+0x628>)
    a66e:	b.n	a0e6 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    a670:	ldrb	r3, [r1, r6]
    a672:	cmp	r3, #3
    a674:	bhi.w	a858 <usb_isr+0x7d4>
    a678:	add	r2, pc, #4	; (adr r2, a680 <usb_isr+0x5fc>)
    a67a:	ldr.w	pc, [r2, r3, lsl #2]
    a67e:	nop
    a680:	.word	0x0000a119
    a684:	.word	0x0000a119
    a688:	.word	0x0000a73d
    a68c:	.word	0x0000a737
    a690:	.word	0x200204a4
    a694:	.word	0x1fff0000
    a698:	.word	0x20020480
    a69c:	.word	0x2002041c
    a6a0:	.word	0x20020470
    a6a4:	.word	0x200204a8
    a6a8:	.word	0x20020538
    a6ac:	.word	0x200203c8
    a6b0:	.word	0x2002052c
    a6b4:	.word	0x20020498
    a6b8:	.word	0x2002042c
    a6bc:	.word	0x200203c0
    a6c0:	.word	0x20020534
    a6c4:	.word	0x200203bc
    a6c8:	.word	0x200203d8
    a6cc:	.word	0x40072094
    a6d0:	.word	0x400720c0
    a6d4:	.word	0x00400088
    a6d8:	.word	0x40072088
    a6dc:	.word	0x40072080
    a6e0:	.word	0x40072098
    a6e4:	.word	0x200203dc
    a6e8:	.word	0x20020430
    a6ec:	.word	0x20020499
    a6f0:	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a6f4:	ldr	r1, [pc, #756]	; (a9ec <usb_isr+0x968>)
		USB0_ISTAT = USB_ISTAT_STALL;
    a6f6:	ldr	r3, [pc, #760]	; (a9f0 <usb_isr+0x96c>)
    a6f8:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a6fa:	movs	r0, #13
    a6fc:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    a6fe:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    a700:	lsls	r2, r4, #30
    a702:	bpl.w	a322 <usb_isr+0x29e>
    a706:	b.n	a314 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a708:	movw	r2, #770	; 0x302
    a70c:	cmp	r1, r2
    a70e:	bne.w	a8ee <usb_isr+0x86a>
    a712:	ldrh	r1, [r5, #4]
    a714:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a718:	cmp	r1, #4
    a71a:	bhi.n	a7ee <usb_isr+0x76a>
    a71c:	ldrh	r2, [r5, #2]
    a71e:	cmp	r2, #0
    a720:	bne.n	a7ee <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    a722:	ldr	r0, [pc, #712]	; (a9ec <usb_isr+0x968>)
    a724:	str.w	lr, [sp, #4]
    a728:	lsls	r1, r1, #2
    a72a:	add	r0, r1
    a72c:	ldrb	r1, [r0, #0]
    a72e:	orr.w	r1, r1, #2
    a732:	strb	r1, [r0, #0]
    a734:	b.n	a57a <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a736:	movs	r3, #1
    a738:	strb	r3, [r1, r6]
						break;
    a73a:	b.n	a118 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    a73c:	movs	r3, #0
    a73e:	strb	r3, [r1, r6]
						break;
    a740:	b.n	a118 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a742:	mov.w	r3, #1
    a746:	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    a74a:	adds	r4, #1
    a74c:	cmp	r4, #4
    a74e:	add.w	r6, r6, #4
    a752:	add.w	r7, r7, #4
    a756:	add.w	r8, r8, #1
    a75a:	bne.w	a4a0 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a75e:	ldr	r4, [pc, #660]	; (a9f4 <usb_isr+0x970>)
			*reg = epconf;
    a760:	ldr	r3, [pc, #660]	; (a9f8 <usb_isr+0x974>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a762:	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    a764:	ldr	r5, [pc, #660]	; (a9fc <usb_isr+0x978>)
    a766:	ldr	r7, [sp, #16]
    a768:	ldr	r6, [sp, #20]
    a76a:	movs	r1, #0
    a76c:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a76e:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a770:	lsls	r3, r2, #28
    a772:	bmi.w	a980 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a776:	ldrb	r2, [r4, #1]
			*reg = epconf;
    a778:	ldr	r1, [pc, #644]	; (aa00 <usb_isr+0x97c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a77a:	ldr.w	r8, [pc, #656]	; aa0c <usb_isr+0x988>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a77e:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a780:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a782:	mov.w	r1, #0
    a786:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    a78a:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a78e:	bmi.w	a954 <usb_isr+0x8d0>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a792:	ldr	r1, [pc, #624]	; (aa04 <usb_isr+0x980>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a794:	ldrb	r2, [r4, #2]
			*reg = epconf;
    a796:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a798:	movs	r1, #0
    a79a:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    a79e:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a7a2:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a7a4:	ldr.w	r8, [pc, #612]	; aa0c <usb_isr+0x988>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a7a8:	bmi.w	a9ac <usb_isr+0x928>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a7ac:	ldrb	r2, [r4, #3]
			*reg = epconf;
    a7ae:	ldr	r1, [pc, #600]	; (aa08 <usb_isr+0x984>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a7b0:	ldr	r4, [pc, #600]	; (aa0c <usb_isr+0x988>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a7b2:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a7b4:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a7b6:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a7b8:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    a7bc:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a7c0:	bmi.w	a924 <usb_isr+0x8a0>
    a7c4:	ldrb	r3, [r6, #0]
    a7c6:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a7c8:	movs	r1, #0
    a7ca:	eor.w	r2, r3, #1
    a7ce:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    a7d2:	str.w	r1, [r9, #152]	; 0x98
    a7d6:	b.n	a57a <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    a7d8:	mov.w	r3, #0
    a7dc:	strb.w	r3, [r8]
    a7e0:	b.n	a74a <usb_isr+0x6c6>
    a7e2:	ldrh	r1, [r5, #4]
    a7e4:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a7e8:	cmp	r1, #4
    a7ea:	bls.w	a908 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a7ee:	ldr	r2, [pc, #508]	; (a9ec <usb_isr+0x968>)
    a7f0:	movs	r3, #15
    a7f2:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a7f4:	ldr	r2, [pc, #536]	; (aa10 <usb_isr+0x98c>)
    a7f6:	movs	r3, #1
    a7f8:	strb	r3, [r2, #0]
    a7fa:	b.n	a2a2 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    a7fc:	cmp	r0, #64	; 0x40
    a7fe:	bls.w	a5c6 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a802:	orr.w	r4, r4, #2
    a806:	add.w	r1, lr, r4, lsl #3
    a80a:	ldr	r6, [sp, #8]
    a80c:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a80e:	cbz	r2, a840 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    a810:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a814:	ldr	r2, [pc, #508]	; (aa14 <usb_isr+0x990>)
	ep0_tx_data_toggle ^= 1;
    a816:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a818:	mov	r3, r6
    a81a:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a81c:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a820:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a822:	str.w	r2, [lr, r4, lsl #3]
    a826:	b.n	a5f8 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    a828:	ldrb.w	r3, [sp, #4]
    a82c:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a82e:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a830:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a832:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a834:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a838:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a83a:	str.w	r2, [lr, ip, lsl #3]
    a83e:	b.n	a5f2 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    a840:	ldrb.w	r1, [sp, #4]
    a844:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a846:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a848:	ldr	r2, [pc, #460]	; (aa18 <usb_isr+0x994>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a84a:	strb.w	r5, [r8]
    a84e:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a850:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a852:	str.w	r2, [lr, r4, lsl #3]
    a856:	b.n	a5f8 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    a858:	tst.w	r9, #8
    a85c:	ite	eq
    a85e:	moveq	r3, #2
    a860:	movne	r3, #3
    a862:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    a864:	b.n	a118 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    a866:	ldr	r2, [pc, #436]	; (aa1c <usb_isr+0x998>)
    a868:	movs	r1, #15
    a86a:	strb	r1, [r2, #0]
    a86c:	b.n	a530 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    a86e:	ldr	r2, [pc, #432]	; (aa20 <usb_isr+0x99c>)
    a870:	ldr	r4, [r2, #4]
    a872:	cmp	r4, #0
    a874:	beq.n	a7ee <usb_isr+0x76a>
    a876:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a878:	ldrh.w	lr, [r5, #4]
    a87c:	b.n	a886 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    a87e:	adds	r2, #12
			if (list->addr == NULL) break;
    a880:	ldr	r4, [r2, #4]
    a882:	cmp	r4, #0
    a884:	beq.n	a7ee <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a886:	ldrh	r3, [r2, #0]
    a888:	cmp	r3, r0
    a88a:	bne.n	a87e <usb_isr+0x7fa>
    a88c:	ldrh	r3, [r2, #2]
    a88e:	cmp	r3, lr
    a890:	bne.n	a87e <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    a892:	lsrs	r0, r0, #8
    a894:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    a896:	ite	eq
    a898:	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    a89c:	ldrhne.w	lr, [r2, #8]
    a8a0:	b.n	a8aa <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a8a2:	ldr	r2, [pc, #384]	; (aa24 <usb_isr+0x9a0>)
    a8a4:	ldr	r4, [pc, #384]	; (aa28 <usb_isr+0x9a4>)
    a8a6:	ldrb	r2, [r2, #0]
    a8a8:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a8aa:	ldrh	r0, [r5, #6]
    a8ac:	cmp	r0, lr
    a8ae:	bcs.w	ab14 <usb_isr+0xa90>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a8b2:	ldr	r1, [pc, #376]	; (aa2c <usb_isr+0x9a8>)
    a8b4:	ldrb	r5, [r1, #0]
    a8b6:	cmp	r0, #64	; 0x40
    a8b8:	mov	ip, r0
    a8ba:	orr.w	lr, r5, #2
    a8be:	it	cs
    a8c0:	movcs.w	ip, #64	; 0x40
    a8c4:	add.w	r3, r4, ip
    a8c8:	add.w	r2, r9, lr, lsl #3
    a8cc:	str	r3, [sp, #8]
    a8ce:	movs	r3, #1
    a8d0:	str	r4, [r2, #4]
    a8d2:	rsb	r0, ip, r0
    a8d6:	mov.w	r8, ip, lsl #16
    a8da:	movs	r2, #0
    a8dc:	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a8de:	movs	r4, #200	; 0xc8
    a8e0:	b.n	a5a0 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a8e2:	ldr	r4, [pc, #324]	; (aa28 <usb_isr+0x9a4>)
		reply_buffer[1] = 0;
		datalen = 2;
    a8e4:	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a8e8:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a8ea:	strb	r2, [r4, #1]
    a8ec:	b.n	a8aa <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a8ee:	cmp.w	r1, #1280	; 0x500
    a8f2:	bne.w	a7ee <usb_isr+0x76a>
    a8f6:	movs	r3, #1
    a8f8:	movs	r2, #0
    a8fa:	str	r3, [sp, #4]
    a8fc:	b.n	a57a <usb_isr+0x4f6>
    a8fe:	movw	r2, #8993	; 0x2321
    a902:	cmp	r1, r2
    a904:	beq.n	a8f6 <usb_isr+0x872>
    a906:	b.n	a7ee <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a908:	ldrh	r2, [r5, #2]
    a90a:	cmp	r2, #0
    a90c:	bne.w	a7ee <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    a910:	ldr	r0, [pc, #216]	; (a9ec <usb_isr+0x968>)
    a912:	str.w	lr, [sp, #4]
    a916:	lsls	r1, r1, #2
    a918:	add	r0, r1
    a91a:	ldrb	r1, [r0, #0]
    a91c:	bic.w	r1, r1, #2
    a920:	strb	r1, [r0, #0]
    a922:	b.n	a57a <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a924:	bl	9e44 <usb_malloc>
				if (p) {
    a928:	cmp	r0, #0
    a92a:	beq.w	aafa <usb_isr+0xa76>
					table[index(i, RX, EVEN)].addr = p->buf;
    a92e:	adds	r0, #8
    a930:	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a934:	ldr	r0, [pc, #224]	; (aa18 <usb_isr+0x994>)
    a936:	str.w	r0, [r9, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a93a:	bl	9e44 <usb_malloc>
    a93e:	ldr	r2, [pc, #204]	; (aa0c <usb_isr+0x988>)
				if (p) {
    a940:	cmp	r0, #0
    a942:	beq.w	aaee <usb_isr+0xa6a>
					table[index(i, RX, ODD)].addr = p->buf;
    a946:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a948:	ldr	r1, [pc, #200]	; (aa14 <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a94a:	str.w	r0, [r2, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a94e:	str.w	r1, [r2, #136]	; 0x88
    a952:	b.n	a7c4 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a954:	bl	9e44 <usb_malloc>
				if (p) {
    a958:	cmp	r0, #0
    a95a:	beq.w	aad4 <usb_isr+0xa50>
					table[index(i, RX, EVEN)].addr = p->buf;
    a95e:	adds	r0, #8
    a960:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a964:	ldr	r0, [pc, #176]	; (aa18 <usb_isr+0x994>)
    a966:	str.w	r0, [r9, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a96a:	bl	9e44 <usb_malloc>
    a96e:	ldr	r2, [pc, #156]	; (aa0c <usb_isr+0x988>)
				if (p) {
    a970:	cmp	r0, #0
    a972:	beq.w	aaca <usb_isr+0xa46>
					table[index(i, RX, ODD)].addr = p->buf;
    a976:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a978:	ldr	r1, [pc, #152]	; (aa14 <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a97a:	str	r0, [r2, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a97c:	str	r1, [r2, #72]	; 0x48
    a97e:	b.n	a792 <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a980:	bl	9e44 <usb_malloc>
				if (p) {
    a984:	cmp	r0, #0
    a986:	beq.w	ab0c <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    a98a:	adds	r0, #8
    a98c:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a990:	ldr	r0, [pc, #132]	; (aa18 <usb_isr+0x994>)
    a992:	str.w	r0, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a996:	bl	9e44 <usb_malloc>
    a99a:	ldr	r2, [pc, #112]	; (aa0c <usb_isr+0x988>)
				if (p) {
    a99c:	cmp	r0, #0
    a99e:	beq.w	ab02 <usb_isr+0xa7e>
					table[index(i, RX, ODD)].addr = p->buf;
    a9a2:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a9a4:	ldr	r1, [pc, #108]	; (aa14 <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a9a6:	str	r0, [r2, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a9a8:	str	r1, [r2, #40]	; 0x28
    a9aa:	b.n	a776 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a9ac:	bl	9e44 <usb_malloc>
				if (p) {
    a9b0:	cmp	r0, #0
    a9b2:	beq.w	aae6 <usb_isr+0xa62>
					table[index(i, RX, EVEN)].addr = p->buf;
    a9b6:	adds	r0, #8
    a9b8:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a9bc:	ldr	r0, [pc, #88]	; (aa18 <usb_isr+0x994>)
    a9be:	str.w	r0, [r9, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a9c2:	bl	9e44 <usb_malloc>
    a9c6:	ldr	r2, [pc, #68]	; (aa0c <usb_isr+0x988>)
				if (p) {
    a9c8:	cmp	r0, #0
    a9ca:	beq.w	aadc <usb_isr+0xa58>
					table[index(i, RX, ODD)].addr = p->buf;
    a9ce:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a9d0:	ldr	r1, [pc, #64]	; (aa14 <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a9d2:	str	r0, [r2, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a9d4:	str	r1, [r2, #104]	; 0x68
    a9d6:	b.n	a7ac <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    a9d8:	ldr	r0, [r1, #60]	; 0x3c
    a9da:	subs	r0, #8
    a9dc:	bl	9e84 <usb_free>
    a9e0:	b.n	a3f0 <usb_isr+0x36c>
    a9e2:	ldr	r0, [r1, #52]	; 0x34
    a9e4:	subs	r0, #8
    a9e6:	bl	9e84 <usb_free>
    a9ea:	b.n	a3e4 <usb_isr+0x360>
    a9ec:	.word	0x400720c0
    a9f0:	.word	0x40072080
    a9f4:	.word	0x00014118
    a9f8:	.word	0x400720c4
    a9fc:	.word	0x20020499
    aa00:	.word	0x400720c8
    aa04:	.word	0x400720cc
    aa08:	.word	0x400720d0
    aa0c:	.word	0x1fff0000
    aa10:	.word	0x40072094
    aa14:	.word	0x004000c8
    aa18:	.word	0x00400088
    aa1c:	.word	0x2002042d
    aa20:	.word	0x0001411c
    aa24:	.word	0x200204a4
    aa28:	.word	0x2002049c
    aa2c:	.word	0x20020498
    aa30:	ldr	r0, [r1, #44]	; 0x2c
    aa32:	subs	r0, #8
    aa34:	bl	9e84 <usb_free>
    aa38:	b.n	a3d8 <usb_isr+0x354>
    aa3a:	ldr	r0, [r4, #36]	; 0x24
    aa3c:	subs	r0, #8
    aa3e:	bl	9e84 <usb_free>
    aa42:	b.n	a3cc <usb_isr+0x348>
    aa44:	ldr	r0, [r1, #124]	; 0x7c
    aa46:	subs	r0, #8
    aa48:	bl	9e84 <usb_free>
    aa4c:	b.n	a450 <usb_isr+0x3cc>
    aa4e:	ldr	r0, [r1, #116]	; 0x74
    aa50:	subs	r0, #8
    aa52:	bl	9e84 <usb_free>
    aa56:	b.n	a444 <usb_isr+0x3c0>
    aa58:	ldr	r0, [r1, #108]	; 0x6c
    aa5a:	subs	r0, #8
    aa5c:	bl	9e84 <usb_free>
    aa60:	b.n	a438 <usb_isr+0x3b4>
    aa62:	ldr	r0, [r1, #100]	; 0x64
    aa64:	subs	r0, #8
    aa66:	bl	9e84 <usb_free>
    aa6a:	b.n	a42c <usb_isr+0x3a8>
    aa6c:	ldr	r0, [r1, #92]	; 0x5c
    aa6e:	subs	r0, #8
    aa70:	bl	9e84 <usb_free>
    aa74:	b.n	a420 <usb_isr+0x39c>
    aa76:	ldr	r0, [r1, #84]	; 0x54
    aa78:	subs	r0, #8
    aa7a:	bl	9e84 <usb_free>
    aa7e:	b.n	a414 <usb_isr+0x390>
    aa80:	ldr	r0, [r1, #76]	; 0x4c
    aa82:	subs	r0, #8
    aa84:	bl	9e84 <usb_free>
    aa88:	b.n	a408 <usb_isr+0x384>
    aa8a:	ldr	r0, [r1, #68]	; 0x44
    aa8c:	subs	r0, #8
    aa8e:	bl	9e84 <usb_free>
    aa92:	b.n	a3fc <usb_isr+0x378>
    aa94:	ldr.w	r0, [r1, #156]	; 0x9c
    aa98:	subs	r0, #8
    aa9a:	bl	9e84 <usb_free>
    aa9e:	b.n	a480 <usb_isr+0x3fc>
    aaa0:	ldr.w	r0, [r1, #148]	; 0x94
    aaa4:	subs	r0, #8
    aaa6:	bl	9e84 <usb_free>
    aaaa:	b.n	a474 <usb_isr+0x3f0>
    aaac:	ldr.w	r0, [r1, #140]	; 0x8c
    aab0:	subs	r0, #8
    aab2:	bl	9e84 <usb_free>
    aab6:	b.n	a468 <usb_isr+0x3e4>
    aab8:	ldr.w	r0, [r1, #132]	; 0x84
    aabc:	subs	r0, #8
    aabe:	bl	9e84 <usb_free>
    aac2:	b.n	a45c <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    aac4:	mov.w	lr, #2
    aac8:	b.n	a8aa <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    aaca:	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    aacc:	str	r0, [r2, #72]	; 0x48
					usb_rx_memory_needed++;
    aace:	adds	r2, r1, #1
    aad0:	strb	r2, [r5, #0]
    aad2:	b.n	a792 <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    aad4:	ldrb	r2, [r5, #0]
    aad6:	adds	r2, #1
    aad8:	strb	r2, [r5, #0]
    aada:	b.n	a966 <usb_isr+0x8e2>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    aadc:	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    aade:	str	r0, [r2, #104]	; 0x68
					usb_rx_memory_needed++;
    aae0:	adds	r2, r1, #1
    aae2:	strb	r2, [r5, #0]
    aae4:	b.n	a7ac <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    aae6:	ldrb	r2, [r5, #0]
    aae8:	adds	r2, #1
    aaea:	strb	r2, [r5, #0]
    aaec:	b.n	a9be <usb_isr+0x93a>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    aaee:	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    aaf0:	str.w	r0, [r2, #136]	; 0x88
					usb_rx_memory_needed++;
    aaf4:	adds	r2, r1, #1
    aaf6:	strb	r2, [r5, #0]
    aaf8:	b.n	a7c4 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    aafa:	ldrb	r2, [r5, #0]
    aafc:	adds	r2, #1
    aafe:	strb	r2, [r5, #0]
    ab00:	b.n	a936 <usb_isr+0x8b2>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    ab02:	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    ab04:	str	r0, [r2, #40]	; 0x28
					usb_rx_memory_needed++;
    ab06:	adds	r2, r1, #1
    ab08:	strb	r2, [r5, #0]
    ab0a:	b.n	a776 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    ab0c:	ldrb	r2, [r5, #0]
    ab0e:	adds	r2, #1
    ab10:	strb	r2, [r5, #0]
    ab12:	b.n	a992 <usb_isr+0x90e>
    ab14:	cmp.w	lr, #64	; 0x40
    ab18:	mov	ip, lr
    ab1a:	it	cs
    ab1c:	movcs.w	ip, #64	; 0x40
    ab20:	add.w	r3, r4, ip
    ab24:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    ab26:	movs	r3, #1
    ab28:	rsb	r0, ip, lr
    ab2c:	mov.w	r8, ip, lsl #16
    ab30:	movs	r2, #0
    ab32:	str	r3, [sp, #4]
    ab34:	b.n	a584 <usb_isr+0x500>
    ab36:	nop

0000ab38 <usb_init>:
}



void usb_init(void)
{
    ab38:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    ab3c:	bl	b330 <usb_init_serialnumber>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    ab40:	ldr	r4, [pc, #188]	; (ac00 <usb_init+0xc8>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab42:	ldr	r3, [pc, #192]	; (ac04 <usb_init+0xcc>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    ab44:	ldr	r0, [pc, #192]	; (ac08 <usb_init+0xd0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    ab46:	ldr.w	r8, [pc, #216]	; ac20 <usb_init+0xe8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    ab4a:	ldr	r7, [pc, #192]	; (ac0c <usb_init+0xd4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    ab4c:	ldr	r5, [pc, #192]	; (ac10 <usb_init+0xd8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    ab4e:	ldr	r6, [pc, #196]	; (ac14 <usb_init+0xdc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    ab50:	ldr.w	ip, [pc, #208]	; ac24 <usb_init+0xec>
	USB0_ERRSTAT = 0xFF;
    ab54:	ldr.w	lr, [pc, #208]	; ac28 <usb_init+0xf0>
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab58:	movs	r2, #0
    ab5a:	str	r2, [r3, #0]
		table[i].addr = 0;
    ab5c:	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab5e:	str	r2, [r3, #8]
		table[i].addr = 0;
    ab60:	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab62:	str	r2, [r3, #16]
		table[i].addr = 0;
    ab64:	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab66:	str	r2, [r3, #24]
		table[i].addr = 0;
    ab68:	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab6a:	str	r2, [r3, #32]
		table[i].addr = 0;
    ab6c:	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab6e:	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    ab70:	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab72:	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    ab74:	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab76:	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    ab78:	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab7a:	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    ab7c:	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab7e:	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    ab80:	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab82:	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    ab84:	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab86:	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    ab88:	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab8a:	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    ab8c:	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab8e:	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    ab90:	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab92:	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    ab94:	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab96:	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    ab98:	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    ab9a:	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    ab9e:	ldr	r1, [r4, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    aba0:	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    aba4:	orr.w	r1, r1, #262144	; 0x40000
    aba8:	str	r1, [r4, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    abaa:	ldr	r1, [r0, #0]
    abac:	orr.w	r1, r1, #50331648	; 0x3000000
    abb0:	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    abb2:	ubfx	r1, r3, #8, #8
    abb6:	strb.w	r1, [r8]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    abba:	add.w	r4, r4, #172032	; 0x2a000
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    abbe:	ubfx	r1, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    abc2:	lsrs	r3, r3, #24
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    abc4:	strb	r1, [r7, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    abc6:	adds	r4, #204	; 0xcc
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    abc8:	strb	r3, [r5, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    abca:	add.w	r0, r0, #2684354560	; 0xa0000000
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    abce:	movs	r3, #255	; 0xff
    abd0:	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    abd4:	ldr	r5, [pc, #64]	; (ac18 <usb_init+0xe0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    abd6:	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    abda:	addw	r0, r0, #2308	; 0x904
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    abde:	strb	r3, [r6, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    abe0:	ldr	r1, [pc, #56]	; (ac1c <usb_init+0xe4>)
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    abe2:	movs	r3, #1
    abe4:	strb.w	r3, [r8, #-8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    abe8:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    abea:	strb	r2, [r4, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    abec:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    abf0:	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    abf2:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    abf6:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    abf8:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    abfa:	strb	r2, [r1, #0]
    abfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac00:	.word	0x40048034
    ac04:	.word	0x1fff0000
    ac08:	.word	0x4000d800
    ac0c:	.word	0x400720b0
    ac10:	.word	0x400720b4
    ac14:	.word	0x40072010
    ac18:	.word	0xe000e435
    ac1c:	.word	0x40072108
    ac20:	.word	0x4007209c
    ac24:	.word	0x40072080
    ac28:	.word	0x40072088

0000ac2c <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    ac2c:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ac2e:	mrs	r2, PRIMASK
		__disable_irq();
    ac32:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    ac34:	ldrb	r3, [r0, #29]
    ac36:	cbnz	r3, ac46 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    ac38:	ldrb	r1, [r0, #28]
    ac3a:	cmp	r1, #1
    ac3c:	beq.n	ac50 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    ac3e:	cmp	r1, #3
    ac40:	beq.n	ac64 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    ac42:	movs	r3, #1
    ac44:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ac46:	cbnz	r2, ac4a <EventResponder::triggerEventNotImmediate()+0x1e>
    ac48:	cpsie	i
	}
	enableInterrupts(irq);
}
    ac4a:	ldr.w	r4, [sp], #4
    ac4e:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    ac50:	ldr	r4, [pc, #68]	; (ac98 <EventResponder::triggerEventNotImmediate()+0x6c>)
    ac52:	ldr	r1, [r4, #0]
    ac54:	cbz	r1, ac80 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    ac56:	ldr	r1, [pc, #68]	; (ac9c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    ac58:	str	r3, [r0, #20]
				_prev = lastYield;
    ac5a:	ldr	r3, [r1, #0]
    ac5c:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    ac5e:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    ac60:	str	r0, [r3, #20]
    ac62:	b.n	ac42 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    ac64:	ldr	r4, [pc, #56]	; (aca0 <EventResponder::triggerEventNotImmediate()+0x74>)
    ac66:	ldr	r1, [r4, #0]
    ac68:	cbz	r1, ac8c <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    ac6a:	ldr	r1, [pc, #56]	; (aca4 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    ac6c:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    ac6e:	ldr	r3, [r1, #0]
    ac70:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    ac72:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    ac74:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    ac76:	ldr	r3, [pc, #48]	; (aca8 <EventResponder::triggerEventNotImmediate()+0x7c>)
    ac78:	mov.w	r1, #268435456	; 0x10000000
    ac7c:	str	r1, [r3, #0]
    ac7e:	b.n	ac42 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    ac80:	ldr	r3, [pc, #24]	; (ac9c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    ac82:	str	r1, [r0, #20]
				_prev = nullptr;
    ac84:	str	r1, [r0, #24]
				firstYield = this;
    ac86:	str	r0, [r4, #0]
				lastYield = this;
    ac88:	str	r0, [r3, #0]
    ac8a:	b.n	ac42 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    ac8c:	ldr	r3, [pc, #20]	; (aca4 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    ac8e:	str	r1, [r0, #20]
				_prev = nullptr;
    ac90:	str	r1, [r0, #24]
				firstInterrupt = this;
    ac92:	str	r0, [r4, #0]
				lastInterrupt = this;
    ac94:	str	r0, [r3, #0]
    ac96:	b.n	ac76 <EventResponder::triggerEventNotImmediate()+0x4a>
    ac98:	.word	0x200204bc
    ac9c:	.word	0x200204b8
    aca0:	.word	0x200204ac
    aca4:	.word	0x200204b0
    aca8:	.word	0xe000ed04

0000acac <pendablesrvreq_isr>:
	}
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
    acac:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    acae:	mrs	r2, PRIMASK
		__disable_irq();
    acb2:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    acb4:	ldr	r4, [pc, #48]	; (ace8 <pendablesrvreq_isr+0x3c>)
    acb6:	ldr	r0, [r4, #0]
		if (first) {
    acb8:	cbz	r0, acdc <pendablesrvreq_isr+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    acba:	ldr	r6, [pc, #48]	; (acec <pendablesrvreq_isr+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    acbc:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    acbe:	ldr	r3, [r0, #20]
    acc0:	str	r3, [r4, #0]
			if (firstInterrupt) {
    acc2:	cbz	r3, ace2 <pendablesrvreq_isr+0x36>
				firstInterrupt->_prev = nullptr;
    acc4:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    acc6:	cbnz	r2, acca <pendablesrvreq_isr+0x1e>
    acc8:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    acca:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    accc:	ldr	r3, [r0, #8]
    acce:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    acd0:	mrs	r2, PRIMASK
		__disable_irq();
    acd4:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    acd6:	ldr	r0, [r4, #0]
		if (first) {
    acd8:	cmp	r0, #0
    acda:	bne.n	acbe <pendablesrvreq_isr+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    acdc:	cbnz	r2, ace0 <pendablesrvreq_isr+0x34>
    acde:	cpsie	i
    ace0:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    ace2:	str	r3, [r6, #0]
    ace4:	b.n	acc6 <pendablesrvreq_isr+0x1a>
    ace6:	nop
    ace8:	.word	0x200204ac
    acec:	.word	0x200204b0

0000acf0 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    acf0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	MillisTimer *timer = listActive;
    acf4:	ldr	r6, [pc, #484]	; (aedc <MillisTimer::runFromTimer()+0x1ec>)
    acf6:	ldr	r4, [r6, #0]
	while (timer) {
    acf8:	cmp	r4, #0
    acfa:	beq.n	ad60 <MillisTimer::runFromTimer()+0x70>
		if (timer->_ms > 0) {
    acfc:	ldr	r3, [r4, #0]
    acfe:	cmp	r3, #0
    ad00:	bne.n	ad5c <MillisTimer::runFromTimer()+0x6c>
    ad02:	ldr.w	r9, [pc, #492]	; aef0 <MillisTimer::runFromTimer()+0x200>
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    ad06:	ldr	r7, [pc, #472]	; (aee0 <MillisTimer::runFromTimer()+0x1f0>)
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    ad08:	ldr.w	r8, [pc, #488]	; aef4 <MillisTimer::runFromTimer()+0x204>
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    ad0c:	mov	r5, r3
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    ad0e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    ad10:	cbz	r3, ad14 <MillisTimer::runFromTimer()+0x24>
    ad12:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    ad14:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    ad16:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    ad18:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    ad1a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    ad1c:	ldr	r3, [r3, #0]
    ad1e:	cmp	r3, r9
    ad20:	bne.n	adf8 <MillisTimer::runFromTimer()+0x108>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    ad22:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    ad24:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    ad26:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    ad28:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    ad2a:	beq.n	ae00 <MillisTimer::runFromTimer()+0x110>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ad2c:	mrs	r2, PRIMASK
		__disable_irq();
    ad30:	cpsid	i
// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    ad32:	ldrb	r3, [r0, #29]
    ad34:	cbnz	r3, ad48 <MillisTimer::runFromTimer()+0x58>
		// not already triggered
		if (_type == EventTypeYield) {
    ad36:	ldrb	r1, [r0, #28]
    ad38:	cmp	r1, #1
    ad3a:	beq.w	ae5e <MillisTimer::runFromTimer()+0x16e>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    ad3e:	cmp	r1, #3
    ad40:	beq.w	ae76 <MillisTimer::runFromTimer()+0x186>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    ad44:	movs	r3, #1
    ad46:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ad48:	cbnz	r2, ad4c <MillisTimer::runFromTimer()+0x5c>
    ad4a:	cpsie	i
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
			if (timer->_reload) {
    ad4c:	ldr	r3, [r4, #4]
    ad4e:	cmp	r3, #0
    ad50:	bne.n	add2 <MillisTimer::runFromTimer()+0xe2>
    ad52:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    ad54:	cbz	r4, ad60 <MillisTimer::runFromTimer()+0x70>
		if (timer->_ms > 0) {
    ad56:	ldr	r3, [r4, #0]
    ad58:	cmp	r3, #0
    ad5a:	beq.n	ad0e <MillisTimer::runFromTimer()+0x1e>
			timer->_ms--;
    ad5c:	subs	r3, #1
    ad5e:	str	r3, [r4, #0]
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ad60:	mrs	r3, PRIMASK
		__disable_irq();
    ad64:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    ad66:	ldr	r2, [pc, #380]	; (aee4 <MillisTimer::runFromTimer()+0x1f4>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    ad68:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    ad6a:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    ad6c:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    ad6e:	cbnz	r3, ad72 <MillisTimer::runFromTimer()+0x82>
    ad70:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    ad72:	cmp	r0, #0
    ad74:	beq.w	aed2 <MillisTimer::runFromTimer()+0x1e2>
    ad78:	mov.w	r8, #0
    ad7c:	ldr	r5, [r6, #0]
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    ad7e:	mov	ip, r8
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    ad80:	mov.w	lr, #2
    ad84:	b.n	ada4 <MillisTimer::runFromTimer()+0xb4>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    ad86:	subs	r3, r1, r3
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    ad88:	str	r5, [r0, #8]
		_prev = nullptr;
    ad8a:	str.w	ip, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    ad8e:	mov	r1, r0
    ad90:	str	r3, [r5, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    ad92:	str	r0, [r5, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    ad94:	mov.w	r8, #1
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    ad98:	strb.w	lr, [r0, #20]
    ad9c:	mov	r5, r1
    ad9e:	mov	r0, r7
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    ada0:	cmp	r7, #0
    ada2:	beq.n	ae48 <MillisTimer::runFromTimer()+0x158>
		MillisTimer *next = waiting->_next;
    ada4:	ldr	r7, [r0, #8]
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    ada6:	cmp	r5, #0
    ada8:	beq.n	ae52 <MillisTimer::runFromTimer()+0x162>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    adaa:	ldr	r3, [r0, #0]
    adac:	ldr	r1, [r5, #0]
    adae:	cmp	r3, r1
    adb0:	bcc.n	ad86 <MillisTimer::runFromTimer()+0x96>
    adb2:	mov	r4, r5
    adb4:	b.n	adbe <MillisTimer::runFromTimer()+0xce>
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    adb6:	ldr	r1, [r2, #0]
    adb8:	cmp	r3, r1
    adba:	mov	r4, r2
    adbc:	bcc.n	ae2a <MillisTimer::runFromTimer()+0x13a>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    adbe:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    adc0:	subs	r3, r3, r1
    adc2:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    adc4:	cmp	r2, #0
    adc6:	bne.n	adb6 <MillisTimer::runFromTimer()+0xc6>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    adc8:	str	r2, [r0, #8]
		_prev = timer;
    adca:	str	r4, [r0, #12]
		timer->_next = this;
    adcc:	mov	r1, r5
    adce:	str	r0, [r4, #8]
    add0:	b.n	ad98 <MillisTimer::runFromTimer()+0xa8>
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    add2:	ldr	r0, [r6, #0]
    add4:	ldr	r2, [pc, #260]	; (aedc <MillisTimer::runFromTimer()+0x1ec>)
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
    add6:	str	r3, [r4, #0]
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    add8:	cmp	r0, #0
    adda:	beq.n	aeae <MillisTimer::runFromTimer()+0x1be>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    addc:	ldr	r1, [r0, #0]
    adde:	cmp	r3, r1
    ade0:	bcs.n	ae06 <MillisTimer::runFromTimer()+0x116>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    ade2:	subs	r3, r1, r3
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    ade4:	str	r0, [r4, #8]
		_prev = nullptr;
    ade6:	str	r5, [r4, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    ade8:	str	r3, [r0, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    adea:	str	r4, [r0, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    adec:	str	r4, [r2, #0]
    adee:	mov	r0, r4
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    adf0:	movs	r3, #2
    adf2:	strb	r3, [r4, #20]
    adf4:	mov	r4, r0
    adf6:	b.n	ad56 <MillisTimer::runFromTimer()+0x66>
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    adf8:	mov	r2, r4
    adfa:	movs	r1, #0
    adfc:	blx	r3
    adfe:	b.n	ad4c <MillisTimer::runFromTimer()+0x5c>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    ae00:	ldr	r3, [r0, #8]
    ae02:	blx	r3
    ae04:	b.n	ad4c <MillisTimer::runFromTimer()+0x5c>
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    ae06:	mov	lr, r0
    ae08:	b.n	ae12 <MillisTimer::runFromTimer()+0x122>
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    ae0a:	ldr	r1, [r2, #0]
    ae0c:	cmp	r3, r1
    ae0e:	mov	lr, r2
    ae10:	bcc.n	ae90 <MillisTimer::runFromTimer()+0x1a0>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    ae12:	ldr.w	r2, [lr, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    ae16:	subs	r3, r3, r1
    ae18:	str	r3, [r4, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    ae1a:	cmp	r2, #0
    ae1c:	bne.n	ae0a <MillisTimer::runFromTimer()+0x11a>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    ae1e:	str	r2, [r4, #8]
		_prev = timer;
    ae20:	str.w	lr, [r4, #12]
		timer->_next = this;
    ae24:	str.w	r4, [lr, #8]
    ae28:	b.n	adf0 <MillisTimer::runFromTimer()+0x100>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    ae2a:	ldr	r2, [r2, #12]
    ae2c:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    ae2e:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    ae30:	str	r0, [r4, #12]
				_prev->_next = this;
    ae32:	ldr	r2, [r0, #12]
				timer->_ms -= _ms;
    ae34:	subs	r3, r1, r3
				_state = TimerActive;
    ae36:	mov	r1, r5
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    ae38:	str	r0, [r2, #8]
    ae3a:	mov	r5, r1
				timer->_ms -= _ms;
    ae3c:	str	r3, [r4, #0]
				_state = TimerActive;
    ae3e:	strb.w	lr, [r0, #20]
    ae42:	mov	r0, r7
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    ae44:	cmp	r7, #0
    ae46:	bne.n	ada4 <MillisTimer::runFromTimer()+0xb4>
    ae48:	cmp.w	r8, #0
    ae4c:	bne.n	aed6 <MillisTimer::runFromTimer()+0x1e6>
    ae4e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    ae52:	str	r5, [r0, #8]
		_prev = nullptr;
    ae54:	str	r5, [r0, #12]
    ae56:	mov	r1, r0
    ae58:	mov.w	r8, #1
    ae5c:	b.n	ad98 <MillisTimer::runFromTimer()+0xa8>
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    ae5e:	ldr.w	lr, [pc, #152]	; aef8 <MillisTimer::runFromTimer()+0x208>
    ae62:	ldr.w	r1, [lr]
    ae66:	cbz	r1, aeb8 <MillisTimer::runFromTimer()+0x1c8>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    ae68:	ldr	r1, [pc, #124]	; (aee8 <MillisTimer::runFromTimer()+0x1f8>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    ae6a:	str	r3, [r0, #20]
				_prev = lastYield;
    ae6c:	ldr	r3, [r1, #0]
    ae6e:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    ae70:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    ae72:	str	r0, [r3, #20]
    ae74:	b.n	ad44 <MillisTimer::runFromTimer()+0x54>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    ae76:	ldr	r1, [r7, #0]
    ae78:	cbz	r1, aec6 <MillisTimer::runFromTimer()+0x1d6>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    ae7a:	ldr	r1, [pc, #112]	; (aeec <MillisTimer::runFromTimer()+0x1fc>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    ae7c:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    ae7e:	ldr	r3, [r1, #0]
    ae80:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    ae82:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    ae84:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    ae86:	mov.w	r3, #268435456	; 0x10000000
    ae8a:	str.w	r3, [r8]
    ae8e:	b.n	ad44 <MillisTimer::runFromTimer()+0x54>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    ae90:	ldr	r2, [r2, #12]
    ae92:	str	r2, [r4, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    ae94:	str.w	lr, [r4, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    ae98:	str.w	r4, [lr, #12]
				_prev->_next = this;
    ae9c:	ldr	r2, [r4, #12]
				timer->_ms -= _ms;
    ae9e:	subs	r3, r1, r3
				_state = TimerActive;
    aea0:	movs	r1, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    aea2:	str	r4, [r2, #8]
				timer->_ms -= _ms;
    aea4:	str.w	r3, [lr]
				_state = TimerActive;
    aea8:	strb	r1, [r4, #20]
    aeaa:	mov	r4, r0
    aeac:	b.n	ad56 <MillisTimer::runFromTimer()+0x66>

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    aeae:	str	r0, [r4, #8]
		_prev = nullptr;
    aeb0:	str	r0, [r4, #12]
		listActive = this;
    aeb2:	str	r4, [r2, #0]
    aeb4:	mov	r0, r4
    aeb6:	b.n	adf0 <MillisTimer::runFromTimer()+0x100>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    aeb8:	ldr	r3, [pc, #44]	; (aee8 <MillisTimer::runFromTimer()+0x1f8>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    aeba:	str	r1, [r0, #20]
				_prev = nullptr;
    aebc:	str	r1, [r0, #24]
				firstYield = this;
    aebe:	str.w	r0, [lr]
				lastYield = this;
    aec2:	str	r0, [r3, #0]
    aec4:	b.n	ad44 <MillisTimer::runFromTimer()+0x54>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    aec6:	ldr	r3, [pc, #36]	; (aeec <MillisTimer::runFromTimer()+0x1fc>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    aec8:	str	r1, [r0, #20]
				_prev = nullptr;
    aeca:	str	r1, [r0, #24]
				firstInterrupt = this;
    aecc:	str	r0, [r7, #0]
				lastInterrupt = this;
    aece:	str	r0, [r3, #0]
    aed0:	b.n	ae86 <MillisTimer::runFromTimer()+0x196>
    aed2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aed6:	str	r1, [r6, #0]
    aed8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aedc:	.word	0x200204b4
    aee0:	.word	0x200204ac
    aee4:	.word	0x200204c0
    aee8:	.word	0x200204b8
    aeec:	.word	0x200204b0
    aef0:	.word	0x00002c4d
    aef4:	.word	0xe000ed04
    aef8:	.word	0x200204bc

0000aefc <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    aefc:	ldr	r2, [pc, #8]	; (af08 <systick_isr+0xc>)
    aefe:	ldr	r3, [r2, #0]
    af00:	adds	r3, #1
    af02:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    af04:	b.w	acf0 <MillisTimer::runFromTimer()>
    af08:	.word	0x200203c0

0000af0c <usb_serial_class::clear()>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    af0c:	b.w	9690 <usb_serial_flush_input>

0000af10 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    af10:	b.w	9644 <usb_serial_peekchar>

0000af14 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    af14:	b.w	95fc <usb_serial_getchar>

0000af18 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    af18:	b.w	9674 <usb_serial_available>

0000af1c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    af1c:	b.w	98d0 <usb_serial_flush_output>

0000af20 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    af20:	b.w	9888 <usb_serial_write_buffer_free>

0000af24 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    af24:	mov	r0, r1
    af26:	mov	r1, r2
    af28:	b.w	96c8 <usb_serial_write>

0000af2c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    af2c:	mov	r0, r1
    af2e:	b.w	9870 <usb_serial_putchar>
    af32:	nop

0000af34 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    af34:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    af36:	mov	r6, r1
    af38:	cbz	r1, af58 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    af3a:	cbz	r2, af5c <Print::write(unsigned char const*, unsigned int)+0x28>
    af3c:	mov	r7, r0
    af3e:	mov	r4, r2
    af40:	movs	r5, #0
    af42:	ldr	r3, [r7, #0]
    af44:	ldrb.w	r1, [r6], #1
    af48:	ldr	r3, [r3, #0]
    af4a:	mov	r0, r7
    af4c:	blx	r3
    af4e:	subs	r4, #1
    af50:	add	r5, r0
    af52:	bne.n	af42 <Print::write(unsigned char const*, unsigned int)+0xe>
    af54:	mov	r0, r5
    af56:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    af58:	mov	r0, r1
    af5a:	pop	{r3, r4, r5, r6, r7, pc}
    af5c:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    af5e:	pop	{r3, r4, r5, r6, r7, pc}

0000af60 <Print::print(long)>:
	return count;
}


size_t Print::print(long n)
{
    af60:	push	{r4, r5, r6, lr}
	uint8_t sign=0;

	if (n < 0) {
    af62:	cmp	r1, #0
	return count;
}


size_t Print::print(long n)
{
    af64:	sub	sp, #40	; 0x28
	uint8_t sign=0;

	if (n < 0) {
    af66:	blt.n	af82 <Print::print(long)+0x22>
	} else if (base == 1) {
		base = 10;
	}


	if (n == 0) {
    af68:	bne.n	afdc <Print::print(long)+0x7c>
		buf[sizeof(buf) - 1] = '0';
    af6a:	movs	r3, #48	; 0x30
    af6c:	strb.w	r3, [sp, #37]	; 0x25
    af70:	movs	r2, #1
    af72:	movs	r1, #33	; 0x21
	}
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
    af74:	ldr	r3, [r0, #0]
    af76:	add	r4, sp, #4
    af78:	ldr	r3, [r3, #4]
    af7a:	add	r1, r4
    af7c:	blx	r3
	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
}
    af7e:	add	sp, #40	; 0x28
    af80:	pop	{r4, r5, r6, pc}
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    af82:	ldr	r3, [pc, #136]	; (b00c <Print::print(long)+0xac>)

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    af84:	negs	r1, r1
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    af86:	umull	r2, r3, r3, r1
    af8a:	lsrs	r3, r3, #3
    af8c:	add.w	r2, r3, r3, lsl #2
    af90:	sub.w	r1, r1, r2, lsl #1
    af94:	adds	r1, #48	; 0x30
    af96:	strb.w	r1, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
    af9a:	cbz	r3, affe <Print::print(long)+0x9e>
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    af9c:	movs	r6, #45	; 0x2d
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    af9e:	ldr	r5, [pc, #108]	; (b00c <Print::print(long)+0xac>)
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    afa0:	movs	r2, #33	; 0x21
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    afa2:	umull	r4, r1, r5, r3
    afa6:	lsrs	r1, r1, #3
    afa8:	add.w	r4, r1, r1, lsl #2
			n /= base;
			if (n == 0) break;
			i--;
    afac:	subs	r2, #1
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    afae:	sub.w	r3, r3, r4, lsl #1
			n /= base;
			if (n == 0) break;
			i--;
    afb2:	uxtb	r2, r2
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    afb4:	add	r4, sp, #40	; 0x28
    afb6:	add	r4, r2
    afb8:	adds	r3, #48	; 0x30
    afba:	strb.w	r3, [r4, #-36]
			n /= base;
			if (n == 0) break;
    afbe:	mov	r3, r1
    afc0:	cmp	r1, #0
    afc2:	bne.n	afa2 <Print::print(long)+0x42>
			i--;
		}
	}
	if (sign) {
    afc4:	cbz	r6, b002 <Print::print(long)+0xa2>
		i--;
    afc6:	subs	r2, #1
    afc8:	uxtb	r2, r2
		buf[i] = '-';
    afca:	add	r3, sp, #40	; 0x28
    afcc:	add	r3, r2
    afce:	mov	r1, r2
    afd0:	movs	r2, #45	; 0x2d
    afd2:	strb.w	r2, [r3, #-36]
    afd6:	rsb	r2, r1, #34	; 0x22
    afda:	b.n	af74 <Print::print(long)+0x14>
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    afdc:	ldr	r3, [pc, #44]	; (b00c <Print::print(long)+0xac>)
    afde:	umull	r2, r3, r3, r1
    afe2:	lsrs	r3, r3, #3
    afe4:	add.w	r2, r3, r3, lsl #2
    afe8:	sub.w	r1, r1, r2, lsl #1
    afec:	adds	r1, #48	; 0x30
    afee:	strb.w	r1, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
    aff2:	cbz	r3, aff8 <Print::print(long)+0x98>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    aff4:	movs	r6, #0
    aff6:	b.n	af9e <Print::print(long)+0x3e>
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    aff8:	movs	r2, #1
    affa:	movs	r1, #33	; 0x21
    affc:	b.n	af74 <Print::print(long)+0x14>
    affe:	movs	r2, #33	; 0x21
    b000:	b.n	afc6 <Print::print(long)+0x66>
    b002:	mov	r1, r2
    b004:	rsb	r2, r2, #34	; 0x22
    b008:	b.n	af74 <Print::print(long)+0x14>
    b00a:	nop
    b00c:	.word	0xcccccccd

0000b010 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    b010:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    b012:	ldr	r2, [pc, #24]	; (b02c <Print::println()+0x1c>)
	return write(buf, 2);
    b014:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    b016:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    b018:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    b01a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    b01c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    b01e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    b022:	movs	r2, #2
    b024:	blx	r3
}
    b026:	add	sp, #12
    b028:	ldr.w	pc, [sp], #4
    b02c:	.word	0x00014114

0000b030 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    b030:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    b032:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    b034:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    b036:	ldr	r3, [r3, #4]
    b038:	blx	r3
	return len;
}
    b03a:	mov	r0, r4
    b03c:	pop	{r4, pc}
    b03e:	nop

0000b040 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    b040:	push	{r1, r2, r3}
    b042:	push	{lr}
    b044:	sub	sp, #8
    b046:	add	r2, sp, #12
    b048:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    b04c:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    b04e:	bl	10a48 <vdprintf>
#endif
}
    b052:	add	sp, #8
    b054:	ldr.w	lr, [sp], #4
    b058:	add	sp, #12
    b05a:	bx	lr

0000b05c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    b05c:	push	{r4, r5, r6, r7, lr}
    b05e:	mov	r7, r0
    b060:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    b062:	cmp	r2, #0
    b064:	beq.n	b0ce <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    b066:	cmp	r2, #1
    b068:	it	eq
    b06a:	moveq	r2, #10
	}


	if (n == 0) {
    b06c:	cbz	r1, b0c4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    b06e:	movs	r4, #33	; 0x21
    b070:	b.n	b074 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    b072:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    b074:	udiv	r5, r1, r2
    b078:	mls	r1, r2, r5, r1
    b07c:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b07e:	cmp	r1, #9
    b080:	add.w	r1, r0, #48	; 0x30
    b084:	it	ls
    b086:	uxtbls	r0, r1
    b088:	add	r1, sp, #40	; 0x28
    b08a:	it	hi
    b08c:	addhi	r0, #55	; 0x37
    b08e:	add	r1, r4
    b090:	it	hi
    b092:	uxtbhi	r0, r0
    b094:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    b098:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    b09a:	mov	r1, r5
    b09c:	cmp	r5, #0
    b09e:	bne.n	b072 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    b0a0:	cbz	r3, b0b0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    b0a2:	subs	r4, #1
    b0a4:	uxtb	r4, r4
		buf[i] = '-';
    b0a6:	add	r3, sp, #40	; 0x28
    b0a8:	add	r3, r4
    b0aa:	movs	r2, #45	; 0x2d
    b0ac:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    b0b0:	ldr	r3, [r7, #0]
    b0b2:	add	r2, sp, #4
    b0b4:	adds	r1, r2, r4
    b0b6:	ldr	r3, [r3, #4]
    b0b8:	mov	r0, r7
    b0ba:	rsb	r2, r4, #34	; 0x22
    b0be:	blx	r3
}
    b0c0:	add	sp, #44	; 0x2c
    b0c2:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    b0c4:	movs	r2, #48	; 0x30
    b0c6:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    b0ca:	movs	r4, #33	; 0x21
    b0cc:	b.n	b0a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    b0ce:	ldr	r3, [r0, #0]
    b0d0:	uxtb	r1, r1
    b0d2:	ldr	r3, [r3, #0]
    b0d4:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    b0d6:	add	sp, #44	; 0x2c
    b0d8:	pop	{r4, r5, r6, r7, pc}
    b0da:	nop

0000b0dc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    b0dc:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    b0de:	bl	21a0 <setup>
	while (1) {
		loop();
    b0e2:	bl	2714 <loop>
		yield();
    b0e6:	bl	1724 <yield>
    b0ea:	b.n	b0e2 <main+0x6>

0000b0ec <software_isr>:

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    b0ec:	ldr	r1, [pc, #104]	; (b158 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    b0ee:	ldr	r2, [pc, #108]	; (b15c <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    b0f0:	ldr	r0, [pc, #108]	; (b160 <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    b0f2:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    b0f4:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    b0f6:	ldr	r5, [pc, #108]	; (b164 <software_isr+0x78>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    b0f8:	ldr	r4, [r0, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    b0fa:	orr.w	r3, r3, #16777216	; 0x1000000
    b0fe:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    b100:	ldr	r3, [r2, #0]
    b102:	orr.w	r3, r3, #1
    b106:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    b108:	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    b10a:	cbnz	r4, b112 <software_isr+0x26>
    b10c:	b.n	b13a <software_isr+0x4e>
    b10e:	ldr	r4, [r4, #20]
    b110:	cbz	r4, b13a <software_isr+0x4e>
		if (p->active) {
    b112:	ldrb	r3, [r4, #8]
    b114:	cmp	r3, #0
    b116:	beq.n	b10e <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    b118:	ldr	r3, [r4, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    b11a:	ldr	r7, [r5, #0]
			p->update();
    b11c:	ldr	r3, [r3, #0]
    b11e:	mov	r0, r4
    b120:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    b122:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    b124:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    b126:	subs	r3, r3, r7
    b128:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    b12a:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    b12c:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    b12e:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    b130:	it	hi
    b132:	strhhi	r2, [r4, #6]

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    b134:	ldr	r4, [r4, #20]
    b136:	cmp	r4, #0
    b138:	bne.n	b112 <software_isr+0x26>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    b13a:	ldr	r3, [pc, #40]	; (b164 <software_isr+0x78>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    b13c:	ldr	r2, [pc, #40]	; (b168 <software_isr+0x7c>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    b13e:	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    b140:	ldrh	r0, [r2, #0]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    b142:	ldr	r4, [pc, #40]	; (b16c <software_isr+0x80>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    b144:	subs	r3, r3, r6
    b146:	lsrs	r3, r3, #4
	AudioStream::cpu_cycles_total = totalcycles;
    b148:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    b14a:	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    b14c:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    b14e:	bls.n	b154 <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    b150:	strh	r1, [r2, #0]
    b152:	pop	{r3, r4, r5, r6, r7, pc}
    b154:	pop	{r3, r4, r5, r6, r7, pc}
    b156:	nop
    b158:	.word	0xe000edfc
    b15c:	.word	0xe0001000
    b160:	.word	0x200204c4
    b164:	.word	0xe0001004
    b168:	.word	0x200204c8
    b16c:	.word	0x200204ca

0000b170 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    b170:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b174:	ldr	r5, [pc, #200]	; (b240 <Stream::parseInt(char)+0xd0>)
    b176:	sub	sp, #20
    b178:	mov	r4, r0
    b17a:	mov	r7, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b17c:	ldr	r3, [r5, #0]
    b17e:	str	r3, [sp, #4]
	return ret;
    b180:	ldr	r6, [sp, #4]
    b182:	b.n	b196 <Stream::parseInt(char)+0x26>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    b184:	bl	1724 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b188:	ldr	r3, [r5, #0]
    b18a:	str	r3, [sp, #0]
	return ret;
    b18c:	ldr	r3, [sp, #0]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    b18e:	ldr	r2, [r4, #8]
    b190:	subs	r3, r3, r6
    b192:	cmp	r3, r2
    b194:	bcs.n	b1b8 <Stream::parseInt(char)+0x48>
    c = peek();
    b196:	ldr	r3, [r4, #0]
    b198:	mov	r0, r4
    b19a:	ldr	r3, [r3, #24]
    b19c:	blx	r3
    if (c >= 0) return c;
    b19e:	cmp	r0, #0
    b1a0:	blt.n	b184 <Stream::parseInt(char)+0x14>
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    b1a2:	cmp	r0, #45	; 0x2d
    b1a4:	beq.n	b1c0 <Stream::parseInt(char)+0x50>
    if (c >= '0' && c <= '9') return c;
    b1a6:	sub.w	r3, r0, #48	; 0x30
    b1aa:	cmp	r3, #9
    b1ac:	bls.n	b1c0 <Stream::parseInt(char)+0x50>
    read();  // discard non-numeric
    b1ae:	ldr	r3, [r4, #0]
    b1b0:	mov	r0, r4
    b1b2:	ldr	r3, [r3, #20]
    b1b4:	blx	r3
    b1b6:	b.n	b17c <Stream::parseInt(char)+0xc>
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    b1b8:	movs	r0, #0
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    b1ba:	add	sp, #20
    b1bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b1c0:	mov.w	r8, #0
    b1c4:	mov	r9, r8
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    b1c6:	cmp	r0, r7
    b1c8:	beq.n	b1e2 <Stream::parseInt(char)+0x72>
      ; // ignore this charactor
    else if(c == '-')
    b1ca:	cmp	r0, #45	; 0x2d
    b1cc:	beq.n	b220 <Stream::parseInt(char)+0xb0>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    b1ce:	sub.w	r3, r0, #48	; 0x30
    b1d2:	cmp	r3, #9
    b1d4:	bhi.n	b1e2 <Stream::parseInt(char)+0x72>
      value = value * 10 + c - '0';
    b1d6:	add.w	r8, r8, r8, lsl #2
    b1da:	add.w	r8, r0, r8, lsl #1
    b1de:	sub.w	r8, r8, #48	; 0x30
    read();  // consume the character we got with peek
    b1e2:	ldr	r3, [r4, #0]
    b1e4:	mov	r0, r4
    b1e6:	ldr	r3, [r3, #20]
    b1e8:	blx	r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b1ea:	ldr	r3, [r5, #0]
    b1ec:	str	r3, [sp, #12]
	return ret;
    b1ee:	ldr	r6, [sp, #12]
    b1f0:	b.n	b204 <Stream::parseInt(char)+0x94>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    b1f2:	bl	1724 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b1f6:	ldr	r3, [r5, #0]
    b1f8:	str	r3, [sp, #8]
	return ret;
    b1fa:	ldr	r3, [sp, #8]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    b1fc:	ldr	r2, [r4, #8]
    b1fe:	subs	r3, r3, r6
    b200:	cmp	r3, r2
    b202:	bcs.n	b226 <Stream::parseInt(char)+0xb6>
    c = peek();
    b204:	ldr	r3, [r4, #0]
    b206:	mov	r0, r4
    b208:	ldr	r3, [r3, #24]
    b20a:	blx	r3
    if (c >= 0) return c;
    b20c:	cmp	r0, #0
    b20e:	blt.n	b1f2 <Stream::parseInt(char)+0x82>
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    b210:	sub.w	r3, r0, #48	; 0x30
    b214:	cmp	r3, #9
    b216:	bls.n	b1c6 <Stream::parseInt(char)+0x56>
    b218:	cmp	r0, r7
    b21a:	bne.n	b226 <Stream::parseInt(char)+0xb6>
    b21c:	mov	r0, r7
    b21e:	b.n	b1c6 <Stream::parseInt(char)+0x56>

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    b220:	mov.w	r9, #1
    b224:	b.n	b1e2 <Stream::parseInt(char)+0x72>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    b226:	cmp.w	r9, #0
    b22a:	beq.n	b236 <Stream::parseInt(char)+0xc6>
    value = -value;
    b22c:	rsb	r0, r8, #0
  return value;
}
    b230:	add	sp, #20
    b232:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b236:	mov	r0, r8
    b238:	add	sp, #20
    b23a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b23e:	nop
    b240:	.word	0x200203c0

0000b244 <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    b244:	movs	r1, #1
    b246:	b.w	b170 <Stream::parseInt(char)>
    b24a:	nop

0000b24c <operator delete(void*, unsigned int)>:
    b24c:	b.w	c574 <free>

0000b250 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    b250:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b252:	ldr	r0, [pc, #164]	; (b2f8 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b254:	ldr	r2, [pc, #164]	; (b2fc <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    b256:	ldr	r3, [pc, #168]	; (b300 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b258:	ldr	r5, [pc, #168]	; (b304 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b25a:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b25c:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b25e:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b260:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    b262:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b264:	ldr	r4, [pc, #160]	; (b308 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    b266:	cmp	r3, #8
    b268:	beq.n	b2cc <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    b26a:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b26c:	ldr	r0, [pc, #156]	; (b30c <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b26e:	ldr	r1, [pc, #160]	; (b310 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    b270:	beq.n	b2e2 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    b272:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    b274:	ite	eq
    b276:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b278:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b27a:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b27c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b27e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b280:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b282:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b284:	ldr	r3, [pc, #140]	; (b314 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b286:	ldr	r1, [pc, #144]	; (b318 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b288:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b28a:	ldr	r2, [pc, #144]	; (b31c <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b28c:	cbz	r3, b2be <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b28e:	movs	r3, #1
    b290:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b292:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    b294:	ldr	r3, [pc, #136]	; (b320 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    b296:	ldr	r1, [pc, #140]	; (b324 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    b298:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    b29a:	ldr	r2, [pc, #140]	; (b328 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    b29c:	cmp	r3, #1
    b29e:	bls.n	b2ee <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    b2a0:	cmp	r3, #4
    b2a2:	bls.n	b2c4 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    b2a4:	cmp	r3, #8
    b2a6:	bls.n	b2e6 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    b2a8:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    b2aa:	ite	ls
    b2ac:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    b2ae:	movhi	r3, #135	; 0x87
    b2b0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    b2b2:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    b2b4:	ldr	r3, [pc, #116]	; (b32c <analog_init+0xdc>)
    b2b6:	movs	r2, #1
    b2b8:	strb	r2, [r3, #0]
}
    b2ba:	pop	{r4, r5}
    b2bc:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    b2be:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    b2c0:	str	r3, [r2, #0]
    b2c2:	b.n	b294 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    b2c4:	movs	r3, #132	; 0x84
    b2c6:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    b2c8:	str	r3, [r2, #0]
    b2ca:	b.n	b2b4 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b2cc:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b2d0:	ldr	r1, [pc, #60]	; (b310 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b2d2:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b2d4:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b2d6:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b2d8:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b2da:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b2dc:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b2de:	str	r3, [r1, #0]
    b2e0:	b.n	b284 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b2e2:	movs	r2, #57	; 0x39
    b2e4:	b.n	b2d6 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    b2e6:	movs	r3, #133	; 0x85
    b2e8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    b2ea:	str	r3, [r2, #0]
    b2ec:	b.n	b2b4 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    b2ee:	movs	r3, #128	; 0x80
    b2f0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    b2f2:	str	r3, [r2, #0]
    b2f4:	b.n	b2b4 <analog_init+0x64>
    b2f6:	nop
    b2f8:	.word	0x40074000
    b2fc:	.word	0x40074001
    b300:	.word	0x1fff08a8
    b304:	.word	0x4003b008
    b308:	.word	0x4003b00c
    b30c:	.word	0x400bb008
    b310:	.word	0x400bb00c
    b314:	.word	0x200204cd
    b318:	.word	0x4003b020
    b31c:	.word	0x400bb020
    b320:	.word	0x1fff08a9
    b324:	.word	0x4003b024
    b328:	.word	0x400bb024
    b32c:	.word	0x200204cc

0000b330 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    b330:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    b332:	ldr	r2, [pc, #196]	; (b3f8 <usb_init_serialnumber+0xc8>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b334:	ldr	r3, [pc, #196]	; (b3fc <usb_init_serialnumber+0xcc>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    b336:	ldr	r1, [pc, #200]	; (b400 <usb_init_serialnumber+0xd0>)
    b338:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b33a:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    b33c:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b33e:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    b340:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    b342:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    b344:	ldrb	r3, [r2, #0]
    b346:	lsls	r3, r3, #24
    b348:	bpl.n	b344 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b34a:	push	{lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    b34c:	ldr	r3, [pc, #180]	; (b404 <usb_init_serialnumber+0xd4>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b34e:	sub	sp, #20
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    b350:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    b352:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b354:	ldr	r3, [pc, #176]	; (b408 <usb_init_serialnumber+0xd8>)
    b356:	cmp	r0, r3
    b358:	it	ls
    b35a:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    b35e:	mov.w	r2, #10
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b362:	it	ls
    b364:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    b366:	add	r1, sp, #4
    b368:	bl	b410 <ultoa>
	for (i=0; i<10; i++) {
		char c = buf[i];
    b36c:	ldrb.w	r2, [sp, #4]
    b370:	ldr	r3, [pc, #152]	; (b40c <usb_init_serialnumber+0xdc>)
		if (!c) break;
    b372:	cbz	r2, b3cc <usb_init_serialnumber+0x9c>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b374:	ldrb.w	r1, [sp, #5]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b378:	strh	r2, [r3, #2]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b37a:	cbz	r1, b3da <usb_init_serialnumber+0xaa>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b37c:	ldrb.w	r2, [sp, #6]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b380:	strh	r1, [r3, #4]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b382:	cbz	r2, b3de <usb_init_serialnumber+0xae>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b384:	ldrb.w	r1, [sp, #7]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b388:	strh	r2, [r3, #6]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b38a:	cbz	r1, b3e2 <usb_init_serialnumber+0xb2>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b38c:	ldrb.w	r2, [sp, #8]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b390:	strh	r1, [r3, #8]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b392:	cbz	r2, b3e6 <usb_init_serialnumber+0xb6>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b394:	ldrb.w	r1, [sp, #9]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b398:	strh	r2, [r3, #10]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b39a:	cbz	r1, b3ea <usb_init_serialnumber+0xba>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b39c:	ldrb.w	r2, [sp, #10]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b3a0:	strh	r1, [r3, #12]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b3a2:	cbz	r2, b3ee <usb_init_serialnumber+0xbe>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b3a4:	ldrb.w	r1, [sp, #11]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b3a8:	strh	r2, [r3, #14]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b3aa:	cbz	r1, b3f2 <usb_init_serialnumber+0xc2>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b3ac:	ldrb.w	r2, [sp, #12]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b3b0:	strh	r1, [r3, #16]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b3b2:	cbz	r2, b3ca <usb_init_serialnumber+0x9a>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b3b4:	ldrb.w	r1, [sp, #13]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b3b8:	strh	r2, [r3, #18]
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b3ba:	movs	r2, #9
		char c = buf[i];
		if (!c) break;
    b3bc:	cbz	r1, b3cc <usb_init_serialnumber+0x9c>
    b3be:	movs	r2, #22
		usb_string_serial_number_default.wString[i] = c;
    b3c0:	strh	r1, [r3, #20]
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b3c2:	strb	r2, [r3, #0]
}
    b3c4:	add	sp, #20
    b3c6:	ldr.w	pc, [sp], #4
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b3ca:	movs	r2, #8
    b3cc:	adds	r2, #1
    b3ce:	lsls	r2, r2, #1
    b3d0:	uxtb	r2, r2
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b3d2:	strb	r2, [r3, #0]
}
    b3d4:	add	sp, #20
    b3d6:	ldr.w	pc, [sp], #4
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b3da:	movs	r2, #1
    b3dc:	b.n	b3cc <usb_init_serialnumber+0x9c>
    b3de:	movs	r2, #2
    b3e0:	b.n	b3cc <usb_init_serialnumber+0x9c>
    b3e2:	movs	r2, #3
    b3e4:	b.n	b3cc <usb_init_serialnumber+0x9c>
    b3e6:	movs	r2, #4
    b3e8:	b.n	b3cc <usb_init_serialnumber+0x9c>
    b3ea:	movs	r2, #5
    b3ec:	b.n	b3cc <usb_init_serialnumber+0x9c>
    b3ee:	movs	r2, #6
    b3f0:	b.n	b3cc <usb_init_serialnumber+0x9c>
    b3f2:	movs	r2, #7
    b3f4:	b.n	b3cc <usb_init_serialnumber+0x9c>
    b3f6:	nop
    b3f8:	.word	0x40020004
    b3fc:	.word	0x40020000
    b400:	.word	0x41070000
    b404:	.word	0x4002000c
    b408:	.word	0x0098967f
    b40c:	.word	0x1fff0938

0000b410 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    b410:	push	{r4, r5, r6, r7}
    b412:	subs	r5, r1, #1
    b414:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    b416:	movs	r4, #0
    b418:	b.n	b41c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    b41a:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    b41c:	udiv	r3, r0, r2
    b420:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b424:	cmp	r0, #9
    b426:	add.w	r7, r0, #48	; 0x30
    b42a:	itet	hi
    b42c:	addhi	r0, #55	; 0x37
    b42e:	uxtbls	r0, r7
    b430:	uxtbhi	r0, r0
    b432:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    b436:	mov	r0, r3
    b438:	cmp	r3, #0
    b43a:	bne.n	b41a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    b43c:	adds	r2, r1, r4
    b43e:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    b440:	cbz	r4, b456 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    b442:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    b444:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    b448:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b44a:	adds	r3, #1
    b44c:	subs	r0, r4, r3
    b44e:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    b450:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b454:	blt.n	b442 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    b456:	mov	r0, r1
    b458:	pop	{r4, r5, r6, r7}
    b45a:	bx	lr

0000b45c <__aeabi_drsub>:
    b45c:	eor.w	r1, r1, #2147483648	; 0x80000000
    b460:	b.n	b468 <__adddf3>
    b462:	nop

0000b464 <__aeabi_dsub>:
    b464:	eor.w	r3, r3, #2147483648	; 0x80000000

0000b468 <__adddf3>:
    b468:	push	{r4, r5, lr}
    b46a:	mov.w	r4, r1, lsl #1
    b46e:	mov.w	r5, r3, lsl #1
    b472:	teq	r4, r5
    b476:	it	eq
    b478:	teqeq	r0, r2
    b47c:	itttt	ne
    b47e:	orrsne.w	ip, r4, r0
    b482:	orrsne.w	ip, r5, r2
    b486:	mvnsne.w	ip, r4, asr #21
    b48a:	mvnsne.w	ip, r5, asr #21
    b48e:	beq.w	b656 <__adddf3+0x1ee>
    b492:	mov.w	r4, r4, lsr #21
    b496:	rsbs	r5, r4, r5, lsr #21
    b49a:	it	lt
    b49c:	neglt	r5, r5
    b49e:	ble.n	b4ba <__adddf3+0x52>
    b4a0:	add	r4, r5
    b4a2:	eor.w	r2, r0, r2
    b4a6:	eor.w	r3, r1, r3
    b4aa:	eor.w	r0, r2, r0
    b4ae:	eor.w	r1, r3, r1
    b4b2:	eor.w	r2, r0, r2
    b4b6:	eor.w	r3, r1, r3
    b4ba:	cmp	r5, #54	; 0x36
    b4bc:	it	hi
    b4be:	pophi	{r4, r5, pc}
    b4c0:	tst.w	r1, #2147483648	; 0x80000000
    b4c4:	mov.w	r1, r1, lsl #12
    b4c8:	mov.w	ip, #1048576	; 0x100000
    b4cc:	orr.w	r1, ip, r1, lsr #12
    b4d0:	beq.n	b4d8 <__adddf3+0x70>
    b4d2:	negs	r0, r0
    b4d4:	sbc.w	r1, r1, r1, lsl #1
    b4d8:	tst.w	r3, #2147483648	; 0x80000000
    b4dc:	mov.w	r3, r3, lsl #12
    b4e0:	orr.w	r3, ip, r3, lsr #12
    b4e4:	beq.n	b4ec <__adddf3+0x84>
    b4e6:	negs	r2, r2
    b4e8:	sbc.w	r3, r3, r3, lsl #1
    b4ec:	teq	r4, r5
    b4f0:	beq.w	b642 <__adddf3+0x1da>
    b4f4:	sub.w	r4, r4, #1
    b4f8:	rsbs	lr, r5, #32
    b4fc:	blt.n	b51a <__adddf3+0xb2>
    b4fe:	lsl.w	ip, r2, lr
    b502:	lsr.w	r2, r2, r5
    b506:	adds	r0, r0, r2
    b508:	adc.w	r1, r1, #0
    b50c:	lsl.w	r2, r3, lr
    b510:	adds	r0, r0, r2
    b512:	asr.w	r3, r3, r5
    b516:	adcs	r1, r3
    b518:	b.n	b538 <__adddf3+0xd0>
    b51a:	sub.w	r5, r5, #32
    b51e:	add.w	lr, lr, #32
    b522:	cmp	r2, #1
    b524:	lsl.w	ip, r3, lr
    b528:	it	cs
    b52a:	orrcs.w	ip, ip, #2
    b52e:	asr.w	r3, r3, r5
    b532:	adds	r0, r0, r3
    b534:	adcs.w	r1, r1, r3, asr #31
    b538:	and.w	r5, r1, #2147483648	; 0x80000000
    b53c:	bpl.n	b54e <__adddf3+0xe6>
    b53e:	mov.w	lr, #0
    b542:	rsbs	ip, ip, #0
    b546:	sbcs.w	r0, lr, r0
    b54a:	sbc.w	r1, lr, r1
    b54e:	cmp.w	r1, #1048576	; 0x100000
    b552:	bcc.n	b58c <__adddf3+0x124>
    b554:	cmp.w	r1, #2097152	; 0x200000
    b558:	bcc.n	b574 <__adddf3+0x10c>
    b55a:	lsrs	r1, r1, #1
    b55c:	movs.w	r0, r0, rrx
    b560:	mov.w	ip, ip, rrx
    b564:	add.w	r4, r4, #1
    b568:	mov.w	r2, r4, lsl #21
    b56c:	cmn.w	r2, #4194304	; 0x400000
    b570:	bcs.w	b6a8 <__adddf3+0x240>
    b574:	cmp.w	ip, #2147483648	; 0x80000000
    b578:	it	eq
    b57a:	movseq.w	ip, r0, lsr #1
    b57e:	adcs.w	r0, r0, #0
    b582:	adc.w	r1, r1, r4, lsl #20
    b586:	orr.w	r1, r1, r5
    b58a:	pop	{r4, r5, pc}
    b58c:	movs.w	ip, ip, lsl #1
    b590:	adcs	r0, r0
    b592:	adc.w	r1, r1, r1
    b596:	tst.w	r1, #1048576	; 0x100000
    b59a:	sub.w	r4, r4, #1
    b59e:	bne.n	b574 <__adddf3+0x10c>
    b5a0:	teq	r1, #0
    b5a4:	itt	eq
    b5a6:	moveq	r1, r0
    b5a8:	moveq	r0, #0
    b5aa:	clz	r3, r1
    b5ae:	it	eq
    b5b0:	addeq	r3, #32
    b5b2:	sub.w	r3, r3, #11
    b5b6:	subs.w	r2, r3, #32
    b5ba:	bge.n	b5d6 <__adddf3+0x16e>
    b5bc:	adds	r2, #12
    b5be:	ble.n	b5d2 <__adddf3+0x16a>
    b5c0:	add.w	ip, r2, #20
    b5c4:	rsb	r2, r2, #12
    b5c8:	lsl.w	r0, r1, ip
    b5cc:	lsr.w	r1, r1, r2
    b5d0:	b.n	b5ec <__adddf3+0x184>
    b5d2:	add.w	r2, r2, #20
    b5d6:	it	le
    b5d8:	rsble	ip, r2, #32
    b5dc:	lsl.w	r1, r1, r2
    b5e0:	lsr.w	ip, r0, ip
    b5e4:	itt	le
    b5e6:	orrle.w	r1, r1, ip
    b5ea:	lslle	r0, r2
    b5ec:	subs	r4, r4, r3
    b5ee:	ittt	ge
    b5f0:	addge.w	r1, r1, r4, lsl #20
    b5f4:	orrge	r1, r5
    b5f6:	popge	{r4, r5, pc}
    b5f8:	mvn.w	r4, r4
    b5fc:	subs	r4, #31
    b5fe:	bge.n	b63a <__adddf3+0x1d2>
    b600:	adds	r4, #12
    b602:	bgt.n	b622 <__adddf3+0x1ba>
    b604:	add.w	r4, r4, #20
    b608:	rsb	r2, r4, #32
    b60c:	lsr.w	r0, r0, r4
    b610:	lsl.w	r3, r1, r2
    b614:	orr.w	r0, r0, r3
    b618:	lsr.w	r3, r1, r4
    b61c:	orr.w	r1, r5, r3
    b620:	pop	{r4, r5, pc}
    b622:	rsb	r4, r4, #12
    b626:	rsb	r2, r4, #32
    b62a:	lsr.w	r0, r0, r2
    b62e:	lsl.w	r3, r1, r4
    b632:	orr.w	r0, r0, r3
    b636:	mov	r1, r5
    b638:	pop	{r4, r5, pc}
    b63a:	lsr.w	r0, r1, r4
    b63e:	mov	r1, r5
    b640:	pop	{r4, r5, pc}
    b642:	teq	r4, #0
    b646:	eor.w	r3, r3, #1048576	; 0x100000
    b64a:	itte	eq
    b64c:	eoreq.w	r1, r1, #1048576	; 0x100000
    b650:	addeq	r4, #1
    b652:	subne	r5, #1
    b654:	b.n	b4f4 <__adddf3+0x8c>
    b656:	mvns.w	ip, r4, asr #21
    b65a:	it	ne
    b65c:	mvnsne.w	ip, r5, asr #21
    b660:	beq.n	b6b6 <__adddf3+0x24e>
    b662:	teq	r4, r5
    b666:	it	eq
    b668:	teqeq	r0, r2
    b66c:	beq.n	b67a <__adddf3+0x212>
    b66e:	orrs.w	ip, r4, r0
    b672:	itt	eq
    b674:	moveq	r1, r3
    b676:	moveq	r0, r2
    b678:	pop	{r4, r5, pc}
    b67a:	teq	r1, r3
    b67e:	ittt	ne
    b680:	movne	r1, #0
    b682:	movne	r0, #0
    b684:	popne	{r4, r5, pc}
    b686:	movs.w	ip, r4, lsr #21
    b68a:	bne.n	b698 <__adddf3+0x230>
    b68c:	lsls	r0, r0, #1
    b68e:	adcs	r1, r1
    b690:	it	cs
    b692:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b696:	pop	{r4, r5, pc}
    b698:	adds.w	r4, r4, #4194304	; 0x400000
    b69c:	itt	cc
    b69e:	addcc.w	r1, r1, #1048576	; 0x100000
    b6a2:	popcc	{r4, r5, pc}
    b6a4:	and.w	r5, r1, #2147483648	; 0x80000000
    b6a8:	orr.w	r1, r5, #2130706432	; 0x7f000000
    b6ac:	orr.w	r1, r1, #15728640	; 0xf00000
    b6b0:	mov.w	r0, #0
    b6b4:	pop	{r4, r5, pc}
    b6b6:	mvns.w	ip, r4, asr #21
    b6ba:	itte	ne
    b6bc:	movne	r1, r3
    b6be:	movne	r0, r2
    b6c0:	mvnseq.w	ip, r5, asr #21
    b6c4:	itt	ne
    b6c6:	movne	r3, r1
    b6c8:	movne	r2, r0
    b6ca:	orrs.w	r4, r0, r1, lsl #12
    b6ce:	itte	eq
    b6d0:	orrseq.w	r5, r2, r3, lsl #12
    b6d4:	teqeq	r1, r3
    b6d8:	orrne.w	r1, r1, #524288	; 0x80000
    b6dc:	pop	{r4, r5, pc}
    b6de:	nop

0000b6e0 <__aeabi_ui2d>:
    b6e0:	teq	r0, #0
    b6e4:	itt	eq
    b6e6:	moveq	r1, #0
    b6e8:	bxeq	lr
    b6ea:	push	{r4, r5, lr}
    b6ec:	mov.w	r4, #1024	; 0x400
    b6f0:	add.w	r4, r4, #50	; 0x32
    b6f4:	mov.w	r5, #0
    b6f8:	mov.w	r1, #0
    b6fc:	b.n	b5a0 <__adddf3+0x138>
    b6fe:	nop

0000b700 <__aeabi_i2d>:
    b700:	teq	r0, #0
    b704:	itt	eq
    b706:	moveq	r1, #0
    b708:	bxeq	lr
    b70a:	push	{r4, r5, lr}
    b70c:	mov.w	r4, #1024	; 0x400
    b710:	add.w	r4, r4, #50	; 0x32
    b714:	ands.w	r5, r0, #2147483648	; 0x80000000
    b718:	it	mi
    b71a:	negmi	r0, r0
    b71c:	mov.w	r1, #0
    b720:	b.n	b5a0 <__adddf3+0x138>
    b722:	nop

0000b724 <__aeabi_f2d>:
    b724:	lsls	r2, r0, #1
    b726:	mov.w	r1, r2, asr #3
    b72a:	mov.w	r1, r1, rrx
    b72e:	mov.w	r0, r2, lsl #28
    b732:	itttt	ne
    b734:	andsne.w	r3, r2, #4278190080	; 0xff000000
    b738:	teqne	r3, #4278190080	; 0xff000000
    b73c:	eorne.w	r1, r1, #939524096	; 0x38000000
    b740:	bxne	lr
    b742:	teq	r2, #0
    b746:	ite	ne
    b748:	teqne	r3, #4278190080	; 0xff000000
    b74c:	bxeq	lr
    b74e:	push	{r4, r5, lr}
    b750:	mov.w	r4, #896	; 0x380
    b754:	and.w	r5, r1, #2147483648	; 0x80000000
    b758:	bic.w	r1, r1, #2147483648	; 0x80000000
    b75c:	b.n	b5a0 <__adddf3+0x138>
    b75e:	nop

0000b760 <__aeabi_ul2d>:
    b760:	orrs.w	r2, r0, r1
    b764:	it	eq
    b766:	bxeq	lr
    b768:	push	{r4, r5, lr}
    b76a:	mov.w	r5, #0
    b76e:	b.n	b786 <__aeabi_l2d+0x16>

0000b770 <__aeabi_l2d>:
    b770:	orrs.w	r2, r0, r1
    b774:	it	eq
    b776:	bxeq	lr
    b778:	push	{r4, r5, lr}
    b77a:	ands.w	r5, r1, #2147483648	; 0x80000000
    b77e:	bpl.n	b786 <__aeabi_l2d+0x16>
    b780:	negs	r0, r0
    b782:	sbc.w	r1, r1, r1, lsl #1
    b786:	mov.w	r4, #1024	; 0x400
    b78a:	add.w	r4, r4, #50	; 0x32
    b78e:	movs.w	ip, r1, lsr #22
    b792:	beq.w	b54e <__adddf3+0xe6>
    b796:	mov.w	r2, #3
    b79a:	movs.w	ip, ip, lsr #3
    b79e:	it	ne
    b7a0:	addne	r2, #3
    b7a2:	movs.w	ip, ip, lsr #3
    b7a6:	it	ne
    b7a8:	addne	r2, #3
    b7aa:	add.w	r2, r2, ip, lsr #3
    b7ae:	rsb	r3, r2, #32
    b7b2:	lsl.w	ip, r0, r3
    b7b6:	lsr.w	r0, r0, r2
    b7ba:	lsl.w	lr, r1, r3
    b7be:	orr.w	r0, r0, lr
    b7c2:	lsr.w	r1, r1, r2
    b7c6:	add	r4, r2
    b7c8:	b.n	b54e <__adddf3+0xe6>
    b7ca:	nop

0000b7cc <__aeabi_dmul>:
    b7cc:	push	{r4, r5, r6, lr}
    b7ce:	mov.w	ip, #255	; 0xff
    b7d2:	orr.w	ip, ip, #1792	; 0x700
    b7d6:	ands.w	r4, ip, r1, lsr #20
    b7da:	ittte	ne
    b7dc:	andsne.w	r5, ip, r3, lsr #20
    b7e0:	teqne	r4, ip
    b7e4:	teqne	r5, ip
    b7e8:	bleq	b9a8 <__aeabi_dmul+0x1dc>
    b7ec:	add	r4, r5
    b7ee:	eor.w	r6, r1, r3
    b7f2:	bic.w	r1, r1, ip, lsl #21
    b7f6:	bic.w	r3, r3, ip, lsl #21
    b7fa:	orrs.w	r5, r0, r1, lsl #12
    b7fe:	it	ne
    b800:	orrsne.w	r5, r2, r3, lsl #12
    b804:	orr.w	r1, r1, #1048576	; 0x100000
    b808:	orr.w	r3, r3, #1048576	; 0x100000
    b80c:	beq.n	b880 <__aeabi_dmul+0xb4>
    b80e:	umull	ip, lr, r0, r2
    b812:	mov.w	r5, #0
    b816:	umlal	lr, r5, r1, r2
    b81a:	and.w	r2, r6, #2147483648	; 0x80000000
    b81e:	umlal	lr, r5, r0, r3
    b822:	mov.w	r6, #0
    b826:	umlal	r5, r6, r1, r3
    b82a:	teq	ip, #0
    b82e:	it	ne
    b830:	orrne.w	lr, lr, #1
    b834:	sub.w	r4, r4, #255	; 0xff
    b838:	cmp.w	r6, #512	; 0x200
    b83c:	sbc.w	r4, r4, #768	; 0x300
    b840:	bcs.n	b84c <__aeabi_dmul+0x80>
    b842:	movs.w	lr, lr, lsl #1
    b846:	adcs	r5, r5
    b848:	adc.w	r6, r6, r6
    b84c:	orr.w	r1, r2, r6, lsl #11
    b850:	orr.w	r1, r1, r5, lsr #21
    b854:	mov.w	r0, r5, lsl #11
    b858:	orr.w	r0, r0, lr, lsr #21
    b85c:	mov.w	lr, lr, lsl #11
    b860:	subs.w	ip, r4, #253	; 0xfd
    b864:	it	hi
    b866:	cmphi.w	ip, #1792	; 0x700
    b86a:	bhi.n	b8aa <__aeabi_dmul+0xde>
    b86c:	cmp.w	lr, #2147483648	; 0x80000000
    b870:	it	eq
    b872:	movseq.w	lr, r0, lsr #1
    b876:	adcs.w	r0, r0, #0
    b87a:	adc.w	r1, r1, r4, lsl #20
    b87e:	pop	{r4, r5, r6, pc}
    b880:	and.w	r6, r6, #2147483648	; 0x80000000
    b884:	orr.w	r1, r6, r1
    b888:	orr.w	r0, r0, r2
    b88c:	eor.w	r1, r1, r3
    b890:	subs.w	r4, r4, ip, lsr #1
    b894:	ittt	gt
    b896:	rsbsgt	r5, r4, ip
    b89a:	orrgt.w	r1, r1, r4, lsl #20
    b89e:	popgt	{r4, r5, r6, pc}
    b8a0:	orr.w	r1, r1, #1048576	; 0x100000
    b8a4:	mov.w	lr, #0
    b8a8:	subs	r4, #1
    b8aa:	bgt.w	ba04 <__aeabi_dmul+0x238>
    b8ae:	cmn.w	r4, #54	; 0x36
    b8b2:	ittt	le
    b8b4:	movle	r0, #0
    b8b6:	andle.w	r1, r1, #2147483648	; 0x80000000
    b8ba:	pople	{r4, r5, r6, pc}
    b8bc:	rsb	r4, r4, #0
    b8c0:	subs	r4, #32
    b8c2:	bge.n	b930 <__aeabi_dmul+0x164>
    b8c4:	adds	r4, #12
    b8c6:	bgt.n	b900 <__aeabi_dmul+0x134>
    b8c8:	add.w	r4, r4, #20
    b8cc:	rsb	r5, r4, #32
    b8d0:	lsl.w	r3, r0, r5
    b8d4:	lsr.w	r0, r0, r4
    b8d8:	lsl.w	r2, r1, r5
    b8dc:	orr.w	r0, r0, r2
    b8e0:	and.w	r2, r1, #2147483648	; 0x80000000
    b8e4:	bic.w	r1, r1, #2147483648	; 0x80000000
    b8e8:	adds.w	r0, r0, r3, lsr #31
    b8ec:	lsr.w	r6, r1, r4
    b8f0:	adc.w	r1, r2, r6
    b8f4:	orrs.w	lr, lr, r3, lsl #1
    b8f8:	it	eq
    b8fa:	biceq.w	r0, r0, r3, lsr #31
    b8fe:	pop	{r4, r5, r6, pc}
    b900:	rsb	r4, r4, #12
    b904:	rsb	r5, r4, #32
    b908:	lsl.w	r3, r0, r4
    b90c:	lsr.w	r0, r0, r5
    b910:	lsl.w	r2, r1, r4
    b914:	orr.w	r0, r0, r2
    b918:	and.w	r1, r1, #2147483648	; 0x80000000
    b91c:	adds.w	r0, r0, r3, lsr #31
    b920:	adc.w	r1, r1, #0
    b924:	orrs.w	lr, lr, r3, lsl #1
    b928:	it	eq
    b92a:	biceq.w	r0, r0, r3, lsr #31
    b92e:	pop	{r4, r5, r6, pc}
    b930:	rsb	r5, r4, #32
    b934:	lsl.w	r2, r0, r5
    b938:	orr.w	lr, lr, r2
    b93c:	lsr.w	r3, r0, r4
    b940:	lsl.w	r2, r1, r5
    b944:	orr.w	r3, r3, r2
    b948:	lsr.w	r0, r1, r4
    b94c:	and.w	r1, r1, #2147483648	; 0x80000000
    b950:	lsr.w	r2, r1, r4
    b954:	bic.w	r0, r0, r2
    b958:	add.w	r0, r0, r3, lsr #31
    b95c:	orrs.w	lr, lr, r3, lsl #1
    b960:	it	eq
    b962:	biceq.w	r0, r0, r3, lsr #31
    b966:	pop	{r4, r5, r6, pc}
    b968:	teq	r4, #0
    b96c:	bne.n	b98e <__aeabi_dmul+0x1c2>
    b96e:	and.w	r6, r1, #2147483648	; 0x80000000
    b972:	lsls	r0, r0, #1
    b974:	adc.w	r1, r1, r1
    b978:	tst.w	r1, #1048576	; 0x100000
    b97c:	it	eq
    b97e:	subeq	r4, #1
    b980:	beq.n	b972 <__aeabi_dmul+0x1a6>
    b982:	orr.w	r1, r1, r6
    b986:	teq	r5, #0
    b98a:	it	ne
    b98c:	bxne	lr
    b98e:	and.w	r6, r3, #2147483648	; 0x80000000
    b992:	lsls	r2, r2, #1
    b994:	adc.w	r3, r3, r3
    b998:	tst.w	r3, #1048576	; 0x100000
    b99c:	it	eq
    b99e:	subeq	r5, #1
    b9a0:	beq.n	b992 <__aeabi_dmul+0x1c6>
    b9a2:	orr.w	r3, r3, r6
    b9a6:	bx	lr
    b9a8:	teq	r4, ip
    b9ac:	and.w	r5, ip, r3, lsr #20
    b9b0:	it	ne
    b9b2:	teqne	r5, ip
    b9b6:	beq.n	b9d2 <__aeabi_dmul+0x206>
    b9b8:	orrs.w	r6, r0, r1, lsl #1
    b9bc:	it	ne
    b9be:	orrsne.w	r6, r2, r3, lsl #1
    b9c2:	bne.n	b968 <__aeabi_dmul+0x19c>
    b9c4:	eor.w	r1, r1, r3
    b9c8:	and.w	r1, r1, #2147483648	; 0x80000000
    b9cc:	mov.w	r0, #0
    b9d0:	pop	{r4, r5, r6, pc}
    b9d2:	orrs.w	r6, r0, r1, lsl #1
    b9d6:	itte	eq
    b9d8:	moveq	r0, r2
    b9da:	moveq	r1, r3
    b9dc:	orrsne.w	r6, r2, r3, lsl #1
    b9e0:	beq.n	ba16 <__aeabi_dmul+0x24a>
    b9e2:	teq	r4, ip
    b9e6:	bne.n	b9ee <__aeabi_dmul+0x222>
    b9e8:	orrs.w	r6, r0, r1, lsl #12
    b9ec:	bne.n	ba16 <__aeabi_dmul+0x24a>
    b9ee:	teq	r5, ip
    b9f2:	bne.n	ba00 <__aeabi_dmul+0x234>
    b9f4:	orrs.w	r6, r2, r3, lsl #12
    b9f8:	itt	ne
    b9fa:	movne	r0, r2
    b9fc:	movne	r1, r3
    b9fe:	bne.n	ba16 <__aeabi_dmul+0x24a>
    ba00:	eor.w	r1, r1, r3
    ba04:	and.w	r1, r1, #2147483648	; 0x80000000
    ba08:	orr.w	r1, r1, #2130706432	; 0x7f000000
    ba0c:	orr.w	r1, r1, #15728640	; 0xf00000
    ba10:	mov.w	r0, #0
    ba14:	pop	{r4, r5, r6, pc}
    ba16:	orr.w	r1, r1, #2130706432	; 0x7f000000
    ba1a:	orr.w	r1, r1, #16252928	; 0xf80000
    ba1e:	pop	{r4, r5, r6, pc}

0000ba20 <__aeabi_ddiv>:
    ba20:	push	{r4, r5, r6, lr}
    ba22:	mov.w	ip, #255	; 0xff
    ba26:	orr.w	ip, ip, #1792	; 0x700
    ba2a:	ands.w	r4, ip, r1, lsr #20
    ba2e:	ittte	ne
    ba30:	andsne.w	r5, ip, r3, lsr #20
    ba34:	teqne	r4, ip
    ba38:	teqne	r5, ip
    ba3c:	bleq	bb8e <__aeabi_ddiv+0x16e>
    ba40:	sub.w	r4, r4, r5
    ba44:	eor.w	lr, r1, r3
    ba48:	orrs.w	r5, r2, r3, lsl #12
    ba4c:	mov.w	r1, r1, lsl #12
    ba50:	beq.w	bb64 <__aeabi_ddiv+0x144>
    ba54:	mov.w	r3, r3, lsl #12
    ba58:	mov.w	r5, #268435456	; 0x10000000
    ba5c:	orr.w	r3, r5, r3, lsr #4
    ba60:	orr.w	r3, r3, r2, lsr #24
    ba64:	mov.w	r2, r2, lsl #8
    ba68:	orr.w	r5, r5, r1, lsr #4
    ba6c:	orr.w	r5, r5, r0, lsr #24
    ba70:	mov.w	r6, r0, lsl #8
    ba74:	and.w	r1, lr, #2147483648	; 0x80000000
    ba78:	cmp	r5, r3
    ba7a:	it	eq
    ba7c:	cmpeq	r6, r2
    ba7e:	adc.w	r4, r4, #253	; 0xfd
    ba82:	add.w	r4, r4, #768	; 0x300
    ba86:	bcs.n	ba8e <__aeabi_ddiv+0x6e>
    ba88:	lsrs	r3, r3, #1
    ba8a:	mov.w	r2, r2, rrx
    ba8e:	subs	r6, r6, r2
    ba90:	sbc.w	r5, r5, r3
    ba94:	lsrs	r3, r3, #1
    ba96:	mov.w	r2, r2, rrx
    ba9a:	mov.w	r0, #1048576	; 0x100000
    ba9e:	mov.w	ip, #524288	; 0x80000
    baa2:	subs.w	lr, r6, r2
    baa6:	sbcs.w	lr, r5, r3
    baaa:	ittt	cs
    baac:	subcs	r6, r6, r2
    baae:	movcs	r5, lr
    bab0:	orrcs.w	r0, r0, ip
    bab4:	lsrs	r3, r3, #1
    bab6:	mov.w	r2, r2, rrx
    baba:	subs.w	lr, r6, r2
    babe:	sbcs.w	lr, r5, r3
    bac2:	ittt	cs
    bac4:	subcs	r6, r6, r2
    bac6:	movcs	r5, lr
    bac8:	orrcs.w	r0, r0, ip, lsr #1
    bacc:	lsrs	r3, r3, #1
    bace:	mov.w	r2, r2, rrx
    bad2:	subs.w	lr, r6, r2
    bad6:	sbcs.w	lr, r5, r3
    bada:	ittt	cs
    badc:	subcs	r6, r6, r2
    bade:	movcs	r5, lr
    bae0:	orrcs.w	r0, r0, ip, lsr #2
    bae4:	lsrs	r3, r3, #1
    bae6:	mov.w	r2, r2, rrx
    baea:	subs.w	lr, r6, r2
    baee:	sbcs.w	lr, r5, r3
    baf2:	ittt	cs
    baf4:	subcs	r6, r6, r2
    baf6:	movcs	r5, lr
    baf8:	orrcs.w	r0, r0, ip, lsr #3
    bafc:	orrs.w	lr, r5, r6
    bb00:	beq.n	bb34 <__aeabi_ddiv+0x114>
    bb02:	mov.w	r5, r5, lsl #4
    bb06:	orr.w	r5, r5, r6, lsr #28
    bb0a:	mov.w	r6, r6, lsl #4
    bb0e:	mov.w	r3, r3, lsl #3
    bb12:	orr.w	r3, r3, r2, lsr #29
    bb16:	mov.w	r2, r2, lsl #3
    bb1a:	movs.w	ip, ip, lsr #4
    bb1e:	bne.n	baa2 <__aeabi_ddiv+0x82>
    bb20:	tst.w	r1, #1048576	; 0x100000
    bb24:	bne.n	bb3e <__aeabi_ddiv+0x11e>
    bb26:	orr.w	r1, r1, r0
    bb2a:	mov.w	r0, #0
    bb2e:	mov.w	ip, #2147483648	; 0x80000000
    bb32:	b.n	baa2 <__aeabi_ddiv+0x82>
    bb34:	tst.w	r1, #1048576	; 0x100000
    bb38:	itt	eq
    bb3a:	orreq	r1, r0
    bb3c:	moveq	r0, #0
    bb3e:	subs.w	ip, r4, #253	; 0xfd
    bb42:	it	hi
    bb44:	cmphi.w	ip, #1792	; 0x700
    bb48:	bhi.w	b8aa <__aeabi_dmul+0xde>
    bb4c:	subs.w	ip, r5, r3
    bb50:	itt	eq
    bb52:	subseq.w	ip, r6, r2
    bb56:	movseq.w	ip, r0, lsr #1
    bb5a:	adcs.w	r0, r0, #0
    bb5e:	adc.w	r1, r1, r4, lsl #20
    bb62:	pop	{r4, r5, r6, pc}
    bb64:	and.w	lr, lr, #2147483648	; 0x80000000
    bb68:	orr.w	r1, lr, r1, lsr #12
    bb6c:	adds.w	r4, r4, ip, lsr #1
    bb70:	ittt	gt
    bb72:	rsbsgt	r5, r4, ip
    bb76:	orrgt.w	r1, r1, r4, lsl #20
    bb7a:	popgt	{r4, r5, r6, pc}
    bb7c:	orr.w	r1, r1, #1048576	; 0x100000
    bb80:	mov.w	lr, #0
    bb84:	subs	r4, #1
    bb86:	b.n	b8aa <__aeabi_dmul+0xde>
    bb88:	orr.w	lr, r5, r6
    bb8c:	b.n	b8aa <__aeabi_dmul+0xde>
    bb8e:	and.w	r5, ip, r3, lsr #20
    bb92:	teq	r4, ip
    bb96:	it	eq
    bb98:	teqeq	r5, ip
    bb9c:	beq.w	ba16 <__aeabi_dmul+0x24a>
    bba0:	teq	r4, ip
    bba4:	bne.n	bbbc <__aeabi_ddiv+0x19c>
    bba6:	orrs.w	r4, r0, r1, lsl #12
    bbaa:	bne.w	ba16 <__aeabi_dmul+0x24a>
    bbae:	teq	r5, ip
    bbb2:	bne.w	ba00 <__aeabi_dmul+0x234>
    bbb6:	mov	r0, r2
    bbb8:	mov	r1, r3
    bbba:	b.n	ba16 <__aeabi_dmul+0x24a>
    bbbc:	teq	r5, ip
    bbc0:	bne.n	bbd0 <__aeabi_ddiv+0x1b0>
    bbc2:	orrs.w	r5, r2, r3, lsl #12
    bbc6:	beq.w	b9c4 <__aeabi_dmul+0x1f8>
    bbca:	mov	r0, r2
    bbcc:	mov	r1, r3
    bbce:	b.n	ba16 <__aeabi_dmul+0x24a>
    bbd0:	orrs.w	r6, r0, r1, lsl #1
    bbd4:	it	ne
    bbd6:	orrsne.w	r6, r2, r3, lsl #1
    bbda:	bne.w	b968 <__aeabi_dmul+0x19c>
    bbde:	orrs.w	r4, r0, r1, lsl #1
    bbe2:	bne.w	ba00 <__aeabi_dmul+0x234>
    bbe6:	orrs.w	r5, r2, r3, lsl #1
    bbea:	bne.w	b9c4 <__aeabi_dmul+0x1f8>
    bbee:	b.n	ba16 <__aeabi_dmul+0x24a>

0000bbf0 <__gedf2>:
    bbf0:	mov.w	ip, #4294967295
    bbf4:	b.n	bc04 <__cmpdf2+0x4>
    bbf6:	nop

0000bbf8 <__ledf2>:
    bbf8:	mov.w	ip, #1
    bbfc:	b.n	bc04 <__cmpdf2+0x4>
    bbfe:	nop

0000bc00 <__cmpdf2>:
    bc00:	mov.w	ip, #1
    bc04:	str.w	ip, [sp, #-4]!
    bc08:	mov.w	ip, r1, lsl #1
    bc0c:	mvns.w	ip, ip, asr #21
    bc10:	mov.w	ip, r3, lsl #1
    bc14:	it	ne
    bc16:	mvnsne.w	ip, ip, asr #21
    bc1a:	beq.n	bc54 <__cmpdf2+0x54>
    bc1c:	add	sp, #4
    bc1e:	orrs.w	ip, r0, r1, lsl #1
    bc22:	ite	eq
    bc24:	orrseq.w	ip, r2, r3, lsl #1
    bc28:	teqne	r1, r3
    bc2c:	ittt	eq
    bc2e:	teqeq	r0, r2
    bc32:	moveq	r0, #0
    bc34:	bxeq	lr
    bc36:	cmn.w	r0, #0
    bc3a:	teq	r1, r3
    bc3e:	it	pl
    bc40:	cmppl	r1, r3
    bc42:	it	eq
    bc44:	cmpeq	r0, r2
    bc46:	ite	cs
    bc48:	asrcs	r0, r3, #31
    bc4a:	mvncc.w	r0, r3, asr #31
    bc4e:	orr.w	r0, r0, #1
    bc52:	bx	lr
    bc54:	mov.w	ip, r1, lsl #1
    bc58:	mvns.w	ip, ip, asr #21
    bc5c:	bne.n	bc64 <__cmpdf2+0x64>
    bc5e:	orrs.w	ip, r0, r1, lsl #12
    bc62:	bne.n	bc74 <__cmpdf2+0x74>
    bc64:	mov.w	ip, r3, lsl #1
    bc68:	mvns.w	ip, ip, asr #21
    bc6c:	bne.n	bc1c <__cmpdf2+0x1c>
    bc6e:	orrs.w	ip, r2, r3, lsl #12
    bc72:	beq.n	bc1c <__cmpdf2+0x1c>
    bc74:	ldr.w	r0, [sp], #4
    bc78:	bx	lr
    bc7a:	nop

0000bc7c <__aeabi_cdrcmple>:
    bc7c:	mov	ip, r0
    bc7e:	mov	r0, r2
    bc80:	mov	r2, ip
    bc82:	mov	ip, r1
    bc84:	mov	r1, r3
    bc86:	mov	r3, ip
    bc88:	b.n	bc8c <__aeabi_cdcmpeq>
    bc8a:	nop

0000bc8c <__aeabi_cdcmpeq>:
    bc8c:	push	{r0, lr}
    bc8e:	bl	bc00 <__cmpdf2>
    bc92:	cmp	r0, #0
    bc94:	it	mi
    bc96:	cmnmi.w	r0, #0
    bc9a:	pop	{r0, pc}

0000bc9c <__aeabi_dcmpeq>:
    bc9c:	str.w	lr, [sp, #-8]!
    bca0:	bl	bc8c <__aeabi_cdcmpeq>
    bca4:	ite	eq
    bca6:	moveq	r0, #1
    bca8:	movne	r0, #0
    bcaa:	ldr.w	pc, [sp], #8
    bcae:	nop

0000bcb0 <__aeabi_dcmplt>:
    bcb0:	str.w	lr, [sp, #-8]!
    bcb4:	bl	bc8c <__aeabi_cdcmpeq>
    bcb8:	ite	cc
    bcba:	movcc	r0, #1
    bcbc:	movcs	r0, #0
    bcbe:	ldr.w	pc, [sp], #8
    bcc2:	nop

0000bcc4 <__aeabi_dcmple>:
    bcc4:	str.w	lr, [sp, #-8]!
    bcc8:	bl	bc8c <__aeabi_cdcmpeq>
    bccc:	ite	ls
    bcce:	movls	r0, #1
    bcd0:	movhi	r0, #0
    bcd2:	ldr.w	pc, [sp], #8
    bcd6:	nop

0000bcd8 <__aeabi_dcmpge>:
    bcd8:	str.w	lr, [sp, #-8]!
    bcdc:	bl	bc7c <__aeabi_cdrcmple>
    bce0:	ite	ls
    bce2:	movls	r0, #1
    bce4:	movhi	r0, #0
    bce6:	ldr.w	pc, [sp], #8
    bcea:	nop

0000bcec <__aeabi_dcmpgt>:
    bcec:	str.w	lr, [sp, #-8]!
    bcf0:	bl	bc7c <__aeabi_cdrcmple>
    bcf4:	ite	cc
    bcf6:	movcc	r0, #1
    bcf8:	movcs	r0, #0
    bcfa:	ldr.w	pc, [sp], #8
    bcfe:	nop

0000bd00 <__aeabi_dcmpun>:
    bd00:	mov.w	ip, r1, lsl #1
    bd04:	mvns.w	ip, ip, asr #21
    bd08:	bne.n	bd10 <__aeabi_dcmpun+0x10>
    bd0a:	orrs.w	ip, r0, r1, lsl #12
    bd0e:	bne.n	bd26 <__aeabi_dcmpun+0x26>
    bd10:	mov.w	ip, r3, lsl #1
    bd14:	mvns.w	ip, ip, asr #21
    bd18:	bne.n	bd20 <__aeabi_dcmpun+0x20>
    bd1a:	orrs.w	ip, r2, r3, lsl #12
    bd1e:	bne.n	bd26 <__aeabi_dcmpun+0x26>
    bd20:	mov.w	r0, #0
    bd24:	bx	lr
    bd26:	mov.w	r0, #1
    bd2a:	bx	lr

0000bd2c <__aeabi_d2iz>:
    bd2c:	mov.w	r2, r1, lsl #1
    bd30:	adds.w	r2, r2, #2097152	; 0x200000
    bd34:	bcs.n	bd62 <__aeabi_d2iz+0x36>
    bd36:	bpl.n	bd5c <__aeabi_d2iz+0x30>
    bd38:	mvn.w	r3, #992	; 0x3e0
    bd3c:	subs.w	r2, r3, r2, asr #21
    bd40:	bls.n	bd68 <__aeabi_d2iz+0x3c>
    bd42:	mov.w	r3, r1, lsl #11
    bd46:	orr.w	r3, r3, #2147483648	; 0x80000000
    bd4a:	orr.w	r3, r3, r0, lsr #21
    bd4e:	tst.w	r1, #2147483648	; 0x80000000
    bd52:	lsr.w	r0, r3, r2
    bd56:	it	ne
    bd58:	negne	r0, r0
    bd5a:	bx	lr
    bd5c:	mov.w	r0, #0
    bd60:	bx	lr
    bd62:	orrs.w	r0, r0, r1, lsl #12
    bd66:	bne.n	bd74 <__aeabi_d2iz+0x48>
    bd68:	ands.w	r0, r1, #2147483648	; 0x80000000
    bd6c:	it	eq
    bd6e:	mvneq.w	r0, #2147483648	; 0x80000000
    bd72:	bx	lr
    bd74:	mov.w	r0, #0
    bd78:	bx	lr
    bd7a:	nop

0000bd7c <__aeabi_d2uiz>:
    bd7c:	lsls	r2, r1, #1
    bd7e:	bcs.n	bda4 <__aeabi_d2uiz+0x28>
    bd80:	adds.w	r2, r2, #2097152	; 0x200000
    bd84:	bcs.n	bdaa <__aeabi_d2uiz+0x2e>
    bd86:	bpl.n	bda4 <__aeabi_d2uiz+0x28>
    bd88:	mvn.w	r3, #992	; 0x3e0
    bd8c:	subs.w	r2, r3, r2, asr #21
    bd90:	bmi.n	bdb0 <__aeabi_d2uiz+0x34>
    bd92:	mov.w	r3, r1, lsl #11
    bd96:	orr.w	r3, r3, #2147483648	; 0x80000000
    bd9a:	orr.w	r3, r3, r0, lsr #21
    bd9e:	lsr.w	r0, r3, r2
    bda2:	bx	lr
    bda4:	mov.w	r0, #0
    bda8:	bx	lr
    bdaa:	orrs.w	r0, r0, r1, lsl #12
    bdae:	bne.n	bdb6 <__aeabi_d2uiz+0x3a>
    bdb0:	mov.w	r0, #4294967295
    bdb4:	bx	lr
    bdb6:	mov.w	r0, #0
    bdba:	bx	lr

0000bdbc <__aeabi_d2f>:
    bdbc:	mov.w	r2, r1, lsl #1
    bdc0:	subs.w	r3, r2, #1879048192	; 0x70000000
    bdc4:	itt	cs
    bdc6:	subscs.w	ip, r3, #2097152	; 0x200000
    bdca:	rsbscs	ip, ip, #532676608	; 0x1fc00000
    bdce:	bls.n	bdec <__aeabi_d2f+0x30>
    bdd0:	and.w	ip, r1, #2147483648	; 0x80000000
    bdd4:	mov.w	r2, r0, lsl #3
    bdd8:	orr.w	r0, ip, r0, lsr #29
    bddc:	cmp.w	r2, #2147483648	; 0x80000000
    bde0:	adc.w	r0, r0, r3, lsl #2
    bde4:	it	eq
    bde6:	biceq.w	r0, r0, #1
    bdea:	bx	lr
    bdec:	tst.w	r1, #1073741824	; 0x40000000
    bdf0:	bne.n	be36 <__aeabi_d2f+0x7a>
    bdf2:	adds.w	r2, r3, #48234496	; 0x2e00000
    bdf6:	itt	lt
    bdf8:	andlt.w	r0, r1, #2147483648	; 0x80000000
    bdfc:	bxlt	lr
    bdfe:	orr.w	r1, r1, #1048576	; 0x100000
    be02:	mov.w	r2, r2, lsr #21
    be06:	rsb	r2, r2, #24
    be0a:	rsb	ip, r2, #32
    be0e:	lsls.w	r3, r0, ip
    be12:	lsr.w	r0, r0, r2
    be16:	it	ne
    be18:	orrne.w	r0, r0, #1
    be1c:	mov.w	r3, r1, lsl #11
    be20:	mov.w	r3, r3, lsr #11
    be24:	lsl.w	ip, r3, ip
    be28:	orr.w	r0, r0, ip
    be2c:	lsr.w	r3, r3, r2
    be30:	mov.w	r3, r3, lsl #1
    be34:	b.n	bdd0 <__aeabi_d2f+0x14>
    be36:	mvns.w	r3, r2, asr #21
    be3a:	bne.n	be4c <__aeabi_d2f+0x90>
    be3c:	orrs.w	r3, r0, r1, lsl #12
    be40:	ittt	ne
    be42:	movne.w	r0, #2130706432	; 0x7f000000
    be46:	orrne.w	r0, r0, #12582912	; 0xc00000
    be4a:	bxne	lr
    be4c:	and.w	r0, r1, #2147483648	; 0x80000000
    be50:	orr.w	r0, r0, #2130706432	; 0x7f000000
    be54:	orr.w	r0, r0, #8388608	; 0x800000
    be58:	bx	lr
    be5a:	nop

0000be5c <__aeabi_frsub>:
    be5c:	eor.w	r0, r0, #2147483648	; 0x80000000
    be60:	b.n	be68 <__addsf3>
    be62:	nop

0000be64 <__aeabi_fsub>:
    be64:	eor.w	r1, r1, #2147483648	; 0x80000000

0000be68 <__addsf3>:
    be68:	lsls	r2, r0, #1
    be6a:	itttt	ne
    be6c:	movsne.w	r3, r1, lsl #1
    be70:	teqne	r2, r3
    be74:	mvnsne.w	ip, r2, asr #24
    be78:	mvnsne.w	ip, r3, asr #24
    be7c:	beq.n	bf54 <__addsf3+0xec>
    be7e:	mov.w	r2, r2, lsr #24
    be82:	rsbs	r3, r2, r3, lsr #24
    be86:	itttt	gt
    be88:	addgt	r2, r2, r3
    be8a:	eorgt	r1, r0
    be8c:	eorgt	r0, r1
    be8e:	eorgt	r1, r0
    be90:	it	lt
    be92:	neglt	r3, r3
    be94:	cmp	r3, #25
    be96:	it	hi
    be98:	bxhi	lr
    be9a:	tst.w	r0, #2147483648	; 0x80000000
    be9e:	orr.w	r0, r0, #8388608	; 0x800000
    bea2:	bic.w	r0, r0, #4278190080	; 0xff000000
    bea6:	it	ne
    bea8:	negne	r0, r0
    beaa:	tst.w	r1, #2147483648	; 0x80000000
    beae:	orr.w	r1, r1, #8388608	; 0x800000
    beb2:	bic.w	r1, r1, #4278190080	; 0xff000000
    beb6:	it	ne
    beb8:	negne	r1, r1
    beba:	teq	r2, r3
    bebe:	beq.n	bf40 <__addsf3+0xd8>
    bec0:	sub.w	r2, r2, #1
    bec4:	asr.w	ip, r1, r3
    bec8:	adds.w	r0, r0, ip
    becc:	rsb	r3, r3, #32
    bed0:	lsl.w	r1, r1, r3
    bed4:	and.w	r3, r0, #2147483648	; 0x80000000
    bed8:	bpl.n	bee0 <__addsf3+0x78>
    beda:	negs	r1, r1
    bedc:	sbc.w	r0, r0, r0, lsl #1
    bee0:	cmp.w	r0, #8388608	; 0x800000
    bee4:	bcc.n	bf0e <__addsf3+0xa6>
    bee6:	cmp.w	r0, #16777216	; 0x1000000
    beea:	bcc.n	befa <__addsf3+0x92>
    beec:	lsrs	r0, r0, #1
    beee:	mov.w	r1, r1, rrx
    bef2:	add.w	r2, r2, #1
    bef6:	cmp	r2, #254	; 0xfe
    bef8:	bcs.n	bf9e <__addsf3+0x136>
    befa:	cmp.w	r1, #2147483648	; 0x80000000
    befe:	adc.w	r0, r0, r2, lsl #23
    bf02:	it	eq
    bf04:	biceq.w	r0, r0, #1
    bf08:	orr.w	r0, r0, r3
    bf0c:	bx	lr
    bf0e:	lsls	r1, r1, #1
    bf10:	adc.w	r0, r0, r0
    bf14:	tst.w	r0, #8388608	; 0x800000
    bf18:	sub.w	r2, r2, #1
    bf1c:	bne.n	befa <__addsf3+0x92>
    bf1e:	clz	ip, r0
    bf22:	sub.w	ip, ip, #8
    bf26:	subs.w	r2, r2, ip
    bf2a:	lsl.w	r0, r0, ip
    bf2e:	itet	ge
    bf30:	addge.w	r0, r0, r2, lsl #23
    bf34:	neglt	r2, r2
    bf36:	orrge	r0, r3
    bf38:	itt	lt
    bf3a:	lsrlt	r0, r2
    bf3c:	orrlt	r0, r3
    bf3e:	bx	lr
    bf40:	teq	r2, #0
    bf44:	eor.w	r1, r1, #8388608	; 0x800000
    bf48:	itte	eq
    bf4a:	eoreq.w	r0, r0, #8388608	; 0x800000
    bf4e:	addeq	r2, #1
    bf50:	subne	r3, #1
    bf52:	b.n	bec0 <__addsf3+0x58>
    bf54:	mov.w	r3, r1, lsl #1
    bf58:	mvns.w	ip, r2, asr #24
    bf5c:	it	ne
    bf5e:	mvnsne.w	ip, r3, asr #24
    bf62:	beq.n	bfa8 <__addsf3+0x140>
    bf64:	teq	r2, r3
    bf68:	beq.n	bf74 <__addsf3+0x10c>
    bf6a:	teq	r2, #0
    bf6e:	it	eq
    bf70:	moveq	r0, r1
    bf72:	bx	lr
    bf74:	teq	r0, r1
    bf78:	itt	ne
    bf7a:	movne	r0, #0
    bf7c:	bxne	lr
    bf7e:	tst.w	r2, #4278190080	; 0xff000000
    bf82:	bne.n	bf8e <__addsf3+0x126>
    bf84:	lsls	r0, r0, #1
    bf86:	it	cs
    bf88:	orrcs.w	r0, r0, #2147483648	; 0x80000000
    bf8c:	bx	lr
    bf8e:	adds.w	r2, r2, #33554432	; 0x2000000
    bf92:	itt	cc
    bf94:	addcc.w	r0, r0, #8388608	; 0x800000
    bf98:	bxcc	lr
    bf9a:	and.w	r3, r0, #2147483648	; 0x80000000
    bf9e:	orr.w	r0, r3, #2130706432	; 0x7f000000
    bfa2:	orr.w	r0, r0, #8388608	; 0x800000
    bfa6:	bx	lr
    bfa8:	mvns.w	r2, r2, asr #24
    bfac:	itet	ne
    bfae:	movne	r0, r1
    bfb0:	mvnseq.w	r3, r3, asr #24
    bfb4:	movne	r1, r0
    bfb6:	lsls	r2, r0, #9
    bfb8:	itte	eq
    bfba:	movseq.w	r3, r1, lsl #9
    bfbe:	teqeq	r0, r1
    bfc2:	orrne.w	r0, r0, #4194304	; 0x400000
    bfc6:	bx	lr

0000bfc8 <__aeabi_ui2f>:
    bfc8:	mov.w	r3, #0
    bfcc:	b.n	bfd8 <__aeabi_i2f+0x8>
    bfce:	nop

0000bfd0 <__aeabi_i2f>:
    bfd0:	ands.w	r3, r0, #2147483648	; 0x80000000
    bfd4:	it	mi
    bfd6:	negmi	r0, r0
    bfd8:	movs.w	ip, r0
    bfdc:	it	eq
    bfde:	bxeq	lr
    bfe0:	orr.w	r3, r3, #1258291200	; 0x4b000000
    bfe4:	mov	r1, r0
    bfe6:	mov.w	r0, #0
    bfea:	b.n	c026 <__aeabi_l2f+0x2a>

0000bfec <__aeabi_ul2f>:
    bfec:	orrs.w	r2, r0, r1
    bff0:	it	eq
    bff2:	bxeq	lr
    bff4:	mov.w	r3, #0
    bff8:	b.n	c010 <__aeabi_l2f+0x14>
    bffa:	nop

0000bffc <__aeabi_l2f>:
    bffc:	orrs.w	r2, r0, r1
    c000:	it	eq
    c002:	bxeq	lr
    c004:	ands.w	r3, r1, #2147483648	; 0x80000000
    c008:	bpl.n	c010 <__aeabi_l2f+0x14>
    c00a:	negs	r0, r0
    c00c:	sbc.w	r1, r1, r1, lsl #1
    c010:	movs.w	ip, r1
    c014:	ittt	eq
    c016:	moveq	ip, r0
    c018:	moveq	r1, r0
    c01a:	moveq	r0, #0
    c01c:	orr.w	r3, r3, #1526726656	; 0x5b000000
    c020:	it	eq
    c022:	subeq.w	r3, r3, #268435456	; 0x10000000
    c026:	sub.w	r3, r3, #8388608	; 0x800000
    c02a:	clz	r2, ip
    c02e:	subs	r2, #8
    c030:	sub.w	r3, r3, r2, lsl #23
    c034:	blt.n	c058 <__aeabi_l2f+0x5c>
    c036:	lsl.w	ip, r1, r2
    c03a:	add	r3, ip
    c03c:	lsl.w	ip, r0, r2
    c040:	rsb	r2, r2, #32
    c044:	cmp.w	ip, #2147483648	; 0x80000000
    c048:	lsr.w	r2, r0, r2
    c04c:	adc.w	r0, r3, r2
    c050:	it	eq
    c052:	biceq.w	r0, r0, #1
    c056:	bx	lr
    c058:	add.w	r2, r2, #32
    c05c:	lsl.w	ip, r1, r2
    c060:	rsb	r2, r2, #32
    c064:	orrs.w	r0, r0, ip, lsl #1
    c068:	lsr.w	r2, r1, r2
    c06c:	adc.w	r0, r3, r2
    c070:	it	eq
    c072:	biceq.w	r0, r0, ip, lsr #31
    c076:	bx	lr

0000c078 <__aeabi_ldivmod>:
    c078:	cbnz	r3, c09a <__aeabi_ldivmod+0x22>
    c07a:	cbnz	r2, c09a <__aeabi_ldivmod+0x22>
    c07c:	cmp	r1, #0
    c07e:	ittt	lt
    c080:	movlt	r0, #0
    c082:	movlt.w	r1, #2147483648	; 0x80000000
    c086:	blt.n	c096 <__aeabi_ldivmod+0x1e>
    c088:	it	eq
    c08a:	cmpeq	r0, #0
    c08c:	itt	ne
    c08e:	mvnne.w	r1, #2147483648	; 0x80000000
    c092:	movne.w	r0, #4294967295
    c096:	b.w	c49c <__aeabi_idiv0>
    c09a:	sub.w	ip, sp, #8
    c09e:	strd	ip, lr, [sp, #-16]!
    c0a2:	cmp	r1, #0
    c0a4:	blt.n	c0ba <__aeabi_ldivmod+0x42>
    c0a6:	cmp	r3, #0
    c0a8:	blt.n	c0e0 <__aeabi_ldivmod+0x68>
    c0aa:	bl	c1b8 <__udivmoddi4>
    c0ae:	ldr.w	lr, [sp, #4]
    c0b2:	ldrd	r2, r3, [sp, #8]
    c0b6:	add	sp, #16
    c0b8:	bx	lr
    c0ba:	negs	r0, r0
    c0bc:	sbc.w	r1, r1, r1, lsl #1
    c0c0:	cmp	r3, #0
    c0c2:	blt.n	c0fc <__aeabi_ldivmod+0x84>
    c0c4:	bl	c1b8 <__udivmoddi4>
    c0c8:	ldr.w	lr, [sp, #4]
    c0cc:	ldrd	r2, r3, [sp, #8]
    c0d0:	add	sp, #16
    c0d2:	negs	r0, r0
    c0d4:	sbc.w	r1, r1, r1, lsl #1
    c0d8:	negs	r2, r2
    c0da:	sbc.w	r3, r3, r3, lsl #1
    c0de:	bx	lr
    c0e0:	negs	r2, r2
    c0e2:	sbc.w	r3, r3, r3, lsl #1
    c0e6:	bl	c1b8 <__udivmoddi4>
    c0ea:	ldr.w	lr, [sp, #4]
    c0ee:	ldrd	r2, r3, [sp, #8]
    c0f2:	add	sp, #16
    c0f4:	negs	r0, r0
    c0f6:	sbc.w	r1, r1, r1, lsl #1
    c0fa:	bx	lr
    c0fc:	negs	r2, r2
    c0fe:	sbc.w	r3, r3, r3, lsl #1
    c102:	bl	c1b8 <__udivmoddi4>
    c106:	ldr.w	lr, [sp, #4]
    c10a:	ldrd	r2, r3, [sp, #8]
    c10e:	add	sp, #16
    c110:	negs	r2, r2
    c112:	sbc.w	r3, r3, r3, lsl #1
    c116:	bx	lr

0000c118 <__aeabi_uldivmod>:
    c118:	cbnz	r3, c130 <__aeabi_uldivmod+0x18>
    c11a:	cbnz	r2, c130 <__aeabi_uldivmod+0x18>
    c11c:	cmp	r1, #0
    c11e:	it	eq
    c120:	cmpeq	r0, #0
    c122:	itt	ne
    c124:	movne.w	r1, #4294967295
    c128:	movne.w	r0, #4294967295
    c12c:	b.w	c49c <__aeabi_idiv0>
    c130:	sub.w	ip, sp, #8
    c134:	strd	ip, lr, [sp, #-16]!
    c138:	bl	c1b8 <__udivmoddi4>
    c13c:	ldr.w	lr, [sp, #4]
    c140:	ldrd	r2, r3, [sp, #8]
    c144:	add	sp, #16
    c146:	bx	lr

0000c148 <__aeabi_f2lz>:
    c148:	vmov	s15, r0
    c14c:	vcmpe.f32	s15, #0.0
    c150:	vmrs	APSR_nzcv, fpscr
    c154:	bmi.n	c15a <__aeabi_f2lz+0x12>
    c156:	b.w	c16c <__aeabi_f2ulz>
    c15a:	push	{r3, lr}
    c15c:	eor.w	r0, r0, #2147483648	; 0x80000000
    c160:	bl	c16c <__aeabi_f2ulz>
    c164:	negs	r0, r0
    c166:	sbc.w	r1, r1, r1, lsl #1
    c16a:	pop	{r3, pc}

0000c16c <__aeabi_f2ulz>:
    c16c:	push	{r4, r6, r7, lr}
    c16e:	bl	b724 <__aeabi_f2d>
    c172:	movs	r2, #0
    c174:	ldr	r3, [pc, #56]	; (c1b0 <__aeabi_f2ulz+0x44>)
    c176:	mov	r6, r0
    c178:	mov	r7, r1
    c17a:	bl	b7cc <__aeabi_dmul>
    c17e:	bl	bd7c <__aeabi_d2uiz>
    c182:	mov	r4, r0
    c184:	bl	b6e0 <__aeabi_ui2d>
    c188:	movs	r2, #0
    c18a:	ldr	r3, [pc, #40]	; (c1b4 <__aeabi_f2ulz+0x48>)
    c18c:	bl	b7cc <__aeabi_dmul>
    c190:	mov	r2, r0
    c192:	mov	r3, r1
    c194:	mov	r0, r6
    c196:	mov	r1, r7
    c198:	bl	b464 <__aeabi_dsub>
    c19c:	bl	bd7c <__aeabi_d2uiz>
    c1a0:	mov	r3, r4
    c1a2:	movs	r2, #0
    c1a4:	orr.w	r2, r2, r0
    c1a8:	mov	r0, r2
    c1aa:	mov	r1, r3
    c1ac:	pop	{r4, r6, r7, pc}
    c1ae:	nop
    c1b0:	.word	0x3df00000
    c1b4:	.word	0x41f00000

0000c1b8 <__udivmoddi4>:
    c1b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c1bc:	mov	ip, r1
    c1be:	mov	r6, r1
    c1c0:	mov	r4, r0
    c1c2:	ldr	r5, [sp, #32]
    c1c4:	cmp	r3, #0
    c1c6:	bne.n	c26a <__udivmoddi4+0xb2>
    c1c8:	cmp	r2, r1
    c1ca:	mov	r7, r2
    c1cc:	bls.n	c2a8 <__udivmoddi4+0xf0>
    c1ce:	clz	lr, r2
    c1d2:	cmp.w	lr, #0
    c1d6:	beq.n	c1f0 <__udivmoddi4+0x38>
    c1d8:	rsb	r4, lr, #32
    c1dc:	lsr.w	r4, r0, r4
    c1e0:	lsl.w	r6, r1, lr
    c1e4:	orr.w	ip, r4, r6
    c1e8:	lsl.w	r7, r2, lr
    c1ec:	lsl.w	r4, r0, lr
    c1f0:	mov.w	r9, r7, lsr #16
    c1f4:	lsrs	r2, r4, #16
    c1f6:	udiv	r0, ip, r9
    c1fa:	uxth.w	r8, r7
    c1fe:	mls	r6, r9, r0, ip
    c202:	orr.w	r6, r2, r6, lsl #16
    c206:	mul.w	r3, r0, r8
    c20a:	cmp	r3, r6
    c20c:	bls.n	c222 <__udivmoddi4+0x6a>
    c20e:	adds	r6, r6, r7
    c210:	add.w	r2, r0, #4294967295
    c214:	bcs.w	c45c <__udivmoddi4+0x2a4>
    c218:	cmp	r3, r6
    c21a:	bls.w	c45c <__udivmoddi4+0x2a4>
    c21e:	subs	r0, #2
    c220:	add	r6, r7
    c222:	subs	r6, r6, r3
    c224:	uxth	r2, r4
    c226:	udiv	r3, r6, r9
    c22a:	mls	r6, r9, r3, r6
    c22e:	orr.w	r4, r2, r6, lsl #16
    c232:	mul.w	r8, r3, r8
    c236:	cmp	r8, r4
    c238:	bls.n	c24e <__udivmoddi4+0x96>
    c23a:	adds	r4, r4, r7
    c23c:	add.w	r2, r3, #4294967295
    c240:	bcs.w	c458 <__udivmoddi4+0x2a0>
    c244:	cmp	r8, r4
    c246:	bls.w	c458 <__udivmoddi4+0x2a0>
    c24a:	subs	r3, #2
    c24c:	add	r4, r7
    c24e:	rsb	r4, r8, r4
    c252:	orr.w	r0, r3, r0, lsl #16
    c256:	movs	r1, #0
    c258:	cmp	r5, #0
    c25a:	beq.n	c322 <__udivmoddi4+0x16a>
    c25c:	lsr.w	r4, r4, lr
    c260:	movs	r3, #0
    c262:	str	r4, [r5, #0]
    c264:	str	r3, [r5, #4]
    c266:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c26a:	cmp	r3, r1
    c26c:	bls.n	c27e <__udivmoddi4+0xc6>
    c26e:	cmp	r5, #0
    c270:	beq.n	c31e <__udivmoddi4+0x166>
    c272:	movs	r1, #0
    c274:	stmia.w	r5, {r0, r6}
    c278:	mov	r0, r1
    c27a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c27e:	clz	r1, r3
    c282:	cmp	r1, #0
    c284:	bne.w	c3a8 <__udivmoddi4+0x1f0>
    c288:	cmp	r3, r6
    c28a:	bcc.n	c292 <__udivmoddi4+0xda>
    c28c:	cmp	r2, r0
    c28e:	bhi.w	c482 <__udivmoddi4+0x2ca>
    c292:	subs	r4, r0, r2
    c294:	sbc.w	r6, r6, r3
    c298:	movs	r0, #1
    c29a:	mov	ip, r6
    c29c:	cmp	r5, #0
    c29e:	beq.n	c322 <__udivmoddi4+0x16a>
    c2a0:	stmia.w	r5, {r4, ip}
    c2a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c2a8:	cbnz	r2, c2b0 <__udivmoddi4+0xf8>
    c2aa:	movs	r7, #1
    c2ac:	udiv	r7, r7, r2
    c2b0:	clz	lr, r7
    c2b4:	cmp.w	lr, #0
    c2b8:	bne.n	c326 <__udivmoddi4+0x16e>
    c2ba:	subs	r3, r6, r7
    c2bc:	mov.w	r8, r7, lsr #16
    c2c0:	uxth.w	ip, r7
    c2c4:	movs	r1, #1
    c2c6:	udiv	r0, r3, r8
    c2ca:	lsrs	r2, r4, #16
    c2cc:	mls	r6, r8, r0, r3
    c2d0:	orr.w	r6, r2, r6, lsl #16
    c2d4:	mul.w	r3, ip, r0
    c2d8:	cmp	r3, r6
    c2da:	bls.n	c2ec <__udivmoddi4+0x134>
    c2dc:	adds	r6, r6, r7
    c2de:	add.w	r2, r0, #4294967295
    c2e2:	bcs.n	c2ea <__udivmoddi4+0x132>
    c2e4:	cmp	r3, r6
    c2e6:	bhi.w	c486 <__udivmoddi4+0x2ce>
    c2ea:	mov	r0, r2
    c2ec:	subs	r6, r6, r3
    c2ee:	uxth	r2, r4
    c2f0:	udiv	r3, r6, r8
    c2f4:	mls	r6, r8, r3, r6
    c2f8:	orr.w	r4, r2, r6, lsl #16
    c2fc:	mul.w	ip, ip, r3
    c300:	cmp	ip, r4
    c302:	bls.n	c314 <__udivmoddi4+0x15c>
    c304:	adds	r4, r4, r7
    c306:	add.w	r2, r3, #4294967295
    c30a:	bcs.n	c312 <__udivmoddi4+0x15a>
    c30c:	cmp	ip, r4
    c30e:	bhi.w	c47c <__udivmoddi4+0x2c4>
    c312:	mov	r3, r2
    c314:	rsb	r4, ip, r4
    c318:	orr.w	r0, r3, r0, lsl #16
    c31c:	b.n	c258 <__udivmoddi4+0xa0>
    c31e:	mov	r1, r5
    c320:	mov	r0, r5
    c322:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c326:	rsb	r1, lr, #32
    c32a:	lsl.w	r3, r6, lr
    c32e:	lsl.w	r7, r7, lr
    c332:	lsr.w	r9, r0, r1
    c336:	mov.w	r8, r7, lsr #16
    c33a:	lsrs	r6, r1
    c33c:	orr.w	r9, r9, r3
    c340:	udiv	sl, r6, r8
    c344:	mov.w	r4, r9, lsr #16
    c348:	mls	r6, r8, sl, r6
    c34c:	uxth.w	ip, r7
    c350:	orr.w	r3, r4, r6, lsl #16
    c354:	mul.w	r2, sl, ip
    c358:	cmp	r2, r3
    c35a:	lsl.w	r4, r0, lr
    c35e:	bls.n	c376 <__udivmoddi4+0x1be>
    c360:	adds	r3, r3, r7
    c362:	add.w	r1, sl, #4294967295
    c366:	bcs.w	c478 <__udivmoddi4+0x2c0>
    c36a:	cmp	r2, r3
    c36c:	bls.w	c478 <__udivmoddi4+0x2c0>
    c370:	sub.w	sl, sl, #2
    c374:	add	r3, r7
    c376:	subs	r3, r3, r2
    c378:	uxth.w	r9, r9
    c37c:	udiv	r1, r3, r8
    c380:	mls	r3, r8, r1, r3
    c384:	orr.w	r3, r9, r3, lsl #16
    c388:	mul.w	r6, r1, ip
    c38c:	cmp	r6, r3
    c38e:	bls.n	c3a0 <__udivmoddi4+0x1e8>
    c390:	adds	r3, r3, r7
    c392:	add.w	r2, r1, #4294967295
    c396:	bcs.n	c470 <__udivmoddi4+0x2b8>
    c398:	cmp	r6, r3
    c39a:	bls.n	c470 <__udivmoddi4+0x2b8>
    c39c:	subs	r1, #2
    c39e:	add	r3, r7
    c3a0:	subs	r3, r3, r6
    c3a2:	orr.w	r1, r1, sl, lsl #16
    c3a6:	b.n	c2c6 <__udivmoddi4+0x10e>
    c3a8:	rsb	lr, r1, #32
    c3ac:	lsr.w	r4, r2, lr
    c3b0:	lsls	r3, r1
    c3b2:	orrs	r3, r4
    c3b4:	lsr.w	r7, r0, lr
    c3b8:	lsl.w	r4, r6, r1
    c3bc:	mov.w	ip, r3, lsr #16
    c3c0:	lsr.w	r6, r6, lr
    c3c4:	orrs	r4, r7
    c3c6:	udiv	r9, r6, ip
    c3ca:	lsrs	r7, r4, #16
    c3cc:	mls	r6, ip, r9, r6
    c3d0:	uxth.w	r8, r3
    c3d4:	orr.w	r6, r7, r6, lsl #16
    c3d8:	mul.w	r7, r9, r8
    c3dc:	cmp	r7, r6
    c3de:	lsl.w	r2, r2, r1
    c3e2:	lsl.w	sl, r0, r1
    c3e6:	bls.n	c3fa <__udivmoddi4+0x242>
    c3e8:	adds	r6, r6, r3
    c3ea:	add.w	r0, r9, #4294967295
    c3ee:	bcs.n	c474 <__udivmoddi4+0x2bc>
    c3f0:	cmp	r7, r6
    c3f2:	bls.n	c474 <__udivmoddi4+0x2bc>
    c3f4:	sub.w	r9, r9, #2
    c3f8:	add	r6, r3
    c3fa:	subs	r6, r6, r7
    c3fc:	uxth	r0, r4
    c3fe:	udiv	r4, r6, ip
    c402:	mls	r6, ip, r4, r6
    c406:	orr.w	r7, r0, r6, lsl #16
    c40a:	mul.w	r8, r4, r8
    c40e:	cmp	r8, r7
    c410:	bls.n	c422 <__udivmoddi4+0x26a>
    c412:	adds	r7, r7, r3
    c414:	add.w	r0, r4, #4294967295
    c418:	bcs.n	c46c <__udivmoddi4+0x2b4>
    c41a:	cmp	r8, r7
    c41c:	bls.n	c46c <__udivmoddi4+0x2b4>
    c41e:	subs	r4, #2
    c420:	add	r7, r3
    c422:	orr.w	r0, r4, r9, lsl #16
    c426:	rsb	r7, r8, r7
    c42a:	umull	r8, r9, r0, r2
    c42e:	cmp	r7, r9
    c430:	mov	r4, r8
    c432:	mov	r6, r9
    c434:	bcc.n	c460 <__udivmoddi4+0x2a8>
    c436:	beq.n	c48c <__udivmoddi4+0x2d4>
    c438:	cbz	r5, c494 <__udivmoddi4+0x2dc>
    c43a:	subs.w	r3, sl, r4
    c43e:	sbc.w	r7, r7, r6
    c442:	lsl.w	lr, r7, lr
    c446:	lsrs	r3, r1
    c448:	lsrs	r7, r1
    c44a:	orr.w	r3, lr, r3
    c44e:	stmia.w	r5, {r3, r7}
    c452:	movs	r1, #0
    c454:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c458:	mov	r3, r2
    c45a:	b.n	c24e <__udivmoddi4+0x96>
    c45c:	mov	r0, r2
    c45e:	b.n	c222 <__udivmoddi4+0x6a>
    c460:	subs.w	r4, r8, r2
    c464:	sbc.w	r6, r9, r3
    c468:	subs	r0, #1
    c46a:	b.n	c438 <__udivmoddi4+0x280>
    c46c:	mov	r4, r0
    c46e:	b.n	c422 <__udivmoddi4+0x26a>
    c470:	mov	r1, r2
    c472:	b.n	c3a0 <__udivmoddi4+0x1e8>
    c474:	mov	r9, r0
    c476:	b.n	c3fa <__udivmoddi4+0x242>
    c478:	mov	sl, r1
    c47a:	b.n	c376 <__udivmoddi4+0x1be>
    c47c:	subs	r3, #2
    c47e:	add	r4, r7
    c480:	b.n	c314 <__udivmoddi4+0x15c>
    c482:	mov	r0, r1
    c484:	b.n	c29c <__udivmoddi4+0xe4>
    c486:	subs	r0, #2
    c488:	add	r6, r7
    c48a:	b.n	c2ec <__udivmoddi4+0x134>
    c48c:	cmp	sl, r8
    c48e:	bcc.n	c460 <__udivmoddi4+0x2a8>
    c490:	mov	r6, r7
    c492:	b.n	c438 <__udivmoddi4+0x280>
    c494:	mov	r1, r5
    c496:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c49a:	nop

0000c49c <__aeabi_idiv0>:
    c49c:	bx	lr
    c49e:	nop

0000c4a0 <__aeabi_atexit>:
    c4a0:	mov	r3, r1
    c4a2:	mov	r1, r0
    c4a4:	mov	r0, r3
    c4a6:	b.w	c4ac <__cxa_atexit>
    c4aa:	nop

0000c4ac <__cxa_atexit>:
    c4ac:	mov	r3, r2
    c4ae:	mov	r2, r1
    c4b0:	mov	r1, r0
    c4b2:	movs	r0, #2
    c4b4:	b.w	10aa8 <__register_exitproc>

0000c4b8 <__errno>:
    c4b8:	ldr	r3, [pc, #4]	; (c4c0 <__errno+0x8>)
    c4ba:	ldr	r0, [r3, #0]
    c4bc:	bx	lr
    c4be:	nop
    c4c0:	.word	0x1fff0d78

0000c4c4 <__libc_init_array>:
    c4c4:	push	{r4, r5, r6, lr}
    c4c6:	ldr	r6, [pc, #60]	; (c504 <__libc_init_array+0x40>)
    c4c8:	ldr	r5, [pc, #60]	; (c508 <__libc_init_array+0x44>)
    c4ca:	subs	r6, r6, r5
    c4cc:	asrs	r6, r6, #2
    c4ce:	it	ne
    c4d0:	movne	r4, #0
    c4d2:	beq.n	c4e0 <__libc_init_array+0x1c>
    c4d4:	adds	r4, #1
    c4d6:	ldr.w	r3, [r5], #4
    c4da:	blx	r3
    c4dc:	cmp	r6, r4
    c4de:	bne.n	c4d4 <__libc_init_array+0x10>
    c4e0:	ldr	r6, [pc, #40]	; (c50c <__libc_init_array+0x48>)
    c4e2:	ldr	r5, [pc, #44]	; (c510 <__libc_init_array+0x4c>)
    c4e4:	subs	r6, r6, r5
    c4e6:	bl	14584 <_init>
    c4ea:	asrs	r6, r6, #2
    c4ec:	it	ne
    c4ee:	movne	r4, #0
    c4f0:	beq.n	c500 <__libc_init_array+0x3c>
    c4f2:	adds	r4, #1
    c4f4:	ldr.w	r3, [r5], #4
    c4f8:	blx	r3
    c4fa:	cmp	r6, r4
    c4fc:	bne.n	c4f2 <__libc_init_array+0x2e>
    c4fe:	pop	{r4, r5, r6, pc}
    c500:	pop	{r4, r5, r6, pc}
    c502:	nop
    c504:	.word	0x00014590
    c508:	.word	0x00014590
    c50c:	.word	0x0001459c
    c510:	.word	0x00014590

0000c514 <__get_current_locale>:
    c514:	ldr	r2, [pc, #12]	; (c524 <__get_current_locale+0x10>)
    c516:	ldr	r3, [pc, #16]	; (c528 <__get_current_locale+0x14>)
    c518:	ldr	r2, [r2, #0]
    c51a:	ldr	r0, [r2, #52]	; 0x34
    c51c:	cmp	r0, #0
    c51e:	it	eq
    c520:	moveq	r0, r3
    c522:	bx	lr
    c524:	.word	0x1fff0d78
    c528:	.word	0x1fff0d7c

0000c52c <__locale_mb_cur_max>:
    c52c:	ldr	r3, [pc, #16]	; (c540 <__locale_mb_cur_max+0x14>)
    c52e:	ldr	r2, [pc, #20]	; (c544 <__locale_mb_cur_max+0x18>)
    c530:	ldr	r3, [r3, #0]
    c532:	ldr	r3, [r3, #52]	; 0x34
    c534:	cmp	r3, #0
    c536:	it	eq
    c538:	moveq	r3, r2
    c53a:	ldrb.w	r0, [r3, #296]	; 0x128
    c53e:	bx	lr
    c540:	.word	0x1fff0d78
    c544:	.word	0x1fff0d7c

0000c548 <__locale_ctype_ptr_l>:
    c548:	ldr.w	r0, [r0, #236]	; 0xec
    c54c:	bx	lr
    c54e:	nop

0000c550 <__locale_ctype_ptr>:
    c550:	push	{r3, lr}
    c552:	ldr	r3, [pc, #12]	; (c560 <__locale_ctype_ptr+0x10>)
    c554:	ldr	r0, [r3, #0]
    c556:	bl	c514 <__get_current_locale>
    c55a:	ldr.w	r0, [r0, #236]	; 0xec
    c55e:	pop	{r3, pc}
    c560:	.word	0x1fff0d78

0000c564 <malloc>:
    c564:	ldr	r3, [pc, #8]	; (c570 <malloc+0xc>)
    c566:	mov	r1, r0
    c568:	ldr	r0, [r3, #0]
    c56a:	b.w	c584 <_malloc_r>
    c56e:	nop
    c570:	.word	0x1fff0d78

0000c574 <free>:
    c574:	ldr	r3, [pc, #8]	; (c580 <free+0xc>)
    c576:	mov	r1, r0
    c578:	ldr	r0, [r3, #0]
    c57a:	b.w	11b90 <_free_r>
    c57e:	nop
    c580:	.word	0x1fff0d78

0000c584 <_malloc_r>:
    c584:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c588:	add.w	r5, r1, #11
    c58c:	cmp	r5, #22
    c58e:	sub	sp, #12
    c590:	mov	r6, r0
    c592:	bls.w	c6d4 <_malloc_r+0x150>
    c596:	bics.w	r5, r5, #7
    c59a:	bmi.w	c71c <_malloc_r+0x198>
    c59e:	cmp	r1, r5
    c5a0:	bhi.w	c71c <_malloc_r+0x198>
    c5a4:	bl	cce8 <__malloc_lock>
    c5a8:	cmp.w	r5, #504	; 0x1f8
    c5ac:	bcc.w	cae8 <_malloc_r+0x564>
    c5b0:	lsrs	r3, r5, #9
    c5b2:	beq.w	c72a <_malloc_r+0x1a6>
    c5b6:	cmp	r3, #4
    c5b8:	bhi.w	c8c2 <_malloc_r+0x33e>
    c5bc:	lsrs	r0, r5, #6
    c5be:	add.w	lr, r0, #57	; 0x39
    c5c2:	mov.w	r3, lr, lsl #1
    c5c6:	adds	r0, #56	; 0x38
    c5c8:	ldr	r7, [pc, #784]	; (c8dc <_malloc_r+0x358>)
    c5ca:	add.w	r3, r7, r3, lsl #2
    c5ce:	sub.w	r1, r3, #8
    c5d2:	ldr	r4, [r3, #4]
    c5d4:	cmp	r1, r4
    c5d6:	bne.n	c5e8 <_malloc_r+0x64>
    c5d8:	b.n	c734 <_malloc_r+0x1b0>
    c5da:	cmp	r2, #0
    c5dc:	bge.w	c738 <_malloc_r+0x1b4>
    c5e0:	ldr	r4, [r4, #12]
    c5e2:	cmp	r1, r4
    c5e4:	beq.w	c734 <_malloc_r+0x1b0>
    c5e8:	ldr	r3, [r4, #4]
    c5ea:	bic.w	r3, r3, #3
    c5ee:	subs	r2, r3, r5
    c5f0:	cmp	r2, #15
    c5f2:	ble.n	c5da <_malloc_r+0x56>
    c5f4:	ldr	r1, [pc, #740]	; (c8dc <_malloc_r+0x358>)
    c5f6:	ldr	r4, [r7, #16]
    c5f8:	add.w	lr, r1, #8
    c5fc:	cmp	r4, lr
    c5fe:	beq.w	c968 <_malloc_r+0x3e4>
    c602:	ldr	r3, [r4, #4]
    c604:	bic.w	r3, r3, #3
    c608:	subs	r2, r3, r5
    c60a:	cmp	r2, #15
    c60c:	bgt.w	c942 <_malloc_r+0x3be>
    c610:	cmp	r2, #0
    c612:	str.w	lr, [r1, #20]
    c616:	str.w	lr, [r1, #16]
    c61a:	bge.w	c75a <_malloc_r+0x1d6>
    c61e:	cmp.w	r3, #512	; 0x200
    c622:	bcs.w	c8f4 <_malloc_r+0x370>
    c626:	lsrs	r3, r3, #3
    c628:	add.w	ip, r3, #1
    c62c:	movs	r2, #1
    c62e:	asrs	r3, r3, #2
    c630:	lsl.w	r3, r2, r3
    c634:	ldr	r2, [r1, #4]
    c636:	ldr.w	r8, [r1, ip, lsl #3]
    c63a:	str.w	r8, [r4, #8]
    c63e:	add.w	r9, r1, ip, lsl #3
    c642:	orrs	r2, r3
    c644:	sub.w	r3, r9, #8
    c648:	str	r3, [r4, #12]
    c64a:	str	r2, [r1, #4]
    c64c:	str.w	r4, [r1, ip, lsl #3]
    c650:	str.w	r4, [r8, #12]
    c654:	asrs	r3, r0, #2
    c656:	movs	r4, #1
    c658:	lsls	r4, r3
    c65a:	cmp	r4, r2
    c65c:	bhi.w	c774 <_malloc_r+0x1f0>
    c660:	tst	r4, r2
    c662:	bne.n	c672 <_malloc_r+0xee>
    c664:	bic.w	r0, r0, #3
    c668:	lsls	r4, r4, #1
    c66a:	tst	r4, r2
    c66c:	add.w	r0, r0, #4
    c670:	beq.n	c668 <_malloc_r+0xe4>
    c672:	add.w	r9, r7, r0, lsl #3
    c676:	mov	ip, r9
    c678:	mov	r8, r0
    c67a:	ldr.w	r1, [ip, #12]
    c67e:	cmp	ip, r1
    c680:	bne.n	c692 <_malloc_r+0x10e>
    c682:	b.n	c96c <_malloc_r+0x3e8>
    c684:	cmp	r2, #0
    c686:	bge.w	c98c <_malloc_r+0x408>
    c68a:	ldr	r1, [r1, #12]
    c68c:	cmp	ip, r1
    c68e:	beq.w	c96c <_malloc_r+0x3e8>
    c692:	ldr	r3, [r1, #4]
    c694:	bic.w	r3, r3, #3
    c698:	subs	r2, r3, r5
    c69a:	cmp	r2, #15
    c69c:	ble.n	c684 <_malloc_r+0x100>
    c69e:	mov	r4, r1
    c6a0:	ldr.w	ip, [r1, #12]
    c6a4:	ldr.w	r8, [r4, #8]!
    c6a8:	adds	r3, r1, r5
    c6aa:	orr.w	r5, r5, #1
    c6ae:	str	r5, [r1, #4]
    c6b0:	orr.w	r1, r2, #1
    c6b4:	str.w	ip, [r8, #12]
    c6b8:	mov	r0, r6
    c6ba:	str.w	r8, [ip, #8]
    c6be:	str	r3, [r7, #20]
    c6c0:	str	r3, [r7, #16]
    c6c2:	str.w	lr, [r3, #12]
    c6c6:	str.w	lr, [r3, #8]
    c6ca:	str	r1, [r3, #4]
    c6cc:	str	r2, [r3, r2]
    c6ce:	bl	ccec <__malloc_unlock>
    c6d2:	b.n	c714 <_malloc_r+0x190>
    c6d4:	cmp	r1, #16
    c6d6:	bhi.n	c71c <_malloc_r+0x198>
    c6d8:	bl	cce8 <__malloc_lock>
    c6dc:	movs	r5, #16
    c6de:	movs	r3, #6
    c6e0:	movs	r0, #2
    c6e2:	ldr	r7, [pc, #504]	; (c8dc <_malloc_r+0x358>)
    c6e4:	add.w	r3, r7, r3, lsl #2
    c6e8:	sub.w	r2, r3, #8
    c6ec:	ldr	r4, [r3, #4]
    c6ee:	cmp	r4, r2
    c6f0:	beq.w	c97e <_malloc_r+0x3fa>
    c6f4:	ldr	r3, [r4, #4]
    c6f6:	ldr	r1, [r4, #12]
    c6f8:	ldr	r5, [r4, #8]
    c6fa:	bic.w	r3, r3, #3
    c6fe:	add	r3, r4
    c700:	mov	r0, r6
    c702:	ldr	r2, [r3, #4]
    c704:	str	r1, [r5, #12]
    c706:	orr.w	r2, r2, #1
    c70a:	str	r5, [r1, #8]
    c70c:	str	r2, [r3, #4]
    c70e:	bl	ccec <__malloc_unlock>
    c712:	adds	r4, #8
    c714:	mov	r0, r4
    c716:	add	sp, #12
    c718:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c71c:	movs	r4, #0
    c71e:	movs	r3, #12
    c720:	mov	r0, r4
    c722:	str	r3, [r6, #0]
    c724:	add	sp, #12
    c726:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c72a:	movs	r3, #128	; 0x80
    c72c:	mov.w	lr, #64	; 0x40
    c730:	movs	r0, #63	; 0x3f
    c732:	b.n	c5c8 <_malloc_r+0x44>
    c734:	mov	r0, lr
    c736:	b.n	c5f4 <_malloc_r+0x70>
    c738:	add	r3, r4
    c73a:	ldr	r1, [r4, #12]
    c73c:	ldr	r2, [r3, #4]
    c73e:	ldr	r5, [r4, #8]
    c740:	orr.w	r2, r2, #1
    c744:	str	r1, [r5, #12]
    c746:	mov	r0, r6
    c748:	str	r5, [r1, #8]
    c74a:	str	r2, [r3, #4]
    c74c:	bl	ccec <__malloc_unlock>
    c750:	adds	r4, #8
    c752:	mov	r0, r4
    c754:	add	sp, #12
    c756:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c75a:	add	r3, r4
    c75c:	mov	r0, r6
    c75e:	ldr	r2, [r3, #4]
    c760:	orr.w	r2, r2, #1
    c764:	str	r2, [r3, #4]
    c766:	bl	ccec <__malloc_unlock>
    c76a:	adds	r4, #8
    c76c:	mov	r0, r4
    c76e:	add	sp, #12
    c770:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c774:	ldr	r4, [r7, #8]
    c776:	ldr	r3, [r4, #4]
    c778:	bic.w	r8, r3, #3
    c77c:	cmp	r8, r5
    c77e:	bcc.n	c78a <_malloc_r+0x206>
    c780:	rsb	r3, r5, r8
    c784:	cmp	r3, #15
    c786:	bgt.w	c8a2 <_malloc_r+0x31e>
    c78a:	ldr	r3, [pc, #340]	; (c8e0 <_malloc_r+0x35c>)
    c78c:	ldr.w	r9, [pc, #352]	; c8f0 <_malloc_r+0x36c>
    c790:	ldr	r2, [r3, #0]
    c792:	ldr.w	r3, [r9]
    c796:	adds	r3, #1
    c798:	add	r2, r5
    c79a:	add.w	sl, r4, r8
    c79e:	beq.w	ca62 <_malloc_r+0x4de>
    c7a2:	add.w	r2, r2, #4096	; 0x1000
    c7a6:	adds	r2, #15
    c7a8:	bic.w	r2, r2, #4080	; 0xff0
    c7ac:	bic.w	r2, r2, #15
    c7b0:	mov	r1, r2
    c7b2:	mov	r0, r6
    c7b4:	str	r2, [sp, #4]
    c7b6:	bl	d0d0 <_sbrk_r>
    c7ba:	cmp.w	r0, #4294967295
    c7be:	mov	fp, r0
    c7c0:	ldr	r2, [sp, #4]
    c7c2:	beq.w	ca76 <_malloc_r+0x4f2>
    c7c6:	cmp	sl, r0
    c7c8:	bhi.w	c9c4 <_malloc_r+0x440>
    c7cc:	ldr	r3, [pc, #276]	; (c8e4 <_malloc_r+0x360>)
    c7ce:	ldr	r1, [r3, #0]
    c7d0:	cmp	sl, fp
    c7d2:	add	r1, r2
    c7d4:	str	r1, [r3, #0]
    c7d6:	beq.w	ca80 <_malloc_r+0x4fc>
    c7da:	ldr.w	r0, [r9]
    c7de:	ldr.w	lr, [pc, #272]	; c8f0 <_malloc_r+0x36c>
    c7e2:	adds	r0, #1
    c7e4:	ittet	ne
    c7e6:	rsbne	sl, sl, fp
    c7ea:	addne	r1, sl
    c7ec:	streq.w	fp, [lr]
    c7f0:	strne	r1, [r3, #0]
    c7f2:	ands.w	r1, fp, #7
    c7f6:	beq.w	ca28 <_malloc_r+0x4a4>
    c7fa:	rsb	r0, r1, #8
    c7fe:	rsb	r1, r1, #4096	; 0x1000
    c802:	add	fp, r0
    c804:	adds	r1, #8
    c806:	add	r2, fp
    c808:	ubfx	r2, r2, #0, #12
    c80c:	rsb	r9, r2, r1
    c810:	mov	r1, r9
    c812:	mov	r0, r6
    c814:	str	r3, [sp, #4]
    c816:	bl	d0d0 <_sbrk_r>
    c81a:	adds	r3, r0, #1
    c81c:	ldr	r3, [sp, #4]
    c81e:	beq.w	caa0 <_malloc_r+0x51c>
    c822:	rsb	r2, fp, r0
    c826:	add	r2, r9
    c828:	orr.w	r2, r2, #1
    c82c:	ldr	r1, [r3, #0]
    c82e:	str.w	fp, [r7, #8]
    c832:	add	r1, r9
    c834:	cmp	r4, r7
    c836:	str.w	r2, [fp, #4]
    c83a:	str	r1, [r3, #0]
    c83c:	ldr.w	r9, [pc, #164]	; c8e4 <_malloc_r+0x360>
    c840:	beq.n	c870 <_malloc_r+0x2ec>
    c842:	cmp.w	r8, #15
    c846:	bls.w	ca44 <_malloc_r+0x4c0>
    c84a:	ldr	r2, [r4, #4]
    c84c:	sub.w	r3, r8, #12
    c850:	bic.w	r3, r3, #7
    c854:	adds	r0, r4, r3
    c856:	and.w	r2, r2, #1
    c85a:	mov.w	lr, #5
    c85e:	orrs	r2, r3
    c860:	cmp	r3, #15
    c862:	str	r2, [r4, #4]
    c864:	str.w	lr, [r0, #4]
    c868:	str.w	lr, [r0, #8]
    c86c:	bhi.w	caa8 <_malloc_r+0x524>
    c870:	ldr	r3, [pc, #116]	; (c8e8 <_malloc_r+0x364>)
    c872:	ldr	r4, [r7, #8]
    c874:	ldr	r2, [r3, #0]
    c876:	cmp	r1, r2
    c878:	it	hi
    c87a:	strhi	r1, [r3, #0]
    c87c:	ldr	r3, [pc, #108]	; (c8ec <_malloc_r+0x368>)
    c87e:	ldr	r2, [r3, #0]
    c880:	cmp	r1, r2
    c882:	ldr	r2, [r4, #4]
    c884:	it	hi
    c886:	strhi	r1, [r3, #0]
    c888:	bic.w	r2, r2, #3
    c88c:	cmp	r5, r2
    c88e:	sub.w	r3, r2, r5
    c892:	bhi.n	c898 <_malloc_r+0x314>
    c894:	cmp	r3, #15
    c896:	bgt.n	c8a2 <_malloc_r+0x31e>
    c898:	mov	r0, r6
    c89a:	bl	ccec <__malloc_unlock>
    c89e:	movs	r4, #0
    c8a0:	b.n	c714 <_malloc_r+0x190>
    c8a2:	adds	r2, r4, r5
    c8a4:	orr.w	r3, r3, #1
    c8a8:	orr.w	r5, r5, #1
    c8ac:	str	r5, [r4, #4]
    c8ae:	mov	r0, r6
    c8b0:	str	r2, [r7, #8]
    c8b2:	str	r3, [r2, #4]
    c8b4:	bl	ccec <__malloc_unlock>
    c8b8:	adds	r4, #8
    c8ba:	mov	r0, r4
    c8bc:	add	sp, #12
    c8be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8c2:	cmp	r3, #20
    c8c4:	bls.n	c9aa <_malloc_r+0x426>
    c8c6:	cmp	r3, #84	; 0x54
    c8c8:	bhi.w	ca14 <_malloc_r+0x490>
    c8cc:	lsrs	r0, r5, #12
    c8ce:	add.w	lr, r0, #111	; 0x6f
    c8d2:	mov.w	r3, lr, lsl #1
    c8d6:	adds	r0, #110	; 0x6e
    c8d8:	b.n	c5c8 <_malloc_r+0x44>
    c8da:	nop
    c8dc:	.word	0x1fff0ee8
    c8e0:	.word	0x200204d8
    c8e4:	.word	0x200204dc
    c8e8:	.word	0x200204d4
    c8ec:	.word	0x200204d0
    c8f0:	.word	0x1fff12f4
    c8f4:	lsrs	r2, r3, #9
    c8f6:	cmp	r2, #4
    c8f8:	bls.n	c9b8 <_malloc_r+0x434>
    c8fa:	cmp	r2, #20
    c8fc:	bhi.w	ca66 <_malloc_r+0x4e2>
    c900:	add.w	r1, r2, #92	; 0x5c
    c904:	lsls	r1, r1, #1
    c906:	adds	r2, #91	; 0x5b
    c908:	add.w	ip, r7, r1, lsl #2
    c90c:	ldr.w	r1, [r7, r1, lsl #2]
    c910:	ldr.w	r8, [pc, #476]	; caf0 <_malloc_r+0x56c>
    c914:	sub.w	ip, ip, #8
    c918:	cmp	ip, r1
    c91a:	beq.w	ca2e <_malloc_r+0x4aa>
    c91e:	ldr	r2, [r1, #4]
    c920:	bic.w	r2, r2, #3
    c924:	cmp	r3, r2
    c926:	bcs.n	c92e <_malloc_r+0x3aa>
    c928:	ldr	r1, [r1, #8]
    c92a:	cmp	ip, r1
    c92c:	bne.n	c91e <_malloc_r+0x39a>
    c92e:	ldr.w	ip, [r1, #12]
    c932:	ldr	r2, [r7, #4]
    c934:	str.w	ip, [r4, #12]
    c938:	str	r1, [r4, #8]
    c93a:	str.w	r4, [ip, #8]
    c93e:	str	r4, [r1, #12]
    c940:	b.n	c654 <_malloc_r+0xd0>
    c942:	adds	r3, r4, r5
    c944:	orr.w	r7, r2, #1
    c948:	orr.w	r5, r5, #1
    c94c:	str	r5, [r4, #4]
    c94e:	mov	r0, r6
    c950:	str	r3, [r1, #20]
    c952:	str	r3, [r1, #16]
    c954:	str.w	lr, [r3, #12]
    c958:	str.w	lr, [r3, #8]
    c95c:	str	r7, [r3, #4]
    c95e:	str	r2, [r3, r2]
    c960:	adds	r4, #8
    c962:	bl	ccec <__malloc_unlock>
    c966:	b.n	c714 <_malloc_r+0x190>
    c968:	ldr	r2, [r1, #4]
    c96a:	b.n	c654 <_malloc_r+0xd0>
    c96c:	add.w	r8, r8, #1
    c970:	tst.w	r8, #3
    c974:	add.w	ip, ip, #8
    c978:	bne.w	c67a <_malloc_r+0xf6>
    c97c:	b.n	c9e0 <_malloc_r+0x45c>
    c97e:	ldr	r4, [r3, #12]
    c980:	cmp	r3, r4
    c982:	it	eq
    c984:	addeq	r0, #2
    c986:	beq.w	c5f4 <_malloc_r+0x70>
    c98a:	b.n	c6f4 <_malloc_r+0x170>
    c98c:	add	r3, r1
    c98e:	mov	r4, r1
    c990:	ldr	r2, [r3, #4]
    c992:	ldr	r1, [r1, #12]
    c994:	ldr.w	r5, [r4, #8]!
    c998:	orr.w	r2, r2, #1
    c99c:	str	r2, [r3, #4]
    c99e:	mov	r0, r6
    c9a0:	str	r1, [r5, #12]
    c9a2:	str	r5, [r1, #8]
    c9a4:	bl	ccec <__malloc_unlock>
    c9a8:	b.n	c714 <_malloc_r+0x190>
    c9aa:	add.w	lr, r3, #92	; 0x5c
    c9ae:	add.w	r0, r3, #91	; 0x5b
    c9b2:	mov.w	r3, lr, lsl #1
    c9b6:	b.n	c5c8 <_malloc_r+0x44>
    c9b8:	lsrs	r2, r3, #6
    c9ba:	add.w	r1, r2, #57	; 0x39
    c9be:	lsls	r1, r1, #1
    c9c0:	adds	r2, #56	; 0x38
    c9c2:	b.n	c908 <_malloc_r+0x384>
    c9c4:	cmp	r4, r7
    c9c6:	ldr	r3, [pc, #296]	; (caf0 <_malloc_r+0x56c>)
    c9c8:	beq.w	c7cc <_malloc_r+0x248>
    c9cc:	ldr	r4, [r3, #8]
    c9ce:	ldr	r2, [r4, #4]
    c9d0:	bic.w	r2, r2, #3
    c9d4:	b.n	c88c <_malloc_r+0x308>
    c9d6:	ldr.w	r3, [r9], #-8
    c9da:	cmp	r9, r3
    c9dc:	bne.w	cae4 <_malloc_r+0x560>
    c9e0:	tst.w	r0, #3
    c9e4:	add.w	r0, r0, #4294967295
    c9e8:	bne.n	c9d6 <_malloc_r+0x452>
    c9ea:	ldr	r3, [r7, #4]
    c9ec:	bic.w	r3, r3, r4
    c9f0:	str	r3, [r7, #4]
    c9f2:	lsls	r4, r4, #1
    c9f4:	cmp	r4, r3
    c9f6:	bhi.w	c774 <_malloc_r+0x1f0>
    c9fa:	cmp	r4, #0
    c9fc:	beq.w	c774 <_malloc_r+0x1f0>
    ca00:	tst	r4, r3
    ca02:	mov	r0, r8
    ca04:	bne.w	c672 <_malloc_r+0xee>
    ca08:	lsls	r4, r4, #1
    ca0a:	tst	r4, r3
    ca0c:	add.w	r0, r0, #4
    ca10:	beq.n	ca08 <_malloc_r+0x484>
    ca12:	b.n	c672 <_malloc_r+0xee>
    ca14:	cmp.w	r3, #340	; 0x154
    ca18:	bhi.n	ca4c <_malloc_r+0x4c8>
    ca1a:	lsrs	r0, r5, #15
    ca1c:	add.w	lr, r0, #120	; 0x78
    ca20:	mov.w	r3, lr, lsl #1
    ca24:	adds	r0, #119	; 0x77
    ca26:	b.n	c5c8 <_malloc_r+0x44>
    ca28:	mov.w	r1, #4096	; 0x1000
    ca2c:	b.n	c806 <_malloc_r+0x282>
    ca2e:	movs	r1, #1
    ca30:	ldr.w	r3, [r8, #4]
    ca34:	asrs	r2, r2, #2
    ca36:	lsl.w	r2, r1, r2
    ca3a:	orrs	r2, r3
    ca3c:	str.w	r2, [r8, #4]
    ca40:	mov	r1, ip
    ca42:	b.n	c934 <_malloc_r+0x3b0>
    ca44:	movs	r3, #1
    ca46:	str.w	r3, [fp, #4]
    ca4a:	b.n	c898 <_malloc_r+0x314>
    ca4c:	movw	r2, #1364	; 0x554
    ca50:	cmp	r3, r2
    ca52:	bhi.n	ca96 <_malloc_r+0x512>
    ca54:	lsrs	r0, r5, #18
    ca56:	add.w	lr, r0, #125	; 0x7d
    ca5a:	mov.w	r3, lr, lsl #1
    ca5e:	adds	r0, #124	; 0x7c
    ca60:	b.n	c5c8 <_malloc_r+0x44>
    ca62:	adds	r2, #16
    ca64:	b.n	c7b0 <_malloc_r+0x22c>
    ca66:	cmp	r2, #84	; 0x54
    ca68:	bhi.n	cab8 <_malloc_r+0x534>
    ca6a:	lsrs	r2, r3, #12
    ca6c:	add.w	r1, r2, #111	; 0x6f
    ca70:	lsls	r1, r1, #1
    ca72:	adds	r2, #110	; 0x6e
    ca74:	b.n	c908 <_malloc_r+0x384>
    ca76:	ldr	r4, [r7, #8]
    ca78:	ldr	r2, [r4, #4]
    ca7a:	bic.w	r2, r2, #3
    ca7e:	b.n	c88c <_malloc_r+0x308>
    ca80:	ubfx	r0, sl, #0, #12
    ca84:	cmp	r0, #0
    ca86:	bne.w	c7da <_malloc_r+0x256>
    ca8a:	add	r2, r8
    ca8c:	ldr	r3, [r7, #8]
    ca8e:	orr.w	r2, r2, #1
    ca92:	str	r2, [r3, #4]
    ca94:	b.n	c870 <_malloc_r+0x2ec>
    ca96:	movs	r3, #254	; 0xfe
    ca98:	mov.w	lr, #127	; 0x7f
    ca9c:	movs	r0, #126	; 0x7e
    ca9e:	b.n	c5c8 <_malloc_r+0x44>
    caa0:	movs	r2, #1
    caa2:	mov.w	r9, #0
    caa6:	b.n	c82c <_malloc_r+0x2a8>
    caa8:	add.w	r1, r4, #8
    caac:	mov	r0, r6
    caae:	bl	11b90 <_free_r>
    cab2:	ldr.w	r1, [r9]
    cab6:	b.n	c870 <_malloc_r+0x2ec>
    cab8:	cmp.w	r2, #340	; 0x154
    cabc:	bhi.n	caca <_malloc_r+0x546>
    cabe:	lsrs	r2, r3, #15
    cac0:	add.w	r1, r2, #120	; 0x78
    cac4:	lsls	r1, r1, #1
    cac6:	adds	r2, #119	; 0x77
    cac8:	b.n	c908 <_malloc_r+0x384>
    caca:	movw	r1, #1364	; 0x554
    cace:	cmp	r2, r1
    cad0:	bhi.n	cade <_malloc_r+0x55a>
    cad2:	lsrs	r2, r3, #18
    cad4:	add.w	r1, r2, #125	; 0x7d
    cad8:	lsls	r1, r1, #1
    cada:	adds	r2, #124	; 0x7c
    cadc:	b.n	c908 <_malloc_r+0x384>
    cade:	movs	r1, #254	; 0xfe
    cae0:	movs	r2, #126	; 0x7e
    cae2:	b.n	c908 <_malloc_r+0x384>
    cae4:	ldr	r3, [r7, #4]
    cae6:	b.n	c9f2 <_malloc_r+0x46e>
    cae8:	lsrs	r0, r5, #3
    caea:	adds	r3, r0, #1
    caec:	lsls	r3, r3, #1
    caee:	b.n	c6e2 <_malloc_r+0x15e>
    caf0:	.word	0x1fff0ee8

0000caf4 <__ascii_mbtowc>:
    caf4:	sub	sp, #8
    caf6:	cbz	r1, cb0c <__ascii_mbtowc+0x18>
    caf8:	cbz	r2, cb12 <__ascii_mbtowc+0x1e>
    cafa:	cbz	r3, cb18 <__ascii_mbtowc+0x24>
    cafc:	ldrb	r3, [r2, #0]
    cafe:	str	r3, [r1, #0]
    cb00:	ldrb	r2, [r2, #0]
    cb02:	adds	r0, r2, #0
    cb04:	it	ne
    cb06:	movne	r0, #1
    cb08:	add	sp, #8
    cb0a:	bx	lr
    cb0c:	add	r1, sp, #4
    cb0e:	cmp	r2, #0
    cb10:	bne.n	cafa <__ascii_mbtowc+0x6>
    cb12:	mov	r0, r2
    cb14:	add	sp, #8
    cb16:	bx	lr
    cb18:	mvn.w	r0, #1
    cb1c:	b.n	cb08 <__ascii_mbtowc+0x14>
    cb1e:	nop

0000cb20 <memcmp>:
    cb20:	cmp	r2, #3
    cb22:	push	{r4, r5, r6}
    cb24:	bls.n	cb74 <memcmp+0x54>
    cb26:	orr.w	r3, r0, r1
    cb2a:	lsls	r3, r3, #30
    cb2c:	beq.n	cb52 <memcmp+0x32>
    cb2e:	ldrb	r4, [r0, #0]
    cb30:	ldrb	r5, [r1, #0]
    cb32:	cmp	r4, r5
    cb34:	bne.n	cb7c <memcmp+0x5c>
    cb36:	add	r2, r0
    cb38:	adds	r3, r0, #1
    cb3a:	b.n	cb48 <memcmp+0x28>
    cb3c:	ldrb.w	r4, [r3], #1
    cb40:	ldrb.w	r5, [r1, #1]!
    cb44:	cmp	r4, r5
    cb46:	bne.n	cb7c <memcmp+0x5c>
    cb48:	cmp	r3, r2
    cb4a:	bne.n	cb3c <memcmp+0x1c>
    cb4c:	movs	r0, #0
    cb4e:	pop	{r4, r5, r6}
    cb50:	bx	lr
    cb52:	mov	r4, r1
    cb54:	mov	r3, r0
    cb56:	ldr	r6, [r3, #0]
    cb58:	ldr	r5, [r4, #0]
    cb5a:	cmp	r6, r5
    cb5c:	mov	r0, r3
    cb5e:	mov	r1, r4
    cb60:	add.w	r3, r3, #4
    cb64:	add.w	r4, r4, #4
    cb68:	bne.n	cb2e <memcmp+0xe>
    cb6a:	subs	r2, #4
    cb6c:	cmp	r2, #3
    cb6e:	mov	r0, r3
    cb70:	mov	r1, r4
    cb72:	bhi.n	cb56 <memcmp+0x36>
    cb74:	cmp	r2, #0
    cb76:	bne.n	cb2e <memcmp+0xe>
    cb78:	mov	r0, r2
    cb7a:	b.n	cb4e <memcmp+0x2e>
    cb7c:	subs	r0, r4, r5
    cb7e:	pop	{r4, r5, r6}
    cb80:	bx	lr
    cb82:	nop

0000cb84 <memmove>:
    cb84:	cmp	r0, r1
    cb86:	push	{r4, r5, r6, r7, lr}
    cb88:	bls.n	cba6 <memmove+0x22>
    cb8a:	adds	r3, r1, r2
    cb8c:	cmp	r0, r3
    cb8e:	bcs.n	cba6 <memmove+0x22>
    cb90:	adds	r1, r0, r2
    cb92:	cmp	r2, #0
    cb94:	beq.n	cc3a <memmove+0xb6>
    cb96:	subs	r2, r3, r2
    cb98:	ldrb.w	r4, [r3, #-1]!
    cb9c:	strb.w	r4, [r1, #-1]!
    cba0:	cmp	r3, r2
    cba2:	bne.n	cb98 <memmove+0x14>
    cba4:	pop	{r4, r5, r6, r7, pc}
    cba6:	cmp	r2, #15
    cba8:	bls.n	cc3c <memmove+0xb8>
    cbaa:	orr.w	r3, r1, r0
    cbae:	lsls	r3, r3, #30
    cbb0:	bne.n	cc40 <memmove+0xbc>
    cbb2:	add.w	r4, r0, #16
    cbb6:	add.w	r3, r1, #16
    cbba:	mov	r5, r2
    cbbc:	ldr.w	r6, [r3, #-16]
    cbc0:	str.w	r6, [r4, #-16]
    cbc4:	ldr.w	r6, [r3, #-12]
    cbc8:	str.w	r6, [r4, #-12]
    cbcc:	ldr.w	r6, [r3, #-8]
    cbd0:	str.w	r6, [r4, #-8]
    cbd4:	subs	r5, #16
    cbd6:	ldr.w	r6, [r3, #-4]
    cbda:	str.w	r6, [r4, #-4]
    cbde:	cmp	r5, #15
    cbe0:	add.w	r3, r3, #16
    cbe4:	add.w	r4, r4, #16
    cbe8:	bhi.n	cbbc <memmove+0x38>
    cbea:	sub.w	r3, r2, #16
    cbee:	bic.w	r3, r3, #15
    cbf2:	and.w	lr, r2, #15
    cbf6:	adds	r3, #16
    cbf8:	cmp.w	lr, #3
    cbfc:	add	r1, r3
    cbfe:	add	r3, r0
    cc00:	bls.n	cc46 <memmove+0xc2>
    cc02:	subs	r6, r3, #4
    cc04:	mov	r5, r1
    cc06:	mov	r4, lr
    cc08:	subs	r4, #4
    cc0a:	ldr.w	r7, [r5], #4
    cc0e:	str.w	r7, [r6, #4]!
    cc12:	cmp	r4, #3
    cc14:	bhi.n	cc08 <memmove+0x84>
    cc16:	sub.w	r4, lr, #4
    cc1a:	bic.w	r4, r4, #3
    cc1e:	adds	r4, #4
    cc20:	add	r3, r4
    cc22:	add	r1, r4
    cc24:	and.w	r2, r2, #3
    cc28:	cbz	r2, cc44 <memmove+0xc0>
    cc2a:	subs	r3, #1
    cc2c:	add	r2, r1
    cc2e:	ldrb.w	r4, [r1], #1
    cc32:	strb.w	r4, [r3, #1]!
    cc36:	cmp	r2, r1
    cc38:	bne.n	cc2e <memmove+0xaa>
    cc3a:	pop	{r4, r5, r6, r7, pc}
    cc3c:	mov	r3, r0
    cc3e:	b.n	cc28 <memmove+0xa4>
    cc40:	mov	r3, r0
    cc42:	b.n	cc2a <memmove+0xa6>
    cc44:	pop	{r4, r5, r6, r7, pc}
    cc46:	mov	r2, lr
    cc48:	b.n	cc28 <memmove+0xa4>
    cc4a:	nop

0000cc4c <memset>:
    cc4c:	push	{r4, r5, r6}
    cc4e:	lsls	r4, r0, #30
    cc50:	beq.n	cce0 <memset+0x94>
    cc52:	subs	r4, r2, #1
    cc54:	cmp	r2, #0
    cc56:	beq.n	ccdc <memset+0x90>
    cc58:	uxtb	r5, r1
    cc5a:	mov	r3, r0
    cc5c:	b.n	cc64 <memset+0x18>
    cc5e:	subs	r2, r4, #1
    cc60:	cbz	r4, ccdc <memset+0x90>
    cc62:	mov	r4, r2
    cc64:	strb.w	r5, [r3], #1
    cc68:	lsls	r2, r3, #30
    cc6a:	bne.n	cc5e <memset+0x12>
    cc6c:	cmp	r4, #3
    cc6e:	bls.n	ccce <memset+0x82>
    cc70:	uxtb	r5, r1
    cc72:	orr.w	r5, r5, r5, lsl #8
    cc76:	cmp	r4, #15
    cc78:	orr.w	r5, r5, r5, lsl #16
    cc7c:	bls.n	ccb2 <memset+0x66>
    cc7e:	add.w	r2, r3, #16
    cc82:	mov	r6, r4
    cc84:	subs	r6, #16
    cc86:	cmp	r6, #15
    cc88:	str.w	r5, [r2, #-16]
    cc8c:	str.w	r5, [r2, #-12]
    cc90:	str.w	r5, [r2, #-8]
    cc94:	str.w	r5, [r2, #-4]
    cc98:	add.w	r2, r2, #16
    cc9c:	bhi.n	cc84 <memset+0x38>
    cc9e:	sub.w	r2, r4, #16
    cca2:	bic.w	r2, r2, #15
    cca6:	and.w	r4, r4, #15
    ccaa:	adds	r2, #16
    ccac:	cmp	r4, #3
    ccae:	add	r3, r2
    ccb0:	bls.n	ccce <memset+0x82>
    ccb2:	mov	r6, r3
    ccb4:	mov	r2, r4
    ccb6:	subs	r2, #4
    ccb8:	cmp	r2, #3
    ccba:	str.w	r5, [r6], #4
    ccbe:	bhi.n	ccb6 <memset+0x6a>
    ccc0:	subs	r2, r4, #4
    ccc2:	bic.w	r2, r2, #3
    ccc6:	adds	r2, #4
    ccc8:	add	r3, r2
    ccca:	and.w	r4, r4, #3
    ccce:	cbz	r4, ccdc <memset+0x90>
    ccd0:	uxtb	r1, r1
    ccd2:	add	r4, r3
    ccd4:	strb.w	r1, [r3], #1
    ccd8:	cmp	r3, r4
    ccda:	bne.n	ccd4 <memset+0x88>
    ccdc:	pop	{r4, r5, r6}
    ccde:	bx	lr
    cce0:	mov	r4, r2
    cce2:	mov	r3, r0
    cce4:	b.n	cc6c <memset+0x20>
    cce6:	nop

0000cce8 <__malloc_lock>:
    cce8:	bx	lr
    ccea:	nop

0000ccec <__malloc_unlock>:
    ccec:	bx	lr
    ccee:	nop

0000ccf0 <_realloc_r>:
    ccf0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ccf4:	mov	r7, r2
    ccf6:	sub	sp, #12
    ccf8:	cmp	r1, #0
    ccfa:	beq.w	ce80 <_realloc_r+0x190>
    ccfe:	mov	r6, r1
    cd00:	mov	r9, r0
    cd02:	add.w	r5, r7, #11
    cd06:	bl	cce8 <__malloc_lock>
    cd0a:	ldr.w	lr, [r6, #-4]
    cd0e:	cmp	r5, #22
    cd10:	bic.w	r4, lr, #3
    cd14:	sub.w	r8, r6, #8
    cd18:	bhi.n	cd9c <_realloc_r+0xac>
    cd1a:	movs	r2, #16
    cd1c:	mov	r5, r2
    cd1e:	cmp	r7, r5
    cd20:	bhi.n	cda6 <_realloc_r+0xb6>
    cd22:	cmp	r4, r2
    cd24:	bge.n	ce12 <_realloc_r+0x122>
    cd26:	ldr	r3, [pc, #804]	; (d04c <_realloc_r+0x35c>)
    cd28:	ldr	r1, [r3, #8]
    cd2a:	add.w	r0, r8, r4
    cd2e:	cmp	r0, r1
    cd30:	ldr	r1, [r0, #4]
    cd32:	beq.w	cee8 <_realloc_r+0x1f8>
    cd36:	bic.w	r3, r1, #1
    cd3a:	add	r3, r0
    cd3c:	ldr	r3, [r3, #4]
    cd3e:	lsls	r3, r3, #31
    cd40:	bpl.n	ce3e <_realloc_r+0x14e>
    cd42:	tst.w	lr, #1
    cd46:	beq.n	cdb4 <_realloc_r+0xc4>
    cd48:	mov	r1, r7
    cd4a:	mov	r0, r9
    cd4c:	bl	c584 <_malloc_r>
    cd50:	mov	r7, r0
    cd52:	cbz	r0, cd8e <_realloc_r+0x9e>
    cd54:	ldr.w	r3, [r6, #-4]
    cd58:	bic.w	r3, r3, #1
    cd5c:	add	r3, r8
    cd5e:	sub.w	r2, r0, #8
    cd62:	cmp	r2, r3
    cd64:	beq.w	cff0 <_realloc_r+0x300>
    cd68:	subs	r2, r4, #4
    cd6a:	cmp	r2, #36	; 0x24
    cd6c:	bhi.w	cfd2 <_realloc_r+0x2e2>
    cd70:	cmp	r2, #19
    cd72:	bhi.w	cf7e <_realloc_r+0x28e>
    cd76:	mov	r3, r0
    cd78:	mov	r2, r6
    cd7a:	ldr	r1, [r2, #0]
    cd7c:	str	r1, [r3, #0]
    cd7e:	ldr	r1, [r2, #4]
    cd80:	str	r1, [r3, #4]
    cd82:	ldr	r2, [r2, #8]
    cd84:	str	r2, [r3, #8]
    cd86:	mov	r1, r6
    cd88:	mov	r0, r9
    cd8a:	bl	11b90 <_free_r>
    cd8e:	mov	r0, r9
    cd90:	bl	ccec <__malloc_unlock>
    cd94:	mov	r0, r7
    cd96:	add	sp, #12
    cd98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd9c:	bic.w	r5, r5, #7
    cda0:	cmp	r5, #0
    cda2:	mov	r2, r5
    cda4:	bge.n	cd1e <_realloc_r+0x2e>
    cda6:	movs	r3, #12
    cda8:	movs	r0, #0
    cdaa:	str.w	r3, [r9]
    cdae:	add	sp, #12
    cdb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cdb4:	ldr.w	r3, [r6, #-8]
    cdb8:	rsb	sl, r3, r8
    cdbc:	ldr.w	r3, [sl, #4]
    cdc0:	bic.w	ip, r3, #3
    cdc4:	add.w	r3, r4, ip
    cdc8:	cmp	r3, r2
    cdca:	blt.n	cd48 <_realloc_r+0x58>
    cdcc:	mov	r7, sl
    cdce:	ldr.w	r1, [sl, #12]
    cdd2:	ldr.w	r0, [r7, #8]!
    cdd6:	subs	r2, r4, #4
    cdd8:	cmp	r2, #36	; 0x24
    cdda:	str	r1, [r0, #12]
    cddc:	str	r0, [r1, #8]
    cdde:	bhi.w	d010 <_realloc_r+0x320>
    cde2:	cmp	r2, #19
    cde4:	bls.w	d00c <_realloc_r+0x31c>
    cde8:	ldr	r1, [r6, #0]
    cdea:	str.w	r1, [sl, #8]
    cdee:	ldr	r1, [r6, #4]
    cdf0:	str.w	r1, [sl, #12]
    cdf4:	cmp	r2, #27
    cdf6:	bhi.w	d050 <_realloc_r+0x360>
    cdfa:	adds	r6, #8
    cdfc:	add.w	r2, sl, #16
    ce00:	ldr	r1, [r6, #0]
    ce02:	str	r1, [r2, #0]
    ce04:	ldr	r1, [r6, #4]
    ce06:	str	r1, [r2, #4]
    ce08:	ldr	r1, [r6, #8]
    ce0a:	str	r1, [r2, #8]
    ce0c:	mov	r6, r7
    ce0e:	mov	r4, r3
    ce10:	mov	r8, sl
    ce12:	subs	r3, r4, r5
    ce14:	cmp	r3, #15
    ce16:	bhi.n	ce54 <_realloc_r+0x164>
    ce18:	ldr.w	r3, [r8, #4]
    ce1c:	and.w	r3, r3, #1
    ce20:	orrs	r3, r4
    ce22:	add	r4, r8
    ce24:	str.w	r3, [r8, #4]
    ce28:	ldr	r3, [r4, #4]
    ce2a:	orr.w	r3, r3, #1
    ce2e:	str	r3, [r4, #4]
    ce30:	mov	r0, r9
    ce32:	bl	ccec <__malloc_unlock>
    ce36:	mov	r0, r6
    ce38:	add	sp, #12
    ce3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce3e:	bic.w	r1, r1, #3
    ce42:	add	r1, r4
    ce44:	cmp	r1, r2
    ce46:	blt.n	ce8c <_realloc_r+0x19c>
    ce48:	ldr	r3, [r0, #12]
    ce4a:	ldr	r2, [r0, #8]
    ce4c:	mov	r4, r1
    ce4e:	str	r3, [r2, #12]
    ce50:	str	r2, [r3, #8]
    ce52:	b.n	ce12 <_realloc_r+0x122>
    ce54:	ldr.w	r2, [r8, #4]
    ce58:	add.w	r1, r8, r5
    ce5c:	and.w	r2, r2, #1
    ce60:	orrs	r5, r2
    ce62:	orr.w	r2, r3, #1
    ce66:	add	r3, r1
    ce68:	str.w	r5, [r8, #4]
    ce6c:	str	r2, [r1, #4]
    ce6e:	ldr	r2, [r3, #4]
    ce70:	orr.w	r2, r2, #1
    ce74:	adds	r1, #8
    ce76:	str	r2, [r3, #4]
    ce78:	mov	r0, r9
    ce7a:	bl	11b90 <_free_r>
    ce7e:	b.n	ce30 <_realloc_r+0x140>
    ce80:	mov	r1, r2
    ce82:	add	sp, #12
    ce84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce88:	b.w	c584 <_malloc_r>
    ce8c:	tst.w	lr, #1
    ce90:	bne.w	cd48 <_realloc_r+0x58>
    ce94:	ldr.w	r3, [r6, #-8]
    ce98:	rsb	sl, r3, r8
    ce9c:	ldr.w	r3, [sl, #4]
    cea0:	bic.w	ip, r3, #3
    cea4:	add.w	lr, r1, ip
    cea8:	cmp	lr, r2
    ceaa:	blt.n	cdc4 <_realloc_r+0xd4>
    ceac:	ldr	r3, [r0, #12]
    ceae:	ldr	r2, [r0, #8]
    ceb0:	mov	r7, sl
    ceb2:	str	r3, [r2, #12]
    ceb4:	str	r2, [r3, #8]
    ceb6:	ldr.w	r1, [r7, #8]!
    ceba:	ldr.w	r3, [sl, #12]
    cebe:	str	r3, [r1, #12]
    cec0:	subs	r2, r4, #4
    cec2:	cmp	r2, #36	; 0x24
    cec4:	str	r1, [r3, #8]
    cec6:	bhi.w	cffc <_realloc_r+0x30c>
    ceca:	cmp	r2, #19
    cecc:	bls.n	cf94 <_realloc_r+0x2a4>
    cece:	ldr	r3, [r6, #0]
    ced0:	str.w	r3, [sl, #8]
    ced4:	ldr	r3, [r6, #4]
    ced6:	str.w	r3, [sl, #12]
    ceda:	cmp	r2, #27
    cedc:	bhi.w	d020 <_realloc_r+0x330>
    cee0:	adds	r6, #8
    cee2:	add.w	r3, sl, #16
    cee6:	b.n	cf96 <_realloc_r+0x2a6>
    cee8:	bic.w	fp, r1, #3
    ceec:	add	fp, r4
    ceee:	add.w	r0, r5, #16
    cef2:	cmp	fp, r0
    cef4:	bge.n	cfaa <_realloc_r+0x2ba>
    cef6:	tst.w	lr, #1
    cefa:	bne.w	cd48 <_realloc_r+0x58>
    cefe:	ldr.w	r1, [r6, #-8]
    cf02:	rsb	sl, r1, r8
    cf06:	ldr.w	r1, [sl, #4]
    cf0a:	bic.w	ip, r1, #3
    cf0e:	add	fp, ip
    cf10:	cmp	r0, fp
    cf12:	bgt.w	cdc4 <_realloc_r+0xd4>
    cf16:	mov	r7, sl
    cf18:	ldr.w	r1, [sl, #12]
    cf1c:	ldr.w	r0, [r7, #8]!
    cf20:	subs	r2, r4, #4
    cf22:	cmp	r2, #36	; 0x24
    cf24:	str	r1, [r0, #12]
    cf26:	str	r0, [r1, #8]
    cf28:	bhi.w	d094 <_realloc_r+0x3a4>
    cf2c:	cmp	r2, #19
    cf2e:	bls.w	d07c <_realloc_r+0x38c>
    cf32:	ldr	r1, [r6, #0]
    cf34:	str.w	r1, [sl, #8]
    cf38:	ldr	r1, [r6, #4]
    cf3a:	str.w	r1, [sl, #12]
    cf3e:	cmp	r2, #27
    cf40:	bhi.w	d0a2 <_realloc_r+0x3b2>
    cf44:	adds	r6, #8
    cf46:	add.w	r2, sl, #16
    cf4a:	ldr	r1, [r6, #0]
    cf4c:	str	r1, [r2, #0]
    cf4e:	ldr	r1, [r6, #4]
    cf50:	str	r1, [r2, #4]
    cf52:	ldr	r1, [r6, #8]
    cf54:	str	r1, [r2, #8]
    cf56:	add.w	r1, sl, r5
    cf5a:	rsb	r2, r5, fp
    cf5e:	orr.w	r2, r2, #1
    cf62:	str	r1, [r3, #8]
    cf64:	str	r2, [r1, #4]
    cf66:	ldr.w	r3, [sl, #4]
    cf6a:	and.w	r3, r3, #1
    cf6e:	orrs	r5, r3
    cf70:	mov	r0, r9
    cf72:	str.w	r5, [sl, #4]
    cf76:	bl	ccec <__malloc_unlock>
    cf7a:	mov	r0, r7
    cf7c:	b.n	ce38 <_realloc_r+0x148>
    cf7e:	ldr	r3, [r6, #0]
    cf80:	str	r3, [r0, #0]
    cf82:	ldr	r3, [r6, #4]
    cf84:	str	r3, [r0, #4]
    cf86:	cmp	r2, #27
    cf88:	bhi.n	cfda <_realloc_r+0x2ea>
    cf8a:	add.w	r3, r0, #8
    cf8e:	add.w	r2, r6, #8
    cf92:	b.n	cd7a <_realloc_r+0x8a>
    cf94:	mov	r3, r7
    cf96:	ldr	r2, [r6, #0]
    cf98:	str	r2, [r3, #0]
    cf9a:	ldr	r2, [r6, #4]
    cf9c:	str	r2, [r3, #4]
    cf9e:	ldr	r2, [r6, #8]
    cfa0:	str	r2, [r3, #8]
    cfa2:	mov	r6, r7
    cfa4:	mov	r4, lr
    cfa6:	mov	r8, sl
    cfa8:	b.n	ce12 <_realloc_r+0x122>
    cfaa:	add.w	r1, r8, r5
    cfae:	rsb	fp, r5, fp
    cfb2:	orr.w	r2, fp, #1
    cfb6:	str	r1, [r3, #8]
    cfb8:	str	r2, [r1, #4]
    cfba:	ldr.w	r3, [r6, #-4]
    cfbe:	and.w	r3, r3, #1
    cfc2:	orrs	r5, r3
    cfc4:	mov	r0, r9
    cfc6:	str.w	r5, [r6, #-4]
    cfca:	bl	ccec <__malloc_unlock>
    cfce:	mov	r0, r6
    cfd0:	b.n	ce38 <_realloc_r+0x148>
    cfd2:	mov	r1, r6
    cfd4:	bl	cb84 <memmove>
    cfd8:	b.n	cd86 <_realloc_r+0x96>
    cfda:	ldr	r3, [r6, #8]
    cfdc:	str	r3, [r0, #8]
    cfde:	ldr	r3, [r6, #12]
    cfe0:	str	r3, [r0, #12]
    cfe2:	cmp	r2, #36	; 0x24
    cfe4:	beq.n	d038 <_realloc_r+0x348>
    cfe6:	add.w	r3, r0, #16
    cfea:	add.w	r2, r6, #16
    cfee:	b.n	cd7a <_realloc_r+0x8a>
    cff0:	ldr.w	r3, [r0, #-4]
    cff4:	bic.w	r3, r3, #3
    cff8:	add	r4, r3
    cffa:	b.n	ce12 <_realloc_r+0x122>
    cffc:	mov	r1, r6
    cffe:	mov	r0, r7
    d000:	mov	r4, lr
    d002:	mov	r8, sl
    d004:	bl	cb84 <memmove>
    d008:	mov	r6, r7
    d00a:	b.n	ce12 <_realloc_r+0x122>
    d00c:	mov	r2, r7
    d00e:	b.n	ce00 <_realloc_r+0x110>
    d010:	mov	r1, r6
    d012:	mov	r0, r7
    d014:	mov	r4, r3
    d016:	mov	r8, sl
    d018:	bl	cb84 <memmove>
    d01c:	mov	r6, r7
    d01e:	b.n	ce12 <_realloc_r+0x122>
    d020:	ldr	r3, [r6, #8]
    d022:	str.w	r3, [sl, #16]
    d026:	ldr	r3, [r6, #12]
    d028:	str.w	r3, [sl, #20]
    d02c:	cmp	r2, #36	; 0x24
    d02e:	beq.n	d068 <_realloc_r+0x378>
    d030:	adds	r6, #16
    d032:	add.w	r3, sl, #24
    d036:	b.n	cf96 <_realloc_r+0x2a6>
    d038:	ldr	r3, [r6, #16]
    d03a:	str	r3, [r0, #16]
    d03c:	ldr	r3, [r6, #20]
    d03e:	str	r3, [r0, #20]
    d040:	add.w	r2, r6, #24
    d044:	add.w	r3, r0, #24
    d048:	b.n	cd7a <_realloc_r+0x8a>
    d04a:	nop
    d04c:	.word	0x1fff0ee8
    d050:	ldr	r1, [r6, #8]
    d052:	str.w	r1, [sl, #16]
    d056:	ldr	r1, [r6, #12]
    d058:	str.w	r1, [sl, #20]
    d05c:	cmp	r2, #36	; 0x24
    d05e:	beq.n	d080 <_realloc_r+0x390>
    d060:	adds	r6, #16
    d062:	add.w	r2, sl, #24
    d066:	b.n	ce00 <_realloc_r+0x110>
    d068:	ldr	r3, [r6, #16]
    d06a:	str.w	r3, [sl, #24]
    d06e:	ldr	r3, [r6, #20]
    d070:	str.w	r3, [sl, #28]
    d074:	adds	r6, #24
    d076:	add.w	r3, sl, #32
    d07a:	b.n	cf96 <_realloc_r+0x2a6>
    d07c:	mov	r2, r7
    d07e:	b.n	cf4a <_realloc_r+0x25a>
    d080:	ldr	r2, [r6, #16]
    d082:	str.w	r2, [sl, #24]
    d086:	ldr	r2, [r6, #20]
    d088:	str.w	r2, [sl, #28]
    d08c:	adds	r6, #24
    d08e:	add.w	r2, sl, #32
    d092:	b.n	ce00 <_realloc_r+0x110>
    d094:	mov	r1, r6
    d096:	mov	r0, r7
    d098:	str	r3, [sp, #4]
    d09a:	bl	cb84 <memmove>
    d09e:	ldr	r3, [sp, #4]
    d0a0:	b.n	cf56 <_realloc_r+0x266>
    d0a2:	ldr	r1, [r6, #8]
    d0a4:	str.w	r1, [sl, #16]
    d0a8:	ldr	r1, [r6, #12]
    d0aa:	str.w	r1, [sl, #20]
    d0ae:	cmp	r2, #36	; 0x24
    d0b0:	beq.n	d0ba <_realloc_r+0x3ca>
    d0b2:	adds	r6, #16
    d0b4:	add.w	r2, sl, #24
    d0b8:	b.n	cf4a <_realloc_r+0x25a>
    d0ba:	ldr	r2, [r6, #16]
    d0bc:	str.w	r2, [sl, #24]
    d0c0:	ldr	r2, [r6, #20]
    d0c2:	str.w	r2, [sl, #28]
    d0c6:	adds	r6, #24
    d0c8:	add.w	r2, sl, #32
    d0cc:	b.n	cf4a <_realloc_r+0x25a>
    d0ce:	nop

0000d0d0 <_sbrk_r>:
    d0d0:	push	{r3, r4, r5, lr}
    d0d2:	ldr	r4, [pc, #28]	; (d0f0 <_sbrk_r+0x20>)
    d0d4:	movs	r3, #0
    d0d6:	mov	r5, r0
    d0d8:	mov	r0, r1
    d0da:	str	r3, [r4, #0]
    d0dc:	bl	99d0 <_sbrk>
    d0e0:	adds	r3, r0, #1
    d0e2:	beq.n	d0e6 <_sbrk_r+0x16>
    d0e4:	pop	{r3, r4, r5, pc}
    d0e6:	ldr	r3, [r4, #0]
    d0e8:	cmp	r3, #0
    d0ea:	beq.n	d0e4 <_sbrk_r+0x14>
    d0ec:	str	r3, [r5, #0]
    d0ee:	pop	{r3, r4, r5, pc}
    d0f0:	.word	0x20020540

0000d0f4 <sprintf>:
    d0f4:	push	{r1, r2, r3}
    d0f6:	push	{r4, r5, r6, r7, lr}
    d0f8:	sub	sp, #112	; 0x70
    d0fa:	add	r3, sp, #132	; 0x84
    d0fc:	ldr	r1, [pc, #60]	; (d13c <sprintf+0x48>)
    d0fe:	ldr.w	r2, [r3], #4
    d102:	str	r3, [sp, #4]
    d104:	mov	r5, r0
    d106:	mvn.w	r4, #2147483648	; 0x80000000
    d10a:	ldr	r0, [r1, #0]
    d10c:	str	r5, [sp, #8]
    d10e:	mov.w	r7, #520	; 0x208
    d112:	movw	r6, #65535	; 0xffff
    d116:	add	r1, sp, #8
    d118:	str	r5, [sp, #24]
    d11a:	strh.w	r7, [sp, #20]
    d11e:	str	r4, [sp, #16]
    d120:	str	r4, [sp, #28]
    d122:	strh.w	r6, [sp, #22]
    d126:	bl	e490 <_svfprintf_r>
    d12a:	ldr	r3, [sp, #8]
    d12c:	movs	r2, #0
    d12e:	strb	r2, [r3, #0]
    d130:	add	sp, #112	; 0x70
    d132:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    d136:	add	sp, #12
    d138:	bx	lr
    d13a:	nop
    d13c:	.word	0x1fff0d78

0000d140 <sscanf>:
    d140:	push	{r1, r2, r3}
    d142:	push	{r4, r5, r6, r7, lr}
    d144:	sub	sp, #112	; 0x70
    d146:	add	r4, sp, #132	; 0x84
    d148:	mov.w	r2, #516	; 0x204
    d14c:	ldr.w	r6, [r4], #4
    d150:	strh.w	r2, [sp, #20]
    d154:	str	r0, [sp, #8]
    d156:	str	r0, [sp, #24]
    d158:	bl	d280 <strlen>
    d15c:	ldr	r3, [pc, #48]	; (d190 <sscanf+0x50>)
    d15e:	str	r4, [sp, #4]
    d160:	mov	r5, r0
    d162:	mov	r2, r6
    d164:	ldr	r7, [pc, #44]	; (d194 <sscanf+0x54>)
    d166:	ldr	r0, [r3, #0]
    d168:	str	r5, [sp, #12]
    d16a:	mov	r3, r4
    d16c:	movw	r6, #65535	; 0xffff
    d170:	movs	r4, #0
    d172:	add	r1, sp, #8
    d174:	str	r5, [sp, #28]
    d176:	str	r7, [sp, #40]	; 0x28
    d178:	str	r4, [sp, #56]	; 0x38
    d17a:	str	r4, [sp, #76]	; 0x4c
    d17c:	strh.w	r6, [sp, #22]
    d180:	bl	fb74 <__ssvfscanf_r>
    d184:	add	sp, #112	; 0x70
    d186:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    d18a:	add	sp, #12
    d18c:	bx	lr
    d18e:	nop
    d190:	.word	0x1fff0d78
    d194:	.word	0x0000d199

0000d198 <__seofread>:
    d198:	movs	r0, #0
    d19a:	bx	lr

0000d19c <strchr>:
    d19c:	push	{r4, r5, r6}
    d19e:	ands.w	r4, r1, #255	; 0xff
    d1a2:	beq.n	d20e <strchr+0x72>
    d1a4:	lsls	r5, r0, #30
    d1a6:	beq.n	d1c8 <strchr+0x2c>
    d1a8:	ldrb	r3, [r0, #0]
    d1aa:	cmp	r3, #0
    d1ac:	beq.n	d264 <strchr+0xc8>
    d1ae:	cmp	r4, r3
    d1b0:	beq.n	d20a <strchr+0x6e>
    d1b2:	adds	r3, r0, #1
    d1b4:	b.n	d1c2 <strchr+0x26>
    d1b6:	ldrb.w	r2, [r3], #1
    d1ba:	cmp	r2, #0
    d1bc:	beq.n	d25e <strchr+0xc2>
    d1be:	cmp	r4, r2
    d1c0:	beq.n	d20a <strchr+0x6e>
    d1c2:	lsls	r2, r3, #30
    d1c4:	mov	r0, r3
    d1c6:	bne.n	d1b6 <strchr+0x1a>
    d1c8:	lsls	r6, r1, #8
    d1ca:	and.w	r6, r6, #65280	; 0xff00
    d1ce:	orrs	r6, r4
    d1d0:	ldr	r3, [r0, #0]
    d1d2:	orr.w	r6, r6, r6, lsl #16
    d1d6:	b.n	d1dc <strchr+0x40>
    d1d8:	ldr.w	r3, [r0, #4]!
    d1dc:	eor.w	r5, r6, r3
    d1e0:	sub.w	r2, r5, #16843009	; 0x1010101
    d1e4:	sub.w	r1, r3, #16843009	; 0x1010101
    d1e8:	bic.w	r2, r2, r5
    d1ec:	bic.w	r3, r1, r3
    d1f0:	orrs	r3, r2
    d1f2:	tst.w	r3, #2155905152	; 0x80808080
    d1f6:	beq.n	d1d8 <strchr+0x3c>
    d1f8:	ldrb	r3, [r0, #0]
    d1fa:	cbnz	r3, d206 <strchr+0x6a>
    d1fc:	b.n	d264 <strchr+0xc8>
    d1fe:	ldrb.w	r3, [r0, #1]!
    d202:	cmp	r3, #0
    d204:	beq.n	d264 <strchr+0xc8>
    d206:	cmp	r4, r3
    d208:	bne.n	d1fe <strchr+0x62>
    d20a:	pop	{r4, r5, r6}
    d20c:	bx	lr
    d20e:	lsls	r4, r0, #30
    d210:	beq.n	d22a <strchr+0x8e>
    d212:	ldrb	r3, [r0, #0]
    d214:	cmp	r3, #0
    d216:	beq.n	d20a <strchr+0x6e>
    d218:	adds	r3, r0, #1
    d21a:	b.n	d224 <strchr+0x88>
    d21c:	ldrb	r2, [r0, #0]
    d21e:	adds	r3, #1
    d220:	cmp	r2, #0
    d222:	beq.n	d20a <strchr+0x6e>
    d224:	lsls	r1, r3, #30
    d226:	mov	r0, r3
    d228:	bne.n	d21c <strchr+0x80>
    d22a:	ldr	r2, [r0, #0]
    d22c:	sub.w	r3, r2, #16843009	; 0x1010101
    d230:	bic.w	r3, r3, r2
    d234:	tst.w	r3, #2155905152	; 0x80808080
    d238:	bne.n	d24c <strchr+0xb0>
    d23a:	ldr.w	r2, [r0, #4]!
    d23e:	sub.w	r3, r2, #16843009	; 0x1010101
    d242:	bic.w	r3, r3, r2
    d246:	tst.w	r3, #2155905152	; 0x80808080
    d24a:	beq.n	d23a <strchr+0x9e>
    d24c:	ldrb	r3, [r0, #0]
    d24e:	cmp	r3, #0
    d250:	beq.n	d20a <strchr+0x6e>
    d252:	ldrb.w	r3, [r0, #1]!
    d256:	cmp	r3, #0
    d258:	bne.n	d252 <strchr+0xb6>
    d25a:	pop	{r4, r5, r6}
    d25c:	bx	lr
    d25e:	mov	r0, r2
    d260:	pop	{r4, r5, r6}
    d262:	bx	lr
    d264:	mov	r0, r3
    d266:	pop	{r4, r5, r6}
    d268:	bx	lr
    d26a:	nop
    d26c:			; <UNDEFINED> instruction: 0xffffffff
    d270:			; <UNDEFINED> instruction: 0xffffffff
    d274:			; <UNDEFINED> instruction: 0xffffffff
    d278:			; <UNDEFINED> instruction: 0xffffffff
    d27c:			; <UNDEFINED> instruction: 0xffffffff

0000d280 <strlen>:
    d280:	pld	[r0]
    d284:	strd	r4, r5, [sp, #-8]!
    d288:	bic.w	r1, r0, #7
    d28c:	mvn.w	ip, #0
    d290:	ands.w	r4, r0, #7
    d294:	pld	[r1, #32]
    d298:	bne.w	d32e <strlen+0xae>
    d29c:	mov.w	r4, #0
    d2a0:	mvn.w	r0, #7
    d2a4:	ldrd	r2, r3, [r1]
    d2a8:	pld	[r1, #64]	; 0x40
    d2ac:	add.w	r0, r0, #8
    d2b0:	uadd8	r2, r2, ip
    d2b4:	sel	r2, r4, ip
    d2b8:	uadd8	r3, r3, ip
    d2bc:	sel	r3, r2, ip
    d2c0:	cbnz	r3, d316 <strlen+0x96>
    d2c2:	ldrd	r2, r3, [r1, #8]
    d2c6:	uadd8	r2, r2, ip
    d2ca:	add.w	r0, r0, #8
    d2ce:	sel	r2, r4, ip
    d2d2:	uadd8	r3, r3, ip
    d2d6:	sel	r3, r2, ip
    d2da:	cbnz	r3, d316 <strlen+0x96>
    d2dc:	ldrd	r2, r3, [r1, #16]
    d2e0:	uadd8	r2, r2, ip
    d2e4:	add.w	r0, r0, #8
    d2e8:	sel	r2, r4, ip
    d2ec:	uadd8	r3, r3, ip
    d2f0:	sel	r3, r2, ip
    d2f4:	cbnz	r3, d316 <strlen+0x96>
    d2f6:	ldrd	r2, r3, [r1, #24]
    d2fa:	add.w	r1, r1, #32
    d2fe:	uadd8	r2, r2, ip
    d302:	add.w	r0, r0, #8
    d306:	sel	r2, r4, ip
    d30a:	uadd8	r3, r3, ip
    d30e:	sel	r3, r2, ip
    d312:	cmp	r3, #0
    d314:	beq.n	d2a4 <strlen+0x24>
    d316:	cmp	r2, #0
    d318:	itt	eq
    d31a:	addeq	r0, #4
    d31c:	moveq	r2, r3
    d31e:	rev	r2, r2
    d320:	clz	r2, r2
    d324:	ldrd	r4, r5, [sp], #8
    d328:	add.w	r0, r0, r2, lsr #3
    d32c:	bx	lr
    d32e:	ldrd	r2, r3, [r1]
    d332:	and.w	r5, r4, #3
    d336:	rsb	r0, r4, #0
    d33a:	mov.w	r5, r5, lsl #3
    d33e:	tst.w	r4, #4
    d342:	pld	[r1, #64]	; 0x40
    d346:	lsl.w	r5, ip, r5
    d34a:	orn	r2, r2, r5
    d34e:	itt	ne
    d350:	ornne	r3, r3, r5
    d354:	movne	r2, ip
    d356:	mov.w	r4, #0
    d35a:	b.n	d2b0 <strlen+0x30>

0000d35c <strncmp>:
    d35c:	cmp	r2, #0
    d35e:	beq.n	d3e4 <strncmp+0x88>
    d360:	orr.w	r3, r0, r1
    d364:	ands.w	r3, r3, #3
    d368:	push	{r4, r5, r6, r7}
    d36a:	bne.n	d3b8 <strncmp+0x5c>
    d36c:	cmp	r2, #3
    d36e:	bls.n	d3b8 <strncmp+0x5c>
    d370:	ldr	r4, [r0, #0]
    d372:	ldr	r5, [r1, #0]
    d374:	cmp	r4, r5
    d376:	bne.n	d3b8 <strncmp+0x5c>
    d378:	subs	r2, #4
    d37a:	beq.n	d3e8 <strncmp+0x8c>
    d37c:	sub.w	r5, r4, #16843009	; 0x1010101
    d380:	bic.w	r4, r5, r4
    d384:	tst.w	r4, #2155905152	; 0x80808080
    d388:	bne.n	d3ee <strncmp+0x92>
    d38a:	adds	r7, r0, #4
    d38c:	adds	r5, r1, #4
    d38e:	b.n	d3ac <strncmp+0x50>
    d390:	ldr.w	r3, [r7], #4
    d394:	ldr	r6, [r1, #0]
    d396:	sub.w	r4, r3, #16843009	; 0x1010101
    d39a:	cmp	r3, r6
    d39c:	bic.w	r4, r4, r3
    d3a0:	bne.n	d3b8 <strncmp+0x5c>
    d3a2:	subs	r2, #4
    d3a4:	beq.n	d3e8 <strncmp+0x8c>
    d3a6:	tst.w	r4, #2155905152	; 0x80808080
    d3aa:	bne.n	d3f4 <strncmp+0x98>
    d3ac:	cmp	r2, #3
    d3ae:	mov	r1, r5
    d3b0:	mov	r0, r7
    d3b2:	add.w	r5, r5, #4
    d3b6:	bhi.n	d390 <strncmp+0x34>
    d3b8:	ldrb	r3, [r0, #0]
    d3ba:	ldrb	r4, [r1, #0]
    d3bc:	cmp	r4, r3
    d3be:	add.w	r2, r2, #4294967295
    d3c2:	bne.n	d3de <strncmp+0x82>
    d3c4:	cbz	r2, d3e8 <strncmp+0x8c>
    d3c6:	cbnz	r4, d3ce <strncmp+0x72>
    d3c8:	b.n	d3f8 <strncmp+0x9c>
    d3ca:	cbz	r2, d3e8 <strncmp+0x8c>
    d3cc:	cbz	r3, d3ee <strncmp+0x92>
    d3ce:	ldrb.w	r3, [r0, #1]!
    d3d2:	ldrb.w	r4, [r1, #1]!
    d3d6:	cmp	r3, r4
    d3d8:	add.w	r2, r2, #4294967295
    d3dc:	beq.n	d3ca <strncmp+0x6e>
    d3de:	subs	r0, r3, r4
    d3e0:	pop	{r4, r5, r6, r7}
    d3e2:	bx	lr
    d3e4:	mov	r0, r2
    d3e6:	bx	lr
    d3e8:	mov	r0, r2
    d3ea:	pop	{r4, r5, r6, r7}
    d3ec:	bx	lr
    d3ee:	mov	r0, r3
    d3f0:	pop	{r4, r5, r6, r7}
    d3f2:	bx	lr
    d3f4:	movs	r0, #0
    d3f6:	b.n	d3e0 <strncmp+0x84>
    d3f8:	mov	r0, r4
    d3fa:	b.n	d3e0 <strncmp+0x84>

0000d3fc <sulp>:
    d3fc:	push	{r4, r5, r6, lr}
    d3fe:	mov	r4, r0
    d400:	mov	r5, r1
    d402:	vmov	d0, r4, r5
    d406:	mov	r6, r2
    d408:	bl	12c00 <__ulp>
    d40c:	vmov	r0, r1, d0
    d410:	cbz	r6, d432 <sulp+0x36>
    d412:	ubfx	r3, r5, #20, #11
    d416:	rsb	r3, r3, #107	; 0x6b
    d41a:	cmp	r3, #0
    d41c:	ble.n	d432 <sulp+0x36>
    d41e:	lsls	r3, r3, #20
    d420:	add.w	r5, r3, #1069547520	; 0x3fc00000
    d424:	movs	r4, #0
    d426:	add.w	r5, r5, #3145728	; 0x300000
    d42a:	mov	r2, r4
    d42c:	mov	r3, r5
    d42e:	bl	b7cc <__aeabi_dmul>
    d432:	pop	{r4, r5, r6, pc}
    d434:			; <UNDEFINED> instruction: 0xffffffff

0000d438 <_strtod_l>:
    d438:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d43c:	mov	r5, r3
    d43e:	sub	sp, #132	; 0x84
    d440:	movs	r3, #0
    d442:	mov	fp, r0
    d444:	mov	r0, r5
    d446:	mov	r6, r1
    d448:	str	r2, [sp, #24]
    d44a:	str	r3, [sp, #112]	; 0x70
    d44c:	bl	124e4 <__localeconv_l>
    d450:	movs	r4, #0
    d452:	movs	r3, #0
    d454:	mov	sl, r0
    d456:	ldr	r0, [r0, #0]
    d458:	strd	r3, r4, [sp, #16]
    d45c:	bl	d280 <strlen>
    d460:	str	r6, [sp, #108]	; 0x6c
    d462:	mov	r9, r0
    d464:	mov	r2, r6
    d466:	mov	r4, r2
    d468:	ldrb.w	r7, [r2], #1
    d46c:	cmp	r7, #45	; 0x2d
    d46e:	bhi.w	d5d0 <_strtod_l+0x198>
    d472:	tbb	[pc, r7]
    d476:	.short	0xad17
    d478:	.word	0xadadadad
    d47c:	.word	0x81adadad
    d480:	.word	0x81818181
    d484:	.word	0xadadadad
    d488:	.word	0xadadadad
    d48c:	.word	0xadadadad
    d490:	.word	0xadadadad
    d494:	.word	0xad81adad
    d498:	.word	0xadadadad
    d49c:	.word	0xadadadad
    d4a0:	.word	0x7ead2bad
    d4a4:	ldr	r3, [sp, #24]
    d4a6:	mov.w	r8, #0
    d4aa:	mov.w	r9, #0
    d4ae:	cbz	r3, d4c2 <_strtod_l+0x8a>
    d4b0:	movs	r3, #0
    d4b2:	str	r3, [sp, #28]
    d4b4:	ldr	r3, [sp, #24]
    d4b6:	str	r6, [r3, #0]
    d4b8:	ldr	r3, [sp, #28]
    d4ba:	cbz	r3, d4c2 <_strtod_l+0x8a>
    d4bc:	add.w	r3, r9, #2147483648	; 0x80000000
    d4c0:	mov	r9, r3
    d4c2:	vmov	d0, r8, r9
    d4c6:	add	sp, #132	; 0x84
    d4c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4cc:	movs	r3, #0
    d4ce:	str	r3, [sp, #28]
    d4d0:	adds	r2, r4, #1
    d4d2:	str	r2, [sp, #108]	; 0x6c
    d4d4:	ldrb	r7, [r4, #1]
    d4d6:	cmp	r7, #0
    d4d8:	beq.n	d4a4 <_strtod_l+0x6c>
    d4da:	cmp	r7, #48	; 0x30
    d4dc:	mov	r4, r2
    d4de:	beq.n	d5d8 <_strtod_l+0x1a0>
    d4e0:	movs	r3, #0
    d4e2:	str	r4, [sp, #32]
    d4e4:	str	r3, [sp, #40]	; 0x28
    d4e6:	sub.w	r3, r7, #48	; 0x30
    d4ea:	cmp	r3, #9
    d4ec:	bhi.w	dcfe <_strtod_l+0x8c6>
    d4f0:	mov.w	r8, #0
    d4f4:	mov	r0, r4
    d4f6:	mov	r5, r8
    d4f8:	mov	r4, r8
    d4fa:	cmp	r4, #8
    d4fc:	it	gt
    d4fe:	addgt.w	r8, r8, r8, lsl #2
    d502:	add.w	r3, r5, r5, lsl #2
    d506:	add.w	r0, r0, #1
    d50a:	add.w	r3, r7, r3, lsl #1
    d50e:	str	r0, [sp, #108]	; 0x6c
    d510:	itt	gt
    d512:	addgt.w	r7, r7, r8, lsl #1
    d516:	subgt.w	r8, r7, #48	; 0x30
    d51a:	ldrb	r7, [r0, #0]
    d51c:	it	le
    d51e:	suble.w	r5, r3, #48	; 0x30
    d522:	sub.w	r3, r7, #48	; 0x30
    d526:	cmp	r3, #9
    d528:	add.w	r4, r4, #1
    d52c:	bls.n	d4fa <_strtod_l+0xc2>
    d52e:	ldr.w	r1, [sl]
    d532:	mov	r2, r9
    d534:	bl	d35c <strncmp>
    d538:	cbz	r0, d57c <_strtod_l+0x144>
    d53a:	movs	r0, #0
    d53c:	mov	r3, r7
    d53e:	mov	r9, r0
    d540:	mov	r7, r0
    d542:	mov	sl, r4
    d544:	cmp	r3, #101	; 0x65
    d546:	beq.w	d6ae <_strtod_l+0x276>
    d54a:	cmp	r3, #69	; 0x45
    d54c:	beq.w	d6ae <_strtod_l+0x276>
    d550:	movs	r2, #0
    d552:	cmp	r4, #0
    d554:	bne.n	d5fc <_strtod_l+0x1c4>
    d556:	cbnz	r0, d560 <_strtod_l+0x128>
    d558:	ldr	r2, [sp, #40]	; 0x28
    d55a:	cmp	r2, #0
    d55c:	beq.w	db02 <_strtod_l+0x6ca>
    d560:	mov.w	r8, #0
    d564:	mov.w	r9, #0
    d568:	ldr	r3, [sp, #24]
    d56a:	cmp	r3, #0
    d56c:	beq.n	d4b8 <_strtod_l+0x80>
    d56e:	ldr	r6, [sp, #108]	; 0x6c
    d570:	b.n	d4b4 <_strtod_l+0x7c>
    d572:	movs	r3, #1
    d574:	str	r3, [sp, #28]
    d576:	b.n	d4d0 <_strtod_l+0x98>
    d578:	str	r2, [sp, #108]	; 0x6c
    d57a:	b.n	d466 <_strtod_l+0x2e>
    d57c:	ldr	r3, [sp, #108]	; 0x6c
    d57e:	add.w	r2, r3, r9
    d582:	str	r2, [sp, #108]	; 0x6c
    d584:	ldrb.w	r3, [r3, r9]
    d588:	mov	r7, r0
    d58a:	mov	sl, r4
    d58c:	sub.w	r2, r3, #48	; 0x30
    d590:	cmp	r2, #9
    d592:	bhi.w	da88 <_strtod_l+0x650>
    d596:	adds	r1, r0, #1
    d598:	mov	r3, r2
    d59a:	cmp	r2, #0
    d59c:	beq.w	e2de <_strtod_l+0xea6>
    d5a0:	cmp	r1, #1
    d5a2:	add	r7, r1
    d5a4:	it	ne
    d5a6:	addne	r0, r0, r4
    d5a8:	bne.n	d5b6 <_strtod_l+0x17e>
    d5aa:	b.w	e2d6 <_strtod_l+0xe9e>
    d5ae:	lsls	r5, r1, #1
    d5b0:	cmp	r4, r0
    d5b2:	beq.w	df2c <_strtod_l+0xaf4>
    d5b6:	adds	r4, #1
    d5b8:	subs	r1, r4, #1
    d5ba:	cmp	r1, #8
    d5bc:	add.w	r1, r5, r5, lsl #2
    d5c0:	ble.n	d5ae <_strtod_l+0x176>
    d5c2:	cmp	r4, #16
    d5c4:	itt	le
    d5c6:	addle.w	r8, r8, r8, lsl #2
    d5ca:	movle.w	r8, r8, lsl #1
    d5ce:	b.n	d5b0 <_strtod_l+0x178>
    d5d0:	movs	r3, #0
    d5d2:	cmp	r7, #48	; 0x30
    d5d4:	str	r3, [sp, #28]
    d5d6:	bne.n	d4e0 <_strtod_l+0xa8>
    d5d8:	ldrb	r3, [r4, #1]
    d5da:	cmp	r3, #88	; 0x58
    d5dc:	beq.w	dcc6 <_strtod_l+0x88e>
    d5e0:	cmp	r3, #120	; 0x78
    d5e2:	beq.w	dcc6 <_strtod_l+0x88e>
    d5e6:	adds	r4, #1
    d5e8:	str	r4, [sp, #108]	; 0x6c
    d5ea:	ldrb	r7, [r4, #0]
    d5ec:	cmp	r7, #48	; 0x30
    d5ee:	beq.n	d5e6 <_strtod_l+0x1ae>
    d5f0:	cmp	r7, #0
    d5f2:	beq.n	d560 <_strtod_l+0x128>
    d5f4:	movs	r3, #1
    d5f6:	str	r4, [sp, #32]
    d5f8:	str	r3, [sp, #40]	; 0x28
    d5fa:	b.n	d4e6 <_strtod_l+0xae>
    d5fc:	cmp	r4, #16
    d5fe:	sub.w	r3, r2, r7
    d602:	mov	r0, r5
    d604:	mov	r9, r4
    d606:	str	r3, [sp, #44]	; 0x2c
    d608:	it	ge
    d60a:	movge.w	r9, #16
    d60e:	bl	b6e0 <__aeabi_ui2d>
    d612:	cmp.w	sl, #0
    d616:	it	eq
    d618:	moveq	sl, r4
    d61a:	cmp.w	r9, #9
    d61e:	strd	r0, r1, [sp, #16]
    d622:	ble.n	d64c <_strtod_l+0x214>
    d624:	ldr	r3, [pc, #292]	; (d74c <_strtod_l+0x314>)
    d626:	add.w	r3, r3, r9, lsl #3
    d62a:	ldrd	r2, r3, [r3, #-72]	; 0x48
    d62e:	bl	b7cc <__aeabi_dmul>
    d632:	mov	r6, r0
    d634:	mov	r0, r8
    d636:	mov	r7, r1
    d638:	bl	b6e0 <__aeabi_ui2d>
    d63c:	mov	r2, r0
    d63e:	mov	r3, r1
    d640:	mov	r0, r6
    d642:	mov	r1, r7
    d644:	bl	b468 <__adddf3>
    d648:	strd	r0, r1, [sp, #16]
    d64c:	cmp	r4, #15
    d64e:	bgt.w	d75c <_strtod_l+0x324>
    d652:	ldr	r3, [sp, #44]	; 0x2c
    d654:	cmp	r3, #0
    d656:	beq.n	d6a8 <_strtod_l+0x270>
    d658:	ble.w	e094 <_strtod_l+0xc5c>
    d65c:	ldr	r3, [sp, #44]	; 0x2c
    d65e:	cmp	r3, #22
    d660:	bgt.w	df60 <_strtod_l+0xb28>
    d664:	ldr	r7, [pc, #228]	; (d74c <_strtod_l+0x314>)
    d666:	add.w	r7, r7, r3, lsl #3
    d66a:	ldrd	r0, r1, [r7]
    d66e:	ldrd	r2, r3, [sp, #16]
    d672:	bl	b7cc <__aeabi_dmul>
    d676:	mov	r8, r0
    d678:	mov	r9, r1
    d67a:	b.n	d568 <_strtod_l+0x130>
    d67c:	add	r0, sp, #108	; 0x6c
    d67e:	ldr	r1, [pc, #208]	; (d750 <_strtod_l+0x318>)
    d680:	bl	12318 <__match>
    d684:	cmp	r0, #0
    d686:	beq.w	d4a4 <_strtod_l+0x6c>
    d68a:	ldr	r3, [sp, #108]	; 0x6c
    d68c:	ldr	r1, [pc, #196]	; (d754 <_strtod_l+0x31c>)
    d68e:	subs	r3, #1
    d690:	add	r0, sp, #108	; 0x6c
    d692:	str	r3, [sp, #108]	; 0x6c
    d694:	bl	12318 <__match>
    d698:	cbnz	r0, d6a0 <_strtod_l+0x268>
    d69a:	ldr	r3, [sp, #108]	; 0x6c
    d69c:	adds	r3, #1
    d69e:	str	r3, [sp, #108]	; 0x6c
    d6a0:	ldr	r3, [pc, #180]	; (d758 <_strtod_l+0x320>)
    d6a2:	str	r3, [sp, #20]
    d6a4:	movs	r3, #0
    d6a6:	str	r3, [sp, #16]
    d6a8:	ldrd	r8, r9, [sp, #16]
    d6ac:	b.n	d568 <_strtod_l+0x130>
    d6ae:	cmp	r4, #0
    d6b0:	beq.w	da48 <_strtod_l+0x610>
    d6b4:	ldr	r6, [sp, #108]	; 0x6c
    d6b6:	adds	r3, r6, #1
    d6b8:	str	r3, [sp, #108]	; 0x6c
    d6ba:	ldrb	r3, [r6, #1]
    d6bc:	cmp	r3, #43	; 0x2b
    d6be:	beq.w	dc7c <_strtod_l+0x844>
    d6c2:	cmp	r3, #45	; 0x2d
    d6c4:	beq.w	daf2 <_strtod_l+0x6ba>
    d6c8:	mov.w	ip, #0
    d6cc:	sub.w	r2, r3, #48	; 0x30
    d6d0:	cmp	r2, #9
    d6d2:	bhi.w	dc76 <_strtod_l+0x83e>
    d6d6:	cmp	r3, #48	; 0x30
    d6d8:	bne.n	d6e6 <_strtod_l+0x2ae>
    d6da:	ldr	r2, [sp, #108]	; 0x6c
    d6dc:	adds	r2, #1
    d6de:	str	r2, [sp, #108]	; 0x6c
    d6e0:	ldrb	r3, [r2, #0]
    d6e2:	cmp	r3, #48	; 0x30
    d6e4:	beq.n	d6dc <_strtod_l+0x2a4>
    d6e6:	sub.w	r2, r3, #49	; 0x31
    d6ea:	cmp	r2, #8
    d6ec:	bhi.w	d550 <_strtod_l+0x118>
    d6f0:	ldr	r2, [sp, #108]	; 0x6c
    d6f2:	str	r2, [sp, #48]	; 0x30
    d6f4:	adds	r1, r2, #1
    d6f6:	subs	r3, #48	; 0x30
    d6f8:	str	r1, [sp, #108]	; 0x6c
    d6fa:	str	r3, [sp, #44]	; 0x2c
    d6fc:	ldrb	r3, [r2, #1]
    d6fe:	sub.w	lr, r3, #48	; 0x30
    d702:	cmp.w	lr, #9
    d706:	bhi.n	d728 <_strtod_l+0x2f0>
    d708:	ldr	r2, [sp, #44]	; 0x2c
    d70a:	adds	r1, #1
    d70c:	str	r1, [sp, #108]	; 0x6c
    d70e:	add.w	r2, r2, r2, lsl #2
    d712:	add.w	r2, r3, r2, lsl #1
    d716:	ldrb	r3, [r1, #0]
    d718:	sub.w	lr, r3, #48	; 0x30
    d71c:	cmp.w	lr, #9
    d720:	sub.w	r2, r2, #48	; 0x30
    d724:	bls.n	d70a <_strtod_l+0x2d2>
    d726:	str	r2, [sp, #44]	; 0x2c
    d728:	ldr	r2, [sp, #48]	; 0x30
    d72a:	subs	r1, r1, r2
    d72c:	cmp	r1, #8
    d72e:	bgt.w	df4e <_strtod_l+0xb16>
    d732:	ldr	r2, [sp, #44]	; 0x2c
    d734:	movw	r1, #19999	; 0x4e1f
    d738:	cmp	r2, r1
    d73a:	it	ge
    d73c:	movge	r2, r1
    d73e:	cmp.w	ip, #0
    d742:	beq.w	d552 <_strtod_l+0x11a>
    d746:	negs	r2, r2
    d748:	b.n	d552 <_strtod_l+0x11a>
    d74a:	nop
    d74c:	.word	0x00014488
    d750:	.word	0x00014194
    d754:	.word	0x00014198
    d758:	.word	0x7ff00000
    d75c:	ldr	r3, [sp, #44]	; 0x2c
    d75e:	rsb	r9, r9, r4
    d762:	add	r9, r3
    d764:	cmp.w	r9, #0
    d768:	ble.w	de7a <_strtod_l+0xa42>
    d76c:	ands.w	r1, r9, #15
    d770:	beq.n	d788 <_strtod_l+0x350>
    d772:	ldr	r3, [pc, #756]	; (da68 <_strtod_l+0x630>)
    d774:	add.w	r1, r3, r1, lsl #3
    d778:	ldrd	r0, r1, [r1]
    d77c:	ldrd	r2, r3, [sp, #16]
    d780:	bl	b7cc <__aeabi_dmul>
    d784:	strd	r0, r1, [sp, #16]
    d788:	bics.w	r6, r9, #15
    d78c:	bne.w	dbb0 <_strtod_l+0x778>
    d790:	movs	r3, #0
    d792:	str	r3, [sp, #40]	; 0x28
    d794:	str	r5, [sp, #0]
    d796:	mov	r3, r4
    d798:	mov	r2, sl
    d79a:	ldr	r1, [sp, #32]
    d79c:	mov	r0, fp
    d79e:	bl	126e0 <__s2b>
    d7a2:	str	r0, [sp, #72]	; 0x48
    d7a4:	cmp	r0, #0
    d7a6:	beq.w	ddf6 <_strtod_l+0x9be>
    d7aa:	ldr	r2, [sp, #44]	; 0x2c
    d7ac:	movs	r7, #0
    d7ae:	cmp	r2, #0
    d7b0:	rsb	r3, r2, #0
    d7b4:	it	ge
    d7b6:	movge	r3, r7
    d7b8:	str	r3, [sp, #48]	; 0x30
    d7ba:	bic.w	r3, r2, r2, asr #31
    d7be:	str	r3, [sp, #44]	; 0x2c
    d7c0:	mov	sl, r7
    d7c2:	ldr	r4, [sp, #72]	; 0x48
    d7c4:	mov	r0, fp
    d7c6:	ldr	r1, [r4, #4]
    d7c8:	bl	12600 <_Balloc>
    d7cc:	mov	r6, r0
    d7ce:	cmp	r0, #0
    d7d0:	beq.w	dc88 <_strtod_l+0x850>
    d7d4:	ldr	r2, [r4, #16]
    d7d6:	vldr	d7, [sp, #16]
    d7da:	adds	r2, #2
    d7dc:	lsls	r2, r2, #2
    d7de:	add.w	r1, r4, #12
    d7e2:	adds	r0, #12
    d7e4:	vstr	d7, [sp, #32]
    d7e8:	bl	94c8 <memcpy>
    d7ec:	vldr	d0, [sp, #32]
    d7f0:	add	r2, sp, #120	; 0x78
    d7f2:	add	r1, sp, #116	; 0x74
    d7f4:	mov	r0, fp
    d7f6:	bl	12d24 <__d2b>
    d7fa:	str	r0, [sp, #112]	; 0x70
    d7fc:	cmp	r0, #0
    d7fe:	beq.w	dc8a <_strtod_l+0x852>
    d802:	movs	r1, #1
    d804:	mov	r0, fp
    d806:	bl	12814 <__i2b>
    d80a:	mov	sl, r0
    d80c:	cmp	r0, #0
    d80e:	beq.w	dc88 <_strtod_l+0x850>
    d812:	ldr	r2, [sp, #116]	; 0x74
    d814:	cmp	r2, #0
    d816:	blt.w	da80 <_strtod_l+0x648>
    d81a:	ldr	r3, [sp, #48]	; 0x30
    d81c:	ldr	r4, [sp, #44]	; 0x2c
    d81e:	adds	r5, r3, r2
    d820:	ldr	r0, [sp, #40]	; 0x28
    d822:	ldr	r3, [sp, #120]	; 0x78
    d824:	ldr	r1, [pc, #580]	; (da6c <_strtod_l+0x634>)
    d826:	subs	r2, r2, r0
    d828:	add	r2, r3
    d82a:	subs	r2, #1
    d82c:	cmp	r2, r1
    d82e:	rsb	r3, r3, #54	; 0x36
    d832:	bge.w	da12 <_strtod_l+0x5da>
    d836:	subs	r1, r1, r2
    d838:	cmp	r1, #31
    d83a:	sub.w	r3, r3, r1
    d83e:	bgt.w	da8e <_strtod_l+0x656>
    d842:	movs	r2, #1
    d844:	lsls	r2, r1
    d846:	str	r2, [sp, #56]	; 0x38
    d848:	movs	r2, #0
    d84a:	str	r2, [sp, #76]	; 0x4c
    d84c:	add.w	r9, r5, r3
    d850:	add	r4, r3
    d852:	ldr	r3, [sp, #40]	; 0x28
    d854:	cmp	r5, r9
    d856:	mov	r2, r5
    d858:	add	r4, r3
    d85a:	it	ge
    d85c:	movge	r2, r9
    d85e:	cmp	r2, r4
    d860:	it	ge
    d862:	movge	r2, r4
    d864:	cmp	r2, #0
    d866:	ble.n	d870 <_strtod_l+0x438>
    d868:	rsb	r9, r2, r9
    d86c:	subs	r4, r4, r2
    d86e:	subs	r5, r5, r2
    d870:	ldr	r3, [sp, #48]	; 0x30
    d872:	cbz	r3, d8a4 <_strtod_l+0x46c>
    d874:	mov	r1, sl
    d876:	mov	r2, r3
    d878:	mov	r0, fp
    d87a:	bl	12958 <__pow5mult>
    d87e:	mov	sl, r0
    d880:	cmp	r0, #0
    d882:	beq.w	dc88 <_strtod_l+0x850>
    d886:	mov	r1, r0
    d888:	ldr	r2, [sp, #112]	; 0x70
    d88a:	mov	r0, fp
    d88c:	bl	12828 <__multiply>
    d890:	cmp	r0, #0
    d892:	beq.w	dc88 <_strtod_l+0x850>
    d896:	str	r0, [sp, #52]	; 0x34
    d898:	ldr	r1, [sp, #112]	; 0x70
    d89a:	mov	r0, fp
    d89c:	bl	1264c <_Bfree>
    d8a0:	ldr	r2, [sp, #52]	; 0x34
    d8a2:	str	r2, [sp, #112]	; 0x70
    d8a4:	cmp.w	r9, #0
    d8a8:	ble.n	d8bc <_strtod_l+0x484>
    d8aa:	mov	r2, r9
    d8ac:	ldr	r1, [sp, #112]	; 0x70
    d8ae:	mov	r0, fp
    d8b0:	bl	129f8 <__lshift>
    d8b4:	str	r0, [sp, #112]	; 0x70
    d8b6:	cmp	r0, #0
    d8b8:	beq.w	dc8a <_strtod_l+0x852>
    d8bc:	ldr	r3, [sp, #44]	; 0x2c
    d8be:	cbz	r3, d8d2 <_strtod_l+0x49a>
    d8c0:	mov	r1, r6
    d8c2:	ldr	r2, [sp, #44]	; 0x2c
    d8c4:	mov	r0, fp
    d8c6:	bl	12958 <__pow5mult>
    d8ca:	mov	r6, r0
    d8cc:	cmp	r0, #0
    d8ce:	beq.w	dc88 <_strtod_l+0x850>
    d8d2:	cmp	r4, #0
    d8d4:	ble.n	d8e8 <_strtod_l+0x4b0>
    d8d6:	mov	r1, r6
    d8d8:	mov	r2, r4
    d8da:	mov	r0, fp
    d8dc:	bl	129f8 <__lshift>
    d8e0:	mov	r6, r0
    d8e2:	cmp	r0, #0
    d8e4:	beq.w	dc88 <_strtod_l+0x850>
    d8e8:	cmp	r5, #0
    d8ea:	ble.n	d8fe <_strtod_l+0x4c6>
    d8ec:	mov	r1, sl
    d8ee:	mov	r2, r5
    d8f0:	mov	r0, fp
    d8f2:	bl	129f8 <__lshift>
    d8f6:	mov	sl, r0
    d8f8:	cmp	r0, #0
    d8fa:	beq.w	dc88 <_strtod_l+0x850>
    d8fe:	mov	r2, r6
    d900:	ldr	r1, [sp, #112]	; 0x70
    d902:	mov	r0, fp
    d904:	bl	12aec <__mdiff>
    d908:	mov	r7, r0
    d90a:	cmp	r0, #0
    d90c:	beq.w	dc88 <_strtod_l+0x850>
    d910:	movs	r3, #0
    d912:	ldr	r2, [r0, #12]
    d914:	str	r3, [r0, #12]
    d916:	mov	r1, sl
    d918:	str	r2, [sp, #52]	; 0x34
    d91a:	bl	12aa8 <__mcmp>
    d91e:	cmp	r0, #0
    d920:	blt.w	e13e <_strtod_l+0xd06>
    d924:	beq.w	e0b8 <_strtod_l+0xc80>
    d928:	mov	r1, sl
    d92a:	mov	r0, r7
    d92c:	bl	12de0 <__ratio>
    d930:	vmov	r4, r5, d0
    d934:	movs	r2, #0
    d936:	mov.w	r3, #1073741824	; 0x40000000
    d93a:	vmov	r0, s0
    d93e:	mov	r1, r5
    d940:	bl	bcc4 <__aeabi_dcmple>
    d944:	cmp	r0, #0
    d946:	beq.n	da1c <_strtod_l+0x5e4>
    d948:	ldr	r3, [sp, #52]	; 0x34
    d94a:	cmp	r3, #0
    d94c:	beq.w	da9e <_strtod_l+0x666>
    d950:	vldr	d7, [pc, #260]	; da58 <_strtod_l+0x620>
    d954:	ldr	r3, [sp, #20]
    d956:	ldr	r5, [pc, #280]	; (da70 <_strtod_l+0x638>)
    d958:	vstr	d7, [sp, #56]	; 0x38
    d95c:	movs	r4, #0
    d95e:	mov	r8, r3
    d960:	ldr.w	r9, [pc, #276]	; da78 <_strtod_l+0x640>
    d964:	ldr	r3, [pc, #268]	; (da74 <_strtod_l+0x63c>)
    d966:	and.w	r9, r8, r9
    d96a:	cmp	r9, r3
    d96c:	beq.w	dd9c <_strtod_l+0x964>
    d970:	ldr	r3, [sp, #40]	; 0x28
    d972:	cbz	r3, d9c0 <_strtod_l+0x588>
    d974:	cmp.w	r9, #111149056	; 0x6a00000
    d978:	bhi.n	d9c0 <_strtod_l+0x588>
    d97a:	add	r3, pc, #228	; (adr r3, da60 <_strtod_l+0x628>)
    d97c:	ldrd	r2, r3, [r3]
    d980:	ldrd	r0, r1, [sp, #56]	; 0x38
    d984:	bl	bcc4 <__aeabi_dcmple>
    d988:	cbz	r0, d9b8 <_strtod_l+0x580>
    d98a:	ldrd	r0, r1, [sp, #56]	; 0x38
    d98e:	bl	bd7c <__aeabi_d2uiz>
    d992:	cmp	r0, #0
    d994:	beq.w	e018 <_strtod_l+0xbe0>
    d998:	bl	b6e0 <__aeabi_ui2d>
    d99c:	strd	r0, r1, [sp, #56]	; 0x38
    d9a0:	ldr	r3, [sp, #52]	; 0x34
    d9a2:	cmp	r3, #0
    d9a4:	bne.w	e00e <_strtod_l+0xbd6>
    d9a8:	ldrd	r1, r2, [sp, #56]	; 0x38
    d9ac:	add.w	r3, r2, #2147483648	; 0x80000000
    d9b0:	str	r1, [sp, #80]	; 0x50
    d9b2:	str	r3, [sp, #84]	; 0x54
    d9b4:	ldrd	r4, r5, [sp, #80]	; 0x50
    d9b8:	add.w	r3, r5, #112197632	; 0x6b00000
    d9bc:	rsb	r5, r9, r3
    d9c0:	vldr	d0, [sp, #32]
    d9c4:	bl	12c00 <__ulp>
    d9c8:	mov	r0, r4
    d9ca:	vmov	r2, r3, d0
    d9ce:	mov	r1, r5
    d9d0:	bl	b7cc <__aeabi_dmul>
    d9d4:	ldrd	r2, r3, [sp, #32]
    d9d8:	bl	b468 <__adddf3>
    d9dc:	strd	r0, r1, [sp, #16]
    d9e0:	mov	r4, r1
    d9e2:	ldr	r3, [sp, #40]	; 0x28
    d9e4:	cbnz	r3, d9f0 <_strtod_l+0x5b8>
    d9e6:	ldr	r3, [pc, #144]	; (da78 <_strtod_l+0x640>)
    d9e8:	ands	r3, r4
    d9ea:	cmp	r9, r3
    d9ec:	beq.w	de0c <_strtod_l+0x9d4>
    d9f0:	ldr	r1, [sp, #112]	; 0x70
    d9f2:	mov	r0, fp
    d9f4:	bl	1264c <_Bfree>
    d9f8:	mov	r1, r6
    d9fa:	mov	r0, fp
    d9fc:	bl	1264c <_Bfree>
    da00:	mov	r1, sl
    da02:	mov	r0, fp
    da04:	bl	1264c <_Bfree>
    da08:	mov	r1, r7
    da0a:	mov	r0, fp
    da0c:	bl	1264c <_Bfree>
    da10:	b.n	d7c2 <_strtod_l+0x38a>
    da12:	movs	r2, #0
    da14:	str	r2, [sp, #76]	; 0x4c
    da16:	movs	r2, #1
    da18:	str	r2, [sp, #56]	; 0x38
    da1a:	b.n	d84c <_strtod_l+0x414>
    da1c:	ldr	r3, [pc, #92]	; (da7c <_strtod_l+0x644>)
    da1e:	mov	r0, r4
    da20:	mov	r1, r5
    da22:	movs	r2, #0
    da24:	bl	b7cc <__aeabi_dmul>
    da28:	ldr	r3, [sp, #52]	; 0x34
    da2a:	strd	r0, r1, [sp, #56]	; 0x38
    da2e:	cmp	r3, #0
    da30:	bne.n	dae8 <_strtod_l+0x6b0>
    da32:	add.w	r3, r1, #2147483648	; 0x80000000
    da36:	str	r0, [sp, #64]	; 0x40
    da38:	str	r3, [sp, #68]	; 0x44
    da3a:	ldr	r3, [sp, #20]
    da3c:	ldrd	r4, r5, [sp, #64]	; 0x40
    da40:	mov	r8, r3
    da42:	b.n	d960 <_strtod_l+0x528>
    da44:	mov.w	r9, #1
    da48:	cmp	r0, #0
    da4a:	bne.n	dafe <_strtod_l+0x6c6>
    da4c:	ldr	r3, [sp, #40]	; 0x28
    da4e:	cmp	r3, #0
    da50:	beq.w	d4a4 <_strtod_l+0x6c>
    da54:	mov	r4, r0
    da56:	b.n	d6b4 <_strtod_l+0x27c>
    da58:	.word	0x00000000
    da5c:	.word	0x3ff00000
    da60:	.word	0xffc00000
    da64:	.word	0x41dfffff
    da68:	.word	0x00014488
    da6c:	.word	0xfffffc02
    da70:	.word	0x3ff00000
    da74:	.word	0x7fe00000
    da78:	.word	0x7ff00000
    da7c:	.word	0x3fe00000
    da80:	ldr	r3, [sp, #44]	; 0x2c
    da82:	ldr	r5, [sp, #48]	; 0x30
    da84:	subs	r4, r3, r2
    da86:	b.n	d820 <_strtod_l+0x3e8>
    da88:	mov.w	r9, #1
    da8c:	b.n	d544 <_strtod_l+0x10c>
    da8e:	ldr	r1, [pc, #736]	; (dd70 <_strtod_l+0x938>)
    da90:	subs	r1, r1, r2
    da92:	movs	r2, #1
    da94:	lsl.w	r1, r2, r1
    da98:	str	r1, [sp, #76]	; 0x4c
    da9a:	str	r2, [sp, #56]	; 0x38
    da9c:	b.n	d84c <_strtod_l+0x414>
    da9e:	ldrd	r1, r2, [sp, #16]
    daa2:	cmp	r1, #0
    daa4:	bne.w	dc3a <_strtod_l+0x802>
    daa8:	ubfx	r3, r2, #0, #20
    daac:	mov	r8, r2
    daae:	cmp	r3, #0
    dab0:	bne.w	dc46 <_strtod_l+0x80e>
    dab4:	movs	r2, #0
    dab6:	ldr	r3, [pc, #700]	; (dd74 <_strtod_l+0x93c>)
    dab8:	mov	r0, r4
    daba:	mov	r1, r5
    dabc:	bl	bcb0 <__aeabi_dcmplt>
    dac0:	cmp	r0, #0
    dac2:	bne.w	e1c2 <_strtod_l+0xd8a>
    dac6:	movs	r2, #0
    dac8:	ldr	r3, [pc, #684]	; (dd78 <_strtod_l+0x940>)
    daca:	mov	r0, r4
    dacc:	mov	r1, r5
    dace:	bl	b7cc <__aeabi_dmul>
    dad2:	mov	r2, r1
    dad4:	mov	r1, r0
    dad6:	strd	r1, r2, [sp, #56]	; 0x38
    dada:	add.w	r3, r2, #2147483648	; 0x80000000
    dade:	str	r0, [sp, #96]	; 0x60
    dae0:	str	r3, [sp, #100]	; 0x64
    dae2:	ldrd	r4, r5, [sp, #96]	; 0x60
    dae6:	b.n	d960 <_strtod_l+0x528>
    dae8:	vldr	d7, [sp, #56]	; 0x38
    daec:	vstr	d7, [sp, #64]	; 0x40
    daf0:	b.n	da3a <_strtod_l+0x602>
    daf2:	mov.w	ip, #1
    daf6:	adds	r3, r6, #2
    daf8:	str	r3, [sp, #108]	; 0x6c
    dafa:	ldrb	r3, [r6, #2]
    dafc:	b.n	d6cc <_strtod_l+0x294>
    dafe:	movs	r4, #0
    db00:	b.n	d6b4 <_strtod_l+0x27c>
    db02:	cmp.w	r9, #0
    db06:	bne.w	d4a4 <_strtod_l+0x6c>
    db0a:	subs	r3, #73	; 0x49
    db0c:	cmp	r3, #37	; 0x25
    db0e:	bhi.w	d4a4 <_strtod_l+0x6c>
    db12:	add	r2, pc, #4	; (adr r2, db18 <_strtod_l+0x6e0>)
    db14:	ldr.w	pc, [r2, r3, lsl #2]
    db18:	.word	0x0000d67d
    db1c:	.word	0x0000d4a5
    db20:	.word	0x0000d4a5
    db24:	.word	0x0000d4a5
    db28:	.word	0x0000d4a5
    db2c:	.word	0x0000dc55
    db30:	.word	0x0000d4a5
    db34:	.word	0x0000d4a5
    db38:	.word	0x0000d4a5
    db3c:	.word	0x0000d4a5
    db40:	.word	0x0000d4a5
    db44:	.word	0x0000d4a5
    db48:	.word	0x0000d4a5
    db4c:	.word	0x0000d4a5
    db50:	.word	0x0000d4a5
    db54:	.word	0x0000d4a5
    db58:	.word	0x0000d4a5
    db5c:	.word	0x0000d4a5
    db60:	.word	0x0000d4a5
    db64:	.word	0x0000d4a5
    db68:	.word	0x0000d4a5
    db6c:	.word	0x0000d4a5
    db70:	.word	0x0000d4a5
    db74:	.word	0x0000d4a5
    db78:	.word	0x0000d4a5
    db7c:	.word	0x0000d4a5
    db80:	.word	0x0000d4a5
    db84:	.word	0x0000d4a5
    db88:	.word	0x0000d4a5
    db8c:	.word	0x0000d4a5
    db90:	.word	0x0000d4a5
    db94:	.word	0x0000d4a5
    db98:	.word	0x0000d67d
    db9c:	.word	0x0000d4a5
    dba0:	.word	0x0000d4a5
    dba4:	.word	0x0000d4a5
    dba8:	.word	0x0000d4a5
    dbac:	.word	0x0000dc55
    dbb0:	cmp.w	r6, #308	; 0x134
    dbb4:	bgt.w	ddf6 <_strtod_l+0x9be>
    dbb8:	asrs	r6, r6, #4
    dbba:	cmp	r6, #1
    dbbc:	ldr.w	r9, [pc, #472]	; dd98 <_strtod_l+0x960>
    dbc0:	ble.w	e1f6 <_strtod_l+0xdbe>
    dbc4:	ldrd	r0, r1, [sp, #16]
    dbc8:	movs	r3, #0
    dbca:	mov	r7, r9
    dbcc:	mov	r8, r3
    dbce:	tst.w	r6, #1
    dbd2:	add.w	r8, r8, #1
    dbd6:	mov.w	r6, r6, asr #1
    dbda:	beq.n	dbe6 <_strtod_l+0x7ae>
    dbdc:	ldrd	r2, r3, [r7]
    dbe0:	bl	b7cc <__aeabi_dmul>
    dbe4:	movs	r3, #1
    dbe6:	cmp	r6, #1
    dbe8:	add.w	r7, r7, #8
    dbec:	bne.n	dbce <_strtod_l+0x796>
    dbee:	cmp	r3, #0
    dbf0:	bne.w	e2ba <_strtod_l+0xe82>
    dbf4:	ldr	r3, [sp, #20]
    dbf6:	sub.w	r3, r3, #55574528	; 0x3500000
    dbfa:	str	r3, [sp, #20]
    dbfc:	add.w	r8, r9, r8, lsl #3
    dc00:	ldrd	r2, r3, [sp, #16]
    dc04:	ldrd	r0, r1, [r8]
    dc08:	bl	b7cc <__aeabi_dmul>
    dc0c:	bic.w	r3, r1, #2147483648	; 0x80000000
    dc10:	lsrs	r3, r3, #20
    dc12:	ldr	r2, [pc, #360]	; (dd7c <_strtod_l+0x944>)
    dc14:	lsls	r3, r3, #20
    dc16:	cmp	r3, r2
    dc18:	strd	r0, r1, [sp, #16]
    dc1c:	bhi.w	ddf6 <_strtod_l+0x9be>
    dc20:	sub.w	r2, r2, #1048576	; 0x100000
    dc24:	cmp	r3, r2
    dc26:	bls.w	e1b8 <_strtod_l+0xd80>
    dc2a:	ldr	r3, [pc, #340]	; (dd80 <_strtod_l+0x948>)
    dc2c:	str	r3, [sp, #20]
    dc2e:	movs	r3, #0
    dc30:	str	r3, [sp, #40]	; 0x28
    dc32:	mov.w	r3, #4294967295
    dc36:	str	r3, [sp, #16]
    dc38:	b.n	d794 <_strtod_l+0x35c>
    dc3a:	ldrd	r1, r2, [sp, #16]
    dc3e:	cmp	r1, #1
    dc40:	beq.w	e022 <_strtod_l+0xbea>
    dc44:	mov	r8, r2
    dc46:	vldr	d7, [pc, #288]	; dd68 <_strtod_l+0x930>
    dc4a:	movs	r4, #0
    dc4c:	ldr	r5, [pc, #308]	; (dd84 <_strtod_l+0x94c>)
    dc4e:	vstr	d7, [sp, #56]	; 0x38
    dc52:	b.n	d960 <_strtod_l+0x528>
    dc54:	add	r0, sp, #108	; 0x6c
    dc56:	ldr	r1, [pc, #304]	; (dd88 <_strtod_l+0x950>)
    dc58:	bl	12318 <__match>
    dc5c:	cmp	r0, #0
    dc5e:	beq.w	d4a4 <_strtod_l+0x6c>
    dc62:	ldr	r3, [sp, #108]	; 0x6c
    dc64:	ldrb	r3, [r3, #0]
    dc66:	cmp	r3, #40	; 0x28
    dc68:	beq.w	e270 <_strtod_l+0xe38>
    dc6c:	ldr	r3, [pc, #284]	; (dd8c <_strtod_l+0x954>)
    dc6e:	str	r3, [sp, #20]
    dc70:	movs	r3, #0
    dc72:	str	r3, [sp, #16]
    dc74:	b.n	d6a8 <_strtod_l+0x270>
    dc76:	str	r6, [sp, #108]	; 0x6c
    dc78:	movs	r2, #0
    dc7a:	b.n	d552 <_strtod_l+0x11a>
    dc7c:	mov.w	ip, #0
    dc80:	b.n	daf6 <_strtod_l+0x6be>
    dc82:	adds	r3, #1
    dc84:	bne.w	e256 <_strtod_l+0xe1e>
    dc88:	ldr	r0, [sp, #112]	; 0x70
    dc8a:	ldr	r3, [pc, #260]	; (dd90 <_strtod_l+0x958>)
    dc8c:	str	r3, [sp, #20]
    dc8e:	movs	r2, #0
    dc90:	str	r2, [sp, #16]
    dc92:	ldrd	r8, r9, [sp, #16]
    dc96:	movs	r3, #34	; 0x22
    dc98:	str.w	r3, [fp]
    dc9c:	mov	r1, r0
    dc9e:	mov	r0, fp
    dca0:	bl	1264c <_Bfree>
    dca4:	mov	r1, r6
    dca6:	mov	r0, fp
    dca8:	bl	1264c <_Bfree>
    dcac:	mov	r1, sl
    dcae:	mov	r0, fp
    dcb0:	bl	1264c <_Bfree>
    dcb4:	ldr	r1, [sp, #72]	; 0x48
    dcb6:	mov	r0, fp
    dcb8:	bl	1264c <_Bfree>
    dcbc:	mov	r1, r7
    dcbe:	mov	r0, fp
    dcc0:	bl	1264c <_Bfree>
    dcc4:	b.n	d568 <_strtod_l+0x130>
    dcc6:	ldr	r2, [sp, #28]
    dcc8:	str	r5, [sp, #8]
    dcca:	add	r3, sp, #112	; 0x70
    dccc:	str	r2, [sp, #4]
    dcce:	str	r3, [sp, #0]
    dcd0:	ldr	r2, [pc, #192]	; (dd94 <_strtod_l+0x95c>)
    dcd2:	add	r3, sp, #116	; 0x74
    dcd4:	add	r1, sp, #108	; 0x6c
    dcd6:	mov	r0, fp
    dcd8:	bl	11e08 <__gethex>
    dcdc:	ands.w	r6, r0, #7
    dce0:	mov	r5, r0
    dce2:	beq.w	d560 <_strtod_l+0x128>
    dce6:	cmp	r6, #6
    dce8:	bne.w	df98 <_strtod_l+0xb60>
    dcec:	adds	r4, #1
    dcee:	movs	r3, #0
    dcf0:	str	r4, [sp, #108]	; 0x6c
    dcf2:	mov.w	r8, #0
    dcf6:	mov.w	r9, #0
    dcfa:	str	r3, [sp, #28]
    dcfc:	b.n	d568 <_strtod_l+0x130>
    dcfe:	ldr.w	r1, [sl]
    dd02:	mov	r0, r4
    dd04:	mov	r2, r9
    dd06:	bl	d35c <strncmp>
    dd0a:	cbz	r0, dd20 <_strtod_l+0x8e8>
    dd0c:	mov.w	sl, #0
    dd10:	mov	r3, r7
    dd12:	mov	r8, sl
    dd14:	mov	r5, sl
    dd16:	mov	r0, sl
    dd18:	mov	r7, sl
    dd1a:	mov	r4, sl
    dd1c:	mov	r9, sl
    dd1e:	b.n	d544 <_strtod_l+0x10c>
    dd20:	ldr	r3, [sp, #108]	; 0x6c
    dd22:	add.w	r2, r3, r9
    dd26:	str	r2, [sp, #108]	; 0x6c
    dd28:	ldrb.w	r3, [r3, r9]
    dd2c:	cmp	r3, #48	; 0x30
    dd2e:	bne.n	dd3e <_strtod_l+0x906>
    dd30:	adds	r2, #1
    dd32:	str	r2, [sp, #108]	; 0x6c
    dd34:	ldrb	r3, [r2, #0]
    dd36:	cmp	r3, #48	; 0x30
    dd38:	add.w	r0, r0, #1
    dd3c:	beq.n	dd30 <_strtod_l+0x8f8>
    dd3e:	sub.w	r2, r3, #49	; 0x31
    dd42:	cmp	r2, #8
    dd44:	bls.w	e040 <_strtod_l+0xc08>
    dd48:	mov.w	sl, #0
    dd4c:	cmp	r3, #101	; 0x65
    dd4e:	mov	r8, sl
    dd50:	mov	r5, sl
    dd52:	mov	r7, sl
    dd54:	beq.w	da44 <_strtod_l+0x60c>
    dd58:	mov	r4, sl
    dd5a:	mov.w	r9, #1
    dd5e:	b.w	d54a <_strtod_l+0x112>
    dd62:	nop
    dd64:	nop.w
    dd68:	.word	0x00000000
    dd6c:	.word	0x3ff00000
    dd70:	.word	0xfffffbe2
    dd74:	.word	0x3ff00000
    dd78:	.word	0x3fe00000
    dd7c:	.word	0x7ca00000
    dd80:	.word	0x7fefffff
    dd84:	.word	0xbff00000
    dd88:	.word	0x000141a0
    dd8c:	.word	0xfff80000
    dd90:	.word	0x7ff00000
    dd94:	.word	0x00014180
    dd98:	.word	0x00014550
    dd9c:	sub.w	r3, r8, #55574528	; 0x3500000
    dda0:	str	r3, [sp, #20]
    dda2:	vldr	d7, [sp, #16]
    dda6:	vmov.f32	s0, s14
    ddaa:	vmov.f32	s1, s15
    ddae:	bl	12c00 <__ulp>
    ddb2:	mov	r0, r4
    ddb4:	vmov	r2, r3, d0
    ddb8:	mov	r1, r5
    ddba:	bl	b7cc <__aeabi_dmul>
    ddbe:	ldrd	r2, r3, [sp, #16]
    ddc2:	bl	b468 <__adddf3>
    ddc6:	bic.w	r3, r1, #2147483648	; 0x80000000
    ddca:	strd	r0, r1, [sp, #16]
    ddce:	lsrs	r3, r3, #20
    ddd0:	ldr	r2, [pc, #684]	; (e080 <_strtod_l+0xc48>)
    ddd2:	ldrd	r0, r1, [sp, #32]
    ddd6:	lsls	r3, r3, #20
    ddd8:	cmp	r3, r2
    ddda:	strd	r0, r1, [sp, #88]	; 0x58
    ddde:	bls.w	df56 <_strtod_l+0xb1e>
    dde2:	ldr	r3, [pc, #672]	; (e084 <_strtod_l+0xc4c>)
    dde4:	cmp	r1, r3
    dde6:	beq.w	e1ae <_strtod_l+0xd76>
    ddea:	ldr	r3, [pc, #664]	; (e084 <_strtod_l+0xc4c>)
    ddec:	str	r3, [sp, #20]
    ddee:	mov.w	r3, #4294967295
    ddf2:	str	r3, [sp, #16]
    ddf4:	b.n	d9f0 <_strtod_l+0x5b8>
    ddf6:	ldr	r3, [pc, #656]	; (e088 <_strtod_l+0xc50>)
    ddf8:	str	r3, [sp, #20]
    ddfa:	movs	r2, #0
    ddfc:	movs	r3, #34	; 0x22
    ddfe:	str	r2, [sp, #16]
    de00:	ldrd	r8, r9, [sp, #16]
    de04:	str.w	r3, [fp]
    de08:	b.w	d568 <_strtod_l+0x130>
    de0c:	ldrd	r8, r9, [sp, #56]	; 0x38
    de10:	mov	r1, r9
    de12:	mov	r0, r8
    de14:	bl	bd2c <__aeabi_d2iz>
    de18:	bl	b700 <__aeabi_i2d>
    de1c:	mov	r3, r1
    de1e:	mov	r2, r0
    de20:	mov	r1, r9
    de22:	mov	r0, r8
    de24:	bl	b464 <__aeabi_dsub>
    de28:	ldr	r3, [sp, #52]	; 0x34
    de2a:	mov	r8, r0
    de2c:	mov	r9, r1
    de2e:	cbnz	r3, de52 <_strtod_l+0xa1a>
    de30:	ldr	r3, [sp, #16]
    de32:	cbnz	r3, de52 <_strtod_l+0xa1a>
    de34:	ubfx	r4, r4, #0, #20
    de38:	cbnz	r4, de52 <_strtod_l+0xa1a>
    de3a:	add	r3, pc, #548	; (adr r3, e060 <_strtod_l+0xc28>)
    de3c:	ldrd	r2, r3, [r3]
    de40:	bl	bcb0 <__aeabi_dcmplt>
    de44:	cmp	r0, #0
    de46:	beq.w	d9f0 <_strtod_l+0x5b8>
    de4a:	ldrd	r8, r9, [sp, #16]
    de4e:	ldr	r0, [sp, #112]	; 0x70
    de50:	b.n	dc9c <_strtod_l+0x864>
    de52:	add	r3, pc, #532	; (adr r3, e068 <_strtod_l+0xc30>)
    de54:	ldrd	r2, r3, [r3]
    de58:	mov	r0, r8
    de5a:	mov	r1, r9
    de5c:	bl	bcb0 <__aeabi_dcmplt>
    de60:	cmp	r0, #0
    de62:	bne.n	de4a <_strtod_l+0xa12>
    de64:	mov	r0, r8
    de66:	mov	r1, r9
    de68:	add	r3, pc, #516	; (adr r3, e070 <_strtod_l+0xc38>)
    de6a:	ldrd	r2, r3, [r3]
    de6e:	bl	bcec <__aeabi_dcmpgt>
    de72:	cmp	r0, #0
    de74:	beq.w	d9f0 <_strtod_l+0x5b8>
    de78:	b.n	de4a <_strtod_l+0xa12>
    de7a:	beq.w	d790 <_strtod_l+0x358>
    de7e:	rsb	r6, r9, #0
    de82:	ands.w	r2, r6, #15
    de86:	beq.n	de9e <_strtod_l+0xa66>
    de88:	ldr	r3, [pc, #512]	; (e08c <_strtod_l+0xc54>)
    de8a:	add.w	r3, r3, r2, lsl #3
    de8e:	ldrd	r0, r1, [sp, #16]
    de92:	ldrd	r2, r3, [r3]
    de96:	bl	ba20 <__aeabi_ddiv>
    de9a:	strd	r0, r1, [sp, #16]
    de9e:	asrs	r6, r6, #4
    dea0:	beq.w	d790 <_strtod_l+0x358>
    dea4:	cmp	r6, #31
    dea6:	bgt.n	df1a <_strtod_l+0xae2>
    dea8:	ands.w	r3, r6, #16
    deac:	beq.w	e220 <_strtod_l+0xde8>
    deb0:	movs	r3, #106	; 0x6a
    deb2:	cmp	r6, #0
    deb4:	str	r3, [sp, #40]	; 0x28
    deb6:	ble.n	dee0 <_strtod_l+0xaa8>
    deb8:	ldrd	r0, r1, [sp, #16]
    debc:	ldr	r7, [pc, #464]	; (e090 <_strtod_l+0xc58>)
    debe:	movs	r3, #0
    dec0:	lsls	r2, r6, #31
    dec2:	bpl.n	dece <_strtod_l+0xa96>
    dec4:	ldrd	r2, r3, [r7]
    dec8:	bl	b7cc <__aeabi_dmul>
    decc:	movs	r3, #1
    dece:	asrs	r6, r6, #1
    ded0:	add.w	r7, r7, #8
    ded4:	bne.n	dec0 <_strtod_l+0xa88>
    ded6:	cmp	r3, #0
    ded8:	bne.w	e2c0 <_strtod_l+0xe88>
    dedc:	ldr	r3, [sp, #40]	; 0x28
    dede:	cbz	r3, df08 <_strtod_l+0xad0>
    dee0:	ldrd	r1, r2, [sp, #16]
    dee4:	ubfx	r3, r2, #20, #11
    dee8:	rsb	r3, r3, #107	; 0x6b
    deec:	cmp	r3, #0
    deee:	mov	r1, r2
    def0:	ble.n	df08 <_strtod_l+0xad0>
    def2:	cmp	r3, #31
    def4:	ble.w	e2aa <_strtod_l+0xe72>
    def8:	movs	r2, #0
    defa:	cmp	r3, #52	; 0x34
    defc:	str	r2, [sp, #16]
    defe:	ble.w	e2c6 <_strtod_l+0xe8e>
    df02:	mov.w	r3, #57671680	; 0x3700000
    df06:	str	r3, [sp, #20]
    df08:	movs	r2, #0
    df0a:	movs	r3, #0
    df0c:	ldrd	r0, r1, [sp, #16]
    df10:	bl	bc9c <__aeabi_dcmpeq>
    df14:	cmp	r0, #0
    df16:	beq.w	d794 <_strtod_l+0x35c>
    df1a:	movs	r3, #34	; 0x22
    df1c:	str.w	r3, [fp]
    df20:	mov.w	r8, #0
    df24:	mov.w	r9, #0
    df28:	b.w	d568 <_strtod_l+0x130>
    df2c:	ldr	r1, [sp, #108]	; 0x6c
    df2e:	adds	r4, #1
    df30:	cmp	r0, #8
    df32:	ble.w	e052 <_strtod_l+0xc1a>
    df36:	cmp	r4, #16
    df38:	itt	le
    df3a:	addle.w	r8, r8, r8, lsl #2
    df3e:	addle.w	r8, r2, r8, lsl #1
    df42:	movs	r0, #0
    df44:	adds	r3, r1, #1
    df46:	str	r3, [sp, #108]	; 0x6c
    df48:	ldrb	r3, [r1, #1]
    df4a:	b.w	d58c <_strtod_l+0x154>
    df4e:	movw	r2, #19999	; 0x4e1f
    df52:	b.w	d73e <_strtod_l+0x306>
    df56:	ldr	r3, [sp, #20]
    df58:	add.w	r4, r3, #55574528	; 0x3500000
    df5c:	str	r4, [sp, #20]
    df5e:	b.n	d9e2 <_strtod_l+0x5aa>
    df60:	ldr	r6, [sp, #44]	; 0x2c
    df62:	rsb	r3, r4, #37	; 0x25
    df66:	cmp	r6, r3
    df68:	bgt.w	d75c <_strtod_l+0x324>
    df6c:	ldr	r5, [pc, #284]	; (e08c <_strtod_l+0xc54>)
    df6e:	rsb	r4, r4, #15
    df72:	add.w	r1, r5, r4, lsl #3
    df76:	subs	r4, r6, r4
    df78:	ldrd	r2, r3, [sp, #16]
    df7c:	ldrd	r0, r1, [r1]
    df80:	add.w	r5, r5, r4, lsl #3
    df84:	bl	b7cc <__aeabi_dmul>
    df88:	ldrd	r2, r3, [r5]
    df8c:	bl	b7cc <__aeabi_dmul>
    df90:	mov	r8, r0
    df92:	mov	r9, r1
    df94:	b.w	d568 <_strtod_l+0x130>
    df98:	ldr	r2, [sp, #112]	; 0x70
    df9a:	cbz	r2, dfac <_strtod_l+0xb74>
    df9c:	movs	r1, #53	; 0x35
    df9e:	add	r0, sp, #120	; 0x78
    dfa0:	bl	12e40 <__copybits>
    dfa4:	mov	r0, fp
    dfa6:	ldr	r1, [sp, #112]	; 0x70
    dfa8:	bl	1264c <_Bfree>
    dfac:	cmp	r6, #6
    dfae:	bhi.n	dfc8 <_strtod_l+0xb90>
    dfb0:	tbb	[pc, r6]
    dfb4:	.word	0x1318211d
    dfb8:	.short	0x2104
    dfba:	.byte	0x1d
    dfbb:	.byte	0x00
    dfbc:	mvn.w	r3, #2147483648	; 0x80000000
    dfc0:	str	r3, [sp, #20]
    dfc2:	mov.w	r3, #4294967295
    dfc6:	str	r3, [sp, #16]
    dfc8:	lsls	r1, r5, #28
    dfca:	bpl.w	d6a8 <_strtod_l+0x270>
    dfce:	ldr	r3, [sp, #20]
    dfd0:	orr.w	r3, r3, #2147483648	; 0x80000000
    dfd4:	str	r3, [sp, #20]
    dfd6:	b.w	d6a8 <_strtod_l+0x270>
    dfda:	ldr	r3, [pc, #172]	; (e088 <_strtod_l+0xc50>)
    dfdc:	str	r3, [sp, #20]
    dfde:	movs	r3, #0
    dfe0:	str	r3, [sp, #16]
    dfe2:	b.n	dfc8 <_strtod_l+0xb90>
    dfe4:	ldr	r3, [sp, #120]	; 0x78
    dfe6:	str	r3, [sp, #16]
    dfe8:	ldr	r3, [sp, #124]	; 0x7c
    dfea:	str	r3, [sp, #20]
    dfec:	b.n	dfc8 <_strtod_l+0xb90>
    dfee:	movs	r3, #0
    dff0:	str	r3, [sp, #20]
    dff2:	str	r3, [sp, #16]
    dff4:	b.n	dfc8 <_strtod_l+0xb90>
    dff6:	ldr	r2, [sp, #116]	; 0x74
    dff8:	ldr	r3, [sp, #124]	; 0x7c
    dffa:	ldr	r1, [sp, #120]	; 0x78
    dffc:	str	r1, [sp, #16]
    dffe:	addw	r2, r2, #1075	; 0x433
    e002:	bic.w	r3, r3, #1048576	; 0x100000
    e006:	orr.w	r3, r3, r2, lsl #20
    e00a:	str	r3, [sp, #20]
    e00c:	b.n	dfc8 <_strtod_l+0xb90>
    e00e:	vldr	d7, [sp, #56]	; 0x38
    e012:	vstr	d7, [sp, #80]	; 0x50
    e016:	b.n	d9b4 <_strtod_l+0x57c>
    e018:	vldr	d7, [pc, #92]	; e078 <_strtod_l+0xc40>
    e01c:	vstr	d7, [sp, #56]	; 0x38
    e020:	b.n	d9a0 <_strtod_l+0x568>
    e022:	ldrd	r1, r2, [sp, #16]
    e026:	mov	r8, r2
    e028:	cmp	r2, #0
    e02a:	bne.w	dc46 <_strtod_l+0x80e>
    e02e:	movs	r3, #34	; 0x22
    e030:	str.w	r3, [fp]
    e034:	ldr	r0, [sp, #112]	; 0x70
    e036:	mov.w	r8, #0
    e03a:	mov.w	r9, #0
    e03e:	b.n	dc9c <_strtod_l+0x864>
    e040:	ldr	r2, [sp, #108]	; 0x6c
    e042:	str	r2, [sp, #32]
    e044:	movs	r5, #0
    e046:	subs	r3, #48	; 0x30
    e048:	adds	r7, r0, #1
    e04a:	mov	r1, r2
    e04c:	mov	sl, r5
    e04e:	mov	r8, r5
    e050:	movs	r4, #1
    e052:	add.w	r5, r5, r5, lsl #2
    e056:	add.w	r5, r3, r5, lsl #1
    e05a:	movs	r0, #0
    e05c:	b.n	df44 <_strtod_l+0xb0c>
    e05e:	nop
    e060:	.word	0x94a03595
    e064:	.word	0x3fcfffff
    e068:	.word	0x94a03595
    e06c:	.word	0x3fdfffff
    e070:	.word	0x35afe535
    e074:	.word	0x3fe00000
    e078:	.word	0x00000000
    e07c:	.word	0x3ff00000
    e080:	.word	0x7c9fffff
    e084:	.word	0x7fefffff
    e088:	.word	0x7ff00000
    e08c:	.word	0x00014488
    e090:	.word	0x000141b8
    e094:	ldr	r1, [sp, #44]	; 0x2c
    e096:	cmn.w	r1, #22
    e09a:	blt.w	d75c <_strtod_l+0x324>
    e09e:	ldr	r2, [pc, #600]	; (e2f8 <_strtod_l+0xec0>)
    e0a0:	sub.w	r2, r2, r1, lsl #3
    e0a4:	ldrd	r2, r3, [r2]
    e0a8:	ldrd	r0, r1, [sp, #16]
    e0ac:	bl	ba20 <__aeabi_ddiv>
    e0b0:	mov	r8, r0
    e0b2:	mov	r9, r1
    e0b4:	b.w	d568 <_strtod_l+0x130>
    e0b8:	ldr	r3, [sp, #52]	; 0x34
    e0ba:	ldrd	r8, r9, [sp, #32]
    e0be:	cmp	r3, #0
    e0c0:	beq.w	e1d4 <_strtod_l+0xd9c>
    e0c4:	ldrd	r4, r5, [sp, #16]
    e0c8:	ldr	r3, [pc, #560]	; (e2fc <_strtod_l+0xec4>)
    e0ca:	ubfx	r1, r5, #0, #20
    e0ce:	cmp	r1, r3
    e0d0:	mov	r2, r5
    e0d2:	beq.w	e22a <_strtod_l+0xdf2>
    e0d6:	ldr	r3, [sp, #76]	; 0x4c
    e0d8:	cmp	r3, #0
    e0da:	beq.w	e1ec <_strtod_l+0xdb4>
    e0de:	ldr	r2, [sp, #20]
    e0e0:	tst	r3, r2
    e0e2:	beq.n	e106 <_strtod_l+0xcce>
    e0e4:	ldr	r3, [sp, #52]	; 0x34
    e0e6:	ldr	r2, [sp, #40]	; 0x28
    e0e8:	ldrd	r0, r1, [sp, #16]
    e0ec:	cmp	r3, #0
    e0ee:	beq.w	e1fc <_strtod_l+0xdc4>
    e0f2:	bl	d3fc <sulp>
    e0f6:	mov	r2, r0
    e0f8:	mov	r3, r1
    e0fa:	mov	r0, r8
    e0fc:	mov	r1, r9
    e0fe:	bl	b468 <__adddf3>
    e102:	mov	r8, r0
    e104:	mov	r9, r1
    e106:	ldr	r3, [sp, #40]	; 0x28
    e108:	cbz	r3, e13a <_strtod_l+0xd02>
    e10a:	ldr	r3, [pc, #500]	; (e300 <_strtod_l+0xec8>)
    e10c:	str	r3, [sp, #92]	; 0x5c
    e10e:	movs	r3, #0
    e110:	str	r3, [sp, #88]	; 0x58
    e112:	ldrd	r2, r3, [sp, #88]	; 0x58
    e116:	mov	r0, r8
    e118:	mov	r1, r9
    e11a:	bl	b7cc <__aeabi_dmul>
    e11e:	mov	r3, r0
    e120:	mov	r4, r1
    e122:	mov	r8, r0
    e124:	mov	r9, r1
    e126:	strd	r3, r4, [sp, #16]
    e12a:	cbnz	r1, e13a <_strtod_l+0xd02>
    e12c:	ldr	r3, [sp, #16]
    e12e:	cbnz	r3, e13a <_strtod_l+0xd02>
    e130:	movs	r3, #34	; 0x22
    e132:	ldr	r0, [sp, #112]	; 0x70
    e134:	str.w	r3, [fp]
    e138:	b.n	dc9c <_strtod_l+0x864>
    e13a:	ldr	r0, [sp, #112]	; 0x70
    e13c:	b.n	dc9c <_strtod_l+0x864>
    e13e:	ldr	r3, [sp, #52]	; 0x34
    e140:	ldrd	r8, r9, [sp, #32]
    e144:	cmp	r3, #0
    e146:	bne.n	e106 <_strtod_l+0xcce>
    e148:	ldrd	r1, r2, [sp, #16]
    e14c:	cmp	r1, #0
    e14e:	bne.n	e106 <_strtod_l+0xcce>
    e150:	ubfx	r3, r2, #0, #20
    e154:	mov	r4, r2
    e156:	cmp	r3, #0
    e158:	bne.n	e106 <_strtod_l+0xcce>
    e15a:	bic.w	r3, r2, #2147483648	; 0x80000000
    e15e:	lsrs	r3, r3, #20
    e160:	lsls	r3, r3, #20
    e162:	cmp.w	r3, #112197632	; 0x6b00000
    e166:	bls.n	e106 <_strtod_l+0xcce>
    e168:	ldr	r3, [r7, #20]
    e16a:	cbnz	r3, e172 <_strtod_l+0xd3a>
    e16c:	ldr	r3, [r7, #16]
    e16e:	cmp	r3, #1
    e170:	ble.n	e106 <_strtod_l+0xcce>
    e172:	mov	r1, r7
    e174:	movs	r2, #1
    e176:	mov	r0, fp
    e178:	bl	129f8 <__lshift>
    e17c:	mov	r1, sl
    e17e:	mov	r7, r0
    e180:	bl	12aa8 <__mcmp>
    e184:	cmp	r0, #0
    e186:	ble.n	e106 <_strtod_l+0xcce>
    e188:	ldr	r3, [sp, #40]	; 0x28
    e18a:	cmp	r3, #0
    e18c:	bne.w	e294 <_strtod_l+0xe5c>
    e190:	ldr	r3, [pc, #368]	; (e304 <_strtod_l+0xecc>)
    e192:	ands	r3, r4
    e194:	sub.w	r3, r3, #1048576	; 0x100000
    e198:	mvn.w	r3, r3, lsr #20
    e19c:	mvn.w	r3, r3, lsl #20
    e1a0:	str	r3, [sp, #20]
    e1a2:	mov.w	r3, #4294967295
    e1a6:	str	r3, [sp, #16]
    e1a8:	ldrd	r8, r9, [sp, #16]
    e1ac:	b.n	e106 <_strtod_l+0xcce>
    e1ae:	ldr	r3, [sp, #88]	; 0x58
    e1b0:	adds	r3, #1
    e1b2:	bne.w	ddea <_strtod_l+0x9b2>
    e1b6:	b.n	dc88 <_strtod_l+0x850>
    e1b8:	add.w	r3, r1, #55574528	; 0x3500000
    e1bc:	str	r3, [sp, #20]
    e1be:	b.w	d790 <_strtod_l+0x358>
    e1c2:	vldr	d7, [pc, #292]	; e2e8 <_strtod_l+0xeb0>
    e1c6:	vstr	d7, [sp, #96]	; 0x60
    e1ca:	vldr	d7, [pc, #292]	; e2f0 <_strtod_l+0xeb8>
    e1ce:	vstr	d7, [sp, #56]	; 0x38
    e1d2:	b.n	dae2 <_strtod_l+0x6aa>
    e1d4:	ldrd	r1, r2, [sp, #16]
    e1d8:	ubfx	r3, r2, #0, #20
    e1dc:	mov	r4, r2
    e1de:	cmp	r3, #0
    e1e0:	bne.w	e0d6 <_strtod_l+0xc9e>
    e1e4:	cmp	r1, #0
    e1e6:	bne.w	e0d6 <_strtod_l+0xc9e>
    e1ea:	b.n	e188 <_strtod_l+0xd50>
    e1ec:	ldr	r3, [sp, #56]	; 0x38
    e1ee:	ldr	r2, [sp, #16]
    e1f0:	tst	r3, r2
    e1f2:	beq.n	e106 <_strtod_l+0xcce>
    e1f4:	b.n	e0e4 <_strtod_l+0xcac>
    e1f6:	mov.w	r8, #0
    e1fa:	b.n	dbf4 <_strtod_l+0x7bc>
    e1fc:	bl	d3fc <sulp>
    e200:	mov	r2, r0
    e202:	mov	r3, r1
    e204:	mov	r0, r8
    e206:	mov	r1, r9
    e208:	bl	b464 <__aeabi_dsub>
    e20c:	movs	r2, #0
    e20e:	movs	r3, #0
    e210:	mov	r8, r0
    e212:	mov	r9, r1
    e214:	bl	bc9c <__aeabi_dcmpeq>
    e218:	cmp	r0, #0
    e21a:	bne.w	e02e <_strtod_l+0xbf6>
    e21e:	b.n	e106 <_strtod_l+0xcce>
    e220:	cmp	r6, #0
    e222:	str	r3, [sp, #40]	; 0x28
    e224:	bgt.w	deb8 <_strtod_l+0xa80>
    e228:	b.n	df08 <_strtod_l+0xad0>
    e22a:	ldr	r3, [sp, #40]	; 0x28
    e22c:	ldr	r1, [sp, #16]
    e22e:	cbz	r3, e26a <_strtod_l+0xe32>
    e230:	ldr	r3, [pc, #208]	; (e304 <_strtod_l+0xecc>)
    e232:	ands	r3, r5
    e234:	cmp.w	r3, #111149056	; 0x6a00000
    e238:	bhi.n	e26a <_strtod_l+0xe32>
    e23a:	lsrs	r3, r3, #20
    e23c:	rsb	r3, r3, #107	; 0x6b
    e240:	mov.w	r0, #4294967295
    e244:	lsl.w	r3, r0, r3
    e248:	cmp	r3, r1
    e24a:	bne.w	e0d6 <_strtod_l+0xc9e>
    e24e:	ldr	r1, [pc, #184]	; (e308 <_strtod_l+0xed0>)
    e250:	cmp	r2, r1
    e252:	beq.w	dc82 <_strtod_l+0x84a>
    e256:	ldr	r3, [pc, #172]	; (e304 <_strtod_l+0xecc>)
    e258:	ands	r3, r2
    e25a:	add.w	r3, r3, #1048576	; 0x100000
    e25e:	str	r3, [sp, #20]
    e260:	movs	r3, #0
    e262:	str	r3, [sp, #16]
    e264:	ldrd	r8, r9, [sp, #16]
    e268:	b.n	e106 <_strtod_l+0xcce>
    e26a:	mov.w	r3, #4294967295
    e26e:	b.n	e248 <_strtod_l+0xe10>
    e270:	add	r0, sp, #108	; 0x6c
    e272:	add	r2, sp, #120	; 0x78
    e274:	ldr	r1, [pc, #148]	; (e30c <_strtod_l+0xed4>)
    e276:	bl	12348 <__hexnan>
    e27a:	cmp	r0, #5
    e27c:	bne.w	dc6c <_strtod_l+0x834>
    e280:	ldr	r3, [sp, #124]	; 0x7c
    e282:	orr.w	r3, r3, #2139095040	; 0x7f800000
    e286:	orr.w	r3, r3, #7340032	; 0x700000
    e28a:	str	r3, [sp, #20]
    e28c:	ldr	r3, [sp, #120]	; 0x78
    e28e:	str	r3, [sp, #16]
    e290:	b.w	d6a8 <_strtod_l+0x270>
    e294:	ldr	r3, [pc, #108]	; (e304 <_strtod_l+0xecc>)
    e296:	ands	r3, r4
    e298:	cmp.w	r3, #112197632	; 0x6b00000
    e29c:	bgt.w	e194 <_strtod_l+0xd5c>
    e2a0:	cmp.w	r3, #57671680	; 0x3700000
    e2a4:	bgt.w	e10a <_strtod_l+0xcd2>
    e2a8:	b.n	e02e <_strtod_l+0xbf6>
    e2aa:	mov.w	r2, #4294967295
    e2ae:	lsl.w	r3, r2, r3
    e2b2:	ldr	r2, [sp, #16]
    e2b4:	ands	r2, r3
    e2b6:	str	r2, [sp, #16]
    e2b8:	b.n	df08 <_strtod_l+0xad0>
    e2ba:	strd	r0, r1, [sp, #16]
    e2be:	b.n	dbf4 <_strtod_l+0x7bc>
    e2c0:	strd	r0, r1, [sp, #16]
    e2c4:	b.n	dedc <_strtod_l+0xaa4>
    e2c6:	subs	r3, #32
    e2c8:	mov.w	r2, #4294967295
    e2cc:	lsl.w	r3, r2, r3
    e2d0:	ands	r3, r1
    e2d2:	str	r3, [sp, #20]
    e2d4:	b.n	df08 <_strtod_l+0xad0>
    e2d6:	mov	r0, r4
    e2d8:	ldr	r1, [sp, #108]	; 0x6c
    e2da:	adds	r4, #1
    e2dc:	b.n	df30 <_strtod_l+0xaf8>
    e2de:	mov	r0, r1
    e2e0:	ldr	r1, [sp, #108]	; 0x6c
    e2e2:	b.n	df44 <_strtod_l+0xb0c>
    e2e4:	nop.w
    e2e8:	.word	0x00000000
    e2ec:	.word	0xbfe00000
    e2f0:	.word	0x00000000
    e2f4:	.word	0x3fe00000
    e2f8:	.word	0x00014488
    e2fc:	.word	0x000fffff
    e300:	.word	0x39500000
    e304:	.word	0x7ff00000
    e308:	.word	0x7fefffff
    e30c:	.word	0x000141a4

0000e310 <_strtod_r>:
    e310:	ldr	r3, [pc, #20]	; (e328 <_strtod_r+0x18>)
    e312:	ldr	r3, [r3, #0]
    e314:	push	{r4}
    e316:	ldr	r3, [r3, #52]	; 0x34
    e318:	ldr	r4, [pc, #16]	; (e32c <_strtod_r+0x1c>)
    e31a:	cmp	r3, #0
    e31c:	it	eq
    e31e:	moveq	r3, r4
    e320:	ldr.w	r4, [sp], #4
    e324:	b.w	d438 <_strtod_l>
    e328:	.word	0x1fff0d78
    e32c:	.word	0x1fff0d7c

0000e330 <_strtol_l.isra.0>:
    e330:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e334:	ldr.w	r9, [sp, #40]	; 0x28
    e338:	mov	r7, r1
    e33a:	mov	r8, r0
    e33c:	mov	r6, r2
    e33e:	mov	r5, r3
    e340:	mov	fp, r1
    e342:	b.n	e346 <_strtol_l.isra.0+0x16>
    e344:	mov	fp, r4
    e346:	mov	r4, fp
    e348:	mov	r0, r9
    e34a:	ldrb.w	sl, [r4], #1
    e34e:	bl	c548 <__locale_ctype_ptr_l>
    e352:	add	r0, sl
    e354:	ldrb	r1, [r0, #1]
    e356:	and.w	r1, r1, #8
    e35a:	and.w	ip, r1, #255	; 0xff
    e35e:	cmp	r1, #0
    e360:	bne.n	e344 <_strtol_l.isra.0+0x14>
    e362:	mov	r2, sl
    e364:	cmp	r2, #45	; 0x2d
    e366:	beq.n	e42c <_strtol_l.isra.0+0xfc>
    e368:	cmp	r2, #43	; 0x2b
    e36a:	itt	eq
    e36c:	ldrbeq.w	r2, [fp, #1]
    e370:	addeq.w	r4, fp, #2
    e374:	cmp	r5, #0
    e376:	beq.n	e400 <_strtol_l.isra.0+0xd0>
    e378:	cmp	r5, #16
    e37a:	beq.n	e448 <_strtol_l.isra.0+0x118>
    e37c:	mov	r9, r5
    e37e:	cmp.w	ip, #0
    e382:	ite	eq
    e384:	mvneq.w	sl, #2147483648	; 0x80000000
    e388:	movne.w	sl, #2147483648	; 0x80000000
    e38c:	movs	r1, #0
    e38e:	udiv	lr, sl, r9
    e392:	mov	r0, r1
    e394:	mls	sl, r9, lr, sl
    e398:	b.n	e3a6 <_strtol_l.isra.0+0x76>
    e39a:	beq.n	e3f0 <_strtol_l.isra.0+0xc0>
    e39c:	mla	r0, r9, r0, r3
    e3a0:	movs	r1, #1
    e3a2:	ldrb.w	r2, [r4], #1
    e3a6:	sub.w	r3, r2, #48	; 0x30
    e3aa:	cmp	r3, #9
    e3ac:	bls.n	e3ba <_strtol_l.isra.0+0x8a>
    e3ae:	sub.w	r3, r2, #65	; 0x41
    e3b2:	cmp	r3, #25
    e3b4:	bhi.n	e3cc <_strtol_l.isra.0+0x9c>
    e3b6:	sub.w	r3, r2, #55	; 0x37
    e3ba:	cmp	r5, r3
    e3bc:	ble.n	e3dc <_strtol_l.isra.0+0xac>
    e3be:	adds	r2, r1, #1
    e3c0:	beq.n	e3a2 <_strtol_l.isra.0+0x72>
    e3c2:	cmp	lr, r0
    e3c4:	bcs.n	e39a <_strtol_l.isra.0+0x6a>
    e3c6:	mov.w	r1, #4294967295
    e3ca:	b.n	e3a2 <_strtol_l.isra.0+0x72>
    e3cc:	sub.w	r3, r2, #97	; 0x61
    e3d0:	cmp	r3, #25
    e3d2:	bhi.n	e3dc <_strtol_l.isra.0+0xac>
    e3d4:	sub.w	r3, r2, #87	; 0x57
    e3d8:	cmp	r5, r3
    e3da:	bgt.n	e3be <_strtol_l.isra.0+0x8e>
    e3dc:	adds	r3, r1, #1
    e3de:	beq.n	e40c <_strtol_l.isra.0+0xdc>
    e3e0:	cmp.w	ip, #0
    e3e4:	bne.n	e408 <_strtol_l.isra.0+0xd8>
    e3e6:	cbz	r6, e3fc <_strtol_l.isra.0+0xcc>
    e3e8:	cbnz	r1, e424 <_strtol_l.isra.0+0xf4>
    e3ea:	str	r7, [r6, #0]
    e3ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3f0:	cmp	sl, r3
    e3f2:	bge.n	e39c <_strtol_l.isra.0+0x6c>
    e3f4:	mov	r0, lr
    e3f6:	mov.w	r1, #4294967295
    e3fa:	b.n	e3a2 <_strtol_l.isra.0+0x72>
    e3fc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e400:	cmp	r2, #48	; 0x30
    e402:	beq.n	e43a <_strtol_l.isra.0+0x10a>
    e404:	movs	r5, #10
    e406:	b.n	e37c <_strtol_l.isra.0+0x4c>
    e408:	negs	r0, r0
    e40a:	b.n	e3e6 <_strtol_l.isra.0+0xb6>
    e40c:	cmp.w	ip, #0
    e410:	mov.w	r3, #34	; 0x22
    e414:	ite	eq
    e416:	mvneq.w	r0, #2147483648	; 0x80000000
    e41a:	movne.w	r0, #2147483648	; 0x80000000
    e41e:	str.w	r3, [r8]
    e422:	cbz	r6, e462 <_strtol_l.isra.0+0x132>
    e424:	subs	r7, r4, #1
    e426:	str	r7, [r6, #0]
    e428:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e42c:	add.w	r4, fp, #2
    e430:	ldrb.w	r2, [fp, #1]
    e434:	mov.w	ip, #1
    e438:	b.n	e374 <_strtol_l.isra.0+0x44>
    e43a:	ldrb	r3, [r4, #0]
    e43c:	and.w	r3, r3, #223	; 0xdf
    e440:	cmp	r3, #88	; 0x58
    e442:	beq.n	e456 <_strtol_l.isra.0+0x126>
    e444:	movs	r5, #8
    e446:	b.n	e37c <_strtol_l.isra.0+0x4c>
    e448:	cmp	r2, #48	; 0x30
    e44a:	bne.n	e37c <_strtol_l.isra.0+0x4c>
    e44c:	ldrb	r3, [r4, #0]
    e44e:	and.w	r3, r3, #223	; 0xdf
    e452:	cmp	r3, #88	; 0x58
    e454:	bne.n	e37c <_strtol_l.isra.0+0x4c>
    e456:	mov.w	r9, #16
    e45a:	ldrb	r2, [r4, #1]
    e45c:	mov	r5, r9
    e45e:	adds	r4, #2
    e460:	b.n	e37e <_strtol_l.isra.0+0x4e>
    e462:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e466:	nop

0000e468 <_strtol_r>:
    e468:	push	{r4, r5, lr}
    e46a:	ldr	r4, [pc, #24]	; (e484 <_strtol_r+0x1c>)
    e46c:	ldr	r5, [pc, #24]	; (e488 <_strtol_r+0x20>)
    e46e:	ldr	r4, [r4, #0]
    e470:	ldr	r4, [r4, #52]	; 0x34
    e472:	sub	sp, #12
    e474:	cmp	r4, #0
    e476:	it	eq
    e478:	moveq	r4, r5
    e47a:	str	r4, [sp, #0]
    e47c:	bl	e330 <_strtol_l.isra.0>
    e480:	add	sp, #12
    e482:	pop	{r4, r5, pc}
    e484:	.word	0x1fff0d78
    e488:	.word	0x1fff0d7c
    e48c:	.word	0xffffffff

0000e490 <_svfprintf_r>:
    e490:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e494:	sub	sp, #260	; 0x104
    e496:	mov	r4, r1
    e498:	str	r1, [sp, #20]
    e49a:	mov	r5, r2
    e49c:	str	r3, [sp, #40]	; 0x28
    e49e:	str	r0, [sp, #24]
    e4a0:	bl	124e8 <_localeconv_r>
    e4a4:	ldr	r3, [r0, #0]
    e4a6:	str	r3, [sp, #76]	; 0x4c
    e4a8:	mov	r0, r3
    e4aa:	bl	d280 <strlen>
    e4ae:	ldrh	r3, [r4, #12]
    e4b0:	str	r0, [sp, #72]	; 0x48
    e4b2:	lsls	r6, r3, #24
    e4b4:	bpl.n	e4be <_svfprintf_r+0x2e>
    e4b6:	ldr	r3, [r4, #16]
    e4b8:	cmp	r3, #0
    e4ba:	beq.w	f720 <_svfprintf_r+0x1290>
    e4be:	vldr	d7, [pc, #664]	; e758 <_svfprintf_r+0x2c8>
    e4c2:	movs	r3, #0
    e4c4:	vstr	d7, [sp, #64]	; 0x40
    e4c8:	str	r3, [sp, #56]	; 0x38
    e4ca:	str	r3, [sp, #148]	; 0x94
    e4cc:	str	r3, [sp, #144]	; 0x90
    e4ce:	str	r3, [sp, #84]	; 0x54
    e4d0:	str	r3, [sp, #28]
    e4d2:	ldr.w	sl, [pc, #656]	; e764 <_svfprintf_r+0x2d4>
    e4d6:	add	r3, sp, #192	; 0xc0
    e4d8:	str	r3, [sp, #140]	; 0x8c
    e4da:	mov	r9, r3
    e4dc:	mov	r8, r5
    e4de:	ldrb.w	r3, [r8]
    e4e2:	mov	r4, r8
    e4e4:	cbz	r3, e522 <_svfprintf_r+0x92>
    e4e6:	cmp	r3, #37	; 0x25
    e4e8:	bne.n	e4f0 <_svfprintf_r+0x60>
    e4ea:	b.n	e522 <_svfprintf_r+0x92>
    e4ec:	cmp	r3, #37	; 0x25
    e4ee:	beq.n	e4f8 <_svfprintf_r+0x68>
    e4f0:	ldrb.w	r3, [r4, #1]!
    e4f4:	cmp	r3, #0
    e4f6:	bne.n	e4ec <_svfprintf_r+0x5c>
    e4f8:	rsb	r5, r8, r4
    e4fc:	cbz	r5, e522 <_svfprintf_r+0x92>
    e4fe:	ldr	r3, [sp, #144]	; 0x90
    e500:	ldr	r2, [sp, #148]	; 0x94
    e502:	str.w	r8, [r9]
    e506:	adds	r3, #1
    e508:	add	r2, r5
    e50a:	cmp	r3, #7
    e50c:	str.w	r5, [r9, #4]
    e510:	str	r2, [sp, #148]	; 0x94
    e512:	str	r3, [sp, #144]	; 0x90
    e514:	bgt.w	e664 <_svfprintf_r+0x1d4>
    e518:	add.w	r9, r9, #8
    e51c:	ldr	r3, [sp, #28]
    e51e:	add	r3, r5
    e520:	str	r3, [sp, #28]
    e522:	ldrb	r3, [r4, #0]
    e524:	cmp	r3, #0
    e526:	beq.w	e676 <_svfprintf_r+0x1e6>
    e52a:	movs	r3, #0
    e52c:	mov	r2, r3
    e52e:	strb.w	r3, [sp, #111]	; 0x6f
    e532:	mov	r1, r3
    e534:	str	r3, [sp, #32]
    e536:	str	r3, [sp, #12]
    e538:	mov.w	fp, #4294967295
    e53c:	ldrb	r3, [r4, #1]
    e53e:	add.w	r8, r4, #1
    e542:	mov	r5, fp
    e544:	add.w	r8, r8, #1
    e548:	sub.w	r0, r3, #32
    e54c:	cmp	r0, #88	; 0x58
    e54e:	bhi.w	edba <_svfprintf_r+0x92a>
    e552:	tbh	[pc, r0, lsl #1]
    e556:	.short	0x03a0
    e558:	.word	0x04320432
    e55c:	.word	0x043203a8
    e560:	.word	0x04320432
    e564:	.word	0x04320432
    e568:	.word	0x03af0432
    e56c:	.word	0x043203bd
    e570:	.word	0x00e2005d
    e574:	.word	0x01090432
    e578:	.word	0x01100110
    e57c:	.word	0x01100110
    e580:	.word	0x01100110
    e584:	.word	0x01100110
    e588:	.word	0x04320110
    e58c:	.word	0x04320432
    e590:	.word	0x04320432
    e594:	.word	0x04320432
    e598:	.word	0x04320432
    e59c:	.word	0x01200432
    e5a0:	.word	0x04320286
    e5a4:	.word	0x04320286
    e5a8:	.word	0x04320432
    e5ac:	.word	0x02d40432
    e5b0:	.word	0x04320432
    e5b4:	.word	0x043202e5
    e5b8:	.word	0x04320432
    e5bc:	.word	0x04320432
    e5c0:	.word	0x0432030f
    e5c4:	.word	0x033d0432
    e5c8:	.word	0x04320432
    e5cc:	.word	0x04320432
    e5d0:	.word	0x04320432
    e5d4:	.word	0x04320432
    e5d8:	.word	0x04320432
    e5dc:	.word	0x0391037e
    e5e0:	.word	0x02860286
    e5e4:	.word	0x03990286
    e5e8:	.word	0x04320391
    e5ec:	.word	0x04070432
    e5f0:	.word	0x04120432
    e5f4:	.word	0x006400a3
    e5f8:	.word	0x043203c2
    e5fc:	.word	0x043203c9
    e600:	.word	0x043203ea
    e604:	.word	0x03f20432
    e608:	ldr	r0, [sp, #32]
    e60a:	str	r3, [sp, #40]	; 0x28
    e60c:	negs	r0, r0
    e60e:	str	r0, [sp, #32]
    e610:	ldr	r3, [sp, #12]
    e612:	orr.w	r3, r3, #4
    e616:	str	r3, [sp, #12]
    e618:	ldrb.w	r3, [r8]
    e61c:	b.n	e544 <_svfprintf_r+0xb4>
    e61e:	ldr	r0, [sp, #40]	; 0x28
    e620:	mov	fp, r5
    e622:	movs	r1, #0
    e624:	ldr	r4, [r0, #0]
    e626:	strb.w	r1, [sp, #111]	; 0x6f
    e62a:	adds	r7, r0, #4
    e62c:	ldr	r0, [sp, #12]
    e62e:	movs	r3, #48	; 0x30
    e630:	movs	r2, #120	; 0x78
    e632:	cmp	fp, r1
    e634:	strb.w	r3, [sp, #112]	; 0x70
    e638:	mov.w	r5, #0
    e63c:	strb.w	r2, [sp, #113]	; 0x71
    e640:	orr.w	r3, r0, #2
    e644:	blt.w	edf4 <_svfprintf_r+0x964>
    e648:	bic.w	r3, r0, #128	; 0x80
    e64c:	orr.w	r3, r3, #2
    e650:	str	r3, [sp, #12]
    e652:	orrs.w	r3, r4, r5
    e656:	str	r7, [sp, #40]	; 0x28
    e658:	beq.w	eda0 <_svfprintf_r+0x910>
    e65c:	mov	r7, r1
    e65e:	str	r2, [sp, #52]	; 0x34
    e660:	ldr	r0, [pc, #252]	; (e760 <_svfprintf_r+0x2d0>)
    e662:	b.n	ec32 <_svfprintf_r+0x7a2>
    e664:	add	r2, sp, #140	; 0x8c
    e666:	ldr	r1, [sp, #20]
    e668:	ldr	r0, [sp, #24]
    e66a:	bl	134d4 <__ssprint_r>
    e66e:	cbnz	r0, e684 <_svfprintf_r+0x1f4>
    e670:	add.w	r9, sp, #192	; 0xc0
    e674:	b.n	e51c <_svfprintf_r+0x8c>
    e676:	ldr	r3, [sp, #148]	; 0x94
    e678:	cbz	r3, e684 <_svfprintf_r+0x1f4>
    e67a:	ldr	r0, [sp, #24]
    e67c:	ldr	r1, [sp, #20]
    e67e:	add	r2, sp, #140	; 0x8c
    e680:	bl	134d4 <__ssprint_r>
    e684:	ldr	r3, [sp, #20]
    e686:	ldrh	r3, [r3, #12]
    e688:	tst.w	r3, #64	; 0x40
    e68c:	ldr	r3, [sp, #28]
    e68e:	it	ne
    e690:	movne.w	r3, #4294967295
    e694:	mov	r0, r3
    e696:	add	sp, #260	; 0x104
    e698:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e69c:	str	r3, [sp, #52]	; 0x34
    e69e:	mov	fp, r5
    e6a0:	cmp	r2, #0
    e6a2:	bne.w	fb0c <_svfprintf_r+0x167c>
    e6a6:	ldr	r2, [sp, #12]
    e6a8:	ands.w	r3, r2, #32
    e6ac:	beq.w	eb3c <_svfprintf_r+0x6ac>
    e6b0:	ldr	r7, [sp, #40]	; 0x28
    e6b2:	adds	r7, #7
    e6b4:	bic.w	r3, r7, #7
    e6b8:	movs	r7, #0
    e6ba:	add.w	r1, r3, #8
    e6be:	cmp	fp, r7
    e6c0:	str	r1, [sp, #40]	; 0x28
    e6c2:	ldrd	r4, r5, [r3]
    e6c6:	strb.w	r7, [sp, #111]	; 0x6f
    e6ca:	blt.w	f592 <_svfprintf_r+0x1102>
    e6ce:	bic.w	r3, r2, #128	; 0x80
    e6d2:	str	r3, [sp, #12]
    e6d4:	orrs.w	r3, r4, r5
    e6d8:	beq.w	ede4 <_svfprintf_r+0x954>
    e6dc:	add	r6, sp, #192	; 0xc0
    e6de:	lsrs	r2, r4, #3
    e6e0:	orr.w	r2, r2, r5, lsl #29
    e6e4:	lsrs	r1, r5, #3
    e6e6:	and.w	r3, r4, #7
    e6ea:	mov	r5, r1
    e6ec:	mov	r4, r2
    e6ee:	adds	r3, #48	; 0x30
    e6f0:	orrs.w	r2, r4, r5
    e6f4:	strb.w	r3, [r6, #-1]!
    e6f8:	bne.n	e6de <_svfprintf_r+0x24e>
    e6fa:	ldr	r2, [sp, #12]
    e6fc:	lsls	r1, r2, #31
    e6fe:	bpl.w	e820 <_svfprintf_r+0x390>
    e702:	cmp	r3, #48	; 0x30
    e704:	beq.w	e820 <_svfprintf_r+0x390>
    e708:	movs	r2, #48	; 0x30
    e70a:	subs	r3, r6, #1
    e70c:	strb.w	r2, [r6, #-1]
    e710:	add	r2, sp, #192	; 0xc0
    e712:	subs	r2, r2, r3
    e714:	str	r2, [sp, #36]	; 0x24
    e716:	mov	r6, r3
    e718:	b.n	e826 <_svfprintf_r+0x396>
    e71a:	ldrb.w	r3, [r8]
    e71e:	cmp	r3, #42	; 0x2a
    e720:	add.w	r4, r8, #1
    e724:	beq.w	faf0 <_svfprintf_r+0x1660>
    e728:	sub.w	r0, r3, #48	; 0x30
    e72c:	cmp	r0, #9
    e72e:	it	ls
    e730:	movls	r5, #0
    e732:	bhi.w	fa42 <_svfprintf_r+0x15b2>
    e736:	ldrb.w	r3, [r4], #1
    e73a:	add.w	r5, r5, r5, lsl #2
    e73e:	add.w	r5, r0, r5, lsl #1
    e742:	sub.w	r0, r3, #48	; 0x30
    e746:	cmp	r0, #9
    e748:	bls.n	e736 <_svfprintf_r+0x2a6>
    e74a:	orr.w	r5, r5, r5, asr #31
    e74e:	mov	r8, r4
    e750:	b.n	e548 <_svfprintf_r+0xb8>
    e752:	nop
    e754:	nop.w
	...
    e760:	.word	0x00014214
    e764:	.word	0x000141e0
    e768:	ldr	r3, [sp, #12]
    e76a:	orr.w	r3, r3, #128	; 0x80
    e76e:	str	r3, [sp, #12]
    e770:	ldrb.w	r3, [r8]
    e774:	b.n	e544 <_svfprintf_r+0xb4>
    e776:	sub.w	r0, r3, #48	; 0x30
    e77a:	movs	r3, #0
    e77c:	mov	r4, r3
    e77e:	ldrb.w	r3, [r8], #1
    e782:	add.w	r4, r4, r4, lsl #2
    e786:	add.w	r4, r0, r4, lsl #1
    e78a:	sub.w	r0, r3, #48	; 0x30
    e78e:	cmp	r0, #9
    e790:	bls.n	e77e <_svfprintf_r+0x2ee>
    e792:	str	r4, [sp, #32]
    e794:	b.n	e548 <_svfprintf_r+0xb8>
    e796:	str	r3, [sp, #52]	; 0x34
    e798:	mov	fp, r5
    e79a:	cmp	r2, #0
    e79c:	bne.w	fb28 <_svfprintf_r+0x1698>
    e7a0:	ldr	r3, [sp, #12]
    e7a2:	orr.w	r3, r3, #16
    e7a6:	str	r3, [sp, #12]
    e7a8:	ldr	r3, [sp, #12]
    e7aa:	lsls	r4, r3, #26
    e7ac:	bpl.w	f21e <_svfprintf_r+0xd8e>
    e7b0:	ldr	r7, [sp, #40]	; 0x28
    e7b2:	adds	r7, #7
    e7b4:	bic.w	r7, r7, #7
    e7b8:	ldrd	r2, r3, [r7]
    e7bc:	add.w	r1, r7, #8
    e7c0:	str	r1, [sp, #40]	; 0x28
    e7c2:	mov	r4, r2
    e7c4:	mov	r5, r3
    e7c6:	cmp	r2, #0
    e7c8:	sbcs.w	r3, r3, #0
    e7cc:	blt.w	f294 <_svfprintf_r+0xe04>
    e7d0:	cmp.w	fp, #0
    e7d4:	ldrb.w	r7, [sp, #111]	; 0x6f
    e7d8:	blt.w	f25a <_svfprintf_r+0xdca>
    e7dc:	ldr	r3, [sp, #12]
    e7de:	bic.w	r3, r3, #128	; 0x80
    e7e2:	str	r3, [sp, #12]
    e7e4:	orrs.w	r3, r4, r5
    e7e8:	beq.w	ebbc <_svfprintf_r+0x72c>
    e7ec:	cmp	r5, #0
    e7ee:	it	eq
    e7f0:	cmpeq	r4, #10
    e7f2:	bcc.w	ebc6 <_svfprintf_r+0x736>
    e7f6:	add	r6, sp, #192	; 0xc0
    e7f8:	mov	r0, r4
    e7fa:	mov	r1, r5
    e7fc:	movs	r2, #10
    e7fe:	movs	r3, #0
    e800:	bl	c118 <__aeabi_uldivmod>
    e804:	adds	r2, #48	; 0x30
    e806:	strb.w	r2, [r6, #-1]!
    e80a:	mov	r0, r4
    e80c:	mov	r1, r5
    e80e:	movs	r3, #0
    e810:	movs	r2, #10
    e812:	bl	c118 <__aeabi_uldivmod>
    e816:	mov	r4, r0
    e818:	mov	r5, r1
    e81a:	orrs.w	r3, r4, r5
    e81e:	bne.n	e7f8 <_svfprintf_r+0x368>
    e820:	add	r3, sp, #192	; 0xc0
    e822:	subs	r3, r3, r6
    e824:	str	r3, [sp, #36]	; 0x24
    e826:	ldr	r3, [sp, #36]	; 0x24
    e828:	cmp	r3, fp
    e82a:	it	lt
    e82c:	movlt	r3, fp
    e82e:	str	r3, [sp, #16]
    e830:	movs	r3, #0
    e832:	str	r3, [sp, #60]	; 0x3c
    e834:	cbz	r7, e83c <_svfprintf_r+0x3ac>
    e836:	ldr	r3, [sp, #16]
    e838:	adds	r3, #1
    e83a:	str	r3, [sp, #16]
    e83c:	ldr	r3, [sp, #12]
    e83e:	ands.w	r3, r3, #2
    e842:	str	r3, [sp, #44]	; 0x2c
    e844:	beq.n	e84c <_svfprintf_r+0x3bc>
    e846:	ldr	r3, [sp, #16]
    e848:	adds	r3, #2
    e84a:	str	r3, [sp, #16]
    e84c:	ldr	r3, [sp, #12]
    e84e:	ands.w	r3, r3, #132	; 0x84
    e852:	str	r3, [sp, #48]	; 0x30
    e854:	bne.w	ee0e <_svfprintf_r+0x97e>
    e858:	ldr	r3, [sp, #32]
    e85a:	ldr	r2, [sp, #16]
    e85c:	subs	r5, r3, r2
    e85e:	cmp	r5, #0
    e860:	ble.w	ee0e <_svfprintf_r+0x97e>
    e864:	cmp	r5, #16
    e866:	ldr	r1, [sp, #148]	; 0x94
    e868:	ldr	r2, [sp, #144]	; 0x90
    e86a:	ldr	r7, [pc, #672]	; (eb0c <_svfprintf_r+0x67c>)
    e86c:	ble.n	e8be <_svfprintf_r+0x42e>
    e86e:	str	r6, [sp, #80]	; 0x50
    e870:	mov	r0, r9
    e872:	movs	r4, #16
    e874:	mov	r9, r7
    e876:	ldr	r6, [sp, #20]
    e878:	mov	r7, r5
    e87a:	ldr	r5, [sp, #24]
    e87c:	b.n	e888 <_svfprintf_r+0x3f8>
    e87e:	subs	r7, #16
    e880:	cmp	r7, #16
    e882:	add.w	r0, r0, #8
    e886:	ble.n	e8b6 <_svfprintf_r+0x426>
    e888:	adds	r2, #1
    e88a:	ldr	r3, [pc, #640]	; (eb0c <_svfprintf_r+0x67c>)
    e88c:	str	r2, [sp, #144]	; 0x90
    e88e:	adds	r1, #16
    e890:	cmp	r2, #7
    e892:	str	r1, [sp, #148]	; 0x94
    e894:	stmia.w	r0, {r3, r4}
    e898:	ble.n	e87e <_svfprintf_r+0x3ee>
    e89a:	add	r2, sp, #140	; 0x8c
    e89c:	mov	r1, r6
    e89e:	mov	r0, r5
    e8a0:	bl	134d4 <__ssprint_r>
    e8a4:	cmp	r0, #0
    e8a6:	bne.w	e684 <_svfprintf_r+0x1f4>
    e8aa:	subs	r7, #16
    e8ac:	cmp	r7, #16
    e8ae:	ldr	r1, [sp, #148]	; 0x94
    e8b0:	ldr	r2, [sp, #144]	; 0x90
    e8b2:	add	r0, sp, #192	; 0xc0
    e8b4:	bgt.n	e888 <_svfprintf_r+0x3f8>
    e8b6:	ldr	r6, [sp, #80]	; 0x50
    e8b8:	mov	r5, r7
    e8ba:	mov	r7, r9
    e8bc:	mov	r9, r0
    e8be:	adds	r2, #1
    e8c0:	adds	r4, r5, r1
    e8c2:	cmp	r2, #7
    e8c4:	str	r4, [sp, #148]	; 0x94
    e8c6:	str	r2, [sp, #144]	; 0x90
    e8c8:	str.w	r7, [r9]
    e8cc:	str.w	r5, [r9, #4]
    e8d0:	bgt.w	f12e <_svfprintf_r+0xc9e>
    e8d4:	ldrb.w	r7, [sp, #111]	; 0x6f
    e8d8:	add.w	r9, r9, #8
    e8dc:	cbz	r7, e8fc <_svfprintf_r+0x46c>
    e8de:	ldr	r3, [sp, #144]	; 0x90
    e8e0:	adds	r3, #1
    e8e2:	adds	r4, #1
    e8e4:	add.w	r1, sp, #111	; 0x6f
    e8e8:	movs	r2, #1
    e8ea:	cmp	r3, #7
    e8ec:	str	r4, [sp, #148]	; 0x94
    e8ee:	str	r3, [sp, #144]	; 0x90
    e8f0:	stmia.w	r9, {r1, r2}
    e8f4:	bgt.w	f042 <_svfprintf_r+0xbb2>
    e8f8:	add.w	r9, r9, #8
    e8fc:	ldr	r3, [sp, #44]	; 0x2c
    e8fe:	cbz	r3, e91c <_svfprintf_r+0x48c>
    e900:	ldr	r3, [sp, #144]	; 0x90
    e902:	adds	r3, #1
    e904:	adds	r4, #2
    e906:	add	r1, sp, #112	; 0x70
    e908:	movs	r2, #2
    e90a:	cmp	r3, #7
    e90c:	str	r4, [sp, #148]	; 0x94
    e90e:	str	r3, [sp, #144]	; 0x90
    e910:	stmia.w	r9, {r1, r2}
    e914:	bgt.w	f05a <_svfprintf_r+0xbca>
    e918:	add.w	r9, r9, #8
    e91c:	ldr	r3, [sp, #48]	; 0x30
    e91e:	cmp	r3, #128	; 0x80
    e920:	beq.w	eee6 <_svfprintf_r+0xa56>
    e924:	ldr	r3, [sp, #36]	; 0x24
    e926:	rsb	r7, r3, fp
    e92a:	cmp	r7, #0
    e92c:	ble.n	e996 <_svfprintf_r+0x506>
    e92e:	ldr	r2, [pc, #480]	; (eb10 <_svfprintf_r+0x680>)
    e930:	ldr	r3, [sp, #144]	; 0x90
    e932:	str	r2, [sp, #44]	; 0x2c
    e934:	cmp	r7, #16
    e936:	ble.n	e97e <_svfprintf_r+0x4ee>
    e938:	mov	r2, r4
    e93a:	mov.w	fp, #16
    e93e:	ldr	r5, [sp, #24]
    e940:	ldr	r4, [sp, #20]
    e942:	b.n	e94e <_svfprintf_r+0x4be>
    e944:	subs	r7, #16
    e946:	cmp	r7, #16
    e948:	add.w	r9, r9, #8
    e94c:	ble.n	e97c <_svfprintf_r+0x4ec>
    e94e:	adds	r3, #1
    e950:	adds	r2, #16
    e952:	cmp	r3, #7
    e954:	str	r2, [sp, #148]	; 0x94
    e956:	str	r3, [sp, #144]	; 0x90
    e958:	stmia.w	r9, {sl, fp}
    e95c:	ble.n	e944 <_svfprintf_r+0x4b4>
    e95e:	add	r2, sp, #140	; 0x8c
    e960:	mov	r1, r4
    e962:	mov	r0, r5
    e964:	bl	134d4 <__ssprint_r>
    e968:	cmp	r0, #0
    e96a:	bne.w	e684 <_svfprintf_r+0x1f4>
    e96e:	subs	r7, #16
    e970:	cmp	r7, #16
    e972:	ldr	r2, [sp, #148]	; 0x94
    e974:	ldr	r3, [sp, #144]	; 0x90
    e976:	add.w	r9, sp, #192	; 0xc0
    e97a:	bgt.n	e94e <_svfprintf_r+0x4be>
    e97c:	mov	r4, r2
    e97e:	adds	r3, #1
    e980:	ldr	r2, [sp, #44]	; 0x2c
    e982:	str	r3, [sp, #144]	; 0x90
    e984:	add	r4, r7
    e986:	cmp	r3, #7
    e988:	str	r4, [sp, #148]	; 0x94
    e98a:	stmia.w	r9, {r2, r7}
    e98e:	bgt.w	f02a <_svfprintf_r+0xb9a>
    e992:	add.w	r9, r9, #8
    e996:	ldr	r3, [sp, #12]
    e998:	lsls	r2, r3, #23
    e99a:	bmi.w	ee12 <_svfprintf_r+0x982>
    e99e:	ldr	r3, [sp, #144]	; 0x90
    e9a0:	ldr	r1, [sp, #36]	; 0x24
    e9a2:	str.w	r6, [r9]
    e9a6:	adds	r3, #1
    e9a8:	add	r4, r1
    e9aa:	cmp	r3, #7
    e9ac:	str	r4, [sp, #148]	; 0x94
    e9ae:	str.w	r1, [r9, #4]
    e9b2:	str	r3, [sp, #144]	; 0x90
    e9b4:	bgt.w	effe <_svfprintf_r+0xb6e>
    e9b8:	add.w	r9, r9, #8
    e9bc:	ldr	r3, [sp, #12]
    e9be:	lsls	r1, r3, #29
    e9c0:	bpl.n	ea42 <_svfprintf_r+0x5b2>
    e9c2:	ldr	r3, [sp, #32]
    e9c4:	ldr	r2, [sp, #16]
    e9c6:	subs	r5, r3, r2
    e9c8:	cmp	r5, #0
    e9ca:	ble.n	ea42 <_svfprintf_r+0x5b2>
    e9cc:	cmp	r5, #16
    e9ce:	ldr	r3, [sp, #144]	; 0x90
    e9d0:	ldr	r7, [pc, #312]	; (eb0c <_svfprintf_r+0x67c>)
    e9d2:	ble.n	ea1c <_svfprintf_r+0x58c>
    e9d4:	mov	r2, r4
    e9d6:	movs	r6, #16
    e9d8:	ldr.w	fp, [sp, #24]
    e9dc:	ldr	r4, [sp, #20]
    e9de:	b.n	e9ea <_svfprintf_r+0x55a>
    e9e0:	subs	r5, #16
    e9e2:	cmp	r5, #16
    e9e4:	add.w	r9, r9, #8
    e9e8:	ble.n	ea1a <_svfprintf_r+0x58a>
    e9ea:	adds	r3, #1
    e9ec:	ldr	r1, [pc, #284]	; (eb0c <_svfprintf_r+0x67c>)
    e9ee:	str	r3, [sp, #144]	; 0x90
    e9f0:	adds	r2, #16
    e9f2:	cmp	r3, #7
    e9f4:	str	r2, [sp, #148]	; 0x94
    e9f6:	stmia.w	r9, {r1, r6}
    e9fa:	ble.n	e9e0 <_svfprintf_r+0x550>
    e9fc:	add	r2, sp, #140	; 0x8c
    e9fe:	mov	r1, r4
    ea00:	mov	r0, fp
    ea02:	bl	134d4 <__ssprint_r>
    ea06:	cmp	r0, #0
    ea08:	bne.w	e684 <_svfprintf_r+0x1f4>
    ea0c:	subs	r5, #16
    ea0e:	cmp	r5, #16
    ea10:	ldr	r2, [sp, #148]	; 0x94
    ea12:	ldr	r3, [sp, #144]	; 0x90
    ea14:	add.w	r9, sp, #192	; 0xc0
    ea18:	bgt.n	e9ea <_svfprintf_r+0x55a>
    ea1a:	mov	r4, r2
    ea1c:	adds	r3, #1
    ea1e:	add	r4, r5
    ea20:	cmp	r3, #7
    ea22:	str	r4, [sp, #148]	; 0x94
    ea24:	str	r3, [sp, #144]	; 0x90
    ea26:	str.w	r7, [r9]
    ea2a:	str.w	r5, [r9, #4]
    ea2e:	ble.n	ea42 <_svfprintf_r+0x5b2>
    ea30:	add	r2, sp, #140	; 0x8c
    ea32:	ldr	r1, [sp, #20]
    ea34:	ldr	r0, [sp, #24]
    ea36:	bl	134d4 <__ssprint_r>
    ea3a:	cmp	r0, #0
    ea3c:	bne.w	e684 <_svfprintf_r+0x1f4>
    ea40:	ldr	r4, [sp, #148]	; 0x94
    ea42:	ldr	r3, [sp, #28]
    ea44:	ldr	r2, [sp, #32]
    ea46:	ldr	r1, [sp, #16]
    ea48:	cmp	r2, r1
    ea4a:	ite	ge
    ea4c:	addge	r3, r3, r2
    ea4e:	addlt	r3, r3, r1
    ea50:	str	r3, [sp, #28]
    ea52:	cmp	r4, #0
    ea54:	bne.w	f016 <_svfprintf_r+0xb86>
    ea58:	movs	r3, #0
    ea5a:	str	r3, [sp, #144]	; 0x90
    ea5c:	add.w	r9, sp, #192	; 0xc0
    ea60:	b.n	e4de <_svfprintf_r+0x4e>
    ea62:	str	r3, [sp, #52]	; 0x34
    ea64:	mov	fp, r5
    ea66:	cmp	r2, #0
    ea68:	bne.w	fb30 <_svfprintf_r+0x16a0>
    ea6c:	ldr	r3, [sp, #12]
    ea6e:	ldr	r7, [sp, #40]	; 0x28
    ea70:	lsls	r2, r3, #28
    ea72:	add.w	r7, r7, #7
    ea76:	bpl.w	f562 <_svfprintf_r+0x10d2>
    ea7a:	bic.w	r3, r7, #7
    ea7e:	vldr	d7, [r3]
    ea82:	vstr	d7, [sp, #64]	; 0x40
    ea86:	add.w	r2, r3, #8
    ea8a:	str	r2, [sp, #40]	; 0x28
    ea8c:	ldrd	r1, r2, [sp, #64]	; 0x40
    ea90:	bic.w	r3, r2, #2147483648	; 0x80000000
    ea94:	str	r1, [sp, #88]	; 0x58
    ea96:	str	r3, [sp, #92]	; 0x5c
    ea98:	ldrd	r4, r5, [sp, #88]	; 0x58
    ea9c:	mov.w	r2, #4294967295
    eaa0:	mov	r0, r4
    eaa2:	mov	r1, r5
    eaa4:	ldr	r3, [pc, #108]	; (eb14 <_svfprintf_r+0x684>)
    eaa6:	bl	bd00 <__aeabi_dcmpun>
    eaaa:	cmp	r0, #0
    eaac:	bne.w	f464 <_svfprintf_r+0xfd4>
    eab0:	mov.w	r2, #4294967295
    eab4:	ldr	r3, [pc, #92]	; (eb14 <_svfprintf_r+0x684>)
    eab6:	mov	r0, r4
    eab8:	mov	r1, r5
    eaba:	bl	bcc4 <__aeabi_dcmple>
    eabe:	cmp	r0, #0
    eac0:	bne.w	f464 <_svfprintf_r+0xfd4>
    eac4:	movs	r2, #0
    eac6:	movs	r3, #0
    eac8:	ldrd	r0, r1, [sp, #64]	; 0x40
    eacc:	bl	bcb0 <__aeabi_dcmplt>
    ead0:	cmp	r0, #0
    ead2:	bne.w	f97a <_svfprintf_r+0x14ea>
    ead6:	ldrb.w	r7, [sp, #111]	; 0x6f
    eada:	ldr	r6, [pc, #60]	; (eb18 <_svfprintf_r+0x688>)
    eadc:	ldr	r3, [pc, #60]	; (eb1c <_svfprintf_r+0x68c>)
    eade:	ldr	r1, [sp, #12]
    eae0:	bic.w	r1, r1, #128	; 0x80
    eae4:	str	r1, [sp, #12]
    eae6:	ldr	r1, [sp, #52]	; 0x34
    eae8:	movs	r2, #3
    eaea:	mov.w	fp, #0
    eaee:	str	r2, [sp, #16]
    eaf0:	cmp	r1, #71	; 0x47
    eaf2:	it	le
    eaf4:	movle	r6, r3
    eaf6:	str	r2, [sp, #36]	; 0x24
    eaf8:	str.w	fp, [sp, #60]	; 0x3c
    eafc:	b.n	e834 <_svfprintf_r+0x3a4>
    eafe:	ldr	r3, [sp, #12]
    eb00:	orr.w	r3, r3, #8
    eb04:	str	r3, [sp, #12]
    eb06:	ldrb.w	r3, [r8]
    eb0a:	b.n	e544 <_svfprintf_r+0xb4>
    eb0c:	.word	0x00014234
    eb10:	.word	0x000141e0
    eb14:	.word	0x7fefffff
    eb18:	.word	0x000141f4
    eb1c:	.word	0x000141f0
    eb20:	str	r3, [sp, #52]	; 0x34
    eb22:	mov	fp, r5
    eb24:	cmp	r2, #0
    eb26:	bne.w	fb48 <_svfprintf_r+0x16b8>
    eb2a:	ldr	r3, [sp, #12]
    eb2c:	orr.w	r3, r3, #16
    eb30:	str	r3, [sp, #12]
    eb32:	ldr	r2, [sp, #12]
    eb34:	ands.w	r3, r2, #32
    eb38:	bne.w	e6b0 <_svfprintf_r+0x220>
    eb3c:	ldr	r1, [sp, #12]
    eb3e:	ands.w	r2, r1, #16
    eb42:	beq.w	f3fc <_svfprintf_r+0xf6c>
    eb46:	ldr	r0, [sp, #40]	; 0x28
    eb48:	strb.w	r3, [sp, #111]	; 0x6f
    eb4c:	cmp.w	fp, #0
    eb50:	ldr	r4, [r0, #0]
    eb52:	add.w	r7, r0, #4
    eb56:	mov.w	r5, #0
    eb5a:	blt.w	f590 <_svfprintf_r+0x1100>
    eb5e:	mov	r2, r1
    eb60:	bic.w	r2, r2, #128	; 0x80
    eb64:	str	r2, [sp, #12]
    eb66:	orrs.w	r2, r4, r5
    eb6a:	str	r7, [sp, #40]	; 0x28
    eb6c:	beq.w	ede4 <_svfprintf_r+0x954>
    eb70:	mov	r7, r3
    eb72:	b.n	e6dc <_svfprintf_r+0x24c>
    eb74:	str	r3, [sp, #52]	; 0x34
    eb76:	mov	fp, r5
    eb78:	cmp	r2, #0
    eb7a:	bne.w	fb40 <_svfprintf_r+0x16b0>
    eb7e:	ldr	r3, [sp, #12]
    eb80:	orr.w	r3, r3, #16
    eb84:	str	r3, [sp, #12]
    eb86:	ldr	r2, [sp, #12]
    eb88:	ands.w	r3, r2, #32
    eb8c:	beq.w	f1e8 <_svfprintf_r+0xd58>
    eb90:	ldr	r7, [sp, #40]	; 0x28
    eb92:	adds	r7, #7
    eb94:	bic.w	r3, r7, #7
    eb98:	movs	r7, #0
    eb9a:	add.w	r1, r3, #8
    eb9e:	cmp	fp, r7
    eba0:	str	r1, [sp, #40]	; 0x28
    eba2:	ldrd	r4, r5, [r3]
    eba6:	strb.w	r7, [sp, #111]	; 0x6f
    ebaa:	blt.w	f25a <_svfprintf_r+0xdca>
    ebae:	bic.w	r3, r2, #128	; 0x80
    ebb2:	str	r3, [sp, #12]
    ebb4:	orrs.w	r3, r4, r5
    ebb8:	bne.w	e7ec <_svfprintf_r+0x35c>
    ebbc:	cmp.w	fp, #0
    ebc0:	beq.w	edae <_svfprintf_r+0x91e>
    ebc4:	movs	r4, #0
    ebc6:	add	r6, sp, #256	; 0x100
    ebc8:	adds	r4, #48	; 0x30
    ebca:	strb.w	r4, [r6, #-65]!
    ebce:	b.n	e820 <_svfprintf_r+0x390>
    ebd0:	str	r3, [sp, #52]	; 0x34
    ebd2:	mov	fp, r5
    ebd4:	cmp	r2, #0
    ebd6:	bne.w	fb38 <_svfprintf_r+0x16a8>
    ebda:	ldr	r3, [sp, #12]
    ebdc:	ldr	r0, [pc, #700]	; (ee9c <_svfprintf_r+0xa0c>)
    ebde:	lsls	r5, r3, #26
    ebe0:	bpl.w	ed4e <_svfprintf_r+0x8be>
    ebe4:	ldr	r7, [sp, #40]	; 0x28
    ebe6:	adds	r7, #7
    ebe8:	bic.w	r3, r7, #7
    ebec:	ldrd	r4, r5, [r3]
    ebf0:	add.w	r2, r3, #8
    ebf4:	str	r2, [sp, #40]	; 0x28
    ebf6:	ldr	r2, [sp, #12]
    ebf8:	ands.w	r7, r2, #1
    ebfc:	beq.w	f072 <_svfprintf_r+0xbe2>
    ec00:	orrs.w	r3, r4, r5
    ec04:	beq.w	f60c <_svfprintf_r+0x117c>
    ec08:	ldrb.w	r2, [sp, #52]	; 0x34
    ec0c:	strb.w	r2, [sp, #113]	; 0x71
    ec10:	movs	r7, #0
    ec12:	ldr	r2, [sp, #12]
    ec14:	strb.w	r7, [sp, #111]	; 0x6f
    ec18:	movs	r3, #48	; 0x30
    ec1a:	cmp	fp, r7
    ec1c:	strb.w	r3, [sp, #112]	; 0x70
    ec20:	orr.w	r3, r2, #2
    ec24:	blt.w	f984 <_svfprintf_r+0x14f4>
    ec28:	bic.w	r3, r2, #128	; 0x80
    ec2c:	orr.w	r3, r3, #2
    ec30:	str	r3, [sp, #12]
    ec32:	add	r6, sp, #192	; 0xc0
    ec34:	lsrs	r3, r4, #4
    ec36:	and.w	r1, r4, #15
    ec3a:	orr.w	r3, r3, r5, lsl #28
    ec3e:	lsrs	r2, r5, #4
    ec40:	mov	r4, r3
    ec42:	mov	r5, r2
    ec44:	ldrb	r3, [r0, r1]
    ec46:	strb.w	r3, [r6, #-1]!
    ec4a:	orrs.w	r3, r4, r5
    ec4e:	bne.n	ec34 <_svfprintf_r+0x7a4>
    ec50:	b.n	e820 <_svfprintf_r+0x390>
    ec52:	ldr	r1, [sp, #40]	; 0x28
    ec54:	str	r3, [sp, #52]	; 0x34
    ec56:	ldr	r2, [r1, #0]
    ec58:	strb.w	r2, [sp, #152]	; 0x98
    ec5c:	movs	r3, #0
    ec5e:	mov	r2, r1
    ec60:	mov	r7, r3
    ec62:	strb.w	r3, [sp, #111]	; 0x6f
    ec66:	adds	r2, #4
    ec68:	movs	r3, #1
    ec6a:	str	r3, [sp, #16]
    ec6c:	mov	fp, r7
    ec6e:	str	r7, [sp, #60]	; 0x3c
    ec70:	str	r2, [sp, #40]	; 0x28
    ec72:	str	r3, [sp, #36]	; 0x24
    ec74:	add	r6, sp, #152	; 0x98
    ec76:	b.n	e83c <_svfprintf_r+0x3ac>
    ec78:	str	r3, [sp, #52]	; 0x34
    ec7a:	mov	fp, r5
    ec7c:	cmp	r2, #0
    ec7e:	beq.w	e7a8 <_svfprintf_r+0x318>
    ec82:	strb.w	r1, [sp, #111]	; 0x6f
    ec86:	b.n	e7a8 <_svfprintf_r+0x318>
    ec88:	ldr	r3, [sp, #12]
    ec8a:	orr.w	r3, r3, #64	; 0x40
    ec8e:	str	r3, [sp, #12]
    ec90:	ldrb.w	r3, [r8]
    ec94:	b.n	e544 <_svfprintf_r+0xb4>
    ec96:	ldrb.w	r3, [r8]
    ec9a:	cmp	r1, #0
    ec9c:	bne.w	e544 <_svfprintf_r+0xb4>
    eca0:	movs	r2, #1
    eca2:	movs	r1, #32
    eca4:	b.n	e544 <_svfprintf_r+0xb4>
    eca6:	ldr	r3, [sp, #12]
    eca8:	orr.w	r3, r3, #1
    ecac:	str	r3, [sp, #12]
    ecae:	ldrb.w	r3, [r8]
    ecb2:	b.n	e544 <_svfprintf_r+0xb4>
    ecb4:	ldr	r4, [sp, #40]	; 0x28
    ecb6:	ldr	r3, [r4, #0]
    ecb8:	str	r3, [sp, #32]
    ecba:	mov	r0, r3
    ecbc:	cmp	r0, #0
    ecbe:	mov	r3, r4
    ecc0:	add.w	r3, r3, #4
    ecc4:	blt.w	e608 <_svfprintf_r+0x178>
    ecc8:	str	r3, [sp, #40]	; 0x28
    ecca:	ldrb.w	r3, [r8]
    ecce:	b.n	e544 <_svfprintf_r+0xb4>
    ecd0:	ldrb.w	r3, [r8]
    ecd4:	movs	r2, #1
    ecd6:	movs	r1, #43	; 0x2b
    ecd8:	b.n	e544 <_svfprintf_r+0xb4>
    ecda:	ldr	r3, [sp, #12]
    ecdc:	orr.w	r3, r3, #32
    ece0:	str	r3, [sp, #12]
    ece2:	ldrb.w	r3, [r8]
    ece6:	b.n	e544 <_svfprintf_r+0xb4>
    ece8:	ldr	r2, [sp, #40]	; 0x28
    ecea:	str	r3, [sp, #52]	; 0x34
    ecec:	ldr	r6, [r2, #0]
    ecee:	movs	r4, #0
    ecf0:	strb.w	r4, [sp, #111]	; 0x6f
    ecf4:	adds	r7, r2, #4
    ecf6:	cmp	r6, #0
    ecf8:	beq.w	f934 <_svfprintf_r+0x14a4>
    ecfc:	cmp	r5, #0
    ecfe:	blt.w	f7c4 <_svfprintf_r+0x1334>
    ed02:	mov	r2, r5
    ed04:	mov	r1, r4
    ed06:	mov	r0, r6
    ed08:	bl	12560 <memchr>
    ed0c:	cmp	r0, #0
    ed0e:	beq.w	f9d8 <_svfprintf_r+0x1548>
    ed12:	subs	r3, r0, r6
    ed14:	str	r3, [sp, #36]	; 0x24
    ed16:	mov	fp, r4
    ed18:	bic.w	r3, r3, r3, asr #31
    ed1c:	str	r7, [sp, #40]	; 0x28
    ed1e:	str	r3, [sp, #16]
    ed20:	str.w	fp, [sp, #60]	; 0x3c
    ed24:	ldrb.w	r7, [sp, #111]	; 0x6f
    ed28:	b.n	e834 <_svfprintf_r+0x3a4>
    ed2a:	str	r3, [sp, #52]	; 0x34
    ed2c:	mov	fp, r5
    ed2e:	cmp	r2, #0
    ed30:	beq.w	eb86 <_svfprintf_r+0x6f6>
    ed34:	strb.w	r1, [sp, #111]	; 0x6f
    ed38:	b.n	eb86 <_svfprintf_r+0x6f6>
    ed3a:	str	r3, [sp, #52]	; 0x34
    ed3c:	mov	fp, r5
    ed3e:	cmp	r2, #0
    ed40:	bne.w	fb60 <_svfprintf_r+0x16d0>
    ed44:	ldr	r3, [sp, #12]
    ed46:	ldr	r0, [pc, #344]	; (eea0 <_svfprintf_r+0xa10>)
    ed48:	lsls	r5, r3, #26
    ed4a:	bmi.w	ebe4 <_svfprintf_r+0x754>
    ed4e:	ldr	r3, [sp, #12]
    ed50:	lsls	r4, r3, #27
    ed52:	bpl.w	f5d2 <_svfprintf_r+0x1142>
    ed56:	ldr	r2, [sp, #40]	; 0x28
    ed58:	mov	r3, r2
    ed5a:	adds	r3, #4
    ed5c:	ldr	r4, [r2, #0]
    ed5e:	str	r3, [sp, #40]	; 0x28
    ed60:	movs	r5, #0
    ed62:	b.n	ebf6 <_svfprintf_r+0x766>
    ed64:	ldrb.w	r3, [r8]
    ed68:	cmp	r3, #108	; 0x6c
    ed6a:	beq.w	f6f2 <_svfprintf_r+0x1262>
    ed6e:	ldr	r0, [sp, #12]
    ed70:	orr.w	r0, r0, #16
    ed74:	str	r0, [sp, #12]
    ed76:	b.w	e544 <_svfprintf_r+0xb4>
    ed7a:	cmp	r2, #0
    ed7c:	bne.w	fb58 <_svfprintf_r+0x16c8>
    ed80:	ldr	r3, [sp, #12]
    ed82:	lsls	r3, r3, #26
    ed84:	bpl.w	f436 <_svfprintf_r+0xfa6>
    ed88:	ldr	r2, [sp, #40]	; 0x28
    ed8a:	ldr	r1, [sp, #28]
    ed8c:	ldr	r3, [r2, #0]
    ed8e:	asrs	r5, r1, #31
    ed90:	mov	r0, r1
    ed92:	adds	r2, #4
    ed94:	mov	r1, r5
    ed96:	str	r2, [sp, #40]	; 0x28
    ed98:	strd	r0, r1, [r3]
    ed9c:	b.w	e4de <_svfprintf_r+0x4e>
    eda0:	ldr	r0, [pc, #252]	; (eea0 <_svfprintf_r+0xa10>)
    eda2:	str	r2, [sp, #52]	; 0x34
    eda4:	cmp.w	fp, #0
    eda8:	bne.w	f094 <_svfprintf_r+0xc04>
    edac:	mov	r7, fp
    edae:	mov.w	fp, #0
    edb2:	str.w	fp, [sp, #36]	; 0x24
    edb6:	add	r6, sp, #192	; 0xc0
    edb8:	b.n	e826 <_svfprintf_r+0x396>
    edba:	str	r3, [sp, #52]	; 0x34
    edbc:	cmp	r2, #0
    edbe:	bne.w	fb50 <_svfprintf_r+0x16c0>
    edc2:	ldr	r2, [sp, #52]	; 0x34
    edc4:	cmp	r2, #0
    edc6:	beq.w	e676 <_svfprintf_r+0x1e6>
    edca:	movs	r3, #0
    edcc:	movs	r1, #1
    edce:	mov	r7, r3
    edd0:	str	r1, [sp, #16]
    edd2:	strb.w	r2, [sp, #152]	; 0x98
    edd6:	strb.w	r3, [sp, #111]	; 0x6f
    edda:	mov	fp, r3
    eddc:	str	r3, [sp, #60]	; 0x3c
    edde:	str	r1, [sp, #36]	; 0x24
    ede0:	add	r6, sp, #152	; 0x98
    ede2:	b.n	e83c <_svfprintf_r+0x3ac>
    ede4:	cmp.w	fp, #0
    ede8:	beq.w	fa08 <_svfprintf_r+0x1578>
    edec:	movs	r7, #0
    edee:	movs	r4, #0
    edf0:	movs	r5, #0
    edf2:	b.n	e6dc <_svfprintf_r+0x24c>
    edf4:	ldr	r0, [pc, #168]	; (eea0 <_svfprintf_r+0xa10>)
    edf6:	str	r3, [sp, #12]
    edf8:	str	r2, [sp, #52]	; 0x34
    edfa:	orrs.w	r3, r4, r5
    edfe:	str	r7, [sp, #40]	; 0x28
    ee00:	mov.w	r7, #0
    ee04:	bne.w	ec32 <_svfprintf_r+0x7a2>
    ee08:	movs	r4, #0
    ee0a:	movs	r5, #0
    ee0c:	b.n	ec32 <_svfprintf_r+0x7a2>
    ee0e:	ldr	r4, [sp, #148]	; 0x94
    ee10:	b.n	e8dc <_svfprintf_r+0x44c>
    ee12:	ldr	r3, [sp, #52]	; 0x34
    ee14:	cmp	r3, #101	; 0x65
    ee16:	ble.w	ef6e <_svfprintf_r+0xade>
    ee1a:	movs	r2, #0
    ee1c:	movs	r3, #0
    ee1e:	ldrd	r0, r1, [sp, #64]	; 0x40
    ee22:	bl	bc9c <__aeabi_dcmpeq>
    ee26:	cmp	r0, #0
    ee28:	beq.w	f098 <_svfprintf_r+0xc08>
    ee2c:	ldr	r3, [sp, #144]	; 0x90
    ee2e:	ldr	r2, [pc, #116]	; (eea4 <_svfprintf_r+0xa14>)
    ee30:	str.w	r2, [r9]
    ee34:	adds	r3, #1
    ee36:	adds	r4, #1
    ee38:	movs	r2, #1
    ee3a:	cmp	r3, #7
    ee3c:	str	r4, [sp, #148]	; 0x94
    ee3e:	str	r3, [sp, #144]	; 0x90
    ee40:	str.w	r2, [r9, #4]
    ee44:	bgt.w	f624 <_svfprintf_r+0x1194>
    ee48:	add.w	r9, r9, #8
    ee4c:	ldr	r3, [sp, #116]	; 0x74
    ee4e:	ldr	r2, [sp, #56]	; 0x38
    ee50:	cmp	r3, r2
    ee52:	blt.n	ee5c <_svfprintf_r+0x9cc>
    ee54:	ldr	r3, [sp, #12]
    ee56:	lsls	r3, r3, #31
    ee58:	bpl.w	e9bc <_svfprintf_r+0x52c>
    ee5c:	ldr	r3, [sp, #144]	; 0x90
    ee5e:	ldr	r1, [sp, #72]	; 0x48
    ee60:	ldr	r2, [sp, #76]	; 0x4c
    ee62:	str.w	r2, [r9]
    ee66:	adds	r3, #1
    ee68:	add	r4, r1
    ee6a:	cmp	r3, #7
    ee6c:	str	r4, [sp, #148]	; 0x94
    ee6e:	str.w	r1, [r9, #4]
    ee72:	str	r3, [sp, #144]	; 0x90
    ee74:	bgt.w	f706 <_svfprintf_r+0x1276>
    ee78:	add.w	r9, r9, #8
    ee7c:	ldr	r3, [sp, #56]	; 0x38
    ee7e:	subs	r5, r3, #1
    ee80:	cmp	r5, #0
    ee82:	ble.w	e9bc <_svfprintf_r+0x52c>
    ee86:	ldr	r2, [pc, #32]	; (eea8 <_svfprintf_r+0xa18>)
    ee88:	ldr	r3, [sp, #144]	; 0x90
    ee8a:	str	r2, [sp, #44]	; 0x2c
    ee8c:	cmp	r5, #16
    ee8e:	ble.w	f264 <_svfprintf_r+0xdd4>
    ee92:	movs	r6, #16
    ee94:	ldr	r7, [sp, #24]
    ee96:	ldr.w	fp, [sp, #20]
    ee9a:	b.n	eeb8 <_svfprintf_r+0xa28>
    ee9c:	.word	0x00014200
    eea0:	.word	0x00014214
    eea4:	.word	0x00014230
    eea8:	.word	0x000141e0
    eeac:	add.w	r9, r9, #8
    eeb0:	subs	r5, #16
    eeb2:	cmp	r5, #16
    eeb4:	ble.w	f264 <_svfprintf_r+0xdd4>
    eeb8:	adds	r3, #1
    eeba:	adds	r4, #16
    eebc:	cmp	r3, #7
    eebe:	str	r4, [sp, #148]	; 0x94
    eec0:	str	r3, [sp, #144]	; 0x90
    eec2:	str.w	sl, [r9]
    eec6:	str.w	r6, [r9, #4]
    eeca:	ble.n	eeac <_svfprintf_r+0xa1c>
    eecc:	add	r2, sp, #140	; 0x8c
    eece:	mov	r1, fp
    eed0:	mov	r0, r7
    eed2:	bl	134d4 <__ssprint_r>
    eed6:	cmp	r0, #0
    eed8:	bne.w	e684 <_svfprintf_r+0x1f4>
    eedc:	ldr	r4, [sp, #148]	; 0x94
    eede:	ldr	r3, [sp, #144]	; 0x90
    eee0:	add.w	r9, sp, #192	; 0xc0
    eee4:	b.n	eeb0 <_svfprintf_r+0xa20>
    eee6:	ldr	r3, [sp, #32]
    eee8:	ldr	r2, [sp, #16]
    eeea:	subs	r7, r3, r2
    eeec:	cmp	r7, #0
    eeee:	ble.w	e924 <_svfprintf_r+0x494>
    eef2:	ldr	r2, [pc, #752]	; (f1e4 <_svfprintf_r+0xd54>)
    eef4:	ldr	r3, [sp, #144]	; 0x90
    eef6:	str	r2, [sp, #44]	; 0x2c
    eef8:	cmp	r7, #16
    eefa:	ble.n	ef54 <_svfprintf_r+0xac4>
    eefc:	mov	r2, r9
    eefe:	mov	r1, r4
    ef00:	mov	r9, r7
    ef02:	movs	r5, #16
    ef04:	mov	r7, r6
    ef06:	ldr	r4, [sp, #24]
    ef08:	ldr	r6, [sp, #20]
    ef0a:	b.n	ef1a <_svfprintf_r+0xa8a>
    ef0c:	sub.w	r9, r9, #16
    ef10:	cmp.w	r9, #16
    ef14:	add.w	r2, r2, #8
    ef18:	ble.n	ef4c <_svfprintf_r+0xabc>
    ef1a:	adds	r3, #1
    ef1c:	adds	r1, #16
    ef1e:	cmp	r3, #7
    ef20:	str	r1, [sp, #148]	; 0x94
    ef22:	str	r3, [sp, #144]	; 0x90
    ef24:	str.w	sl, [r2]
    ef28:	str	r5, [r2, #4]
    ef2a:	ble.n	ef0c <_svfprintf_r+0xa7c>
    ef2c:	add	r2, sp, #140	; 0x8c
    ef2e:	mov	r1, r6
    ef30:	mov	r0, r4
    ef32:	bl	134d4 <__ssprint_r>
    ef36:	cmp	r0, #0
    ef38:	bne.w	e684 <_svfprintf_r+0x1f4>
    ef3c:	sub.w	r9, r9, #16
    ef40:	cmp.w	r9, #16
    ef44:	ldr	r1, [sp, #148]	; 0x94
    ef46:	ldr	r3, [sp, #144]	; 0x90
    ef48:	add	r2, sp, #192	; 0xc0
    ef4a:	bgt.n	ef1a <_svfprintf_r+0xa8a>
    ef4c:	mov	r6, r7
    ef4e:	mov	r4, r1
    ef50:	mov	r7, r9
    ef52:	mov	r9, r2
    ef54:	adds	r3, #1
    ef56:	ldr	r2, [sp, #44]	; 0x2c
    ef58:	str	r3, [sp, #144]	; 0x90
    ef5a:	add	r4, r7
    ef5c:	cmp	r3, #7
    ef5e:	str	r4, [sp, #148]	; 0x94
    ef60:	stmia.w	r9, {r2, r7}
    ef64:	bgt.w	f3e2 <_svfprintf_r+0xf52>
    ef68:	add.w	r9, r9, #8
    ef6c:	b.n	e924 <_svfprintf_r+0x494>
    ef6e:	ldr	r3, [sp, #56]	; 0x38
    ef70:	ldr	r5, [sp, #144]	; 0x90
    ef72:	cmp	r3, #1
    ef74:	ble.w	f38c <_svfprintf_r+0xefc>
    ef78:	adds	r5, #1
    ef7a:	adds	r4, #1
    ef7c:	movs	r3, #1
    ef7e:	cmp	r5, #7
    ef80:	str	r4, [sp, #148]	; 0x94
    ef82:	str	r5, [sp, #144]	; 0x90
    ef84:	str.w	r6, [r9]
    ef88:	str.w	r3, [r9, #4]
    ef8c:	bgt.w	f3ae <_svfprintf_r+0xf1e>
    ef90:	add.w	r9, r9, #8
    ef94:	ldr	r2, [sp, #72]	; 0x48
    ef96:	ldr	r3, [sp, #76]	; 0x4c
    ef98:	str.w	r3, [r9]
    ef9c:	adds	r5, #1
    ef9e:	add	r4, r2
    efa0:	cmp	r5, #7
    efa2:	str	r4, [sp, #148]	; 0x94
    efa4:	str	r5, [sp, #144]	; 0x90
    efa6:	str.w	r2, [r9, #4]
    efaa:	bgt.w	f3c8 <_svfprintf_r+0xf38>
    efae:	add.w	r9, r9, #8
    efb2:	movs	r3, #0
    efb4:	movs	r2, #0
    efb6:	ldrd	r0, r1, [sp, #64]	; 0x40
    efba:	bl	bc9c <__aeabi_dcmpeq>
    efbe:	ldr	r3, [sp, #56]	; 0x38
    efc0:	cmp	r0, #0
    efc2:	bne.w	f14c <_svfprintf_r+0xcbc>
    efc6:	subs	r3, #1
    efc8:	adds	r5, #1
    efca:	adds	r6, #1
    efcc:	add	r4, r3
    efce:	cmp	r5, #7
    efd0:	str	r5, [sp, #144]	; 0x90
    efd2:	str	r4, [sp, #148]	; 0x94
    efd4:	str.w	r6, [r9]
    efd8:	str.w	r3, [r9, #4]
    efdc:	bgt.w	f1ca <_svfprintf_r+0xd3a>
    efe0:	add.w	r9, r9, #8
    efe4:	ldr	r2, [sp, #84]	; 0x54
    efe6:	str.w	r2, [r9, #4]
    efea:	adds	r5, #1
    efec:	add	r4, r2
    efee:	add	r3, sp, #124	; 0x7c
    eff0:	cmp	r5, #7
    eff2:	str	r4, [sp, #148]	; 0x94
    eff4:	str	r5, [sp, #144]	; 0x90
    eff6:	str.w	r3, [r9]
    effa:	ble.w	e9b8 <_svfprintf_r+0x528>
    effe:	add	r2, sp, #140	; 0x8c
    f000:	ldr	r1, [sp, #20]
    f002:	ldr	r0, [sp, #24]
    f004:	bl	134d4 <__ssprint_r>
    f008:	cmp	r0, #0
    f00a:	bne.w	e684 <_svfprintf_r+0x1f4>
    f00e:	ldr	r4, [sp, #148]	; 0x94
    f010:	add.w	r9, sp, #192	; 0xc0
    f014:	b.n	e9bc <_svfprintf_r+0x52c>
    f016:	add	r2, sp, #140	; 0x8c
    f018:	ldr	r1, [sp, #20]
    f01a:	ldr	r0, [sp, #24]
    f01c:	bl	134d4 <__ssprint_r>
    f020:	cmp	r0, #0
    f022:	beq.w	ea58 <_svfprintf_r+0x5c8>
    f026:	b.w	e684 <_svfprintf_r+0x1f4>
    f02a:	add	r2, sp, #140	; 0x8c
    f02c:	ldr	r1, [sp, #20]
    f02e:	ldr	r0, [sp, #24]
    f030:	bl	134d4 <__ssprint_r>
    f034:	cmp	r0, #0
    f036:	bne.w	e684 <_svfprintf_r+0x1f4>
    f03a:	ldr	r4, [sp, #148]	; 0x94
    f03c:	add.w	r9, sp, #192	; 0xc0
    f040:	b.n	e996 <_svfprintf_r+0x506>
    f042:	add	r2, sp, #140	; 0x8c
    f044:	ldr	r1, [sp, #20]
    f046:	ldr	r0, [sp, #24]
    f048:	bl	134d4 <__ssprint_r>
    f04c:	cmp	r0, #0
    f04e:	bne.w	e684 <_svfprintf_r+0x1f4>
    f052:	ldr	r4, [sp, #148]	; 0x94
    f054:	add.w	r9, sp, #192	; 0xc0
    f058:	b.n	e8fc <_svfprintf_r+0x46c>
    f05a:	add	r2, sp, #140	; 0x8c
    f05c:	ldr	r1, [sp, #20]
    f05e:	ldr	r0, [sp, #24]
    f060:	bl	134d4 <__ssprint_r>
    f064:	cmp	r0, #0
    f066:	bne.w	e684 <_svfprintf_r+0x1f4>
    f06a:	ldr	r4, [sp, #148]	; 0x94
    f06c:	add.w	r9, sp, #192	; 0xc0
    f070:	b.n	e91c <_svfprintf_r+0x48c>
    f072:	cmp.w	fp, #0
    f076:	strb.w	r7, [sp, #111]	; 0x6f
    f07a:	blt.w	f63c <_svfprintf_r+0x11ac>
    f07e:	bic.w	r3, r2, #128	; 0x80
    f082:	str	r3, [sp, #12]
    f084:	orrs.w	r3, r4, r5
    f088:	bne.w	ec32 <_svfprintf_r+0x7a2>
    f08c:	cmp.w	fp, #0
    f090:	beq.w	edac <_svfprintf_r+0x91c>
    f094:	movs	r7, #0
    f096:	b.n	ee08 <_svfprintf_r+0x978>
    f098:	ldr	r5, [sp, #116]	; 0x74
    f09a:	cmp	r5, #0
    f09c:	ble.w	f642 <_svfprintf_r+0x11b2>
    f0a0:	ldr	r3, [sp, #60]	; 0x3c
    f0a2:	ldr	r2, [sp, #56]	; 0x38
    f0a4:	cmp	r3, r2
    f0a6:	it	ge
    f0a8:	movge	r3, r2
    f0aa:	cmp	r3, #0
    f0ac:	mov	r5, r3
    f0ae:	ble.n	f0cc <_svfprintf_r+0xc3c>
    f0b0:	ldr	r3, [sp, #144]	; 0x90
    f0b2:	str.w	r6, [r9]
    f0b6:	adds	r3, #1
    f0b8:	add	r4, r5
    f0ba:	cmp	r3, #7
    f0bc:	str	r4, [sp, #148]	; 0x94
    f0be:	str.w	r5, [r9, #4]
    f0c2:	str	r3, [sp, #144]	; 0x90
    f0c4:	bgt.w	f81a <_svfprintf_r+0x138a>
    f0c8:	add.w	r9, r9, #8
    f0cc:	ldr	r3, [sp, #60]	; 0x3c
    f0ce:	cmp	r5, #0
    f0d0:	it	ge
    f0d2:	subge	r3, r3, r5
    f0d4:	cmp	r3, #0
    f0d6:	mov	r5, r3
    f0d8:	ble.w	f2cc <_svfprintf_r+0xe3c>
    f0dc:	ldr	r2, [pc, #260]	; (f1e4 <_svfprintf_r+0xd54>)
    f0de:	ldr	r3, [sp, #144]	; 0x90
    f0e0:	str	r2, [sp, #44]	; 0x2c
    f0e2:	cmp	r5, #16
    f0e4:	ble.w	f5ee <_svfprintf_r+0x115e>
    f0e8:	mov	r2, r4
    f0ea:	movs	r7, #16
    f0ec:	ldr.w	fp, [sp, #24]
    f0f0:	ldr	r4, [sp, #20]
    f0f2:	b.n	f100 <_svfprintf_r+0xc70>
    f0f4:	add.w	r9, r9, #8
    f0f8:	subs	r5, #16
    f0fa:	cmp	r5, #16
    f0fc:	ble.w	f5ec <_svfprintf_r+0x115c>
    f100:	adds	r3, #1
    f102:	adds	r2, #16
    f104:	cmp	r3, #7
    f106:	str	r2, [sp, #148]	; 0x94
    f108:	str	r3, [sp, #144]	; 0x90
    f10a:	str.w	sl, [r9]
    f10e:	str.w	r7, [r9, #4]
    f112:	ble.n	f0f4 <_svfprintf_r+0xc64>
    f114:	add	r2, sp, #140	; 0x8c
    f116:	mov	r1, r4
    f118:	mov	r0, fp
    f11a:	bl	134d4 <__ssprint_r>
    f11e:	cmp	r0, #0
    f120:	bne.w	e684 <_svfprintf_r+0x1f4>
    f124:	ldr	r2, [sp, #148]	; 0x94
    f126:	ldr	r3, [sp, #144]	; 0x90
    f128:	add.w	r9, sp, #192	; 0xc0
    f12c:	b.n	f0f8 <_svfprintf_r+0xc68>
    f12e:	add	r2, sp, #140	; 0x8c
    f130:	ldr	r1, [sp, #20]
    f132:	ldr	r0, [sp, #24]
    f134:	bl	134d4 <__ssprint_r>
    f138:	cmp	r0, #0
    f13a:	bne.w	e684 <_svfprintf_r+0x1f4>
    f13e:	ldrb.w	r7, [sp, #111]	; 0x6f
    f142:	ldr	r4, [sp, #148]	; 0x94
    f144:	add.w	r9, sp, #192	; 0xc0
    f148:	b.w	e8dc <_svfprintf_r+0x44c>
    f14c:	subs	r6, r3, #1
    f14e:	cmp	r6, #0
    f150:	ble.w	efe4 <_svfprintf_r+0xb54>
    f154:	ldr	r3, [pc, #140]	; (f1e4 <_svfprintf_r+0xd54>)
    f156:	str	r3, [sp, #44]	; 0x2c
    f158:	cmp	r6, #16
    f15a:	ble.n	f1b6 <_svfprintf_r+0xd26>
    f15c:	str.w	r8, [sp, #36]	; 0x24
    f160:	movs	r7, #16
    f162:	mov	r8, r6
    f164:	ldr.w	fp, [sp, #24]
    f168:	ldr	r6, [sp, #20]
    f16a:	b.n	f17a <_svfprintf_r+0xcea>
    f16c:	sub.w	r8, r8, #16
    f170:	cmp.w	r8, #16
    f174:	add.w	r9, r9, #8
    f178:	ble.n	f1b0 <_svfprintf_r+0xd20>
    f17a:	adds	r5, #1
    f17c:	adds	r4, #16
    f17e:	cmp	r5, #7
    f180:	str	r4, [sp, #148]	; 0x94
    f182:	str	r5, [sp, #144]	; 0x90
    f184:	str.w	sl, [r9]
    f188:	str.w	r7, [r9, #4]
    f18c:	ble.n	f16c <_svfprintf_r+0xcdc>
    f18e:	add	r2, sp, #140	; 0x8c
    f190:	mov	r1, r6
    f192:	mov	r0, fp
    f194:	bl	134d4 <__ssprint_r>
    f198:	cmp	r0, #0
    f19a:	bne.w	e684 <_svfprintf_r+0x1f4>
    f19e:	sub.w	r8, r8, #16
    f1a2:	cmp.w	r8, #16
    f1a6:	ldr	r4, [sp, #148]	; 0x94
    f1a8:	ldr	r5, [sp, #144]	; 0x90
    f1aa:	add.w	r9, sp, #192	; 0xc0
    f1ae:	bgt.n	f17a <_svfprintf_r+0xcea>
    f1b0:	mov	r6, r8
    f1b2:	ldr.w	r8, [sp, #36]	; 0x24
    f1b6:	ldr	r3, [sp, #44]	; 0x2c
    f1b8:	adds	r5, #1
    f1ba:	add	r4, r6
    f1bc:	cmp	r5, #7
    f1be:	str	r4, [sp, #148]	; 0x94
    f1c0:	str	r5, [sp, #144]	; 0x90
    f1c2:	stmia.w	r9, {r3, r6}
    f1c6:	ble.w	efe0 <_svfprintf_r+0xb50>
    f1ca:	add	r2, sp, #140	; 0x8c
    f1cc:	ldr	r1, [sp, #20]
    f1ce:	ldr	r0, [sp, #24]
    f1d0:	bl	134d4 <__ssprint_r>
    f1d4:	cmp	r0, #0
    f1d6:	bne.w	e684 <_svfprintf_r+0x1f4>
    f1da:	ldr	r4, [sp, #148]	; 0x94
    f1dc:	ldr	r5, [sp, #144]	; 0x90
    f1de:	add.w	r9, sp, #192	; 0xc0
    f1e2:	b.n	efe4 <_svfprintf_r+0xb54>
    f1e4:	.word	0x000141e0
    f1e8:	ldr	r1, [sp, #12]
    f1ea:	ands.w	r2, r1, #16
    f1ee:	beq.w	f598 <_svfprintf_r+0x1108>
    f1f2:	ldr	r0, [sp, #40]	; 0x28
    f1f4:	strb.w	r3, [sp, #111]	; 0x6f
    f1f8:	cmp.w	fp, #0
    f1fc:	ldr	r4, [r0, #0]
    f1fe:	add.w	r7, r0, #4
    f202:	mov.w	r5, #0
    f206:	blt.n	f256 <_svfprintf_r+0xdc6>
    f208:	mov	r2, r1
    f20a:	bic.w	r2, r2, #128	; 0x80
    f20e:	str	r2, [sp, #12]
    f210:	orrs.w	r2, r4, r5
    f214:	str	r7, [sp, #40]	; 0x28
    f216:	mov	r7, r3
    f218:	bne.w	e7ec <_svfprintf_r+0x35c>
    f21c:	b.n	ebbc <_svfprintf_r+0x72c>
    f21e:	ldr	r3, [sp, #12]
    f220:	lsls	r0, r3, #27
    f222:	bmi.n	f27a <_svfprintf_r+0xdea>
    f224:	ldr	r3, [sp, #12]
    f226:	lsls	r1, r3, #25
    f228:	bpl.n	f27a <_svfprintf_r+0xdea>
    f22a:	ldr	r1, [sp, #40]	; 0x28
    f22c:	ldrsh.w	r4, [r1]
    f230:	adds	r1, #4
    f232:	asrs	r5, r4, #31
    f234:	mov	r2, r4
    f236:	mov	r3, r5
    f238:	str	r1, [sp, #40]	; 0x28
    f23a:	b.w	e7c6 <_svfprintf_r+0x336>
    f23e:	ldr	r1, [sp, #40]	; 0x28
    f240:	strb.w	r3, [sp, #111]	; 0x6f
    f244:	cmp.w	fp, #0
    f248:	ldr	r4, [r1, #0]
    f24a:	add.w	r7, r1, #4
    f24e:	mov.w	r5, #0
    f252:	bge.w	f6ee <_svfprintf_r+0x125e>
    f256:	str	r7, [sp, #40]	; 0x28
    f258:	mov	r7, r3
    f25a:	orrs.w	r3, r4, r5
    f25e:	bne.w	e7ec <_svfprintf_r+0x35c>
    f262:	b.n	ebc6 <_svfprintf_r+0x736>
    f264:	adds	r3, #1
    f266:	ldr	r2, [sp, #44]	; 0x2c
    f268:	str	r3, [sp, #144]	; 0x90
    f26a:	add	r4, r5
    f26c:	cmp	r3, #7
    f26e:	str	r4, [sp, #148]	; 0x94
    f270:	stmia.w	r9, {r2, r5}
    f274:	ble.w	e9b8 <_svfprintf_r+0x528>
    f278:	b.n	effe <_svfprintf_r+0xb6e>
    f27a:	ldr	r2, [sp, #40]	; 0x28
    f27c:	ldr	r4, [r2, #0]
    f27e:	mov	r3, r2
    f280:	adds	r3, #4
    f282:	asrs	r5, r4, #31
    f284:	mov	r2, r4
    f286:	str	r3, [sp, #40]	; 0x28
    f288:	cmp	r2, #0
    f28a:	mov	r3, r5
    f28c:	sbcs.w	r3, r3, #0
    f290:	bge.w	e7d0 <_svfprintf_r+0x340>
    f294:	negs	r4, r4
    f296:	mov.w	r7, #45	; 0x2d
    f29a:	sbc.w	r5, r5, r5, lsl #1
    f29e:	cmp.w	fp, #0
    f2a2:	strb.w	r7, [sp, #111]	; 0x6f
    f2a6:	blt.w	e7ec <_svfprintf_r+0x35c>
    f2aa:	ldr	r3, [sp, #12]
    f2ac:	bic.w	r3, r3, #128	; 0x80
    f2b0:	str	r3, [sp, #12]
    f2b2:	b.w	e7ec <_svfprintf_r+0x35c>
    f2b6:	add	r2, sp, #140	; 0x8c
    f2b8:	ldr	r1, [sp, #20]
    f2ba:	ldr	r0, [sp, #24]
    f2bc:	bl	134d4 <__ssprint_r>
    f2c0:	cmp	r0, #0
    f2c2:	bne.w	e684 <_svfprintf_r+0x1f4>
    f2c6:	ldr	r4, [sp, #148]	; 0x94
    f2c8:	add.w	r9, sp, #192	; 0xc0
    f2cc:	ldr	r2, [sp, #60]	; 0x3c
    f2ce:	ldr	r3, [sp, #116]	; 0x74
    f2d0:	add	r2, r6
    f2d2:	mov	r7, r2
    f2d4:	ldr	r2, [sp, #56]	; 0x38
    f2d6:	cmp	r3, r2
    f2d8:	blt.n	f36a <_svfprintf_r+0xeda>
    f2da:	ldr	r2, [sp, #12]
    f2dc:	lsls	r5, r2, #31
    f2de:	bmi.n	f36a <_svfprintf_r+0xeda>
    f2e0:	ldr	r1, [sp, #56]	; 0x38
    f2e2:	add	r6, r1
    f2e4:	subs	r5, r6, r7
    f2e6:	subs	r3, r1, r3
    f2e8:	cmp	r5, r3
    f2ea:	it	ge
    f2ec:	movge	r5, r3
    f2ee:	cmp	r5, #0
    f2f0:	mov	r6, r5
    f2f2:	ble.n	f310 <_svfprintf_r+0xe80>
    f2f4:	ldr	r2, [sp, #144]	; 0x90
    f2f6:	str.w	r7, [r9]
    f2fa:	adds	r2, #1
    f2fc:	add	r4, r5
    f2fe:	cmp	r2, #7
    f300:	str	r4, [sp, #148]	; 0x94
    f302:	str.w	r5, [r9, #4]
    f306:	str	r2, [sp, #144]	; 0x90
    f308:	bgt.w	f908 <_svfprintf_r+0x1478>
    f30c:	add.w	r9, r9, #8
    f310:	cmp	r6, #0
    f312:	ite	ge
    f314:	subge	r5, r3, r6
    f316:	movlt	r5, r3
    f318:	cmp	r5, #0
    f31a:	ble.w	e9bc <_svfprintf_r+0x52c>
    f31e:	ldr	r2, [pc, #744]	; (f608 <_svfprintf_r+0x1178>)
    f320:	ldr	r3, [sp, #144]	; 0x90
    f322:	str	r2, [sp, #44]	; 0x2c
    f324:	cmp	r5, #16
    f326:	ble.n	f264 <_svfprintf_r+0xdd4>
    f328:	movs	r6, #16
    f32a:	ldr	r7, [sp, #24]
    f32c:	ldr.w	fp, [sp, #20]
    f330:	b.n	f33c <_svfprintf_r+0xeac>
    f332:	add.w	r9, r9, #8
    f336:	subs	r5, #16
    f338:	cmp	r5, #16
    f33a:	ble.n	f264 <_svfprintf_r+0xdd4>
    f33c:	adds	r3, #1
    f33e:	adds	r4, #16
    f340:	cmp	r3, #7
    f342:	str	r4, [sp, #148]	; 0x94
    f344:	str	r3, [sp, #144]	; 0x90
    f346:	str.w	sl, [r9]
    f34a:	str.w	r6, [r9, #4]
    f34e:	ble.n	f332 <_svfprintf_r+0xea2>
    f350:	add	r2, sp, #140	; 0x8c
    f352:	mov	r1, fp
    f354:	mov	r0, r7
    f356:	bl	134d4 <__ssprint_r>
    f35a:	cmp	r0, #0
    f35c:	bne.w	e684 <_svfprintf_r+0x1f4>
    f360:	ldr	r4, [sp, #148]	; 0x94
    f362:	ldr	r3, [sp, #144]	; 0x90
    f364:	add.w	r9, sp, #192	; 0xc0
    f368:	b.n	f336 <_svfprintf_r+0xea6>
    f36a:	ldr	r2, [sp, #144]	; 0x90
    f36c:	ldr	r0, [sp, #72]	; 0x48
    f36e:	ldr	r1, [sp, #76]	; 0x4c
    f370:	str.w	r1, [r9]
    f374:	adds	r2, #1
    f376:	add	r4, r0
    f378:	cmp	r2, #7
    f37a:	str	r4, [sp, #148]	; 0x94
    f37c:	str.w	r0, [r9, #4]
    f380:	str	r2, [sp, #144]	; 0x90
    f382:	bgt.w	f8ee <_svfprintf_r+0x145e>
    f386:	add.w	r9, r9, #8
    f38a:	b.n	f2e0 <_svfprintf_r+0xe50>
    f38c:	ldr	r3, [sp, #12]
    f38e:	lsls	r0, r3, #31
    f390:	bmi.w	ef78 <_svfprintf_r+0xae8>
    f394:	adds	r5, #1
    f396:	adds	r4, #1
    f398:	movs	r3, #1
    f39a:	cmp	r5, #7
    f39c:	str	r4, [sp, #148]	; 0x94
    f39e:	str	r5, [sp, #144]	; 0x90
    f3a0:	str.w	r6, [r9]
    f3a4:	str.w	r3, [r9, #4]
    f3a8:	ble.w	efe0 <_svfprintf_r+0xb50>
    f3ac:	b.n	f1ca <_svfprintf_r+0xd3a>
    f3ae:	add	r2, sp, #140	; 0x8c
    f3b0:	ldr	r1, [sp, #20]
    f3b2:	ldr	r0, [sp, #24]
    f3b4:	bl	134d4 <__ssprint_r>
    f3b8:	cmp	r0, #0
    f3ba:	bne.w	e684 <_svfprintf_r+0x1f4>
    f3be:	ldr	r4, [sp, #148]	; 0x94
    f3c0:	ldr	r5, [sp, #144]	; 0x90
    f3c2:	add.w	r9, sp, #192	; 0xc0
    f3c6:	b.n	ef94 <_svfprintf_r+0xb04>
    f3c8:	add	r2, sp, #140	; 0x8c
    f3ca:	ldr	r1, [sp, #20]
    f3cc:	ldr	r0, [sp, #24]
    f3ce:	bl	134d4 <__ssprint_r>
    f3d2:	cmp	r0, #0
    f3d4:	bne.w	e684 <_svfprintf_r+0x1f4>
    f3d8:	ldr	r4, [sp, #148]	; 0x94
    f3da:	ldr	r5, [sp, #144]	; 0x90
    f3dc:	add.w	r9, sp, #192	; 0xc0
    f3e0:	b.n	efb2 <_svfprintf_r+0xb22>
    f3e2:	add	r2, sp, #140	; 0x8c
    f3e4:	ldr	r1, [sp, #20]
    f3e6:	ldr	r0, [sp, #24]
    f3e8:	bl	134d4 <__ssprint_r>
    f3ec:	cmp	r0, #0
    f3ee:	bne.w	e684 <_svfprintf_r+0x1f4>
    f3f2:	ldr	r4, [sp, #148]	; 0x94
    f3f4:	add.w	r9, sp, #192	; 0xc0
    f3f8:	b.w	e924 <_svfprintf_r+0x494>
    f3fc:	ldr	r1, [sp, #12]
    f3fe:	ands.w	r3, r1, #64	; 0x40
    f402:	beq.w	f578 <_svfprintf_r+0x10e8>
    f406:	ldr	r0, [sp, #40]	; 0x28
    f408:	strb.w	r2, [sp, #111]	; 0x6f
    f40c:	mov	r3, r0
    f40e:	cmp.w	fp, #0
    f412:	add.w	r3, r3, #4
    f416:	ldrh	r4, [r0, #0]
    f418:	mov.w	r5, #0
    f41c:	blt.w	f7a0 <_svfprintf_r+0x1310>
    f420:	bic.w	r1, r1, #128	; 0x80
    f424:	str	r1, [sp, #12]
    f426:	orrs.w	r1, r4, r5
    f42a:	str	r3, [sp, #40]	; 0x28
    f42c:	beq.w	ede4 <_svfprintf_r+0x954>
    f430:	mov	r7, r2
    f432:	b.w	e6dc <_svfprintf_r+0x24c>
    f436:	ldr	r3, [sp, #12]
    f438:	lsls	r7, r3, #27
    f43a:	bmi.n	f454 <_svfprintf_r+0xfc4>
    f43c:	ldr	r3, [sp, #12]
    f43e:	lsls	r6, r3, #25
    f440:	bpl.n	f454 <_svfprintf_r+0xfc4>
    f442:	ldr	r2, [sp, #40]	; 0x28
    f444:	ldr	r3, [r2, #0]
    f446:	adds	r2, #4
    f448:	str	r2, [sp, #40]	; 0x28
    f44a:	ldrh.w	r2, [sp, #28]
    f44e:	strh	r2, [r3, #0]
    f450:	b.w	e4de <_svfprintf_r+0x4e>
    f454:	ldr	r2, [sp, #40]	; 0x28
    f456:	ldr	r3, [r2, #0]
    f458:	adds	r2, #4
    f45a:	str	r2, [sp, #40]	; 0x28
    f45c:	ldr	r2, [sp, #28]
    f45e:	str	r2, [r3, #0]
    f460:	b.w	e4de <_svfprintf_r+0x4e>
    f464:	ldrd	r0, r1, [sp, #64]	; 0x40
    f468:	mov	r2, r0
    f46a:	mov	r3, r1
    f46c:	bl	bd00 <__aeabi_dcmpun>
    f470:	cmp	r0, #0
    f472:	bne.w	fa70 <_svfprintf_r+0x15e0>
    f476:	ldr	r3, [sp, #52]	; 0x34
    f478:	cmp.w	fp, #4294967295
    f47c:	bic.w	r7, r3, #32
    f480:	beq.w	f952 <_svfprintf_r+0x14c2>
    f484:	cmp	r7, #71	; 0x47
    f486:	beq.w	f78e <_svfprintf_r+0x12fe>
    f48a:	ldr	r3, [sp, #68]	; 0x44
    f48c:	ldr	r2, [sp, #12]
    f48e:	cmp	r3, #0
    f490:	orr.w	r2, r2, #256	; 0x100
    f494:	str	r2, [sp, #44]	; 0x2c
    f496:	blt.w	f98a <_svfprintf_r+0x14fa>
    f49a:	vldr	d7, [sp, #64]	; 0x40
    f49e:	vstr	d7, [sp, #96]	; 0x60
    f4a2:	movs	r3, #0
    f4a4:	str	r3, [sp, #16]
    f4a6:	ldr	r3, [sp, #52]	; 0x34
    f4a8:	cmp	r3, #102	; 0x66
    f4aa:	beq.w	f958 <_svfprintf_r+0x14c8>
    f4ae:	cmp	r3, #70	; 0x46
    f4b0:	beq.w	f73e <_svfprintf_r+0x12ae>
    f4b4:	cmp	r7, #69	; 0x45
    f4b6:	ite	eq
    f4b8:	addeq.w	r5, fp, #1
    f4bc:	movne	r5, fp
    f4be:	add	r2, sp, #132	; 0x84
    f4c0:	add	r3, sp, #120	; 0x78
    f4c2:	str	r2, [sp, #4]
    f4c4:	str	r3, [sp, #0]
    f4c6:	mov	r2, r5
    f4c8:	add	r3, sp, #116	; 0x74
    f4ca:	movs	r1, #2
    f4cc:	vldr	d0, [sp, #96]	; 0x60
    f4d0:	ldr	r0, [sp, #24]
    f4d2:	bl	10c98 <_dtoa_r>
    f4d6:	ldr	r3, [sp, #52]	; 0x34
    f4d8:	cmp	r3, #103	; 0x67
    f4da:	mov	r6, r0
    f4dc:	bne.w	f9b6 <_svfprintf_r+0x1526>
    f4e0:	ldr	r3, [sp, #12]
    f4e2:	lsls	r2, r3, #31
    f4e4:	bpl.w	fa5a <_svfprintf_r+0x15ca>
    f4e8:	adds	r4, r6, r5
    f4ea:	movs	r2, #0
    f4ec:	movs	r3, #0
    f4ee:	ldrd	r0, r1, [sp, #96]	; 0x60
    f4f2:	bl	bc9c <__aeabi_dcmpeq>
    f4f6:	cmp	r0, #0
    f4f8:	bne.w	f816 <_svfprintf_r+0x1386>
    f4fc:	ldr	r3, [sp, #132]	; 0x84
    f4fe:	cmp	r4, r3
    f500:	bls.n	f510 <_svfprintf_r+0x1080>
    f502:	movs	r1, #48	; 0x30
    f504:	adds	r2, r3, #1
    f506:	str	r2, [sp, #132]	; 0x84
    f508:	strb	r1, [r3, #0]
    f50a:	ldr	r3, [sp, #132]	; 0x84
    f50c:	cmp	r4, r3
    f50e:	bhi.n	f504 <_svfprintf_r+0x1074>
    f510:	subs	r3, r3, r6
    f512:	cmp	r7, #71	; 0x47
    f514:	str	r3, [sp, #56]	; 0x38
    f516:	beq.w	f808 <_svfprintf_r+0x1378>
    f51a:	ldr	r3, [sp, #52]	; 0x34
    f51c:	cmp	r3, #101	; 0x65
    f51e:	ble.w	f9d4 <_svfprintf_r+0x1544>
    f522:	ldr	r3, [sp, #52]	; 0x34
    f524:	cmp	r3, #102	; 0x66
    f526:	ldr	r3, [sp, #116]	; 0x74
    f528:	str	r3, [sp, #60]	; 0x3c
    f52a:	beq.w	f9ee <_svfprintf_r+0x155e>
    f52e:	ldr	r2, [sp, #60]	; 0x3c
    f530:	ldr	r1, [sp, #56]	; 0x38
    f532:	cmp	r2, r1
    f534:	blt.w	f99c <_svfprintf_r+0x150c>
    f538:	ldr	r3, [sp, #12]
    f53a:	lsls	r1, r3, #31
    f53c:	bmi.w	fa5e <_svfprintf_r+0x15ce>
    f540:	bic.w	r3, r2, r2, asr #31
    f544:	str	r2, [sp, #36]	; 0x24
    f546:	movs	r2, #103	; 0x67
    f548:	str	r2, [sp, #52]	; 0x34
    f54a:	ldr	r2, [sp, #16]
    f54c:	cmp	r2, #0
    f54e:	bne.w	f7b0 <_svfprintf_r+0x1320>
    f552:	str	r3, [sp, #16]
    f554:	ldr	r3, [sp, #44]	; 0x2c
    f556:	str	r3, [sp, #12]
    f558:	mov	fp, r2
    f55a:	ldrb.w	r7, [sp, #111]	; 0x6f
    f55e:	b.w	e834 <_svfprintf_r+0x3a4>
    f562:	bic.w	r7, r7, #7
    f566:	vldr	d7, [r7]
    f56a:	add.w	r3, r7, #8
    f56e:	vstr	d7, [sp, #64]	; 0x40
    f572:	str	r3, [sp, #40]	; 0x28
    f574:	b.w	ea8c <_svfprintf_r+0x5fc>
    f578:	ldr	r1, [sp, #40]	; 0x28
    f57a:	strb.w	r3, [sp, #111]	; 0x6f
    f57e:	cmp.w	fp, #0
    f582:	ldr	r4, [r1, #0]
    f584:	add.w	r7, r1, #4
    f588:	mov.w	r5, #0
    f58c:	bge.w	f6e8 <_svfprintf_r+0x1258>
    f590:	str	r7, [sp, #40]	; 0x28
    f592:	movs	r7, #0
    f594:	b.w	e6dc <_svfprintf_r+0x24c>
    f598:	ldr	r1, [sp, #12]
    f59a:	ands.w	r3, r1, #64	; 0x40
    f59e:	beq.w	f23e <_svfprintf_r+0xdae>
    f5a2:	ldr	r0, [sp, #40]	; 0x28
    f5a4:	strb.w	r2, [sp, #111]	; 0x6f
    f5a8:	mov	r3, r0
    f5aa:	cmp.w	fp, #0
    f5ae:	add.w	r3, r3, #4
    f5b2:	ldrh	r4, [r0, #0]
    f5b4:	mov.w	r5, #0
    f5b8:	blt.w	f79a <_svfprintf_r+0x130a>
    f5bc:	bic.w	r1, r1, #128	; 0x80
    f5c0:	str	r1, [sp, #12]
    f5c2:	orrs.w	r1, r4, r5
    f5c6:	str	r3, [sp, #40]	; 0x28
    f5c8:	mov	r7, r2
    f5ca:	bne.w	e7ec <_svfprintf_r+0x35c>
    f5ce:	b.w	ebbc <_svfprintf_r+0x72c>
    f5d2:	ldr	r3, [sp, #12]
    f5d4:	ldr	r2, [sp, #40]	; 0x28
    f5d6:	tst.w	r3, #64	; 0x40
    f5da:	mov	r3, r2
    f5dc:	beq.w	f7a4 <_svfprintf_r+0x1314>
    f5e0:	adds	r3, #4
    f5e2:	ldrh	r4, [r2, #0]
    f5e4:	str	r3, [sp, #40]	; 0x28
    f5e6:	movs	r5, #0
    f5e8:	b.w	ebf6 <_svfprintf_r+0x766>
    f5ec:	mov	r4, r2
    f5ee:	adds	r3, #1
    f5f0:	ldr	r2, [sp, #44]	; 0x2c
    f5f2:	str	r3, [sp, #144]	; 0x90
    f5f4:	add	r4, r5
    f5f6:	cmp	r3, #7
    f5f8:	str	r4, [sp, #148]	; 0x94
    f5fa:	stmia.w	r9, {r2, r5}
    f5fe:	bgt.w	f2b6 <_svfprintf_r+0xe26>
    f602:	add.w	r9, r9, #8
    f606:	b.n	f2cc <_svfprintf_r+0xe3c>
    f608:	.word	0x000141e0
    f60c:	movs	r7, #0
    f60e:	cmp	fp, r7
    f610:	strb.w	r7, [sp, #111]	; 0x6f
    f614:	blt.w	ee08 <_svfprintf_r+0x978>
    f618:	ldr	r3, [sp, #12]
    f61a:	bic.w	r3, r3, #128	; 0x80
    f61e:	str	r3, [sp, #12]
    f620:	b.w	eda4 <_svfprintf_r+0x914>
    f624:	add	r2, sp, #140	; 0x8c
    f626:	ldr	r1, [sp, #20]
    f628:	ldr	r0, [sp, #24]
    f62a:	bl	134d4 <__ssprint_r>
    f62e:	cmp	r0, #0
    f630:	bne.w	e684 <_svfprintf_r+0x1f4>
    f634:	ldr	r4, [sp, #148]	; 0x94
    f636:	add.w	r9, sp, #192	; 0xc0
    f63a:	b.n	ee4c <_svfprintf_r+0x9bc>
    f63c:	ldr	r7, [sp, #40]	; 0x28
    f63e:	b.w	edfa <_svfprintf_r+0x96a>
    f642:	ldr	r3, [sp, #144]	; 0x90
    f644:	ldr	r2, [pc, #736]	; (f928 <_svfprintf_r+0x1498>)
    f646:	str.w	r2, [r9]
    f64a:	adds	r3, #1
    f64c:	adds	r4, #1
    f64e:	movs	r2, #1
    f650:	cmp	r3, #7
    f652:	str	r4, [sp, #148]	; 0x94
    f654:	str	r3, [sp, #144]	; 0x90
    f656:	str.w	r2, [r9, #4]
    f65a:	bgt.w	f774 <_svfprintf_r+0x12e4>
    f65e:	add.w	r9, r9, #8
    f662:	cbnz	r5, f670 <_svfprintf_r+0x11e0>
    f664:	ldr	r3, [sp, #56]	; 0x38
    f666:	cbnz	r3, f670 <_svfprintf_r+0x11e0>
    f668:	ldr	r3, [sp, #12]
    f66a:	lsls	r7, r3, #31
    f66c:	bpl.w	e9bc <_svfprintf_r+0x52c>
    f670:	ldr	r3, [sp, #144]	; 0x90
    f672:	ldr	r1, [sp, #72]	; 0x48
    f674:	ldr	r2, [sp, #76]	; 0x4c
    f676:	str.w	r2, [r9]
    f67a:	adds	r3, #1
    f67c:	add	r4, r1
    f67e:	cmp	r3, #7
    f680:	str	r4, [sp, #148]	; 0x94
    f682:	str.w	r1, [r9, #4]
    f686:	str	r3, [sp, #144]	; 0x90
    f688:	bgt.w	fa26 <_svfprintf_r+0x1596>
    f68c:	add.w	r9, r9, #8
    f690:	negs	r5, r5
    f692:	cmp	r5, #0
    f694:	ble.w	f7ec <_svfprintf_r+0x135c>
    f698:	ldr	r2, [pc, #656]	; (f92c <_svfprintf_r+0x149c>)
    f69a:	str	r2, [sp, #44]	; 0x2c
    f69c:	cmp	r5, #16
    f69e:	ble.w	f834 <_svfprintf_r+0x13a4>
    f6a2:	mov	r2, r4
    f6a4:	movs	r7, #16
    f6a6:	ldr.w	fp, [sp, #24]
    f6aa:	ldr	r4, [sp, #20]
    f6ac:	b.n	f6ba <_svfprintf_r+0x122a>
    f6ae:	add.w	r9, r9, #8
    f6b2:	subs	r5, #16
    f6b4:	cmp	r5, #16
    f6b6:	ble.w	f832 <_svfprintf_r+0x13a2>
    f6ba:	adds	r3, #1
    f6bc:	adds	r2, #16
    f6be:	cmp	r3, #7
    f6c0:	str	r2, [sp, #148]	; 0x94
    f6c2:	str	r3, [sp, #144]	; 0x90
    f6c4:	str.w	sl, [r9]
    f6c8:	str.w	r7, [r9, #4]
    f6cc:	ble.n	f6ae <_svfprintf_r+0x121e>
    f6ce:	add	r2, sp, #140	; 0x8c
    f6d0:	mov	r1, r4
    f6d2:	mov	r0, fp
    f6d4:	bl	134d4 <__ssprint_r>
    f6d8:	cmp	r0, #0
    f6da:	bne.w	e684 <_svfprintf_r+0x1f4>
    f6de:	ldr	r2, [sp, #148]	; 0x94
    f6e0:	ldr	r3, [sp, #144]	; 0x90
    f6e2:	add.w	r9, sp, #192	; 0xc0
    f6e6:	b.n	f6b2 <_svfprintf_r+0x1222>
    f6e8:	ldr	r2, [sp, #12]
    f6ea:	b.w	eb60 <_svfprintf_r+0x6d0>
    f6ee:	ldr	r2, [sp, #12]
    f6f0:	b.n	f20a <_svfprintf_r+0xd7a>
    f6f2:	ldr	r3, [sp, #12]
    f6f4:	orr.w	r3, r3, #32
    f6f8:	str	r3, [sp, #12]
    f6fa:	add.w	r8, r8, #1
    f6fe:	ldrb.w	r3, [r8]
    f702:	b.w	e544 <_svfprintf_r+0xb4>
    f706:	add	r2, sp, #140	; 0x8c
    f708:	ldr	r1, [sp, #20]
    f70a:	ldr	r0, [sp, #24]
    f70c:	bl	134d4 <__ssprint_r>
    f710:	cmp	r0, #0
    f712:	bne.w	e684 <_svfprintf_r+0x1f4>
    f716:	ldr	r4, [sp, #148]	; 0x94
    f718:	add.w	r9, sp, #192	; 0xc0
    f71c:	b.w	ee7c <_svfprintf_r+0x9ec>
    f720:	movs	r1, #64	; 0x40
    f722:	ldr	r0, [sp, #24]
    f724:	bl	c584 <_malloc_r>
    f728:	ldr	r2, [sp, #20]
    f72a:	str	r0, [r2, #0]
    f72c:	str	r0, [r2, #16]
    f72e:	cmp	r0, #0
    f730:	beq.w	fb1a <_svfprintf_r+0x168a>
    f734:	ldr	r2, [sp, #20]
    f736:	movs	r3, #64	; 0x40
    f738:	str	r3, [r2, #20]
    f73a:	b.w	e4be <_svfprintf_r+0x2e>
    f73e:	add	r2, sp, #132	; 0x84
    f740:	add	r3, sp, #120	; 0x78
    f742:	str	r2, [sp, #4]
    f744:	str	r3, [sp, #0]
    f746:	mov	r2, fp
    f748:	add	r3, sp, #116	; 0x74
    f74a:	movs	r1, #3
    f74c:	vldr	d0, [sp, #96]	; 0x60
    f750:	ldr	r0, [sp, #24]
    f752:	bl	10c98 <_dtoa_r>
    f756:	mov	r5, fp
    f758:	mov	r6, r0
    f75a:	ldr	r3, [sp, #52]	; 0x34
    f75c:	cmp	r3, #70	; 0x46
    f75e:	add.w	r4, r6, r5
    f762:	bne.w	f4ea <_svfprintf_r+0x105a>
    f766:	ldrb	r3, [r6, #0]
    f768:	cmp	r3, #48	; 0x30
    f76a:	beq.w	fa7c <_svfprintf_r+0x15ec>
    f76e:	ldr	r5, [sp, #116]	; 0x74
    f770:	add	r4, r5
    f772:	b.n	f4ea <_svfprintf_r+0x105a>
    f774:	add	r2, sp, #140	; 0x8c
    f776:	ldr	r1, [sp, #20]
    f778:	ldr	r0, [sp, #24]
    f77a:	bl	134d4 <__ssprint_r>
    f77e:	cmp	r0, #0
    f780:	bne.w	e684 <_svfprintf_r+0x1f4>
    f784:	ldr	r5, [sp, #116]	; 0x74
    f786:	ldr	r4, [sp, #148]	; 0x94
    f788:	add.w	r9, sp, #192	; 0xc0
    f78c:	b.n	f662 <_svfprintf_r+0x11d2>
    f78e:	cmp.w	fp, #0
    f792:	it	eq
    f794:	moveq.w	fp, #1
    f798:	b.n	f48a <_svfprintf_r+0xffa>
    f79a:	str	r3, [sp, #40]	; 0x28
    f79c:	mov	r7, r2
    f79e:	b.n	f25a <_svfprintf_r+0xdca>
    f7a0:	str	r3, [sp, #40]	; 0x28
    f7a2:	b.n	f592 <_svfprintf_r+0x1102>
    f7a4:	adds	r3, #4
    f7a6:	ldr	r4, [r2, #0]
    f7a8:	str	r3, [sp, #40]	; 0x28
    f7aa:	movs	r5, #0
    f7ac:	b.w	ebf6 <_svfprintf_r+0x766>
    f7b0:	movs	r7, #45	; 0x2d
    f7b2:	str	r3, [sp, #16]
    f7b4:	ldr	r3, [sp, #44]	; 0x2c
    f7b6:	str	r3, [sp, #12]
    f7b8:	strb.w	r7, [sp, #111]	; 0x6f
    f7bc:	mov.w	fp, #0
    f7c0:	b.w	e836 <_svfprintf_r+0x3a6>
    f7c4:	mov	r0, r6
    f7c6:	bl	d280 <strlen>
    f7ca:	mov	fp, r4
    f7cc:	mov	r3, r0
    f7ce:	str	r0, [sp, #36]	; 0x24
    f7d0:	b.w	ed18 <_svfprintf_r+0x888>
    f7d4:	add	r2, sp, #140	; 0x8c
    f7d6:	ldr	r1, [sp, #20]
    f7d8:	ldr	r0, [sp, #24]
    f7da:	bl	134d4 <__ssprint_r>
    f7de:	cmp	r0, #0
    f7e0:	bne.w	e684 <_svfprintf_r+0x1f4>
    f7e4:	ldr	r4, [sp, #148]	; 0x94
    f7e6:	ldr	r3, [sp, #144]	; 0x90
    f7e8:	add.w	r9, sp, #192	; 0xc0
    f7ec:	ldr	r1, [sp, #56]	; 0x38
    f7ee:	str.w	r6, [r9]
    f7f2:	adds	r3, #1
    f7f4:	add	r4, r1
    f7f6:	cmp	r3, #7
    f7f8:	str	r4, [sp, #148]	; 0x94
    f7fa:	str	r3, [sp, #144]	; 0x90
    f7fc:	str.w	r1, [r9, #4]
    f800:	ble.w	e9b8 <_svfprintf_r+0x528>
    f804:	b.w	effe <_svfprintf_r+0xb6e>
    f808:	ldr	r3, [sp, #116]	; 0x74
    f80a:	adds	r5, r3, #3
    f80c:	blt.n	f84c <_svfprintf_r+0x13bc>
    f80e:	cmp	fp, r3
    f810:	blt.n	f84c <_svfprintf_r+0x13bc>
    f812:	str	r3, [sp, #60]	; 0x3c
    f814:	b.n	f52e <_svfprintf_r+0x109e>
    f816:	mov	r3, r4
    f818:	b.n	f510 <_svfprintf_r+0x1080>
    f81a:	add	r2, sp, #140	; 0x8c
    f81c:	ldr	r1, [sp, #20]
    f81e:	ldr	r0, [sp, #24]
    f820:	bl	134d4 <__ssprint_r>
    f824:	cmp	r0, #0
    f826:	bne.w	e684 <_svfprintf_r+0x1f4>
    f82a:	ldr	r4, [sp, #148]	; 0x94
    f82c:	add.w	r9, sp, #192	; 0xc0
    f830:	b.n	f0cc <_svfprintf_r+0xc3c>
    f832:	mov	r4, r2
    f834:	adds	r3, #1
    f836:	ldr	r2, [sp, #44]	; 0x2c
    f838:	str	r3, [sp, #144]	; 0x90
    f83a:	add	r4, r5
    f83c:	cmp	r3, #7
    f83e:	str	r4, [sp, #148]	; 0x94
    f840:	stmia.w	r9, {r2, r5}
    f844:	bgt.n	f7d4 <_svfprintf_r+0x1344>
    f846:	add.w	r9, r9, #8
    f84a:	b.n	f7ec <_svfprintf_r+0x135c>
    f84c:	ldr	r2, [sp, #52]	; 0x34
    f84e:	subs	r2, #2
    f850:	str	r2, [sp, #52]	; 0x34
    f852:	subs	r3, #1
    f854:	cmp	r3, #0
    f856:	ldrb.w	r2, [sp, #52]	; 0x34
    f85a:	str	r3, [sp, #116]	; 0x74
    f85c:	it	lt
    f85e:	neglt	r3, r3
    f860:	strb.w	r2, [sp, #124]	; 0x7c
    f864:	ite	lt
    f866:	movlt	r2, #45	; 0x2d
    f868:	movge	r2, #43	; 0x2b
    f86a:	cmp	r3, #9
    f86c:	strb.w	r2, [sp, #125]	; 0x7d
    f870:	ble.w	fa4a <_svfprintf_r+0x15ba>
    f874:	add.w	r0, sp, #139	; 0x8b
    f878:	mov	r4, r0
    f87a:	ldr	r2, [pc, #180]	; (f930 <_svfprintf_r+0x14a0>)
    f87c:	smull	r2, r1, r2, r3
    f880:	asrs	r2, r3, #31
    f882:	rsb	r2, r2, r1, asr #2
    f886:	add.w	r1, r2, r2, lsl #2
    f88a:	sub.w	r3, r3, r1, lsl #1
    f88e:	add.w	r1, r3, #48	; 0x30
    f892:	cmp	r2, #9
    f894:	mov	r3, r2
    f896:	strb.w	r1, [r4, #-1]!
    f89a:	bgt.n	f87a <_svfprintf_r+0x13ea>
    f89c:	mov	r1, r4
    f89e:	adds	r3, #48	; 0x30
    f8a0:	uxtb	r2, r3
    f8a2:	strb.w	r2, [r1, #-1]!
    f8a6:	cmp	r0, r1
    f8a8:	bls.w	fb14 <_svfprintf_r+0x1684>
    f8ac:	add.w	r1, sp, #126	; 0x7e
    f8b0:	mov	r3, r4
    f8b2:	b.n	f8b8 <_svfprintf_r+0x1428>
    f8b4:	ldrb.w	r2, [r3], #1
    f8b8:	strb.w	r2, [r1], #1
    f8bc:	cmp	r0, r3
    f8be:	bne.n	f8b4 <_svfprintf_r+0x1424>
    f8c0:	adds	r3, r0, #1
    f8c2:	subs	r3, r3, r4
    f8c4:	add.w	r2, sp, #126	; 0x7e
    f8c8:	add	r3, r2
    f8ca:	add	r2, sp, #124	; 0x7c
    f8cc:	subs	r3, r3, r2
    f8ce:	ldr	r2, [sp, #56]	; 0x38
    f8d0:	str	r3, [sp, #84]	; 0x54
    f8d2:	cmp	r2, #1
    f8d4:	add	r3, r2
    f8d6:	str	r3, [sp, #36]	; 0x24
    f8d8:	ble.w	faaa <_svfprintf_r+0x161a>
    f8dc:	ldr	r3, [sp, #36]	; 0x24
    f8de:	ldr	r2, [sp, #72]	; 0x48
    f8e0:	add	r3, r2
    f8e2:	movs	r2, #0
    f8e4:	str	r3, [sp, #36]	; 0x24
    f8e6:	str	r2, [sp, #60]	; 0x3c
    f8e8:	bic.w	r3, r3, r3, asr #31
    f8ec:	b.n	f54a <_svfprintf_r+0x10ba>
    f8ee:	add	r2, sp, #140	; 0x8c
    f8f0:	ldr	r1, [sp, #20]
    f8f2:	ldr	r0, [sp, #24]
    f8f4:	bl	134d4 <__ssprint_r>
    f8f8:	cmp	r0, #0
    f8fa:	bne.w	e684 <_svfprintf_r+0x1f4>
    f8fe:	ldr	r3, [sp, #116]	; 0x74
    f900:	ldr	r4, [sp, #148]	; 0x94
    f902:	add.w	r9, sp, #192	; 0xc0
    f906:	b.n	f2e0 <_svfprintf_r+0xe50>
    f908:	add	r2, sp, #140	; 0x8c
    f90a:	ldr	r1, [sp, #20]
    f90c:	ldr	r0, [sp, #24]
    f90e:	bl	134d4 <__ssprint_r>
    f912:	cmp	r0, #0
    f914:	bne.w	e684 <_svfprintf_r+0x1f4>
    f918:	ldr	r3, [sp, #116]	; 0x74
    f91a:	ldr	r2, [sp, #56]	; 0x38
    f91c:	ldr	r4, [sp, #148]	; 0x94
    f91e:	subs	r3, r2, r3
    f920:	add.w	r9, sp, #192	; 0xc0
    f924:	b.n	f310 <_svfprintf_r+0xe80>
    f926:	nop
    f928:	.word	0x00014230
    f92c:	.word	0x000141e0
    f930:	.word	0x66666667
    f934:	cmp	r5, #6
    f936:	mov	r3, r5
    f938:	it	cs
    f93a:	movcs	r3, #6
    f93c:	str	r3, [sp, #36]	; 0x24
    f93e:	bic.w	r3, r3, r3, asr #31
    f942:	mov	fp, r6
    f944:	str	r7, [sp, #40]	; 0x28
    f946:	str	r6, [sp, #60]	; 0x3c
    f948:	mov	r7, r6
    f94a:	str	r3, [sp, #16]
    f94c:	ldr	r6, [pc, #536]	; (fb68 <_svfprintf_r+0x16d8>)
    f94e:	b.w	e834 <_svfprintf_r+0x3a4>
    f952:	mov.w	fp, #6
    f956:	b.n	f48a <_svfprintf_r+0xffa>
    f958:	add	r2, sp, #132	; 0x84
    f95a:	add	r3, sp, #120	; 0x78
    f95c:	str	r2, [sp, #4]
    f95e:	str	r3, [sp, #0]
    f960:	mov	r2, fp
    f962:	add	r3, sp, #116	; 0x74
    f964:	movs	r1, #3
    f966:	vldr	d0, [sp, #96]	; 0x60
    f96a:	ldr	r0, [sp, #24]
    f96c:	bl	10c98 <_dtoa_r>
    f970:	mov	r5, fp
    f972:	mov	r6, r0
    f974:	add.w	r4, r0, fp
    f978:	b.n	f766 <_svfprintf_r+0x12d6>
    f97a:	movs	r7, #45	; 0x2d
    f97c:	strb.w	r7, [sp, #111]	; 0x6f
    f980:	b.w	eada <_svfprintf_r+0x64a>
    f984:	str	r3, [sp, #12]
    f986:	b.w	ec32 <_svfprintf_r+0x7a2>
    f98a:	ldrd	r1, r2, [sp, #64]	; 0x40
    f98e:	add.w	r3, r2, #2147483648	; 0x80000000
    f992:	str	r3, [sp, #100]	; 0x64
    f994:	movs	r3, #45	; 0x2d
    f996:	str	r1, [sp, #96]	; 0x60
    f998:	str	r3, [sp, #16]
    f99a:	b.n	f4a6 <_svfprintf_r+0x1016>
    f99c:	ldr	r2, [sp, #72]	; 0x48
    f99e:	ldr	r3, [sp, #56]	; 0x38
    f9a0:	add	r3, r2
    f9a2:	ldr	r2, [sp, #60]	; 0x3c
    f9a4:	str	r3, [sp, #36]	; 0x24
    f9a6:	cmp	r2, #0
    f9a8:	ble.w	fabe <_svfprintf_r+0x162e>
    f9ac:	movs	r2, #103	; 0x67
    f9ae:	bic.w	r3, r3, r3, asr #31
    f9b2:	str	r2, [sp, #52]	; 0x34
    f9b4:	b.n	f54a <_svfprintf_r+0x10ba>
    f9b6:	ldr	r3, [sp, #52]	; 0x34
    f9b8:	cmp	r3, #71	; 0x47
    f9ba:	bne.w	f4e8 <_svfprintf_r+0x1058>
    f9be:	ldr	r3, [sp, #12]
    f9c0:	lsls	r3, r3, #31
    f9c2:	bmi.w	f75a <_svfprintf_r+0x12ca>
    f9c6:	ldr	r3, [sp, #132]	; 0x84
    f9c8:	cmp	r7, #71	; 0x47
    f9ca:	sub.w	r3, r3, r6
    f9ce:	str	r3, [sp, #56]	; 0x38
    f9d0:	beq.w	f808 <_svfprintf_r+0x1378>
    f9d4:	ldr	r3, [sp, #116]	; 0x74
    f9d6:	b.n	f852 <_svfprintf_r+0x13c2>
    f9d8:	bic.w	r3, r5, r5, asr #31
    f9dc:	str	r7, [sp, #40]	; 0x28
    f9de:	str	r3, [sp, #16]
    f9e0:	str	r5, [sp, #36]	; 0x24
    f9e2:	mov	fp, r0
    f9e4:	str	r0, [sp, #60]	; 0x3c
    f9e6:	ldrb.w	r7, [sp, #111]	; 0x6f
    f9ea:	b.w	e834 <_svfprintf_r+0x3a4>
    f9ee:	cmp	r3, #0
    f9f0:	ble.n	face <_svfprintf_r+0x163e>
    f9f2:	cmp.w	fp, #0
    f9f6:	bne.n	fa98 <_svfprintf_r+0x1608>
    f9f8:	ldr	r2, [sp, #12]
    f9fa:	lsls	r4, r2, #31
    f9fc:	bmi.n	fa98 <_svfprintf_r+0x1608>
    f9fe:	mov	r2, r3
    fa00:	str	r2, [sp, #36]	; 0x24
    fa02:	bic.w	r3, r3, r3, asr #31
    fa06:	b.n	f54a <_svfprintf_r+0x10ba>
    fa08:	ldr	r3, [sp, #12]
    fa0a:	lsls	r3, r3, #31
    fa0c:	mov	r7, fp
    fa0e:	bpl.n	fa1c <_svfprintf_r+0x158c>
    fa10:	add	r6, sp, #256	; 0x100
    fa12:	movs	r3, #48	; 0x30
    fa14:	strb.w	r3, [r6, #-65]!
    fa18:	b.w	e820 <_svfprintf_r+0x390>
    fa1c:	str.w	fp, [sp, #36]	; 0x24
    fa20:	add	r6, sp, #192	; 0xc0
    fa22:	b.w	e826 <_svfprintf_r+0x396>
    fa26:	add	r2, sp, #140	; 0x8c
    fa28:	ldr	r1, [sp, #20]
    fa2a:	ldr	r0, [sp, #24]
    fa2c:	bl	134d4 <__ssprint_r>
    fa30:	cmp	r0, #0
    fa32:	bne.w	e684 <_svfprintf_r+0x1f4>
    fa36:	ldr	r5, [sp, #116]	; 0x74
    fa38:	ldr	r4, [sp, #148]	; 0x94
    fa3a:	ldr	r3, [sp, #144]	; 0x90
    fa3c:	add.w	r9, sp, #192	; 0xc0
    fa40:	b.n	f690 <_svfprintf_r+0x1200>
    fa42:	mov	r8, r4
    fa44:	movs	r5, #0
    fa46:	b.w	e548 <_svfprintf_r+0xb8>
    fa4a:	adds	r3, #48	; 0x30
    fa4c:	movs	r2, #48	; 0x30
    fa4e:	strb.w	r3, [sp, #127]	; 0x7f
    fa52:	strb.w	r2, [sp, #126]	; 0x7e
    fa56:	add	r3, sp, #128	; 0x80
    fa58:	b.n	f8ca <_svfprintf_r+0x143a>
    fa5a:	ldr	r3, [sp, #132]	; 0x84
    fa5c:	b.n	f510 <_svfprintf_r+0x1080>
    fa5e:	ldr	r2, [sp, #72]	; 0x48
    fa60:	ldr	r3, [sp, #60]	; 0x3c
    fa62:	add	r3, r2
    fa64:	movs	r2, #103	; 0x67
    fa66:	str	r3, [sp, #36]	; 0x24
    fa68:	str	r2, [sp, #52]	; 0x34
    fa6a:	bic.w	r3, r3, r3, asr #31
    fa6e:	b.n	f54a <_svfprintf_r+0x10ba>
    fa70:	ldr	r6, [pc, #248]	; (fb6c <_svfprintf_r+0x16dc>)
    fa72:	ldr	r3, [pc, #252]	; (fb70 <_svfprintf_r+0x16e0>)
    fa74:	ldrb.w	r7, [sp, #111]	; 0x6f
    fa78:	b.w	eade <_svfprintf_r+0x64e>
    fa7c:	movs	r2, #0
    fa7e:	movs	r3, #0
    fa80:	ldrd	r0, r1, [sp, #96]	; 0x60
    fa84:	bl	bc9c <__aeabi_dcmpeq>
    fa88:	cmp	r0, #0
    fa8a:	bne.w	f76e <_svfprintf_r+0x12de>
    fa8e:	rsb	r5, r5, #1
    fa92:	str	r5, [sp, #116]	; 0x74
    fa94:	add	r4, r5
    fa96:	b.n	f4ea <_svfprintf_r+0x105a>
    fa98:	ldr	r3, [sp, #60]	; 0x3c
    fa9a:	ldr	r2, [sp, #72]	; 0x48
    fa9c:	adds	r5, r3, r2
    fa9e:	add.w	r3, r5, fp
    faa2:	str	r3, [sp, #36]	; 0x24
    faa4:	bic.w	r3, r3, r3, asr #31
    faa8:	b.n	f54a <_svfprintf_r+0x10ba>
    faaa:	ldr	r3, [sp, #12]
    faac:	ands.w	r3, r3, #1
    fab0:	bne.w	f8dc <_svfprintf_r+0x144c>
    fab4:	str	r3, [sp, #60]	; 0x3c
    fab6:	ldr	r3, [sp, #36]	; 0x24
    fab8:	bic.w	r3, r3, r3, asr #31
    fabc:	b.n	f54a <_svfprintf_r+0x10ba>
    fabe:	ldr	r3, [sp, #60]	; 0x3c
    fac0:	ldr	r2, [sp, #36]	; 0x24
    fac2:	rsb	r3, r3, #1
    fac6:	add	r2, r3
    fac8:	mov	r3, r2
    faca:	str	r2, [sp, #36]	; 0x24
    facc:	b.n	f9ac <_svfprintf_r+0x151c>
    face:	cmp.w	fp, #0
    fad2:	bne.n	fada <_svfprintf_r+0x164a>
    fad4:	ldr	r3, [sp, #12]
    fad6:	lsls	r0, r3, #31
    fad8:	bpl.n	faea <_svfprintf_r+0x165a>
    fada:	ldr	r3, [sp, #72]	; 0x48
    fadc:	adds	r5, r3, #1
    fade:	add.w	r3, r5, fp
    fae2:	str	r3, [sp, #36]	; 0x24
    fae4:	bic.w	r3, r3, r3, asr #31
    fae8:	b.n	f54a <_svfprintf_r+0x10ba>
    faea:	movs	r3, #1
    faec:	str	r3, [sp, #36]	; 0x24
    faee:	b.n	f54a <_svfprintf_r+0x10ba>
    faf0:	ldr	r0, [sp, #40]	; 0x28
    faf2:	ldrb.w	r3, [r8, #1]
    faf6:	ldr	r5, [r0, #0]
    faf8:	adds	r0, #4
    fafa:	cmp	r5, #0
    fafc:	str	r0, [sp, #40]	; 0x28
    fafe:	mov	r8, r4
    fb00:	bge.w	e544 <_svfprintf_r+0xb4>
    fb04:	mov.w	r5, #4294967295
    fb08:	b.w	e544 <_svfprintf_r+0xb4>
    fb0c:	strb.w	r1, [sp, #111]	; 0x6f
    fb10:	b.w	e6a6 <_svfprintf_r+0x216>
    fb14:	add.w	r3, sp, #126	; 0x7e
    fb18:	b.n	f8ca <_svfprintf_r+0x143a>
    fb1a:	ldr	r2, [sp, #24]
    fb1c:	movs	r3, #12
    fb1e:	str	r3, [r2, #0]
    fb20:	mov.w	r0, #4294967295
    fb24:	b.w	e696 <_svfprintf_r+0x206>
    fb28:	strb.w	r1, [sp, #111]	; 0x6f
    fb2c:	b.w	e7a0 <_svfprintf_r+0x310>
    fb30:	strb.w	r1, [sp, #111]	; 0x6f
    fb34:	b.w	ea6c <_svfprintf_r+0x5dc>
    fb38:	strb.w	r1, [sp, #111]	; 0x6f
    fb3c:	b.w	ebda <_svfprintf_r+0x74a>
    fb40:	strb.w	r1, [sp, #111]	; 0x6f
    fb44:	b.w	eb7e <_svfprintf_r+0x6ee>
    fb48:	strb.w	r1, [sp, #111]	; 0x6f
    fb4c:	b.w	eb2a <_svfprintf_r+0x69a>
    fb50:	strb.w	r1, [sp, #111]	; 0x6f
    fb54:	b.w	edc2 <_svfprintf_r+0x932>
    fb58:	strb.w	r1, [sp, #111]	; 0x6f
    fb5c:	b.w	ed80 <_svfprintf_r+0x8f0>
    fb60:	strb.w	r1, [sp, #111]	; 0x6f
    fb64:	b.w	ed44 <_svfprintf_r+0x8b4>
    fb68:	.word	0x00014228
    fb6c:	.word	0x000141fc
    fb70:	.word	0x000141f8

0000fb74 <__ssvfscanf_r>:
    fb74:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb78:	mov	fp, r1
    fb7a:	ldrsh.w	r1, [r1, #12]
    fb7e:	sub.w	sp, sp, #692	; 0x2b4
    fb82:	mov	sl, r0
    fb84:	lsls	r0, r1, #18
    fb86:	mov	r4, r2
    fb88:	str	r3, [sp, #20]
    fb8a:	bmi.n	fba0 <__ssvfscanf_r+0x2c>
    fb8c:	ldr.w	r3, [fp, #100]	; 0x64
    fb90:	orr.w	r1, r1, #8192	; 0x2000
    fb94:	bic.w	r3, r3, #8192	; 0x2000
    fb98:	strh.w	r1, [fp, #12]
    fb9c:	str.w	r3, [fp, #100]	; 0x64
    fba0:	mov	r6, r4
    fba2:	movs	r3, #0
    fba4:	str	r3, [sp, #28]
    fba6:	str	r3, [sp, #16]
    fba8:	mov	r7, r3
    fbaa:	str	r3, [sp, #24]
    fbac:	ldrb.w	r3, [r6], #1
    fbb0:	str	r3, [sp, #68]	; 0x44
    fbb2:	cbz	r3, fc10 <__ssvfscanf_r+0x9c>
    fbb4:	bl	c550 <__locale_ctype_ptr>
    fbb8:	ldr	r2, [sp, #68]	; 0x44
    fbba:	add	r0, r2
    fbbc:	ldrb	r3, [r0, #1]
    fbbe:	and.w	r3, r3, #8
    fbc2:	and.w	r5, r3, #255	; 0xff
    fbc6:	cbz	r3, fc1a <__ssvfscanf_r+0xa6>
    fbc8:	ldr.w	r3, [fp, #4]
    fbcc:	b.n	fbf2 <__ssvfscanf_r+0x7e>
    fbce:	bl	c550 <__locale_ctype_ptr>
    fbd2:	ldr.w	r3, [fp]
    fbd6:	ldrb	r2, [r3, #0]
    fbd8:	add	r0, r2
    fbda:	adds	r3, #1
    fbdc:	ldrb	r2, [r0, #1]
    fbde:	lsls	r1, r2, #28
    fbe0:	bpl.n	fc02 <__ssvfscanf_r+0x8e>
    fbe2:	ldr.w	r2, [fp, #4]
    fbe6:	str.w	r3, [fp]
    fbea:	subs	r3, r2, #1
    fbec:	adds	r7, #1
    fbee:	str.w	r3, [fp, #4]
    fbf2:	cmp	r3, #0
    fbf4:	bgt.n	fbce <__ssvfscanf_r+0x5a>
    fbf6:	mov	r1, fp
    fbf8:	mov	r0, sl
    fbfa:	bl	13658 <__ssrefill_r>
    fbfe:	cmp	r0, #0
    fc00:	beq.n	fbce <__ssvfscanf_r+0x5a>
    fc02:	mov	r4, r6
    fc04:	mov	r6, r4
    fc06:	ldrb.w	r3, [r6], #1
    fc0a:	str	r3, [sp, #68]	; 0x44
    fc0c:	cmp	r3, #0
    fc0e:	bne.n	fbb4 <__ssvfscanf_r+0x40>
    fc10:	ldr	r0, [sp, #24]
    fc12:	add.w	sp, sp, #692	; 0x2b4
    fc16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc1a:	cmp	r2, #37	; 0x25
    fc1c:	bne.w	fd28 <__ssvfscanf_r+0x1b4>
    fc20:	ldrb.w	r8, [r4, #1]
    fc24:	mov	r4, r5
    fc26:	adds	r3, r6, #1
    fc28:	cmp.w	r8, #120	; 0x78
    fc2c:	bhi.w	100b6 <__ssvfscanf_r+0x542>
    fc30:	tbh	[pc, r8, lsl #1]
    fc34:	.word	0x02410092
    fc38:	.word	0x02410241
    fc3c:	.word	0x02410241
    fc40:	.word	0x02410241
    fc44:	.word	0x02410241
    fc48:	.word	0x02410241
    fc4c:	.word	0x02410241
    fc50:	.word	0x02410241
    fc54:	.word	0x02410241
    fc58:	.word	0x02410241
    fc5c:	.word	0x02410241
    fc60:	.word	0x02410241
    fc64:	.word	0x02410241
    fc68:	.word	0x02410241
    fc6c:	.word	0x02410241
    fc70:	.word	0x02410241
    fc74:	.word	0x02410241
    fc78:	.word	0x02410241
    fc7c:	.word	0x00790241
    fc80:	.word	0x02410241
    fc84:	.word	0x02410241
    fc88:	.word	0x024101d8
    fc8c:	.word	0x02410241
    fc90:	.word	0x02410241
    fc94:	.word	0x01cf01cf
    fc98:	.word	0x01cf01cf
    fc9c:	.word	0x01cf01cf
    fca0:	.word	0x01cf01cf
    fca4:	.word	0x01cf01cf
    fca8:	.word	0x02410241
    fcac:	.word	0x02410241
    fcb0:	.word	0x02410241
    fcb4:	.word	0x02410241
    fcb8:	.word	0x02410241
    fcbc:	.word	0x01b901c1
    fcc0:	.word	0x01b90241
    fcc4:	.word	0x02410241
    fcc8:	.word	0x02410241
    fccc:	.word	0x024101b3
    fcd0:	.word	0x01a30241
    fcd4:	.word	0x02410241
    fcd8:	.word	0x02410241
    fcdc:	.word	0x02410241
    fce0:	.word	0x02410241
    fce4:	.word	0x02410193
    fce8:	.word	0x01510241
    fcec:	.word	0x02410241
    fcf0:	.word	0x02410241
    fcf4:	.word	0x02410241
    fcf8:	.word	0x01220241
    fcfc:	.word	0x01b90188
    fd00:	.word	0x01b901b9
    fd04:	.word	0x0098011c
    fd08:	.word	0x02410241
    fd0c:	.word	0x024100d5
    fd10:	.word	0x0101010d
    fd14:	.word	0x024100f3
    fd18:	.word	0x00eb0241
    fd1c:	.word	0x00df0241
    fd20:	.word	0x02410241
    fd24:	.short	0x0193
    fd26:	mov	r6, r3
    fd28:	ldr.w	r3, [fp, #4]
    fd2c:	cmp	r3, #0
    fd2e:	ble.w	101d8 <__ssvfscanf_r+0x664>
    fd32:	ldr.w	r3, [fp]
    fd36:	ldrb.w	r2, [r6, #-1]
    fd3a:	ldrb	r1, [r3, #0]
    fd3c:	cmp	r1, r2
    fd3e:	bne.w	fc10 <__ssvfscanf_r+0x9c>
    fd42:	ldr.w	r2, [fp, #4]
    fd46:	adds	r3, #1
    fd48:	subs	r2, #1
    fd4a:	str.w	r3, [fp]
    fd4e:	adds	r7, #1
    fd50:	str.w	r2, [fp, #4]
    fd54:	mov	r4, r6
    fd56:	b.n	fc04 <__ssvfscanf_r+0x90>
    fd58:	mov.w	r0, #4294967295
    fd5c:	add.w	sp, sp, #692	; 0x2b4
    fd60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd64:	str	r3, [sp, #12]
    fd66:	ldr.w	r3, [fp, #4]
    fd6a:	cmp	r3, #0
    fd6c:	ble.w	10236 <__ssvfscanf_r+0x6c2>
    fd70:	ldr	r3, [pc, #736]	; (10054 <__ssvfscanf_r+0x4e0>)
    fd72:	str	r3, [sp, #28]
    fd74:	movs	r3, #0
    fd76:	str	r3, [sp, #16]
    fd78:	movs	r6, #3
    fd7a:	b.n	fd80 <__ssvfscanf_r+0x20c>
    fd7c:	str.w	lr, [fp]
    fd80:	bl	c550 <__locale_ctype_ptr>
    fd84:	ldr.w	r2, [fp]
    fd88:	ldrb	r1, [r2, #0]
    fd8a:	add	r0, r1
    fd8c:	add.w	lr, r2, #1
    fd90:	ldrb	r3, [r0, #1]
    fd92:	and.w	r3, r3, #8
    fd96:	and.w	r8, r3, #255	; 0xff
    fd9a:	cmp	r3, #0
    fd9c:	beq.w	1029e <__ssvfscanf_r+0x72a>
    fda0:	ldr.w	r3, [fp, #4]
    fda4:	subs	r3, #1
    fda6:	cmp	r3, #0
    fda8:	add.w	r7, r7, #1
    fdac:	str.w	r3, [fp, #4]
    fdb0:	bgt.n	fd7c <__ssvfscanf_r+0x208>
    fdb2:	mov	r1, fp
    fdb4:	mov	r0, sl
    fdb6:	bl	13658 <__ssrefill_r>
    fdba:	cmp	r0, #0
    fdbc:	beq.n	fd80 <__ssvfscanf_r+0x20c>
    fdbe:	ldr	r2, [sp, #24]
    fdc0:	cmp	r2, #0
    fdc2:	beq.n	fd58 <__ssvfscanf_r+0x1e4>
    fdc4:	ldrh.w	r3, [fp, #12]
    fdc8:	tst.w	r3, #64	; 0x40
    fdcc:	mov	r3, r2
    fdce:	it	ne
    fdd0:	movne.w	r3, #4294967295
    fdd4:	mov	r0, r3
    fdd6:	add.w	sp, sp, #692	; 0x2b4
    fdda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fdde:	ldrb.w	r8, [r6, #1]
    fde2:	cmp.w	r8, #108	; 0x6c
    fde6:	beq.w	101ee <__ssvfscanf_r+0x67a>
    fdea:	orr.w	r5, r5, #1
    fdee:	mov	r6, r3
    fdf0:	b.n	fc26 <__ssvfscanf_r+0xb2>
    fdf2:	str	r3, [sp, #12]
    fdf4:	ldr.w	r3, [fp, #4]
    fdf8:	cmp	r3, #0
    fdfa:	ble.w	1028e <__ssvfscanf_r+0x71a>
    fdfe:	ldr	r3, [pc, #600]	; (10058 <__ssvfscanf_r+0x4e4>)
    fe00:	str	r3, [sp, #28]
    fe02:	movs	r3, #10
    fe04:	str	r3, [sp, #16]
    fe06:	movs	r6, #3
    fe08:	b.n	fd80 <__ssvfscanf_r+0x20c>
    fe0a:	str	r3, [sp, #12]
    fe0c:	ldr.w	r3, [fp, #4]
    fe10:	cmp	r3, #0
    fe12:	ble.w	1027e <__ssvfscanf_r+0x70a>
    fe16:	movs	r6, #2
    fe18:	b.n	fd80 <__ssvfscanf_r+0x20c>
    fe1a:	str	r3, [sp, #12]
    fe1c:	ldr.w	r3, [fp, #4]
    fe20:	cmp	r3, #0
    fe22:	orr.w	r5, r5, #544	; 0x220
    fe26:	ble.w	ff6a <__ssvfscanf_r+0x3f6>
    fe2a:	ldr	r3, [pc, #556]	; (10058 <__ssvfscanf_r+0x4e4>)
    fe2c:	str	r3, [sp, #28]
    fe2e:	movs	r3, #16
    fe30:	str	r3, [sp, #16]
    fe32:	movs	r6, #3
    fe34:	b.n	fd80 <__ssvfscanf_r+0x20c>
    fe36:	str	r3, [sp, #12]
    fe38:	ldr.w	r3, [fp, #4]
    fe3c:	cmp	r3, #0
    fe3e:	ble.w	ff8a <__ssvfscanf_r+0x416>
    fe42:	ldr	r3, [pc, #532]	; (10058 <__ssvfscanf_r+0x4e4>)
    fe44:	str	r3, [sp, #28]
    fe46:	movs	r3, #8
    fe48:	str	r3, [sp, #16]
    fe4a:	movs	r6, #3
    fe4c:	b.n	fd80 <__ssvfscanf_r+0x20c>
    fe4e:	lsls	r2, r5, #27
    fe50:	mov	r6, r3
    fe52:	str	r3, [sp, #12]
    fe54:	bmi.w	1003c <__ssvfscanf_r+0x4c8>
    fe58:	lsls	r3, r5, #29
    fe5a:	bpl.w	10206 <__ssvfscanf_r+0x692>
    fe5e:	ldr	r1, [sp, #20]
    fe60:	ldr	r3, [r1, #0]
    fe62:	strh	r7, [r3, #0]
    fe64:	adds	r3, r1, #4
    fe66:	str	r3, [sp, #20]
    fe68:	mov	r4, r6
    fe6a:	b.n	fc04 <__ssvfscanf_r+0x90>
    fe6c:	ldrb.w	r8, [r6, #1]
    fe70:	orr.w	r5, r5, #4
    fe74:	mov	r6, r3
    fe76:	b.n	fc26 <__ssvfscanf_r+0xb2>
    fe78:	str	r3, [sp, #12]
    fe7a:	ldr.w	r3, [fp, #4]
    fe7e:	cmp	r3, #0
    fe80:	ble.w	1025e <__ssvfscanf_r+0x6ea>
    fe84:	cmp	r4, #0
    fe86:	it	eq
    fe88:	moveq	r4, #1
    fe8a:	ands.w	r3, r5, #1
    fe8e:	bne.w	100d6 <__ssvfscanf_r+0x562>
    fe92:	lsls	r2, r5, #27
    fe94:	bpl.w	101ae <__ssvfscanf_r+0x63a>
    fe98:	mov	r5, r3
    fe9a:	b.n	feb0 <__ssvfscanf_r+0x33c>
    fe9c:	add	r3, r2
    fe9e:	str.w	r3, [fp]
    fea2:	add	r5, r2
    fea4:	subs	r4, r4, r2
    fea6:	bl	13658 <__ssrefill_r>
    feaa:	cmp	r0, #0
    feac:	bne.w	101a6 <__ssvfscanf_r+0x632>
    feb0:	ldr.w	r2, [fp, #4]
    feb4:	ldr.w	r3, [fp]
    feb8:	cmp	r2, r4
    feba:	mov	r1, fp
    febc:	mov	r0, sl
    febe:	blt.n	fe9c <__ssvfscanf_r+0x328>
    fec0:	subs	r2, r2, r4
    fec2:	add	r3, r4
    fec4:	str.w	r2, [fp, #4]
    fec8:	add	r5, r4
    feca:	str.w	r3, [fp]
    fece:	ldr	r6, [sp, #12]
    fed0:	add	r7, r5
    fed2:	mov	r4, r6
    fed4:	b.n	fc04 <__ssvfscanf_r+0x90>
    fed6:	add.w	r9, sp, #80	; 0x50
    feda:	mov	r1, r3
    fedc:	mov	r0, r9
    fede:	bl	12ee8 <__sccl>
    fee2:	ldr.w	r3, [fp, #4]
    fee6:	cmp	r3, #0
    fee8:	mov	r6, r0
    feea:	ble.w	1024e <__ssvfscanf_r+0x6da>
    feee:	cmp	r4, #0
    fef0:	ldr.w	r2, [fp]
    fef4:	it	eq
    fef6:	moveq.w	r4, #4294967295
    fefa:	lsls	r3, r5, #27
    fefc:	ldrb	r1, [r2, #0]
    fefe:	bpl.w	10042 <__ssvfscanf_r+0x4ce>
    ff02:	mov	r8, r4
    ff04:	movs	r5, #0
    ff06:	b.n	ff0a <__ssvfscanf_r+0x396>
    ff08:	ldrb	r1, [r2, #0]
    ff0a:	ldrb.w	r3, [r9, r1]
    ff0e:	adds	r2, #1
    ff10:	cmp	r3, #0
    ff12:	beq.w	1019c <__ssvfscanf_r+0x628>
    ff16:	ldr.w	r3, [fp, #4]
    ff1a:	str.w	r2, [fp]
    ff1e:	adds	r5, #1
    ff20:	subs	r3, #1
    ff22:	cmp	r5, r4
    ff24:	str.w	r3, [fp, #4]
    ff28:	beq.w	10196 <__ssvfscanf_r+0x622>
    ff2c:	cmp	r3, #0
    ff2e:	bgt.n	ff08 <__ssvfscanf_r+0x394>
    ff30:	mov	r1, fp
    ff32:	mov	r0, sl
    ff34:	bl	13658 <__ssrefill_r>
    ff38:	cmp	r0, #0
    ff3a:	bne.w	10194 <__ssvfscanf_r+0x620>
    ff3e:	ldr.w	r2, [fp]
    ff42:	b.n	ff08 <__ssvfscanf_r+0x394>
    ff44:	str	r3, [sp, #12]
    ff46:	ldr.w	r3, [fp, #4]
    ff4a:	cmp	r3, #0
    ff4c:	ble.n	ffc4 <__ssvfscanf_r+0x450>
    ff4e:	ldr	r3, [pc, #260]	; (10054 <__ssvfscanf_r+0x4e0>)
    ff50:	str	r3, [sp, #28]
    ff52:	movs	r3, #10
    ff54:	str	r3, [sp, #16]
    ff56:	movs	r6, #3
    ff58:	b.n	fd80 <__ssvfscanf_r+0x20c>
    ff5a:	str	r3, [sp, #12]
    ff5c:	ldr.w	r3, [fp, #4]
    ff60:	cmp	r3, #0
    ff62:	orr.w	r5, r5, #512	; 0x200
    ff66:	bgt.w	fe2a <__ssvfscanf_r+0x2b6>
    ff6a:	mov	r1, fp
    ff6c:	mov	r0, sl
    ff6e:	bl	13658 <__ssrefill_r>
    ff72:	cmp	r0, #0
    ff74:	beq.w	fe2a <__ssvfscanf_r+0x2b6>
    ff78:	b.n	fdbe <__ssvfscanf_r+0x24a>
    ff7a:	str	r3, [sp, #12]
    ff7c:	ldr.w	r3, [fp, #4]
    ff80:	cmp	r3, #0
    ff82:	orr.w	r5, r5, #1
    ff86:	bgt.w	fe42 <__ssvfscanf_r+0x2ce>
    ff8a:	mov	r1, fp
    ff8c:	mov	r0, sl
    ff8e:	bl	13658 <__ssrefill_r>
    ff92:	cmp	r0, #0
    ff94:	beq.w	fe42 <__ssvfscanf_r+0x2ce>
    ff98:	b.n	fdbe <__ssvfscanf_r+0x24a>
    ff9a:	ldrb.w	r8, [r6, #1]
    ff9e:	orr.w	r5, r5, #2
    ffa2:	mov	r6, r3
    ffa4:	b.n	fc26 <__ssvfscanf_r+0xb2>
    ffa6:	str	r3, [sp, #12]
    ffa8:	ldr.w	r3, [fp, #4]
    ffac:	cmp	r3, #0
    ffae:	ble.w	1026e <__ssvfscanf_r+0x6fa>
    ffb2:	movs	r6, #4
    ffb4:	b.n	fd80 <__ssvfscanf_r+0x20c>
    ffb6:	str	r3, [sp, #12]
    ffb8:	ldr.w	r3, [fp, #4]
    ffbc:	cmp	r3, #0
    ffbe:	orr.w	r5, r5, #1
    ffc2:	bgt.n	ff4e <__ssvfscanf_r+0x3da>
    ffc4:	mov	r1, fp
    ffc6:	mov	r0, sl
    ffc8:	bl	13658 <__ssrefill_r>
    ffcc:	cmp	r0, #0
    ffce:	beq.n	ff4e <__ssvfscanf_r+0x3da>
    ffd0:	b.n	fdbe <__ssvfscanf_r+0x24a>
    ffd2:	add.w	r4, r4, r4, lsl #2
    ffd6:	add.w	r4, r8, r4, lsl #1
    ffda:	subs	r4, #48	; 0x30
    ffdc:	ldrb.w	r8, [r6, #1]
    ffe0:	mov	r6, r3
    ffe2:	b.n	fc26 <__ssvfscanf_r+0xb2>
    ffe4:	ldrb.w	r8, [r6, #1]
    ffe8:	orr.w	r5, r5, #16
    ffec:	mov	r6, r3
    ffee:	b.n	fc26 <__ssvfscanf_r+0xb2>
    fff0:	add	r3, sp, #72	; 0x48
    fff2:	mov	r1, r8
    fff4:	mov	r0, r3
    fff6:	movs	r2, #8
    fff8:	str	r3, [sp, #32]
    fffa:	bl	cc4c <memset>
    fffe:	ands.w	r9, r5, #16
   10002:	bne.w	108c8 <__ssvfscanf_r+0xd54>
   10006:	ldr	r2, [sp, #20]
   10008:	mov	r3, r2
   1000a:	adds	r3, #4
   1000c:	ldr.w	r8, [r2]
   10010:	str	r3, [sp, #20]
   10012:	movs	r6, #0
   10014:	bl	c550 <__locale_ctype_ptr>
   10018:	ldr.w	r3, [fp]
   1001c:	ldrb	r3, [r3, #0]
   1001e:	add	r0, r3
   10020:	ldrb	r3, [r0, #1]
   10022:	lsls	r0, r3, #28
   10024:	bmi.n	1002c <__ssvfscanf_r+0x4b8>
   10026:	cmp	r4, #0
   10028:	bne.w	1082c <__ssvfscanf_r+0xcb8>
   1002c:	cmp.w	r9, #0
   10030:	bne.n	1003c <__ssvfscanf_r+0x4c8>
   10032:	str.w	r9, [r8]
   10036:	ldr	r3, [sp, #24]
   10038:	adds	r3, #1
   1003a:	str	r3, [sp, #24]
   1003c:	ldr	r6, [sp, #12]
   1003e:	mov	r4, r6
   10040:	b.n	fc04 <__ssvfscanf_r+0x90>
   10042:	ldr	r0, [sp, #20]
   10044:	ldr	r5, [r0, #0]
   10046:	mov	r3, r0
   10048:	adds	r3, #4
   1004a:	add.w	r8, r5, r4
   1004e:	str	r3, [sp, #12]
   10050:	mov	r4, r5
   10052:	b.n	10062 <__ssvfscanf_r+0x4ee>
   10054:	.word	0x0000e469
   10058:	.word	0x000132a1
   1005c:	ldr.w	r2, [fp]
   10060:	ldrb	r1, [r2, #0]
   10062:	ldrb.w	r3, [r9, r1]
   10066:	adds	r0, r2, #1
   10068:	cbz	r3, 1009c <__ssvfscanf_r+0x528>
   1006a:	ldr.w	r3, [fp, #4]
   1006e:	str.w	r0, [fp]
   10072:	subs	r3, #1
   10074:	str.w	r3, [fp, #4]
   10078:	ldrb	r3, [r2, #0]
   1007a:	strb.w	r3, [r4], #1
   1007e:	cmp	r8, r4
   10080:	beq.n	1009c <__ssvfscanf_r+0x528>
   10082:	ldr.w	r3, [fp, #4]
   10086:	cmp	r3, #0
   10088:	bgt.n	1005c <__ssvfscanf_r+0x4e8>
   1008a:	mov	r1, fp
   1008c:	mov	r0, sl
   1008e:	bl	13658 <__ssrefill_r>
   10092:	cmp	r0, #0
   10094:	beq.n	1005c <__ssvfscanf_r+0x4e8>
   10096:	cmp	r5, r4
   10098:	beq.w	fdbe <__ssvfscanf_r+0x24a>
   1009c:	subs	r5, r4, r5
   1009e:	beq.w	fc10 <__ssvfscanf_r+0x9c>
   100a2:	ldr	r2, [sp, #24]
   100a4:	adds	r2, #1
   100a6:	movs	r3, #0
   100a8:	str	r2, [sp, #24]
   100aa:	ldr	r2, [sp, #12]
   100ac:	str	r2, [sp, #20]
   100ae:	strb	r3, [r4, #0]
   100b0:	add	r7, r5
   100b2:	mov	r4, r6
   100b4:	b.n	fc04 <__ssvfscanf_r+0x90>
   100b6:	str	r3, [sp, #12]
   100b8:	bl	c550 <__locale_ctype_ptr>
   100bc:	add	r0, r8
   100be:	ldrb	r3, [r0, #1]
   100c0:	and.w	r3, r3, #3
   100c4:	cmp	r3, #1
   100c6:	ldr.w	r3, [fp, #4]
   100ca:	beq.w	101fa <__ssvfscanf_r+0x686>
   100ce:	cmp	r3, #0
   100d0:	bgt.w	ff4e <__ssvfscanf_r+0x3da>
   100d4:	b.n	ffc4 <__ssvfscanf_r+0x450>
   100d6:	add	r3, sp, #72	; 0x48
   100d8:	mov	r0, r3
   100da:	movs	r2, #8
   100dc:	movs	r1, #0
   100de:	str	r3, [sp, #32]
   100e0:	bl	cc4c <memset>
   100e4:	ands.w	r3, r5, #16
   100e8:	str	r3, [sp, #40]	; 0x28
   100ea:	bne.n	101e8 <__ssvfscanf_r+0x674>
   100ec:	ldr	r2, [sp, #20]
   100ee:	mov	r3, r2
   100f0:	adds	r3, #4
   100f2:	ldr.w	r9, [r2]
   100f6:	str	r3, [sp, #20]
   100f8:	movs	r5, #0
   100fa:	add.w	r8, sp, #336	; 0x150
   100fe:	bl	c52c <__locale_mb_cur_max>
   10102:	cmp	r0, r5
   10104:	beq.w	fdbe <__ssvfscanf_r+0x24a>
   10108:	ldmia.w	fp, {r2, r3}
   1010c:	ldrb.w	r0, [r2], #1
   10110:	str.w	r2, [fp]
   10114:	subs	r3, #1
   10116:	ldr	r2, [sp, #32]
   10118:	str	r2, [sp, #0]
   1011a:	adds	r6, r5, #1
   1011c:	str.w	r3, [fp, #4]
   10120:	mov	r1, r9
   10122:	strb.w	r0, [r8, r5]
   10126:	mov	r3, r6
   10128:	mov	r2, r8
   1012a:	mov	r0, sl
   1012c:	bl	12504 <_mbrtowc_r>
   10130:	adds	r1, r0, #1
   10132:	beq.w	fdbe <__ssvfscanf_r+0x24a>
   10136:	cbnz	r0, 10162 <__ssvfscanf_r+0x5ee>
   10138:	ldr	r3, [sp, #40]	; 0x28
   1013a:	cbnz	r3, 10182 <__ssvfscanf_r+0x60e>
   1013c:	str.w	r3, [r9]
   10140:	add	r7, r6
   10142:	subs	r4, #1
   10144:	add.w	r9, r9, #4
   10148:	ldr.w	r3, [fp, #4]
   1014c:	cmp	r3, #0
   1014e:	mov.w	r5, #0
   10152:	ble.n	10170 <__ssvfscanf_r+0x5fc>
   10154:	cmp	r4, #0
   10156:	bne.n	100fe <__ssvfscanf_r+0x58a>
   10158:	ldr	r3, [sp, #40]	; 0x28
   1015a:	cmp	r3, #0
   1015c:	beq.w	10036 <__ssvfscanf_r+0x4c2>
   10160:	b.n	1003c <__ssvfscanf_r+0x4c8>
   10162:	adds	r0, #2
   10164:	bne.n	10188 <__ssvfscanf_r+0x614>
   10166:	ldr.w	r3, [fp, #4]
   1016a:	cmp	r3, #0
   1016c:	mov	r5, r6
   1016e:	bgt.n	100fe <__ssvfscanf_r+0x58a>
   10170:	mov	r1, fp
   10172:	mov	r0, sl
   10174:	bl	13658 <__ssrefill_r>
   10178:	cmp	r0, #0
   1017a:	beq.n	10154 <__ssvfscanf_r+0x5e0>
   1017c:	cmp	r5, #0
   1017e:	beq.n	10158 <__ssvfscanf_r+0x5e4>
   10180:	b.n	fdbe <__ssvfscanf_r+0x24a>
   10182:	add	r7, r6
   10184:	subs	r4, #1
   10186:	b.n	10148 <__ssvfscanf_r+0x5d4>
   10188:	ldr	r3, [sp, #40]	; 0x28
   1018a:	add	r7, r6
   1018c:	subs	r4, #1
   1018e:	cmp	r3, #0
   10190:	bne.n	10148 <__ssvfscanf_r+0x5d4>
   10192:	b.n	10144 <__ssvfscanf_r+0x5d0>
   10194:	mov	r8, r5
   10196:	mov	r5, r8
   10198:	add	r7, r5
   1019a:	b.n	100b2 <__ssvfscanf_r+0x53e>
   1019c:	cmp	r5, #0
   1019e:	beq.w	fc10 <__ssvfscanf_r+0x9c>
   101a2:	add	r7, r5
   101a4:	b.n	100b2 <__ssvfscanf_r+0x53e>
   101a6:	cmp	r5, #0
   101a8:	bne.w	fece <__ssvfscanf_r+0x35a>
   101ac:	b.n	fdbe <__ssvfscanf_r+0x24a>
   101ae:	ldr	r5, [sp, #20]
   101b0:	mov	r3, r4
   101b2:	ldr	r1, [r5, #0]
   101b4:	str.w	fp, [sp]
   101b8:	movs	r2, #1
   101ba:	mov	r0, sl
   101bc:	bl	13694 <_sfread_r>
   101c0:	adds	r6, r5, #4
   101c2:	cmp	r0, #0
   101c4:	beq.w	fdbe <__ssvfscanf_r+0x24a>
   101c8:	ldr	r3, [sp, #24]
   101ca:	str	r6, [sp, #20]
   101cc:	ldr	r6, [sp, #12]
   101ce:	adds	r3, #1
   101d0:	add	r7, r0
   101d2:	str	r3, [sp, #24]
   101d4:	mov	r4, r6
   101d6:	b.n	fc04 <__ssvfscanf_r+0x90>
   101d8:	mov	r1, fp
   101da:	mov	r0, sl
   101dc:	bl	13658 <__ssrefill_r>
   101e0:	cmp	r0, #0
   101e2:	beq.w	fd32 <__ssvfscanf_r+0x1be>
   101e6:	b.n	fdbe <__ssvfscanf_r+0x24a>
   101e8:	mov.w	r9, #0
   101ec:	b.n	100f8 <__ssvfscanf_r+0x584>
   101ee:	ldrb.w	r8, [r6, #2]
   101f2:	orr.w	r5, r5, #2
   101f6:	adds	r6, #2
   101f8:	b.n	fc26 <__ssvfscanf_r+0xb2>
   101fa:	cmp	r3, #0
   101fc:	orr.w	r5, r5, #1
   10200:	bgt.w	ff4e <__ssvfscanf_r+0x3da>
   10204:	b.n	ffc4 <__ssvfscanf_r+0x450>
   10206:	lsls	r4, r5, #31
   10208:	bmi.n	10224 <__ssvfscanf_r+0x6b0>
   1020a:	lsls	r0, r5, #30
   1020c:	bpl.n	10224 <__ssvfscanf_r+0x6b0>
   1020e:	ldr	r2, [sp, #20]
   10210:	ldr	r6, [sp, #12]
   10212:	ldr	r3, [r2, #0]
   10214:	mov	r0, r7
   10216:	asrs	r1, r7, #31
   10218:	adds	r2, #4
   1021a:	str	r2, [sp, #20]
   1021c:	strd	r0, r1, [r3]
   10220:	mov	r4, r6
   10222:	b.n	fc04 <__ssvfscanf_r+0x90>
   10224:	ldr	r2, [sp, #20]
   10226:	ldr	r6, [sp, #12]
   10228:	ldr	r3, [r2, #0]
   1022a:	str	r7, [r3, #0]
   1022c:	mov	r3, r2
   1022e:	adds	r3, #4
   10230:	str	r3, [sp, #20]
   10232:	mov	r4, r6
   10234:	b.n	fc04 <__ssvfscanf_r+0x90>
   10236:	mov	r1, fp
   10238:	mov	r0, sl
   1023a:	bl	13658 <__ssrefill_r>
   1023e:	cmp	r0, #0
   10240:	bne.w	fdbe <__ssvfscanf_r+0x24a>
   10244:	ldr	r3, [pc, #504]	; (10440 <__ssvfscanf_r+0x8cc>)
   10246:	str	r0, [sp, #16]
   10248:	str	r3, [sp, #28]
   1024a:	movs	r6, #3
   1024c:	b.n	fd80 <__ssvfscanf_r+0x20c>
   1024e:	mov	r1, fp
   10250:	mov	r0, sl
   10252:	bl	13658 <__ssrefill_r>
   10256:	cmp	r0, #0
   10258:	beq.w	feee <__ssvfscanf_r+0x37a>
   1025c:	b.n	fdbe <__ssvfscanf_r+0x24a>
   1025e:	mov	r1, fp
   10260:	mov	r0, sl
   10262:	bl	13658 <__ssrefill_r>
   10266:	cmp	r0, #0
   10268:	beq.w	fe84 <__ssvfscanf_r+0x310>
   1026c:	b.n	fdbe <__ssvfscanf_r+0x24a>
   1026e:	mov	r1, fp
   10270:	mov	r0, sl
   10272:	bl	13658 <__ssrefill_r>
   10276:	cmp	r0, #0
   10278:	beq.w	ffb2 <__ssvfscanf_r+0x43e>
   1027c:	b.n	fdbe <__ssvfscanf_r+0x24a>
   1027e:	mov	r1, fp
   10280:	mov	r0, sl
   10282:	bl	13658 <__ssrefill_r>
   10286:	cmp	r0, #0
   10288:	beq.w	fe16 <__ssvfscanf_r+0x2a2>
   1028c:	b.n	fdbe <__ssvfscanf_r+0x24a>
   1028e:	mov	r1, fp
   10290:	mov	r0, sl
   10292:	bl	13658 <__ssrefill_r>
   10296:	cmp	r0, #0
   10298:	beq.w	fdfe <__ssvfscanf_r+0x28a>
   1029c:	b.n	fdbe <__ssvfscanf_r+0x24a>
   1029e:	cmp	r6, #3
   102a0:	beq.w	105e2 <__ssvfscanf_r+0xa6e>
   102a4:	cmp	r6, #4
   102a6:	bne.w	10724 <__ssvfscanf_r+0xbb0>
   102aa:	mov	r0, sl
   102ac:	bl	124e8 <_localeconv_r>
   102b0:	subs	r3, r4, #1
   102b2:	ldr	r2, [r0, #0]
   102b4:	str	r2, [sp, #48]	; 0x30
   102b6:	cmp.w	r3, #348	; 0x15c
   102ba:	bls.w	1078c <__ssvfscanf_r+0xc18>
   102be:	mvn.w	r1, #348	; 0x15c
   102c2:	adds	r3, r4, r1
   102c4:	str	r3, [sp, #56]	; 0x38
   102c6:	movw	r4, #349	; 0x15d
   102ca:	add	r3, sp, #336	; 0x150
   102cc:	mov.w	r8, #0
   102d0:	mov	r2, r3
   102d2:	str	r3, [sp, #40]	; 0x28
   102d4:	orr.w	r5, r5, #1920	; 0x780
   102d8:	mov	r3, r8
   102da:	str.w	r8, [sp, #60]	; 0x3c
   102de:	str.w	r8, [sp, #52]	; 0x34
   102e2:	mov	r6, r8
   102e4:	str.w	r8, [sp, #44]	; 0x2c
   102e8:	mov	r9, r2
   102ea:	ldr.w	r0, [fp]
   102ee:	ldrb	r1, [r0, #0]
   102f0:	sub.w	lr, r1, #43	; 0x2b
   102f4:	cmp.w	lr, #78	; 0x4e
   102f8:	bhi.w	10592 <__ssvfscanf_r+0xa1e>
   102fc:	tbh	[pc, lr, lsl #1]
   10300:	.word	0x0149007a
   10304:	.word	0x0149007a
   10308:	.word	0x006e0149
   1030c:	.word	0x004f004f
   10310:	.word	0x004f004f
   10314:	.word	0x004f004f
   10318:	.word	0x004f004f
   1031c:	.word	0x0149004f
   10320:	.word	0x01490149
   10324:	.word	0x01490149
   10328:	.word	0x01490149
   1032c:	.word	0x01490144
   10330:	.word	0x01490149
   10334:	.word	0x0125012c
   10338:	.word	0x01490149
   1033c:	.word	0x014900a2
   10340:	.word	0x01490149
   10344:	.word	0x008b0149
   10348:	.word	0x01490149
   1034c:	.word	0x01490149
   10350:	.word	0x00850149
   10354:	.word	0x01490149
   10358:	.word	0x01490149
   1035c:	.word	0x0149007f
   10360:	.word	0x01490149
   10364:	.word	0x01490149
   10368:	.word	0x01490149
   1036c:	.word	0x01490144
   10370:	.word	0x01490149
   10374:	.word	0x0125012c
   10378:	.word	0x01490149
   1037c:	.word	0x014900a2
   10380:	.word	0x01490149
   10384:	.word	0x008b0149
   10388:	.word	0x01490149
   1038c:	.word	0x01490149
   10390:	.word	0x00850149
   10394:	.word	0x01490149
   10398:	.word	0x01490149
   1039c:	.short	0x007f
   1039e:	cmn.w	r3, r8
   103a2:	bne.n	103d2 <__ssvfscanf_r+0x85e>
   103a4:	bic.w	r5, r5, #384	; 0x180
   103a8:	strb.w	r1, [r9]
   103ac:	add.w	r9, r9, #1
   103b0:	ldr.w	r1, [fp, #4]
   103b4:	subs	r1, #1
   103b6:	cmp	r1, #0
   103b8:	add.w	r4, r4, #4294967295
   103bc:	add.w	r7, r7, #1
   103c0:	str.w	r1, [fp, #4]
   103c4:	ble.w	105ac <__ssvfscanf_r+0xa38>
   103c8:	adds	r0, #1
   103ca:	str.w	r0, [fp]
   103ce:	cmp	r4, #0
   103d0:	bne.n	102ea <__ssvfscanf_r+0x776>
   103d2:	cmp	r6, #0
   103d4:	beq.n	1045c <__ssvfscanf_r+0x8e8>
   103d6:	bic.w	r5, r5, #256	; 0x100
   103da:	b.n	1045c <__ssvfscanf_r+0x8e8>
   103dc:	lsls	r2, r5, #23
   103de:	bpl.n	1039e <__ssvfscanf_r+0x82a>
   103e0:	ldr	r2, [sp, #56]	; 0x38
   103e2:	bic.w	r5, r5, #128	; 0x80
   103e6:	adds	r6, #1
   103e8:	cmp	r2, #0
   103ea:	beq.n	103b0 <__ssvfscanf_r+0x83c>
   103ec:	subs	r2, #1
   103ee:	str	r2, [sp, #56]	; 0x38
   103f0:	adds	r4, #1
   103f2:	b.n	103b0 <__ssvfscanf_r+0x83c>
   103f4:	lsls	r2, r5, #24
   103f6:	bpl.n	103d2 <__ssvfscanf_r+0x85e>
   103f8:	bic.w	r5, r5, #128	; 0x80
   103fc:	b.n	103a8 <__ssvfscanf_r+0x834>
   103fe:	cmp.w	r8, #7
   10402:	bne.n	103d2 <__ssvfscanf_r+0x85e>
   10404:	mov.w	r8, #8
   10408:	b.n	103a8 <__ssvfscanf_r+0x834>
   1040a:	cmp.w	r8, #6
   1040e:	bne.n	103d2 <__ssvfscanf_r+0x85e>
   10410:	mov.w	r8, #7
   10414:	b.n	103a8 <__ssvfscanf_r+0x834>
   10416:	cmp	r3, #0
   10418:	bne.w	105d8 <__ssvfscanf_r+0xa64>
   1041c:	cbnz	r6, 1042a <__ssvfscanf_r+0x8b6>
   1041e:	and.w	lr, r5, #1792	; 0x700
   10422:	cmp.w	lr, #1792	; 0x700
   10426:	beq.w	108b0 <__ssvfscanf_r+0xd3c>
   1042a:	cmp.w	r8, #1
   1042e:	beq.n	10436 <__ssvfscanf_r+0x8c2>
   10430:	cmp.w	r8, #4
   10434:	bne.n	103d2 <__ssvfscanf_r+0x85e>
   10436:	add.w	r8, r8, #1
   1043a:	uxtb.w	r8, r8
   1043e:	b.n	103a8 <__ssvfscanf_r+0x834>
   10440:	.word	0x0000e469
   10444:	cmp.w	r8, #0
   10448:	bne.w	105c6 <__ssvfscanf_r+0xa52>
   1044c:	cmp	r6, #0
   1044e:	bne.n	103d6 <__ssvfscanf_r+0x862>
   10450:	and.w	lr, r5, #1792	; 0x700
   10454:	cmp.w	lr, #1792	; 0x700
   10458:	beq.w	108d0 <__ssvfscanf_r+0xd5c>
   1045c:	subs	r3, #1
   1045e:	cmp	r3, #1
   10460:	bls.w	10966 <__ssvfscanf_r+0xdf2>
   10464:	add.w	r3, r8, #4294967295
   10468:	cmp	r3, #6
   1046a:	bhi.n	1049a <__ssvfscanf_r+0x926>
   1046c:	cmp.w	r8, #2
   10470:	bls.w	109b4 <__ssvfscanf_r+0xe40>
   10474:	cmp.w	r8, #3
   10478:	beq.n	1049a <__ssvfscanf_r+0x926>
   1047a:	sub.w	r4, r8, #4
   1047e:	uxtb	r4, r4
   10480:	mvn.w	r8, r4
   10484:	add	r8, r9
   10486:	ldrb.w	r1, [r9, #-1]!
   1048a:	mov	r2, fp
   1048c:	mov	r0, sl
   1048e:	bl	135d4 <_sungetc_r>
   10492:	cmp	r8, r9
   10494:	bne.n	10486 <__ssvfscanf_r+0x912>
   10496:	subs	r7, #1
   10498:	subs	r7, r7, r4
   1049a:	lsls	r1, r5, #23
   1049c:	bpl.n	104d8 <__ssvfscanf_r+0x964>
   1049e:	lsls	r2, r5, #21
   104a0:	bmi.w	1098a <__ssvfscanf_r+0xe16>
   104a4:	ldrb.w	r1, [r9, #-1]
   104a8:	cmp	r1, #101	; 0x65
   104aa:	add.w	r4, r9, #4294967295
   104ae:	add.w	r8, r7, #4294967295
   104b2:	beq.n	104cc <__ssvfscanf_r+0x958>
   104b4:	cmp	r1, #69	; 0x45
   104b6:	beq.n	104cc <__ssvfscanf_r+0x958>
   104b8:	mov	r2, fp
   104ba:	mov	r0, sl
   104bc:	bl	135d4 <_sungetc_r>
   104c0:	ldrb.w	r1, [r9, #-2]
   104c4:	sub.w	r8, r7, #2
   104c8:	sub.w	r4, r9, #2
   104cc:	mov	r2, fp
   104ce:	mov	r0, sl
   104d0:	bl	135d4 <_sungetc_r>
   104d4:	mov	r7, r8
   104d6:	mov	r9, r4
   104d8:	ands.w	r2, r5, #16
   104dc:	bne.w	1003c <__ssvfscanf_r+0x4c8>
   104e0:	and.w	r3, r5, #1536	; 0x600
   104e4:	cmp.w	r3, #1024	; 0x400
   104e8:	strb.w	r2, [r9]
   104ec:	beq.w	108da <__ssvfscanf_r+0xd66>
   104f0:	ldr	r3, [sp, #52]	; 0x34
   104f2:	cmp	r3, #0
   104f4:	bne.w	108fc <__ssvfscanf_r+0xd88>
   104f8:	ldr	r1, [sp, #40]	; 0x28
   104fa:	movs	r2, #0
   104fc:	mov	r0, sl
   104fe:	bl	e310 <_strtod_r>
   10502:	lsls	r3, r5, #31
   10504:	bmi.w	10792 <__ssvfscanf_r+0xc1e>
   10508:	ands.w	r5, r5, #2
   1050c:	bne.w	10792 <__ssvfscanf_r+0xc1e>
   10510:	vmov	r2, r3, d0
   10514:	vmov	r0, r1, d0
   10518:	vstr	d0, [sp, #32]
   1051c:	bl	bd00 <__aeabi_dcmpun>
   10520:	ldr	r4, [sp, #20]
   10522:	vldr	d0, [sp, #32]
   10526:	adds	r6, r4, #4
   10528:	ldr	r4, [r4, #0]
   1052a:	cmp	r0, #0
   1052c:	bne.w	109e8 <__ssvfscanf_r+0xe74>
   10530:	vmov	r0, r1, d0
   10534:	bl	bdbc <__aeabi_d2f>
   10538:	str	r6, [sp, #20]
   1053a:	str	r0, [r4, #0]
   1053c:	ldr	r3, [sp, #24]
   1053e:	ldr	r6, [sp, #12]
   10540:	adds	r3, #1
   10542:	str	r3, [sp, #24]
   10544:	mov	r4, r6
   10546:	b.w	fc04 <__ssvfscanf_r+0x90>
   1054a:	cmp.w	r8, #2
   1054e:	bne.w	103d2 <__ssvfscanf_r+0x85e>
   10552:	mov.w	r8, #3
   10556:	b.n	103a8 <__ssvfscanf_r+0x834>
   10558:	and.w	lr, r5, #1280	; 0x500
   1055c:	cmp.w	lr, #1024	; 0x400
   10560:	beq.n	1056e <__ssvfscanf_r+0x9fa>
   10562:	lsls	r2, r5, #21
   10564:	bpl.w	103d2 <__ssvfscanf_r+0x85e>
   10568:	cmp	r6, #0
   1056a:	beq.w	1045c <__ssvfscanf_r+0x8e8>
   1056e:	lsls	r2, r5, #22
   10570:	bmi.n	1057c <__ssvfscanf_r+0xa08>
   10572:	ldr	r2, [sp, #44]	; 0x2c
   10574:	str.w	r9, [sp, #60]	; 0x3c
   10578:	subs	r2, r6, r2
   1057a:	str	r2, [sp, #52]	; 0x34
   1057c:	bic.w	r5, r5, #1920	; 0x780
   10580:	orr.w	r5, r5, #384	; 0x180
   10584:	movs	r6, #0
   10586:	b.n	103a8 <__ssvfscanf_r+0x834>
   10588:	cmp	r3, #1
   1058a:	bne.w	103d2 <__ssvfscanf_r+0x85e>
   1058e:	movs	r3, #2
   10590:	b.n	103a8 <__ssvfscanf_r+0x834>
   10592:	ldr	r2, [sp, #48]	; 0x30
   10594:	ldrb.w	lr, [r2]
   10598:	cmp	lr, r1
   1059a:	bne.w	103d2 <__ssvfscanf_r+0x85e>
   1059e:	lsls	r2, r5, #22
   105a0:	bpl.w	103d2 <__ssvfscanf_r+0x85e>
   105a4:	bic.w	r5, r5, #640	; 0x280
   105a8:	str	r6, [sp, #44]	; 0x2c
   105aa:	b.n	103a8 <__ssvfscanf_r+0x834>
   105ac:	mov	r1, fp
   105ae:	mov	r0, sl
   105b0:	str	r3, [sp, #32]
   105b2:	bl	13658 <__ssrefill_r>
   105b6:	ldr	r3, [sp, #32]
   105b8:	cmp	r0, #0
   105ba:	bne.w	103d2 <__ssvfscanf_r+0x85e>
   105be:	cmp	r4, #0
   105c0:	bne.w	102ea <__ssvfscanf_r+0x776>
   105c4:	b.n	103d2 <__ssvfscanf_r+0x85e>
   105c6:	cmp.w	r8, #3
   105ca:	beq.w	10436 <__ssvfscanf_r+0x8c2>
   105ce:	cmp.w	r8, #5
   105d2:	beq.w	10436 <__ssvfscanf_r+0x8c2>
   105d6:	b.n	103d2 <__ssvfscanf_r+0x85e>
   105d8:	cmp	r3, #2
   105da:	bne.w	1042a <__ssvfscanf_r+0x8b6>
   105de:	movs	r3, #3
   105e0:	b.n	103a8 <__ssvfscanf_r+0x834>
   105e2:	subs	r3, r4, #1
   105e4:	cmp.w	r3, #348	; 0x15c
   105e8:	itte	hi
   105ea:	mvnhi.w	r0, #348	; 0x15c
   105ee:	addhi.w	r9, r4, r0
   105f2:	movls	r9, r8
   105f4:	add	r3, sp, #336	; 0x150
   105f6:	mov	r0, r2
   105f8:	mov	r2, r7
   105fa:	mov	r7, r9
   105fc:	ldr.w	r9, [sp, #16]
   10600:	str	r3, [sp, #40]	; 0x28
   10602:	it	hi
   10604:	movwhi	r4, #349	; 0x15d
   10608:	orr.w	r5, r5, #3456	; 0xd80
   1060c:	mov	r6, r3
   1060e:	mov.w	r8, #0
   10612:	sub.w	r3, r1, #43	; 0x2b
   10616:	cmp	r3, #77	; 0x4d
   10618:	bhi.n	106be <__ssvfscanf_r+0xb4a>
   1061a:	tbb	[pc, r3]
   1061e:	.short	0x507e
   10620:	.word	0x6f50507e
   10624:	.word	0x69696969
   10628:	.word	0x4a696969
   1062c:	.word	0x5050504a
   10630:	.word	0x50505050
   10634:	.word	0x44444444
   10638:	.word	0x50504444
   1063c:	.word	0x50505050
   10640:	.word	0x50505050
   10644:	.word	0x50505050
   10648:	.word	0x27505050
   1064c:	.word	0x50505050
   10650:	.word	0x50505050
   10654:	.word	0x44444444
   10658:	.word	0x50504444
   1065c:	.word	0x50505050
   10660:	.word	0x50505050
   10664:	.word	0x50505050
   10668:	.word	0x27505050
   1066c:	and.w	r3, r5, #1536	; 0x600
   10670:	cmp.w	r3, #512	; 0x200
   10674:	bne.n	106be <__ssvfscanf_r+0xb4a>
   10676:	bic.w	r5, r5, #512	; 0x200
   1067a:	orr.w	r5, r5, #1280	; 0x500
   1067e:	mov.w	r9, #16
   10682:	strb	r1, [r6, #0]
   10684:	adds	r6, #1
   10686:	ldr.w	r3, [fp, #4]
   1068a:	subs	r3, #1
   1068c:	cmp	r3, #0
   1068e:	str.w	r3, [fp, #4]
   10692:	ble.n	1077a <__ssvfscanf_r+0xc06>
   10694:	adds	r0, #1
   10696:	str.w	r0, [fp]
   1069a:	subs	r4, #1
   1069c:	beq.n	106be <__ssvfscanf_r+0xb4a>
   1069e:	ldr.w	r0, [fp]
   106a2:	ldrb	r1, [r0, #0]
   106a4:	b.n	10612 <__ssvfscanf_r+0xa9e>
   106a6:	cmp.w	r9, #10
   106aa:	ble.n	106be <__ssvfscanf_r+0xb4a>
   106ac:	bic.w	r5, r5, #2944	; 0xb80
   106b0:	b.n	10682 <__ssvfscanf_r+0xb0e>
   106b2:	ldr	r3, [pc, #756]	; (109a8 <__ssvfscanf_r+0xe34>)
   106b4:	ldrsh.w	r9, [r3, r9, lsl #1]
   106b8:	cmp.w	r9, #8
   106bc:	bgt.n	106ac <__ssvfscanf_r+0xb38>
   106be:	lsls	r1, r5, #23
   106c0:	mov	r7, r2
   106c2:	str.w	r9, [sp, #16]
   106c6:	bpl.n	106d8 <__ssvfscanf_r+0xb64>
   106c8:	ldr	r3, [sp, #40]	; 0x28
   106ca:	cmp	r6, r3
   106cc:	bhi.w	108b8 <__ssvfscanf_r+0xd44>
   106d0:	ldr	r3, [sp, #40]	; 0x28
   106d2:	cmp	r6, r3
   106d4:	beq.w	fc10 <__ssvfscanf_r+0x9c>
   106d8:	ands.w	r4, r5, #16
   106dc:	beq.w	10804 <__ssvfscanf_r+0xc90>
   106e0:	ldr	r3, [sp, #40]	; 0x28
   106e2:	subs	r6, r6, r3
   106e4:	add	r6, r8
   106e6:	add	r7, r6
   106e8:	ldr	r6, [sp, #12]
   106ea:	mov	r4, r6
   106ec:	b.w	fc04 <__ssvfscanf_r+0x90>
   106f0:	ldr	r3, [pc, #692]	; (109a8 <__ssvfscanf_r+0xe34>)
   106f2:	bic.w	r5, r5, #2944	; 0xb80
   106f6:	ldrsh.w	r9, [r3, r9, lsl #1]
   106fa:	b.n	10682 <__ssvfscanf_r+0xb0e>
   106fc:	lsls	r3, r5, #20
   106fe:	bpl.n	10682 <__ssvfscanf_r+0xb0e>
   10700:	cmp.w	r9, #0
   10704:	bne.n	1070e <__ssvfscanf_r+0xb9a>
   10706:	orr.w	r5, r5, #512	; 0x200
   1070a:	mov.w	r9, #8
   1070e:	lsls	r3, r5, #21
   10710:	bpl.w	10894 <__ssvfscanf_r+0xd20>
   10714:	bic.w	r5, r5, #1408	; 0x580
   10718:	b.n	10682 <__ssvfscanf_r+0xb0e>
   1071a:	lsls	r3, r5, #24
   1071c:	bpl.n	106be <__ssvfscanf_r+0xb4a>
   1071e:	bic.w	r5, r5, #128	; 0x80
   10722:	b.n	10682 <__ssvfscanf_r+0xb0e>
   10724:	cmp	r4, #0
   10726:	it	eq
   10728:	moveq.w	r4, #4294967295
   1072c:	ands.w	r3, r5, #1
   10730:	bne.w	fff0 <__ssvfscanf_r+0x47c>
   10734:	lsls	r1, r5, #27
   10736:	bpl.n	107a0 <__ssvfscanf_r+0xc2c>
   10738:	mov	r5, r3
   1073a:	bl	c550 <__locale_ctype_ptr>
   1073e:	ldr.w	r3, [fp]
   10742:	ldrb	r2, [r3, #0]
   10744:	add	r0, r2
   10746:	adds	r3, #1
   10748:	ldrb	r2, [r0, #1]
   1074a:	lsls	r2, r2, #28
   1074c:	bmi.w	fece <__ssvfscanf_r+0x35a>
   10750:	ldr.w	r2, [fp, #4]
   10754:	str.w	r3, [fp]
   10758:	adds	r5, #1
   1075a:	subs	r3, r2, #1
   1075c:	cmp	r4, r5
   1075e:	str.w	r3, [fp, #4]
   10762:	beq.w	fece <__ssvfscanf_r+0x35a>
   10766:	cmp	r3, #0
   10768:	bgt.n	1073a <__ssvfscanf_r+0xbc6>
   1076a:	mov	r1, fp
   1076c:	mov	r0, sl
   1076e:	bl	13658 <__ssrefill_r>
   10772:	cmp	r0, #0
   10774:	beq.n	1073a <__ssvfscanf_r+0xbc6>
   10776:	b.w	fece <__ssvfscanf_r+0x35a>
   1077a:	mov	r1, fp
   1077c:	mov	r0, sl
   1077e:	str	r2, [sp, #16]
   10780:	bl	13658 <__ssrefill_r>
   10784:	ldr	r2, [sp, #16]
   10786:	cmp	r0, #0
   10788:	beq.n	1069a <__ssvfscanf_r+0xb26>
   1078a:	b.n	106be <__ssvfscanf_r+0xb4a>
   1078c:	str.w	r8, [sp, #56]	; 0x38
   10790:	b.n	102ca <__ssvfscanf_r+0x756>
   10792:	ldr	r2, [sp, #20]
   10794:	ldr	r3, [r2, #0]
   10796:	adds	r2, #4
   10798:	str	r2, [sp, #20]
   1079a:	vstr	d0, [r3]
   1079e:	b.n	1053c <__ssvfscanf_r+0x9c8>
   107a0:	ldr	r2, [sp, #20]
   107a2:	ldr	r5, [r2, #0]
   107a4:	adds	r6, r2, #4
   107a6:	add	r4, r5
   107a8:	mov	r8, r5
   107aa:	bl	c550 <__locale_ctype_ptr>
   107ae:	ldr.w	r2, [fp]
   107b2:	ldrb	r3, [r2, #0]
   107b4:	add	r0, r3
   107b6:	adds	r1, r2, #1
   107b8:	ldrb	r3, [r0, #1]
   107ba:	lsls	r3, r3, #28
   107bc:	bmi.n	107ea <__ssvfscanf_r+0xc76>
   107be:	ldr.w	r3, [fp, #4]
   107c2:	str.w	r1, [fp]
   107c6:	subs	r3, #1
   107c8:	str.w	r3, [fp, #4]
   107cc:	ldrb	r3, [r2, #0]
   107ce:	strb.w	r3, [r8], #1
   107d2:	cmp	r4, r8
   107d4:	beq.n	107ec <__ssvfscanf_r+0xc78>
   107d6:	ldr.w	r3, [fp, #4]
   107da:	cmp	r3, #0
   107dc:	bgt.n	107aa <__ssvfscanf_r+0xc36>
   107de:	mov	r1, fp
   107e0:	mov	r0, sl
   107e2:	bl	13658 <__ssrefill_r>
   107e6:	cmp	r0, #0
   107e8:	beq.n	107aa <__ssvfscanf_r+0xc36>
   107ea:	mov	r4, r8
   107ec:	ldr	r2, [sp, #24]
   107ee:	str	r6, [sp, #20]
   107f0:	ldr	r6, [sp, #12]
   107f2:	subs	r5, r4, r5
   107f4:	movs	r3, #0
   107f6:	adds	r2, #1
   107f8:	strb	r3, [r4, #0]
   107fa:	add	r7, r5
   107fc:	str	r2, [sp, #24]
   107fe:	mov	r4, r6
   10800:	b.w	fc04 <__ssvfscanf_r+0x90>
   10804:	mov	r2, r4
   10806:	strb	r4, [r6, #0]
   10808:	ldr	r3, [sp, #16]
   1080a:	ldr	r1, [sp, #40]	; 0x28
   1080c:	ldr	r4, [sp, #28]
   1080e:	mov	r0, sl
   10810:	blx	r4
   10812:	lsls	r2, r5, #26
   10814:	bmi.n	108a4 <__ssvfscanf_r+0xd30>
   10816:	lsls	r3, r5, #29
   10818:	bpl.n	10912 <__ssvfscanf_r+0xd9e>
   1081a:	ldr	r2, [sp, #20]
   1081c:	ldr	r3, [r2, #0]
   1081e:	adds	r2, #4
   10820:	str	r2, [sp, #20]
   10822:	strh	r0, [r3, #0]
   10824:	ldr	r3, [sp, #24]
   10826:	adds	r3, #1
   10828:	str	r3, [sp, #24]
   1082a:	b.n	106e0 <__ssvfscanf_r+0xb6c>
   1082c:	bl	c52c <__locale_mb_cur_max>
   10830:	cmp	r6, r0
   10832:	beq.w	fdbe <__ssvfscanf_r+0x24a>
   10836:	ldmia.w	fp, {r2, r3}
   1083a:	ldrb.w	r0, [r2], #1
   1083e:	str.w	r2, [fp]
   10842:	ldr	r2, [sp, #32]
   10844:	str	r2, [sp, #0]
   10846:	add	r2, sp, #336	; 0x150
   10848:	adds	r5, r6, #1
   1084a:	subs	r3, #1
   1084c:	strb	r0, [r2, r6]
   1084e:	str.w	r3, [fp, #4]
   10852:	mov	r1, r8
   10854:	mov	r3, r5
   10856:	mov	r0, sl
   10858:	bl	12504 <_mbrtowc_r>
   1085c:	adds	r6, r0, #1
   1085e:	beq.w	fdbe <__ssvfscanf_r+0x24a>
   10862:	cmp	r0, #0
   10864:	bne.n	1093e <__ssvfscanf_r+0xdca>
   10866:	str.w	r0, [r8]
   1086a:	bl	124c8 <iswspace>
   1086e:	cmp	r0, #0
   10870:	beq.w	109d2 <__ssvfscanf_r+0xe5e>
   10874:	cmp	r5, #0
   10876:	beq.w	1002c <__ssvfscanf_r+0x4b8>
   1087a:	add	r3, sp, #336	; 0x150
   1087c:	adds	r4, r3, r5
   1087e:	subs	r5, #1
   10880:	mov	r2, fp
   10882:	ldrb.w	r1, [r4, #-1]!
   10886:	mov	r0, sl
   10888:	bl	135d4 <_sungetc_r>
   1088c:	cmp	r5, #0
   1088e:	bne.n	1087e <__ssvfscanf_r+0xd0a>
   10890:	b.w	1002c <__ssvfscanf_r+0x4b8>
   10894:	bic.w	r5, r5, #896	; 0x380
   10898:	cbz	r7, 1089e <__ssvfscanf_r+0xd2a>
   1089a:	subs	r7, #1
   1089c:	adds	r4, #1
   1089e:	add.w	r8, r8, #1
   108a2:	b.n	10686 <__ssvfscanf_r+0xb12>
   108a4:	ldr	r2, [sp, #20]
   108a6:	ldr	r3, [r2, #0]
   108a8:	adds	r2, #4
   108aa:	str	r2, [sp, #20]
   108ac:	str	r0, [r3, #0]
   108ae:	b.n	10824 <__ssvfscanf_r+0xcb0>
   108b0:	bic.w	r5, r5, #1920	; 0x780
   108b4:	movs	r3, #1
   108b6:	b.n	103a8 <__ssvfscanf_r+0x834>
   108b8:	ldrb.w	r1, [r6, #-1]
   108bc:	mov	r2, fp
   108be:	mov	r0, sl
   108c0:	bl	135d4 <_sungetc_r>
   108c4:	subs	r6, #1
   108c6:	b.n	106d0 <__ssvfscanf_r+0xb5c>
   108c8:	add.w	r8, sp, #68	; 0x44
   108cc:	b.w	10012 <__ssvfscanf_r+0x49e>
   108d0:	bic.w	r5, r5, #1920	; 0x780
   108d4:	mov.w	r8, #1
   108d8:	b.n	103a8 <__ssvfscanf_r+0x834>
   108da:	ldr	r3, [sp, #44]	; 0x2c
   108dc:	subs	r6, r6, r3
   108de:	negs	r2, r6
   108e0:	cmp	r6, #0
   108e2:	beq.w	104f8 <__ssvfscanf_r+0x984>
   108e6:	addw	r3, sp, #675	; 0x2a3
   108ea:	cmp	r9, r3
   108ec:	it	cs
   108ee:	addwcs	r9, sp, #674	; 0x2a2
   108f2:	mov	r0, r9
   108f4:	ldr	r1, [pc, #180]	; (109ac <__ssvfscanf_r+0xe38>)
   108f6:	bl	d0f4 <sprintf>
   108fa:	b.n	104f8 <__ssvfscanf_r+0x984>
   108fc:	ldr	r4, [sp, #60]	; 0x3c
   108fe:	mov	r1, r4
   10900:	movs	r3, #10
   10902:	adds	r1, #1
   10904:	mov	r0, sl
   10906:	bl	e468 <_strtol_r>
   1090a:	ldr	r3, [sp, #52]	; 0x34
   1090c:	mov	r9, r4
   1090e:	subs	r2, r0, r3
   10910:	b.n	108e6 <__ssvfscanf_r+0xd72>
   10912:	ands.w	r2, r5, #1
   10916:	bne.n	108a4 <__ssvfscanf_r+0xd30>
   10918:	lsls	r4, r5, #30
   1091a:	bpl.n	108a4 <__ssvfscanf_r+0xd30>
   1091c:	ldr	r3, [sp, #28]
   1091e:	mov	r1, r3
   10920:	ldr	r3, [pc, #140]	; (109b0 <__ssvfscanf_r+0xe3c>)
   10922:	cmp	r1, r3
   10924:	mov	r0, sl
   10926:	ldr	r3, [sp, #16]
   10928:	ldr	r1, [sp, #40]	; 0x28
   1092a:	beq.n	109f6 <__ssvfscanf_r+0xe82>
   1092c:	bl	13114 <_strtoll_r>
   10930:	ldr	r2, [sp, #20]
   10932:	ldr	r3, [r2, #0]
   10934:	adds	r2, #4
   10936:	str	r2, [sp, #20]
   10938:	strd	r0, r1, [r3]
   1093c:	b.n	10824 <__ssvfscanf_r+0xcb0>
   1093e:	adds	r0, #2
   10940:	bne.n	10984 <__ssvfscanf_r+0xe10>
   10942:	mov	r6, r5
   10944:	ldr.w	r3, [fp, #4]
   10948:	cmp	r3, #0
   1094a:	bgt.w	10014 <__ssvfscanf_r+0x4a0>
   1094e:	mov	r1, fp
   10950:	mov	r0, sl
   10952:	bl	13658 <__ssrefill_r>
   10956:	cmp	r0, #0
   10958:	beq.w	10014 <__ssvfscanf_r+0x4a0>
   1095c:	cmp	r6, #0
   1095e:	bne.w	fdbe <__ssvfscanf_r+0x24a>
   10962:	b.w	1002c <__ssvfscanf_r+0x4b8>
   10966:	ldr	r3, [sp, #40]	; 0x28
   10968:	cmp	r9, r3
   1096a:	bls.w	fc10 <__ssvfscanf_r+0x9c>
   1096e:	ldrb.w	r1, [r9, #-1]!
   10972:	mov	r2, fp
   10974:	mov	r0, sl
   10976:	bl	135d4 <_sungetc_r>
   1097a:	ldr	r3, [sp, #40]	; 0x28
   1097c:	cmp	r9, r3
   1097e:	bne.n	1096e <__ssvfscanf_r+0xdfa>
   10980:	b.w	fc10 <__ssvfscanf_r+0x9c>
   10984:	ldr.w	r0, [r8]
   10988:	b.n	1086a <__ssvfscanf_r+0xcf6>
   1098a:	ldr	r3, [sp, #40]	; 0x28
   1098c:	cmp	r9, r3
   1098e:	bls.w	fc10 <__ssvfscanf_r+0x9c>
   10992:	ldrb.w	r1, [r9, #-1]!
   10996:	mov	r2, fp
   10998:	mov	r0, sl
   1099a:	bl	135d4 <_sungetc_r>
   1099e:	ldr	r3, [sp, #40]	; 0x28
   109a0:	cmp	r9, r3
   109a2:	bne.n	10992 <__ssvfscanf_r+0xe1e>
   109a4:	b.w	fc10 <__ssvfscanf_r+0x9c>
   109a8:	.word	0x00014244
   109ac:	.word	0x00014268
   109b0:	.word	0x000132a1
   109b4:	ldr	r3, [sp, #40]	; 0x28
   109b6:	cmp	r9, r3
   109b8:	bls.w	fc10 <__ssvfscanf_r+0x9c>
   109bc:	ldrb.w	r1, [r9, #-1]!
   109c0:	mov	r2, fp
   109c2:	mov	r0, sl
   109c4:	bl	135d4 <_sungetc_r>
   109c8:	ldr	r3, [sp, #40]	; 0x28
   109ca:	cmp	r9, r3
   109cc:	bne.n	109bc <__ssvfscanf_r+0xe48>
   109ce:	b.w	fc10 <__ssvfscanf_r+0x9c>
   109d2:	add	r7, r5
   109d4:	subs	r4, #1
   109d6:	cmp.w	r9, #0
   109da:	bne.n	109e4 <__ssvfscanf_r+0xe70>
   109dc:	add.w	r8, r8, #4
   109e0:	mov	r6, r9
   109e2:	b.n	10944 <__ssvfscanf_r+0xdd0>
   109e4:	mov	r6, r0
   109e6:	b.n	10944 <__ssvfscanf_r+0xdd0>
   109e8:	mov	r0, r5
   109ea:	bl	12f5c <nanf>
   109ee:	str	r6, [sp, #20]
   109f0:	vstr	s0, [r4]
   109f4:	b.n	1053c <__ssvfscanf_r+0x9c8>
   109f6:	bl	134b0 <_strtoull_r>
   109fa:	b.n	10930 <__ssvfscanf_r+0xdbc>

000109fc <_vdprintf_r>:
   109fc:	push	{r4, r5, r6, r7, lr}
   109fe:	sub.w	sp, sp, #532	; 0x214
   10a02:	add	r5, sp, #16
   10a04:	str	r3, [sp, #0]
   10a06:	mov	r7, r1
   10a08:	mov	r3, r2
   10a0a:	mov.w	r4, #512	; 0x200
   10a0e:	add	r2, sp, #12
   10a10:	mov	r1, r5
   10a12:	str	r4, [sp, #12]
   10a14:	mov	r6, r0
   10a16:	bl	13790 <_vasnprintf_r>
   10a1a:	cbz	r0, 10a40 <_vdprintf_r+0x44>
   10a1c:	mov	r4, r0
   10a1e:	mov	r2, r0
   10a20:	mov	r1, r7
   10a22:	ldr	r3, [sp, #12]
   10a24:	mov	r0, r6
   10a26:	bl	10a7c <_write_r>
   10a2a:	cmp	r4, r5
   10a2c:	str	r0, [sp, #12]
   10a2e:	beq.n	10a3a <_vdprintf_r+0x3e>
   10a30:	mov	r0, r6
   10a32:	mov	r1, r4
   10a34:	bl	11b90 <_free_r>
   10a38:	ldr	r0, [sp, #12]
   10a3a:	add.w	sp, sp, #532	; 0x214
   10a3e:	pop	{r4, r5, r6, r7, pc}
   10a40:	mov.w	r0, #4294967295
   10a44:	b.n	10a3a <_vdprintf_r+0x3e>
   10a46:	nop

00010a48 <vdprintf>:
   10a48:	push	{r4}
   10a4a:	ldr	r4, [pc, #16]	; (10a5c <vdprintf+0x14>)
   10a4c:	mov	r3, r2
   10a4e:	mov	r2, r1
   10a50:	mov	r1, r0
   10a52:	ldr	r0, [r4, #0]
   10a54:	ldr.w	r4, [sp], #4
   10a58:	b.w	109fc <_vdprintf_r>
   10a5c:	.word	0x1fff0d78

00010a60 <__ascii_wctomb>:
   10a60:	cbz	r1, 10a6c <__ascii_wctomb+0xc>
   10a62:	cmp	r2, #255	; 0xff
   10a64:	bhi.n	10a70 <__ascii_wctomb+0x10>
   10a66:	strb	r2, [r1, #0]
   10a68:	movs	r0, #1
   10a6a:	bx	lr
   10a6c:	mov	r0, r1
   10a6e:	bx	lr
   10a70:	movs	r3, #138	; 0x8a
   10a72:	str	r3, [r0, #0]
   10a74:	mov.w	r0, #4294967295
   10a78:	bx	lr
   10a7a:	nop

00010a7c <_write_r>:
   10a7c:	push	{r4, r5, r6, lr}
   10a7e:	mov	r5, r1
   10a80:	ldr	r4, [pc, #32]	; (10aa4 <_write_r+0x28>)
   10a82:	mov	r1, r2
   10a84:	mov	r6, r0
   10a86:	mov	r2, r3
   10a88:	mov	r0, r5
   10a8a:	movs	r3, #0
   10a8c:	str	r3, [r4, #0]
   10a8e:	bl	b030 <_write>
   10a92:	adds	r3, r0, #1
   10a94:	beq.n	10a98 <_write_r+0x1c>
   10a96:	pop	{r4, r5, r6, pc}
   10a98:	ldr	r3, [r4, #0]
   10a9a:	cmp	r3, #0
   10a9c:	beq.n	10a96 <_write_r+0x1a>
   10a9e:	str	r3, [r6, #0]
   10aa0:	pop	{r4, r5, r6, pc}
   10aa2:	nop
   10aa4:	.word	0x20020540

00010aa8 <__register_exitproc>:
   10aa8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10aac:	ldr	r4, [pc, #148]	; (10b44 <__register_exitproc+0x9c>)
   10aae:	ldr	r5, [r4, #0]
   10ab0:	ldr.w	r4, [r5, #328]	; 0x148
   10ab4:	mov	r6, r0
   10ab6:	mov	r8, r1
   10ab8:	mov	sl, r2
   10aba:	mov	r9, r3
   10abc:	cbz	r4, 10b30 <__register_exitproc+0x88>
   10abe:	ldr	r0, [r4, #4]
   10ac0:	cmp	r0, #31
   10ac2:	bgt.n	10af4 <__register_exitproc+0x4c>
   10ac4:	adds	r3, r0, #1
   10ac6:	cbz	r6, 10ae6 <__register_exitproc+0x3e>
   10ac8:	add.w	r5, r4, r0, lsl #2
   10acc:	movs	r2, #1
   10ace:	str.w	sl, [r5, #136]	; 0x88
   10ad2:	ldr.w	r1, [r4, #392]	; 0x188
   10ad6:	lsls	r2, r0
   10ad8:	orrs	r1, r2
   10ada:	cmp	r6, #2
   10adc:	str.w	r1, [r4, #392]	; 0x188
   10ae0:	str.w	r9, [r5, #264]	; 0x108
   10ae4:	beq.n	10b24 <__register_exitproc+0x7c>
   10ae6:	adds	r0, #2
   10ae8:	str	r3, [r4, #4]
   10aea:	str.w	r8, [r4, r0, lsl #2]
   10aee:	movs	r0, #0
   10af0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10af4:	ldr	r3, [pc, #80]	; (10b48 <__register_exitproc+0xa0>)
   10af6:	cbz	r3, 10b3a <__register_exitproc+0x92>
   10af8:	mov.w	r0, #400	; 0x190
   10afc:	bl	c564 <malloc>
   10b00:	mov	r4, r0
   10b02:	cbz	r0, 10b3a <__register_exitproc+0x92>
   10b04:	ldr.w	r3, [r5, #328]	; 0x148
   10b08:	movs	r7, #0
   10b0a:	stmia.w	r0, {r3, r7}
   10b0e:	str.w	r4, [r5, #328]	; 0x148
   10b12:	mov	r0, r7
   10b14:	movs	r3, #1
   10b16:	str.w	r7, [r4, #392]	; 0x188
   10b1a:	str.w	r7, [r4, #396]	; 0x18c
   10b1e:	cmp	r6, #0
   10b20:	beq.n	10ae6 <__register_exitproc+0x3e>
   10b22:	b.n	10ac8 <__register_exitproc+0x20>
   10b24:	ldr.w	r1, [r4, #396]	; 0x18c
   10b28:	orrs	r2, r1
   10b2a:	str.w	r2, [r4, #396]	; 0x18c
   10b2e:	b.n	10ae6 <__register_exitproc+0x3e>
   10b30:	add.w	r4, r5, #332	; 0x14c
   10b34:	str.w	r4, [r5, #328]	; 0x148
   10b38:	b.n	10abe <__register_exitproc+0x16>
   10b3a:	mov.w	r0, #4294967295
   10b3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10b42:	nop
   10b44:	.word	0x00014170
   10b48:	.word	0x0000c565

00010b4c <register_fini>:
   10b4c:	ldr	r3, [pc, #8]	; (10b58 <register_fini+0xc>)
   10b4e:	cbz	r3, 10b56 <register_fini+0xa>
   10b50:	ldr	r0, [pc, #8]	; (10b5c <register_fini+0x10>)
   10b52:	b.w	10b60 <atexit>
   10b56:	bx	lr
   10b58:	.word	0x00000000
   10b5c:	.word	0x00011acd

00010b60 <atexit>:
   10b60:	movs	r3, #0
   10b62:	mov	r1, r0
   10b64:	mov	r2, r3
   10b66:	mov	r0, r3
   10b68:	b.w	10aa8 <__register_exitproc>

00010b6c <quorem>:
   10b6c:	ldr	r2, [r0, #16]
   10b6e:	ldr	r3, [r1, #16]
   10b70:	cmp	r3, r2
   10b72:	bgt.w	10c90 <quorem+0x124>
   10b76:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b7a:	add.w	r8, r3, #4294967295
   10b7e:	add.w	r7, r1, #20
   10b82:	add.w	fp, r0, #20
   10b86:	ldr.w	r2, [r7, r8, lsl #2]
   10b8a:	ldr.w	r3, [fp, r8, lsl #2]
   10b8e:	mov.w	r4, r8, lsl #2
   10b92:	sub	sp, #12
   10b94:	adds	r2, #1
   10b96:	udiv	r9, r3, r2
   10b9a:	add.w	r3, fp, r4
   10b9e:	str	r4, [sp, #0]
   10ba0:	add.w	sl, r7, r4
   10ba4:	str	r3, [sp, #4]
   10ba6:	cmp.w	r9, #0
   10baa:	beq.n	10c20 <quorem+0xb4>
   10bac:	movs	r5, #0
   10bae:	mov	ip, r7
   10bb0:	mov	lr, fp
   10bb2:	mov	r3, r5
   10bb4:	ldr.w	r6, [ip], #4
   10bb8:	ldr.w	r2, [lr]
   10bbc:	uxth	r4, r6
   10bbe:	mla	r5, r9, r4, r5
   10bc2:	lsrs	r6, r6, #16
   10bc4:	lsrs	r4, r5, #16
   10bc6:	mla	r4, r9, r6, r4
   10bca:	uxth	r5, r5
   10bcc:	subs	r3, r3, r5
   10bce:	uxth	r6, r4
   10bd0:	uxtah	r3, r3, r2
   10bd4:	rsb	r6, r6, r2, lsr #16
   10bd8:	add.w	r6, r6, r3, asr #16
   10bdc:	uxth	r3, r3
   10bde:	orr.w	r3, r3, r6, lsl #16
   10be2:	cmp	sl, ip
   10be4:	str.w	r3, [lr], #4
   10be8:	mov.w	r5, r4, lsr #16
   10bec:	mov.w	r3, r6, asr #16
   10bf0:	bcs.n	10bb4 <quorem+0x48>
   10bf2:	ldr	r3, [sp, #0]
   10bf4:	ldr.w	r3, [fp, r3]
   10bf8:	cbnz	r3, 10c20 <quorem+0xb4>
   10bfa:	ldr	r4, [sp, #4]
   10bfc:	subs	r3, r4, #4
   10bfe:	cmp	fp, r3
   10c00:	bcs.n	10c1c <quorem+0xb0>
   10c02:	ldr.w	r3, [r4, #-4]
   10c06:	cbnz	r3, 10c1c <quorem+0xb0>
   10c08:	sub.w	r3, r4, #8
   10c0c:	b.n	10c14 <quorem+0xa8>
   10c0e:	ldr	r2, [r3, #0]
   10c10:	subs	r3, #4
   10c12:	cbnz	r2, 10c1c <quorem+0xb0>
   10c14:	cmp	fp, r3
   10c16:	add.w	r8, r8, #4294967295
   10c1a:	bcc.n	10c0e <quorem+0xa2>
   10c1c:	str.w	r8, [r0, #16]
   10c20:	mov	r4, r0
   10c22:	bl	12aa8 <__mcmp>
   10c26:	cmp	r0, #0
   10c28:	blt.n	10c88 <quorem+0x11c>
   10c2a:	add.w	r9, r9, #1
   10c2e:	mov	r5, fp
   10c30:	movs	r3, #0
   10c32:	ldr.w	r1, [r7], #4
   10c36:	ldr	r0, [r5, #0]
   10c38:	uxth	r2, r1
   10c3a:	subs	r2, r3, r2
   10c3c:	lsrs	r1, r1, #16
   10c3e:	uxtah	r2, r2, r0
   10c42:	rsb	r3, r1, r0, lsr #16
   10c46:	add.w	r3, r3, r2, asr #16
   10c4a:	uxth	r1, r2
   10c4c:	orr.w	r1, r1, r3, lsl #16
   10c50:	cmp	sl, r7
   10c52:	str.w	r1, [r5], #4
   10c56:	mov.w	r3, r3, asr #16
   10c5a:	bcs.n	10c32 <quorem+0xc6>
   10c5c:	ldr.w	r2, [fp, r8, lsl #2]
   10c60:	add.w	r3, fp, r8, lsl #2
   10c64:	cbnz	r2, 10c88 <quorem+0x11c>
   10c66:	subs	r2, r3, #4
   10c68:	cmp	fp, r2
   10c6a:	bcs.n	10c84 <quorem+0x118>
   10c6c:	ldr.w	r2, [r3, #-4]
   10c70:	cbnz	r2, 10c84 <quorem+0x118>
   10c72:	subs	r3, #8
   10c74:	b.n	10c7c <quorem+0x110>
   10c76:	ldr	r2, [r3, #0]
   10c78:	subs	r3, #4
   10c7a:	cbnz	r2, 10c84 <quorem+0x118>
   10c7c:	cmp	fp, r3
   10c7e:	add.w	r8, r8, #4294967295
   10c82:	bcc.n	10c76 <quorem+0x10a>
   10c84:	str.w	r8, [r4, #16]
   10c88:	mov	r0, r9
   10c8a:	add	sp, #12
   10c8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c90:	movs	r0, #0
   10c92:	bx	lr
   10c94:			; <UNDEFINED> instruction: 0xffffffff

00010c98 <_dtoa_r>:
   10c98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c9c:	vmov	r6, r7, d0
   10ca0:	sub	sp, #108	; 0x6c
   10ca2:	ldr	r4, [r0, #64]	; 0x40
   10ca4:	ldr	r5, [sp, #144]	; 0x90
   10ca6:	str	r1, [sp, #0]
   10ca8:	mov	r9, r0
   10caa:	str	r2, [sp, #20]
   10cac:	str	r3, [sp, #12]
   10cae:	vmov	sl, s0
   10cb2:	mov	fp, r7
   10cb4:	cbz	r4, 10ccc <_dtoa_r+0x34>
   10cb6:	ldr	r2, [r0, #68]	; 0x44
   10cb8:	str	r2, [r4, #4]
   10cba:	movs	r3, #1
   10cbc:	lsls	r3, r2
   10cbe:	str	r3, [r4, #8]
   10cc0:	mov	r1, r4
   10cc2:	bl	1264c <_Bfree>
   10cc6:	movs	r3, #0
   10cc8:	str.w	r3, [r9, #64]	; 0x40
   10ccc:	cmp.w	fp, #0
   10cd0:	mov	r4, fp
   10cd2:	blt.n	10d3e <_dtoa_r+0xa6>
   10cd4:	movs	r3, #0
   10cd6:	str	r3, [r5, #0]
   10cd8:	ldr	r3, [pc, #644]	; (10f60 <_dtoa_r+0x2c8>)
   10cda:	mov	r2, r3
   10cdc:	ands	r3, r4
   10cde:	cmp	r3, r2
   10ce0:	beq.n	10d10 <_dtoa_r+0x78>
   10ce2:	movs	r2, #0
   10ce4:	movs	r3, #0
   10ce6:	mov	r0, sl
   10ce8:	mov	r1, fp
   10cea:	bl	bc9c <__aeabi_dcmpeq>
   10cee:	mov	r6, sl
   10cf0:	mov	r7, fp
   10cf2:	mov	r8, r0
   10cf4:	cbz	r0, 10d4a <_dtoa_r+0xb2>
   10cf6:	ldr	r2, [sp, #12]
   10cf8:	movs	r3, #1
   10cfa:	str	r3, [r2, #0]
   10cfc:	ldr	r3, [sp, #148]	; 0x94
   10cfe:	cmp	r3, #0
   10d00:	beq.w	10e80 <_dtoa_r+0x1e8>
   10d04:	ldr	r0, [pc, #604]	; (10f64 <_dtoa_r+0x2cc>)
   10d06:	str	r0, [r3, #0]
   10d08:	subs	r0, #1
   10d0a:	add	sp, #108	; 0x6c
   10d0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d10:	ldr	r2, [sp, #12]
   10d12:	movw	r3, #9999	; 0x270f
   10d16:	str	r3, [r2, #0]
   10d18:	cmp.w	sl, #0
   10d1c:	beq.w	10e54 <_dtoa_r+0x1bc>
   10d20:	ldr	r0, [pc, #580]	; (10f68 <_dtoa_r+0x2d0>)
   10d22:	ldr	r3, [sp, #148]	; 0x94
   10d24:	cmp	r3, #0
   10d26:	beq.n	10d0a <_dtoa_r+0x72>
   10d28:	ldrb	r3, [r0, #3]
   10d2a:	cmp	r3, #0
   10d2c:	beq.w	10e84 <_dtoa_r+0x1ec>
   10d30:	add.w	r3, r0, #8
   10d34:	ldr	r2, [sp, #148]	; 0x94
   10d36:	str	r3, [r2, #0]
   10d38:	add	sp, #108	; 0x6c
   10d3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d3e:	movs	r3, #1
   10d40:	bic.w	r4, fp, #2147483648	; 0x80000000
   10d44:	str	r3, [r5, #0]
   10d46:	mov	fp, r4
   10d48:	b.n	10cd8 <_dtoa_r+0x40>
   10d4a:	add	r2, sp, #96	; 0x60
   10d4c:	add	r1, sp, #100	; 0x64
   10d4e:	vmov	d0, r6, r7
   10d52:	mov	r0, r9
   10d54:	bl	12d24 <__d2b>
   10d58:	lsrs	r5, r4, #20
   10d5a:	str	r0, [sp, #40]	; 0x28
   10d5c:	bne.w	10e66 <_dtoa_r+0x1ce>
   10d60:	ldr	r5, [sp, #96]	; 0x60
   10d62:	ldr	r6, [sp, #100]	; 0x64
   10d64:	add	r6, r5
   10d66:	addw	r3, r6, #1074	; 0x432
   10d6a:	cmp	r3, #32
   10d6c:	ble.w	11280 <_dtoa_r+0x5e8>
   10d70:	rsb	r3, r3, #64	; 0x40
   10d74:	addw	r0, r6, #1042	; 0x412
   10d78:	lsls	r4, r3
   10d7a:	lsr.w	r0, sl, r0
   10d7e:	orrs	r0, r4
   10d80:	bl	b6e0 <__aeabi_ui2d>
   10d84:	movs	r3, #1
   10d86:	subs	r4, r6, #1
   10d88:	sub.w	r1, r1, #32505856	; 0x1f00000
   10d8c:	str	r3, [sp, #60]	; 0x3c
   10d8e:	movs	r2, #0
   10d90:	ldr	r3, [pc, #472]	; (10f6c <_dtoa_r+0x2d4>)
   10d92:	bl	b464 <__aeabi_dsub>
   10d96:	add	r3, pc, #432	; (adr r3, 10f48 <_dtoa_r+0x2b0>)
   10d98:	ldrd	r2, r3, [r3]
   10d9c:	bl	b7cc <__aeabi_dmul>
   10da0:	add	r3, pc, #428	; (adr r3, 10f50 <_dtoa_r+0x2b8>)
   10da2:	ldrd	r2, r3, [r3]
   10da6:	bl	b468 <__adddf3>
   10daa:	mov	r6, r0
   10dac:	mov	r0, r4
   10dae:	mov	r7, r1
   10db0:	bl	b700 <__aeabi_i2d>
   10db4:	add	r3, pc, #416	; (adr r3, 10f58 <_dtoa_r+0x2c0>)
   10db6:	ldrd	r2, r3, [r3]
   10dba:	bl	b7cc <__aeabi_dmul>
   10dbe:	mov	r2, r0
   10dc0:	mov	r3, r1
   10dc2:	mov	r0, r6
   10dc4:	mov	r1, r7
   10dc6:	bl	b468 <__adddf3>
   10dca:	mov	r6, r0
   10dcc:	mov	r7, r1
   10dce:	bl	bd2c <__aeabi_d2iz>
   10dd2:	movs	r2, #0
   10dd4:	str	r0, [sp, #16]
   10dd6:	movs	r3, #0
   10dd8:	mov	r0, r6
   10dda:	mov	r1, r7
   10ddc:	bl	bcb0 <__aeabi_dcmplt>
   10de0:	cmp	r0, #0
   10de2:	bne.w	11236 <_dtoa_r+0x59e>
   10de6:	ldr	r6, [sp, #16]
   10de8:	cmp	r6, #22
   10dea:	bhi.w	11230 <_dtoa_r+0x598>
   10dee:	ldr	r3, [pc, #384]	; (10f70 <_dtoa_r+0x2d8>)
   10df0:	add.w	r3, r3, r6, lsl #3
   10df4:	ldrd	r0, r1, [r3]
   10df8:	mov	r2, sl
   10dfa:	mov	r3, fp
   10dfc:	bl	bcec <__aeabi_dcmpgt>
   10e00:	cmp	r0, #0
   10e02:	beq.w	1128a <_dtoa_r+0x5f2>
   10e06:	subs	r3, r6, #1
   10e08:	str	r3, [sp, #16]
   10e0a:	movs	r3, #0
   10e0c:	str	r3, [sp, #52]	; 0x34
   10e0e:	subs	r5, r5, r4
   10e10:	subs.w	r8, r5, #1
   10e14:	bmi.w	1126c <_dtoa_r+0x5d4>
   10e18:	movs	r3, #0
   10e1a:	str	r3, [sp, #28]
   10e1c:	ldr	r3, [sp, #16]
   10e1e:	cmp	r3, #0
   10e20:	blt.w	1125a <_dtoa_r+0x5c2>
   10e24:	add	r8, r3
   10e26:	str	r3, [sp, #48]	; 0x30
   10e28:	movs	r3, #0
   10e2a:	str	r3, [sp, #24]
   10e2c:	ldr	r3, [sp, #0]
   10e2e:	cmp	r3, #9
   10e30:	bhi.n	10e88 <_dtoa_r+0x1f0>
   10e32:	cmp	r3, #5
   10e34:	ble.w	11ac0 <_dtoa_r+0xe28>
   10e38:	subs	r3, #4
   10e3a:	str	r3, [sp, #0]
   10e3c:	movs	r6, #0
   10e3e:	ldr	r3, [sp, #0]
   10e40:	subs	r3, #2
   10e42:	cmp	r3, #3
   10e44:	bhi.w	11a8e <_dtoa_r+0xdf6>
   10e48:	tbh	[pc, r3, lsl #1]
   10e4c:	.word	0x0224032b
   10e50:	.word	0x04500336
   10e54:	ldr	r3, [pc, #272]	; (10f68 <_dtoa_r+0x2d0>)
   10e56:	ldr	r2, [pc, #284]	; (10f74 <_dtoa_r+0x2dc>)
   10e58:	ubfx	r0, r4, #0, #20
   10e5c:	cmp	r0, #0
   10e5e:	ite	ne
   10e60:	movne	r0, r3
   10e62:	moveq	r0, r2
   10e64:	b.n	10d22 <_dtoa_r+0x8a>
   10e66:	ubfx	r3, fp, #0, #20
   10e6a:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   10e6e:	subw	r4, r5, #1023	; 0x3ff
   10e72:	mov	r0, sl
   10e74:	str.w	r8, [sp, #60]	; 0x3c
   10e78:	orr.w	r1, r1, #3145728	; 0x300000
   10e7c:	ldr	r5, [sp, #96]	; 0x60
   10e7e:	b.n	10d8e <_dtoa_r+0xf6>
   10e80:	ldr	r0, [pc, #244]	; (10f78 <_dtoa_r+0x2e0>)
   10e82:	b.n	10d0a <_dtoa_r+0x72>
   10e84:	adds	r3, r0, #3
   10e86:	b.n	10d34 <_dtoa_r+0x9c>
   10e88:	movs	r1, #0
   10e8a:	str.w	r1, [r9, #68]	; 0x44
   10e8e:	mov	r0, r9
   10e90:	mov	r4, r1
   10e92:	str	r1, [sp, #0]
   10e94:	bl	12600 <_Balloc>
   10e98:	mov.w	r3, #4294967295
   10e9c:	str	r3, [sp, #32]
   10e9e:	str	r3, [sp, #56]	; 0x38
   10ea0:	movs	r3, #1
   10ea2:	str	r0, [sp, #36]	; 0x24
   10ea4:	str.w	r0, [r9, #64]	; 0x40
   10ea8:	str	r4, [sp, #20]
   10eaa:	str	r3, [sp, #44]	; 0x2c
   10eac:	ldr	r3, [sp, #100]	; 0x64
   10eae:	cmp	r3, #0
   10eb0:	blt.w	11054 <_dtoa_r+0x3bc>
   10eb4:	ldr	r2, [sp, #16]
   10eb6:	cmp	r2, #14
   10eb8:	bgt.w	11054 <_dtoa_r+0x3bc>
   10ebc:	ldr	r3, [pc, #176]	; (10f70 <_dtoa_r+0x2d8>)
   10ebe:	add.w	r3, r3, r2, lsl #3
   10ec2:	vldr	d7, [r3]
   10ec6:	ldr	r3, [sp, #20]
   10ec8:	cmp	r3, #0
   10eca:	vstr	d7, [sp]
   10ece:	blt.w	114ce <_dtoa_r+0x836>
   10ed2:	mov	r6, sl
   10ed4:	mov	r7, fp
   10ed6:	ldrd	sl, fp, [sp]
   10eda:	mov	r0, r6
   10edc:	mov	r2, sl
   10ede:	mov	r3, fp
   10ee0:	mov	r1, r7
   10ee2:	bl	ba20 <__aeabi_ddiv>
   10ee6:	bl	bd2c <__aeabi_d2iz>
   10eea:	mov	r4, r0
   10eec:	bl	b700 <__aeabi_i2d>
   10ef0:	mov	r2, sl
   10ef2:	mov	r3, fp
   10ef4:	bl	b7cc <__aeabi_dmul>
   10ef8:	mov	r3, r1
   10efa:	mov	r2, r0
   10efc:	mov	r1, r7
   10efe:	mov	r0, r6
   10f00:	bl	b464 <__aeabi_dsub>
   10f04:	ldr	r5, [sp, #36]	; 0x24
   10f06:	add.w	r3, r4, #48	; 0x30
   10f0a:	strb	r3, [r5, #0]
   10f0c:	ldr	r3, [sp, #32]
   10f0e:	cmp	r3, #1
   10f10:	mov	r6, r0
   10f12:	mov	r7, r1
   10f14:	add.w	r5, r5, #1
   10f18:	beq.n	10fde <_dtoa_r+0x346>
   10f1a:	movs	r2, #0
   10f1c:	ldr	r3, [pc, #92]	; (10f7c <_dtoa_r+0x2e4>)
   10f1e:	bl	b7cc <__aeabi_dmul>
   10f22:	movs	r2, #0
   10f24:	movs	r3, #0
   10f26:	mov	r6, r0
   10f28:	mov	r7, r1
   10f2a:	bl	bc9c <__aeabi_dcmpeq>
   10f2e:	cmp	r0, #0
   10f30:	bne.n	1102e <_dtoa_r+0x396>
   10f32:	str.w	r9, [sp, #20]
   10f36:	ldr.w	sl, [sp, #32]
   10f3a:	ldr.w	fp, [sp, #36]	; 0x24
   10f3e:	ldrd	r8, r9, [sp]
   10f42:	b.n	10f96 <_dtoa_r+0x2fe>
   10f44:	nop.w
   10f48:	.word	0x636f4361
   10f4c:	.word	0x3fd287a7
   10f50:	.word	0x8b60c8b3
   10f54:	.word	0x3fc68a28
   10f58:	.word	0x509f79fb
   10f5c:	.word	0x3fd34413
   10f60:	.word	0x7ff00000
   10f64:	.word	0x00014231
   10f68:	.word	0x00014380
   10f6c:	.word	0x3ff80000
   10f70:	.word	0x00014488
   10f74:	.word	0x00014374
   10f78:	.word	0x00014230
   10f7c:	.word	0x40240000
   10f80:	bl	b7cc <__aeabi_dmul>
   10f84:	movs	r2, #0
   10f86:	movs	r3, #0
   10f88:	mov	r6, r0
   10f8a:	mov	r7, r1
   10f8c:	bl	bc9c <__aeabi_dcmpeq>
   10f90:	cmp	r0, #0
   10f92:	bne.w	116f2 <_dtoa_r+0xa5a>
   10f96:	mov	r2, r8
   10f98:	mov	r3, r9
   10f9a:	mov	r0, r6
   10f9c:	mov	r1, r7
   10f9e:	bl	ba20 <__aeabi_ddiv>
   10fa2:	bl	bd2c <__aeabi_d2iz>
   10fa6:	mov	r4, r0
   10fa8:	bl	b700 <__aeabi_i2d>
   10fac:	mov	r2, r8
   10fae:	mov	r3, r9
   10fb0:	bl	b7cc <__aeabi_dmul>
   10fb4:	mov	r2, r0
   10fb6:	mov	r3, r1
   10fb8:	mov	r0, r6
   10fba:	mov	r1, r7
   10fbc:	bl	b464 <__aeabi_dsub>
   10fc0:	add.w	lr, r4, #48	; 0x30
   10fc4:	strb.w	lr, [r5], #1
   10fc8:	rsb	lr, fp, r5
   10fcc:	cmp	lr, sl
   10fce:	mov	r6, r0
   10fd0:	mov	r7, r1
   10fd2:	mov.w	r2, #0
   10fd6:	ldr	r3, [pc, #696]	; (11290 <_dtoa_r+0x5f8>)
   10fd8:	bne.n	10f80 <_dtoa_r+0x2e8>
   10fda:	ldr.w	r9, [sp, #20]
   10fde:	mov	r2, r6
   10fe0:	mov	r3, r7
   10fe2:	mov	r0, r6
   10fe4:	mov	r1, r7
   10fe6:	bl	b468 <__adddf3>
   10fea:	mov	r6, r0
   10fec:	mov	r7, r1
   10fee:	mov	r2, r0
   10ff0:	mov	r3, r1
   10ff2:	ldrd	r0, r1, [sp]
   10ff6:	bl	bcb0 <__aeabi_dcmplt>
   10ffa:	cbnz	r0, 1100e <_dtoa_r+0x376>
   10ffc:	mov	r2, r6
   10ffe:	mov	r3, r7
   11000:	ldrd	r0, r1, [sp]
   11004:	bl	bc9c <__aeabi_dcmpeq>
   11008:	cbz	r0, 1102e <_dtoa_r+0x396>
   1100a:	lsls	r3, r4, #31
   1100c:	bpl.n	1102e <_dtoa_r+0x396>
   1100e:	ldrb.w	r4, [r5, #-1]
   11012:	ldr	r2, [sp, #36]	; 0x24
   11014:	subs	r3, r5, #1
   11016:	b.n	11022 <_dtoa_r+0x38a>
   11018:	cmp	r2, r3
   1101a:	beq.w	11816 <_dtoa_r+0xb7e>
   1101e:	ldrb.w	r4, [r3, #-1]!
   11022:	cmp	r4, #57	; 0x39
   11024:	add.w	r5, r3, #1
   11028:	beq.n	11018 <_dtoa_r+0x380>
   1102a:	adds	r4, #1
   1102c:	strb	r4, [r3, #0]
   1102e:	ldr	r1, [sp, #40]	; 0x28
   11030:	mov	r0, r9
   11032:	bl	1264c <_Bfree>
   11036:	movs	r2, #0
   11038:	ldr	r3, [sp, #16]
   1103a:	strb	r2, [r5, #0]
   1103c:	ldr	r2, [sp, #12]
   1103e:	adds	r3, #1
   11040:	str	r3, [r2, #0]
   11042:	ldr	r3, [sp, #148]	; 0x94
   11044:	cmp	r3, #0
   11046:	beq.w	11780 <_dtoa_r+0xae8>
   1104a:	ldr	r0, [sp, #36]	; 0x24
   1104c:	str	r5, [r3, #0]
   1104e:	add	sp, #108	; 0x6c
   11050:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11054:	ldr	r2, [sp, #44]	; 0x2c
   11056:	cmp	r2, #0
   11058:	beq.w	11278 <_dtoa_r+0x5e0>
   1105c:	ldr	r2, [sp, #0]
   1105e:	cmp	r2, #1
   11060:	ble.w	11512 <_dtoa_r+0x87a>
   11064:	ldr	r3, [sp, #32]
   11066:	ldr	r2, [sp, #24]
   11068:	subs	r7, r3, #1
   1106a:	cmp	r2, r7
   1106c:	blt.w	11786 <_dtoa_r+0xaee>
   11070:	subs	r7, r2, r7
   11072:	ldr	r3, [sp, #32]
   11074:	cmp	r3, #0
   11076:	blt.w	1197a <_dtoa_r+0xce2>
   1107a:	ldr	r5, [sp, #28]
   1107c:	ldr	r3, [sp, #32]
   1107e:	ldr	r2, [sp, #28]
   11080:	movs	r1, #1
   11082:	add	r2, r3
   11084:	mov	r0, r9
   11086:	str	r2, [sp, #28]
   11088:	add	r8, r3
   1108a:	bl	12814 <__i2b>
   1108e:	mov	r6, r0
   11090:	cbz	r5, 110ac <_dtoa_r+0x414>
   11092:	cmp.w	r8, #0
   11096:	ble.n	110ac <_dtoa_r+0x414>
   11098:	cmp	r5, r8
   1109a:	ldr	r2, [sp, #28]
   1109c:	mov	r3, r5
   1109e:	it	ge
   110a0:	movge	r3, r8
   110a2:	subs	r2, r2, r3
   110a4:	str	r2, [sp, #28]
   110a6:	subs	r5, r5, r3
   110a8:	rsb	r8, r3, r8
   110ac:	ldr	r3, [sp, #24]
   110ae:	cmp	r3, #0
   110b0:	ble.w	1169e <_dtoa_r+0xa06>
   110b4:	ldr	r2, [sp, #44]	; 0x2c
   110b6:	cmp	r2, #0
   110b8:	beq.w	114c0 <_dtoa_r+0x828>
   110bc:	cmp	r7, #0
   110be:	beq.w	114c0 <_dtoa_r+0x828>
   110c2:	mov	r1, r6
   110c4:	mov	r2, r7
   110c6:	mov	r0, r9
   110c8:	bl	12958 <__pow5mult>
   110cc:	ldr	r2, [sp, #40]	; 0x28
   110ce:	mov	r1, r0
   110d0:	mov	r6, r0
   110d2:	mov	r0, r9
   110d4:	bl	12828 <__multiply>
   110d8:	ldr	r1, [sp, #40]	; 0x28
   110da:	mov	r4, r0
   110dc:	mov	r0, r9
   110de:	bl	1264c <_Bfree>
   110e2:	ldr	r3, [sp, #24]
   110e4:	subs	r3, r3, r7
   110e6:	str	r3, [sp, #24]
   110e8:	bne.w	114be <_dtoa_r+0x826>
   110ec:	movs	r1, #1
   110ee:	mov	r0, r9
   110f0:	bl	12814 <__i2b>
   110f4:	ldr	r3, [sp, #48]	; 0x30
   110f6:	str	r0, [sp, #24]
   110f8:	cmp	r3, #0
   110fa:	beq.w	11528 <_dtoa_r+0x890>
   110fe:	mov	r1, r0
   11100:	mov	r2, r3
   11102:	mov	r0, r9
   11104:	bl	12958 <__pow5mult>
   11108:	ldr	r3, [sp, #0]
   1110a:	str	r0, [sp, #24]
   1110c:	cmp	r3, #1
   1110e:	ble.w	116f8 <_dtoa_r+0xa60>
   11112:	movs	r7, #0
   11114:	ldr	r2, [sp, #24]
   11116:	ldr	r3, [r2, #16]
   11118:	add.w	r3, r2, r3, lsl #2
   1111c:	ldr	r0, [r3, #16]
   1111e:	bl	12778 <__hi0bits>
   11122:	rsb	r0, r0, #32
   11126:	add	r0, r8
   11128:	ands.w	r0, r0, #31
   1112c:	beq.w	11524 <_dtoa_r+0x88c>
   11130:	rsb	r3, r0, #32
   11134:	cmp	r3, #4
   11136:	ble.w	11ab4 <_dtoa_r+0xe1c>
   1113a:	rsb	r0, r0, #28
   1113e:	ldr	r3, [sp, #28]
   11140:	add	r3, r0
   11142:	str	r3, [sp, #28]
   11144:	add	r5, r0
   11146:	add	r8, r0
   11148:	ldr	r3, [sp, #28]
   1114a:	cmp	r3, #0
   1114c:	ble.n	1115a <_dtoa_r+0x4c2>
   1114e:	mov	r1, r4
   11150:	mov	r2, r3
   11152:	mov	r0, r9
   11154:	bl	129f8 <__lshift>
   11158:	mov	r4, r0
   1115a:	cmp.w	r8, #0
   1115e:	ble.n	1116c <_dtoa_r+0x4d4>
   11160:	mov	r2, r8
   11162:	ldr	r1, [sp, #24]
   11164:	mov	r0, r9
   11166:	bl	129f8 <__lshift>
   1116a:	str	r0, [sp, #24]
   1116c:	ldr	r3, [sp, #52]	; 0x34
   1116e:	cmp	r3, #0
   11170:	bne.w	11668 <_dtoa_r+0x9d0>
   11174:	ldr	r3, [sp, #32]
   11176:	cmp	r3, #0
   11178:	ble.w	116a2 <_dtoa_r+0xa0a>
   1117c:	ldr	r3, [sp, #44]	; 0x2c
   1117e:	cmp	r3, #0
   11180:	bne.w	1156c <_dtoa_r+0x8d4>
   11184:	ldr.w	fp, [sp, #36]	; 0x24
   11188:	ldr	r7, [sp, #32]
   1118a:	ldr.w	r8, [sp, #24]
   1118e:	mov	r5, fp
   11190:	b.n	11198 <_dtoa_r+0x500>
   11192:	bl	12660 <__multadd>
   11196:	mov	r4, r0
   11198:	mov	r1, r8
   1119a:	mov	r0, r4
   1119c:	bl	10b6c <quorem>
   111a0:	add.w	sl, r0, #48	; 0x30
   111a4:	strb.w	sl, [r5], #1
   111a8:	rsb	r3, fp, r5
   111ac:	cmp	r3, r7
   111ae:	mov.w	r2, #10
   111b2:	mov.w	r3, #0
   111b6:	mov	r1, r4
   111b8:	mov	r0, r9
   111ba:	blt.n	11192 <_dtoa_r+0x4fa>
   111bc:	ldr	r3, [sp, #36]	; 0x24
   111be:	ldr	r2, [sp, #32]
   111c0:	cmp	r2, #1
   111c2:	ite	ge
   111c4:	addge	r3, r3, r2
   111c6:	addlt	r3, #1
   111c8:	mov	r5, r3
   111ca:	mov.w	fp, #0
   111ce:	mov	r1, r4
   111d0:	movs	r2, #1
   111d2:	mov	r0, r9
   111d4:	bl	129f8 <__lshift>
   111d8:	ldr	r1, [sp, #24]
   111da:	str	r0, [sp, #40]	; 0x28
   111dc:	bl	12aa8 <__mcmp>
   111e0:	cmp	r0, #0
   111e2:	ble.w	117f0 <_dtoa_r+0xb58>
   111e6:	ldrb.w	r2, [r5, #-1]
   111ea:	ldr	r1, [sp, #36]	; 0x24
   111ec:	subs	r3, r5, #1
   111ee:	b.n	111fa <_dtoa_r+0x562>
   111f0:	cmp	r3, r1
   111f2:	beq.w	116de <_dtoa_r+0xa46>
   111f6:	ldrb.w	r2, [r3, #-1]!
   111fa:	cmp	r2, #57	; 0x39
   111fc:	add.w	r5, r3, #1
   11200:	beq.n	111f0 <_dtoa_r+0x558>
   11202:	adds	r2, #1
   11204:	strb	r2, [r3, #0]
   11206:	ldr	r1, [sp, #24]
   11208:	mov	r0, r9
   1120a:	bl	1264c <_Bfree>
   1120e:	cmp	r6, #0
   11210:	beq.w	1102e <_dtoa_r+0x396>
   11214:	cmp.w	fp, #0
   11218:	beq.n	11226 <_dtoa_r+0x58e>
   1121a:	cmp	fp, r6
   1121c:	beq.n	11226 <_dtoa_r+0x58e>
   1121e:	mov	r1, fp
   11220:	mov	r0, r9
   11222:	bl	1264c <_Bfree>
   11226:	mov	r1, r6
   11228:	mov	r0, r9
   1122a:	bl	1264c <_Bfree>
   1122e:	b.n	1102e <_dtoa_r+0x396>
   11230:	movs	r3, #1
   11232:	str	r3, [sp, #52]	; 0x34
   11234:	b.n	10e0e <_dtoa_r+0x176>
   11236:	ldr.w	r8, [sp, #16]
   1123a:	mov	r0, r8
   1123c:	bl	b700 <__aeabi_i2d>
   11240:	mov	r2, r0
   11242:	mov	r3, r1
   11244:	mov	r0, r6
   11246:	mov	r1, r7
   11248:	bl	bc9c <__aeabi_dcmpeq>
   1124c:	cmp	r0, #0
   1124e:	bne.w	10de6 <_dtoa_r+0x14e>
   11252:	add.w	r3, r8, #4294967295
   11256:	str	r3, [sp, #16]
   11258:	b.n	10de6 <_dtoa_r+0x14e>
   1125a:	ldr	r2, [sp, #28]
   1125c:	ldr	r3, [sp, #16]
   1125e:	subs	r2, r2, r3
   11260:	negs	r3, r3
   11262:	str	r3, [sp, #24]
   11264:	movs	r3, #0
   11266:	str	r2, [sp, #28]
   11268:	str	r3, [sp, #48]	; 0x30
   1126a:	b.n	10e2c <_dtoa_r+0x194>
   1126c:	rsb	r3, r8, #0
   11270:	str	r3, [sp, #28]
   11272:	mov.w	r8, #0
   11276:	b.n	10e1c <_dtoa_r+0x184>
   11278:	ldr	r7, [sp, #24]
   1127a:	ldr	r5, [sp, #28]
   1127c:	ldr	r6, [sp, #44]	; 0x2c
   1127e:	b.n	11090 <_dtoa_r+0x3f8>
   11280:	rsb	r4, r3, #32
   11284:	lsl.w	r0, sl, r4
   11288:	b.n	10d80 <_dtoa_r+0xe8>
   1128a:	str	r0, [sp, #52]	; 0x34
   1128c:	b.n	10e0e <_dtoa_r+0x176>
   1128e:	nop
   11290:	.word	0x40240000
   11294:	movs	r3, #0
   11296:	str	r3, [sp, #44]	; 0x2c
   11298:	ldr	r3, [sp, #16]
   1129a:	ldr	r2, [sp, #20]
   1129c:	add	r3, r2
   1129e:	str	r3, [sp, #56]	; 0x38
   112a0:	adds	r3, #1
   112a2:	cmp	r3, #0
   112a4:	str	r3, [sp, #32]
   112a6:	ble.w	117a4 <_dtoa_r+0xb0c>
   112aa:	ldr	r4, [sp, #32]
   112ac:	mov	r5, r4
   112ae:	movs	r1, #0
   112b0:	cmp	r5, #23
   112b2:	str.w	r1, [r9, #68]	; 0x44
   112b6:	bls.n	112d0 <_dtoa_r+0x638>
   112b8:	movs	r2, #1
   112ba:	movs	r3, #4
   112bc:	lsls	r3, r3, #1
   112be:	add.w	r0, r3, #20
   112c2:	cmp	r0, r5
   112c4:	mov	r1, r2
   112c6:	add.w	r2, r2, #1
   112ca:	bls.n	112bc <_dtoa_r+0x624>
   112cc:	str.w	r1, [r9, #68]	; 0x44
   112d0:	mov	r0, r9
   112d2:	bl	12600 <_Balloc>
   112d6:	cmp	r4, #14
   112d8:	str	r0, [sp, #36]	; 0x24
   112da:	str.w	r0, [r9, #64]	; 0x40
   112de:	bhi.w	10eac <_dtoa_r+0x214>
   112e2:	cmp	r6, #0
   112e4:	beq.w	10eac <_dtoa_r+0x214>
   112e8:	ldr	r1, [sp, #16]
   112ea:	cmp	r1, #0
   112ec:	strd	sl, fp, [sp, #64]	; 0x40
   112f0:	ble.w	11828 <_dtoa_r+0xb90>
   112f4:	ldr	r3, [pc, #576]	; (11538 <_dtoa_r+0x8a0>)
   112f6:	and.w	r2, r1, #15
   112fa:	asrs	r6, r1, #4
   112fc:	add.w	r3, r3, r2, lsl #3
   11300:	lsls	r0, r6, #27
   11302:	ldrd	r4, r5, [r3]
   11306:	bpl.w	11796 <_dtoa_r+0xafe>
   1130a:	ldr	r3, [pc, #560]	; (1153c <_dtoa_r+0x8a4>)
   1130c:	mov	r0, sl
   1130e:	mov	r1, fp
   11310:	ldrd	r2, r3, [r3, #32]
   11314:	bl	ba20 <__aeabi_ddiv>
   11318:	strd	r0, r1, [sp, #72]	; 0x48
   1131c:	and.w	r6, r6, #15
   11320:	mov.w	sl, #3
   11324:	cbz	r6, 11348 <_dtoa_r+0x6b0>
   11326:	ldr	r7, [pc, #532]	; (1153c <_dtoa_r+0x8a4>)
   11328:	lsls	r1, r6, #31
   1132a:	bpl.n	11340 <_dtoa_r+0x6a8>
   1132c:	mov	r0, r4
   1132e:	mov	r1, r5
   11330:	ldrd	r2, r3, [r7]
   11334:	bl	b7cc <__aeabi_dmul>
   11338:	add.w	sl, sl, #1
   1133c:	mov	r4, r0
   1133e:	mov	r5, r1
   11340:	asrs	r6, r6, #1
   11342:	add.w	r7, r7, #8
   11346:	bne.n	11328 <_dtoa_r+0x690>
   11348:	mov	r2, r4
   1134a:	mov	r3, r5
   1134c:	ldrd	r0, r1, [sp, #72]	; 0x48
   11350:	bl	ba20 <__aeabi_ddiv>
   11354:	mov	r6, r0
   11356:	mov	r7, r1
   11358:	ldr	r3, [sp, #52]	; 0x34
   1135a:	cbz	r3, 1136e <_dtoa_r+0x6d6>
   1135c:	movs	r2, #0
   1135e:	ldr	r3, [pc, #480]	; (11540 <_dtoa_r+0x8a8>)
   11360:	mov	r0, r6
   11362:	mov	r1, r7
   11364:	bl	bcb0 <__aeabi_dcmplt>
   11368:	cmp	r0, #0
   1136a:	bne.w	119a2 <_dtoa_r+0xd0a>
   1136e:	mov	r0, sl
   11370:	bl	b700 <__aeabi_i2d>
   11374:	mov	r2, r6
   11376:	mov	r3, r7
   11378:	bl	b7cc <__aeabi_dmul>
   1137c:	ldr	r3, [pc, #452]	; (11544 <_dtoa_r+0x8ac>)
   1137e:	movs	r2, #0
   11380:	bl	b468 <__adddf3>
   11384:	ldr	r3, [sp, #32]
   11386:	mov	r4, r0
   11388:	sub.w	r5, r1, #54525952	; 0x3400000
   1138c:	cmp	r3, #0
   1138e:	beq.w	11748 <_dtoa_r+0xab0>
   11392:	ldr	r3, [sp, #16]
   11394:	str	r3, [sp, #88]	; 0x58
   11396:	ldr	r3, [sp, #32]
   11398:	str	r3, [sp, #72]	; 0x48
   1139a:	ldr	r3, [sp, #44]	; 0x2c
   1139c:	cmp	r3, #0
   1139e:	beq.w	118ca <_dtoa_r+0xc32>
   113a2:	ldr	r2, [sp, #72]	; 0x48
   113a4:	ldr	r3, [pc, #400]	; (11538 <_dtoa_r+0x8a0>)
   113a6:	ldr	r1, [pc, #416]	; (11548 <_dtoa_r+0x8b0>)
   113a8:	add.w	r3, r3, r2, lsl #3
   113ac:	ldrd	r2, r3, [r3, #-8]
   113b0:	movs	r0, #0
   113b2:	bl	ba20 <__aeabi_ddiv>
   113b6:	mov	r2, r4
   113b8:	mov	r3, r5
   113ba:	bl	b464 <__aeabi_dsub>
   113be:	mov	sl, r0
   113c0:	mov	fp, r1
   113c2:	mov	r0, r6
   113c4:	mov	r1, r7
   113c6:	bl	bd2c <__aeabi_d2iz>
   113ca:	mov	r4, r0
   113cc:	bl	b700 <__aeabi_i2d>
   113d0:	mov	r2, r0
   113d2:	mov	r3, r1
   113d4:	mov	r0, r6
   113d6:	mov	r1, r7
   113d8:	bl	b464 <__aeabi_dsub>
   113dc:	adds	r4, #48	; 0x30
   113de:	ldr	r5, [sp, #36]	; 0x24
   113e0:	uxtb	r4, r4
   113e2:	mov	r6, r0
   113e4:	mov	r7, r1
   113e6:	strb	r4, [r5, #0]
   113e8:	mov	r2, r0
   113ea:	mov	r3, r1
   113ec:	mov	r0, sl
   113ee:	mov	r1, fp
   113f0:	adds	r5, #1
   113f2:	bl	bcec <__aeabi_dcmpgt>
   113f6:	cmp	r0, #0
   113f8:	bne.n	1149c <_dtoa_r+0x804>
   113fa:	mov	r2, r6
   113fc:	mov	r3, r7
   113fe:	movs	r0, #0
   11400:	ldr	r1, [pc, #316]	; (11540 <_dtoa_r+0x8a8>)
   11402:	bl	b464 <__aeabi_dsub>
   11406:	mov	r2, r0
   11408:	mov	r3, r1
   1140a:	mov	r0, sl
   1140c:	mov	r1, fp
   1140e:	bl	bcec <__aeabi_dcmpgt>
   11412:	cmp	r0, #0
   11414:	bne.w	11a28 <_dtoa_r+0xd90>
   11418:	ldr	r2, [sp, #72]	; 0x48
   1141a:	cmp	r2, #1
   1141c:	ble.w	1180e <_dtoa_r+0xb76>
   11420:	ldr	r3, [sp, #72]	; 0x48
   11422:	ldr	r2, [sp, #36]	; 0x24
   11424:	str.w	r8, [sp, #72]	; 0x48
   11428:	add	r3, r2
   1142a:	mov	r8, r3
   1142c:	b.n	1144a <_dtoa_r+0x7b2>
   1142e:	movs	r0, #0
   11430:	ldr	r1, [pc, #268]	; (11540 <_dtoa_r+0x8a8>)
   11432:	bl	b464 <__aeabi_dsub>
   11436:	mov	r2, sl
   11438:	mov	r3, fp
   1143a:	bl	bcb0 <__aeabi_dcmplt>
   1143e:	cmp	r0, #0
   11440:	bne.w	11a28 <_dtoa_r+0xd90>
   11444:	cmp	r5, r8
   11446:	beq.w	1180a <_dtoa_r+0xb72>
   1144a:	mov	r0, sl
   1144c:	mov	r1, fp
   1144e:	movs	r2, #0
   11450:	ldr	r3, [pc, #248]	; (1154c <_dtoa_r+0x8b4>)
   11452:	bl	b7cc <__aeabi_dmul>
   11456:	movs	r2, #0
   11458:	ldr	r3, [pc, #240]	; (1154c <_dtoa_r+0x8b4>)
   1145a:	mov	sl, r0
   1145c:	mov	fp, r1
   1145e:	mov	r0, r6
   11460:	mov	r1, r7
   11462:	bl	b7cc <__aeabi_dmul>
   11466:	mov	r7, r1
   11468:	mov	r6, r0
   1146a:	bl	bd2c <__aeabi_d2iz>
   1146e:	mov	r4, r0
   11470:	bl	b700 <__aeabi_i2d>
   11474:	mov	r2, r0
   11476:	mov	r3, r1
   11478:	mov	r0, r6
   1147a:	mov	r1, r7
   1147c:	bl	b464 <__aeabi_dsub>
   11480:	adds	r4, #48	; 0x30
   11482:	uxtb	r4, r4
   11484:	mov	r2, sl
   11486:	mov	r3, fp
   11488:	strb.w	r4, [r5], #1
   1148c:	mov	r6, r0
   1148e:	mov	r7, r1
   11490:	bl	bcb0 <__aeabi_dcmplt>
   11494:	mov	r2, r6
   11496:	mov	r3, r7
   11498:	cmp	r0, #0
   1149a:	beq.n	1142e <_dtoa_r+0x796>
   1149c:	ldr	r3, [sp, #88]	; 0x58
   1149e:	str	r3, [sp, #16]
   114a0:	b.n	1102e <_dtoa_r+0x396>
   114a2:	movs	r3, #0
   114a4:	str	r3, [sp, #44]	; 0x2c
   114a6:	ldr	r3, [sp, #20]
   114a8:	cmp	r3, #0
   114aa:	ble.w	117ae <_dtoa_r+0xb16>
   114ae:	mov	r5, r3
   114b0:	mov	r4, r3
   114b2:	str	r3, [sp, #56]	; 0x38
   114b4:	str	r3, [sp, #32]
   114b6:	b.n	112ae <_dtoa_r+0x616>
   114b8:	movs	r3, #1
   114ba:	str	r3, [sp, #44]	; 0x2c
   114bc:	b.n	114a6 <_dtoa_r+0x80e>
   114be:	str	r4, [sp, #40]	; 0x28
   114c0:	ldr	r2, [sp, #24]
   114c2:	ldr	r1, [sp, #40]	; 0x28
   114c4:	mov	r0, r9
   114c6:	bl	12958 <__pow5mult>
   114ca:	mov	r4, r0
   114cc:	b.n	110ec <_dtoa_r+0x454>
   114ce:	ldr	r3, [sp, #32]
   114d0:	cmp	r3, #0
   114d2:	bgt.w	10ed2 <_dtoa_r+0x23a>
   114d6:	bne.w	11778 <_dtoa_r+0xae0>
   114da:	movs	r2, #0
   114dc:	ldr	r3, [pc, #112]	; (11550 <_dtoa_r+0x8b8>)
   114de:	ldrd	r0, r1, [sp]
   114e2:	bl	b7cc <__aeabi_dmul>
   114e6:	mov	r3, fp
   114e8:	mov	r2, sl
   114ea:	bl	bcd8 <__aeabi_dcmpge>
   114ee:	ldr	r3, [sp, #32]
   114f0:	str	r3, [sp, #24]
   114f2:	mov	r6, r3
   114f4:	cmp	r0, #0
   114f6:	beq.w	116ce <_dtoa_r+0xa36>
   114fa:	ldr	r3, [sp, #20]
   114fc:	ldr	r5, [sp, #36]	; 0x24
   114fe:	mvns	r3, r3
   11500:	str	r3, [sp, #16]
   11502:	ldr	r1, [sp, #24]
   11504:	mov	r0, r9
   11506:	bl	1264c <_Bfree>
   1150a:	cmp	r6, #0
   1150c:	beq.w	1102e <_dtoa_r+0x396>
   11510:	b.n	11226 <_dtoa_r+0x58e>
   11512:	ldr	r2, [sp, #60]	; 0x3c
   11514:	cmp	r2, #0
   11516:	beq.w	1198a <_dtoa_r+0xcf2>
   1151a:	addw	r3, r3, #1075	; 0x433
   1151e:	ldr	r7, [sp, #24]
   11520:	ldr	r5, [sp, #28]
   11522:	b.n	1107e <_dtoa_r+0x3e6>
   11524:	movs	r0, #28
   11526:	b.n	1113e <_dtoa_r+0x4a6>
   11528:	ldr	r3, [sp, #0]
   1152a:	cmp	r3, #1
   1152c:	ble.w	11a30 <_dtoa_r+0xd98>
   11530:	ldr	r7, [sp, #48]	; 0x30
   11532:	movs	r0, #1
   11534:	b.n	11126 <_dtoa_r+0x48e>
   11536:	nop
   11538:	.word	0x00014488
   1153c:	.word	0x00014550
   11540:	.word	0x3ff00000
   11544:	.word	0x401c0000
   11548:	.word	0x3fe00000
   1154c:	.word	0x40240000
   11550:	.word	0x40140000
   11554:	mov	r1, r6
   11556:	movs	r3, #0
   11558:	movs	r2, #10
   1155a:	mov	r0, r9
   1155c:	bl	12660 <__multadd>
   11560:	ldr	r3, [sp, #56]	; 0x38
   11562:	cmp	r3, #0
   11564:	mov	r6, r0
   11566:	ble.w	11a84 <_dtoa_r+0xdec>
   1156a:	str	r3, [sp, #32]
   1156c:	cmp	r5, #0
   1156e:	ble.n	1157c <_dtoa_r+0x8e4>
   11570:	mov	r1, r6
   11572:	mov	r2, r5
   11574:	mov	r0, r9
   11576:	bl	129f8 <__lshift>
   1157a:	mov	r6, r0
   1157c:	cmp	r7, #0
   1157e:	bne.w	1187a <_dtoa_r+0xbe2>
   11582:	mov	r8, r6
   11584:	ldr	r3, [sp, #32]
   11586:	ldr	r2, [sp, #36]	; 0x24
   11588:	subs	r3, #1
   1158a:	adds	r3, r2, r3
   1158c:	str	r3, [sp, #32]
   1158e:	and.w	r3, sl, #1
   11592:	str	r3, [sp, #40]	; 0x28
   11594:	mov	r7, r2
   11596:	ldr.w	fp, [sp, #24]
   1159a:	mov	r0, r4
   1159c:	mov	r1, fp
   1159e:	bl	10b6c <quorem>
   115a2:	mov	r1, r6
   115a4:	mov	r5, r0
   115a6:	mov	r0, r4
   115a8:	bl	12aa8 <__mcmp>
   115ac:	mov	r2, r8
   115ae:	mov	r1, fp
   115b0:	mov	sl, r0
   115b2:	mov	r0, r9
   115b4:	bl	12aec <__mdiff>
   115b8:	ldr	r2, [r0, #12]
   115ba:	mov	fp, r0
   115bc:	add.w	r3, r5, #48	; 0x30
   115c0:	cmp	r2, #0
   115c2:	bne.n	11658 <_dtoa_r+0x9c0>
   115c4:	mov	r1, r0
   115c6:	mov	r0, r4
   115c8:	str	r3, [sp, #28]
   115ca:	bl	12aa8 <__mcmp>
   115ce:	mov	r1, fp
   115d0:	str	r0, [sp, #20]
   115d2:	mov	r0, r9
   115d4:	bl	1264c <_Bfree>
   115d8:	ldr	r2, [sp, #20]
   115da:	ldr	r3, [sp, #28]
   115dc:	cbnz	r2, 115ea <_dtoa_r+0x952>
   115de:	ldr	r1, [sp, #0]
   115e0:	cbnz	r1, 115ea <_dtoa_r+0x952>
   115e2:	ldr	r1, [sp, #40]	; 0x28
   115e4:	cmp	r1, #0
   115e6:	beq.w	11a54 <_dtoa_r+0xdbc>
   115ea:	cmp.w	sl, #0
   115ee:	blt.w	117b8 <_dtoa_r+0xb20>
   115f2:	bne.n	11600 <_dtoa_r+0x968>
   115f4:	ldr	r1, [sp, #0]
   115f6:	cbnz	r1, 11600 <_dtoa_r+0x968>
   115f8:	ldr	r1, [sp, #40]	; 0x28
   115fa:	cmp	r1, #0
   115fc:	beq.w	117b8 <_dtoa_r+0xb20>
   11600:	cmp	r2, #0
   11602:	bgt.w	118a2 <_dtoa_r+0xc0a>
   11606:	ldr	r2, [sp, #32]
   11608:	strb	r3, [r7, #0]
   1160a:	add.w	sl, r7, #1
   1160e:	cmp	r7, r2
   11610:	mov	r5, sl
   11612:	beq.w	118ba <_dtoa_r+0xc22>
   11616:	mov	r1, r4
   11618:	movs	r3, #0
   1161a:	movs	r2, #10
   1161c:	mov	r0, r9
   1161e:	bl	12660 <__multadd>
   11622:	cmp	r6, r8
   11624:	mov	r4, r0
   11626:	mov	r1, r6
   11628:	mov.w	r3, #0
   1162c:	mov.w	r2, #10
   11630:	mov	r0, r9
   11632:	beq.n	1164c <_dtoa_r+0x9b4>
   11634:	bl	12660 <__multadd>
   11638:	mov	r1, r8
   1163a:	mov	r6, r0
   1163c:	movs	r3, #0
   1163e:	movs	r2, #10
   11640:	mov	r0, r9
   11642:	bl	12660 <__multadd>
   11646:	mov	r7, sl
   11648:	mov	r8, r0
   1164a:	b.n	11596 <_dtoa_r+0x8fe>
   1164c:	bl	12660 <__multadd>
   11650:	mov	r7, sl
   11652:	mov	r6, r0
   11654:	mov	r8, r0
   11656:	b.n	11596 <_dtoa_r+0x8fe>
   11658:	mov	r1, r0
   1165a:	mov	r0, r9
   1165c:	str	r3, [sp, #20]
   1165e:	bl	1264c <_Bfree>
   11662:	movs	r2, #1
   11664:	ldr	r3, [sp, #20]
   11666:	b.n	115ea <_dtoa_r+0x952>
   11668:	ldr	r1, [sp, #24]
   1166a:	mov	r0, r4
   1166c:	bl	12aa8 <__mcmp>
   11670:	cmp	r0, #0
   11672:	bge.w	11174 <_dtoa_r+0x4dc>
   11676:	mov	r1, r4
   11678:	ldr	r4, [sp, #16]
   1167a:	movs	r3, #0
   1167c:	subs	r4, #1
   1167e:	movs	r2, #10
   11680:	mov	r0, r9
   11682:	str	r4, [sp, #16]
   11684:	bl	12660 <__multadd>
   11688:	ldr	r3, [sp, #44]	; 0x2c
   1168a:	mov	r4, r0
   1168c:	cmp	r3, #0
   1168e:	bne.w	11554 <_dtoa_r+0x8bc>
   11692:	ldr	r3, [sp, #56]	; 0x38
   11694:	cmp	r3, #0
   11696:	ble.w	11a74 <_dtoa_r+0xddc>
   1169a:	str	r3, [sp, #32]
   1169c:	b.n	11184 <_dtoa_r+0x4ec>
   1169e:	ldr	r4, [sp, #40]	; 0x28
   116a0:	b.n	110ec <_dtoa_r+0x454>
   116a2:	ldr	r3, [sp, #0]
   116a4:	cmp	r3, #2
   116a6:	ble.w	1117c <_dtoa_r+0x4e4>
   116aa:	ldr	r3, [sp, #32]
   116ac:	cmp	r3, #0
   116ae:	bne.w	119ec <_dtoa_r+0xd54>
   116b2:	ldr	r1, [sp, #24]
   116b4:	movs	r2, #5
   116b6:	mov	r0, r9
   116b8:	bl	12660 <__multadd>
   116bc:	mov	r1, r0
   116be:	str	r0, [sp, #24]
   116c0:	mov	r0, r4
   116c2:	bl	12aa8 <__mcmp>
   116c6:	cmp	r0, #0
   116c8:	str	r4, [sp, #40]	; 0x28
   116ca:	ble.w	114fa <_dtoa_r+0x862>
   116ce:	ldr	r2, [sp, #16]
   116d0:	ldr	r1, [sp, #36]	; 0x24
   116d2:	movs	r3, #49	; 0x31
   116d4:	adds	r2, #1
   116d6:	str	r2, [sp, #16]
   116d8:	strb	r3, [r1, #0]
   116da:	adds	r5, r1, #1
   116dc:	b.n	11502 <_dtoa_r+0x86a>
   116de:	ldr	r2, [sp, #16]
   116e0:	adds	r2, #1
   116e2:	str	r2, [sp, #16]
   116e4:	ldr	r2, [sp, #36]	; 0x24
   116e6:	movs	r3, #49	; 0x31
   116e8:	strb	r3, [r2, #0]
   116ea:	b.n	11206 <_dtoa_r+0x56e>
   116ec:	movs	r3, #1
   116ee:	str	r3, [sp, #44]	; 0x2c
   116f0:	b.n	11298 <_dtoa_r+0x600>
   116f2:	ldr.w	r9, [sp, #20]
   116f6:	b.n	1102e <_dtoa_r+0x396>
   116f8:	cmp.w	sl, #0
   116fc:	bne.w	11112 <_dtoa_r+0x47a>
   11700:	ubfx	r3, fp, #0, #20
   11704:	cmp	r3, #0
   11706:	bne.w	11986 <_dtoa_r+0xcee>
   1170a:	bic.w	r7, fp, #2147483648	; 0x80000000
   1170e:	lsrs	r7, r7, #20
   11710:	lsls	r7, r7, #20
   11712:	cbz	r7, 11720 <_dtoa_r+0xa88>
   11714:	ldr	r3, [sp, #28]
   11716:	adds	r3, #1
   11718:	str	r3, [sp, #28]
   1171a:	add.w	r8, r8, #1
   1171e:	movs	r7, #1
   11720:	ldr	r3, [sp, #48]	; 0x30
   11722:	movs	r0, #1
   11724:	cmp	r3, #0
   11726:	beq.w	11126 <_dtoa_r+0x48e>
   1172a:	b.n	11114 <_dtoa_r+0x47c>
   1172c:	mov	r0, sl
   1172e:	bl	b700 <__aeabi_i2d>
   11732:	mov	r2, r6
   11734:	mov	r3, r7
   11736:	bl	b7cc <__aeabi_dmul>
   1173a:	movs	r2, #0
   1173c:	ldr	r3, [pc, #764]	; (11a3c <_dtoa_r+0xda4>)
   1173e:	bl	b468 <__adddf3>
   11742:	mov	r4, r0
   11744:	sub.w	r5, r1, #54525952	; 0x3400000
   11748:	mov	r0, r6
   1174a:	mov	r1, r7
   1174c:	movs	r2, #0
   1174e:	ldr	r3, [pc, #752]	; (11a40 <_dtoa_r+0xda8>)
   11750:	bl	b464 <__aeabi_dsub>
   11754:	mov	r2, r4
   11756:	mov	r3, r5
   11758:	mov	r6, r0
   1175a:	mov	r7, r1
   1175c:	bl	bcec <__aeabi_dcmpgt>
   11760:	cmp	r0, #0
   11762:	bne.w	118c2 <_dtoa_r+0xc2a>
   11766:	mov	r2, r4
   11768:	add.w	r3, r5, #2147483648	; 0x80000000
   1176c:	mov	r0, r6
   1176e:	mov	r1, r7
   11770:	bl	bcb0 <__aeabi_dcmplt>
   11774:	cmp	r0, #0
   11776:	beq.n	1180e <_dtoa_r+0xb76>
   11778:	movs	r3, #0
   1177a:	str	r3, [sp, #24]
   1177c:	mov	r6, r3
   1177e:	b.n	114fa <_dtoa_r+0x862>
   11780:	ldr	r0, [sp, #36]	; 0x24
   11782:	b.w	10d0a <_dtoa_r+0x72>
   11786:	ldr	r3, [sp, #24]
   11788:	ldr	r2, [sp, #48]	; 0x30
   1178a:	str	r7, [sp, #24]
   1178c:	subs	r3, r7, r3
   1178e:	add	r2, r3
   11790:	str	r2, [sp, #48]	; 0x30
   11792:	movs	r7, #0
   11794:	b.n	11072 <_dtoa_r+0x3da>
   11796:	vldr	d7, [sp, #64]	; 0x40
   1179a:	mov.w	sl, #2
   1179e:	vstr	d7, [sp, #72]	; 0x48
   117a2:	b.n	11324 <_dtoa_r+0x68c>
   117a4:	mov	r4, r3
   117a6:	movs	r1, #0
   117a8:	str.w	r1, [r9, #68]	; 0x44
   117ac:	b.n	112d0 <_dtoa_r+0x638>
   117ae:	movs	r4, #1
   117b0:	str	r4, [sp, #56]	; 0x38
   117b2:	str	r4, [sp, #32]
   117b4:	str	r4, [sp, #20]
   117b6:	b.n	117a6 <_dtoa_r+0xb0e>
   117b8:	cmp	r2, #0
   117ba:	mov	sl, r3
   117bc:	ble.n	117e2 <_dtoa_r+0xb4a>
   117be:	mov	r1, r4
   117c0:	movs	r2, #1
   117c2:	mov	r0, r9
   117c4:	bl	129f8 <__lshift>
   117c8:	ldr	r1, [sp, #24]
   117ca:	mov	r4, r0
   117cc:	bl	12aa8 <__mcmp>
   117d0:	cmp	r0, #0
   117d2:	ble.w	11a66 <_dtoa_r+0xdce>
   117d6:	cmp.w	sl, #57	; 0x39
   117da:	beq.w	119f0 <_dtoa_r+0xd58>
   117de:	add.w	sl, r5, #49	; 0x31
   117e2:	mov	fp, r6
   117e4:	strb.w	sl, [r7]
   117e8:	adds	r5, r7, #1
   117ea:	mov	r6, r8
   117ec:	str	r4, [sp, #40]	; 0x28
   117ee:	b.n	11206 <_dtoa_r+0x56e>
   117f0:	bne.n	117fc <_dtoa_r+0xb64>
   117f2:	tst.w	sl, #1
   117f6:	beq.n	117fc <_dtoa_r+0xb64>
   117f8:	b.n	111e6 <_dtoa_r+0x54e>
   117fa:	mov	r5, r2
   117fc:	ldrb.w	r3, [r5, #-1]
   11800:	cmp	r3, #48	; 0x30
   11802:	add.w	r2, r5, #4294967295
   11806:	beq.n	117fa <_dtoa_r+0xb62>
   11808:	b.n	11206 <_dtoa_r+0x56e>
   1180a:	ldr.w	r8, [sp, #72]	; 0x48
   1180e:	ldrd	sl, fp, [sp, #64]	; 0x40
   11812:	b.w	10eac <_dtoa_r+0x214>
   11816:	ldr	r1, [sp, #36]	; 0x24
   11818:	movs	r2, #48	; 0x30
   1181a:	strb	r2, [r1, #0]
   1181c:	ldr	r2, [sp, #16]
   1181e:	ldrb.w	r4, [r5, #-1]
   11822:	adds	r2, #1
   11824:	str	r2, [sp, #16]
   11826:	b.n	1102a <_dtoa_r+0x392>
   11828:	ldr	r3, [sp, #16]
   1182a:	negs	r4, r3
   1182c:	cmp	r4, #0
   1182e:	beq.w	11998 <_dtoa_r+0xd00>
   11832:	ldr	r3, [pc, #528]	; (11a44 <_dtoa_r+0xdac>)
   11834:	and.w	r2, r4, #15
   11838:	add.w	r3, r3, r2, lsl #3
   1183c:	ldrd	r2, r3, [r3]
   11840:	ldrd	r0, r1, [sp, #64]	; 0x40
   11844:	bl	b7cc <__aeabi_dmul>
   11848:	asrs	r4, r4, #4
   1184a:	mov	r6, r0
   1184c:	mov	r7, r1
   1184e:	beq.w	11a7e <_dtoa_r+0xde6>
   11852:	ldr	r5, [pc, #500]	; (11a48 <_dtoa_r+0xdb0>)
   11854:	mov.w	sl, #2
   11858:	lsls	r2, r4, #31
   1185a:	bpl.n	11870 <_dtoa_r+0xbd8>
   1185c:	mov	r0, r6
   1185e:	mov	r1, r7
   11860:	ldrd	r2, r3, [r5]
   11864:	bl	b7cc <__aeabi_dmul>
   11868:	add.w	sl, sl, #1
   1186c:	mov	r6, r0
   1186e:	mov	r7, r1
   11870:	asrs	r4, r4, #1
   11872:	add.w	r5, r5, #8
   11876:	bne.n	11858 <_dtoa_r+0xbc0>
   11878:	b.n	11358 <_dtoa_r+0x6c0>
   1187a:	ldr	r1, [r6, #4]
   1187c:	mov	r0, r9
   1187e:	bl	12600 <_Balloc>
   11882:	ldr	r3, [r6, #16]
   11884:	adds	r2, r3, #2
   11886:	mov	r5, r0
   11888:	lsls	r2, r2, #2
   1188a:	add.w	r1, r6, #12
   1188e:	adds	r0, #12
   11890:	bl	94c8 <memcpy>
   11894:	mov	r1, r5
   11896:	movs	r2, #1
   11898:	mov	r0, r9
   1189a:	bl	129f8 <__lshift>
   1189e:	mov	r8, r0
   118a0:	b.n	11584 <_dtoa_r+0x8ec>
   118a2:	cmp	r3, #57	; 0x39
   118a4:	beq.w	119f0 <_dtoa_r+0xd58>
   118a8:	add.w	sl, r3, #1
   118ac:	mov	fp, r6
   118ae:	strb.w	sl, [r7]
   118b2:	adds	r5, r7, #1
   118b4:	mov	r6, r8
   118b6:	str	r4, [sp, #40]	; 0x28
   118b8:	b.n	11206 <_dtoa_r+0x56e>
   118ba:	mov	fp, r6
   118bc:	mov	sl, r3
   118be:	mov	r6, r8
   118c0:	b.n	111ce <_dtoa_r+0x536>
   118c2:	movs	r3, #0
   118c4:	str	r3, [sp, #24]
   118c6:	mov	r6, r3
   118c8:	b.n	116ce <_dtoa_r+0xa36>
   118ca:	ldr	r3, [sp, #72]	; 0x48
   118cc:	ldr	r1, [pc, #372]	; (11a44 <_dtoa_r+0xdac>)
   118ce:	subs	r2, r3, #1
   118d0:	add.w	r1, r1, r2, lsl #3
   118d4:	mov	r3, r5
   118d6:	str	r2, [sp, #92]	; 0x5c
   118d8:	ldrd	r0, r1, [r1]
   118dc:	mov	r2, r4
   118de:	bl	b7cc <__aeabi_dmul>
   118e2:	strd	r0, r1, [sp, #80]	; 0x50
   118e6:	mov	r1, r7
   118e8:	mov	r0, r6
   118ea:	bl	bd2c <__aeabi_d2iz>
   118ee:	mov	r4, r0
   118f0:	bl	b700 <__aeabi_i2d>
   118f4:	mov	r3, r1
   118f6:	mov	r2, r0
   118f8:	mov	r1, r7
   118fa:	mov	r0, r6
   118fc:	bl	b464 <__aeabi_dsub>
   11900:	ldr	r3, [sp, #72]	; 0x48
   11902:	mov	r7, r1
   11904:	ldr	r1, [sp, #36]	; 0x24
   11906:	adds	r4, #48	; 0x30
   11908:	cmp	r3, #1
   1190a:	mov	r6, r0
   1190c:	strb	r4, [r1, #0]
   1190e:	add.w	r5, r1, #1
   11912:	beq.n	11956 <_dtoa_r+0xcbe>
   11914:	ldr	r3, [sp, #72]	; 0x48
   11916:	ldr	r2, [sp, #36]	; 0x24
   11918:	add	r3, r2
   1191a:	mov	sl, r3
   1191c:	mov	fp, r5
   1191e:	movs	r2, #0
   11920:	ldr	r3, [pc, #296]	; (11a4c <_dtoa_r+0xdb4>)
   11922:	mov	r0, r6
   11924:	mov	r1, r7
   11926:	bl	b7cc <__aeabi_dmul>
   1192a:	mov	r7, r1
   1192c:	mov	r6, r0
   1192e:	bl	bd2c <__aeabi_d2iz>
   11932:	mov	r4, r0
   11934:	bl	b700 <__aeabi_i2d>
   11938:	adds	r4, #48	; 0x30
   1193a:	mov	r2, r0
   1193c:	mov	r3, r1
   1193e:	mov	r0, r6
   11940:	mov	r1, r7
   11942:	bl	b464 <__aeabi_dsub>
   11946:	strb.w	r4, [fp], #1
   1194a:	cmp	sl, fp
   1194c:	mov	r6, r0
   1194e:	mov	r7, r1
   11950:	bne.n	1191e <_dtoa_r+0xc86>
   11952:	ldr	r3, [sp, #92]	; 0x5c
   11954:	add	r5, r3
   11956:	movs	r2, #0
   11958:	ldr	r3, [pc, #244]	; (11a50 <_dtoa_r+0xdb8>)
   1195a:	ldrd	r0, r1, [sp, #80]	; 0x50
   1195e:	bl	b468 <__adddf3>
   11962:	mov	r2, r6
   11964:	mov	r3, r7
   11966:	bl	bcb0 <__aeabi_dcmplt>
   1196a:	cmp	r0, #0
   1196c:	beq.n	11a00 <_dtoa_r+0xd68>
   1196e:	ldr	r3, [sp, #88]	; 0x58
   11970:	str	r3, [sp, #16]
   11972:	ldrb.w	r4, [r5, #-1]
   11976:	b.w	11012 <_dtoa_r+0x37a>
   1197a:	ldr	r3, [sp, #28]
   1197c:	ldr	r2, [sp, #32]
   1197e:	subs	r5, r3, r2
   11980:	movs	r3, #0
   11982:	b.w	1107e <_dtoa_r+0x3e6>
   11986:	movs	r7, #0
   11988:	b.n	11720 <_dtoa_r+0xa88>
   1198a:	ldr	r3, [sp, #96]	; 0x60
   1198c:	ldr	r7, [sp, #24]
   1198e:	ldr	r5, [sp, #28]
   11990:	rsb	r3, r3, #54	; 0x36
   11994:	b.w	1107e <_dtoa_r+0x3e6>
   11998:	ldrd	r6, r7, [sp, #64]	; 0x40
   1199c:	mov.w	sl, #2
   119a0:	b.n	11358 <_dtoa_r+0x6c0>
   119a2:	ldr	r3, [sp, #32]
   119a4:	cmp	r3, #0
   119a6:	beq.w	1172c <_dtoa_r+0xa94>
   119aa:	ldr	r3, [sp, #56]	; 0x38
   119ac:	cmp	r3, #0
   119ae:	ble.w	1180e <_dtoa_r+0xb76>
   119b2:	movs	r2, #0
   119b4:	ldr	r3, [pc, #148]	; (11a4c <_dtoa_r+0xdb4>)
   119b6:	mov	r0, r6
   119b8:	mov	r1, r7
   119ba:	bl	b7cc <__aeabi_dmul>
   119be:	mov	r6, r0
   119c0:	mov	r7, r1
   119c2:	add.w	r0, sl, #1
   119c6:	bl	b700 <__aeabi_i2d>
   119ca:	mov	r2, r6
   119cc:	mov	r3, r7
   119ce:	bl	b7cc <__aeabi_dmul>
   119d2:	movs	r2, #0
   119d4:	ldr	r3, [pc, #100]	; (11a3c <_dtoa_r+0xda4>)
   119d6:	bl	b468 <__adddf3>
   119da:	ldr	r2, [sp, #16]
   119dc:	ldr	r3, [sp, #56]	; 0x38
   119de:	str	r3, [sp, #72]	; 0x48
   119e0:	subs	r2, #1
   119e2:	mov	r4, r0
   119e4:	sub.w	r5, r1, #54525952	; 0x3400000
   119e8:	str	r2, [sp, #88]	; 0x58
   119ea:	b.n	1139a <_dtoa_r+0x702>
   119ec:	str	r4, [sp, #40]	; 0x28
   119ee:	b.n	114fa <_dtoa_r+0x862>
   119f0:	movs	r2, #57	; 0x39
   119f2:	mov	fp, r6
   119f4:	str	r4, [sp, #40]	; 0x28
   119f6:	mov	r6, r8
   119f8:	strb	r2, [r7, #0]
   119fa:	adds	r5, r7, #1
   119fc:	b.w	111ea <_dtoa_r+0x552>
   11a00:	ldrd	r2, r3, [sp, #80]	; 0x50
   11a04:	movs	r0, #0
   11a06:	ldr	r1, [pc, #72]	; (11a50 <_dtoa_r+0xdb8>)
   11a08:	bl	b464 <__aeabi_dsub>
   11a0c:	mov	r2, r6
   11a0e:	mov	r3, r7
   11a10:	bl	bcec <__aeabi_dcmpgt>
   11a14:	cbnz	r0, 11a1a <_dtoa_r+0xd82>
   11a16:	b.n	1180e <_dtoa_r+0xb76>
   11a18:	mov	r5, r2
   11a1a:	ldrb.w	r3, [r5, #-1]
   11a1e:	cmp	r3, #48	; 0x30
   11a20:	add.w	r2, r5, #4294967295
   11a24:	beq.n	11a18 <_dtoa_r+0xd80>
   11a26:	b.n	1149c <_dtoa_r+0x804>
   11a28:	ldr	r3, [sp, #88]	; 0x58
   11a2a:	str	r3, [sp, #16]
   11a2c:	b.w	11012 <_dtoa_r+0x37a>
   11a30:	cmp.w	sl, #0
   11a34:	bne.w	11530 <_dtoa_r+0x898>
   11a38:	b.n	11700 <_dtoa_r+0xa68>
   11a3a:	nop
   11a3c:	.word	0x401c0000
   11a40:	.word	0x40140000
   11a44:	.word	0x00014488
   11a48:	.word	0x00014550
   11a4c:	.word	0x40240000
   11a50:	.word	0x3fe00000
   11a54:	cmp	r3, #57	; 0x39
   11a56:	mov	fp, sl
   11a58:	mov	sl, r3
   11a5a:	beq.n	119f0 <_dtoa_r+0xd58>
   11a5c:	cmp.w	fp, #0
   11a60:	bgt.w	117de <_dtoa_r+0xb46>
   11a64:	b.n	117e2 <_dtoa_r+0xb4a>
   11a66:	bne.w	117e2 <_dtoa_r+0xb4a>
   11a6a:	tst.w	sl, #1
   11a6e:	beq.w	117e2 <_dtoa_r+0xb4a>
   11a72:	b.n	117d6 <_dtoa_r+0xb3e>
   11a74:	ldr	r3, [sp, #0]
   11a76:	cmp	r3, #2
   11a78:	bgt.n	11ac6 <_dtoa_r+0xe2e>
   11a7a:	ldr	r3, [sp, #56]	; 0x38
   11a7c:	b.n	1169a <_dtoa_r+0xa02>
   11a7e:	mov.w	sl, #2
   11a82:	b.n	11358 <_dtoa_r+0x6c0>
   11a84:	ldr	r3, [sp, #0]
   11a86:	cmp	r3, #2
   11a88:	bgt.n	11ac6 <_dtoa_r+0xe2e>
   11a8a:	ldr	r3, [sp, #56]	; 0x38
   11a8c:	b.n	1156a <_dtoa_r+0x8d2>
   11a8e:	movs	r4, #0
   11a90:	str.w	r4, [r9, #68]	; 0x44
   11a94:	mov	r1, r4
   11a96:	mov	r0, r9
   11a98:	bl	12600 <_Balloc>
   11a9c:	mov.w	r3, #4294967295
   11aa0:	str	r3, [sp, #32]
   11aa2:	str	r3, [sp, #56]	; 0x38
   11aa4:	movs	r3, #1
   11aa6:	str	r0, [sp, #36]	; 0x24
   11aa8:	str	r4, [sp, #20]
   11aaa:	str.w	r0, [r9, #64]	; 0x40
   11aae:	str	r3, [sp, #44]	; 0x2c
   11ab0:	b.w	10eac <_dtoa_r+0x214>
   11ab4:	beq.w	11148 <_dtoa_r+0x4b0>
   11ab8:	rsb	r0, r0, #60	; 0x3c
   11abc:	b.w	1113e <_dtoa_r+0x4a6>
   11ac0:	movs	r6, #1
   11ac2:	b.w	10e3e <_dtoa_r+0x1a6>
   11ac6:	ldr	r3, [sp, #56]	; 0x38
   11ac8:	str	r3, [sp, #32]
   11aca:	b.n	116aa <_dtoa_r+0xa12>

00011acc <__libc_fini_array>:
   11acc:	push	{r3, r4, r5, lr}
   11ace:	ldr	r5, [pc, #28]	; (11aec <__libc_fini_array+0x20>)
   11ad0:	ldr	r4, [pc, #28]	; (11af0 <__libc_fini_array+0x24>)
   11ad2:	subs	r4, r5, r4
   11ad4:	asrs	r4, r4, #2
   11ad6:	beq.n	11ae4 <__libc_fini_array+0x18>
   11ad8:	subs	r4, #1
   11ada:	ldr.w	r3, [r5, #-4]!
   11ade:	blx	r3
   11ae0:	cmp	r4, #0
   11ae2:	bne.n	11ad8 <__libc_fini_array+0xc>
   11ae4:	ldmia.w	sp!, {r3, r4, r5, lr}
   11ae8:	b.w	1459c <__init_array_end>
	...

00011af4 <_malloc_trim_r>:
   11af4:	push	{r3, r4, r5, r6, r7, lr}
   11af6:	ldr	r7, [pc, #140]	; (11b84 <_malloc_trim_r+0x90>)
   11af8:	mov	r4, r1
   11afa:	mov	r6, r0
   11afc:	bl	cce8 <__malloc_lock>
   11b00:	ldr	r3, [r7, #8]
   11b02:	ldr	r5, [r3, #4]
   11b04:	bic.w	r5, r5, #3
   11b08:	subs	r1, r5, r4
   11b0a:	addw	r1, r1, #4079	; 0xfef
   11b0e:	bic.w	r1, r1, #4080	; 0xff0
   11b12:	bic.w	r1, r1, #15
   11b16:	sub.w	r4, r1, #4096	; 0x1000
   11b1a:	cmp.w	r4, #4096	; 0x1000
   11b1e:	blt.n	11b30 <_malloc_trim_r+0x3c>
   11b20:	movs	r1, #0
   11b22:	mov	r0, r6
   11b24:	bl	d0d0 <_sbrk_r>
   11b28:	ldr	r3, [r7, #8]
   11b2a:	add	r3, r5
   11b2c:	cmp	r0, r3
   11b2e:	beq.n	11b3a <_malloc_trim_r+0x46>
   11b30:	mov	r0, r6
   11b32:	bl	ccec <__malloc_unlock>
   11b36:	movs	r0, #0
   11b38:	pop	{r3, r4, r5, r6, r7, pc}
   11b3a:	negs	r1, r4
   11b3c:	mov	r0, r6
   11b3e:	bl	d0d0 <_sbrk_r>
   11b42:	adds	r0, #1
   11b44:	beq.n	11b62 <_malloc_trim_r+0x6e>
   11b46:	ldr	r3, [pc, #64]	; (11b88 <_malloc_trim_r+0x94>)
   11b48:	ldr	r2, [r7, #8]
   11b4a:	ldr	r1, [r3, #0]
   11b4c:	subs	r5, r5, r4
   11b4e:	orr.w	r5, r5, #1
   11b52:	mov	r0, r6
   11b54:	subs	r1, r1, r4
   11b56:	str	r5, [r2, #4]
   11b58:	str	r1, [r3, #0]
   11b5a:	bl	ccec <__malloc_unlock>
   11b5e:	movs	r0, #1
   11b60:	pop	{r3, r4, r5, r6, r7, pc}
   11b62:	movs	r1, #0
   11b64:	mov	r0, r6
   11b66:	bl	d0d0 <_sbrk_r>
   11b6a:	ldr	r2, [r7, #8]
   11b6c:	subs	r3, r0, r2
   11b6e:	cmp	r3, #15
   11b70:	ble.n	11b30 <_malloc_trim_r+0x3c>
   11b72:	ldr	r4, [pc, #24]	; (11b8c <_malloc_trim_r+0x98>)
   11b74:	ldr	r1, [pc, #16]	; (11b88 <_malloc_trim_r+0x94>)
   11b76:	ldr	r4, [r4, #0]
   11b78:	orr.w	r3, r3, #1
   11b7c:	subs	r0, r0, r4
   11b7e:	str	r3, [r2, #4]
   11b80:	str	r0, [r1, #0]
   11b82:	b.n	11b30 <_malloc_trim_r+0x3c>
   11b84:	.word	0x1fff0ee8
   11b88:	.word	0x200204dc
   11b8c:	.word	0x1fff12f4

00011b90 <_free_r>:
   11b90:	cmp	r1, #0
   11b92:	beq.n	11c20 <_free_r+0x90>
   11b94:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b98:	mov	r5, r1
   11b9a:	mov	r8, r0
   11b9c:	bl	cce8 <__malloc_lock>
   11ba0:	ldr.w	r7, [r5, #-4]
   11ba4:	ldr	r1, [pc, #424]	; (11d50 <_free_r+0x1c0>)
   11ba6:	bic.w	r3, r7, #1
   11baa:	sub.w	r4, r5, #8
   11bae:	adds	r2, r4, r3
   11bb0:	ldr	r6, [r1, #8]
   11bb2:	ldr	r0, [r2, #4]
   11bb4:	cmp	r2, r6
   11bb6:	bic.w	r0, r0, #3
   11bba:	beq.n	11c82 <_free_r+0xf2>
   11bbc:	lsls	r6, r7, #31
   11bbe:	str	r0, [r2, #4]
   11bc0:	bmi.n	11bda <_free_r+0x4a>
   11bc2:	ldr.w	r7, [r5, #-8]
   11bc6:	subs	r4, r4, r7
   11bc8:	add.w	lr, r1, #8
   11bcc:	ldr	r5, [r4, #8]
   11bce:	cmp	r5, lr
   11bd0:	add	r3, r7
   11bd2:	beq.n	11cb4 <_free_r+0x124>
   11bd4:	ldr	r7, [r4, #12]
   11bd6:	str	r7, [r5, #12]
   11bd8:	str	r5, [r7, #8]
   11bda:	adds	r5, r2, r0
   11bdc:	ldr	r5, [r5, #4]
   11bde:	lsls	r5, r5, #31
   11be0:	bpl.n	11c68 <_free_r+0xd8>
   11be2:	orr.w	r2, r3, #1
   11be6:	str	r2, [r4, #4]
   11be8:	str	r3, [r4, r3]
   11bea:	cmp.w	r3, #512	; 0x200
   11bee:	bcs.n	11c22 <_free_r+0x92>
   11bf0:	lsrs	r3, r3, #3
   11bf2:	adds	r2, r3, #1
   11bf4:	ldr	r5, [r1, #4]
   11bf6:	ldr.w	r7, [r1, r2, lsl #3]
   11bfa:	str	r7, [r4, #8]
   11bfc:	movs	r0, #1
   11bfe:	asrs	r3, r3, #2
   11c00:	lsl.w	r3, r0, r3
   11c04:	add.w	r0, r1, r2, lsl #3
   11c08:	orrs	r5, r3
   11c0a:	subs	r0, #8
   11c0c:	str	r0, [r4, #12]
   11c0e:	str	r5, [r1, #4]
   11c10:	str.w	r4, [r1, r2, lsl #3]
   11c14:	str	r4, [r7, #12]
   11c16:	mov	r0, r8
   11c18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11c1c:	b.w	ccec <__malloc_unlock>
   11c20:	bx	lr
   11c22:	lsrs	r2, r3, #9
   11c24:	cmp	r2, #4
   11c26:	bhi.n	11cd0 <_free_r+0x140>
   11c28:	lsrs	r2, r3, #6
   11c2a:	add.w	r7, r2, #57	; 0x39
   11c2e:	lsls	r7, r7, #1
   11c30:	add.w	r5, r2, #56	; 0x38
   11c34:	add.w	r0, r1, r7, lsl #2
   11c38:	ldr.w	r2, [r1, r7, lsl #2]
   11c3c:	ldr	r1, [pc, #272]	; (11d50 <_free_r+0x1c0>)
   11c3e:	subs	r0, #8
   11c40:	cmp	r0, r2
   11c42:	beq.n	11ce0 <_free_r+0x150>
   11c44:	ldr	r1, [r2, #4]
   11c46:	bic.w	r1, r1, #3
   11c4a:	cmp	r3, r1
   11c4c:	bcs.n	11c54 <_free_r+0xc4>
   11c4e:	ldr	r2, [r2, #8]
   11c50:	cmp	r0, r2
   11c52:	bne.n	11c44 <_free_r+0xb4>
   11c54:	ldr	r0, [r2, #12]
   11c56:	str	r0, [r4, #12]
   11c58:	str	r2, [r4, #8]
   11c5a:	str	r4, [r0, #8]
   11c5c:	str	r4, [r2, #12]
   11c5e:	mov	r0, r8
   11c60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11c64:	b.w	ccec <__malloc_unlock>
   11c68:	ldr	r5, [r2, #8]
   11c6a:	ldr	r7, [pc, #232]	; (11d54 <_free_r+0x1c4>)
   11c6c:	cmp	r5, r7
   11c6e:	add	r3, r0
   11c70:	beq.n	11cf2 <_free_r+0x162>
   11c72:	ldr	r0, [r2, #12]
   11c74:	str	r0, [r5, #12]
   11c76:	orr.w	r2, r3, #1
   11c7a:	str	r5, [r0, #8]
   11c7c:	str	r2, [r4, #4]
   11c7e:	str	r3, [r4, r3]
   11c80:	b.n	11bea <_free_r+0x5a>
   11c82:	lsls	r7, r7, #31
   11c84:	add	r3, r0
   11c86:	bmi.n	11c98 <_free_r+0x108>
   11c88:	ldr.w	r2, [r5, #-8]
   11c8c:	subs	r4, r4, r2
   11c8e:	add	r3, r2
   11c90:	ldr	r0, [r4, #8]
   11c92:	ldr	r2, [r4, #12]
   11c94:	str	r2, [r0, #12]
   11c96:	str	r0, [r2, #8]
   11c98:	ldr	r2, [pc, #188]	; (11d58 <_free_r+0x1c8>)
   11c9a:	ldr	r2, [r2, #0]
   11c9c:	orr.w	r0, r3, #1
   11ca0:	cmp	r3, r2
   11ca2:	str	r0, [r4, #4]
   11ca4:	str	r4, [r1, #8]
   11ca6:	bcc.n	11c16 <_free_r+0x86>
   11ca8:	ldr	r3, [pc, #176]	; (11d5c <_free_r+0x1cc>)
   11caa:	mov	r0, r8
   11cac:	ldr	r1, [r3, #0]
   11cae:	bl	11af4 <_malloc_trim_r>
   11cb2:	b.n	11c16 <_free_r+0x86>
   11cb4:	adds	r1, r2, r0
   11cb6:	ldr	r1, [r1, #4]
   11cb8:	lsls	r1, r1, #31
   11cba:	bmi.n	11d46 <_free_r+0x1b6>
   11cbc:	ldr	r1, [r2, #8]
   11cbe:	ldr	r2, [r2, #12]
   11cc0:	str	r2, [r1, #12]
   11cc2:	add	r3, r0
   11cc4:	orr.w	r0, r3, #1
   11cc8:	str	r1, [r2, #8]
   11cca:	str	r0, [r4, #4]
   11ccc:	str	r3, [r4, r3]
   11cce:	b.n	11c16 <_free_r+0x86>
   11cd0:	cmp	r2, #20
   11cd2:	bhi.n	11d04 <_free_r+0x174>
   11cd4:	add.w	r7, r2, #92	; 0x5c
   11cd8:	lsls	r7, r7, #1
   11cda:	add.w	r5, r2, #91	; 0x5b
   11cde:	b.n	11c34 <_free_r+0xa4>
   11ce0:	asrs	r2, r5, #2
   11ce2:	ldr	r3, [r1, #4]
   11ce4:	movs	r5, #1
   11ce6:	lsl.w	r2, r5, r2
   11cea:	orrs	r3, r2
   11cec:	str	r3, [r1, #4]
   11cee:	mov	r2, r0
   11cf0:	b.n	11c56 <_free_r+0xc6>
   11cf2:	orr.w	r2, r3, #1
   11cf6:	str	r4, [r1, #20]
   11cf8:	str	r4, [r1, #16]
   11cfa:	str	r5, [r4, #12]
   11cfc:	str	r5, [r4, #8]
   11cfe:	str	r2, [r4, #4]
   11d00:	str	r3, [r4, r3]
   11d02:	b.n	11c16 <_free_r+0x86>
   11d04:	cmp	r2, #84	; 0x54
   11d06:	bhi.n	11d16 <_free_r+0x186>
   11d08:	lsrs	r2, r3, #12
   11d0a:	add.w	r7, r2, #111	; 0x6f
   11d0e:	lsls	r7, r7, #1
   11d10:	add.w	r5, r2, #110	; 0x6e
   11d14:	b.n	11c34 <_free_r+0xa4>
   11d16:	cmp.w	r2, #340	; 0x154
   11d1a:	bhi.n	11d2a <_free_r+0x19a>
   11d1c:	lsrs	r2, r3, #15
   11d1e:	add.w	r7, r2, #120	; 0x78
   11d22:	lsls	r7, r7, #1
   11d24:	add.w	r5, r2, #119	; 0x77
   11d28:	b.n	11c34 <_free_r+0xa4>
   11d2a:	movw	r0, #1364	; 0x554
   11d2e:	cmp	r2, r0
   11d30:	bhi.n	11d40 <_free_r+0x1b0>
   11d32:	lsrs	r2, r3, #18
   11d34:	add.w	r7, r2, #125	; 0x7d
   11d38:	lsls	r7, r7, #1
   11d3a:	add.w	r5, r2, #124	; 0x7c
   11d3e:	b.n	11c34 <_free_r+0xa4>
   11d40:	movs	r7, #254	; 0xfe
   11d42:	movs	r5, #126	; 0x7e
   11d44:	b.n	11c34 <_free_r+0xa4>
   11d46:	orr.w	r2, r3, #1
   11d4a:	str	r2, [r4, #4]
   11d4c:	str	r3, [r4, r3]
   11d4e:	b.n	11c16 <_free_r+0x86>
   11d50:	.word	0x1fff0ee8
   11d54:	.word	0x1fff0ef0
   11d58:	.word	0x1fff12f0
   11d5c:	.word	0x200204d8

00011d60 <rshift>:
   11d60:	ldr	r2, [r0, #16]
   11d62:	asrs	r3, r1, #5
   11d64:	cmp	r3, r2
   11d66:	bge.n	11dc6 <rshift+0x66>
   11d68:	push	{r4, r5, r6, r7, lr}
   11d6a:	ands.w	r1, r1, #31
   11d6e:	add.w	r6, r0, #20
   11d72:	add.w	r2, r6, r2, lsl #2
   11d76:	add.w	lr, r6, r3, lsl #2
   11d7a:	beq.n	11dd0 <rshift+0x70>
   11d7c:	ldr.w	r3, [r6, r3, lsl #2]
   11d80:	add.w	r5, lr, #4
   11d84:	cmp	r2, r5
   11d86:	lsr.w	r4, r3, r1
   11d8a:	rsb	ip, r1, #32
   11d8e:	bls.n	11e04 <rshift+0xa4>
   11d90:	add.w	r7, r0, #16
   11d94:	ldr	r3, [r5, #0]
   11d96:	lsl.w	r3, r3, ip
   11d9a:	orrs	r3, r4
   11d9c:	str.w	r3, [r7, #4]!
   11da0:	ldr.w	r3, [r5], #4
   11da4:	cmp	r2, r5
   11da6:	lsr.w	r4, r3, r1
   11daa:	bhi.n	11d94 <rshift+0x34>
   11dac:	rsb	r2, lr, r2
   11db0:	subs	r2, #5
   11db2:	bic.w	r2, r2, #3
   11db6:	adds	r2, #4
   11db8:	add	r2, r6
   11dba:	str	r4, [r2, #0]
   11dbc:	cbz	r4, 11dc0 <rshift+0x60>
   11dbe:	adds	r2, #4
   11dc0:	subs	r3, r2, r6
   11dc2:	asrs	r3, r3, #2
   11dc4:	b.n	11df4 <rshift+0x94>
   11dc6:	movs	r3, #0
   11dc8:	str	r3, [r0, #16]
   11dca:	movs	r3, #0
   11dcc:	str	r3, [r0, #20]
   11dce:	bx	lr
   11dd0:	cmp	r2, lr
   11dd2:	bls.n	11dfa <rshift+0x9a>
   11dd4:	add.w	r4, r0, #16
   11dd8:	mov	r1, lr
   11dda:	ldr.w	r5, [r1], #4
   11dde:	str.w	r5, [r4, #4]!
   11de2:	cmp	r2, r1
   11de4:	bhi.n	11dda <rshift+0x7a>
   11de6:	mvn.w	r3, lr
   11dea:	add	r3, r2
   11dec:	bic.w	r3, r3, #3
   11df0:	adds	r3, #4
   11df2:	asrs	r3, r3, #2
   11df4:	str	r3, [r0, #16]
   11df6:	cbz	r3, 11dfe <rshift+0x9e>
   11df8:	pop	{r4, r5, r6, r7, pc}
   11dfa:	movs	r3, #0
   11dfc:	str	r3, [r0, #16]
   11dfe:	movs	r3, #0
   11e00:	str	r3, [r0, #20]
   11e02:	pop	{r4, r5, r6, r7, pc}
   11e04:	mov	r2, r6
   11e06:	b.n	11dba <rshift+0x5a>

00011e08 <__gethex>:
   11e08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e0c:	sub	sp, #44	; 0x2c
   11e0e:	mov	r9, r1
   11e10:	str	r0, [sp, #20]
   11e12:	ldr	r0, [sp, #88]	; 0x58
   11e14:	str	r2, [sp, #12]
   11e16:	str	r3, [sp, #32]
   11e18:	bl	124e4 <__localeconv_l>
   11e1c:	ldr	r3, [r0, #0]
   11e1e:	str	r3, [sp, #8]
   11e20:	mov	r0, r3
   11e22:	mov	r4, r3
   11e24:	bl	d280 <strlen>
   11e28:	ldr.w	r3, [r9]
   11e2c:	str	r0, [sp, #0]
   11e2e:	ldrb	r2, [r3, #2]
   11e30:	adds	r1, r4, r0
   11e32:	cmp	r2, #48	; 0x30
   11e34:	ldrb.w	fp, [r1, #-1]
   11e38:	bne.w	1218e <__gethex+0x386>
   11e3c:	adds	r3, #3
   11e3e:	mov.w	r8, #0
   11e42:	mov	r4, r3
   11e44:	ldrb.w	r2, [r3], #1
   11e48:	cmp	r2, #48	; 0x30
   11e4a:	add.w	r8, r8, #1
   11e4e:	beq.n	11e42 <__gethex+0x3a>
   11e50:	ldr	r6, [pc, #712]	; (1211c <__gethex+0x314>)
   11e52:	ldrb	r3, [r6, r2]
   11e54:	cmp	r3, #0
   11e56:	beq.w	1203a <__gethex+0x232>
   11e5a:	ldrb	r3, [r4, #0]
   11e5c:	mov.w	sl, #0
   11e60:	ldrb	r3, [r6, r3]
   11e62:	mov	r5, sl
   11e64:	mov	r7, r4
   11e66:	cbz	r3, 11e72 <__gethex+0x6a>
   11e68:	ldrb.w	r3, [r7, #1]!
   11e6c:	ldrb	r3, [r6, r3]
   11e6e:	cmp	r3, #0
   11e70:	bne.n	11e68 <__gethex+0x60>
   11e72:	ldr	r2, [sp, #0]
   11e74:	ldr	r1, [sp, #8]
   11e76:	mov	r0, r7
   11e78:	bl	d35c <strncmp>
   11e7c:	cmp	r0, #0
   11e7e:	beq.w	11fa6 <__gethex+0x19e>
   11e82:	ldrb	r3, [r7, #0]
   11e84:	cmp	r5, #0
   11e86:	beq.w	1216c <__gethex+0x364>
   11e8a:	subs	r5, r5, r7
   11e8c:	lsls	r2, r5, #2
   11e8e:	str	r2, [sp, #4]
   11e90:	cmp	r3, #80	; 0x50
   11e92:	beq.w	11fb8 <__gethex+0x1b0>
   11e96:	cmp	r3, #112	; 0x70
   11e98:	beq.w	11fb8 <__gethex+0x1b0>
   11e9c:	mov	r5, r7
   11e9e:	str.w	r7, [r9]
   11ea2:	cmp.w	sl, #0
   11ea6:	bne.w	12018 <__gethex+0x210>
   11eaa:	subs	r3, r5, r4
   11eac:	subs	r3, #1
   11eae:	cmp	r3, #7
   11eb0:	mov	r1, sl
   11eb2:	ble.n	11ebe <__gethex+0xb6>
   11eb4:	asrs	r3, r3, #1
   11eb6:	cmp	r3, #7
   11eb8:	add.w	r1, r1, #1
   11ebc:	bgt.n	11eb4 <__gethex+0xac>
   11ebe:	ldr	r0, [sp, #20]
   11ec0:	bl	12600 <_Balloc>
   11ec4:	mov	r3, r0
   11ec6:	adds	r3, #20
   11ec8:	cmp	r5, r4
   11eca:	str	r0, [sp, #16]
   11ecc:	str	r3, [sp, #28]
   11ece:	bls.w	12278 <__gethex+0x470>
   11ed2:	mov	r9, r3
   11ed4:	ldr	r3, [sp, #0]
   11ed6:	mov.w	r8, #0
   11eda:	rsb	r3, r3, #1
   11ede:	mov	r7, r8
   11ee0:	str	r3, [sp, #24]
   11ee2:	b.n	11f04 <__gethex+0xfc>
   11ee4:	cmp	r7, #32
   11ee6:	beq.w	12028 <__gethex+0x220>
   11eea:	mov	r2, r7
   11eec:	adds	r7, #4
   11eee:	ldrb.w	r3, [r5, #-1]
   11ef2:	ldrb	r3, [r6, r3]
   11ef4:	mov	r5, sl
   11ef6:	and.w	r3, r3, #15
   11efa:	lsls	r3, r2
   11efc:	cmp	r5, r4
   11efe:	orr.w	r8, r8, r3
   11f02:	bls.n	11f30 <__gethex+0x128>
   11f04:	ldrb.w	r3, [r5, #-1]
   11f08:	cmp	r3, fp
   11f0a:	add.w	sl, r5, #4294967295
   11f0e:	bne.n	11ee4 <__gethex+0xdc>
   11f10:	ldr	r3, [sp, #24]
   11f12:	add	r3, sl
   11f14:	cmp	r3, r4
   11f16:	bcc.n	11ee4 <__gethex+0xdc>
   11f18:	mov	r0, r3
   11f1a:	ldr	r2, [sp, #0]
   11f1c:	ldr	r1, [sp, #8]
   11f1e:	str	r3, [sp, #36]	; 0x24
   11f20:	bl	d35c <strncmp>
   11f24:	ldr	r3, [sp, #36]	; 0x24
   11f26:	cmp	r0, #0
   11f28:	bne.n	11ee4 <__gethex+0xdc>
   11f2a:	mov	r5, r3
   11f2c:	cmp	r5, r4
   11f2e:	bhi.n	11f04 <__gethex+0xfc>
   11f30:	str.w	r8, [r9], #4
   11f34:	ldr	r3, [sp, #28]
   11f36:	ldr	r2, [sp, #16]
   11f38:	rsb	r9, r3, r9
   11f3c:	mov.w	r3, r9, asr #2
   11f40:	str	r3, [r2, #16]
   11f42:	mov	r0, r8
   11f44:	mov.w	r9, r3, lsl #5
   11f48:	bl	12778 <__hi0bits>
   11f4c:	ldr	r3, [sp, #12]
   11f4e:	ldr	r6, [r3, #0]
   11f50:	rsb	r0, r0, r9
   11f54:	cmp	r0, r6
   11f56:	bgt.w	12120 <__gethex+0x318>
   11f5a:	blt.w	12170 <__gethex+0x368>
   11f5e:	movs	r7, #0
   11f60:	ldr	r3, [sp, #12]
   11f62:	ldr	r2, [sp, #4]
   11f64:	ldr	r3, [r3, #8]
   11f66:	cmp	r2, r3
   11f68:	bgt.w	1209a <__gethex+0x292>
   11f6c:	ldr	r0, [sp, #12]
   11f6e:	ldr	r1, [sp, #4]
   11f70:	ldr	r3, [r0, #4]
   11f72:	cmp	r1, r3
   11f74:	bge.w	120e2 <__gethex+0x2da>
   11f78:	subs	r5, r3, r1
   11f7a:	cmp	r6, r5
   11f7c:	bgt.w	1219e <__gethex+0x396>
   11f80:	ldr	r2, [r0, #12]
   11f82:	cmp	r2, #2
   11f84:	beq.w	12286 <__gethex+0x47e>
   11f88:	cmp	r2, #3
   11f8a:	beq.w	12246 <__gethex+0x43e>
   11f8e:	cmp	r2, #1
   11f90:	beq.w	1228e <__gethex+0x486>
   11f94:	ldr	r0, [sp, #20]
   11f96:	ldr	r1, [sp, #16]
   11f98:	bl	1264c <_Bfree>
   11f9c:	ldr	r2, [sp, #80]	; 0x50
   11f9e:	movs	r3, #0
   11fa0:	str	r3, [r2, #0]
   11fa2:	movs	r0, #80	; 0x50
   11fa4:	b.n	12022 <__gethex+0x21a>
   11fa6:	cmp	r5, #0
   11fa8:	beq.w	121de <__gethex+0x3d6>
   11fac:	ldrb	r3, [r7, #0]
   11fae:	b.n	11e8a <__gethex+0x82>
   11fb0:	movs	r3, #0
   11fb2:	str	r3, [sp, #4]
   11fb4:	mov.w	sl, #1
   11fb8:	ldrb	r3, [r7, #1]
   11fba:	cmp	r3, #43	; 0x2b
   11fbc:	beq.w	12118 <__gethex+0x310>
   11fc0:	cmp	r3, #45	; 0x2d
   11fc2:	beq.n	120b0 <__gethex+0x2a8>
   11fc4:	adds	r1, r7, #1
   11fc6:	movs	r5, #0
   11fc8:	ldrb	r3, [r6, r3]
   11fca:	ldr	r0, [pc, #336]	; (1211c <__gethex+0x314>)
   11fcc:	subs	r2, r3, #1
   11fce:	cmp	r2, #24
   11fd0:	bhi.w	11e9c <__gethex+0x94>
   11fd4:	ldrb	r2, [r1, #1]
   11fd6:	ldrb	r2, [r0, r2]
   11fd8:	subs	r0, r2, #1
   11fda:	cmp	r0, #24
   11fdc:	sub.w	r3, r3, #16
   11fe0:	add.w	r1, r1, #1
   11fe4:	bhi.n	11ffe <__gethex+0x1f6>
   11fe6:	ldrb.w	r0, [r1, #1]!
   11fea:	add.w	r3, r3, r3, lsl #2
   11fee:	add.w	r3, r2, r3, lsl #1
   11ff2:	ldrb	r2, [r6, r0]
   11ff4:	subs	r0, r2, #1
   11ff6:	cmp	r0, #24
   11ff8:	sub.w	r3, r3, #16
   11ffc:	bls.n	11fe6 <__gethex+0x1de>
   11ffe:	cbz	r5, 12002 <__gethex+0x1fa>
   12000:	negs	r3, r3
   12002:	ldr	r2, [sp, #4]
   12004:	mov	r5, r7
   12006:	add	r2, r3
   12008:	mov	r7, r1
   1200a:	str	r2, [sp, #4]
   1200c:	str.w	r7, [r9]
   12010:	cmp.w	sl, #0
   12014:	beq.w	11eaa <__gethex+0xa2>
   12018:	cmp.w	r8, #0
   1201c:	ite	eq
   1201e:	moveq	r0, #6
   12020:	movne	r0, #0
   12022:	add	sp, #44	; 0x2c
   12024:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12028:	str.w	r8, [r9]
   1202c:	mov.w	r8, #0
   12030:	add.w	r9, r9, #4
   12034:	mov	r2, r8
   12036:	movs	r7, #4
   12038:	b.n	11eee <__gethex+0xe6>
   1203a:	ldr	r5, [sp, #0]
   1203c:	ldr	r1, [sp, #8]
   1203e:	mov	r2, r5
   12040:	mov	r0, r4
   12042:	bl	d35c <strncmp>
   12046:	cmp	r0, #0
   12048:	beq.n	120b8 <__gethex+0x2b0>
   1204a:	ldrb	r3, [r4, #0]
   1204c:	mov	r7, r4
   1204e:	cmp	r3, #80	; 0x50
   12050:	beq.n	11fb0 <__gethex+0x1a8>
   12052:	cmp	r3, #112	; 0x70
   12054:	beq.n	11fb0 <__gethex+0x1a8>
   12056:	str.w	r7, [r9]
   1205a:	b.n	12018 <__gethex+0x210>
   1205c:	ldr	r3, [sp, #16]
   1205e:	ldr	r3, [r3, #8]
   12060:	cmp	r7, r3
   12062:	bge.w	122ce <__gethex+0x4c6>
   12066:	mov	r3, r7
   12068:	ldr	r0, [sp, #16]
   1206a:	add.w	r2, r0, r3, lsl #2
   1206e:	movs	r1, #1
   12070:	adds	r3, #1
   12072:	cmp	r4, #2
   12074:	str	r3, [r0, #16]
   12076:	str	r1, [r2, #20]
   12078:	beq.w	122ac <__gethex+0x4a4>
   1207c:	cmp	r7, r3
   1207e:	bge.w	12238 <__gethex+0x430>
   12082:	movs	r1, #1
   12084:	ldr	r0, [sp, #16]
   12086:	bl	11d60 <rshift>
   1208a:	ldr	r3, [sp, #12]
   1208c:	ldr	r2, [sp, #4]
   1208e:	ldr	r3, [r3, #8]
   12090:	adds	r2, #1
   12092:	cmp	r2, r3
   12094:	str	r2, [sp, #4]
   12096:	ble.w	1223e <__gethex+0x436>
   1209a:	ldr	r0, [sp, #20]
   1209c:	ldr	r1, [sp, #16]
   1209e:	bl	1264c <_Bfree>
   120a2:	ldr	r2, [sp, #80]	; 0x50
   120a4:	movs	r3, #0
   120a6:	movs	r0, #163	; 0xa3
   120a8:	str	r3, [r2, #0]
   120aa:	add	sp, #44	; 0x2c
   120ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120b0:	movs	r5, #1
   120b2:	ldrb	r3, [r7, #2]
   120b4:	adds	r1, r7, #2
   120b6:	b.n	11fc8 <__gethex+0x1c0>
   120b8:	ldrb	r2, [r4, r5]
   120ba:	ldrb	r3, [r6, r2]
   120bc:	adds	r7, r4, r5
   120be:	cmp	r3, #0
   120c0:	beq.n	12196 <__gethex+0x38e>
   120c2:	cmp	r2, #48	; 0x30
   120c4:	mov	r4, r7
   120c6:	bne.n	120d2 <__gethex+0x2ca>
   120c8:	ldrb.w	r3, [r4, #1]!
   120cc:	cmp	r3, #48	; 0x30
   120ce:	beq.n	120c8 <__gethex+0x2c0>
   120d0:	ldrb	r3, [r6, r3]
   120d2:	clz	sl, r3
   120d6:	mov	r5, r7
   120d8:	mov.w	sl, sl, lsr #5
   120dc:	mov.w	r8, #1
   120e0:	b.n	11e64 <__gethex+0x5c>
   120e2:	movs	r4, #1
   120e4:	cbz	r7, 12100 <__gethex+0x2f8>
   120e6:	ldr	r3, [sp, #12]
   120e8:	ldr	r3, [r3, #12]
   120ea:	cmp	r3, #2
   120ec:	beq.w	121fa <__gethex+0x3f2>
   120f0:	cmp	r3, #3
   120f2:	beq.w	12202 <__gethex+0x3fa>
   120f6:	cmp	r3, #1
   120f8:	beq.w	12266 <__gethex+0x45e>
   120fc:	orr.w	r4, r4, #16
   12100:	ldr	r3, [sp, #80]	; 0x50
   12102:	mov	r2, r3
   12104:	ldr	r3, [sp, #16]
   12106:	str	r3, [r2, #0]
   12108:	ldr	r3, [sp, #32]
   1210a:	mov	r2, r3
   1210c:	ldr	r3, [sp, #4]
   1210e:	str	r3, [r2, #0]
   12110:	mov	r0, r4
   12112:	add	sp, #44	; 0x2c
   12114:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12118:	movs	r5, #0
   1211a:	b.n	120b2 <__gethex+0x2aa>
   1211c:	.word	0x00014384
   12120:	subs	r4, r0, r6
   12122:	mov	r1, r4
   12124:	ldr	r0, [sp, #16]
   12126:	bl	12e88 <__any_on>
   1212a:	cmp	r0, #0
   1212c:	beq.n	1219a <__gethex+0x392>
   1212e:	subs	r2, r4, #1
   12130:	asrs	r1, r2, #5
   12132:	ldr	r0, [sp, #28]
   12134:	and.w	r3, r2, #31
   12138:	ldr.w	r1, [r0, r1, lsl #2]
   1213c:	movs	r7, #1
   1213e:	lsl.w	r3, r7, r3
   12142:	tst	r3, r1
   12144:	beq.n	1215c <__gethex+0x354>
   12146:	cmp	r2, r7
   12148:	ble.w	12282 <__gethex+0x47a>
   1214c:	subs	r1, r4, #2
   1214e:	ldr	r0, [sp, #16]
   12150:	bl	12e88 <__any_on>
   12154:	cmp	r0, #0
   12156:	beq.w	12282 <__gethex+0x47a>
   1215a:	movs	r7, #3
   1215c:	ldr	r3, [sp, #4]
   1215e:	ldr	r0, [sp, #16]
   12160:	add	r3, r4
   12162:	mov	r1, r4
   12164:	str	r3, [sp, #4]
   12166:	bl	11d60 <rshift>
   1216a:	b.n	11f60 <__gethex+0x158>
   1216c:	str	r5, [sp, #4]
   1216e:	b.n	11e90 <__gethex+0x88>
   12170:	subs	r4, r6, r0
   12172:	ldr	r1, [sp, #16]
   12174:	ldr	r0, [sp, #20]
   12176:	mov	r2, r4
   12178:	bl	129f8 <__lshift>
   1217c:	ldr	r3, [sp, #4]
   1217e:	str	r0, [sp, #16]
   12180:	subs	r3, r3, r4
   12182:	str	r3, [sp, #4]
   12184:	mov	r3, r0
   12186:	adds	r3, #20
   12188:	str	r3, [sp, #28]
   1218a:	movs	r7, #0
   1218c:	b.n	11f60 <__gethex+0x158>
   1218e:	adds	r4, r3, #2
   12190:	mov.w	r8, #0
   12194:	b.n	11e50 <__gethex+0x48>
   12196:	mov	r3, r2
   12198:	b.n	1204e <__gethex+0x246>
   1219a:	mov	r7, r0
   1219c:	b.n	1215c <__gethex+0x354>
   1219e:	subs	r4, r5, #1
   121a0:	cmp	r7, #0
   121a2:	bne.n	12242 <__gethex+0x43a>
   121a4:	cbz	r4, 121b0 <__gethex+0x3a8>
   121a6:	mov	r1, r4
   121a8:	ldr	r0, [sp, #16]
   121aa:	bl	12e88 <__any_on>
   121ae:	mov	r7, r0
   121b0:	asrs	r3, r4, #5
   121b2:	ldr	r2, [sp, #28]
   121b4:	ldr	r0, [sp, #16]
   121b6:	ldr.w	r2, [r2, r3, lsl #2]
   121ba:	and.w	r4, r4, #31
   121be:	movs	r3, #1
   121c0:	lsl.w	r4, r3, r4
   121c4:	tst	r4, r2
   121c6:	mov	r1, r5
   121c8:	it	ne
   121ca:	orrne.w	r7, r7, #2
   121ce:	bl	11d60 <rshift>
   121d2:	ldr	r3, [sp, #12]
   121d4:	ldr	r3, [r3, #4]
   121d6:	str	r3, [sp, #4]
   121d8:	subs	r6, r6, r5
   121da:	movs	r4, #2
   121dc:	b.n	120e4 <__gethex+0x2dc>
   121de:	ldr	r1, [sp, #0]
   121e0:	ldrb	r3, [r7, r1]
   121e2:	ldrb	r2, [r6, r3]
   121e4:	adds	r5, r7, r1
   121e6:	mov	r7, r5
   121e8:	cmp	r2, #0
   121ea:	beq.w	11e8a <__gethex+0x82>
   121ee:	ldrb.w	r3, [r7, #1]!
   121f2:	ldrb	r2, [r6, r3]
   121f4:	cmp	r2, #0
   121f6:	bne.n	121ee <__gethex+0x3e6>
   121f8:	b.n	11e8a <__gethex+0x82>
   121fa:	ldr	r3, [sp, #84]	; 0x54
   121fc:	rsb	r3, r3, #1
   12200:	str	r3, [sp, #84]	; 0x54
   12202:	ldr	r3, [sp, #84]	; 0x54
   12204:	cmp	r3, #0
   12206:	beq.w	120fc <__gethex+0x2f4>
   1220a:	ldr	r3, [sp, #16]
   1220c:	ldr	r5, [sp, #28]
   1220e:	ldr	r7, [r3, #16]
   12210:	mov.w	r8, r7, lsl #2
   12214:	add.w	r0, r5, r8
   12218:	mov	r3, r5
   1221a:	movs	r1, #0
   1221c:	b.n	12228 <__gethex+0x420>
   1221e:	str.w	r1, [r3], #4
   12222:	cmp	r0, r3
   12224:	bls.w	1205c <__gethex+0x254>
   12228:	ldr	r2, [r3, #0]
   1222a:	cmp.w	r2, #4294967295
   1222e:	beq.n	1221e <__gethex+0x416>
   12230:	adds	r2, #1
   12232:	cmp	r4, #2
   12234:	str	r2, [r3, #0]
   12236:	beq.n	122ac <__gethex+0x4a4>
   12238:	ands.w	r6, r6, #31
   1223c:	bne.n	122ba <__gethex+0x4b2>
   1223e:	movs	r4, #33	; 0x21
   12240:	b.n	12100 <__gethex+0x2f8>
   12242:	movs	r7, #1
   12244:	b.n	121b0 <__gethex+0x3a8>
   12246:	ldr	r2, [sp, #84]	; 0x54
   12248:	cmp	r2, #0
   1224a:	beq.w	11f94 <__gethex+0x18c>
   1224e:	ldr	r1, [sp, #32]
   12250:	str	r3, [r1, #0]
   12252:	ldr	r3, [sp, #28]
   12254:	ldr	r1, [sp, #16]
   12256:	movs	r2, #1
   12258:	str	r2, [r1, #16]
   1225a:	str	r2, [r3, #0]
   1225c:	ldr	r3, [sp, #80]	; 0x50
   1225e:	mov	r2, r3
   12260:	movs	r0, #98	; 0x62
   12262:	str	r1, [r2, #0]
   12264:	b.n	12022 <__gethex+0x21a>
   12266:	lsls	r2, r7, #30
   12268:	bpl.w	120fc <__gethex+0x2f4>
   1226c:	ldr	r3, [sp, #28]
   1226e:	ldr	r3, [r3, #0]
   12270:	orrs	r3, r7
   12272:	lsls	r3, r3, #31
   12274:	bmi.n	1220a <__gethex+0x402>
   12276:	b.n	120fc <__gethex+0x2f4>
   12278:	ldr.w	r9, [sp, #28]
   1227c:	mov.w	r8, #0
   12280:	b.n	11f30 <__gethex+0x128>
   12282:	movs	r7, #2
   12284:	b.n	1215c <__gethex+0x354>
   12286:	ldr	r2, [sp, #84]	; 0x54
   12288:	cmp	r2, #0
   1228a:	beq.n	1224e <__gethex+0x446>
   1228c:	b.n	11f94 <__gethex+0x18c>
   1228e:	cmp	r6, r5
   12290:	bne.w	11f94 <__gethex+0x18c>
   12294:	cmp	r6, #1
   12296:	ble.n	1224e <__gethex+0x446>
   12298:	subs	r1, r6, #1
   1229a:	ldr	r0, [sp, #16]
   1229c:	bl	12e88 <__any_on>
   122a0:	cmp	r0, #0
   122a2:	beq.w	11f94 <__gethex+0x18c>
   122a6:	ldr	r3, [sp, #12]
   122a8:	ldr	r3, [r3, #4]
   122aa:	b.n	1224e <__gethex+0x446>
   122ac:	ldr	r3, [sp, #12]
   122ae:	ldr	r3, [r3, #0]
   122b0:	subs	r3, #1
   122b2:	cmp	r6, r3
   122b4:	beq.n	12300 <__gethex+0x4f8>
   122b6:	movs	r4, #34	; 0x22
   122b8:	b.n	12100 <__gethex+0x2f8>
   122ba:	add	r5, r8
   122bc:	rsb	r6, r6, #32
   122c0:	ldr.w	r0, [r5, #-4]
   122c4:	bl	12778 <__hi0bits>
   122c8:	cmp	r0, r6
   122ca:	bge.n	1223e <__gethex+0x436>
   122cc:	b.n	12082 <__gethex+0x27a>
   122ce:	ldr	r3, [sp, #16]
   122d0:	ldr.w	r9, [sp, #20]
   122d4:	ldr	r1, [r3, #4]
   122d6:	mov	r0, r9
   122d8:	adds	r1, #1
   122da:	bl	12600 <_Balloc>
   122de:	ldr	r1, [sp, #16]
   122e0:	ldr	r3, [r1, #16]
   122e2:	adds	r2, r3, #2
   122e4:	mov	r5, r0
   122e6:	lsls	r2, r2, #2
   122e8:	adds	r1, #12
   122ea:	adds	r0, #12
   122ec:	bl	94c8 <memcpy>
   122f0:	ldr	r1, [sp, #16]
   122f2:	mov	r0, r9
   122f4:	bl	1264c <_Bfree>
   122f8:	str	r5, [sp, #16]
   122fa:	ldr	r3, [r5, #16]
   122fc:	adds	r5, #20
   122fe:	b.n	12068 <__gethex+0x260>
   12300:	asrs	r3, r6, #5
   12302:	and.w	r6, r6, #31
   12306:	ldr.w	r2, [r5, r3, lsl #2]
   1230a:	movs	r3, #1
   1230c:	lsls	r3, r6
   1230e:	tst	r3, r2
   12310:	ite	ne
   12312:	movne	r4, #33	; 0x21
   12314:	moveq	r4, #34	; 0x22
   12316:	b.n	12100 <__gethex+0x2f8>

00012318 <__match>:
   12318:	push	{r4, r5}
   1231a:	ldr	r4, [r0, #0]
   1231c:	b.n	12330 <__match+0x18>
   1231e:	ldrb.w	r3, [r4, #1]!
   12322:	sub.w	r5, r3, #65	; 0x41
   12326:	cmp	r5, #25
   12328:	it	ls
   1232a:	addls	r3, #32
   1232c:	cmp	r3, r2
   1232e:	bne.n	12342 <__match+0x2a>
   12330:	ldrb.w	r2, [r1], #1
   12334:	cmp	r2, #0
   12336:	bne.n	1231e <__match+0x6>
   12338:	adds	r4, #1
   1233a:	str	r4, [r0, #0]
   1233c:	movs	r0, #1
   1233e:	pop	{r4, r5}
   12340:	bx	lr
   12342:	movs	r0, #0
   12344:	pop	{r4, r5}
   12346:	bx	lr

00012348 <__hexnan>:
   12348:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1234c:	ldr	r3, [r1, #0]
   1234e:	ldr.w	r9, [pc, #372]	; 124c4 <__hexnan+0x17c>
   12352:	sub	sp, #20
   12354:	asrs	r1, r3, #5
   12356:	add.w	r1, r2, r1, lsl #2
   1235a:	ands.w	r3, r3, #31
   1235e:	str	r1, [sp, #4]
   12360:	itt	ne
   12362:	addne	r1, #4
   12364:	strne	r1, [sp, #4]
   12366:	ldr	r4, [sp, #4]
   12368:	str	r0, [sp, #8]
   1236a:	str	r3, [sp, #12]
   1236c:	movs	r3, #0
   1236e:	mov	r1, r3
   12370:	str.w	r3, [r4, #-4]
   12374:	mov	sl, r3
   12376:	mov	lr, r3
   12378:	ldr	r3, [sp, #8]
   1237a:	sub.w	ip, r4, #4
   1237e:	ldr	r5, [r3, #0]
   12380:	mov	r8, ip
   12382:	mov	r0, ip
   12384:	ldrb.w	r3, [r5, #1]!
   12388:	cbz	r3, 123d4 <__hexnan+0x8c>
   1238a:	ldrb.w	r4, [r9, r3]
   1238e:	cmp	r4, #0
   12390:	bne.n	1241a <__hexnan+0xd2>
   12392:	cmp	r3, #32
   12394:	bhi.n	12452 <__hexnan+0x10a>
   12396:	cmp	lr, sl
   12398:	ble.n	12384 <__hexnan+0x3c>
   1239a:	cmp	r0, r8
   1239c:	bcs.n	123c6 <__hexnan+0x7e>
   1239e:	cmp	r1, #7
   123a0:	bgt.n	123c6 <__hexnan+0x7e>
   123a2:	rsb	r1, r1, #8
   123a6:	lsls	r1, r1, #2
   123a8:	ldr	r6, [r0, #0]
   123aa:	rsb	fp, r1, #32
   123ae:	mov	r3, r0
   123b0:	ldr	r7, [r3, #4]
   123b2:	lsl.w	r4, r7, fp
   123b6:	orrs	r4, r6
   123b8:	lsr.w	r6, r7, r1
   123bc:	str	r4, [r3, #0]
   123be:	str.w	r6, [r3, #4]!
   123c2:	cmp	r8, r3
   123c4:	bhi.n	123b0 <__hexnan+0x68>
   123c6:	cmp	r0, r2
   123c8:	bhi.n	12440 <__hexnan+0xf8>
   123ca:	ldrb.w	r3, [r5, #1]!
   123ce:	movs	r1, #8
   123d0:	cmp	r3, #0
   123d2:	bne.n	1238a <__hexnan+0x42>
   123d4:	cmp.w	lr, #0
   123d8:	beq.n	12456 <__hexnan+0x10e>
   123da:	cmp	r0, r8
   123dc:	bcs.n	123e2 <__hexnan+0x9a>
   123de:	cmp	r1, #7
   123e0:	ble.n	1249c <__hexnan+0x154>
   123e2:	cmp	r0, r2
   123e4:	bls.n	1245e <__hexnan+0x116>
   123e6:	mov	r3, r2
   123e8:	ldr.w	r1, [r0], #4
   123ec:	str.w	r1, [r3], #4
   123f0:	cmp	ip, r0
   123f2:	bcs.n	123e8 <__hexnan+0xa0>
   123f4:	movs	r1, #0
   123f6:	str.w	r1, [r3], #4
   123fa:	cmp	ip, r3
   123fc:	bcs.n	123f6 <__hexnan+0xae>
   123fe:	ldr	r3, [sp, #4]
   12400:	ldr.w	r3, [r3, #-4]
   12404:	cbnz	r3, 12412 <__hexnan+0xca>
   12406:	cmp	r2, ip
   12408:	beq.n	12480 <__hexnan+0x138>
   1240a:	ldr.w	r3, [ip, #-4]!
   1240e:	cmp	r3, #0
   12410:	beq.n	12406 <__hexnan+0xbe>
   12412:	movs	r0, #5
   12414:	add	sp, #20
   12416:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1241a:	adds	r1, #1
   1241c:	cmp	r1, #8
   1241e:	add.w	lr, lr, #1
   12422:	ble.n	12432 <__hexnan+0xea>
   12424:	cmp	r0, r2
   12426:	bls.n	12384 <__hexnan+0x3c>
   12428:	movs	r3, #0
   1242a:	str.w	r3, [r0, #-4]
   1242e:	movs	r1, #1
   12430:	subs	r0, #4
   12432:	ldr	r3, [r0, #0]
   12434:	and.w	r4, r4, #15
   12438:	orr.w	r4, r4, r3, lsl #4
   1243c:	str	r4, [r0, #0]
   1243e:	b.n	12384 <__hexnan+0x3c>
   12440:	movs	r3, #0
   12442:	sub.w	r8, r0, #4
   12446:	str.w	r3, [r0, #-4]
   1244a:	mov	sl, lr
   1244c:	mov	r0, r8
   1244e:	mov	r1, r3
   12450:	b.n	12384 <__hexnan+0x3c>
   12452:	cmp	r3, #41	; 0x29
   12454:	beq.n	1248e <__hexnan+0x146>
   12456:	movs	r0, #4
   12458:	add	sp, #20
   1245a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1245e:	ldr	r3, [sp, #12]
   12460:	cmp	r3, #0
   12462:	beq.n	123fe <__hexnan+0xb6>
   12464:	ldr	r4, [sp, #4]
   12466:	ldr	r3, [sp, #12]
   12468:	ldr.w	r1, [r4, #-4]
   1246c:	rsb	r3, r3, #32
   12470:	mov.w	r0, #4294967295
   12474:	lsr.w	r3, r0, r3
   12478:	ands	r3, r1
   1247a:	str.w	r3, [r4, #-4]
   1247e:	b.n	12404 <__hexnan+0xbc>
   12480:	movs	r3, #1
   12482:	movs	r0, #5
   12484:	str.w	r3, [ip]
   12488:	add	sp, #20
   1248a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1248e:	ldr	r3, [sp, #8]
   12490:	adds	r5, #1
   12492:	str	r5, [r3, #0]
   12494:	cmp.w	lr, #0
   12498:	bne.n	123da <__hexnan+0x92>
   1249a:	b.n	12456 <__hexnan+0x10e>
   1249c:	rsb	r3, r1, #8
   124a0:	lsls	r3, r3, #2
   124a2:	ldr	r5, [r0, #0]
   124a4:	rsb	r7, r3, #32
   124a8:	mov	r1, r0
   124aa:	ldr	r6, [r1, #4]
   124ac:	lsl.w	r4, r6, r7
   124b0:	orrs	r4, r5
   124b2:	lsr.w	r5, r6, r3
   124b6:	str	r4, [r1, #0]
   124b8:	str.w	r5, [r1, #4]!
   124bc:	cmp	r8, r1
   124be:	bhi.n	124aa <__hexnan+0x162>
   124c0:	b.n	123e2 <__hexnan+0x9a>
   124c2:	nop
   124c4:	.word	0x00014384

000124c8 <iswspace>:
   124c8:	cmp	r0, #255	; 0xff
   124ca:	bls.n	124d0 <iswspace+0x8>
   124cc:	movs	r0, #0
   124ce:	bx	lr
   124d0:	push	{r4, lr}
   124d2:	mov	r4, r0
   124d4:	bl	c550 <__locale_ctype_ptr>
   124d8:	add	r0, r4
   124da:	ldrb	r0, [r0, #1]
   124dc:	and.w	r0, r0, #8
   124e0:	uxtb	r0, r0
   124e2:	pop	{r4, pc}

000124e4 <__localeconv_l>:
   124e4:	adds	r0, #240	; 0xf0
   124e6:	bx	lr

000124e8 <_localeconv_r>:
   124e8:	ldr	r2, [pc, #16]	; (124fc <_localeconv_r+0x14>)
   124ea:	ldr	r3, [pc, #20]	; (12500 <_localeconv_r+0x18>)
   124ec:	ldr	r2, [r2, #0]
   124ee:	ldr	r0, [r2, #52]	; 0x34
   124f0:	cmp	r0, #0
   124f2:	it	eq
   124f4:	moveq	r0, r3
   124f6:	adds	r0, #240	; 0xf0
   124f8:	bx	lr
   124fa:	nop
   124fc:	.word	0x1fff0d78
   12500:	.word	0x1fff0d7c

00012504 <_mbrtowc_r>:
   12504:	push	{r4, r5, r6, r7, lr}
   12506:	sub	sp, #12
   12508:	mov	r7, r0
   1250a:	ldr	r5, [sp, #32]
   1250c:	cbz	r2, 12534 <_mbrtowc_r+0x30>
   1250e:	ldr	r4, [pc, #68]	; (12554 <_mbrtowc_r+0x50>)
   12510:	ldr	r6, [pc, #68]	; (12558 <_mbrtowc_r+0x54>)
   12512:	ldr	r4, [r4, #0]
   12514:	ldr	r4, [r4, #52]	; 0x34
   12516:	str	r5, [sp, #0]
   12518:	cmp	r4, #0
   1251a:	it	eq
   1251c:	moveq	r4, r6
   1251e:	ldr.w	r4, [r4, #228]	; 0xe4
   12522:	blx	r4
   12524:	adds	r3, r0, #1
   12526:	bne.n	12530 <_mbrtowc_r+0x2c>
   12528:	movs	r2, #0
   1252a:	movs	r3, #138	; 0x8a
   1252c:	str	r2, [r5, #0]
   1252e:	str	r3, [r7, #0]
   12530:	add	sp, #12
   12532:	pop	{r4, r5, r6, r7, pc}
   12534:	ldr	r3, [pc, #28]	; (12554 <_mbrtowc_r+0x50>)
   12536:	ldr	r1, [pc, #32]	; (12558 <_mbrtowc_r+0x54>)
   12538:	ldr	r3, [r3, #0]
   1253a:	ldr	r3, [r3, #52]	; 0x34
   1253c:	str	r5, [sp, #0]
   1253e:	cmp	r3, #0
   12540:	it	eq
   12542:	moveq	r3, r1
   12544:	mov	r4, r2
   12546:	mov	r1, r4
   12548:	ldr	r2, [pc, #16]	; (1255c <_mbrtowc_r+0x58>)
   1254a:	ldr.w	r4, [r3, #228]	; 0xe4
   1254e:	movs	r3, #1
   12550:	blx	r4
   12552:	b.n	12524 <_mbrtowc_r+0x20>
   12554:	.word	0x1fff0d78
   12558:	.word	0x1fff0d7c
   1255c:	.word	0x00013c24

00012560 <memchr>:
   12560:	and.w	r1, r1, #255	; 0xff
   12564:	cmp	r2, #16
   12566:	blt.n	125c0 <memchr+0x60>
   12568:	tst.w	r0, #7
   1256c:	beq.n	12580 <memchr+0x20>
   1256e:	ldrb.w	r3, [r0], #1
   12572:	subs	r2, #1
   12574:	cmp	r3, r1
   12576:	beq.n	125d4 <memchr+0x74>
   12578:	tst.w	r0, #7
   1257c:	cbz	r2, 125d0 <memchr+0x70>
   1257e:	bne.n	1256e <memchr+0xe>
   12580:	push	{r4, r5, r6, r7}
   12582:	orr.w	r1, r1, r1, lsl #8
   12586:	orr.w	r1, r1, r1, lsl #16
   1258a:	bic.w	r4, r2, #7
   1258e:	mvns.w	r7, #0
   12592:	movs	r3, #0
   12594:	ldrd	r5, r6, [r0], #8
   12598:	subs	r4, #8
   1259a:	eor.w	r5, r5, r1
   1259e:	eor.w	r6, r6, r1
   125a2:	uadd8	r5, r5, r7
   125a6:	sel	r5, r3, r7
   125aa:	uadd8	r6, r6, r7
   125ae:	sel	r6, r5, r7
   125b2:	cbnz	r6, 125d8 <memchr+0x78>
   125b4:	bne.n	12594 <memchr+0x34>
   125b6:	pop	{r4, r5, r6, r7}
   125b8:	and.w	r1, r1, #255	; 0xff
   125bc:	and.w	r2, r2, #7
   125c0:	cbz	r2, 125d0 <memchr+0x70>
   125c2:	ldrb.w	r3, [r0], #1
   125c6:	subs	r2, #1
   125c8:	eor.w	r3, r3, r1
   125cc:	cbz	r3, 125d4 <memchr+0x74>
   125ce:	bne.n	125c2 <memchr+0x62>
   125d0:	movs	r0, #0
   125d2:	bx	lr
   125d4:	subs	r0, #1
   125d6:	bx	lr
   125d8:	cmp	r5, #0
   125da:	itte	eq
   125dc:	moveq	r5, r6
   125de:	subeq	r0, #3
   125e0:	subne	r0, #7
   125e2:	tst.w	r5, #1
   125e6:	bne.n	125f8 <memchr+0x98>
   125e8:	adds	r0, #1
   125ea:	tst.w	r5, #256	; 0x100
   125ee:	ittt	eq
   125f0:	addeq	r0, #1
   125f2:	tsteq.w	r5, #98304	; 0x18000
   125f6:	addeq	r0, #1
   125f8:	pop	{r4, r5, r6, r7}
   125fa:	subs	r0, #1
   125fc:	bx	lr
   125fe:	nop

00012600 <_Balloc>:
   12600:	ldr	r3, [r0, #76]	; 0x4c
   12602:	push	{r4, r5, r6, lr}
   12604:	mov	r5, r0
   12606:	mov	r4, r1
   12608:	cbz	r3, 1261e <_Balloc+0x1e>
   1260a:	ldr.w	r0, [r3, r4, lsl #2]
   1260e:	cbz	r0, 12632 <_Balloc+0x32>
   12610:	ldr	r2, [r0, #0]
   12612:	str.w	r2, [r3, r4, lsl #2]
   12616:	movs	r3, #0
   12618:	str	r3, [r0, #16]
   1261a:	str	r3, [r0, #12]
   1261c:	pop	{r4, r5, r6, pc}
   1261e:	movs	r2, #33	; 0x21
   12620:	movs	r1, #4
   12622:	bl	137f0 <_calloc_r>
   12626:	str	r0, [r5, #76]	; 0x4c
   12628:	mov	r3, r0
   1262a:	cmp	r0, #0
   1262c:	bne.n	1260a <_Balloc+0xa>
   1262e:	movs	r0, #0
   12630:	pop	{r4, r5, r6, pc}
   12632:	movs	r1, #1
   12634:	lsl.w	r6, r1, r4
   12638:	adds	r2, r6, #5
   1263a:	mov	r0, r5
   1263c:	lsls	r2, r2, #2
   1263e:	bl	137f0 <_calloc_r>
   12642:	cmp	r0, #0
   12644:	beq.n	1262e <_Balloc+0x2e>
   12646:	str	r4, [r0, #4]
   12648:	str	r6, [r0, #8]
   1264a:	b.n	12616 <_Balloc+0x16>

0001264c <_Bfree>:
   1264c:	cbz	r1, 1265c <_Bfree+0x10>
   1264e:	ldr	r3, [r0, #76]	; 0x4c
   12650:	ldr	r2, [r1, #4]
   12652:	ldr.w	r0, [r3, r2, lsl #2]
   12656:	str	r0, [r1, #0]
   12658:	str.w	r1, [r3, r2, lsl #2]
   1265c:	bx	lr
   1265e:	nop

00012660 <__multadd>:
   12660:	push	{r4, r5, r6, r7, lr}
   12662:	ldr	r4, [r1, #16]
   12664:	sub	sp, #12
   12666:	mov	r5, r1
   12668:	mov	r6, r0
   1266a:	add.w	lr, r1, #20
   1266e:	movs	r7, #0
   12670:	ldr.w	r0, [lr]
   12674:	uxth	r1, r0
   12676:	mla	r1, r2, r1, r3
   1267a:	lsrs	r3, r1, #16
   1267c:	lsrs	r0, r0, #16
   1267e:	mla	r3, r2, r0, r3
   12682:	uxth	r1, r1
   12684:	adds	r7, #1
   12686:	add.w	r1, r1, r3, lsl #16
   1268a:	cmp	r4, r7
   1268c:	str.w	r1, [lr], #4
   12690:	mov.w	r3, r3, lsr #16
   12694:	bgt.n	12670 <__multadd+0x10>
   12696:	cbz	r3, 126a8 <__multadd+0x48>
   12698:	ldr	r2, [r5, #8]
   1269a:	cmp	r4, r2
   1269c:	bge.n	126ae <__multadd+0x4e>
   1269e:	add.w	r2, r5, r4, lsl #2
   126a2:	adds	r4, #1
   126a4:	str	r3, [r2, #20]
   126a6:	str	r4, [r5, #16]
   126a8:	mov	r0, r5
   126aa:	add	sp, #12
   126ac:	pop	{r4, r5, r6, r7, pc}
   126ae:	ldr	r1, [r5, #4]
   126b0:	str	r3, [sp, #4]
   126b2:	adds	r1, #1
   126b4:	mov	r0, r6
   126b6:	bl	12600 <_Balloc>
   126ba:	ldr	r2, [r5, #16]
   126bc:	adds	r2, #2
   126be:	add.w	r1, r5, #12
   126c2:	mov	r7, r0
   126c4:	lsls	r2, r2, #2
   126c6:	adds	r0, #12
   126c8:	bl	94c8 <memcpy>
   126cc:	ldr	r2, [r6, #76]	; 0x4c
   126ce:	ldr	r1, [r5, #4]
   126d0:	ldr	r3, [sp, #4]
   126d2:	ldr.w	r0, [r2, r1, lsl #2]
   126d6:	str	r0, [r5, #0]
   126d8:	str.w	r5, [r2, r1, lsl #2]
   126dc:	mov	r5, r7
   126de:	b.n	1269e <__multadd+0x3e>

000126e0 <__s2b>:
   126e0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   126e4:	ldr	r4, [pc, #140]	; (12774 <__s2b+0x94>)
   126e6:	ldr	r5, [sp, #32]
   126e8:	mov	r7, r3
   126ea:	adds	r3, #8
   126ec:	smull	r4, lr, r4, r3
   126f0:	asrs	r3, r3, #31
   126f2:	rsb	lr, r3, lr, asr #1
   126f6:	cmp.w	lr, #1
   126fa:	mov	r6, r0
   126fc:	mov	r4, r1
   126fe:	mov	r8, r2
   12700:	ble.n	1276e <__s2b+0x8e>
   12702:	movs	r3, #1
   12704:	movs	r1, #0
   12706:	lsls	r3, r3, #1
   12708:	cmp	lr, r3
   1270a:	add.w	r1, r1, #1
   1270e:	bgt.n	12706 <__s2b+0x26>
   12710:	mov	r0, r6
   12712:	bl	12600 <_Balloc>
   12716:	movs	r3, #1
   12718:	cmp.w	r8, #9
   1271c:	str	r5, [r0, #20]
   1271e:	str	r3, [r0, #16]
   12720:	ble.n	12766 <__s2b+0x86>
   12722:	add.w	r9, r4, #9
   12726:	mov	r5, r9
   12728:	add	r4, r8
   1272a:	ldrb.w	r3, [r5], #1
   1272e:	mov	r1, r0
   12730:	subs	r3, #48	; 0x30
   12732:	movs	r2, #10
   12734:	mov	r0, r6
   12736:	bl	12660 <__multadd>
   1273a:	cmp	r5, r4
   1273c:	bne.n	1272a <__s2b+0x4a>
   1273e:	add.w	r4, r9, r8
   12742:	subs	r4, #8
   12744:	cmp	r7, r8
   12746:	ble.n	12762 <__s2b+0x82>
   12748:	rsb	r7, r8, r7
   1274c:	add	r7, r4
   1274e:	ldrb.w	r3, [r4], #1
   12752:	mov	r1, r0
   12754:	subs	r3, #48	; 0x30
   12756:	movs	r2, #10
   12758:	mov	r0, r6
   1275a:	bl	12660 <__multadd>
   1275e:	cmp	r7, r4
   12760:	bne.n	1274e <__s2b+0x6e>
   12762:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12766:	adds	r4, #10
   12768:	mov.w	r8, #9
   1276c:	b.n	12744 <__s2b+0x64>
   1276e:	movs	r1, #0
   12770:	b.n	12710 <__s2b+0x30>
   12772:	nop
   12774:	.word	0x38e38e39

00012778 <__hi0bits>:
   12778:	lsrs	r3, r0, #16
   1277a:	lsls	r3, r3, #16
   1277c:	cbnz	r3, 127ac <__hi0bits+0x34>
   1277e:	lsls	r0, r0, #16
   12780:	movs	r3, #16
   12782:	tst.w	r0, #4278190080	; 0xff000000
   12786:	itt	eq
   12788:	lsleq	r0, r0, #8
   1278a:	addeq	r3, #8
   1278c:	tst.w	r0, #4026531840	; 0xf0000000
   12790:	itt	eq
   12792:	lsleq	r0, r0, #4
   12794:	addeq	r3, #4
   12796:	tst.w	r0, #3221225472	; 0xc0000000
   1279a:	itt	eq
   1279c:	lsleq	r0, r0, #2
   1279e:	addeq	r3, #2
   127a0:	cmp	r0, #0
   127a2:	blt.n	127b4 <__hi0bits+0x3c>
   127a4:	lsls	r2, r0, #1
   127a6:	bmi.n	127b0 <__hi0bits+0x38>
   127a8:	movs	r0, #32
   127aa:	bx	lr
   127ac:	movs	r3, #0
   127ae:	b.n	12782 <__hi0bits+0xa>
   127b0:	adds	r0, r3, #1
   127b2:	bx	lr
   127b4:	mov	r0, r3
   127b6:	bx	lr

000127b8 <__lo0bits>:
   127b8:	ldr	r3, [r0, #0]
   127ba:	ands.w	r2, r3, #7
   127be:	beq.n	127d0 <__lo0bits+0x18>
   127c0:	lsls	r1, r3, #31
   127c2:	bmi.n	12806 <__lo0bits+0x4e>
   127c4:	lsls	r2, r3, #30
   127c6:	bmi.n	1280a <__lo0bits+0x52>
   127c8:	lsrs	r3, r3, #2
   127ca:	str	r3, [r0, #0]
   127cc:	movs	r0, #2
   127ce:	bx	lr
   127d0:	uxth	r1, r3
   127d2:	cbnz	r1, 127d8 <__lo0bits+0x20>
   127d4:	lsrs	r3, r3, #16
   127d6:	movs	r2, #16
   127d8:	tst.w	r3, #255	; 0xff
   127dc:	itt	eq
   127de:	lsreq	r3, r3, #8
   127e0:	addeq	r2, #8
   127e2:	lsls	r1, r3, #28
   127e4:	itt	eq
   127e6:	lsreq	r3, r3, #4
   127e8:	addeq	r2, #4
   127ea:	lsls	r1, r3, #30
   127ec:	itt	eq
   127ee:	lsreq	r3, r3, #2
   127f0:	addeq	r2, #2
   127f2:	lsls	r1, r3, #31
   127f4:	bmi.n	12800 <__lo0bits+0x48>
   127f6:	lsrs	r3, r3, #1
   127f8:	bne.n	127fe <__lo0bits+0x46>
   127fa:	movs	r0, #32
   127fc:	bx	lr
   127fe:	adds	r2, #1
   12800:	str	r3, [r0, #0]
   12802:	mov	r0, r2
   12804:	bx	lr
   12806:	movs	r0, #0
   12808:	bx	lr
   1280a:	lsrs	r3, r3, #1
   1280c:	str	r3, [r0, #0]
   1280e:	movs	r0, #1
   12810:	bx	lr
   12812:	nop

00012814 <__i2b>:
   12814:	push	{r4, lr}
   12816:	mov	r4, r1
   12818:	movs	r1, #1
   1281a:	bl	12600 <_Balloc>
   1281e:	movs	r2, #1
   12820:	str	r4, [r0, #20]
   12822:	str	r2, [r0, #16]
   12824:	pop	{r4, pc}
   12826:	nop

00012828 <__multiply>:
   12828:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1282c:	ldr	r5, [r1, #16]
   1282e:	ldr	r7, [r2, #16]
   12830:	cmp	r5, r7
   12832:	sub	sp, #12
   12834:	mov	r4, r1
   12836:	mov	r6, r2
   12838:	bge.n	12844 <__multiply+0x1c>
   1283a:	mov	r2, r5
   1283c:	mov	r4, r6
   1283e:	mov	r5, r7
   12840:	mov	r6, r1
   12842:	mov	r7, r2
   12844:	ldr	r3, [r4, #8]
   12846:	ldr	r1, [r4, #4]
   12848:	add.w	r8, r5, r7
   1284c:	cmp	r8, r3
   1284e:	it	gt
   12850:	addgt	r1, #1
   12852:	bl	12600 <_Balloc>
   12856:	add.w	ip, r0, #20
   1285a:	add.w	r9, ip, r8, lsl #2
   1285e:	cmp	ip, r9
   12860:	str	r0, [sp, #0]
   12862:	bcs.n	12870 <__multiply+0x48>
   12864:	mov	r3, ip
   12866:	movs	r1, #0
   12868:	str.w	r1, [r3], #4
   1286c:	cmp	r9, r3
   1286e:	bhi.n	12868 <__multiply+0x40>
   12870:	add.w	r2, r6, #20
   12874:	add.w	sl, r2, r7, lsl #2
   12878:	add.w	r3, r4, #20
   1287c:	cmp	r2, sl
   1287e:	add.w	lr, r3, r5, lsl #2
   12882:	bcs.n	1292e <__multiply+0x106>
   12884:	str.w	r9, [sp, #4]
   12888:	mov	r9, r3
   1288a:	ldr.w	r3, [r2], #4
   1288e:	uxth.w	fp, r3
   12892:	cmp.w	fp, #0
   12896:	beq.n	128da <__multiply+0xb2>
   12898:	movs	r0, #0
   1289a:	mov	r7, r9
   1289c:	mov	r6, ip
   1289e:	mov	r5, r0
   128a0:	b.n	128a4 <__multiply+0x7c>
   128a2:	mov	r6, r3
   128a4:	ldr.w	r4, [r7], #4
   128a8:	ldr	r0, [r6, #0]
   128aa:	uxth	r1, r4
   128ac:	uxth	r3, r0
   128ae:	mla	r1, fp, r1, r3
   128b2:	lsrs	r4, r4, #16
   128b4:	lsrs	r0, r0, #16
   128b6:	adds	r3, r1, r5
   128b8:	mla	r0, fp, r4, r0
   128bc:	add.w	r0, r0, r3, lsr #16
   128c0:	uxth	r1, r3
   128c2:	mov	r3, r6
   128c4:	orr.w	r1, r1, r0, lsl #16
   128c8:	cmp	lr, r7
   128ca:	mov.w	r5, r0, lsr #16
   128ce:	str.w	r1, [r3], #4
   128d2:	bhi.n	128a2 <__multiply+0x7a>
   128d4:	str	r5, [r6, #4]
   128d6:	ldr.w	r3, [r2, #-4]
   128da:	movs.w	fp, r3, lsr #16
   128de:	beq.n	12922 <__multiply+0xfa>
   128e0:	ldr.w	r3, [ip]
   128e4:	mov	r7, ip
   128e6:	mov	r0, r3
   128e8:	mov	r5, r9
   128ea:	movs	r1, #0
   128ec:	b.n	128f0 <__multiply+0xc8>
   128ee:	mov	r7, r6
   128f0:	ldrh	r4, [r5, #0]
   128f2:	lsrs	r0, r0, #16
   128f4:	mla	r0, fp, r4, r0
   128f8:	add	r1, r0
   128fa:	uxth	r4, r3
   128fc:	mov	r6, r7
   128fe:	orr.w	r3, r4, r1, lsl #16
   12902:	str.w	r3, [r6], #4
   12906:	ldr	r0, [r7, #4]
   12908:	ldr.w	r4, [r5], #4
   1290c:	uxth	r3, r0
   1290e:	lsrs	r4, r4, #16
   12910:	mla	r4, fp, r4, r3
   12914:	add.w	r3, r4, r1, lsr #16
   12918:	cmp	lr, r5
   1291a:	mov.w	r1, r3, lsr #16
   1291e:	bhi.n	128ee <__multiply+0xc6>
   12920:	str	r3, [r7, #4]
   12922:	cmp	sl, r2
   12924:	add.w	ip, ip, #4
   12928:	bhi.n	1288a <__multiply+0x62>
   1292a:	ldr.w	r9, [sp, #4]
   1292e:	cmp.w	r8, #0
   12932:	ble.n	1294c <__multiply+0x124>
   12934:	ldr.w	r3, [r9, #-4]
   12938:	sub.w	r9, r9, #4
   1293c:	cbz	r3, 12946 <__multiply+0x11e>
   1293e:	b.n	1294c <__multiply+0x124>
   12940:	ldr.w	r3, [r9, #-4]!
   12944:	cbnz	r3, 1294c <__multiply+0x124>
   12946:	subs.w	r8, r8, #1
   1294a:	bne.n	12940 <__multiply+0x118>
   1294c:	ldr	r0, [sp, #0]
   1294e:	str.w	r8, [r0, #16]
   12952:	add	sp, #12
   12954:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012958 <__pow5mult>:
   12958:	ands.w	r3, r2, #3
   1295c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12960:	mov	r4, r2
   12962:	mov	r7, r0
   12964:	bne.n	129c4 <__pow5mult+0x6c>
   12966:	mov	r6, r1
   12968:	asrs	r4, r4, #2
   1296a:	beq.n	129a6 <__pow5mult+0x4e>
   1296c:	ldr	r5, [r7, #72]	; 0x48
   1296e:	cbz	r5, 129d6 <__pow5mult+0x7e>
   12970:	lsls	r3, r4, #31
   12972:	mov.w	r8, #0
   12976:	bmi.n	12986 <__pow5mult+0x2e>
   12978:	asrs	r4, r4, #1
   1297a:	beq.n	129a6 <__pow5mult+0x4e>
   1297c:	ldr	r0, [r5, #0]
   1297e:	cbz	r0, 129ac <__pow5mult+0x54>
   12980:	mov	r5, r0
   12982:	lsls	r3, r4, #31
   12984:	bpl.n	12978 <__pow5mult+0x20>
   12986:	mov	r2, r5
   12988:	mov	r1, r6
   1298a:	mov	r0, r7
   1298c:	bl	12828 <__multiply>
   12990:	cbz	r6, 129c0 <__pow5mult+0x68>
   12992:	ldr	r2, [r6, #4]
   12994:	ldr	r3, [r7, #76]	; 0x4c
   12996:	asrs	r4, r4, #1
   12998:	ldr.w	r1, [r3, r2, lsl #2]
   1299c:	str	r1, [r6, #0]
   1299e:	str.w	r6, [r3, r2, lsl #2]
   129a2:	mov	r6, r0
   129a4:	bne.n	1297c <__pow5mult+0x24>
   129a6:	mov	r0, r6
   129a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   129ac:	mov	r2, r5
   129ae:	mov	r1, r5
   129b0:	mov	r0, r7
   129b2:	bl	12828 <__multiply>
   129b6:	str	r0, [r5, #0]
   129b8:	str.w	r8, [r0]
   129bc:	mov	r5, r0
   129be:	b.n	12982 <__pow5mult+0x2a>
   129c0:	mov	r6, r0
   129c2:	b.n	12978 <__pow5mult+0x20>
   129c4:	subs	r2, r3, #1
   129c6:	ldr	r5, [pc, #44]	; (129f4 <__pow5mult+0x9c>)
   129c8:	movs	r3, #0
   129ca:	ldr.w	r2, [r5, r2, lsl #2]
   129ce:	bl	12660 <__multadd>
   129d2:	mov	r6, r0
   129d4:	b.n	12968 <__pow5mult+0x10>
   129d6:	movs	r1, #1
   129d8:	mov	r0, r7
   129da:	bl	12600 <_Balloc>
   129de:	movw	r1, #625	; 0x271
   129e2:	movs	r2, #1
   129e4:	movs	r3, #0
   129e6:	str	r1, [r0, #20]
   129e8:	str	r2, [r0, #16]
   129ea:	mov	r5, r0
   129ec:	str	r0, [r7, #72]	; 0x48
   129ee:	str	r3, [r0, #0]
   129f0:	b.n	12970 <__pow5mult+0x18>
   129f2:	nop
   129f4:	.word	0x00014578

000129f8 <__lshift>:
   129f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   129fc:	mov	r9, r2
   129fe:	ldr	r2, [r1, #16]
   12a00:	ldr	r3, [r1, #8]
   12a02:	mov.w	r4, r9, asr #5
   12a06:	add.w	r8, r4, r2
   12a0a:	add.w	r5, r8, #1
   12a0e:	cmp	r5, r3
   12a10:	mov	r6, r1
   12a12:	mov	sl, r0
   12a14:	ldr	r1, [r1, #4]
   12a16:	ble.n	12a22 <__lshift+0x2a>
   12a18:	lsls	r3, r3, #1
   12a1a:	cmp	r5, r3
   12a1c:	add.w	r1, r1, #1
   12a20:	bgt.n	12a18 <__lshift+0x20>
   12a22:	mov	r0, sl
   12a24:	bl	12600 <_Balloc>
   12a28:	cmp	r4, #0
   12a2a:	add.w	r2, r0, #20
   12a2e:	ble.n	12aa2 <__lshift+0xaa>
   12a30:	add.w	r3, r2, r4, lsl #2
   12a34:	movs	r1, #0
   12a36:	str.w	r1, [r2], #4
   12a3a:	cmp	r3, r2
   12a3c:	bne.n	12a36 <__lshift+0x3e>
   12a3e:	ldr	r4, [r6, #16]
   12a40:	add.w	r1, r6, #20
   12a44:	ands.w	r9, r9, #31
   12a48:	add.w	lr, r1, r4, lsl #2
   12a4c:	beq.n	12a92 <__lshift+0x9a>
   12a4e:	rsb	r2, r9, #32
   12a52:	movs	r4, #0
   12a54:	ldr	r7, [r1, #0]
   12a56:	lsl.w	ip, r7, r9
   12a5a:	orr.w	r4, ip, r4
   12a5e:	mov	ip, r3
   12a60:	str.w	r4, [r3], #4
   12a64:	ldr.w	r4, [r1], #4
   12a68:	cmp	lr, r1
   12a6a:	lsr.w	r4, r4, r2
   12a6e:	bhi.n	12a54 <__lshift+0x5c>
   12a70:	str.w	r4, [ip, #4]
   12a74:	cbz	r4, 12a7a <__lshift+0x82>
   12a76:	add.w	r5, r8, #2
   12a7a:	ldr.w	r3, [sl, #76]	; 0x4c
   12a7e:	ldr	r2, [r6, #4]
   12a80:	subs	r5, #1
   12a82:	ldr.w	r1, [r3, r2, lsl #2]
   12a86:	str	r5, [r0, #16]
   12a88:	str	r1, [r6, #0]
   12a8a:	str.w	r6, [r3, r2, lsl #2]
   12a8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12a92:	subs	r3, #4
   12a94:	ldr.w	r2, [r1], #4
   12a98:	str.w	r2, [r3, #4]!
   12a9c:	cmp	lr, r1
   12a9e:	bhi.n	12a94 <__lshift+0x9c>
   12aa0:	b.n	12a7a <__lshift+0x82>
   12aa2:	mov	r3, r2
   12aa4:	b.n	12a3e <__lshift+0x46>
   12aa6:	nop

00012aa8 <__mcmp>:
   12aa8:	ldr	r2, [r0, #16]
   12aaa:	ldr	r3, [r1, #16]
   12aac:	subs	r2, r2, r3
   12aae:	bne.n	12ad8 <__mcmp+0x30>
   12ab0:	lsls	r3, r3, #2
   12ab2:	adds	r0, #20
   12ab4:	adds	r1, #20
   12ab6:	add	r1, r3
   12ab8:	push	{r4}
   12aba:	add	r3, r0
   12abc:	b.n	12ac2 <__mcmp+0x1a>
   12abe:	cmp	r0, r3
   12ac0:	bcs.n	12adc <__mcmp+0x34>
   12ac2:	ldr.w	r4, [r3, #-4]!
   12ac6:	ldr.w	r2, [r1, #-4]!
   12aca:	cmp	r4, r2
   12acc:	beq.n	12abe <__mcmp+0x16>
   12ace:	bcc.n	12ae4 <__mcmp+0x3c>
   12ad0:	movs	r0, #1
   12ad2:	ldr.w	r4, [sp], #4
   12ad6:	bx	lr
   12ad8:	mov	r0, r2
   12ada:	bx	lr
   12adc:	movs	r0, #0
   12ade:	ldr.w	r4, [sp], #4
   12ae2:	bx	lr
   12ae4:	mov.w	r0, #4294967295
   12ae8:	b.n	12ad2 <__mcmp+0x2a>
   12aea:	nop

00012aec <__mdiff>:
   12aec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12af0:	ldr	r3, [r1, #16]
   12af2:	mov	r7, r1
   12af4:	ldr	r1, [r2, #16]
   12af6:	subs	r3, r3, r1
   12af8:	cmp	r3, #0
   12afa:	mov	r8, r2
   12afc:	bne.n	12b2e <__mdiff+0x42>
   12afe:	lsls	r1, r1, #2
   12b00:	add.w	r2, r7, #20
   12b04:	add.w	r5, r8, #20
   12b08:	adds	r3, r2, r1
   12b0a:	add	r1, r5
   12b0c:	b.n	12b12 <__mdiff+0x26>
   12b0e:	cmp	r2, r3
   12b10:	bcs.n	12bd0 <__mdiff+0xe4>
   12b12:	ldr.w	r6, [r3, #-4]!
   12b16:	ldr.w	r4, [r1, #-4]!
   12b1a:	cmp	r6, r4
   12b1c:	beq.n	12b0e <__mdiff+0x22>
   12b1e:	bcs.n	12be2 <__mdiff+0xf6>
   12b20:	mov	r3, r7
   12b22:	mov	r4, r2
   12b24:	mov	r7, r8
   12b26:	mov.w	r9, #1
   12b2a:	mov	r8, r3
   12b2c:	b.n	12b3c <__mdiff+0x50>
   12b2e:	blt.n	12bec <__mdiff+0x100>
   12b30:	add.w	r5, r7, #20
   12b34:	add.w	r4, r2, #20
   12b38:	mov.w	r9, #0
   12b3c:	ldr	r1, [r7, #4]
   12b3e:	bl	12600 <_Balloc>
   12b42:	ldr.w	r3, [r8, #16]
   12b46:	ldr	r6, [r7, #16]
   12b48:	str.w	r9, [r0, #12]
   12b4c:	add.w	ip, r4, r3, lsl #2
   12b50:	mov	lr, r4
   12b52:	add.w	r7, r5, r6, lsl #2
   12b56:	add.w	r4, r0, #20
   12b5a:	movs	r3, #0
   12b5c:	ldr.w	r1, [lr], #4
   12b60:	ldr.w	r8, [r5], #4
   12b64:	uxth	r2, r1
   12b66:	uxtah	r3, r3, r8
   12b6a:	lsrs	r1, r1, #16
   12b6c:	subs	r2, r3, r2
   12b6e:	rsb	r3, r1, r8, lsr #16
   12b72:	add.w	r3, r3, r2, asr #16
   12b76:	uxth	r2, r2
   12b78:	orr.w	r2, r2, r3, lsl #16
   12b7c:	cmp	ip, lr
   12b7e:	str.w	r2, [r4], #4
   12b82:	mov.w	r3, r3, asr #16
   12b86:	bhi.n	12b5c <__mdiff+0x70>
   12b88:	cmp	r7, r5
   12b8a:	bls.n	12bbc <__mdiff+0xd0>
   12b8c:	mov	ip, r4
   12b8e:	mov	r1, r5
   12b90:	ldr.w	lr, [r1], #4
   12b94:	uxtah	r2, r3, lr
   12b98:	asrs	r3, r2, #16
   12b9a:	add.w	r3, r3, lr, lsr #16
   12b9e:	uxth	r2, r2
   12ba0:	orr.w	r2, r2, r3, lsl #16
   12ba4:	cmp	r7, r1
   12ba6:	str.w	r2, [ip], #4
   12baa:	mov.w	r3, r3, asr #16
   12bae:	bhi.n	12b90 <__mdiff+0xa4>
   12bb0:	mvns	r5, r5
   12bb2:	add	r5, r7
   12bb4:	bic.w	r5, r5, #3
   12bb8:	adds	r5, #4
   12bba:	add	r4, r5
   12bbc:	subs	r4, #4
   12bbe:	cbnz	r2, 12bca <__mdiff+0xde>
   12bc0:	ldr.w	r3, [r4, #-4]!
   12bc4:	subs	r6, #1
   12bc6:	cmp	r3, #0
   12bc8:	beq.n	12bc0 <__mdiff+0xd4>
   12bca:	str	r6, [r0, #16]
   12bcc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12bd0:	movs	r1, #0
   12bd2:	bl	12600 <_Balloc>
   12bd6:	movs	r2, #1
   12bd8:	movs	r3, #0
   12bda:	str	r2, [r0, #16]
   12bdc:	str	r3, [r0, #20]
   12bde:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12be2:	mov	r4, r5
   12be4:	mov.w	r9, #0
   12be8:	mov	r5, r2
   12bea:	b.n	12b3c <__mdiff+0x50>
   12bec:	mov	r3, r7
   12bee:	add.w	r4, r7, #20
   12bf2:	add.w	r5, r8, #20
   12bf6:	mov	r7, r8
   12bf8:	mov.w	r9, #1
   12bfc:	mov	r8, r3
   12bfe:	b.n	12b3c <__mdiff+0x50>

00012c00 <__ulp>:
   12c00:	ldr	r3, [pc, #76]	; (12c50 <__ulp+0x50>)
   12c02:	vmov	r2, s1
   12c06:	ands	r2, r3
   12c08:	sub.w	r3, r2, #54525952	; 0x3400000
   12c0c:	cmp	r3, #0
   12c0e:	ble.n	12c1a <__ulp+0x1a>
   12c10:	movs	r0, #0
   12c12:	mov	r1, r3
   12c14:	vmov	d0, r0, r1
   12c18:	bx	lr
   12c1a:	negs	r3, r3
   12c1c:	asrs	r3, r3, #20
   12c1e:	cmp	r3, #19
   12c20:	ble.n	12c3e <__ulp+0x3e>
   12c22:	subs	r3, #20
   12c24:	cmp	r3, #30
   12c26:	ittte	le
   12c28:	rsble	r3, r3, #31
   12c2c:	movle	r2, #1
   12c2e:	lslle.w	r3, r2, r3
   12c32:	movgt	r3, #1
   12c34:	movs	r1, #0
   12c36:	mov	r0, r3
   12c38:	vmov	d0, r0, r1
   12c3c:	bx	lr
   12c3e:	mov.w	r2, #524288	; 0x80000
   12c42:	movs	r0, #0
   12c44:	asr.w	r1, r2, r3
   12c48:	vmov	d0, r0, r1
   12c4c:	bx	lr
   12c4e:	nop
   12c50:	.word	0x7ff00000

00012c54 <__b2d>:
   12c54:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c58:	ldr	r6, [r0, #16]
   12c5a:	add.w	r8, r0, #20
   12c5e:	add.w	r6, r8, r6, lsl #2
   12c62:	ldr.w	r7, [r6, #-4]
   12c66:	mov	r0, r7
   12c68:	bl	12778 <__hi0bits>
   12c6c:	rsb	r3, r0, #32
   12c70:	cmp	r0, #10
   12c72:	str	r3, [r1, #0]
   12c74:	sub.w	r3, r6, #4
   12c78:	bgt.n	12cac <__b2d+0x58>
   12c7a:	cmp	r8, r3
   12c7c:	rsb	r2, r0, #11
   12c80:	it	cc
   12c82:	ldrcc.w	r3, [r6, #-8]
   12c86:	lsr.w	r1, r7, r2
   12c8a:	add.w	r0, r0, #21
   12c8e:	orr.w	r5, r1, #1069547520	; 0x3fc00000
   12c92:	ite	cc
   12c94:	lsrcc	r3, r2
   12c96:	movcs	r3, #0
   12c98:	lsl.w	r0, r7, r0
   12c9c:	orr.w	r5, r5, #3145728	; 0x300000
   12ca0:	orr.w	r4, r0, r3
   12ca4:	vmov	d0, r4, r5
   12ca8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12cac:	cmp	r8, r3
   12cae:	bcs.n	12cf2 <__b2d+0x9e>
   12cb0:	subs.w	r3, r0, #11
   12cb4:	ldr.w	r2, [r6, #-8]
   12cb8:	beq.n	12cf8 <__b2d+0xa4>
   12cba:	lsl.w	r0, r7, r3
   12cbe:	orr.w	r7, r0, #1069547520	; 0x3fc00000
   12cc2:	rsb	lr, r3, #32
   12cc6:	sub.w	r1, r6, #8
   12cca:	orr.w	r7, r7, #3145728	; 0x300000
   12cce:	lsr.w	r0, r2, lr
   12cd2:	cmp	r8, r1
   12cd4:	orr.w	r5, r7, r0
   12cd8:	bcs.n	12d1c <__b2d+0xc8>
   12cda:	ldr.w	r1, [r6, #-12]
   12cde:	lsl.w	r0, r2, r3
   12ce2:	lsr.w	r3, r1, lr
   12ce6:	orrs	r0, r3
   12ce8:	mov	r4, r0
   12cea:	vmov	d0, r4, r5
   12cee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12cf2:	subs	r0, #11
   12cf4:	bne.n	12d0a <__b2d+0xb6>
   12cf6:	mov	r2, r0
   12cf8:	orr.w	r5, r7, #1069547520	; 0x3fc00000
   12cfc:	orr.w	r5, r5, #3145728	; 0x300000
   12d00:	mov	r4, r2
   12d02:	vmov	d0, r4, r5
   12d06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d0a:	lsl.w	r0, r7, r0
   12d0e:	orr.w	r5, r0, #1069547520	; 0x3fc00000
   12d12:	movs	r0, #0
   12d14:	orr.w	r5, r5, #3145728	; 0x300000
   12d18:	mov	r4, r0
   12d1a:	b.n	12cea <__b2d+0x96>
   12d1c:	lsl.w	r0, r2, r3
   12d20:	mov	r4, r0
   12d22:	b.n	12cea <__b2d+0x96>

00012d24 <__d2b>:
   12d24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12d28:	vmov	r6, r7, d0
   12d2c:	sub	sp, #12
   12d2e:	mov	r8, r1
   12d30:	movs	r1, #1
   12d32:	mov	r4, r7
   12d34:	ubfx	r5, r7, #20, #11
   12d38:	mov	r7, r2
   12d3a:	bl	12600 <_Balloc>
   12d3e:	ubfx	r4, r4, #0, #20
   12d42:	mov	r9, r0
   12d44:	cbz	r5, 12d4a <__d2b+0x26>
   12d46:	orr.w	r4, r4, #1048576	; 0x100000
   12d4a:	str	r4, [sp, #4]
   12d4c:	cbz	r6, 12d96 <__d2b+0x72>
   12d4e:	add	r0, sp, #8
   12d50:	str.w	r6, [r0, #-8]!
   12d54:	bl	127b8 <__lo0bits>
   12d58:	cmp	r0, #0
   12d5a:	bne.n	12dc6 <__d2b+0xa2>
   12d5c:	ldmia.w	sp, {r2, r3}
   12d60:	str.w	r2, [r9, #20]
   12d64:	cmp	r3, #0
   12d66:	ite	eq
   12d68:	moveq	r1, #1
   12d6a:	movne	r1, #2
   12d6c:	str.w	r3, [r9, #24]
   12d70:	str.w	r1, [r9, #16]
   12d74:	cbnz	r5, 12dae <__d2b+0x8a>
   12d76:	add.w	r3, r9, r1, lsl #2
   12d7a:	subw	r0, r0, #1074	; 0x432
   12d7e:	str.w	r0, [r8]
   12d82:	ldr	r0, [r3, #16]
   12d84:	bl	12778 <__hi0bits>
   12d88:	rsb	r0, r0, r1, lsl #5
   12d8c:	str	r0, [r7, #0]
   12d8e:	mov	r0, r9
   12d90:	add	sp, #12
   12d92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12d96:	add	r0, sp, #4
   12d98:	bl	127b8 <__lo0bits>
   12d9c:	ldr	r3, [sp, #4]
   12d9e:	str.w	r3, [r9, #20]
   12da2:	movs	r1, #1
   12da4:	adds	r0, #32
   12da6:	str.w	r1, [r9, #16]
   12daa:	cmp	r5, #0
   12dac:	beq.n	12d76 <__d2b+0x52>
   12dae:	subw	r5, r5, #1075	; 0x433
   12db2:	add	r5, r0
   12db4:	rsb	r0, r0, #53	; 0x35
   12db8:	str.w	r5, [r8]
   12dbc:	str	r0, [r7, #0]
   12dbe:	mov	r0, r9
   12dc0:	add	sp, #12
   12dc2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12dc6:	ldmia.w	sp, {r2, r3}
   12dca:	rsb	r1, r0, #32
   12dce:	lsl.w	r1, r3, r1
   12dd2:	orrs	r2, r1
   12dd4:	lsrs	r3, r0
   12dd6:	str	r3, [sp, #4]
   12dd8:	str.w	r2, [r9, #20]
   12ddc:	b.n	12d64 <__d2b+0x40>
   12dde:	nop

00012de0 <__ratio>:
   12de0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12de4:	sub	sp, #12
   12de6:	mov	r8, r1
   12de8:	mov	r1, sp
   12dea:	mov	r9, r0
   12dec:	bl	12c54 <__b2d>
   12df0:	mov	r0, r8
   12df2:	add	r1, sp, #4
   12df4:	vmov	r4, r5, d0
   12df8:	bl	12c54 <__b2d>
   12dfc:	ldmia.w	sp, {r1, r3}
   12e00:	ldr.w	r2, [r9, #16]
   12e04:	ldr.w	r0, [r8, #16]
   12e08:	subs	r1, r1, r3
   12e0a:	subs	r0, r2, r0
   12e0c:	add.w	r3, r1, r0, lsl #5
   12e10:	cmp	r3, #0
   12e12:	vmov	r6, r7, d0
   12e16:	ble.n	12e34 <__ratio+0x54>
   12e18:	add.w	r1, r5, r3, lsl #20
   12e1c:	mov	r5, r1
   12e1e:	mov	r2, r6
   12e20:	mov	r3, r7
   12e22:	mov	r0, r4
   12e24:	mov	r1, r5
   12e26:	bl	ba20 <__aeabi_ddiv>
   12e2a:	vmov	d0, r0, r1
   12e2e:	add	sp, #12
   12e30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12e34:	sub.w	r9, r7, r3, lsl #20
   12e38:	vmov	r6, s0
   12e3c:	mov	r7, r9
   12e3e:	b.n	12e1e <__ratio+0x3e>

00012e40 <__copybits>:
   12e40:	push	{r4, r5, r6}
   12e42:	ldr	r4, [r2, #16]
   12e44:	add.w	r3, r2, #20
   12e48:	subs	r1, #1
   12e4a:	asrs	r6, r1, #5
   12e4c:	add.w	r4, r3, r4, lsl #2
   12e50:	adds	r6, #1
   12e52:	cmp	r3, r4
   12e54:	add.w	r6, r0, r6, lsl #2
   12e58:	bcs.n	12e74 <__copybits+0x34>
   12e5a:	subs	r1, r0, #4
   12e5c:	ldr.w	r5, [r3], #4
   12e60:	str.w	r5, [r1, #4]!
   12e64:	cmp	r4, r3
   12e66:	bhi.n	12e5c <__copybits+0x1c>
   12e68:	subs	r3, r4, r2
   12e6a:	subs	r3, #21
   12e6c:	bic.w	r3, r3, #3
   12e70:	adds	r3, #4
   12e72:	add	r0, r3
   12e74:	cmp	r6, r0
   12e76:	bls.n	12e82 <__copybits+0x42>
   12e78:	movs	r3, #0
   12e7a:	str.w	r3, [r0], #4
   12e7e:	cmp	r6, r0
   12e80:	bhi.n	12e7a <__copybits+0x3a>
   12e82:	pop	{r4, r5, r6}
   12e84:	bx	lr
   12e86:	nop

00012e88 <__any_on>:
   12e88:	ldr	r3, [r0, #16]
   12e8a:	asrs	r2, r1, #5
   12e8c:	cmp	r3, r2
   12e8e:	push	{r4}
   12e90:	add.w	r4, r0, #20
   12e94:	bge.n	12eb8 <__any_on+0x30>
   12e96:	add.w	r3, r4, r3, lsl #2
   12e9a:	cmp	r4, r3
   12e9c:	bcs.n	12ee2 <__any_on+0x5a>
   12e9e:	ldr.w	r0, [r3, #-4]
   12ea2:	subs	r3, #4
   12ea4:	cbz	r0, 12eae <__any_on+0x26>
   12ea6:	b.n	12ed4 <__any_on+0x4c>
   12ea8:	ldr.w	r2, [r3, #-4]!
   12eac:	cbnz	r2, 12ed4 <__any_on+0x4c>
   12eae:	cmp	r4, r3
   12eb0:	bcc.n	12ea8 <__any_on+0x20>
   12eb2:	ldr.w	r4, [sp], #4
   12eb6:	bx	lr
   12eb8:	ble.n	12edc <__any_on+0x54>
   12eba:	ands.w	r1, r1, #31
   12ebe:	beq.n	12edc <__any_on+0x54>
   12ec0:	ldr.w	r0, [r4, r2, lsl #2]
   12ec4:	lsr.w	r3, r0, r1
   12ec8:	lsl.w	r1, r3, r1
   12ecc:	cmp	r0, r1
   12ece:	add.w	r3, r4, r2, lsl #2
   12ed2:	beq.n	12e9a <__any_on+0x12>
   12ed4:	movs	r0, #1
   12ed6:	ldr.w	r4, [sp], #4
   12eda:	bx	lr
   12edc:	add.w	r3, r4, r2, lsl #2
   12ee0:	b.n	12e9a <__any_on+0x12>
   12ee2:	movs	r0, #0
   12ee4:	b.n	12eb2 <__any_on+0x2a>
   12ee6:	nop

00012ee8 <__sccl>:
   12ee8:	push	{r4, r5, r6}
   12eea:	ldrb	r5, [r1, #0]
   12eec:	cmp	r5, #94	; 0x5e
   12eee:	beq.n	12f50 <__sccl+0x68>
   12ef0:	movs	r2, #0
   12ef2:	adds	r1, #1
   12ef4:	mov	r6, r2
   12ef6:	subs	r3, r0, #1
   12ef8:	add.w	r4, r0, #255	; 0xff
   12efc:	strb.w	r2, [r3, #1]!
   12f00:	cmp	r3, r4
   12f02:	bne.n	12efc <__sccl+0x14>
   12f04:	cbz	r5, 12f28 <__sccl+0x40>
   12f06:	eor.w	r2, r6, #1
   12f0a:	strb	r2, [r0, r5]
   12f0c:	adds	r4, r1, #1
   12f0e:	ldrb.w	r3, [r4, #-1]
   12f12:	cmp	r3, #45	; 0x2d
   12f14:	beq.n	12f34 <__sccl+0x4c>
   12f16:	cmp	r3, #93	; 0x5d
   12f18:	beq.n	12f2e <__sccl+0x46>
   12f1a:	cbz	r3, 12f22 <__sccl+0x3a>
   12f1c:	mov	r5, r3
   12f1e:	mov	r1, r4
   12f20:	b.n	12f0a <__sccl+0x22>
   12f22:	mov	r0, r1
   12f24:	pop	{r4, r5, r6}
   12f26:	bx	lr
   12f28:	subs	r0, r1, #1
   12f2a:	pop	{r4, r5, r6}
   12f2c:	bx	lr
   12f2e:	mov	r0, r4
   12f30:	pop	{r4, r5, r6}
   12f32:	bx	lr
   12f34:	ldrb	r6, [r1, #1]
   12f36:	cmp	r6, #93	; 0x5d
   12f38:	beq.n	12f1c <__sccl+0x34>
   12f3a:	cmp	r5, r6
   12f3c:	bgt.n	12f1c <__sccl+0x34>
   12f3e:	adds	r1, #2
   12f40:	adds	r3, r0, r5
   12f42:	adds	r5, #1
   12f44:	cmp	r6, r5
   12f46:	strb.w	r2, [r3, #1]!
   12f4a:	bgt.n	12f42 <__sccl+0x5a>
   12f4c:	adds	r4, #2
   12f4e:	b.n	12f0e <__sccl+0x26>
   12f50:	movs	r2, #1
   12f52:	ldrb	r5, [r1, #1]
   12f54:	mov	r6, r2
   12f56:	adds	r1, #2
   12f58:	b.n	12ef6 <__sccl+0xe>
   12f5a:	nop

00012f5c <nanf>:
   12f5c:	vldr	s0, [pc, #4]	; 12f64 <nanf+0x8>
   12f60:	bx	lr
   12f62:	nop
   12f64:	.word	0x7fc00000

00012f68 <_strtoll_l.isra.0>:
   12f68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f6c:	sub	sp, #20
   12f6e:	mov	sl, r3
   12f70:	str	r1, [sp, #8]
   12f72:	str	r0, [sp, #12]
   12f74:	str	r2, [sp, #4]
   12f76:	mov	r7, r1
   12f78:	ldr	r6, [sp, #56]	; 0x38
   12f7a:	b.n	12f7e <_strtoll_l.isra.0+0x16>
   12f7c:	mov	r7, r5
   12f7e:	mov	r5, r7
   12f80:	mov	r0, r6
   12f82:	ldrb.w	r4, [r5], #1
   12f86:	bl	c548 <__locale_ctype_ptr_l>
   12f8a:	add	r0, r4
   12f8c:	ldrb	r3, [r0, #1]
   12f8e:	and.w	r3, r3, #8
   12f92:	and.w	r2, r3, #255	; 0xff
   12f96:	cmp	r3, #0
   12f98:	bne.n	12f7c <_strtoll_l.isra.0+0x14>
   12f9a:	cmp	r4, #45	; 0x2d
   12f9c:	beq.w	130a6 <_strtoll_l.isra.0+0x13e>
   12fa0:	cmp	r4, #43	; 0x2b
   12fa2:	it	eq
   12fa4:	ldrbeq	r4, [r7, #1]
   12fa6:	str	r2, [sp, #0]
   12fa8:	it	eq
   12faa:	addeq	r5, r7, #2
   12fac:	cmp.w	sl, #0
   12fb0:	beq.n	12fcc <_strtoll_l.isra.0+0x64>
   12fb2:	cmp.w	sl, #16
   12fb6:	beq.w	130e4 <_strtoll_l.isra.0+0x17c>
   12fba:	ldr	r3, [sp, #0]
   12fbc:	mov	r6, sl
   12fbe:	asrs	r7, r6, #31
   12fc0:	cbnz	r3, 12fde <_strtoll_l.isra.0+0x76>
   12fc2:	mov.w	r8, #4294967295
   12fc6:	mvn.w	r9, #2147483648	; 0x80000000
   12fca:	b.n	12fe6 <_strtoll_l.isra.0+0x7e>
   12fcc:	cmp	r4, #48	; 0x30
   12fce:	beq.n	130d0 <_strtoll_l.isra.0+0x168>
   12fd0:	movs	r6, #10
   12fd2:	movs	r7, #0
   12fd4:	mov.w	sl, #10
   12fd8:	ldr	r3, [sp, #0]
   12fda:	cmp	r3, #0
   12fdc:	beq.n	12fc2 <_strtoll_l.isra.0+0x5a>
   12fde:	mov.w	r8, #0
   12fe2:	mov.w	r9, #2147483648	; 0x80000000
   12fe6:	mov	r2, r6
   12fe8:	mov	r3, r7
   12fea:	mov	r0, r8
   12fec:	mov	r1, r9
   12fee:	bl	c118 <__aeabi_uldivmod>
   12ff2:	mov	r3, r7
   12ff4:	mov	fp, r2
   12ff6:	mov	r0, r8
   12ff8:	mov	r2, r6
   12ffa:	mov	r1, r9
   12ffc:	bl	c118 <__aeabi_uldivmod>
   13000:	mov.w	lr, #0
   13004:	movs	r2, #0
   13006:	movs	r3, #0
   13008:	b.n	1302a <_strtoll_l.isra.0+0xc2>
   1300a:	beq.n	13098 <_strtoll_l.isra.0+0x130>
   1300c:	mul.w	r4, r2, r7
   13010:	mla	r4, r6, r3, r4
   13014:	umull	r2, r3, r2, r6
   13018:	add	r3, r4
   1301a:	adds.w	r2, r2, ip
   1301e:	adc.w	r3, r3, ip, asr #31
   13022:	mov.w	lr, #1
   13026:	ldrb.w	r4, [r5], #1
   1302a:	sub.w	ip, r4, #48	; 0x30
   1302e:	cmp.w	ip, #9
   13032:	bls.n	13042 <_strtoll_l.isra.0+0xda>
   13034:	sub.w	ip, r4, #65	; 0x41
   13038:	cmp.w	ip, #25
   1303c:	bhi.n	1305a <_strtoll_l.isra.0+0xf2>
   1303e:	sub.w	ip, r4, #55	; 0x37
   13042:	cmp	sl, ip
   13044:	ble.n	1306c <_strtoll_l.isra.0+0x104>
   13046:	cmp.w	lr, #4294967295
   1304a:	beq.n	13026 <_strtoll_l.isra.0+0xbe>
   1304c:	cmp	r1, r3
   1304e:	it	eq
   13050:	cmpeq	r0, r2
   13052:	bcs.n	1300a <_strtoll_l.isra.0+0xa2>
   13054:	mov.w	lr, #4294967295
   13058:	b.n	13026 <_strtoll_l.isra.0+0xbe>
   1305a:	sub.w	ip, r4, #97	; 0x61
   1305e:	cmp.w	ip, #25
   13062:	bhi.n	1306c <_strtoll_l.isra.0+0x104>
   13064:	sub.w	ip, r4, #87	; 0x57
   13068:	cmp	sl, ip
   1306a:	bgt.n	13046 <_strtoll_l.isra.0+0xde>
   1306c:	cmp.w	lr, #4294967295
   13070:	beq.n	130b0 <_strtoll_l.isra.0+0x148>
   13072:	ldr	r1, [sp, #0]
   13074:	cbz	r1, 1307c <_strtoll_l.isra.0+0x114>
   13076:	negs	r2, r2
   13078:	sbc.w	r3, r3, r3, lsl #1
   1307c:	ldr	r1, [sp, #4]
   1307e:	cmp	r1, #0
   13080:	beq.n	13108 <_strtoll_l.isra.0+0x1a0>
   13082:	cmp.w	lr, #0
   13086:	bne.n	130c8 <_strtoll_l.isra.0+0x160>
   13088:	ldr	r5, [sp, #8]
   1308a:	mov	r0, r2
   1308c:	mov	r1, r3
   1308e:	ldr	r3, [sp, #4]
   13090:	str	r5, [r3, #0]
   13092:	add	sp, #20
   13094:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13098:	cmp	fp, ip
   1309a:	bge.n	1300c <_strtoll_l.isra.0+0xa4>
   1309c:	mov	r2, r0
   1309e:	mov	r3, r1
   130a0:	mov.w	lr, #4294967295
   130a4:	b.n	13026 <_strtoll_l.isra.0+0xbe>
   130a6:	movs	r3, #1
   130a8:	adds	r5, r7, #2
   130aa:	ldrb	r4, [r7, #1]
   130ac:	str	r3, [sp, #0]
   130ae:	b.n	12fac <_strtoll_l.isra.0+0x44>
   130b0:	ldr	r3, [sp, #0]
   130b2:	cbnz	r3, 13100 <_strtoll_l.isra.0+0x198>
   130b4:	mov.w	r0, #4294967295
   130b8:	mvn.w	r1, #2147483648	; 0x80000000
   130bc:	ldr	r2, [sp, #12]
   130be:	movs	r3, #34	; 0x22
   130c0:	str	r3, [r2, #0]
   130c2:	ldr	r3, [sp, #4]
   130c4:	cbnz	r3, 130cc <_strtoll_l.isra.0+0x164>
   130c6:	b.n	13092 <_strtoll_l.isra.0+0x12a>
   130c8:	mov	r0, r2
   130ca:	mov	r1, r3
   130cc:	subs	r5, #1
   130ce:	b.n	1308e <_strtoll_l.isra.0+0x126>
   130d0:	ldrb	r3, [r5, #0]
   130d2:	and.w	r3, r3, #223	; 0xdf
   130d6:	cmp	r3, #88	; 0x58
   130d8:	beq.n	130f2 <_strtoll_l.isra.0+0x18a>
   130da:	movs	r6, #8
   130dc:	movs	r7, #0
   130de:	mov.w	sl, #8
   130e2:	b.n	12fd8 <_strtoll_l.isra.0+0x70>
   130e4:	cmp	r4, #48	; 0x30
   130e6:	bne.n	1310e <_strtoll_l.isra.0+0x1a6>
   130e8:	ldrb	r3, [r5, #0]
   130ea:	and.w	r3, r3, #223	; 0xdf
   130ee:	cmp	r3, #88	; 0x58
   130f0:	bne.n	1310e <_strtoll_l.isra.0+0x1a6>
   130f2:	ldrb	r4, [r5, #1]
   130f4:	movs	r6, #16
   130f6:	movs	r7, #0
   130f8:	adds	r5, #2
   130fa:	mov.w	sl, #16
   130fe:	b.n	12fd8 <_strtoll_l.isra.0+0x70>
   13100:	movs	r0, #0
   13102:	mov.w	r1, #2147483648	; 0x80000000
   13106:	b.n	130bc <_strtoll_l.isra.0+0x154>
   13108:	mov	r0, r2
   1310a:	mov	r1, r3
   1310c:	b.n	13092 <_strtoll_l.isra.0+0x12a>
   1310e:	movs	r6, #16
   13110:	movs	r7, #0
   13112:	b.n	12fd8 <_strtoll_l.isra.0+0x70>

00013114 <_strtoll_r>:
   13114:	push	{r4, r5, lr}
   13116:	ldr	r4, [pc, #24]	; (13130 <_strtoll_r+0x1c>)
   13118:	ldr	r5, [pc, #24]	; (13134 <_strtoll_r+0x20>)
   1311a:	ldr	r4, [r4, #0]
   1311c:	ldr	r4, [r4, #52]	; 0x34
   1311e:	sub	sp, #12
   13120:	cmp	r4, #0
   13122:	it	eq
   13124:	moveq	r4, r5
   13126:	str	r4, [sp, #0]
   13128:	bl	12f68 <_strtoll_l.isra.0>
   1312c:	add	sp, #12
   1312e:	pop	{r4, r5, pc}
   13130:	.word	0x1fff0d78
   13134:	.word	0x1fff0d7c

00013138 <_strtoul_l.isra.0>:
   13138:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1313c:	ldr.w	r9, [sp, #40]	; 0x28
   13140:	mov	r6, r1
   13142:	mov	r7, r0
   13144:	mov	r5, r2
   13146:	mov	r8, r3
   13148:	mov	fp, r1
   1314a:	b.n	1314e <_strtoul_l.isra.0+0x16>
   1314c:	mov	fp, r4
   1314e:	mov	r4, fp
   13150:	mov	r0, r9
   13152:	ldrb.w	sl, [r4], #1
   13156:	bl	c548 <__locale_ctype_ptr_l>
   1315a:	add	r0, sl
   1315c:	ldrb	r0, [r0, #1]
   1315e:	and.w	r0, r0, #8
   13162:	and.w	ip, r0, #255	; 0xff
   13166:	cmp	r0, #0
   13168:	bne.n	1314c <_strtoul_l.isra.0+0x14>
   1316a:	mov	r1, sl
   1316c:	cmp	r1, #45	; 0x2d
   1316e:	beq.n	13234 <_strtoul_l.isra.0+0xfc>
   13170:	cmp	r1, #43	; 0x2b
   13172:	itt	eq
   13174:	ldrbeq.w	r1, [fp, #1]
   13178:	addeq.w	r4, fp, #2
   1317c:	cmp.w	r8, #0
   13180:	beq.n	1319c <_strtoul_l.isra.0+0x64>
   13182:	cmp.w	r8, #16
   13186:	beq.n	13242 <_strtoul_l.isra.0+0x10a>
   13188:	mov.w	r3, #4294967295
   1318c:	udiv	r3, r3, r8
   13190:	mul.w	sl, r8, r3
   13194:	mvn.w	sl, sl
   13198:	mov	r9, r8
   1319a:	b.n	131ac <_strtoul_l.isra.0+0x74>
   1319c:	cmp	r1, #48	; 0x30
   1319e:	beq.n	13264 <_strtoul_l.isra.0+0x12c>
   131a0:	mov.w	r8, #10
   131a4:	ldr	r3, [pc, #244]	; (1329c <_strtoul_l.isra.0+0x164>)
   131a6:	mov	r9, r8
   131a8:	mov.w	sl, #5
   131ac:	mov.w	lr, #0
   131b0:	mov	r0, lr
   131b2:	b.n	131c2 <_strtoul_l.isra.0+0x8a>
   131b4:	beq.n	13216 <_strtoul_l.isra.0+0xde>
   131b6:	mla	r0, r9, r0, r2
   131ba:	mov.w	lr, #1
   131be:	ldrb.w	r1, [r4], #1
   131c2:	sub.w	r2, r1, #48	; 0x30
   131c6:	cmp	r2, #9
   131c8:	bls.n	131d6 <_strtoul_l.isra.0+0x9e>
   131ca:	sub.w	r2, r1, #65	; 0x41
   131ce:	cmp	r2, #25
   131d0:	bhi.n	131ea <_strtoul_l.isra.0+0xb2>
   131d2:	sub.w	r2, r1, #55	; 0x37
   131d6:	cmp	r8, r2
   131d8:	ble.n	131fa <_strtoul_l.isra.0+0xc2>
   131da:	cmp.w	lr, #4294967295
   131de:	beq.n	131be <_strtoul_l.isra.0+0x86>
   131e0:	cmp	r0, r3
   131e2:	bls.n	131b4 <_strtoul_l.isra.0+0x7c>
   131e4:	mov.w	lr, #4294967295
   131e8:	b.n	131be <_strtoul_l.isra.0+0x86>
   131ea:	sub.w	r2, r1, #97	; 0x61
   131ee:	cmp	r2, #25
   131f0:	bhi.n	131fa <_strtoul_l.isra.0+0xc2>
   131f2:	sub.w	r2, r1, #87	; 0x57
   131f6:	cmp	r8, r2
   131f8:	bgt.n	131da <_strtoul_l.isra.0+0xa2>
   131fa:	cmp.w	lr, #4294967295
   131fe:	beq.n	13224 <_strtoul_l.isra.0+0xec>
   13200:	cmp.w	ip, #0
   13204:	beq.n	13208 <_strtoul_l.isra.0+0xd0>
   13206:	negs	r0, r0
   13208:	cbz	r5, 13220 <_strtoul_l.isra.0+0xe8>
   1320a:	cmp.w	lr, #0
   1320e:	bne.n	1322c <_strtoul_l.isra.0+0xf4>
   13210:	str	r6, [r5, #0]
   13212:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13216:	cmp	r2, sl
   13218:	ble.n	131b6 <_strtoul_l.isra.0+0x7e>
   1321a:	mov.w	lr, #4294967295
   1321e:	b.n	131be <_strtoul_l.isra.0+0x86>
   13220:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13224:	movs	r3, #34	; 0x22
   13226:	str	r3, [r7, #0]
   13228:	mov	r0, lr
   1322a:	cbz	r5, 1327e <_strtoul_l.isra.0+0x146>
   1322c:	subs	r6, r4, #1
   1322e:	str	r6, [r5, #0]
   13230:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13234:	add.w	r4, fp, #2
   13238:	ldrb.w	r1, [fp, #1]
   1323c:	mov.w	ip, #1
   13240:	b.n	1317c <_strtoul_l.isra.0+0x44>
   13242:	cmp	r1, #48	; 0x30
   13244:	bne.n	13282 <_strtoul_l.isra.0+0x14a>
   13246:	ldrb	r3, [r4, #0]
   13248:	and.w	r3, r3, #223	; 0xdf
   1324c:	cmp	r3, #88	; 0x58
   1324e:	bne.n	1328e <_strtoul_l.isra.0+0x156>
   13250:	mov.w	r9, #16
   13254:	ldrb	r1, [r4, #1]
   13256:	mov	r8, r9
   13258:	mov.w	sl, #15
   1325c:	adds	r4, #2
   1325e:	mvn.w	r3, #4026531840	; 0xf0000000
   13262:	b.n	131ac <_strtoul_l.isra.0+0x74>
   13264:	ldrb	r3, [r4, #0]
   13266:	and.w	r3, r3, #223	; 0xdf
   1326a:	cmp	r3, #88	; 0x58
   1326c:	beq.n	13250 <_strtoul_l.isra.0+0x118>
   1326e:	mov.w	r8, #8
   13272:	mov	r9, r8
   13274:	mov.w	sl, #7
   13278:	mvn.w	r3, #3758096384	; 0xe0000000
   1327c:	b.n	131ac <_strtoul_l.isra.0+0x74>
   1327e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13282:	mov.w	sl, #15
   13286:	mvn.w	r3, #4026531840	; 0xf0000000
   1328a:	mov	r9, r8
   1328c:	b.n	131ac <_strtoul_l.isra.0+0x74>
   1328e:	mov	r9, r8
   13290:	mov.w	sl, #15
   13294:	mvn.w	r3, #4026531840	; 0xf0000000
   13298:	b.n	131ac <_strtoul_l.isra.0+0x74>
   1329a:	nop
   1329c:	.word	0x19999999

000132a0 <_strtoul_r>:
   132a0:	push	{r4, r5, lr}
   132a2:	ldr	r4, [pc, #24]	; (132bc <_strtoul_r+0x1c>)
   132a4:	ldr	r5, [pc, #24]	; (132c0 <_strtoul_r+0x20>)
   132a6:	ldr	r4, [r4, #0]
   132a8:	ldr	r4, [r4, #52]	; 0x34
   132aa:	sub	sp, #12
   132ac:	cmp	r4, #0
   132ae:	it	eq
   132b0:	moveq	r4, r5
   132b2:	str	r4, [sp, #0]
   132b4:	bl	13138 <_strtoul_l.isra.0>
   132b8:	add	sp, #12
   132ba:	pop	{r4, r5, pc}
   132bc:	.word	0x1fff0d78
   132c0:	.word	0x1fff0d7c

000132c4 <_strtoull_l.isra.0>:
   132c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132c8:	sub	sp, #20
   132ca:	mov	fp, r1
   132cc:	str	r0, [sp, #8]
   132ce:	mov	r7, r2
   132d0:	mov	r6, r3
   132d2:	mov	r8, r1
   132d4:	ldr	r4, [sp, #56]	; 0x38
   132d6:	b.n	132da <_strtoull_l.isra.0+0x16>
   132d8:	mov	r8, r5
   132da:	mov	r5, r8
   132dc:	mov	r0, r4
   132de:	ldrb.w	r9, [r5], #1
   132e2:	bl	c548 <__locale_ctype_ptr_l>
   132e6:	add	r0, r9
   132e8:	ldrb	r3, [r0, #1]
   132ea:	and.w	r3, r3, #8
   132ee:	and.w	r2, r3, #255	; 0xff
   132f2:	cmp	r3, #0
   132f4:	bne.n	132d8 <_strtoull_l.isra.0+0x14>
   132f6:	mov	r4, r9
   132f8:	cmp	r4, #45	; 0x2d
   132fa:	beq.w	13416 <_strtoull_l.isra.0+0x152>
   132fe:	cmp	r4, #43	; 0x2b
   13300:	it	eq
   13302:	ldrbeq.w	r4, [r8, #1]
   13306:	str	r2, [sp, #4]
   13308:	it	eq
   1330a:	addeq.w	r5, r8, #2
   1330e:	cbz	r6, 13348 <_strtoull_l.isra.0+0x84>
   13310:	cmp	r6, #16
   13312:	beq.w	13424 <_strtoull_l.isra.0+0x160>
   13316:	mov.w	r9, r6, asr #31
   1331a:	mov	r2, r6
   1331c:	mov	r3, r9
   1331e:	mov.w	r0, #4294967295
   13322:	mov.w	r1, #4294967295
   13326:	bl	c118 <__aeabi_uldivmod>
   1332a:	mov	r2, r6
   1332c:	str	r0, [sp, #12]
   1332e:	mov	sl, r1
   13330:	mov	r3, r9
   13332:	mov.w	r0, #4294967295
   13336:	mov.w	r1, #4294967295
   1333a:	bl	c118 <__aeabi_uldivmod>
   1333e:	mov	r8, r6
   13340:	mov	lr, r2
   13342:	ldr	r2, [sp, #12]
   13344:	mov	r3, sl
   13346:	b.n	13362 <_strtoull_l.isra.0+0x9e>
   13348:	cmp	r4, #48	; 0x30
   1334a:	beq.w	13450 <_strtoull_l.isra.0+0x18c>
   1334e:	ldr	r3, [pc, #348]	; (134ac <_strtoull_l.isra.0+0x1e8>)
   13350:	mov.w	lr, #5
   13354:	mov.w	r2, #2576980377	; 0x99999999
   13358:	mov.w	r8, #10
   1335c:	mov.w	r9, #0
   13360:	movs	r6, #10
   13362:	mov.w	ip, #0
   13366:	movs	r0, #0
   13368:	movs	r1, #0
   1336a:	b.n	13392 <_strtoull_l.isra.0+0xce>
   1336c:	cmp	r1, r3
   1336e:	it	eq
   13370:	cmpeq	r0, r2
   13372:	beq.n	133f6 <_strtoull_l.isra.0+0x132>
   13374:	mul.w	r4, r0, r9
   13378:	mla	r4, r8, r1, r4
   1337c:	umull	r0, r1, r0, r8
   13380:	add	r1, r4
   13382:	adds.w	r0, r0, sl
   13386:	adc.w	r1, r1, sl, asr #31
   1338a:	mov.w	ip, #1
   1338e:	ldrb.w	r4, [r5], #1
   13392:	sub.w	sl, r4, #48	; 0x30
   13396:	cmp.w	sl, #9
   1339a:	bls.n	133aa <_strtoull_l.isra.0+0xe6>
   1339c:	sub.w	sl, r4, #65	; 0x41
   133a0:	cmp.w	sl, #25
   133a4:	bhi.n	133c2 <_strtoull_l.isra.0+0xfe>
   133a6:	sub.w	sl, r4, #55	; 0x37
   133aa:	cmp	r6, sl
   133ac:	ble.n	133d4 <_strtoull_l.isra.0+0x110>
   133ae:	cmp.w	ip, #4294967295
   133b2:	beq.n	1338e <_strtoull_l.isra.0+0xca>
   133b4:	cmp	r3, r1
   133b6:	it	eq
   133b8:	cmpeq	r2, r0
   133ba:	bcs.n	1336c <_strtoull_l.isra.0+0xa8>
   133bc:	mov.w	ip, #4294967295
   133c0:	b.n	1338e <_strtoull_l.isra.0+0xca>
   133c2:	sub.w	sl, r4, #97	; 0x61
   133c6:	cmp.w	sl, #25
   133ca:	bhi.n	133d4 <_strtoull_l.isra.0+0x110>
   133cc:	sub.w	sl, r4, #87	; 0x57
   133d0:	cmp	r6, sl
   133d2:	bgt.n	133ae <_strtoull_l.isra.0+0xea>
   133d4:	cmp.w	ip, #4294967295
   133d8:	beq.n	13400 <_strtoull_l.isra.0+0x13c>
   133da:	ldr	r3, [sp, #4]
   133dc:	cbz	r3, 133e4 <_strtoull_l.isra.0+0x120>
   133de:	negs	r0, r0
   133e0:	sbc.w	r1, r1, r1, lsl #1
   133e4:	cbz	r7, 133f0 <_strtoull_l.isra.0+0x12c>
   133e6:	cmp.w	ip, #0
   133ea:	bne.n	13412 <_strtoull_l.isra.0+0x14e>
   133ec:	mov	r5, fp
   133ee:	str	r5, [r7, #0]
   133f0:	add	sp, #20
   133f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133f6:	cmp	sl, lr
   133f8:	ble.n	13374 <_strtoull_l.isra.0+0xb0>
   133fa:	mov.w	ip, #4294967295
   133fe:	b.n	1338e <_strtoull_l.isra.0+0xca>
   13400:	ldr	r2, [sp, #8]
   13402:	movs	r3, #34	; 0x22
   13404:	str	r3, [r2, #0]
   13406:	mov.w	r0, #4294967295
   1340a:	mov.w	r1, #4294967295
   1340e:	cmp	r7, #0
   13410:	beq.n	133f0 <_strtoull_l.isra.0+0x12c>
   13412:	subs	r5, #1
   13414:	b.n	133ee <_strtoull_l.isra.0+0x12a>
   13416:	movs	r3, #1
   13418:	add.w	r5, r8, #2
   1341c:	ldrb.w	r4, [r8, #1]
   13420:	str	r3, [sp, #4]
   13422:	b.n	1330e <_strtoull_l.isra.0+0x4a>
   13424:	cmp	r4, #48	; 0x30
   13426:	bne.n	13472 <_strtoull_l.isra.0+0x1ae>
   13428:	ldrb	r3, [r5, #0]
   1342a:	and.w	r3, r3, #223	; 0xdf
   1342e:	cmp	r3, #88	; 0x58
   13430:	bne.n	13488 <_strtoull_l.isra.0+0x1c4>
   13432:	mov.w	r3, #4294967295
   13436:	ldrb	r4, [r5, #1]
   13438:	str	r3, [sp, #12]
   1343a:	mov.w	lr, #15
   1343e:	adds	r5, #2
   13440:	mvn.w	sl, #4026531840	; 0xf0000000
   13444:	mov.w	r8, #16
   13448:	mov.w	r9, #0
   1344c:	movs	r6, #16
   1344e:	b.n	13342 <_strtoull_l.isra.0+0x7e>
   13450:	ldrb	r3, [r5, #0]
   13452:	and.w	r3, r3, #223	; 0xdf
   13456:	cmp	r3, #88	; 0x58
   13458:	beq.n	13432 <_strtoull_l.isra.0+0x16e>
   1345a:	mov.w	lr, #7
   1345e:	mov.w	r2, #4294967295
   13462:	mvn.w	r3, #3758096384	; 0xe0000000
   13466:	mov.w	r8, #8
   1346a:	mov.w	r9, #0
   1346e:	movs	r6, #8
   13470:	b.n	13362 <_strtoull_l.isra.0+0x9e>
   13472:	mov.w	lr, #15
   13476:	mov.w	r2, #4294967295
   1347a:	mvn.w	r3, #4026531840	; 0xf0000000
   1347e:	mov.w	r8, #16
   13482:	mov.w	r9, #0
   13486:	b.n	13362 <_strtoull_l.isra.0+0x9e>
   13488:	mov.w	r8, #16
   1348c:	mov.w	r9, #0
   13490:	mov	r2, r8
   13492:	mov	r3, r9
   13494:	mov.w	r0, #4294967295
   13498:	mov.w	r1, #4294967295
   1349c:	bl	c118 <__aeabi_uldivmod>
   134a0:	mvn.w	r3, #4026531840	; 0xf0000000
   134a4:	mov	lr, r2
   134a6:	mov.w	r2, #4294967295
   134aa:	b.n	13362 <_strtoull_l.isra.0+0x9e>
   134ac:	.word	0x19999999

000134b0 <_strtoull_r>:
   134b0:	push	{r4, r5, lr}
   134b2:	ldr	r4, [pc, #24]	; (134cc <_strtoull_r+0x1c>)
   134b4:	ldr	r5, [pc, #24]	; (134d0 <_strtoull_r+0x20>)
   134b6:	ldr	r4, [r4, #0]
   134b8:	ldr	r4, [r4, #52]	; 0x34
   134ba:	sub	sp, #12
   134bc:	cmp	r4, #0
   134be:	it	eq
   134c0:	moveq	r4, r5
   134c2:	str	r4, [sp, #0]
   134c4:	bl	132c4 <_strtoull_l.isra.0>
   134c8:	add	sp, #12
   134ca:	pop	{r4, r5, pc}
   134cc:	.word	0x1fff0d78
   134d0:	.word	0x1fff0d7c

000134d4 <__ssprint_r>:
   134d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134d8:	ldr	r3, [r2, #8]
   134da:	sub	sp, #12
   134dc:	mov	r8, r2
   134de:	cmp	r3, #0
   134e0:	beq.n	135c8 <__ssprint_r+0xf4>
   134e2:	mov	fp, r0
   134e4:	mov.w	r9, #0
   134e8:	ldr	r6, [r2, #0]
   134ea:	ldr	r0, [r1, #0]
   134ec:	ldr	r3, [r1, #8]
   134ee:	mov	r5, r1
   134f0:	mov	r4, r9
   134f2:	cmp	r4, #0
   134f4:	beq.n	13582 <__ssprint_r+0xae>
   134f6:	cmp	r4, r3
   134f8:	mov	r7, r3
   134fa:	mov	sl, r3
   134fc:	bcc.n	1358c <__ssprint_r+0xb8>
   134fe:	ldrh	r3, [r5, #12]
   13500:	tst.w	r3, #1152	; 0x480
   13504:	beq.n	13562 <__ssprint_r+0x8e>
   13506:	ldr	r7, [r5, #20]
   13508:	ldr	r1, [r5, #16]
   1350a:	add.w	r7, r7, r7, lsl #1
   1350e:	rsb	sl, r1, r0
   13512:	add.w	r7, r7, r7, lsr #31
   13516:	adds	r0, r4, #1
   13518:	asrs	r7, r7, #1
   1351a:	add	r0, sl
   1351c:	cmp	r0, r7
   1351e:	mov	r2, r7
   13520:	itt	hi
   13522:	movhi	r7, r0
   13524:	movhi	r2, r7
   13526:	lsls	r3, r3, #21
   13528:	bpl.n	13592 <__ssprint_r+0xbe>
   1352a:	mov	r1, r2
   1352c:	mov	r0, fp
   1352e:	bl	c584 <_malloc_r>
   13532:	cmp	r0, #0
   13534:	beq.n	135a6 <__ssprint_r+0xd2>
   13536:	mov	r2, sl
   13538:	ldr	r1, [r5, #16]
   1353a:	str	r0, [sp, #4]
   1353c:	bl	94c8 <memcpy>
   13540:	ldrh	r2, [r5, #12]
   13542:	ldr	r3, [sp, #4]
   13544:	bic.w	r2, r2, #1152	; 0x480
   13548:	orr.w	r2, r2, #128	; 0x80
   1354c:	strh	r2, [r5, #12]
   1354e:	rsb	r2, sl, r7
   13552:	add.w	r0, r3, sl
   13556:	str	r7, [r5, #20]
   13558:	str	r3, [r5, #16]
   1355a:	str	r0, [r5, #0]
   1355c:	str	r2, [r5, #8]
   1355e:	mov	r7, r4
   13560:	mov	sl, r4
   13562:	mov	r2, sl
   13564:	mov	r1, r9
   13566:	bl	cb84 <memmove>
   1356a:	ldr.w	r2, [r8, #8]
   1356e:	ldr	r3, [r5, #8]
   13570:	ldr	r0, [r5, #0]
   13572:	subs	r3, r3, r7
   13574:	add	r0, sl
   13576:	subs	r4, r2, r4
   13578:	str	r3, [r5, #8]
   1357a:	str	r0, [r5, #0]
   1357c:	str.w	r4, [r8, #8]
   13580:	cbz	r4, 135c8 <__ssprint_r+0xf4>
   13582:	ldr.w	r9, [r6]
   13586:	ldr	r4, [r6, #4]
   13588:	adds	r6, #8
   1358a:	b.n	134f2 <__ssprint_r+0x1e>
   1358c:	mov	r7, r4
   1358e:	mov	sl, r4
   13590:	b.n	13562 <__ssprint_r+0x8e>
   13592:	mov	r0, fp
   13594:	bl	ccf0 <_realloc_r>
   13598:	mov	r3, r0
   1359a:	cmp	r0, #0
   1359c:	bne.n	1354e <__ssprint_r+0x7a>
   1359e:	ldr	r1, [r5, #16]
   135a0:	mov	r0, fp
   135a2:	bl	11b90 <_free_r>
   135a6:	movs	r3, #12
   135a8:	str.w	r3, [fp]
   135ac:	ldrh	r3, [r5, #12]
   135ae:	movs	r2, #0
   135b0:	orr.w	r3, r3, #64	; 0x40
   135b4:	mov.w	r0, #4294967295
   135b8:	strh	r3, [r5, #12]
   135ba:	str.w	r2, [r8, #8]
   135be:	str.w	r2, [r8, #4]
   135c2:	add	sp, #12
   135c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135c8:	movs	r0, #0
   135ca:	str.w	r0, [r8, #4]
   135ce:	add	sp, #12
   135d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000135d4 <_sungetc_r>:
   135d4:	adds	r3, r1, #1
   135d6:	push	{r4, r5, r6, lr}
   135d8:	beq.n	13612 <_sungetc_r+0x3e>
   135da:	ldrh	r3, [r2, #12]
   135dc:	ldr	r4, [r2, #48]	; 0x30
   135de:	bic.w	r3, r3, #32
   135e2:	strh	r3, [r2, #12]
   135e4:	uxtb	r5, r1
   135e6:	cbz	r4, 13618 <_sungetc_r+0x44>
   135e8:	mov	r4, r2
   135ea:	ldr	r2, [r2, #4]
   135ec:	ldr	r3, [r4, #52]	; 0x34
   135ee:	cmp	r2, r3
   135f0:	mov	r6, r1
   135f2:	bge.n	13608 <_sungetc_r+0x34>
   135f4:	ldr	r3, [r4, #0]
   135f6:	subs	r2, r3, #1
   135f8:	str	r2, [r4, #0]
   135fa:	strb.w	r6, [r3, #-1]
   135fe:	ldr	r3, [r4, #4]
   13600:	adds	r3, #1
   13602:	str	r3, [r4, #4]
   13604:	mov	r0, r5
   13606:	pop	{r4, r5, r6, pc}
   13608:	mov	r1, r4
   1360a:	bl	13718 <__submore>
   1360e:	cmp	r0, #0
   13610:	beq.n	135f4 <_sungetc_r+0x20>
   13612:	mov.w	r5, #4294967295
   13616:	b.n	13604 <_sungetc_r+0x30>
   13618:	ldr	r0, [r2, #16]
   1361a:	ldr	r3, [r2, #0]
   1361c:	cbz	r0, 1362a <_sungetc_r+0x56>
   1361e:	cmp	r0, r3
   13620:	bcs.n	1362a <_sungetc_r+0x56>
   13622:	ldrb.w	r0, [r3, #-1]
   13626:	cmp	r5, r0
   13628:	beq.n	1364a <_sungetc_r+0x76>
   1362a:	str	r3, [r2, #56]	; 0x38
   1362c:	mov	r3, r2
   1362e:	ldr	r6, [r2, #4]
   13630:	str	r6, [r2, #60]	; 0x3c
   13632:	add.w	r4, r2, #64	; 0x40
   13636:	movs	r0, #3
   13638:	str	r0, [r2, #52]	; 0x34
   1363a:	str	r4, [r2, #48]	; 0x30
   1363c:	strb.w	r1, [r3, #66]!
   13640:	movs	r1, #1
   13642:	str	r3, [r2, #0]
   13644:	str	r1, [r2, #4]
   13646:	mov	r0, r5
   13648:	pop	{r4, r5, r6, pc}
   1364a:	ldr	r1, [r2, #4]
   1364c:	subs	r3, #1
   1364e:	adds	r1, #1
   13650:	str	r3, [r2, #0]
   13652:	str	r1, [r2, #4]
   13654:	b.n	13604 <_sungetc_r+0x30>
   13656:	nop

00013658 <__ssrefill_r>:
   13658:	push	{r4, lr}
   1365a:	mov	r4, r1
   1365c:	ldr	r1, [r1, #48]	; 0x30
   1365e:	cbz	r1, 1367c <__ssrefill_r+0x24>
   13660:	add.w	r3, r4, #64	; 0x40
   13664:	cmp	r1, r3
   13666:	beq.n	1366c <__ssrefill_r+0x14>
   13668:	bl	11b90 <_free_r>
   1366c:	ldr	r3, [r4, #60]	; 0x3c
   1366e:	str	r3, [r4, #4]
   13670:	movs	r0, #0
   13672:	str	r0, [r4, #48]	; 0x30
   13674:	cbz	r3, 1367c <__ssrefill_r+0x24>
   13676:	ldr	r3, [r4, #56]	; 0x38
   13678:	str	r3, [r4, #0]
   1367a:	pop	{r4, pc}
   1367c:	ldrh	r3, [r4, #12]
   1367e:	ldr	r2, [r4, #16]
   13680:	str	r2, [r4, #0]
   13682:	orr.w	r3, r3, #32
   13686:	movs	r2, #0
   13688:	strh	r3, [r4, #12]
   1368a:	str	r2, [r4, #4]
   1368c:	mov.w	r0, #4294967295
   13690:	pop	{r4, pc}
   13692:	nop

00013694 <_sfread_r>:
   13694:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13698:	sub	sp, #12
   1369a:	mul.w	r9, r2, r3
   1369e:	str	r2, [sp, #4]
   136a0:	mov	sl, r3
   136a2:	ldr	r4, [sp, #48]	; 0x30
   136a4:	cmp.w	r9, #0
   136a8:	beq.n	136fe <_sfread_r+0x6a>
   136aa:	mov	r7, r0
   136ac:	mov	r6, r1
   136ae:	mov	r5, r9
   136b0:	mov.w	r8, #0
   136b4:	b.n	136d6 <_sfread_r+0x42>
   136b6:	ldr	r1, [r4, #0]
   136b8:	bl	94c8 <memcpy>
   136bc:	ldr	r2, [r4, #0]
   136be:	str.w	r8, [r4, #4]
   136c2:	add	r2, fp
   136c4:	str	r2, [r4, #0]
   136c6:	mov	r1, r4
   136c8:	mov	r0, r7
   136ca:	add	r6, fp
   136cc:	rsb	r5, fp, r5
   136d0:	bl	13658 <__ssrefill_r>
   136d4:	cbnz	r0, 13706 <_sfread_r+0x72>
   136d6:	ldr.w	fp, [r4, #4]
   136da:	cmp	r5, fp
   136dc:	mov	r0, r6
   136de:	mov	r2, fp
   136e0:	bhi.n	136b6 <_sfread_r+0x22>
   136e2:	mov	r2, r5
   136e4:	ldr	r1, [r4, #0]
   136e6:	bl	94c8 <memcpy>
   136ea:	ldr	r2, [r4, #4]
   136ec:	ldr	r3, [r4, #0]
   136ee:	subs	r2, r2, r5
   136f0:	add	r3, r5
   136f2:	mov	r0, sl
   136f4:	str	r2, [r4, #4]
   136f6:	str	r3, [r4, #0]
   136f8:	add	sp, #12
   136fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136fe:	mov	r0, r9
   13700:	add	sp, #12
   13702:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13706:	ldr	r3, [sp, #4]
   13708:	rsb	r9, r5, r9
   1370c:	udiv	r0, r9, r3
   13710:	add	sp, #12
   13712:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13716:	nop

00013718 <__submore>:
   13718:	add.w	r3, r1, #64	; 0x40
   1371c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13720:	mov	r4, r1
   13722:	ldr	r1, [r1, #48]	; 0x30
   13724:	cmp	r1, r3
   13726:	beq.n	13752 <__submore+0x3a>
   13728:	ldr	r6, [r4, #52]	; 0x34
   1372a:	lsls	r7, r6, #1
   1372c:	mov	r2, r7
   1372e:	bl	ccf0 <_realloc_r>
   13732:	mov	r5, r0
   13734:	cbz	r0, 13788 <__submore+0x70>
   13736:	add.w	r8, r0, r6
   1373a:	mov	r2, r6
   1373c:	mov	r0, r8
   1373e:	mov	r1, r5
   13740:	bl	94c8 <memcpy>
   13744:	str.w	r8, [r4]
   13748:	str	r5, [r4, #48]	; 0x30
   1374a:	str	r7, [r4, #52]	; 0x34
   1374c:	movs	r0, #0
   1374e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13752:	mov.w	r1, #1024	; 0x400
   13756:	bl	c584 <_malloc_r>
   1375a:	cbz	r0, 13788 <__submore+0x70>
   1375c:	ldrb.w	r3, [r4, #66]	; 0x42
   13760:	str	r0, [r4, #48]	; 0x30
   13762:	mov.w	r2, #1024	; 0x400
   13766:	str	r2, [r4, #52]	; 0x34
   13768:	strb.w	r3, [r0, #1023]	; 0x3ff
   1376c:	ldrb.w	r3, [r4, #65]	; 0x41
   13770:	strb.w	r3, [r0, #1022]	; 0x3fe
   13774:	ldrb.w	r3, [r4, #64]	; 0x40
   13778:	strb.w	r3, [r0, #1021]	; 0x3fd
   1377c:	addw	r0, r0, #1021	; 0x3fd
   13780:	str	r0, [r4, #0]
   13782:	movs	r0, #0
   13784:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13788:	mov.w	r0, #4294967295
   1378c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013790 <_vasnprintf_r>:
   13790:	push	{r4, r5, r6, lr}
   13792:	mov	r5, r2
   13794:	sub	sp, #104	; 0x68
   13796:	ldr	r4, [r2, #0]
   13798:	cbz	r1, 1379e <_vasnprintf_r+0xe>
   1379a:	cmp	r4, #0
   1379c:	bne.n	137d4 <_vasnprintf_r+0x44>
   1379e:	movs	r4, #0
   137a0:	mov.w	r2, #648	; 0x288
   137a4:	strh.w	r2, [sp, #12]
   137a8:	str	r4, [sp, #0]
   137aa:	str	r4, [sp, #16]
   137ac:	mov	r2, r3
   137ae:	movw	r6, #65535	; 0xffff
   137b2:	ldr	r3, [sp, #120]	; 0x78
   137b4:	str	r4, [sp, #8]
   137b6:	mov	r1, sp
   137b8:	str	r4, [sp, #20]
   137ba:	strh.w	r6, [sp, #14]
   137be:	bl	e490 <_svfprintf_r>
   137c2:	cmp	r0, #0
   137c4:	blt.n	137ea <_vasnprintf_r+0x5a>
   137c6:	ldr	r3, [sp, #0]
   137c8:	str	r0, [r5, #0]
   137ca:	movs	r2, #0
   137cc:	strb	r2, [r3, #0]
   137ce:	ldr	r0, [sp, #16]
   137d0:	add	sp, #104	; 0x68
   137d2:	pop	{r4, r5, r6, pc}
   137d4:	mov.w	r2, #1544	; 0x608
   137d8:	str	r1, [sp, #0]
   137da:	str	r1, [sp, #16]
   137dc:	strh.w	r2, [sp, #12]
   137e0:	bge.n	137ac <_vasnprintf_r+0x1c>
   137e2:	movs	r3, #139	; 0x8b
   137e4:	str	r3, [r0, #0]
   137e6:	movs	r0, #0
   137e8:	b.n	137d0 <_vasnprintf_r+0x40>
   137ea:	movs	r0, #0
   137ec:	b.n	137d0 <_vasnprintf_r+0x40>
   137ee:	nop

000137f0 <_calloc_r>:
   137f0:	push	{r4, lr}
   137f2:	mul.w	r1, r2, r1
   137f6:	bl	c584 <_malloc_r>
   137fa:	mov	r4, r0
   137fc:	cbz	r0, 13836 <_calloc_r+0x46>
   137fe:	ldr.w	r2, [r0, #-4]
   13802:	bic.w	r2, r2, #3
   13806:	subs	r2, #4
   13808:	cmp	r2, #36	; 0x24
   1380a:	bhi.n	1383e <_calloc_r+0x4e>
   1380c:	cmp	r2, #19
   1380e:	bls.n	1383a <_calloc_r+0x4a>
   13810:	movs	r3, #0
   13812:	cmp	r2, #27
   13814:	str	r3, [r0, #0]
   13816:	str	r3, [r0, #4]
   13818:	bls.n	13848 <_calloc_r+0x58>
   1381a:	cmp	r2, #36	; 0x24
   1381c:	str	r3, [r0, #8]
   1381e:	str	r3, [r0, #12]
   13820:	iteee	ne
   13822:	addne.w	r2, r0, #16
   13826:	streq	r3, [r0, #16]
   13828:	streq	r3, [r0, #20]
   1382a:	addeq.w	r2, r0, #24
   1382e:	movs	r3, #0
   13830:	str	r3, [r2, #0]
   13832:	str	r3, [r2, #4]
   13834:	str	r3, [r2, #8]
   13836:	mov	r0, r4
   13838:	pop	{r4, pc}
   1383a:	mov	r2, r0
   1383c:	b.n	1382e <_calloc_r+0x3e>
   1383e:	movs	r1, #0
   13840:	bl	cc4c <memset>
   13844:	mov	r0, r4
   13846:	pop	{r4, pc}
   13848:	add.w	r2, r0, #8
   1384c:	b.n	1382e <_calloc_r+0x3e>
   1384e:	nop

00013850 <vtable for FsFile>:
	...
   13858:	....5...........
   13868:	....].......

00013874 <vtable for Logger<long, 300, 128, 64>>:
	...
   1387c:	............%s_%
   1388c:	04d%02d%02d_%02d
   1389c:	%02d%02d.bin....
   138ac:	Menu....? Help..
   138bc:	a Start Acquisit
   138cc:	ion.b Start Logg
   138dc:	er..s Stop Logge
   138ec:	r...e End Aquisi
   138fc:	tion....h End Aq
   1390c:	uisition and Hib
   1391c:	ernate..x Exit P
   1392c:	rogram..?xabseh.
   1393c:	%c %2d on_time..
   1394c:	....%c %2d off_t
   1395c:	ime.....%c %2d f
   1396c:	irst_hour...%c %
   1397c:	2d second_hour..
   1398c:	....%c %2d third
   1399c:	_hour...%c %2d l
   139ac:	ast_hour....%c %
   139bc:	s name......%04d
   139cc:	/%02d/%02d..%c %
   139dc:	s date......%02d
   139ec:	:%02d:%02d..%c %
   139fc:	s time......%c %
   13a0c:	s mac address...
   13a1c:	exter 'a' to pri
   13a2c:	nt this.exter '?
   13a3c:	c' to read value
   13a4c:	 c=(g,p,i,u,v,f,
   13a5c:	n,d,t,m)....  e.
   13a6c:	g.: ?i will prin
   13a7c:	t first hour....
   13a8c:	exter '!cval' to
   13a9c:	 read value c=(g
   13aac:	,p,i,u,v,f,n,d,t
   13abc:	) and val is new
   13acc:	 value..  e.g.: 
   13adc:	!i10 will set fi
   13aec:	rst hour to 10..
   13afc:	exter 'xval' to 
   13b0c:	exit menu (x is 
   13b1c:	delay in minutes
   13b2c:	, -1 means immed
   13b3c:	iate)...  e.g.: 
   13b4c:	x10 will exit an
   13b5c:	d hibernate for 
   13b6c:	10 minutes..    
   13b7c:	    x-1 with exi
   13b8c:	t and start imme
   13b9c:	diately.?!xa....
   13bac:	gpiuvfndtlm.%02d
   13bbc:	....%s......%04d
   13bcc:	....gpiuvfndt...
   13bdc:	SdError: 0X.,0X.
   13bec:	Check SD format.
   13bfc:	....error: .%4d/
   13c0c:	%02d/%02d %02d:%
   13c1c:	02d %d......lux.
   13c2c:	txt.logText file
   13c3c:	.write failed...
   13c4c:	logText file.ope
   13c5c:	n failed....Conf
   13c6c:	ig.txt..read fai
   13c7c:	led.%d..%2d.....
   13c8c:	write failed....
   13c9c:	newCard X...card
   13cac:	Begin: %x %d....
   13cbc:	begin failed....
   13ccc:	file.preAllocate
   13cdc:	 failed. %s.....
   13cec:	......(%d)......
   13cfc:	 %d blocks max: 
   13d0c:	%d  MB........ o
   13d1c:	verrun: (%d)....
   13d2c:	Fsamp requested:
   13d3c:	 %.3f kHz  got %
   13d4c:	.3f kHz.....Star
   13d5c:	t Acq...Start Lo
   13d6c:	gger....ESM Logg
   13d7c:	er and Monitor..
   13d8c:	Stop Acq....Stop
   13d9c:	 Logger.

00013da4 <TwoWire::i2c0_hardware>:
   13da4:	4..@@.....".0...
   13db4:	....!./.........

00013dc4 <TwoWire::i2c1_hardware>:
   13dc4:	4..@....&:......
   13dd4:	..%;............

00013de4 <TwoWire::i2c2_hardware>:
   13de4:	(..@@...........
   13df4:	............J...

00013e04 <vtable for TwoWire>:
	...
   13e0c:	................
   13e1c:	i...u.......EXFA
   13e2c:	T...

00013e30 <vtable for SdSpiCard>:
	...
   13e38:	1n..5n..ir...t..
   13e48:	.z...q...s...v..
   13e58:	.|..%n..)n..En..
   13e68:	)x...y...p......
   13e78:	-n..5o..%q...n..

00013e88 <vtable for SdioCard>:
	...
   13e90:	.~...~..a.......
   13ea0:	........q.......
   13eb0:	....m~..y~......
   13ec0:	.~...~...~..}...
   13ed0:	.~.......~......
   13ee0:	 IRQSTAT ...

00013eec <digital_pin_to_info_PGM>:
   13eec:	@..C@..@D..CD..@
   13efc:	...C...@0..C0..@
   13f0c:	4..C4..@...C...@
   13f1c:	...C...@...C...@
   13f2c:	...C...@...C...@
   13f3c:	...C...@...C...@
   13f4c:	...C...@...C...@
   13f5c:	...C...@...C...@
   13f6c:	...C...@...C...@
   13f7c:	...C...@...C...@
   13f8c:	...C...@...C...@
   13f9c:	...C...@...C...@
   13fac:	h .Ch..@...C...@
   13fbc:	8..C8..@<..C<..@
   13fcc:	@..C@..@H..CH..@
   13fdc:	L..CL..@(..C(..@
   13fec:	,..C,..@` .C`..@
   13ffc:	d .Cd..@ ..C ..@
   1400c:	$..C$..@(..C(..@
   1401c:	,..C,..@D..CD..@
   1402c:	p..Cp..@t..Ct..@
   1403c:	h..Ch..@P..CP..@
   1404c:	X..CX..@\..C\..@
   1405c:	T..CT..@ ..C ..@
   1406c:	$..C$..@...C...@
   1407c:	...C...@8..C8..@
   1408c:	4..C4..@0..C0..@
   1409c:	<..C<..@,..C,..@
   140ac:	( .C(..@, .C,..@
   140bc:	. .C...@. .C...@
   140cc:	. .C...@. .C...@
   140dc:	. .C...@. .C...@

000140ec <vtable for usb_serial_class>:
	...
   140f4:	-...%...!.......
   14104:	................
   14114:	....

00014118 <usb_endpoint_config_table>:
   14118:	....

0001411c <usb_descriptor_list>:
   1411c:	................
   1412c:	....C.......4...
   1413c:	................
   1414c:	................
   1415c:	8...............
   1416c:	....

00014170 <_global_impure_ptr>:
   14170:	P...C...POSIX...

00014180 <fpi.6173>:
   14180:	5...............
   14190:	....nf..inity...
   141a0:	an..

000141a4 <fpinan.6209>:
   141a4:	4...............
   141b4:	....

000141b8 <tinytens>:
   141b8:	.......<3...#.I9
   141c8:	=..D...2......[%
   141d8:	Co.d(.h.

000141e0 <zeroes.7258>:
   141e0:	0000000000000000
   141f0:	INF.inf.NAN.nan.
   14200:	0123456789ABCDEF
   14210:	....0123456789ab
   14220:	cdef....(null)..
   14230:	0...

00014234 <blanks.7257>:
   14234:	                

00014244 <basefix.7328>:
   14244:	................
   14254:	................
   14264:	....e%ld....

00014270 <_ctype_>:
   14270:	.         ((((( 
   14280:	                
   14290:	 ...............
   142a0:	................
   142b0:	..AAAAAA........
   142c0:	................
   142d0:	..BBBBBB........
   142e0:	................
   142f0:	 ...............
	...
   14370:	....Infinity....
   14380:	NaN.

00014384 <__hexdig>:
	...
   143b4:	................
   143c4:	................
	...
   143e4:	................
	...
   14484:	....

00014488 <__mprec_tens>:
   14488:	.......?......$@
   14498:	......Y@.....@.@
   144a8:	.......@.....j.@
   144b8:	.......A......cA
   144c8:	.......A....e..A
   144d8:	... _..B....vH7B
   144e8:	......mB..@..0.B
   144f8:	.......B..4&.k.C
   14508:	...7y.AC....W4vC
   14518:	..Ngm..C.=.`.X.C
   14528:	@..x...DP.....KD
   14538:	..M....D.J...-.D
   14548:	...yCx.D

00014550 <__mprec_bigtens>:
   14550:	...7y.AC.n.....F
   14560:	..?..O8M2.0.Hw.Z
   14570:	<.s..O.u

00014578 <p05.6087>:
   14578:	........}...

00014584 <_init>:
   14584:	push	{r3, r4, r5, r6, r7, lr}
   14586:	nop
   14588:	pop	{r3, r4, r5, r6, r7}
   1458a:	pop	{r3}
   1458c:	mov	lr, r3
   1458e:	bx	lr

00014590 <__init_array_start>:
   14590:	.word	0x00010b4d

00014594 <__frame_dummy_init_array_entry>:
   14594:	5....*..

Disassembly of section .fini:

0001459c <_fini>:
   1459c:	push	{r3, r4, r5, r6, r7, lr}
   1459e:	nop
