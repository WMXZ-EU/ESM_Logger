
bin\ESM_Logger.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
0001448c l    d  .fini	00000000 .fini
00014490 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0730 l    d  .data	00000000 .data
1fff12f8 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
000098fc l     F .text	0000000c startup_default_early_hook
00009908 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff12f8 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff12fc l       .bss	00000000 object.8610
00014484 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 I2S.c
1fff1318 l     O .bss	0000000c m_i2s_rxContext
00000000 l    df *ABS*	00000000 dma.c
1fff1328 l     O .bss	00000002 dma_channel_allocated_mask
1fff132c l     O .bss	00000200 DMAS
00000000 l    df *ABS*	00000000 hibernate.c
00000d84 l     F .text	0000001c llwuISR
00000000 l    df *ABS*	00000000 myAPP.cpp
000019c8 l     F .text	000001a0 printAll()
00002a38 l     F .text	000000a8 _GLOBAL__sub_I_parameters
1fff247c l     O .bss	00000004 blink(unsigned long)::to
1fff2482 l     O .bss	00000002 i2sInProcessing::is_I2S
20020154 l     O .bss	00000002 uSD_IF::save(int)::isLogging
00000000 l    df *ABS*	00000000 ICS43432.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
00002ba4 l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 WireKinetis.cpp
2002035c l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00004f04 l     F .text	000000a0 FatFile::sync() [clone .part.39]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00007d6c l     F .text	00000030 m_sdhc_isr()
00007d9c l     F .text	0000000c isBusyDMA()
00007ec4 l     F .text	000000c8 cardCommand(unsigned long, unsigned long)
00007f8c l     F .text	0000002c isBusyCMD13()
00007fd8 l     F .text	00000120 cardCMD6(unsigned long, unsigned char*)
000081f0 l     F .text	00000150 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00008638 l     F .text	00000100 transferStop()
20020368 l     O .bss	00000010 m_cid
20020378 l     O .bss	00000001 m_version2
20020379 l     O .bss	00000001 m_highCapacity
2002037c l     O .bss	00000004 m_ocr
20020380 l     O .bss	00000004 m_errorLine
20020384 l     O .bss	00000004 m_irqstat
20020388 l     O .bss	00000004 m_rca
1fff088c l     O .data	00000001 m_errorCode
2002038c l     O .bss	00000001 m_initDone
20020390 l     O .bss	00000010 m_csd
200203a0 l     O .bss	00000001 m_dmaBusy
200203a4 l     O .bss	00000004 m_busyFcn
200203a8 l     O .bss	00000004 m_sdClkKhz
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
200203ad l     O .bss	00000001 tx_noautoflush
200203b0 l     O .bss	00000004 tx_packet
200203b4 l     O .bss	00000001 transmit_previous_timeout
200203b8 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 pins_teensy.c
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0894 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
200203c4 l     O .bss	00000004 ep0_tx_ptr
200203c8 l     O .bss	00000010 rx_last
200203d8 l     O .bss	00000002 ep0_tx_len
200203dc l     O .bss	00000040 ep0_rx0_buf
2002041c l     O .bss	00000010 rx_first
2002042c l     O .bss	00000001 ep0_tx_data_toggle
20020430 l     O .bss	00000040 ep0_rx1_buf
20020470 l     O .bss	00000010 tx_first
1fff0000 l     O .usbdescriptortable	000000a0 table
20020480 l     O .bss	00000010 tx_last
20020490 l     O .bss	00000008 setup
20020498 l     O .bss	00000001 ep0_tx_bdt_bank
2002049c l     O .bss	00000008 reply_buffer
200204a8 l     O .bss	00000004 tx_state
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 analog.c
200204cc l     O .bss	00000001 calibrating
1fff08a8 l     O .data	00000001 analog_config_bits
200204cd l     O .bss	00000001 analog_reference_internal
1fff08a9 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 usb_desc.c
1fff08ac l     O .data	00000012 device_descriptor
1fff08d8 l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_atexit.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0000c450 l     F .text	00000018 __get_current_locale
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtod.c
0000d33c l     F .text	00000038 sulp
0001406c l     O .text	00000014 fpi.6173
00014090 l     O .text	00000014 fpinan.6209
000140a8 l     O .text	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000e270 l     F .text	00000136 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
000140d0 l     O .text	00000010 zeroes.7258
00014124 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfscanf.c
00014134 l     O .text	00000022 basefix.7328
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00010a8c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00010aac l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00011ca0 l     F .text	000000a8 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mprec.c
00014468 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strtoll.c
00012ea8 l     F .text	000001ac _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
00013078 l     F .text	00000168 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
00013204 l     F .text	000001ec _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfscanf.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
1fff0950 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/walter/documents/arduino-1.8.8/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/walter/documents/arduino-1.8.8/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff12f8 l       .bss	00000000 __bss_start__
20020544 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00000fbc  w    F .text	0000001c c_mFS::~c_mFS()
000098f4  w    F .text	00000006 adc0_isr
0000bc3c g     F .text	0000002c .hidden __aeabi_dcmpun
000095b0 g     F .text	0000001c usb_serial_available
00012dc8 g     F .text	0000005e __any_on
0000bc00 g     F .text	00000012 .hidden __aeabi_dcmple
00009088 g     F .text	00000124 SdioCard::writeStart(unsigned long, unsigned long)
0000bb3c g     F .text	0000007a .hidden __cmpdf2
00000cd8 g     F .text	0000000c DMA_enable
00008340 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
00001724 g     F .text	00000002 yield
00005738 g     F .text	00000220 FatFile::write(void const*, unsigned int)
0000bb3c g     F .text	0000007a .hidden __eqdf2
00006d6c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
1fff08c0 g     O .data	00000018 usb_string_manufacturer_name_default
000056c0 g     F .text	00000076 FatFile::truncate()
1fff0820 g     O .data	0000006c Wire1
20020504 g     O .bss	00000004 m_i2s_tx_buffer
0000b6ac g     F .text	0000005a .hidden __floatdidf
000098ac  w    F .text	00000048 hard_fault_isr
000098f4  w    F .text	00000006 dma_ch6_isr
20020364 g     O .bss	00000004 FsDateTime::callback
0000af4c g     F .text	00000020 Print::println()
000098f4  w    F .text	00000006 uart0_lon_isr
00003684 g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
00009e74 g     F .text	000000c8 usb_rx_memory
00006d60  w    F .text	00000004 SdSpiCard::errorCode() const
000098f4  w    F .text	00000006 dma_ch8_isr
00001b68 g     F .text	0000030c doMenu()
0000cc28 g     F .text	00000002 __malloc_unlock
20020360 g     O .bss	00000004 FsVolume::m_cwv
00009398 g     F .text	00000016 SdSpiAltDriver::send(unsigned char)
00005164 g     F .text	00000106 FatFile::open(FatFile*, char const*, unsigned char)
0000b18c g     F .text	000000e0 analog_init
00009f3c g     F .text	00000084 usb_tx
0000e250 g     F .text	00000020 _strtod_r
000098f4  w    F .text	00000006 portcd_isr
0001093c g     F .text	0000004a _vdprintf_r
20020508 g     O .bss	00000004 m_i2s_rx_nbyte
000135d4 g     F .text	00000082 _sfread_r
0000cac0 g     F .text	000000c6 memmove
0000ac2c g     F .text	0000020c MillisTimer::runFromTimer()
1fff174c g     O .bss	00000800 i2s_rx_buffer
0000c48c g     F .text	00000014 __locale_ctype_ptr
00001728 g     F .text	00000144 check_hibernate(parameters_s*, int)
00012540 g     F .text	0000004c _Balloc
000098f4  w    F .text	00000006 can1_rx_warn_isr
00014498 g       .ARM.exidx	00000000 __exidx_end
000098f4  w    F .text	00000006 dma_error_isr
000061a0 g     F .text	000002b8 FatPartition::freeChain(unsigned long)
00006f3c g     F .text	000000a8 SdSpiCard::cardCommand(unsigned char, unsigned long)
00002e50 g     F .text	00000138 i2c0_isr
00003220 g     F .text	000000a2 FsFile::open(FsVolume*, char const*, unsigned char)
00000ff0  w    F .text	00000014 FsFile::flush()
0000ae70 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000bb2c g     F .text	0000008a .hidden __gtdf2
1fff152c g     O .bss	00000002 FS_started
0000c3f4 g     F .text	0000000c __errno
00000cf0 g     F .text	00000010 DMA_haltAll
000098f4  w    F .text	00000006 portd_isr
00003b48 g     F .text	00000100 ExFatFile::open(ExFatFile*, char const*, unsigned char)
000098f4  w    F .text	00000006 enet_error_isr
00002b60 g     F .text	00000012 c_ICS43432::start()
00013cd0 g     O .text	00000020 TwoWire::i2c2_hardware
200204ac g     O .bss	00000004 EventResponder::firstInterrupt
00012424 g     F .text	00000004 __localeconv_l
0000526c g     F .text	0000000e FatFile::open(FatVolume*, char const*, unsigned char)
00006d70  w    F .text	0000000e SdSpiCard::~SdSpiCard()
000098f4  w    F .text	00000006 tpm1_isr
000045f4 g     F .text	000000a8 ExFatPartition::rootLength()
00001144  w    F .text	00000024 Print::println(__FlashStringHelper const*)
00000ac8 g     F .text	00000010 i2s_stopInput
2002015c g     O .bss	00000200 data1
00006d64  w    F .text	00000004 SdSpiCard::errorData() const
0000ae60  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00013dd8 g     O .text	00000200 digital_pin_to_info_PGM
00005e94 g     F .text	0000030c FatPartition::allocContiguous(unsigned long, unsigned long*)
20020540 g     O .bss	00000004 errno
00006fe4 g     F .text	0000007c SdSpiCard::readOCR(unsigned long*)
000042bc g     F .text	0000009c ExFatPartition::fatGet(unsigned long, unsigned long*)
0000d0d4 g     F .text	00000004 __seofread
00014498 g       .ARM.exidx	00000000 _etext
00001f34 g     F .text	000000cc readConfig(void*)
1fff12f8 g       .bss	00000000 _sbss
0000bbc8 g     F .text	00000010 .hidden __aeabi_cdcmple
00007db4 g     F .text	0000000c SdioCard::errorData() const
00009314 g     F .text	00000048 SdSpiAltDriver::deactivate()
0000bda4 g     F .text	00000160 .hidden __aeabi_fadd
000091ac g     F .text	000000d8 SdioCard::writeSector(unsigned long, unsigned char const*)
0000bda0 g     F .text	00000164 .hidden __subsf3
000098f4  w    F .text	00000006 porte_isr
0000935c g     F .text	0000001a SdSpiAltDriver::receive()
00002650 g     F .text	000003e8 loop
000098f4  w    F .text	00000006 portb_isr
000098f4  w    F .text	00000006 spi1_isr
000098f4  w    F .text	00000006 uart3_status_isr
000033c4 g     F .text	000000bc ExFatFile::parsePathName(char const*, ExName_t*, char const**)
000098f4  w    F .text	00000006 mcm_isr
00008cc0 g     F .text	000001b4 SdioCard::readData(unsigned char*)
000137b4  w    O .text	00000014 vtable for Logger<long, 300, 128, 64>
0000048c g     F .text	000002a8 i2s_speedConfig
00001524 g     F .text	0000013c tm2seconds(tm*)
000076b8 g     F .text	000000ac SdSpiCard::readData(unsigned char*, unsigned int)
200204b0 g     O .bss	00000004 EventResponder::lastInterrupt
0000c084 g     F .text	00000024 .hidden __aeabi_f2lz
000098f4  w    F .text	00000006 uart1_status_isr
00009404 g     F .text	00000134 memcpy
000098f4  w    F .text	00000006 randnum_isr
00012288 g     F .text	00000180 __hexnan
0000bbb8 g     F .text	00000020 .hidden __aeabi_cdrcmple
00000ccc g     F .text	0000000c DMA_interruptAtHalf
000043fc g     F .text	000001f6 ExFatPartition::freeChain(unsigned long)
00005458 g     F .text	0000002a FatFile::peek()
0000e3d0 g     F .text	000016e4 _svfprintf_r
0000b63c g     F .text	00000022 .hidden __floatsidf
00001168 g     F .text	00000338 seconds2tm(unsigned long)
200203c0 g     O .bss	00000004 systick_millis_count
0000bb34 g     F .text	00000082 .hidden __ltdf2
000098ac  w    F .text	00000048 bus_fault_isr
000098f4  w    F .text	00000006 watchdog_isr
0000c054 g     F .text	00000000 .hidden __aeabi_uldivmod
00002f88 g     F .text	00000138 i2c1_isr
0000047c g     F .text	00000010 i2s_init
200204a4 g     O .bss	00000001 usb_configuration
000098f4  w    F .text	00000006 dma_ch11_isr
00000f00  w    F .text	00000006 SdCardInterface::status()
0000873c g     F .text	00000014 SdioCard::syncDevice()
00008450 g     F .text	000001a4 SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
00002ae0 g     F .text	0000007e c_ICS43432::init(long, long*, unsigned long, unsigned short)
0000046c g     F .text	00000010 i2s_stopClock
00005484 g     F .text	00000040 FatFile::readDirCache(bool)
00012d20 g     F .text	00000060 __ratio
000030c0 g     F .text	00000138 i2c2_isr
1fff08c0  w    O .data	00000018 usb_string_manufacturer_name
20020538 g     O .bss	00000008 usb_rx_byte_count_data
2002050c g     O .bss	00000004 m_i2s_dual
000098f4  w    F .text	00000006 pit1_isr
0000c4a0 g     F .text	00000010 malloc
00000948 g     F .text	0000004c m_i2s_rx_isr
000098f4  w    F .text	00000006 dma_ch4_isr
00013cb0 g     O .text	00000020 TwoWire::i2c1_hardware
0000b028 g     F .text	00000084 software_isr
00013790  w    O .text	00000024 vtable for FsFile
00012408 g     F .text	0000001c iswspace
000098f4  w    F .text	00000006 dma_ch7_isr
00002db0  w    F .text	0000001e TwoWire::read()
0000bf0c g     F .text	0000001c .hidden __aeabi_i2f
00002b88  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00014378 g     O .text	000000c8 __mprec_tens
0000aa74 g     F .text	000000f4 usb_init
00000d78 g     F .text	0000000c DMA_clearInterrupt
00006d68  w    F .text	00000004 SdSpiCard::type() const
1fff2480 g     O .bss	00000001 ICS43432
0000bcb8 g     F .text	00000040 .hidden __fixunsdfsi
000098f4  w    F .text	00000006 lptmr_isr
200204d8 g     O .bss	00000004 __malloc_top_pad
00009948 g     F .text	00000024 rtc_set
00013598 g     F .text	0000003a __ssrefill_r
00007544 g     F .text	00000174 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00004b60 g     F .text	0000011e ExFatFile::truncate()
1fff0730 g     O .data	00000000 .hidden __dso_handle
0000b61c g     F .text	0000001e .hidden __aeabi_ui2d
00012428 g     F .text	0000001c _localeconv_r
000133f0 g     F .text	00000024 _strtoull_r
00009938 g     F .text	00000010 attachInterruptVector
00012754 g     F .text	00000012 __i2b
1fff0730 g       .data	00000000 _sdata
00013c90 g     O .text	00000020 TwoWire::i2c0_hardware
000059e8 g     F .text	00000054 FatCache::sync()
0000c0f4 g     F .text	000002e2 .hidden __udivmoddi4
0000b398 g     F .text	00000000 .hidden __aeabi_drsub
0000d00c g     F .text	00000024 _sbrk_r
000010c8  w    F .text	00000060 Logger<long, 300, 128, 64>::write(void*)
00007e38 g     F .text	00000020 SdioCard::type() const
00000ce4 g     F .text	0000000c DMA_disable
000001d0 g     F .text	000001f0 ResetHandler
00009538 g     F .text	00000048 usb_serial_getchar
000098f4  w    F .text	00000006 can1_bus_off_isr
000098f4  w    F .text	00000006 ftm2_isr
2002052c g     O .bss	00000008 usb_cdc_line_coding
00009be0 g     F .text	00000048 digitalWrite
200204b8 g     O .bss	00000004 EventResponder::lastYield
000098f4  w    F .text	00000006 uart5_status_isr
000098f4  w    F .text	00000006 lpuart0_status_isr
00003480 g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
00014004 g     O .text	00000004 usb_endpoint_config_table
000098f4  w    F .text	00000006 dma_ch9_isr
00001128  w    F .text	0000001c Print::write(char const*)
000098f4  w    F .text	00000006 pit2_isr
0000bbec g     F .text	00000012 .hidden __aeabi_dcmplt
200204d4 g     O .bss	00000004 __malloc_max_sbrked_mem
00009c28 g     F .text	00000078 pinMode
00006de0 g     F .text	00000090 SdSpiCard::writeStop()
00009dc0 g     F .text	0000004c usb_free
000098f4  w    F .text	00000006 i2c3_isr
0000b660 g     F .text	0000003a .hidden __extendsfdf2
0000fab4 g     F .text	00000e88 __ssvfscanf_r
0000b95c g     F .text	000001d0 .hidden __aeabi_ddiv
0000b3a4 g     F .text	00000276 .hidden __adddf3
1fff0748 g     O .data	0000006c Wire2
00006e70 g     F .text	000000cc SdSpiCard::writeData(unsigned char const*)
00012b94 g     F .text	000000d0 __b2d
00001f0c  w    F .text	00000028 SdBase<FsVolume>::errorHalt(char const*)
00014490 g       .ARM.exidx	00000000 __exidx_start
1fff1314 g     O .bss	00000004 DMA_RX
0000b708 g     F .text	00000254 .hidden __aeabi_dmul
00007060 g     F .text	00000064 SdSpiCard::writeStart(unsigned long)
000098f4  w    F .text	00000006 pit0_isr
200204bc g     O .bss	00000004 EventResponder::firstYield
0001405c g     O .text	00000004 _global_impure_ptr
000098f4  w    F .text	00000006 can1_error_isr
0000cc2c g     F .text	000003de _realloc_r
0000c400 g     F .text	00000050 __libc_init_array
20020544 g       .bss	00000000 __bss_end
00002da4  w    F .text	0000000c TwoWire::available()
000098f4  w    F .text	00000006 can0_wakeup_isr
00003c48 g     F .text	00000010 ExFatFile::open(ExFatVolume*, char const*, int)
00007dc0 g     F .text	0000001c SdioCard::readCID(CID*)
00014274 g     O .text	00000100 __hexdig
00004a24 g     F .text	0000013c ExFatFile::addDirCluster()
000098f4  w    F .text	00000006 flash_cmd_isr
1fff1f50 g     O .bss	00000508 mFS
00014440 g     O .text	00000028 __mprec_bigtens
00012620 g     F .text	00000098 __s2b
0000ae48  w    F .text	00000004 usb_serial_class::clear()
0000b61c g     F .text	0000001e .hidden __floatunsidf
000098f4  w    F .text	00000006 uart2_status_isr
0000990c g     F .text	0000002c _sbrk
000129e8 g     F .text	00000042 __mcmp
200204c0 g     O .bss	00000004 MillisTimer::listWaiting
1fff0890 g     O .data	00000004 __brkval
200203bc g     O .bss	00000001 usb_cdc_line_rtsdtr
00000d10 g     F .text	00000006 DMA_destinationAddress
00009864 g     F .text	00000048 usb_serial_flush_callback
00014474 g     F .text	00000000 _init
00001004  w    F .text	00000058 FsFile::available()
000098f4  w    F .text	00000006 svcall_isr
20020510 g     O .bss	00000004 m_i2s_tx_nbyte
20020514 g     O .bss	00000004 m_i2s_nbits
000098f4  w    F .text	00000006 dma_ch15_isr
00000da0 g     F .text	0000015c hibernate
0000bcf8 g     F .text	0000009e .hidden __aeabi_d2f
00002000 g     F .text	000000d8 storeConfig(void*)
1fff1744 g     O .bss	00000006 mac
0000bda0 g     F .text	00000164 .hidden __aeabi_fsub
00013cf0 g     O .text	00000024 vtable for TwoWire
000098f4  w    F .text	00000006 uart1_error_isr
00011a0c g     F .text	00000028 __libc_fini_array
0000d378 g     F .text	00000ed8 _strtod_l
00012258 g     F .text	00000030 __match
000098f4  w    F .text	00000006 usbhs_phy_isr
20020544 g       .bss	00000000 _ebss
1fff1324 g     O .bss	00000004 rxCount
00008e74 g     F .text	00000128 SdioCard::readStart(unsigned long, unsigned long)
000083c8 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005114 g     F .text	00000050 FatFile::preAllocate(unsigned long)
00005958 g     F .text	00000090 FatCache::read(unsigned long, unsigned char)
000126b8 g     F .text	00000040 __hi0bits
0000bc68 g     F .text	0000004e .hidden __fixdfsi
000098f4 g     F .text	00000006 unused_isr
000098f4  w    F .text	00000006 spi0_isr
0000bf38 g     F .text	0000007c .hidden __floatdisf
000098f4  w    F .text	00000006 dma_ch3_isr
1fff245c g     O .bss	00000020 text
0000b188 g     F .text	00000004 operator delete(void*, unsigned int)
000098f4  w    F .text	00000006 flash_error_isr
0000b3a4 g     F .text	00000276 .hidden __aeabi_dadd
0000bb34 g     F .text	00000082 .hidden __ledf2
000098f4  w    F .text	00000006 uart5_error_isr
0000c0a8 g     F .text	0000004c .hidden __aeabi_f2ulz
000098f4  w    F .text	00000006 rtc_seconds_isr
000098f4  w    F .text	00000006 pdb_isr
00012898 g     F .text	000000a0 __pow5mult
0000b69c g     F .text	0000006a .hidden __aeabi_ul2d
000098ac  w    F .text	00000048 usage_fault_isr
000098f4  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00005ce8 g     F .text	000001aa FatPartition::allocateCluster(unsigned long, unsigned long*)
000098f4  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
20020534 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000ae38 g     F .text	00000010 systick_isr
000098f4  w    F .text	00000006 rtc_alarm_isr
00003d14 g     F .text	00000230 ExFatPartition::init(SdCardInterface*, unsigned char)
00007428 g     F .text	0000011c SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
200204c4 g     O .bss	00000004 AudioStream::first_update
000098f4  w    F .text	00000006 dma_ch2_isr
1fff0898 g     O .data	00000010 Serial
000098f4  w    F .text	00000006 ftm1_isr
0000ae68  w    F .text	00000006 usb_serial_class::write(unsigned char)
000098fc  w    F .text	0000000c startup_early_hook
000098f4  w    F .text	00000006 dma_ch13_isr
00004730 g     F .text	0000008c ExFatFile::addCluster()
000098f4  w    F .text	00000006 uart2_error_isr
00009580 g     F .text	00000030 usb_serial_peekchar
0000bc28 g     F .text	00000012 .hidden __aeabi_dcmpgt
00000bec g     F .text	00000030 DMA_source
000124a0 g     F .text	00000000 memchr
00005b98 g     F .text	0000014e FatPartition::fatPut(unsigned long, unsigned long)
1fff0938 g     O .data	00000016 usb_string_serial_number_default
000098ac g     F .text	00000048 fault_isr
00011ad0 g     F .text	000001d0 _free_r
00008738 g     F .text	00000004 SdioCard::readStop()
00003c64 g     F .text	00000082 FsCache::get(unsigned long, unsigned char)
0000c468 g     F .text	0000001c __locale_mb_cur_max
0000bc14 g     F .text	00000012 .hidden __aeabi_dcmpge
000098f4  w    F .text	00000006 usb_charge_isr
0000ae58  w    F .text	00000004 usb_serial_class::flush()
00013514 g     F .text	00000082 _sungetc_r
000098f4  w    F .text	00000006 cmt_isr
0000b3a0 g     F .text	0000027a .hidden __aeabi_dsub
000098f4  w    F .text	00000006 usbhs_isr
1fff12f4 g     O .data	00000004 __malloc_sbrk_base
0000ae50  w    F .text	00000004 usb_serial_class::read()
000098f4  w    F .text	00000006 ftm3_isr
00013054 g     F .text	00000024 _strtoll_r
000098f4  w    F .text	00000006 tsi0_isr
00001090  w    F .text	00000038 FsFile::read()
0000b69c g     F .text	0000006a .hidden __floatundidf
00012938 g     F .text	000000ae __lshift
000098f4  w    F .text	00000006 spi2_isr
000046d8 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
0000bf0c g     F .text	0000001c .hidden __floatsisf
00013414 g     F .text	00000100 __ssprint_r
000136d0 g     F .text	0000005e _vasnprintf_r
2002042d g     O .bss	00000001 usb_reboot_timer
000109e8 g     F .text	000000a4 __register_exitproc
0000d29c g     F .text	000000a0 strncmp
000095cc g     F .text	00000038 usb_serial_flush_input
1fff2484 g     O .bss	0002dcd0 logger
00012768 g     F .text	00000130 __multiply
000097ac g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
1fff1f4c g     O .bss	00000002 parMods
200204dc g     O .bss	00000028 __malloc_current_mallinfo
00012c64 g     F .text	000000ba __d2b
00000fbc  w    F .text	0000001c c_mFS::~c_mFS()
000098f4  w    F .text	00000006 can0_bus_off_isr
00002b84 g     F .text	00000004 c_ICS43432::exit()
00007e28  w    F .text	0000000e SdioCard::~SdioCard()
20020499 g     O .bss	00000001 usb_rx_memory_needed
00007e08 g     F .text	0000001c SdioCard::writeStart(unsigned long)
000131e0 g     F .text	00000024 _strtoul_r
00000d00 g     F .text	00000010 DMA_startAll
00009fc0 g     F .text	00000ab2 usb_isr
0000c3e8 g     F .text	0000000c __cxa_atexit
000034a8 g     F .text	000001aa ExFatFile::read(void*, unsigned int)
00006900 g     F .text	00000460 FatFile::open(FatFile*, fname_t*, unsigned char)
0000b63c g     F .text	00000022 .hidden __aeabi_i2d
0000c084 g     F .text	00000024 .hidden __fixsfdi
00003ce8 g     F .text	0000002a FsCache::sync()
0000b180 g     F .text	00000006 Stream::parseInt()
0000ca5c g     F .text	00000062 memcmp
00013fd8  w    O .text	00000028 vtable for usb_serial_class
000098f4  w    F .text	00000006 uart3_error_isr
000032c4 g     F .text	000000e8 FsVolume::begin(SdCardInterface*)
0000bf28 g     F .text	0000008c .hidden __floatundisf
0000d07c g     F .text	00000058 sscanf
200204b4 g     O .bss	00000004 MillisTimer::listActive
0000c3d8  w    F .text	00000002 .hidden __aeabi_ldiv0
000098f4  w    F .text	00000006 porta_isr
1fff173c g     O .bss	00000004 haveAcq
0000b95c g     F .text	000001d0 .hidden __divdf3
00000d34 g     F .text	00000044 DMA_attachInterrupt
1fff1734 g     O .bss	00000004 i2sProcCount
00012d80 g     F .text	00000046 __copybits
1fff1740 g     O .bss	00000004 i2sWriteErrorCount
1fff03d0 g     O .usbbuffers	00000360 usb_buffer_memory
00007a1c g     F .text	000001dc SdSpiCard::sectorCount()
000098f4  w    F .text	00000006 low_voltage_isr
1fff0ee8 g     O .data	00000408 __malloc_av_
0000bf04 g     F .text	00000024 .hidden __aeabi_ui2f
000098f4  w    F .text	00000006 can0_error_isr
1fff0734 g     O .data	00000012 parameters
0000996c g     F .text	00000274 _init_Teensyduino_internal_
0000b708 g     F .text	00000254 .hidden __muldf3
0000980c g     F .text	00000058 usb_serial_flush_output
000098f4  w    F .text	00000006 dma_ch12_isr
0000cc24 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
000065b4 g     F .text	00000244 FatFile::parsePathName(char const*, fname_t*, char const**)
000098f4  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00013730 g     F .text	0000005e _calloc_r
000098f4  w    F .text	00000006 pit3_isr
000098f4  w    F .text	00000006 enet_rx_isr
00004924 g     F .text	0000005e ExFatFile::sync()
000085f4 g     F .text	00000044 SdioCard::isBusy()
0000186c g     F .text	0000015c encode_mac(char*)
000098f4  w    F .text	00000006 portc_isr
0000cb88 g     F .text	0000009a memset
0000b018 g     F .text	00000010 main
00000f18  w    F .text	00000096 Logger<long, 300, 128, 64>::drain()
00005558 g     F .text	000000b0 FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)
00000fd8  w    F .text	00000018 FsFile::peek()
200204d0 g     O .bss	00000004 __malloc_max_total_mem
00003f44 g     F .text	0000010a ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000bf38 g     F .text	0000007c .hidden __aeabi_l2f
00004c80 g     F .text	00000284 ExFatFile::write(void const*, unsigned int)
000098ac  w    F .text	00000048 memmanage_fault_isr
0000b26c g     F .text	000000e0 usb_init_serialnumber
00003784 g     F .text	000003c4 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)
0000e3a8 g     F .text	00000024 _strtol_r
0000bcf8 g     F .text	0000009e .hidden __truncdfsf2
0001448c g       .text	00000000 __init_array_end
00010bd8 g     F .text	00000e34 _dtoa_r
0000c4c0 g     F .text	00000570 _malloc_r
000098f4  w    F .text	00000006 debugmonitor_isr
000109a0 g     F .text	0000001a __ascii_wctomb
0000b6ac g     F .text	0000005a .hidden __aeabi_l2d
00013658 g     F .text	00000078 __submore
00000ae8 g     F .text	00000024 i2s_enableInputDMA
0000ab68 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00002d9c g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
5dbfd1e1 g       *ABS*	00000000 __rtc_localtime
00009ca0 g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
0000bf28 g     F .text	0000008c .hidden __aeabi_ul2f
000098f4  w    F .text	00000006 cmp1_isr
0000c0a8 g     F .text	0000004c .hidden __fixunssfdi
000098f4  w    F .text	00000006 ftm0_isr
000047bc g     F .text	00000168 ExFatFile::syncDir()
1fff2458 g     O .bss	00000004 loopStatus
00011a34 g     F .text	0000009c _malloc_trim_r
1fff0934 g     O .data	00000004 string0
00009604 g     F .text	000001a8 usb_serial_write
00009908  w    F .text	00000002 startup_late_hook
00009284 g     F .text	00000090 SdSpiAltDriver::activate()
0000ae54  w    F .text	00000004 usb_serial_class::available()
00002b74 g     F .text	0000000e c_ICS43432::stop()
00005608 g     F .text	000000b8 FatFile::sync()
1fff091c  w    O .data	00000016 usb_string_product_name
00000ad8 g     F .text	00000010 i2s_startInput
00009ce4 g     F .text	0000009c delay
20020518 g     O .bss	00000004 m_i2s_rx_buffer
0000bb3c g     F .text	0000007a .hidden __nedf2
000098f4  w    F .text	00000006 tpm0_isr
0001448c g     F .fini	00000000 _fini
00002e28 g     F .text	00000026 TwoWire::write(unsigned char)
0000af7c g     F .text	0000001c Print::printf(char const*, ...)
0000d030 g     F .text	0000004c sprintf
000098f4  w    F .text	00000006 i2s0_rx_isr
000098f4  w    F .text	00000006 uart4_error_isr
0000ae9c g     F .text	000000b0 Print::print(long)
0000505c g     F .text	000000b8 FatFile::close()
00000b0c g     F .text	00000030 DMA_init
00005a3c g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
00010aa0 g     F .text	0000000c atexit
00007e24  w    F .text	00000002 SdioCard::~SdioCard()
000109bc g     F .text	0000002c _write_r
000080f8 g     F .text	000000f8 SdioCard::erase(unsigned long, unsigned long)
0000bd98 g     F .text	0000016c .hidden __aeabi_frsub
000098f4  w    F .text	00000006 can0_message_isr
00012e9c g     F .text	0000000c nanf
1fff0d78 g     O .data	00000004 _impure_ptr
000098f4  w    F .text	00000006 can1_message_isr
00003654 g     F .text	0000002e ExFatFile::peek()
00009378 g     F .text	00000020 SdSpiAltDriver::receive(unsigned char*, unsigned int)
00012444 g     F .text	0000005c _mbrtowc_r
000098f4  w    F .text	00000006 nmi_isr
1fff07b4 g     O .data	0000006c Wire
00000cc0 g     F .text	0000000c DMA_interruptAtCompletion
000067f8 g     F .text	00000108 FatFile::lfnUniqueSfn(fname_t*)
0000105c  w    F .text	00000034 FsFile::write(unsigned char)
00001660 g     F .text	000000c4 i2sInProcessing
00007da8 g     F .text	0000000c SdioCard::errorCode() const
00014480 g       .text	00000000 __preinit_array_end
00006d6c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
000098f4  w    F .text	00000006 sdhc_isr
00004984 g     F .text	000000a0 ExFatFile::preAllocate(unsigned long long)
00004140 g     F .text	000000aa ExFatPartition::dirCache(DirPos_t*, unsigned char)
00007bf8 g     F .text	00000174 SdSpiCard::erase(unsigned long, unsigned long)
0000ca30 g     F .text	0000002a __ascii_mbtowc
1fff1730 g     O .bss	00000004 i2sBusyCount
1fff1738 g     O .bss	00000004 doHibernate
00006d80 g     F .text	00000060 SdSpiCard::isBusy()
00012b40 g     F .text	00000054 __ulp
00013d1c g     O .text	00000058 vtable for SdSpiCard
1fff1530 g     O .bss	00000200 header
000008e8 g     F .text	00000060 i2s_configurePorts
00007764  w    F .text	0000015c SdSpiCard::readCID(CID*)
00002dd0  w    F .text	00000016 TwoWire::peek()
00002de8  w    F .text	00000002 TwoWire::flush()
000020d8 g     F .text	00000578 setup
00014008 g     O .text	00000054 usb_descriptor_list
00009e0c g     F .text	0000003c usb_rx
00007fb8 g     F .text	00000020 SdioCard::status()
000098f4  w    F .text	00000006 dma_ch10_isr
00000f08 g     F .text	00000010 mySystick_isr()
00000c88 g     F .text	00000036 DMA_destinationBuffer_2ch
0000bcb8 g     F .text	00000040 .hidden __aeabi_d2uiz
000098f4  w    F .text	00000006 uart0_error_isr
00009d80 g     F .text	00000040 usb_malloc
000052bc g     F .text	0000019a FatFile::read(void*, unsigned int)
000098f4  w    F .text	00000006 i2s0_isr
0000527c g     F .text	0000003e FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
000033ac g     F .text	00000004 operator new(unsigned int, unsigned long*)
000078c0  w    F .text	0000015c SdSpiCard::readCSD(csd_t*)
000097c4 g     F .text	00000048 usb_serial_write_buffer_free
000098f4  w    F .text	00000006 enet_timer_isr
0000bbd8 g     F .text	00000012 .hidden __aeabi_dcmpeq
00000994 g     F .text	00000134 i2s_setupInput
00002dec g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
0000af6c  w    F .text	0000000e _write
1fff12f8 g       .data	00000000 _edata
00004358 g     F .text	000000a4 ExFatPartition::fatPut(unsigned long, unsigned long)
00007e24  w    F .text	00000002 SdioCard::~SdioCard()
000098f4  w    F .text	00000006 i2s0_tx_isr
000098f4  w    F .text	00000006 adc1_isr
000070c4 g     F .text	000000e0 SdSpiCard::syncDevice()
00000c1c g     F .text	00000038 DMA_source_2ch
00004fa4 g     F .text	000000b8 FatFile::addDirCluster()
0000ae5c  w    F .text	00000004 usb_serial_class::availableForWrite()
000098f4  w    F .text	00000006 cmp0_isr
00000c54 g     F .text	00000032 DMA_destinationBuffer
0000b34c g     F .text	0000004c ultoa
00001e74  w    F .text	00000098 SdBase<FsVolume>::errorHalt(Print*)
1fff12f0 g     O .data	00000004 __malloc_trim_threshold
0000ae4c  w    F .text	00000004 usb_serial_class::peek()
0000bf04 g     F .text	00000024 .hidden __floatunsisf
00012a2c g     F .text	00000114 __mdiff
00007df8 g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000bc68 g     F .text	0000004e .hidden __aeabi_d2iz
000041ec g     F .text	000000ce ExFatPartition::dirSeek(DirPos_t*, unsigned long)
200203ac g     O .bss	00000001 usb_cdc_transmit_flush_timer
200204ca g     O .bss	00000002 AudioStream::cpu_cycles_total
000098f4  w    F .text	00000006 pit_isr
00008738 g     F .text	00000004 SdioCard::writeStop()
000072c0  w    F .text	00000168 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00012e28 g     F .text	00000072 __sccl
000033b0 g     F .text	00000014 ExFatFile::close()
00014160 g     O .text	00000101 _ctype_
000098f4  w    F .text	00000006 dac0_isr
000071a4  w    F .text	0000011c SdSpiCard::readSector(unsigned long, unsigned char*)
00014480 g       .text	00000000 __init_array_start
0000c3d8  w    F .text	00000002 .hidden __aeabi_idiv0
000098f4  w    F .text	00000006 can1_tx_warn_isr
0000bc3c g     F .text	0000002c .hidden __unorddf2
000098f4  w    F .text	00000006 uart0_status_isr
000014a0 g     F .text	00000084 dateTime(unsigned short*, unsigned short*)
000098f4  w    F .text	00000006 mcg_isr
0000b0ac g     F .text	000000d4 Stream::parseInt(char)
00000400 g     O .text	00000010 flashconfigbytes
0000d1c0 g     F .text	000000dc strlen
0000c484 g     F .text	00000006 __locale_ctype_ptr_l
2002051c g     O .bss	00000004 m_i2s_isMaster
0000bbc8 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000bb2c g     F .text	0000008a .hidden __gedf2
000054c4 g     F .text	00000094 FatFile::seekSet(unsigned long)
00011d48 g     F .text	00000510 __gethex
1fff091c g     O .data	00000016 usb_string_product_name_default
00000b3c g     F .text	000000b0 DMA_allocate
00010988 g     F .text	00000018 vdprintf
000098f4  w    F .text	00000006 dma_ch1_isr
00007e58 g     F .text	0000006c SdioCard::sectorCount()
00009e48 g     F .text	0000002c usb_tx_packet_count
0000d0d8 g     F .text	000000ce strchr
00013d74 g     O .text	00000058 vtable for SdioCard
0000b660 g     F .text	0000003a .hidden __aeabi_f2d
000098f4  w    F .text	00000006 dma_ch5_isr
000098f4  w    F .text	00000006 can0_rx_warn_isr
20020520 g     O .bss	0000000c iscl
000098f4  w    F .text	00000006 can0_tx_warn_isr
20020158 g     O .bss	00000004 startTime
00000fb0  w    F .text	0000000c Logger<long, 300, 128, 64>::haveFinished()
000098f4  w    F .text	00000006 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
000031f8 g     F .text	00000028 FsFile::close()
200204c8 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
0000b3a0 g     F .text	0000027a .hidden __subdf3
00014480 g       .text	00000000 __preinit_array_start
00004050 g     F .text	000000ee ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00000734 g     F .text	000001b4 i2s_config
000126f8 g     F .text	0000005a __lo0bits
00006458 g     F .text	0000015a FatPartition::init(SdCardInterface*, unsigned char)
0000bfb4 g     F .text	00000000 .hidden __aeabi_ldivmod
0000c3dc g     F .text	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
000098f4  w    F .text	00000006 cmp2_isr
0000bda4 g     F .text	00000160 .hidden __addsf3
0000abe8 g     F .text	00000044 pendablesrvreq_isr
00000efc  w    F .text	00000004 Print::availableForWrite()
1fff0d7c g     O .data	0000016c __global_locale
000098f4  w    F .text	00000006 wakeup_isr
00008750 g     F .text	00000570 SdioCard::begin(SdioConfig)
00003c58 g     F .text	0000000c FsCache::invalidate()
00000d18 g     F .text	0000001a DMA_triggerAtHardwareEvent
000098f4  w    F .text	00000006 cmp3_isr
0000af98 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
000093b0 g     F .text	00000052 SdSpiAltDriver::send(unsigned char const*, unsigned int)
00005a48 g     F .text	00000150 FatPartition::fatGet(unsigned long, unsigned long*)
0000c4b0 g     F .text	00000010 free
000098f4  w    F .text	00000006 tpm2_isr
000125a0 g     F .text	00000080 __multadd
0001258c g     F .text	00000012 _Bfree
000098f4  w    F .text	00000006 dma_ch0_isr
1fff0938  w    O .data	00000016 usb_string_serial_number
000098f4  w    F .text	00000006 enet_tx_isr
0000469c g     F .text	0000003c exFatHashName(char const*, unsigned int, unsigned short)
00008f9c g     F .text	000000ec SdioCard::readSector(unsigned long, unsigned char*)
00007ddc g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
size_t fsPrintDateTime(print_t* pr, uint32_t dateTime) {
  return fsPrintDateTime(pr, dateTime >> 16, dateTime & 0XFFFF);
}
//------------------------------------------------------------------------------
size_t fsPrintDateTime(print_t* pr,
                       uint32_t dateTime, uint8_t s100, int8_t tz) {
       0:	... ............
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
  char sign;
  if (tz & 0X80) {
      10:	................
  str = fsFmtField(str, time & 63, 0);
  return fsFmtField(str, time >> 6, ':');
}
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time, uint8_t sec100) {
  str = fsFmtField(str, sec100%100, 0);
      20:	................
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      30:	............9...
  return fsFmtField(str, time >> 6, ':');
}
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time, uint8_t sec100) {
  str = fsFmtField(str, sec100%100, 0);
  str = fsFmtField(str, 2*(time & 31) + sec100/100, '.');
      40:	................
/** Date time callback. */
void (*FsDateTime::callback)(uint16_t* date, uint16_t* time) = nullptr;
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      50:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
      60:	................
  return fsFmtField(str, 1980 + date, '-');
}
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time) {
  time >>= 5;
  str = fsFmtField(str, time & 63, 0);
      70:	................
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
      80:	................
/** Date time callback. */
void (*FsDateTime::callback)(uint16_t* date, uint16_t* time) = nullptr;
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      90:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      a0:	Q..../..........
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      b0:	................
  if (n < 10) {
    *--str = '0';
      c0:	................
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      d0:	................
  if (n < 10) {
    *--str = '0';
      e0:	................
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      f0:	................
  }
  str = fsFmtTime(str, (uint16_t)dateTime, s100);
  *--str = ' ';
  str = fsFmtDate(str, (uint16_t)(dateTime >> 16));
  return pr->write(str, buf + sizeof(buf) - str);
}
     100:	................
char* fsFmtTimeZone(char* str, int8_t tz) {
  char sign;
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
     110:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
     120:	................
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
     130:	................
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
     140:	)...............
/** Date time callback. */
void (*FsDateTime::callback)(uint16_t* date, uint16_t* time) = nullptr;
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
     150:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
     160:	.........0......
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
     170:	................
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
     180:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
     190:	................
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	98fc <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	996c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	9948 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	9948 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	c400 <__libc_init_array>

	startup_late_hook();
     32c:	bl	9908 <startup_late_hook>
	main();
     330:	bl	b018 <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x1fff12f8
     360:	.word	0x00014494
     364:	.word	0x1fff0730
     368:	.word	0x1fff12f8
     36c:	.word	0x20020544
     370:	.word	0x1fff0200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x5dbfd1e1
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff12f8
     42c:	.word	0x00000000
     430:	.word	0x00014490

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff12fc
     460:	.word	0x00014490
     464:	.word	0x1fff12f8
     468:	.word	0x00000000

0000046c <i2s_stopClock>:
int m_i2s_isMaster;
int m_i2s_nbits;
int m_i2s_dual;

void i2s_initClock(void) {  SIM_SCGC6 |= SIM_SCGC6_I2S;}
void i2s_stopClock(void) {  SIM_SCGC6 &= ~SIM_SCGC6_I2S;}
     46c:	ldr	r2, [pc, #8]	; (478 <i2s_stopClock+0xc>)
     46e:	ldr	r3, [r2, #0]
     470:	bic.w	r3, r3, #32768	; 0x8000
     474:	str	r3, [r2, #0]
     476:	bx	lr
     478:	.word	0x4004803c

0000047c <i2s_init>:

int m_i2s_isMaster;
int m_i2s_nbits;
int m_i2s_dual;

void i2s_initClock(void) {  SIM_SCGC6 |= SIM_SCGC6_I2S;}
     47c:	ldr	r2, [pc, #8]	; (488 <i2s_init+0xc>)
     47e:	ldr	r3, [r2, #0]
     480:	orr.w	r3, r3, #32768	; 0x8000
     484:	str	r3, [r2, #0]
     486:	bx	lr
     488:	.word	0x4004803c

0000048c <i2s_speedConfig>:
					73, 79, 83, 89, 97, 101, 103, 107, 109, 113,
					127, 131, 137, 139, 149, 151, 157, 163, 167, 173,
					179, 181, 191, 193, 197, 199};

float i2s_speedConfig(int device, int nbits, int fs)
{
     48c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     490:	vpush	{d8-d9}
//	BCLK = MCLK/2/(iscl3+1)
//  LRCLK = BCLK/(2*nbits); // division by  is to have 32 bits within frame sync (BCLK)
//
	int64_t i1=1,i2=1,i3;
	//
	if((device==SGTL5000_DEV) || (device==PJRC_AUDIO_DEV) || (device==CS5361_DEV))
     494:	cmp	r0, #2
					73, 79, 83, 89, 97, 101, 103, 107, 109, 113,
					127, 131, 137, 139, 149, 151, 157, 163, 167, 173,
					179, 181, 191, 193, 197, 199};

float i2s_speedConfig(int device, int nbits, int fs)
{
     496:	sub	sp, #12
     498:	vmov	s16, r1
//	BCLK = MCLK/2/(iscl3+1)
//  LRCLK = BCLK/(2*nbits); // division by  is to have 32 bits within frame sync (BCLK)
//
	int64_t i1=1,i2=1,i3;
	//
	if((device==SGTL5000_DEV) || (device==PJRC_AUDIO_DEV) || (device==CS5361_DEV))
     49c:	bhi.w	5a8 <i2s_speedConfig+0x11c>
	{
		int64_t nov;
		if (device==PJRC_AUDIO_DEV) 
     4a0:	cmp	r0, #0
     4a2:	bne.w	67e <i2s_speedConfig+0x1f2>
		{	nov=256;
     4a6:	mov.w	r3, #256	; 0x100
			nbits=16;
     4aa:	vldr	s16, [pc, #608]	; 70c <i2s_speedConfig+0x280>
	//
	if((device==SGTL5000_DEV) || (device==PJRC_AUDIO_DEV) || (device==CS5361_DEV))
	{
		int64_t nov;
		if (device==PJRC_AUDIO_DEV) 
		{	nov=256;
     4ae:	str	r0, [sp, #4]
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
     4b0:	movw	r8, #44100	; 0xac44
     4b4:	mov.w	r9, #0
	//
	if((device==SGTL5000_DEV) || (device==PJRC_AUDIO_DEV) || (device==CS5361_DEV))
	{
		int64_t nov;
		if (device==PJRC_AUDIO_DEV) 
		{	nov=256;
     4b8:	str	r3, [sp, #0]
			nbits=16;
     4ba:	ldr	r4, [pc, #596]	; (710 <i2s_speedConfig+0x284>)
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
     4bc:	ldr.w	sl, [pc, #596]	; 714 <i2s_speedConfig+0x288>
	if((device==SGTL5000_DEV) || (device==PJRC_AUDIO_DEV) || (device==CS5361_DEV))
	{
		int64_t nov;
		if (device==PJRC_AUDIO_DEV) 
		{	nov=256;
			nbits=16;
     4c0:	movs	r5, #0
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
     4c2:	mov	r6, r4
     4c4:	mov	r7, r5
     4c6:	mov.w	fp, #0
     4ca:	b.n	4dc <i2s_speedConfig+0x50>
     4cc:	cmp	r2, #1
     4ce:	sbcs.w	r3, r3, #0
     4d2:	blt.n	516 <i2s_speedConfig+0x8a>
     4d4:	cmp	r5, fp
     4d6:	it	eq
     4d8:	cmpeq	r4, sl
     4da:	beq.n	516 <i2s_speedConfig+0x8a>
     4dc:	adds	r4, r4, r6
     4de:	adcs	r5, r7
     4e0:	mov	r2, r8
     4e2:	mov	r3, r9
     4e4:	mov	r0, r4
     4e6:	mov	r1, r5
     4e8:	bl	bfb4 <__aeabi_ldivmod>
     4ec:	and.w	r2, r0, #7
     4f0:	and.w	r3, r1, #2147483648	; 0x80000000
     4f4:	cmp	r2, #0
     4f6:	sbcs.w	lr, r3, #0
     4fa:	bge.n	4cc <i2s_speedConfig+0x40>
     4fc:	adds.w	r2, r2, #4294967295
     500:	orn	r2, r2, #7
     504:	adds	r2, #1
     506:	mov.w	r3, #4294967295
     50a:	adc.w	r3, r3, #0
     50e:	cmp	r2, #1
     510:	sbcs.w	r3, r3, #0
     514:	bge.n	4d4 <i2s_speedConfig+0x48>
     516:	ldr	r2, [pc, #508]	; (714 <i2s_speedConfig+0x288>)
		int64_t scl = fref/fs; // should now be multiple of 8
		//
		// find first multiplier
		int64_t bitRate = fref*nov;
     518:	ldr	r3, [sp, #4]
     51a:	umull	sl, fp, r0, r2
     51e:	mla	fp, r2, r1, fp
     522:	ldr	r1, [sp, #0]
     524:	mul.w	r3, r4, r3
     528:	mla	r3, r1, r5, r3
     52c:	umull	r4, r5, r4, r1
		int64_t scale0 = F_CPU*scl;
     530:	mov	r8, sl
     532:	mov	r9, fp
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
		int64_t scl = fref/fs; // should now be multiple of 8
		//
		// find first multiplier
		int64_t bitRate = fref*nov;
     534:	add	r5, r3
		int64_t scale0 = F_CPU*scl;
		
		for(i1=1; i1<256;i1++) if ((scale0*i1 % bitRate)==0) break;
     536:	movs	r6, #1
     538:	movs	r7, #0
     53a:	b.n	556 <i2s_speedConfig+0xca>
     53c:	adds	r6, #1
     53e:	adc.w	r7, r7, #0
     542:	adds.w	r8, r8, sl
     546:	adc.w	r9, r9, fp
     54a:	cmp	r7, #0
     54c:	it	eq
     54e:	cmpeq.w	r6, #256	; 0x100
     552:	beq.w	6e6 <i2s_speedConfig+0x25a>
     556:	mov	r2, r4
     558:	mov	r3, r5
     55a:	mov	r0, r8
     55c:	mov	r1, r9
     55e:	bl	bfb4 <__aeabi_ldivmod>
     562:	orrs	r3, r2
     564:	bne.n	53c <i2s_speedConfig+0xb0>
		if(i1==256) return 0.0f; // failed to find multiplier
		
		i2=scale0*i1 / bitRate;
     566:	mov	r2, r4
     568:	mov	r3, r5
     56a:	mov	r0, r8
     56c:	mov	r1, r9
     56e:	bl	bfb4 <__aeabi_ldivmod>
		i3 = nov / (4*nbits);
     572:	vmov	r3, s16
     576:	lsls	r2, r3, #2
     578:	asrs	r3, r2, #31
		int64_t scale0 = F_CPU*scl;
		
		for(i1=1; i1<256;i1++) if ((scale0*i1 % bitRate)==0) break;
		if(i1==256) return 0.0f; // failed to find multiplier
		
		i2=scale0*i1 / bitRate;
     57a:	mov	r8, r0
     57c:	mov	r9, r1
		i3 = nov / (4*nbits);
     57e:	ldmia.w	sp, {r0, r1}
     582:	bl	bfb4 <__aeabi_ldivmod>
		
		iscl[0] = (int) (i1-1);
     586:	ldr	r3, [pc, #400]	; (718 <i2s_speedConfig+0x28c>)
		iscl[1] = (int) (i2-1);
     588:	add.w	r2, r8, #4294967295
     58c:	str	r2, [r3, #4]
		if(i1==256) return 0.0f; // failed to find multiplier
		
		i2=scale0*i1 / bitRate;
		i3 = nov / (4*nbits);
		
		iscl[0] = (int) (i1-1);
     58e:	subs	r4, r6, #1
		iscl[1] = (int) (i2-1);
		iscl[2] = (int) (i3-1);
     590:	subs	r2, r0, #1
		if(i1==256) return 0.0f; // failed to find multiplier
		
		i2=scale0*i1 / bitRate;
		i3 = nov / (4*nbits);
		
		iscl[0] = (int) (i1-1);
     592:	str	r4, [r3, #0]
		iscl[1] = (int) (i2-1);
		iscl[2] = (int) (i3-1);
     594:	str	r2, [r3, #8]
     596:	bl	bf38 <__aeabi_l2f>
     59a:	vcvt.f32.s32	s16, s16
     59e:	vmov	s17, r0
     5a2:	vadd.f32	s19, s16, s16
     5a6:	b.n	640 <i2s_speedConfig+0x1b4>
	}
	
	else
  {
    i3=2;
    float A=F_CPU/2.0f/i3/(2.0f*nbits*fs);
     5a8:	vcvt.f32.s32	s16, s16
     5ac:	vmov	s15, r2
     5b0:	vadd.f32	s19, s16, s16
     5b4:	vcvt.f32.s32	s15, s15
     5b8:	vldr	s14, [pc, #352]	; 71c <i2s_speedConfig+0x290>
    float mn=1.0; 
    for(int ii=1;ii<32;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii); 
      if(xx<mn && A*ii<256.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     5bc:	vldr	s18, [pc, #352]	; 720 <i2s_speedConfig+0x294>
	}
	
	else
  {
    i3=2;
    float A=F_CPU/2.0f/i3/(2.0f*nbits*fs);
     5c0:	vmul.f32	s15, s15, s19
     5c4:	movs	r4, #1
     5c6:	movs	r5, #0
//  MCGPLLCLK=F_CPU // is set by _MICS(3)
//  MCLK = MCGPLLCLK*(iscl1+1)/(iscl2+1)
//	BCLK = MCLK/2/(iscl3+1)
//  LRCLK = BCLK/(2*nbits); // division by  is to have 32 bits within frame sync (BCLK)
//
	int64_t i1=1,i2=1,i3;
     5c8:	mov.w	r8, #1
     5cc:	mov.w	r9, #0
	}
	
	else
  {
    i3=2;
    float A=F_CPU/2.0f/i3/(2.0f*nbits*fs);
     5d0:	vdiv.f32	s17, s14, s15
//  MCGPLLCLK=F_CPU // is set by _MICS(3)
//  MCLK = MCGPLLCLK*(iscl1+1)/(iscl2+1)
//	BCLK = MCLK/2/(iscl3+1)
//  LRCLK = BCLK/(2*nbits); // division by  is to have 32 bits within frame sync (BCLK)
//
	int64_t i1=1,i2=1,i3;
     5d4:	mov	r6, r4
     5d6:	mov	r7, r5
	
	else
  {
    i3=2;
    float A=F_CPU/2.0f/i3/(2.0f*nbits*fs);
    float mn=1.0; 
     5d8:	mov	r0, r8
     5da:	mov	r1, r9
     5dc:	vmov.f32	s14, #112	; 0x3f800000  1.0
    for(int ii=1;ii<32;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii); 
     5e0:	vmov	s15, r4
     5e4:	vcvt.f32.s32	s15, s15
     5e8:	vmul.f32	s15, s15, s17
     5ec:	vcvt.s32.f32	s16, s15
     5f0:	vcvt.f32.s32	s16, s16
     5f4:	vsub.f32	s16, s15, s16
      if(xx<mn && A*ii<256.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     5f8:	vcmpe.f32	s16, s14
     5fc:	vmrs	APSR_nzcv, fpscr
     600:	bpl.n	61c <i2s_speedConfig+0x190>
     602:	vcmpe.f32	s15, s18
     606:	vmrs	APSR_nzcv, fpscr
     60a:	bpl.n	61c <i2s_speedConfig+0x190>
     60c:	vmov	r0, s15
     610:	bl	c084 <__aeabi_f2lz>
     614:	mov	r6, r4
     616:	mov	r7, r5
     618:	vmov.f32	s14, s16
     61c:	adds	r4, #1
     61e:	adc.w	r5, r5, #0
	else
  {
    i3=2;
    float A=F_CPU/2.0f/i3/(2.0f*nbits*fs);
    float mn=1.0; 
    for(int ii=1;ii<32;ii++) 
     622:	cmp	r5, #0
     624:	it	eq
     626:	cmpeq	r4, #32
     628:	bne.n	5e0 <i2s_speedConfig+0x154>
     62a:	mov	r8, r0
    { float xx;
      xx=A*ii-(int32_t)(A*ii); 
      if(xx<mn && A*ii<256.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
     62c:	ldr	r3, [pc, #232]	; (718 <i2s_speedConfig+0x28c>)
     62e:	mov	r9, r1
     630:	subs	r0, r6, #1
    iscl[1] = (int) (i2-1);
     632:	add.w	r1, r8, #4294967295
    iscl[2] = (int) (i3-1);
     636:	movs	r2, #1
     638:	stmia.w	r3, {r0, r1, r2}
     63c:	vmov.f32	s17, #0	; 0x40000000  2.0
  }
	return F_CPU * (float)(i1) / (float)(i2) / 2.0f / (float)(i3) / (2.0f*nbits); // is sampling frequency
     640:	mov	r1, r7
     642:	mov	r0, r6
     644:	bl	bf38 <__aeabi_l2f>
     648:	vldr	s16, [pc, #216]	; 724 <i2s_speedConfig+0x298>
     64c:	vmov	s15, r0
     650:	mov	r1, r9
     652:	mov	r0, r8
     654:	vmul.f32	s16, s15, s16
     658:	bl	bf38 <__aeabi_l2f>
     65c:	vmov	s14, r0
     660:	vdiv.f32	s15, s16, s14
     664:	vmov.f32	s14, #96	; 0x3f000000  0.5
     668:	vmul.f32	s15, s15, s14
     66c:	vdiv.f32	s14, s15, s17
     670:	vdiv.f32	s0, s14, s19
}
     674:	add	sp, #12
     676:	vpop	{d8-d9}
     67a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		{	nov=256;
			nbits=16;
			fs=44100; // is fixed in Audio tool
		}

		else if (device==SGTL5000_DEV)
     67e:	cmp	r0, #1
     680:	beq.n	6a0 <i2s_speedConfig+0x214>
			if(fs>48000) nov=256;
		}

		else if (device==CS5361_DEV)
		{   nbits = 32; 
			int64_t sc = 96000/fs;
     682:	ldr	r3, [pc, #164]	; (728 <i2s_speedConfig+0x29c>)
     684:	sdiv	r3, r3, r2
			if(sc>2) sc=2;
     688:	cmp	r3, #2
     68a:	bgt.n	700 <i2s_speedConfig+0x274>
     68c:	mov.w	r1, #256	; 0x100
     690:	lsl.w	r3, r1, r3
     694:	asrs	r1, r3, #31
     696:	str	r1, [sp, #4]
     698:	str	r3, [sp, #0]
		{	nov=512;
			if(fs>48000) nov=256;
		}

		else if (device==CS5361_DEV)
		{   nbits = 32; 
     69a:	vldr	s16, [pc, #144]	; 72c <i2s_speedConfig+0x2a0>
     69e:	b.n	6b6 <i2s_speedConfig+0x22a>
			fs=44100; // is fixed in Audio tool
		}

		else if (device==SGTL5000_DEV)
		{	nov=512;
			if(fs>48000) nov=256;
     6a0:	movw	r3, #48000	; 0xbb80
			nbits=16;
			fs=44100; // is fixed in Audio tool
		}

		else if (device==SGTL5000_DEV)
		{	nov=512;
     6a4:	cmp	r2, r3
     6a6:	ite	gt
     6a8:	movgt.w	r3, #256	; 0x100
     6ac:	movle.w	r3, #512	; 0x200
     6b0:	str	r3, [sp, #0]
     6b2:	movs	r3, #0
     6b4:	str	r3, [sp, #4]
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
     6b6:	mov.w	r9, r2, asr #31
     6ba:	mov	r3, r9
     6bc:	ldr	r0, [pc, #80]	; (710 <i2s_speedConfig+0x284>)
     6be:	movs	r1, #0
     6c0:	mov	r8, r2
     6c2:	bl	bfb4 <__aeabi_ldivmod>
     6c6:	and.w	r2, r0, #7
     6ca:	and.w	r3, r1, #2147483648	; 0x80000000
     6ce:	cmp	r2, #0
     6d0:	sbcs.w	r4, r3, #0
     6d4:	blt.n	6ec <i2s_speedConfig+0x260>
     6d6:	cmp	r2, #1
     6d8:	sbcs.w	r3, r3, #0
     6dc:	bge.w	4ba <i2s_speedConfig+0x2e>
			if(sc>2) sc=2;
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
     6e0:	ldr	r4, [pc, #44]	; (710 <i2s_speedConfig+0x284>)
     6e2:	movs	r5, #0
     6e4:	b.n	516 <i2s_speedConfig+0x8a>
		// find first multiplier
		int64_t bitRate = fref*nov;
		int64_t scale0 = F_CPU*scl;
		
		for(i1=1; i1<256;i1++) if ((scale0*i1 % bitRate)==0) break;
		if(i1==256) return 0.0f; // failed to find multiplier
     6e6:	vldr	s0, [pc, #72]	; 730 <i2s_speedConfig+0x2a4>
     6ea:	b.n	674 <i2s_speedConfig+0x1e8>
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
     6ec:	adds.w	r2, r2, #4294967295
     6f0:	orn	r2, r2, #7
     6f4:	mov.w	r3, #4294967295
     6f8:	adds	r2, #1
     6fa:	adc.w	r3, r3, #0
     6fe:	b.n	6d6 <i2s_speedConfig+0x24a>
     700:	mov.w	r1, #1024	; 0x400
     704:	movs	r3, #0
     706:	stmia.w	sp, {r1, r3}
     70a:	b.n	69a <i2s_speedConfig+0x20e>
     70c:	.word	0x00000010
     710:	.word	0x000f4240
     714:	.word	0x05b8d800
     718:	.word	0x20020520
     71c:	.word	0x4bb71b00
     720:	.word	0x43800000
     724:	.word	0x4cb71b00
     728:	.word	0x00017700
     72c:	.word	0x00000020
     730:	.word	0x00000000

00000734 <i2s_config>:
  }
	return F_CPU * (float)(i1) / (float)(i2) / 2.0f / (float)(i3) / (2.0f*nbits); // is sampling frequency
}

void i2s_config(int isMaster, int nbits, int dual, int sync)
{
     734:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      mcr_src=3;
  #endif
#endif

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
     738:	ldr	r4, [pc, #352]	; (89c <i2s_config+0x168>)
     73a:	ldr	r5, [r4, #0]
     73c:	cmp	r5, #0
     73e:	blt.n	816 <i2s_config+0xe2>
	if (I2S0_RCSR & I2S_RCSR_RE) return;
     740:	ldr	r5, [pc, #348]	; (8a0 <i2s_config+0x16c>)
     742:	ldr	r6, [r5, #0]
     744:	cmp	r6, #0
     746:	blt.n	816 <i2s_config+0xe2>

	I2S0_TCSR=0;
	I2S0_RCSR=0;
	//
	m_i2s_isMaster=isMaster;
     748:	ldr.w	ip, [pc, #396]	; 8d8 <i2s_config+0x1a4>
	m_i2s_nbits=nbits;
     74c:	ldr.w	lr, [pc, #396]	; 8dc <i2s_config+0x1a8>
	m_i2s_dual=dual;
     750:	ldr	r7, [pc, #336]	; (8a4 <i2s_config+0x170>)

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	I2S0_TCSR=0;
     752:	movs	r6, #0
     754:	str	r6, [r4, #0]
	I2S0_RCSR=0;
     756:	str	r6, [r5, #0]
	//
	m_i2s_isMaster=isMaster;
     758:	str.w	r0, [ip]
	m_i2s_nbits=nbits;
     75c:	str.w	r1, [lr]
	m_i2s_dual=dual;
     760:	str	r2, [r7, #0]
	
	// enable MCLK output
	if(isMaster)
     762:	cmp	r0, #0
     764:	bne.n	81a <i2s_config+0xe6>
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
     766:	ldr	r7, [pc, #320]	; (8a8 <i2s_config+0x174>)
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     768:	ldr	r6, [pc, #320]	; (8ac <i2s_config+0x178>)
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     76a:	ldr	r5, [pc, #324]	; (8b0 <i2s_config+0x17c>)
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
     76c:	str	r0, [r7, #0]
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     76e:	rsb	r4, r3, #1
     772:	lsls	r4, r4, #30
     774:	orr.w	r4, r4, #33554432	; 0x2000000
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     778:	movs	r7, #1
     77a:	str	r7, [r6, #0]
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     77c:	str	r4, [r5, #0]
	if(isMaster)
		I2S0_TCR2 |= (I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]) | I2S_TCR2_MSEL(1));
	//
	if(dual & I2S_TX_2CH)
     77e:	lsls	r5, r2, #31
		I2S0_TCR3 = I2S_TCR3_TCE_2CH; // dual tx channel
     780:	ldr	r4, [pc, #304]	; (8b4 <i2s_config+0x180>)
	else
		I2S0_TCR3 = I2S_TCR3_TCE; // single tx channel
	//
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) 
     782:	ldr	r6, [pc, #308]	; (8b8 <i2s_config+0x184>)
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
	if(isMaster)
		I2S0_TCR2 |= (I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]) | I2S_TCR2_MSEL(1));
	//
	if(dual & I2S_TX_2CH)
		I2S0_TCR3 = I2S_TCR3_TCE_2CH; // dual tx channel
     784:	ite	mi
     786:	movmi.w	r5, #196608	; 0x30000
	else
		I2S0_TCR3 = I2S_TCR3_TCE; // single tx channel
     78a:	movpl.w	r5, #65536	; 0x10000
	//
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) 
				| I2S_TCR4_SYWD((nbits-1)) 
     78e:	subs	r1, #1
		I2S0_TCR2 |= (I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]) | I2S_TCR2_MSEL(1));
	//
	if(dual & I2S_TX_2CH)
		I2S0_TCR3 = I2S_TCR3_TCE_2CH; // dual tx channel
	else
		I2S0_TCR3 = I2S_TCR3_TCE; // single tx channel
     790:	str	r5, [r4, #0]
	//
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) 
				| I2S_TCR4_SYWD((nbits-1)) 
     792:	lsls	r4, r1, #8
     794:	and.w	r4, r4, #7936	; 0x1f00
				| I2S_TCR4_MF 
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
     798:	orr.w	r5, r4, #65536	; 0x10000
     79c:	orr.w	r5, r5, #26
	if(dual & I2S_TX_2CH)
		I2S0_TCR3 = I2S_TCR3_TCE_2CH; // dual tx channel
	else
		I2S0_TCR3 = I2S_TCR3_TCE; // single tx channel
	//
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) 
     7a0:	str	r5, [r6, #0]
				| I2S_TCR4_SYWD((nbits-1)) 
				| I2S_TCR4_MF 
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
     7a2:	cmp	r0, #0
     7a4:	beq.n	872 <i2s_config+0x13e>
		I2S0_TCR4 |= I2S_TCR4_FSD;	
     7a6:	ldr.w	ip, [r6]
	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
	if(isMaster)
		I2S0_RCR2 = (I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]) | I2S_RCR2_MSEL(1));
     7aa:	ldr.w	lr, [pc, #288]	; 8cc <i2s_config+0x198>
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     7ae:	ldr.w	sl, [pc, #304]	; 8e0 <i2s_config+0x1ac>

	// configure receiver 
	I2S0_RMR = 0;
     7b2:	ldr.w	r9, [pc, #284]	; 8d0 <i2s_config+0x19c>
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
	if(isMaster)
		I2S0_RCR2 = (I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]) | I2S_RCR2_MSEL(1));
     7b6:	ldrb.w	lr, [lr, #8]
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));

	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
     7ba:	ldr.w	r8, [pc, #280]	; 8d4 <i2s_config+0x1a0>
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     7be:	lsls	r7, r1, #24
     7c0:	and.w	r7, r7, #520093696	; 0x1f000000
     7c4:	lsls	r1, r1, #16
     7c6:	orrs	r4, r7
     7c8:	and.w	r1, r1, #2031616	; 0x1f0000
				| I2S_TCR4_SYWD((nbits-1)) 
				| I2S_TCR4_MF 
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
     7cc:	orr.w	r7, ip, #1
     7d0:	str	r7, [r6, #0]
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     7d2:	orrs	r1, r4

	// configure receiver 
	I2S0_RMR = 0;
     7d4:	movs	r6, #0
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     7d6:	str.w	r1, [sl]

	// configure receiver 
	I2S0_RMR = 0;
     7da:	str.w	r6, [r9]
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
     7de:	ldr	r6, [pc, #220]	; (8bc <i2s_config+0x188>)
     7e0:	lsls	r3, r3, #30
	if(isMaster)
		I2S0_RCR2 = (I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]) | I2S_RCR2_MSEL(1));
     7e2:	orr.w	r4, lr, #83886080	; 0x5000000
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));

	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
     7e6:	movs	r7, #1
     7e8:	str.w	r7, [r8]
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
     7ec:	str	r3, [r6, #0]
	if(isMaster)
		I2S0_RCR2 = (I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]) | I2S_RCR2_MSEL(1));
     7ee:	str	r4, [r6, #0]
	//
	if(dual & I2S_RX_2CH)
     7f0:	lsls	r2, r2, #30
		I2S0_RCR3 = I2S_RCR3_RCE_2CH; // dual rx channel
     7f2:	ldr	r3, [pc, #204]	; (8c0 <i2s_config+0x18c>)
     7f4:	ite	mi
     7f6:	movmi.w	r2, #196608	; 0x30000
	else
		I2S0_RCR3 = I2S_RCR3_RCE; // single rx channel
     7fa:	movpl.w	r2, #65536	; 0x10000
     7fe:	str	r2, [r3, #0]
	//
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) 
     800:	ldr	r3, [pc, #192]	; (8c4 <i2s_config+0x190>)
     802:	str	r5, [r3, #0]
				| I2S_RCR4_SYWD((nbits-1)) 
				| I2S_RCR4_MF
				| I2S_RCR4_FSE	// frame sync early
				| I2S_RCR4_FSP	// sample at active low
				;
	if(isMaster)
     804:	cbz	r0, 80e <i2s_config+0xda>
		I2S0_RCR4 |= I2S_RCR4_FSD;	
     806:	ldr	r2, [r3, #0]
     808:	orr.w	r2, r2, #1
     80c:	str	r2, [r3, #0]

	I2S0_RCR5 = I2S_RCR5_WNW((nbits-1)) | I2S_RCR5_W0W((nbits-1)) | I2S_RCR5_FBT((nbits-1));
     80e:	ldr	r3, [pc, #184]	; (8c8 <i2s_config+0x194>)
     810:	str	r1, [r3, #0]
     812:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     816:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	m_i2s_dual=dual;
	
	// enable MCLK output
	if(isMaster)
	{
		I2S0_MCR = I2S_MCR_MICS(mcr_src)  | I2S_MCR_MOE;
     81a:	adds	r5, #128	; 0x80
     81c:	mov.w	r4, #1124073472	; 0x43000000
     820:	str	r4, [r5, #0]
		while (I2S0_MCR & I2S_MCR_DUF) ; 
     822:	ldr	r4, [r5, #0]
     824:	cmp	r4, #0
     826:	blt.n	822 <i2s_config+0xee>
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
     828:	ldr	r4, [pc, #160]	; (8cc <i2s_config+0x198>)
     82a:	ldr.w	lr, [pc, #184]	; 8e4 <i2s_config+0x1b0>
     82e:	ldr	r6, [r4, #0]
     830:	ldr	r5, [r4, #4]
	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
	if(isMaster)
		I2S0_TCR2 |= (I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]) | I2S_TCR2_MSEL(1));
     832:	ldrb	r7, [r4, #8]
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
     834:	ldr	r4, [pc, #112]	; (8a8 <i2s_config+0x174>)
	// enable MCLK output
	if(isMaster)
	{
		I2S0_MCR = I2S_MCR_MICS(mcr_src)  | I2S_MCR_MOE;
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
     836:	lsls	r6, r6, #12
     838:	ubfx	r5, r5, #0, #12
     83c:	and.w	r6, r6, #1044480	; 0xff000
     840:	orrs	r6, r5
	}

	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     842:	rsb	r5, r3, #1
	// enable MCLK output
	if(isMaster)
	{
		I2S0_MCR = I2S_MCR_MICS(mcr_src)  | I2S_MCR_MOE;
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
     846:	str.w	r6, [lr]
	}

	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     84a:	lsls	r5, r5, #30
     84c:	ldr	r6, [pc, #96]	; (8b0 <i2s_config+0x17c>)
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     84e:	sub.w	lr, lr, #256	; 0x100
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
     852:	mov.w	ip, #0
     856:	str.w	ip, [r4]
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     85a:	orr.w	r5, r5, #33554432	; 0x2000000
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     85e:	movs	r4, #1
     860:	str.w	r4, [lr]
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     864:	str	r5, [r6, #0]
	if(isMaster)
		I2S0_TCR2 |= (I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]) | I2S_TCR2_MSEL(1));
     866:	ldr	r4, [r6, #0]
     868:	orr.w	r4, r4, #83886080	; 0x5000000
     86c:	orrs	r4, r7
     86e:	str	r4, [r6, #0]
     870:	b.n	77e <i2s_config+0x4a>
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     872:	lsls	r6, r1, #24
     874:	and.w	r6, r6, #520093696	; 0x1f000000
     878:	lsls	r1, r1, #16
     87a:	orrs	r4, r6

	// configure receiver 
	I2S0_RMR = 0;
     87c:	ldr	r7, [pc, #80]	; (8d0 <i2s_config+0x19c>)
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     87e:	ldr.w	lr, [pc, #96]	; 8e0 <i2s_config+0x1ac>

	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
     882:	ldr	r6, [pc, #80]	; (8d4 <i2s_config+0x1a0>)
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     884:	and.w	r1, r1, #2031616	; 0x1f0000
     888:	orrs	r1, r4

	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
     88a:	ldr	r4, [pc, #48]	; (8bc <i2s_config+0x188>)
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     88c:	str.w	r1, [lr]

	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
     890:	lsls	r3, r3, #30
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));

	// configure receiver 
	I2S0_RMR = 0;
     892:	str	r0, [r7, #0]
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
     894:	movs	r7, #1
     896:	str	r7, [r6, #0]
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
     898:	str	r3, [r4, #0]
     89a:	b.n	7f0 <i2s_config+0xbc>
     89c:	.word	0x4002f000
     8a0:	.word	0x4002f080
     8a4:	.word	0x2002050c
     8a8:	.word	0x4002f060
     8ac:	.word	0x4002f004
     8b0:	.word	0x4002f008
     8b4:	.word	0x4002f00c
     8b8:	.word	0x4002f010
     8bc:	.word	0x4002f088
     8c0:	.word	0x4002f08c
     8c4:	.word	0x4002f090
     8c8:	.word	0x4002f094
     8cc:	.word	0x20020520
     8d0:	.word	0x4002f0e0
     8d4:	.word	0x4002f084
     8d8:	.word	0x2002051c
     8dc:	.word	0x20020514
     8e0:	.word	0x4002f014
     8e4:	.word	0x4002f104

000008e8 <i2s_configurePorts>:
	I2S0_TDR1:								Pin15(6)
*/

void i2s_configurePorts(int iconf)
{
	if(iconf==1) //pjrc audio or wmxz cs5361 stereo board
     8e8:	cmp	r0, #1
	I2S0_TDR0:								Pin22(6)
	I2S0_TDR1:								Pin15(6)
*/

void i2s_configurePorts(int iconf)
{
     8ea:	push	{r4, r5, r6}
	if(iconf==1) //pjrc audio or wmxz cs5361 stereo board
     8ec:	beq.n	90e <i2s_configurePorts+0x26>
#endif
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif
	}
	else if(iconf==2) // pure rx system no MCLK
     8ee:	cmp	r0, #2
     8f0:	beq.n	8f6 <i2s_configurePorts+0xe>
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif

	}
}
     8f2:	pop	{r4, r5, r6}
     8f4:	bx	lr
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif
	}
	else if(iconf==2) // pure rx system no MCLK
	{
		CORE_PIN11_CONFIG = PORT_PCR_MUX(4); // pin 11, PTC6, I2S0_RX_BCLK
     8f6:	ldr	r4, [pc, #56]	; (930 <i2s_configurePorts+0x48>)
		CORE_PIN12_CONFIG = PORT_PCR_MUX(4); // pin 12, PTC7, I2S0_RX_FS
     8f8:	ldr	r0, [pc, #56]	; (934 <i2s_configurePorts+0x4c>)
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     8fa:	ldr	r1, [pc, #60]	; (938 <i2s_configurePorts+0x50>)
#ifdef __MK20DX256__
		CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11,I2S0_RXD1
#endif
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
     8fc:	ldr	r2, [pc, #60]	; (93c <i2s_configurePorts+0x54>)
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif
	}
	else if(iconf==2) // pure rx system no MCLK
	{
		CORE_PIN11_CONFIG = PORT_PCR_MUX(4); // pin 11, PTC6, I2S0_RX_BCLK
     8fe:	mov.w	r3, #1024	; 0x400
     902:	str	r3, [r4, #0]
		CORE_PIN12_CONFIG = PORT_PCR_MUX(4); // pin 12, PTC7, I2S0_RX_FS
     904:	str	r3, [r0, #0]
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif

	}
}
     906:	pop	{r4, r5, r6}
	}
	else if(iconf==2) // pure rx system no MCLK
	{
		CORE_PIN11_CONFIG = PORT_PCR_MUX(4); // pin 11, PTC6, I2S0_RX_BCLK
		CORE_PIN12_CONFIG = PORT_PCR_MUX(4); // pin 12, PTC7, I2S0_RX_FS
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     908:	str	r3, [r1, #0]
#ifdef __MK20DX256__
		CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11,I2S0_RXD1
#endif
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
     90a:	str	r3, [r2, #0]
#endif

	}
}
     90c:	bx	lr

void i2s_configurePorts(int iconf)
{
	if(iconf==1) //pjrc audio or wmxz cs5361 stereo board
	{
		CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin 9,  PTC3, I2S0_TX_BCLK
     90e:	ldr	r6, [pc, #48]	; (940 <i2s_configurePorts+0x58>)
		CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
     910:	ldr	r5, [pc, #28]	; (930 <i2s_configurePorts+0x48>)
		CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS
     912:	ldr	r4, [pc, #48]	; (944 <i2s_configurePorts+0x5c>)
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     914:	ldr	r0, [pc, #32]	; (938 <i2s_configurePorts+0x50>)
#ifdef __MK20DX256__
		CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11,I2S0_RXD1
#endif
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
     916:	ldr	r1, [pc, #36]	; (93c <i2s_configurePorts+0x54>)

void i2s_configurePorts(int iconf)
{
	if(iconf==1) //pjrc audio or wmxz cs5361 stereo board
	{
		CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin 9,  PTC3, I2S0_TX_BCLK
     918:	mov.w	r3, #1536	; 0x600
		CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
		CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     91c:	mov.w	r2, #1024	; 0x400

void i2s_configurePorts(int iconf)
{
	if(iconf==1) //pjrc audio or wmxz cs5361 stereo board
	{
		CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin 9,  PTC3, I2S0_TX_BCLK
     920:	str	r3, [r6, #0]
		CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
     922:	str	r3, [r5, #0]
		CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS
     924:	str	r3, [r4, #0]
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     926:	str	r2, [r0, #0]
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif

	}
}
     928:	pop	{r4, r5, r6}
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
#ifdef __MK20DX256__
		CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11,I2S0_RXD1
#endif
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
     92a:	str	r2, [r1, #0]
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif

	}
}
     92c:	bx	lr
     92e:	nop
     930:	.word	0x4004b018
     934:	.word	0x4004b01c
     938:	.word	0x4004b014
     93c:	.word	0x4004b02c
     940:	.word	0x4004b00c
     944:	.word	0x4004b008

00000948 <m_i2s_rx_isr>:

volatile uint32_t rxCount = 0;
void m_i2s_rx_isr(void)
{	uint32_t daddr, taddr;
	//
	rxCount++;
     948:	ldr	r2, [pc, #52]	; (980 <m_i2s_rx_isr+0x38>)

uint32_t i2sDma_getRxError(void) { return *DMA_RX->ES;}

volatile uint32_t rxCount = 0;
void m_i2s_rx_isr(void)
{	uint32_t daddr, taddr;
     94a:	push	{r4, lr}
	//
	rxCount++;
     94c:	ldr	r3, [r2, #0]
//	__disable_irq();
	DMA_clearInterrupt(DMA_RX);
     94e:	ldr	r4, [pc, #52]	; (984 <m_i2s_rx_isr+0x3c>)

volatile uint32_t rxCount = 0;
void m_i2s_rx_isr(void)
{	uint32_t daddr, taddr;
	//
	rxCount++;
     950:	adds	r3, #1
//	__disable_irq();
	DMA_clearInterrupt(DMA_RX);
     952:	ldr	r0, [r4, #0]

volatile uint32_t rxCount = 0;
void m_i2s_rx_isr(void)
{	uint32_t daddr, taddr;
	//
	rxCount++;
     954:	str	r3, [r2, #0]
//	__disable_irq();
	DMA_clearInterrupt(DMA_RX);
     956:	bl	d78 <DMA_clearInterrupt>
	daddr = (uint32_t) DMA_destinationAddress(DMA_RX);
     95a:	ldr	r0, [r4, #0]
     95c:	bl	d10 <DMA_destinationAddress>
	//
	if (daddr < (uint32_t)(&m_i2s_rx_buffer[m_i2s_rx_nbyte/2])) 
     960:	ldr	r3, [pc, #36]	; (988 <m_i2s_rx_isr+0x40>)
     962:	ldr	r2, [pc, #40]	; (98c <m_i2s_rx_isr+0x44>)
     964:	ldr	r3, [r3, #0]
     966:	ldr	r2, [r2, #0]
     968:	add.w	r3, r3, r3, lsr #31
     96c:	add.w	r1, r2, r3, asr #1
#endif
		// need to process data from the first half
		taddr=(uint32_t) &m_i2s_rx_buffer[0];
	}
	//
	i2sInProcessing((void *) &m_i2s_rxContext,(void *) taddr);
     970:	cmp	r0, r1
     972:	it	cs
     974:	movcs	r1, r2
     976:	ldr	r0, [pc, #24]	; (990 <m_i2s_rx_isr+0x48>)
     978:	bl	1660 <i2sInProcessing>
     97c:	pop	{r4, pc}
     97e:	nop
     980:	.word	0x1fff1324
     984:	.word	0x1fff1314
     988:	.word	0x20020508
     98c:	.word	0x20020518
     990:	.word	0x1fff1318

00000994 <i2s_setupInput>:

//#include "usb_serial.h"
//void logg(char c){	usb_serial_putchar(c);	usb_serial_flush_output();}

void i2s_setupInput(void * buffer, int ndat, int port, int prio)
{	// ndat is number of words in (dual) input buffer
     994:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
     998:	ldr	r4, [pc, #260]	; (aa0 <i2s_setupInput+0x10c>)
     99a:	ldr	r4, [r4, #0]
     99c:	cmp	r4, #0
     99e:	blt.n	a52 <i2s_setupInput+0xbe>
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9a0:	ldr.w	fp, [pc, #284]	; ac0 <i2s_setupInput+0x12c>
void i2s_setupInput(void * buffer, int ndat, int port, int prio)
{	// ndat is number of words in (dual) input buffer
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
     9a4:	ldr	r4, [pc, #252]	; (aa4 <i2s_setupInput+0x110>)
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9a6:	ldr.w	r6, [fp]
void i2s_setupInput(void * buffer, int ndat, int port, int prio)
{	// ndat is number of words in (dual) input buffer
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
     9aa:	str	r0, [r4, #0]
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9ac:	mul.w	r7, r1, r6
     9b0:	cmp	r7, #0
     9b2:	ldr	r4, [pc, #244]	; (aa8 <i2s_setupInput+0x114>)

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
     9b4:	ldr.w	sl, [pc, #268]	; ac4 <i2s_setupInput+0x130>
{	// ndat is number of words in (dual) input buffer
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9b8:	it	lt
     9ba:	addlt	r7, #7

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
     9bc:	add.w	r9, r1, r1, lsr #31
{	// ndat is number of words in (dual) input buffer
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9c0:	asrs	r7, r7, #3

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
     9c2:	mov.w	r9, r9, asr #1
     9c6:	mul.w	lr, r9, r6
{	// ndat is number of words in (dual) input buffer
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9ca:	str	r7, [r4, #0]

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
	
	if(!DMA_RX) DMA_RX=DMA_allocate(port);
     9cc:	ldr	r7, [pc, #220]	; (aac <i2s_setupInput+0x118>)
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
     9ce:	cmp.w	lr, #0
     9d2:	it	lt
     9d4:	addlt.w	lr, lr, #7
     9d8:	mov	r8, r0
	
	if(!DMA_RX) DMA_RX=DMA_allocate(port);
     9da:	ldr	r0, [r7, #0]
     9dc:	mov	r5, r3
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
     9de:	mov.w	r3, lr, asr #3
     9e2:	mov	r4, r1
     9e4:	str.w	r3, [sl]
	
	if(!DMA_RX) DMA_RX=DMA_allocate(port);
     9e8:	cmp	r0, #0
     9ea:	beq.n	a8e <i2s_setupInput+0xfa>
	if(!DMA_RX) return;
	//
	if(m_i2s_dual & I2S_RX_2CH)
     9ec:	ldr	r3, [pc, #192]	; (ab0 <i2s_setupInput+0x11c>)
     9ee:	ldr	r3, [r3, #0]
     9f0:	lsls	r3, r3, #30
     9f2:	bmi.n	a56 <i2s_setupInput+0xc2>
		DMA_destinationBuffer_2ch(DMA_RX, buffer, ndat/2, m_i2s_nbits/8);
		m_i2s_rxContext.nsamp=ndat/2/4; // half buffer/ 4-chan
		m_i2s_rxContext.nchan=4;
	}
	else
	{ 	DMA_source(DMA_RX, (uint32_t *)&I2S0_RDR0, m_i2s_nbits/8);
     9f4:	subs	r2, r6, #0
     9f6:	it	lt
     9f8:	addlt	r2, #7
     9fa:	asrs	r2, r2, #3
     9fc:	ldr	r1, [pc, #180]	; (ab4 <i2s_setupInput+0x120>)
     9fe:	bl	bec <DMA_source>
		DMA_destinationBuffer(DMA_RX, buffer, ndat, m_i2s_nbits/8);
     a02:	ldr.w	r3, [fp]
     a06:	ldr	r0, [r7, #0]
     a08:	cmp	r3, #0
     a0a:	it	lt
     a0c:	addlt	r3, #7
     a0e:	asrs	r3, r3, #3
     a10:	mov	r2, r4
     a12:	mov	r1, r8
     a14:	bl	c54 <DMA_destinationBuffer>
		m_i2s_rxContext.nsamp=ndat/2/2;	// half buffer / 2-chan
     a18:	cmp	r4, #0
     a1a:	it	lt
     a1c:	addlt	r4, #3
     a1e:	asrs	r4, r4, #2
		m_i2s_rxContext.nchan=2;
     a20:	movs	r3, #2
		m_i2s_rxContext.nchan=4;
	}
	else
	{ 	DMA_source(DMA_RX, (uint32_t *)&I2S0_RDR0, m_i2s_nbits/8);
		DMA_destinationBuffer(DMA_RX, buffer, ndat, m_i2s_nbits/8);
		m_i2s_rxContext.nsamp=ndat/2/2;	// half buffer / 2-chan
     a22:	str.w	r4, [sl, #4]
		m_i2s_rxContext.nchan=2;
     a26:	str.w	r3, [sl, #8]
	}
	//
	DMA_interruptAtCompletion(DMA_RX); 
     a2a:	ldr	r0, [r7, #0]
     a2c:	bl	cc0 <DMA_interruptAtCompletion>
	DMA_interruptAtHalf(DMA_RX); 
     a30:	ldr	r0, [r7, #0]
     a32:	bl	ccc <DMA_interruptAtHalf>
	//
	DMA_attachInterrupt(DMA_RX, m_i2s_rx_isr); 
     a36:	ldr	r1, [pc, #128]	; (ab8 <i2s_setupInput+0x124>)
     a38:	ldr	r0, [r7, #0]
     a3a:	bl	d34 <DMA_attachInterrupt>
	DMA_triggerAtHardwareEvent(DMA_RX, DMAMUX_SOURCE_I2S0_RX) ;
     a3e:	ldr	r0, [r7, #0]
     a40:	movs	r1, #12
     a42:	bl	d18 <DMA_triggerAtHardwareEvent>
	if(prio>0) NVIC_SET_PRIORITY(IRQ_I2S0_RX, prio*16); // 8 is normal priority (set in mk20dx128.c)
     a46:	cmp	r5, #0
     a48:	ble.n	a52 <i2s_setupInput+0xbe>
     a4a:	lsls	r5, r5, #4
     a4c:	ldr	r3, [pc, #108]	; (abc <i2s_setupInput+0x128>)
     a4e:	uxtb	r5, r5
     a50:	strb	r5, [r3, #0]
     a52:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	
	if(!DMA_RX) DMA_RX=DMA_allocate(port);
	if(!DMA_RX) return;
	//
	if(m_i2s_dual & I2S_RX_2CH)
	{ 	DMA_source_2ch(DMA_RX, (uint32_t *)&I2S0_RDR0, m_i2s_nbits/8);
     a56:	subs	r2, r6, #0
     a58:	it	lt
     a5a:	addlt	r2, #7
     a5c:	asrs	r2, r2, #3
     a5e:	ldr	r1, [pc, #84]	; (ab4 <i2s_setupInput+0x120>)
     a60:	bl	c1c <DMA_source_2ch>
		DMA_destinationBuffer_2ch(DMA_RX, buffer, ndat/2, m_i2s_nbits/8);
     a64:	ldr.w	r3, [fp]
     a68:	ldr	r0, [r7, #0]
     a6a:	cmp	r3, #0
     a6c:	it	lt
     a6e:	addlt	r3, #7
     a70:	asrs	r3, r3, #3
     a72:	mov	r2, r9
     a74:	mov	r1, r8
     a76:	bl	c88 <DMA_destinationBuffer_2ch>
		m_i2s_rxContext.nsamp=ndat/2/4; // half buffer/ 4-chan
     a7a:	cmp	r4, #0
     a7c:	it	lt
     a7e:	addlt	r4, #7
     a80:	asrs	r4, r4, #3
		m_i2s_rxContext.nchan=4;
     a82:	movs	r3, #4
	if(!DMA_RX) return;
	//
	if(m_i2s_dual & I2S_RX_2CH)
	{ 	DMA_source_2ch(DMA_RX, (uint32_t *)&I2S0_RDR0, m_i2s_nbits/8);
		DMA_destinationBuffer_2ch(DMA_RX, buffer, ndat/2, m_i2s_nbits/8);
		m_i2s_rxContext.nsamp=ndat/2/4; // half buffer/ 4-chan
     a84:	str.w	r4, [sl, #4]
		m_i2s_rxContext.nchan=4;
     a88:	str.w	r3, [sl, #8]
     a8c:	b.n	a2a <i2s_setupInput+0x96>
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
	
	if(!DMA_RX) DMA_RX=DMA_allocate(port);
     a8e:	mov	r0, r2
     a90:	bl	b3c <DMA_allocate>
     a94:	str	r0, [r7, #0]
	if(!DMA_RX) return;
     a96:	cmp	r0, #0
     a98:	beq.n	a52 <i2s_setupInput+0xbe>
     a9a:	ldr.w	r6, [fp]
     a9e:	b.n	9ec <i2s_setupInput+0x58>
     aa0:	.word	0x4002f080
     aa4:	.word	0x20020518
     aa8:	.word	0x20020508
     aac:	.word	0x1fff1314
     ab0:	.word	0x2002050c
     ab4:	.word	0x4002f0a0
     ab8:	.word	0x00000949
     abc:	.word	0xe000e41d
     ac0:	.word	0x20020514
     ac4:	.word	0x1fff1318

00000ac8 <i2s_stopInput>:
	if(DMA_RX) DMA_disable(DMA_RX);
}

void i2s_stopInput(void)
{ //stops Input DMA
	if(DMA_RX) DMA_disable(DMA_RX);
     ac8:	ldr	r3, [pc, #8]	; (ad4 <i2s_stopInput+0xc>)
     aca:	ldr	r0, [r3, #0]
     acc:	cbz	r0, ad2 <i2s_stopInput+0xa>
     ace:	b.w	ce4 <DMA_disable>
     ad2:	bx	lr
     ad4:	.word	0x1fff1314

00000ad8 <i2s_startInput>:
{ //stops Output DMA
	if(DMA_TX) DMA_disable(DMA_TX);
}

void i2s_startInput(void)
{	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     ad8:	ldr	r2, [pc, #8]	; (ae4 <i2s_startInput+0xc>)
     ada:	ldr	r3, [r2, #0]
     adc:	orr.w	r3, r3, #2415919104	; 0x90000000
     ae0:	str	r3, [r2, #0]
     ae2:	bx	lr
     ae4:	.word	0x4002f080

00000ae8 <i2s_enableInputDMA>:
void i2s_startOutput(void)
{	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; 
}

void i2s_enableInputDMA(void)
{	if(!DMA_RX) return;
     ae8:	push	{r3, lr}
     aea:	ldr	r3, [pc, #24]	; (b04 <i2s_enableInputDMA+0x1c>)
     aec:	ldr	r0, [r3, #0]
     aee:	cbz	r0, b02 <i2s_enableInputDMA+0x1a>
	DMA_enable(DMA_RX);
     af0:	bl	cd8 <DMA_enable>
	I2S0_RCSR |= I2S_RCSR_FRDE | I2S_RCSR_FR;
     af4:	ldr	r2, [pc, #16]	; (b08 <i2s_enableInputDMA+0x20>)
     af6:	ldr	r3, [r2, #0]
     af8:	orr.w	r3, r3, #33554432	; 0x2000000
     afc:	orr.w	r3, r3, #1
     b00:	str	r3, [r2, #0]
     b02:	pop	{r3, pc}
     b04:	.word	0x1fff1314
     b08:	.word	0x4002f080

00000b0c <DMA_init>:
static uint16_t dma_channel_allocated_mask = 0;
static DMA_STRUCT DMAS[DMA_NUM_CHANNELS];

void DMA_init(void)
{
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
     b0c:	ldr	r0, [pc, #32]	; (b30 <DMA_init+0x24>)
	SIM_SCGC7 |= SIM_SCGC7_DMA;
     b0e:	ldr	r1, [pc, #36]	; (b34 <DMA_init+0x28>)
static uint16_t dma_channel_allocated_mask = 0;
static DMA_STRUCT DMAS[DMA_NUM_CHANNELS];

void DMA_init(void)
{
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
     b10:	ldr	r2, [r0, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;

//	DMA_CR = DMA_CR_HALT | DMA_CR_EMLM; // fixed priority arbitration
//	DMA_CR |= DMA_CR_ERCA; // enable round robin arbitration  // good idea?
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG;
     b12:	ldr	r3, [pc, #36]	; (b38 <DMA_init+0x2c>)
static uint16_t dma_channel_allocated_mask = 0;
static DMA_STRUCT DMAS[DMA_NUM_CHANNELS];

void DMA_init(void)
{
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
     b14:	orr.w	r2, r2, #2
     b18:	str	r2, [r0, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
     b1a:	ldr	r2, [r1, #0]

//	DMA_CR = DMA_CR_HALT | DMA_CR_EMLM; // fixed priority arbitration
//	DMA_CR |= DMA_CR_ERCA; // enable round robin arbitration  // good idea?
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG;
     b1c:	movs	r0, #130	; 0x82
static DMA_STRUCT DMAS[DMA_NUM_CHANNELS];

void DMA_init(void)
{
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
     b1e:	orr.w	r2, r2, #2
     b22:	str	r2, [r1, #0]

//	DMA_CR = DMA_CR_HALT | DMA_CR_EMLM; // fixed priority arbitration
//	DMA_CR |= DMA_CR_ERCA; // enable round robin arbitration  // good idea?
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG;
     b24:	str	r0, [r3, #0]
#ifdef __MK66FX1M0__
	DMA_CR |= DMA_CR_GRP1PRI;
     b26:	ldr	r2, [r3, #0]
     b28:	orr.w	r2, r2, #1024	; 0x400
     b2c:	str	r2, [r3, #0]
     b2e:	bx	lr
     b30:	.word	0x4004803c
     b34:	.word	0x40048040
     b38:	.word	0x40008000

00000b3c <DMA_allocate>:
} 

static int DMA_getChannel(int prio)
{	int ch;
	//find proper DMA according to its default priority (0 is lowest 15 is highest priority)
	ch= 4*(prio/4)+(3-(prio %4));
     b3c:	ldr	r2, [pc, #152]	; (bd8 <DMA_allocate+0x9c>)
     b3e:	cmp	r0, #0
     b40:	and.w	r2, r2, r0
     b44:	ite	lt
     b46:	addlt	r3, r0, #3
     b48:	movge	r3, r0
     b4a:	cmp	r2, #0
{// 	vectorPrint16((uint16_t*) dma->TCD,sizeof(DMA_TCD)/2,16,1,',');
}

#define DMA_TCD_BASE 0x40009000 
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
     b4c:	push	{r4, r5, r6, r7, lr}
} 

static int DMA_getChannel(int prio)
{	int ch;
	//find proper DMA according to its default priority (0 is lowest 15 is highest priority)
	ch= 4*(prio/4)+(3-(prio %4));
     b4e:	bic.w	r3, r3, #3
     b52:	blt.n	bc8 <DMA_allocate+0x8c>
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
     b54:	ldr	r7, [pc, #132]	; (bdc <DMA_allocate+0xa0>)
} 

static int DMA_getChannel(int prio)
{	int ch;
	//find proper DMA according to its default priority (0 is lowest 15 is highest priority)
	ch= 4*(prio/4)+(3-(prio %4));
     b56:	rsb	r2, r2, #3
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
     b5a:	ldrh	r4, [r7, #0]
} 

static int DMA_getChannel(int prio)
{	int ch;
	//find proper DMA according to its default priority (0 is lowest 15 is highest priority)
	ch= 4*(prio/4)+(3-(prio %4));
     b5c:	add	r3, r2
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
     b5e:	asr.w	r1, r4, r3
     b62:	ands.w	r1, r1, #1
     b66:	bne.n	bd2 <DMA_allocate+0x96>
		return -1; //no channel found
	else
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
     b68:	and.w	r2, r3, #15
     b6c:	add.w	r2, r2, #1073741824	; 0x40000000
     b70:	add.w	r2, r2, #33024	; 0x8100
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
		return -1; //no channel found
	else
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
     b74:	movs	r6, #1
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
	if((*DCHPRI & 0x0F) != prio) return -1;
     b76:	ldrb	r5, [r2, #0]
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
		return -1; //no channel found
	else
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
     b78:	lsls	r6, r3
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
	if((*DCHPRI & 0x0F) != prio) return -1;
     b7a:	and.w	lr, r5, #15
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
		return -1; //no channel found
	else
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
     b7e:	orrs	r4, r6
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
	if((*DCHPRI & 0x0F) != prio) return -1;
     b80:	cmp	r0, lr
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
		return -1; //no channel found
	else
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
     b82:	strh	r4, [r7, #0]
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
	if((*DCHPRI & 0x0F) != prio) return -1;
     b84:	bne.n	bd2 <DMA_allocate+0x96>

	*DCHPRI |= DMA_DCHPRI_ECP; // allow to be interrupted
     b86:	orn	r5, r5, #127	; 0x7f

#define DMA_TCD_BASE 0x40009000 
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
     b8a:	cmp	r3, #0
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
	if((*DCHPRI & 0x0F) != prio) return -1;

	*DCHPRI |= DMA_DCHPRI_ECP; // allow to be interrupted
     b8c:	strb	r5, [r2, #0]

#define DMA_TCD_BASE 0x40009000 
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
     b8e:	blt.n	bd2 <DMA_allocate+0x96>
	
	DMAS[ch].channel=ch;
     b90:	ldr	r5, [pc, #76]	; (be0 <DMA_allocate+0xa4>)
	DMAS[ch].TCD->DLAST_SGA=0;
	DMAS[ch].TCD->CSR=0;
	DMAS[ch].TCD->BITER=0;
	
	DMAS[ch].ES = (uint32_t *)(0x40008004);
	DMA_CDNE = ch;
     b92:	ldr	r6, [pc, #80]	; (be4 <DMA_allocate+0xa8>)
	DMAS[ch].TCD->CITER=0;
	DMAS[ch].TCD->DLAST_SGA=0;
	DMAS[ch].TCD->CSR=0;
	DMAS[ch].TCD->BITER=0;
	
	DMAS[ch].ES = (uint32_t *)(0x40008004);
     b94:	ldr	r7, [pc, #80]	; (be8 <DMA_allocate+0xac>)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
	
	DMAS[ch].channel=ch;
	DMAS[ch].TCD = (DMA_TCD *)(DMA_TCD_BASE + ch * 32);
     b96:	add.w	r2, r3, #33554432	; 0x2000000
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
	
	DMAS[ch].channel=ch;
     b9a:	lsls	r0, r3, #4
	DMAS[ch].TCD = (DMA_TCD *)(DMA_TCD_BASE + ch * 32);
     b9c:	add.w	r2, r2, #1152	; 0x480
     ba0:	lsls	r2, r2, #5
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
	
	DMAS[ch].channel=ch;
     ba2:	adds	r4, r5, r0
	DMAS[ch].TCD = (DMA_TCD *)(DMA_TCD_BASE + ch * 32);
     ba4:	str	r2, [r5, r0]
	DMAS[ch].TCD->DLAST_SGA=0;
	DMAS[ch].TCD->CSR=0;
	DMAS[ch].TCD->BITER=0;
	
	DMAS[ch].ES = (uint32_t *)(0x40008004);
	DMA_CDNE = ch;
     ba6:	uxtb	r5, r3
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
	
	DMAS[ch].channel=ch;
     ba8:	str	r3, [r4, #8]
	DMAS[ch].TCD = (DMA_TCD *)(DMA_TCD_BASE + ch * 32);
	DMAS[ch].TCD->SADDR=0;
     baa:	str	r1, [r2, #0]
	DMAS[ch].TCD->SOFF=0;
     bac:	strh	r1, [r2, #4]
	DMAS[ch].TCD->ATTR=0;
     bae:	strh	r1, [r2, #6]
	DMAS[ch].TCD->NBYTES=0;
     bb0:	str	r1, [r2, #8]
	DMAS[ch].TCD->SLAST=0;
     bb2:	str	r1, [r2, #12]
	DMAS[ch].TCD->DADDR=0;
     bb4:	str	r1, [r2, #16]
	DMAS[ch].TCD->DOFF=0;
     bb6:	strh	r1, [r2, #20]
	DMAS[ch].TCD->CITER=0;
     bb8:	strh	r1, [r2, #22]
	DMAS[ch].TCD->DLAST_SGA=0;
     bba:	str	r1, [r2, #24]
	DMAS[ch].TCD->CSR=0;
     bbc:	strh	r1, [r2, #28]
	DMAS[ch].TCD->BITER=0;
     bbe:	strh	r1, [r2, #30]
	
	DMAS[ch].ES = (uint32_t *)(0x40008004);
     bc0:	str	r7, [r4, #4]
	DMA_CDNE = ch;
     bc2:	strb	r5, [r6, #0]
	return &DMAS[ch];
     bc4:	mov	r0, r4
     bc6:	pop	{r4, r5, r6, r7, pc}
} 

static int DMA_getChannel(int prio)
{	int ch;
	//find proper DMA according to its default priority (0 is lowest 15 is highest priority)
	ch= 4*(prio/4)+(3-(prio %4));
     bc8:	subs	r2, #1
     bca:	orn	r2, r2, #3
     bce:	adds	r2, #1
     bd0:	b.n	b54 <DMA_allocate+0x18>

#define DMA_TCD_BASE 0x40009000 
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
     bd2:	movs	r0, #0
	DMAS[ch].TCD->BITER=0;
	
	DMAS[ch].ES = (uint32_t *)(0x40008004);
	DMA_CDNE = ch;
	return &DMAS[ch];
}
     bd4:	pop	{r4, r5, r6, r7, pc}
     bd6:	nop
     bd8:	.word	0x80000003
     bdc:	.word	0x1fff1328
     be0:	.word	0x1fff132c
     be4:	.word	0x4000801c
     be8:	.word	0x40008004

00000bec <DMA_source>:
}

void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     bec:	subs	r3, r2, #1
     bee:	cmp	r3, #1
	ch=dma->channel;
	CLEAR_BIT(dma_channel_allocated_mask,(1<<ch));
}

void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;
     bf0:	push	{r4}

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     bf2:	bls.n	bfe <DMA_source+0x12>
     bf4:	cmp	r2, #4
     bf6:	beq.n	bfe <DMA_source+0x12>
	TCD->SADDR = p;
	TCD->SOFF = 0;
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
	TCD->NBYTES = wordsize;
	TCD->SLAST = 0;
}
     bf8:	ldr.w	r4, [sp], #4
     bfc:	bx	lr
	ch=dma->channel;
	CLEAR_BIT(dma_channel_allocated_mask,(1<<ch));
}

void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;
     bfe:	ldr	r3, [r0, #0]

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 0;
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
     c00:	lsls	r4, r2, #7
     c02:	ldrh	r0, [r3, #6]

void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
     c04:	str	r1, [r3, #0]
	TCD->SOFF = 0;
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
     c06:	and.w	r1, r4, #1792	; 0x700
     c0a:	orrs	r1, r0
void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 0;
     c0c:	movs	r0, #0
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
	TCD->NBYTES = wordsize;
     c0e:	str	r2, [r3, #8]
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 0;
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
     c10:	strh	r1, [r3, #6]
void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 0;
     c12:	strh	r0, [r3, #4]
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
	TCD->NBYTES = wordsize;
	TCD->SLAST = 0;
     c14:	str	r0, [r3, #12]
}
     c16:	ldr.w	r4, [sp], #4
     c1a:	bx	lr

00000c1c <DMA_source_2ch>:

void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     c1c:	subs	r3, r2, #1
     c1e:	cmp	r3, #1
	TCD->NBYTES = wordsize;
	TCD->SLAST = 0;
}

void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;
     c20:	push	{r4}

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     c22:	bls.n	c2e <DMA_source_2ch+0x12>
     c24:	cmp	r2, #4
     c26:	beq.n	c2e <DMA_source_2ch+0x12>
//	TCD->SLAST = -8;

	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2) | DMA_TCD_ATTR_SMOD(3);
	TCD->NBYTES = 2*wordsize;
	TCD->SLAST = 0;
}
     c28:	ldr.w	r4, [sp], #4
     c2c:	bx	lr
	TCD->NBYTES = wordsize;
	TCD->SLAST = 0;
}

void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;
     c2e:	ldr	r3, [r0, #0]
//	TCD->NBYTES = DMA_TCD_NBYTES_SMLOE |
//					DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
//					DMA_TCD_NBYTES_MLOFFYES_NBYTES(2*wordsize);
//	TCD->SLAST = -8;

	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2) | DMA_TCD_ATTR_SMOD(3);
     c30:	ldrh	r0, [r3, #6]

void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
     c32:	str	r1, [r3, #0]
//	TCD->NBYTES = DMA_TCD_NBYTES_SMLOE |
//					DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
//					DMA_TCD_NBYTES_MLOFFYES_NBYTES(2*wordsize);
//	TCD->SLAST = -8;

	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2) | DMA_TCD_ATTR_SMOD(3);
     c34:	lsls	r1, r2, #7
     c36:	orr.w	r0, r0, #6144	; 0x1800
     c3a:	and.w	r1, r1, #1792	; 0x700
void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 4;
     c3e:	movs	r4, #4
//	TCD->NBYTES = DMA_TCD_NBYTES_SMLOE |
//					DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
//					DMA_TCD_NBYTES_MLOFFYES_NBYTES(2*wordsize);
//	TCD->SLAST = -8;

	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2) | DMA_TCD_ATTR_SMOD(3);
     c40:	orrs	r1, r0
	TCD->NBYTES = 2*wordsize;
     c42:	lsls	r2, r2, #1
	TCD->SLAST = 0;
     c44:	movs	r0, #0
void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 4;
     c46:	strh	r4, [r3, #4]
//	TCD->NBYTES = DMA_TCD_NBYTES_SMLOE |
//					DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
//					DMA_TCD_NBYTES_MLOFFYES_NBYTES(2*wordsize);
//	TCD->SLAST = -8;

	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2) | DMA_TCD_ATTR_SMOD(3);
     c48:	strh	r1, [r3, #6]
	TCD->NBYTES = 2*wordsize;
     c4a:	str	r2, [r3, #8]
	TCD->SLAST = 0;
     c4c:	str	r0, [r3, #12]
}
     c4e:	ldr.w	r4, [sp], #4
     c52:	bx	lr

00000c54 <DMA_destinationBuffer>:
	TCD->NBYTES = 2*wordsize;
	TCD->DLAST_SGA = 0;
}

void DMA_destinationBuffer(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;
     c54:	push	{r4, r5}

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     c56:	subs	r4, r3, #1
     c58:	cmp	r4, #1
     c5a:	bls.n	c64 <DMA_destinationBuffer+0x10>
     c5c:	cmp	r3, #4
     c5e:	beq.n	c64 <DMA_destinationBuffer+0x10>
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*len; // is in bytes
	TCD->BITER = TCD->CITER = len; // number of major transfers
}
     c60:	pop	{r4, r5}
     c62:	bx	lr
	TCD->NBYTES = 2*wordsize;
	TCD->DLAST_SGA = 0;
}

void DMA_destinationBuffer(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;
     c64:	ldr	r0, [r0, #0]

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     c66:	ldrh	r4, [r0, #6]

void DMA_destinationBuffer(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
     c68:	str	r1, [r0, #16]
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     c6a:	ubfx	r5, r3, #1, #3
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*len; // is in bytes
     c6e:	negs	r1, r3
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     c70:	orrs	r4, r5
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*len; // is in bytes
     c72:	mul.w	r1, r2, r1
	TCD->BITER = TCD->CITER = len; // number of major transfers
     c76:	uxth	r2, r2
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     c78:	strh	r4, [r0, #6]
void DMA_destinationBuffer(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
     c7a:	strh	r3, [r0, #20]
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*len; // is in bytes
     c7c:	str	r1, [r0, #24]
	TCD->BITER = TCD->CITER = len; // number of major transfers
     c7e:	strh	r2, [r0, #22]
     c80:	strh	r2, [r0, #30]
}
     c82:	pop	{r4, r5}
     c84:	bx	lr
     c86:	nop

00000c88 <DMA_destinationBuffer_2ch>:

void DMA_destinationBuffer_2ch(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;
     c88:	push	{r4, r5, r6}

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     c8a:	subs	r4, r3, #1
     c8c:	cmp	r4, #1
     c8e:	bls.n	c98 <DMA_destinationBuffer_2ch+0x10>
     c90:	cmp	r3, #4
     c92:	beq.n	c98 <DMA_destinationBuffer_2ch+0x10>
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*2*len; // is in bytes, is twice the size of single transfer buffer
	TCD->BITER = TCD->CITER = len; // number of major transfers
}
     c94:	pop	{r4, r5, r6}
     c96:	bx	lr
	TCD->DLAST_SGA = -wordsize*len; // is in bytes
	TCD->BITER = TCD->CITER = len; // number of major transfers
}

void DMA_destinationBuffer_2ch(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;
     c98:	ldr	r0, [r0, #0]
	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*2*len; // is in bytes, is twice the size of single transfer buffer
     c9a:	lsls	r4, r2, #1
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     c9c:	ldrh	r5, [r0, #6]

void DMA_destinationBuffer_2ch(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
     c9e:	str	r1, [r0, #16]
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     ca0:	ubfx	r6, r3, #1, #3
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*2*len; // is in bytes, is twice the size of single transfer buffer
     ca4:	negs	r1, r4
	TCD->BITER = TCD->CITER = len; // number of major transfers
     ca6:	uxth	r2, r2
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     ca8:	orr.w	r4, r6, r5
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*2*len; // is in bytes, is twice the size of single transfer buffer
     cac:	mul.w	r1, r3, r1
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     cb0:	strh	r4, [r0, #6]
void DMA_destinationBuffer_2ch(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
     cb2:	strh	r3, [r0, #20]
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*2*len; // is in bytes, is twice the size of single transfer buffer
     cb4:	str	r1, [r0, #24]
	TCD->BITER = TCD->CITER = len; // number of major transfers
     cb6:	strh	r2, [r0, #22]
     cb8:	strh	r2, [r0, #30]
}
     cba:	pop	{r4, r5, r6}
     cbc:	bx	lr
     cbe:	nop

00000cc0 <DMA_interruptAtCompletion>:

	TCD->BITER = TCD->CITER = len; // number of words
}

void DMA_interruptAtCompletion(DMA_STRUCT *dma) 
{ 	DMA_TCD *TCD=dma->TCD;
     cc0:	ldr	r2, [r0, #0]
	TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
     cc2:	ldrh	r3, [r2, #28]
     cc4:	orr.w	r3, r3, #2
     cc8:	strh	r3, [r2, #28]
     cca:	bx	lr

00000ccc <DMA_interruptAtHalf>:
}

void DMA_interruptAtHalf(DMA_STRUCT *dma) 
{ 	DMA_TCD *TCD=dma->TCD;
     ccc:	ldr	r2, [r0, #0]
	TCD->CSR |= DMA_TCD_CSR_INTHALF;
     cce:	ldrh	r3, [r2, #28]
     cd0:	orr.w	r3, r3, #4
     cd4:	strh	r3, [r2, #28]
     cd6:	bx	lr

00000cd8 <DMA_enable>:
	TCD->CSR = DMA_TCD_CSR_START;
}

void DMA_enable(DMA_STRUCT *dma) 
{
	DMA_SERQ = dma->channel;
     cd8:	ldr	r3, [pc, #4]	; (ce0 <DMA_enable+0x8>)
     cda:	ldrb	r2, [r0, #8]
     cdc:	strb	r2, [r3, #0]
     cde:	bx	lr
     ce0:	.word	0x4000801b

00000ce4 <DMA_disable>:
}

void DMA_disable(DMA_STRUCT *dma) 
{
	DMA_CERQ = dma->channel;
     ce4:	ldr	r3, [pc, #4]	; (cec <DMA_disable+0x8>)
     ce6:	ldrb	r2, [r0, #8]
     ce8:	strb	r2, [r3, #0]
     cea:	bx	lr
     cec:	.word	0x4000801a

00000cf0 <DMA_haltAll>:
{ 	DMA_TCD *TCD=dma->TCD;
	TCD->CSR |= DMA_TCD_CSR_DREQ;
}

void DMA_haltAll(void)
{ 	SET_BIT(DMA_CR,DMA_CR_HALT);
     cf0:	ldr	r2, [pc, #8]	; (cfc <DMA_haltAll+0xc>)
     cf2:	ldr	r3, [r2, #0]
     cf4:	orr.w	r3, r3, #32
     cf8:	str	r3, [r2, #0]
     cfa:	bx	lr
     cfc:	.word	0x40008000

00000d00 <DMA_startAll>:
}

void DMA_startAll(void)
{ 	CLEAR_BIT(DMA_CR,DMA_CR_HALT);
     d00:	ldr	r2, [pc, #8]	; (d0c <DMA_startAll+0xc>)
     d02:	ldr	r3, [r2, #0]
     d04:	bic.w	r3, r3, #32
     d08:	str	r3, [r2, #0]
     d0a:	bx	lr
     d0c:	.word	0x40008000

00000d10 <DMA_destinationAddress>:
	return (void *)(TCD->SADDR);
}

void *DMA_destinationAddress(DMA_STRUCT *dma) 
{ 	DMA_TCD *TCD=dma->TCD;
	return (void *)(TCD->DADDR);
     d10:	ldr	r3, [r0, #0]
}
     d12:	ldr	r0, [r3, #16]
     d14:	bx	lr
     d16:	nop

00000d18 <DMA_triggerAtHardwareEvent>:

//=====================================================================================	
void DMA_triggerAtHardwareEvent(DMA_STRUCT *dma, uint8_t source) 
{
	volatile uint8_t *mux;
	mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + dma->channel;  // on T3.6 are 32 DMA entries
     d18:	ldr	r3, [r0, #8]
     d1a:	add.w	r3, r3, #1073741824	; 0x40000000
     d1e:	add.w	r3, r3, #135168	; 0x21000
	*mux = 0;
	*mux = (source & 63) | DMAMUX_ENABLE;
     d22:	and.w	r1, r1, #63	; 0x3f
     d26:	orr.w	r1, r1, #128	; 0x80
//=====================================================================================	
void DMA_triggerAtHardwareEvent(DMA_STRUCT *dma, uint8_t source) 
{
	volatile uint8_t *mux;
	mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + dma->channel;  // on T3.6 are 32 DMA entries
	*mux = 0;
     d2a:	movs	r2, #0
     d2c:	strb	r2, [r3, #0]
	*mux = (source & 63) | DMAMUX_ENABLE;
     d2e:	strb	r1, [r3, #0]
     d30:	bx	lr
     d32:	nop

00000d34 <DMA_attachInterrupt>:
}

//=====================================================================================	
void DMA_attachInterrupt(DMA_STRUCT *dma, void (*isr)(void)) 
{
	_VectorsRam[IRQ_DMA_CH0 + 16 + dma->channel % 16] = isr;	// on T3.6 are only 16 interrupt slots
     d34:	ldr	r2, [r0, #8]
     d36:	ldr	r3, [pc, #56]	; (d70 <DMA_attachInterrupt+0x3c>)
     d38:	ands	r3, r2
     d3a:	cmp	r3, #0
	*mux = (source & 63) | DMAMUX_ENABLE;
}

//=====================================================================================	
void DMA_attachInterrupt(DMA_STRUCT *dma, void (*isr)(void)) 
{
     d3c:	push	{r4, r5}
	_VectorsRam[IRQ_DMA_CH0 + 16 + dma->channel % 16] = isr;	// on T3.6 are only 16 interrupt slots
     d3e:	blt.n	d66 <DMA_attachInterrupt+0x32>
	NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + dma->channel % 16);
     d40:	asrs	r2, r3, #5
     d42:	lsls	r2, r2, #2
     d44:	add.w	r2, r2, #3758096384	; 0xe0000000
}

//=====================================================================================	
void DMA_attachInterrupt(DMA_STRUCT *dma, void (*isr)(void)) 
{
	_VectorsRam[IRQ_DMA_CH0 + 16 + dma->channel % 16] = isr;	// on T3.6 are only 16 interrupt slots
     d48:	add.w	r5, r3, #16
     d4c:	ldr	r4, [pc, #36]	; (d74 <DMA_attachInterrupt+0x40>)
	NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + dma->channel % 16);
     d4e:	add.w	r2, r2, #57600	; 0xe100
     d52:	and.w	r3, r3, #31
     d56:	movs	r0, #1
     d58:	lsl.w	r3, r0, r3
}

//=====================================================================================	
void DMA_attachInterrupt(DMA_STRUCT *dma, void (*isr)(void)) 
{
	_VectorsRam[IRQ_DMA_CH0 + 16 + dma->channel % 16] = isr;	// on T3.6 are only 16 interrupt slots
     d5c:	str.w	r1, [r4, r5, lsl #2]
	NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + dma->channel % 16);
     d60:	str	r3, [r2, #0]
}
     d62:	pop	{r4, r5}
     d64:	bx	lr
}

//=====================================================================================	
void DMA_attachInterrupt(DMA_STRUCT *dma, void (*isr)(void)) 
{
	_VectorsRam[IRQ_DMA_CH0 + 16 + dma->channel % 16] = isr;	// on T3.6 are only 16 interrupt slots
     d66:	subs	r3, #1
     d68:	orn	r3, r3, #15
     d6c:	adds	r3, #1
     d6e:	b.n	d40 <DMA_attachInterrupt+0xc>
     d70:	.word	0x8000000f
     d74:	.word	0x1fff0200

00000d78 <DMA_clearInterrupt>:
	NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + dma->channel % 16);
}

void DMA_clearInterrupt(DMA_STRUCT *dma) 
{
	DMA_CINT = dma->channel;	// on T3.6 CINT has 32 entries
     d78:	ldr	r3, [pc, #4]	; (d80 <DMA_clearInterrupt+0x8>)
     d7a:	ldrb	r2, [r0, #8]
     d7c:	strb	r2, [r3, #0]
     d7e:	bx	lr
     d80:	.word	0x4000801f

00000d84 <llwuISR>:

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     d84:	ldr	r2, [pc, #16]	; (d98 <llwuISR+0x14>)
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     d86:	ldr	r1, [pc, #20]	; (d9c <llwuISR+0x18>)

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     d88:	ldrb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     d8a:	movs	r0, #0

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     d8c:	orr.w	r3, r3, #32
     d90:	strb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     d92:	str	r0, [r1, #0]
     d94:	bx	lr
     d96:	nop
     d98:	.word	0x4007c00d
     d9c:	.word	0x4003d01c

00000da0 <hibernate>:
       asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void hibernate(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
     da0:	push	{r3, r4, r5, r6, r7, lr}
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     da2:	ldr	r4, [pc, #268]	; (eb0 <hibernate+0x110>)
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     da4:	ldr	r2, [pc, #268]	; (eb4 <hibernate+0x114>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     da6:	ldr	r3, [r4, #0]
    RTC_IER = 0;// clear RTC interrupts
}

void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
     da8:	ldr	r1, [pc, #268]	; (eb8 <hibernate+0x118>)
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
     daa:	ldr	r7, [pc, #272]	; (ebc <hibernate+0x11c>)
  LLWU_PE2 = 0;
     dac:	ldr	r6, [pc, #272]	; (ec0 <hibernate+0x120>)
  LLWU_PE3 = 0;
     dae:	ldr	r5, [pc, #276]	; (ec4 <hibernate+0x124>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     db0:	orr.w	r3, r3, #536870912	; 0x20000000
     db4:	str	r3, [r4, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     db6:	ldr	r3, [r2, #0]
     db8:	orr.w	r3, r3, #256	; 0x100
       asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void hibernate(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
     dbc:	mov	r4, r0
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     dbe:	str	r3, [r2, #0]
    RTC_IER = 0;// clear RTC interrupts
}

void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
     dc0:	movs	r0, #21
     dc2:	bl	9938 <attachInterruptVector>
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
     dc6:	ldr	r3, [pc, #256]	; (ec8 <hibernate+0x128>)
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
     dc8:	ldr.w	ip, [pc, #288]	; eec <hibernate+0x14c>
  NVIC_ENABLE_IRQ( IRQ_LLWU );
     dcc:	ldr.w	lr, [pc, #288]	; ef0 <hibernate+0x150>
//
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
     dd0:	ldr	r1, [pc, #248]	; (ecc <hibernate+0x12c>)
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
     dd2:	ldr	r0, [pc, #252]	; (ed0 <hibernate+0x130>)
}

void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
     dd4:	movs	r2, #32
     dd6:	strb	r2, [r3, #0]
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
     dd8:	mov.w	r3, #2097152	; 0x200000
     ddc:	str.w	r3, [ip]
  NVIC_ENABLE_IRQ( IRQ_LLWU );
     de0:	str.w	r3, [lr]
//
  LLWU_PE1 = 0;
     de4:	movs	r3, #0
     de6:	strb	r3, [r7, #0]
  LLWU_PE2 = 0;
     de8:	strb	r3, [r6, #0]
  LLWU_PE3 = 0;
     dea:	strb	r3, [r5, #0]
  LLWU_PE4 = 0;
     dec:	strb	r3, [r1, #0]
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
     dee:	strb	r3, [r0, #0]
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     df0:	sub.w	r0, r0, #217088	; 0x35000
  LLWU_PE2 = 0;
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
  LLWU_PE6 = 0;
     df4:	strb	r3, [r7, #5]
  LLWU_PE7 = 0;
     df6:	strb	r3, [r6, #5]
  LLWU_PE8 = 0;
     df8:	strb	r3, [r5, #5]
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
     dfa:	strb	r2, [r1, #5]
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     dfc:	ldr	r2, [r0, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     dfe:	ldr	r1, [pc, #212]	; (ed4 <hibernate+0x134>)
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
     e00:	ldr.w	ip, [pc, #240]	; ef4 <hibernate+0x154>
    PORTA_PCR1 = PORT_PCR_MUX(0);
     e04:	ldr.w	lr, [pc, #240]	; ef8 <hibernate+0x158>
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     e08:	orr.w	r2, r2, #67108864	; 0x4000000
     e0c:	str	r2, [r0, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     e0e:	ldr	r2, [r1, #0]
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
    PORTA_PCR3 = PORT_PCR_MUX(0);

    PORTB_PCR2 = PORT_PCR_MUX(0);
    PORTB_PCR3 = PORT_PCR_MUX(0);
     e10:	add.w	r0, r0, #12288	; 0x3000
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
     e14:	sub.w	r7, r7, #207872	; 0x32c00
    PORTA_PCR3 = PORT_PCR_MUX(0);
     e18:	sub.w	r6, r6, #207872	; 0x32c00

    PORTB_PCR2 = PORT_PCR_MUX(0);
     e1c:	sub.w	r5, r5, #203776	; 0x31c00
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
     e20:	sub.w	r7, r7, #1016	; 0x3f8
    PORTA_PCR3 = PORT_PCR_MUX(0);
     e24:	subw	r6, r6, #1013	; 0x3f5

    PORTB_PCR2 = PORT_PCR_MUX(0);
     e28:	subw	r5, r5, #1018	; 0x3fa
    PORTB_PCR3 = PORT_PCR_MUX(0);
     e2c:	adds	r0, #8
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     e2e:	orr.w	r2, r2, #1073741824	; 0x40000000
     e32:	str	r2, [r1, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e34:	ldr	r2, [pc, #160]	; (ed8 <hibernate+0x138>)
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
     e36:	str.w	r3, [ip]
    PORTA_PCR1 = PORT_PCR_MUX(0);
     e3a:	str.w	r3, [lr]
    PORTA_PCR2 = PORT_PCR_MUX(0);
     e3e:	str	r3, [r7, #0]
    PORTA_PCR3 = PORT_PCR_MUX(0);
     e40:	str	r3, [r6, #0]

    PORTB_PCR2 = PORT_PCR_MUX(0);
     e42:	str	r3, [r5, #0]
    PORTB_PCR3 = PORT_PCR_MUX(0);
     e44:	str	r3, [r0, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e46:	ldr	r0, [r2, #0]

#define VLLS_MODE VLLS0
void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     e48:	ldr	r5, [pc, #144]	; (edc <hibernate+0x13c>)
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
     e4a:	ldr	r7, [pc, #148]	; (ee0 <hibernate+0x140>)
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e4c:	sub.w	r1, r1, #40704	; 0x9f00
   RTC_IER |= RTC_IER_TAIE_MASK;
     e50:	sub.w	lr, lr, #48896	; 0xbf00
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e54:	subs	r1, #248	; 0xf8
   RTC_IER |= RTC_IER_TAIE_MASK;
     e56:	sub.w	lr, lr, #232	; 0xe8
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e5a:	add	r0, r4
     e5c:	str	r0, [r1, #0]
   RTC_IER |= RTC_IER_TAIE_MASK;
     e5e:	ldr.w	r1, [lr]

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
     e62:	ldr	r4, [pc, #128]	; (ee4 <hibernate+0x144>)
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
     e64:	ldr	r0, [pc, #128]	; (ee8 <hibernate+0x148>)
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
   RTC_IER |= RTC_IER_TAIE_MASK;
     e66:	orr.w	r1, r1, #4
     e6a:	str.w	r1, [lr]

#define VLLS_MODE VLLS0
void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     e6e:	ldrb	r1, [r5, #5]
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     e70:	add.w	r2, r2, #266240	; 0x41000

#define VLLS_MODE VLLS0
void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     e74:	and.w	r1, r1, #223	; 0xdf
     e78:	strb	r1, [r5, #5]
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     e7a:	adds	r2, #1
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
     e7c:	movs	r1, #2
     e7e:	strb	r1, [r7, #0]
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     e80:	ldrb	r1, [r2, #0]
     e82:	and.w	r1, r1, #248	; 0xf8
     e86:	strb	r1, [r2, #0]
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx
     e88:	ldrb	r1, [r2, #0]

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
     e8a:	add.w	r6, r6, #216064	; 0x34c00
     e8e:	addw	r6, r6, #1014	; 0x3f6
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx
     e92:	orr.w	r1, r1, #4
     e96:	strb	r1, [r2, #0]

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
     e98:	strb	r3, [r6, #0]
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;
     e9a:	ldrb	r3, [r2, #0]

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
     e9c:	ldr	r3, [r4, #0]
     e9e:	bic.w	r3, r3, #2
     ea2:	str	r3, [r4, #0]
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
     ea4:	ldr	r3, [r0, #0]
     ea6:	orr.w	r3, r3, #4
     eaa:	str	r3, [r0, #0]
       asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
     eac:	wfi
     eae:	pop	{r3, r4, r5, r6, r7, pc}
     eb0:	.word	0x4004803c
     eb4:	.word	0x4003d010
     eb8:	.word	0x00000d85
     ebc:	.word	0x4007c000
     ec0:	.word	0x4007c001
     ec4:	.word	0x4007c002
     ec8:	.word	0xe000e415
     ecc:	.word	0x4007c003
     ed0:	.word	0x4007c004
     ed4:	.word	0x40047000
     ed8:	.word	0x4003d000
     edc:	.word	0x40064000
     ee0:	.word	0x4007e000
     ee4:	.word	0xe000e010
     ee8:	.word	0xe000ed10
     eec:	.word	0xe000e280
     ef0:	.word	0xe000e100
     ef4:	.word	0x40049000
     ef8:	.word	0x40049004

00000efc <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     efc:	movs	r0, #0
     efe:	bx	lr

00000f00 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     f00:	mov.w	r0, #4294967295
     f04:	bx	lr
     f06:	nop

00000f08 <mySystick_isr()>:
int doHibernate=0;

// to disable EventResponder
// (https://forum.pjrc.com/threads/46442-Minimal-Blink-fails-with-void-yield()?p=153602&viewfull=1#post153602)
extern "C" volatile uint32_t systick_millis_count;
void mySystick_isr(void){ systick_millis_count++;}
     f08:	ldr	r2, [pc, #8]	; (f14 <mySystick_isr()+0xc>)
     f0a:	ldr	r3, [r2, #0]
     f0c:	adds	r3, #1
     f0e:	str	r3, [r2, #0]
     f10:	bx	lr
     f12:	nop
     f14:	.word	0x200203c0

00000f18 <Logger<long, 300, 128, 64>::drain()>:
        return -1;
    }
  }
  
template <typename T, int nq, int nd, int na>
void * Logger<T,nq,nd,na>:: drain(void)
     f18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    uint16_t n;
    if(head>tail) n=head-tail; else n = nq + head -tail;
     f1c:	add.w	r9, r0, #154624	; 0x25c00
     f20:	ldrsh.w	r8, [r9, #200]	; 0xc8
     f24:	ldrsh.w	r3, [r9, #202]	; 0xca
     f28:	cmp	r8, r3
     f2a:	it	le
     f2c:	addle.w	r2, r8, #300	; 0x12c
     f30:	uxth	r3, r3
     f32:	ite	gt
     f34:	rsbgt	r2, r3, r8
     f38:	suble	r2, r2, r3
     f3a:	uxth	r2, r2

    int16_t nb=na; // na is number of buffers to fetched from queue and written to disk
    if(n>nb)
     f3c:	cmp	r2, #64	; 0x40
  
template <typename T, int nq, int nd, int na>
void * Logger<T,nq,nd,na>:: drain(void)
  {
    uint16_t n;
    if(head>tail) n=head-tail; else n = nq + head -tail;
     f3e:	mov	r5, r3

    int16_t nb=na; // na is number of buffers to fetched from queue and written to disk
    if(n>nb)
     f40:	ble.n	fa8 <Logger<long, 300, 128, 64>::drain()+0x90>
    {
      T *bptr = buffer;
     f42:	add.w	fp, r9, #208	; 0xd0
     f46:	mov	lr, fp
     f48:	movs	r6, #64	; 0x40
          // copy to buffer     
          { T *src = queue[t];
            if(src)
            { for(int jj=0; jj<nd; jj++) bptr[jj]=src[jj];
              pool.release(t);
              queue[t]=0;
     f4a:	mov.w	sl, #0
      T *bptr = buffer;
      //
      uint16_t t = tail;
      while(--nb>=0)
      {
        if (t != head) 
     f4e:	cmp	r5, r8
     f50:	beq.n	f90 <Logger<long, 300, 128, 64>::drain()+0x78>
        {
          if (++t >= nq) t = 0;
     f52:	adds	r5, #1
     f54:	uxth	r5, r5
     f56:	cmp.w	r5, #300	; 0x12c
     f5a:	bcs.n	f9e <Logger<long, 300, 128, 64>::drain()+0x86>
     f5c:	mov	r7, r5
     f5e:	sxth.w	ip, r5
     f62:	add.w	r7, r0, r7, lsl #2
          
          // copy to buffer     
          { T *src = queue[t];
     f66:	add.w	r7, r7, #153600	; 0x25800
     f6a:	ldr	r4, [r7, #24]
            if(src)
     f6c:	cbz	r4, f88 <Logger<long, 300, 128, 64>::drain()+0x70>
     f6e:	subs	r3, r4, #4
     f70:	sub.w	r2, lr, #4
     f74:	add.w	r4, r4, #508	; 0x1fc
            { for(int jj=0; jj<nd; jj++) bptr[jj]=src[jj];
     f78:	ldr.w	r1, [r3, #4]!
     f7c:	str.w	r1, [r2, #4]!
     f80:	cmp	r4, r3
     f82:	bne.n	f78 <Logger<long, 300, 128, 64>::drain()+0x60>
              pool.release(t);
              queue[t]=0;
     f84:	str.w	sl, [r7, #24]
            }
          }
          tail = t;
     f88:	strh.w	ip, [r9, #202]	; 0xca
          bptr += nd;
     f8c:	add.w	lr, lr, #512	; 0x200
     f90:	subs	r6, #1
     f92:	uxth	r6, r6
    if(n>nb)
    {
      T *bptr = buffer;
      //
      uint16_t t = tail;
      while(--nb>=0)
     f94:	cmp	r6, #0
     f96:	bne.n	f4e <Logger<long, 300, 128, 64>::drain()+0x36>
          }
          tail = t;
          bptr += nd;
        }
      }
      return (void *)buffer;
     f98:	mov	r0, fp
    }
    return 0;
  }
     f9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f9e:	mov.w	ip, #0
     fa2:	mov	r7, ip
      uint16_t t = tail;
      while(--nb>=0)
      {
        if (t != head) 
        {
          if (++t >= nq) t = 0;
     fa4:	mov	r5, ip
     fa6:	b.n	f62 <Logger<long, 300, 128, 64>::drain()+0x4a>
          bptr += nd;
        }
      }
      return (void *)buffer;
    }
    return 0;
     fa8:	movs	r0, #0
     faa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fae:	nop

00000fb0 <Logger<long, 300, 128, 64>::haveFinished()>:
  //
  void clear(void);
  //
  void *drain(void);
  int16_t write(void *src);
  void haveFinished(void) {enabled=0;} // got signal from uSD_IF
     fb0:	add.w	r0, r0, #154624	; 0x25c00
     fb4:	movs	r3, #0
     fb6:	strh.w	r3, [r0, #204]	; 0xcc
     fba:	bx	lr

00000fbc <c_mFS::~c_mFS()>:
{ struct tm tx=seconds2tm(RTC_TSR);  
  return tx.tm_hour;
}

uint16_t FS_started=0;
class c_mFS
     fbc:	push	{r4, lr}
class FsFile {
#endif  // ENABLE_ARDUINO_FEATURES
 public:
  FsFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsFile() {close();}
     fbe:	ldr	r3, [pc, #20]	; (fd4 <c_mFS::~c_mFS()+0x18>)
     fc0:	str.w	r3, [r0, #1208]	; 0x4b8
     fc4:	mov	r4, r0
     fc6:	add.w	r0, r0, #1208	; 0x4b8
     fca:	bl	31f8 <FsFile::close()>
     fce:	mov	r0, r4
     fd0:	pop	{r4, pc}
     fd2:	nop
     fd4:	.word	0x00013798

00000fd8 <FsFile::peek()>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
     fd8:	ldr	r3, [r0, #72]	; 0x48
           m_xFile ? m_xFile->peek() : -1;
     fda:	cbz	r3, fe2 <FsFile::peek()+0xa>
     fdc:	mov	r0, r3
     fde:	b.w	5458 <FatFile::peek()>
     fe2:	ldr	r0, [r0, #76]	; 0x4c
     fe4:	cbz	r0, fea <FsFile::peek()+0x12>
     fe6:	b.w	3654 <ExFatFile::peek()>
  }
     fea:	mov.w	r0, #4294967295
     fee:	bx	lr

00000ff0 <FsFile::flush()>:
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {sync();}
     ff0:	ldr	r3, [r0, #72]	; 0x48
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     ff2:	cbz	r3, ffa <FsFile::flush()+0xa>
     ff4:	mov	r0, r3
     ff6:	b.w	5608 <FatFile::sync()>
     ffa:	ldr	r0, [r0, #76]	; 0x4c
     ffc:	cbz	r0, 1002 <FsFile::flush()+0x12>
     ffe:	b.w	4924 <ExFatFile::sync()>
    1002:	bx	lr

00001004 <FsFile::available()>:
  operator bool() {return isOpen();}
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
    1004:	ldr	r2, [r0, #72]	; 0x48
           m_xFile ? m_xFile->available() : 0;
    1006:	cbz	r2, 1022 <FsFile::available()+0x1e>
  void fsetpos(fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
    1008:	ldrb	r3, [r2, #0]
    100a:	and.w	r3, r3, #8
    100e:	and.w	r0, r3, #255	; 0xff
    1012:	cbz	r3, 1056 <FsFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
    1014:	ldr	r3, [r2, #28]
    1016:	ldr	r0, [r2, #20]
    1018:	subs	r0, r3, r0
    101a:	it	mi
    101c:	mvnmi.w	r0, #2147483648	; 0x80000000
    1020:	bx	lr
    1022:	ldr	r1, [r0, #76]	; 0x4c
    1024:	cbz	r1, 1058 <FsFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
    1026:	ldrb.w	r3, [r1, #49]	; 0x31
    102a:	and.w	r3, r3, #8
    102e:	and.w	r0, r3, #255	; 0xff
    1032:	cbz	r3, 1056 <FsFile::available()+0x52>
    1034:	ldrd	r2, r3, [r1, #16]
    1038:	ldrd	r0, r1, [r1]
    103c:	subs	r0, r2, r0
    */
  operator bool() {return isOpen();}
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    103e:	push	{r4, r5}
    1040:	sbc.w	r1, r3, r1
    1044:	movs	r5, #0
    1046:	mvn.w	r4, #2147483648	; 0x80000000
    104a:	cmp	r5, r1
    104c:	it	eq
    104e:	cmpeq	r4, r0
    1050:	bcs.n	1054 <FsFile::available()+0x50>
    1052:	mov	r0, r4
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
  }
    1054:	pop	{r4, r5}
    1056:	bx	lr
    1058:	mov	r0, r1
    105a:	bx	lr

0000105c <FsFile::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {return write(&b, 1);}
    105c:	push	{lr}
    105e:	ldr	r3, [r0, #72]	; 0x48
    1060:	sub	sp, #12
    1062:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1066:	cbz	r3, 107a <FsFile::write(unsigned char)+0x1e>
    1068:	mov	r0, r3
    106a:	movs	r2, #1
    106c:	add.w	r1, sp, #7
    1070:	bl	5738 <FatFile::write(void const*, unsigned int)>
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {return write(&b, 1);}
    1074:	add	sp, #12
    1076:	ldr.w	pc, [sp], #4
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    107a:	ldr	r0, [r0, #76]	; 0x4c
    107c:	cmp	r0, #0
    107e:	beq.n	1074 <FsFile::write(unsigned char)+0x18>
    1080:	movs	r2, #1
    1082:	add.w	r1, sp, #7
    1086:	bl	4c80 <ExFatFile::write(void const*, unsigned int)>
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {return write(&b, 1);}
    108a:	add	sp, #12
    108c:	ldr.w	pc, [sp], #4

00001090 <FsFile::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    1090:	push	{lr}
    1092:	ldr	r3, [r0, #72]	; 0x48
    1094:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    1096:	cbz	r3, 10b2 <FsFile::read()+0x22>
    1098:	mov	r0, r3
    109a:	movs	r2, #1
    109c:	add.w	r1, sp, #7
    10a0:	bl	52bc <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    10a4:	cmp	r0, #1
    10a6:	bne.n	10c2 <FsFile::read()+0x32>
    10a8:	ldrb.w	r0, [sp, #7]
  }
    10ac:	add	sp, #12
    10ae:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    10b2:	ldr	r0, [r0, #76]	; 0x4c
    10b4:	cbz	r0, 10c2 <FsFile::read()+0x32>
    10b6:	movs	r2, #1
    10b8:	add.w	r1, sp, #7
    10bc:	bl	34a8 <ExFatFile::read(void*, unsigned int)>
    10c0:	b.n	10a4 <FsFile::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    10c2:	mov.w	r0, #4294967295
    10c6:	b.n	10ac <FsFile::read()+0x1c>

000010c8 <Logger<long, 300, 128, 64>::write(void*)>:
    }
    tail = t;
  }

template <typename T, int nq, int nd, int na>
int16_t Logger<T,nq,nd,na>:: write(void *inp)
    10c8:	push	{r4, r5, r6}
  {
    int16_t h;

    if(!enabled) return 0; // don't do anything
    10ca:	add.w	r6, r0, #154624	; 0x25c00
    10ce:	ldrsh.w	r5, [r6, #204]	; 0xcc
    10d2:	cbz	r5, 1116 <Logger<long, 300, 128, 64>::write(void*)+0x4e>
    
    h = head + 1;
    10d4:	ldrh.w	r5, [r6, #200]	; 0xc8
    if (h >= nq) h = 0;
    if (h == tail) {  // disaster
    10d8:	ldrsh.w	r3, [r6, #202]	; 0xca
  {
    int16_t h;

    if(!enabled) return 0; // don't do anything
    
    h = head + 1;
    10dc:	adds	r5, #1
    10de:	sxth	r5, r5
    if (h >= nq) h = 0;
    10e0:	cmp.w	r5, #300	; 0x12c
    10e4:	it	ge
    10e6:	movge	r5, #0
    if (h == tail) {  // disaster
    10e8:	cmp	r3, r5
    10ea:	beq.n	111c <Logger<long, 300, 128, 64>::write(void*)+0x54>
      overrun++;
      // simply ignore new data
      return -1;
    } 
    else 
    { queue[h] = pool.fetch(h);
    10ec:	add.w	r3, r5, #38400	; 0x9600
    10f0:	adds	r3, #6
class store
{ T pool[nb*nd];

  public:
  store(void) {;}
  T *fetch(int ii) {return &pool[ii*nd];}
    10f2:	add.w	r2, r0, #24
    10f6:	add.w	r2, r2, r5, lsl #9
      overrun++;
      // simply ignore new data
      return -1;
    } 
    else 
    { queue[h] = pool.fetch(h);
    10fa:	str.w	r2, [r0, r3, lsl #2]
    10fe:	add.w	r4, r1, #508	; 0x1fc
    1102:	subs	r2, #4
    1104:	subs	r3, r1, #4
      T *ptr = queue[h];
      if(ptr)
      { T *src = (T*) inp;
        for(int ii=0; ii<nd; ii++) ptr[ii]=src[ii];
    1106:	ldr.w	r1, [r3, #4]!
    110a:	str.w	r1, [r2, #4]!
    110e:	cmp	r3, r4
    1110:	bne.n	1106 <Logger<long, 300, 128, 64>::write(void*)+0x3e>
        head = h;
    1112:	strh.w	r5, [r6, #200]	; 0xc8
        return head;
      }
      else
        return -1;
    }
  }
    1116:	mov	r0, r5
    1118:	pop	{r4, r5, r6}
    111a:	bx	lr
    if(!enabled) return 0; // don't do anything
    
    h = head + 1;
    if (h >= nq) h = 0;
    if (h == tail) {  // disaster
      overrun++;
    111c:	ldr	r3, [r0, #4]
    111e:	adds	r3, #1
    1120:	str	r3, [r0, #4]
      // simply ignore new data
      return -1;
    1122:	mov.w	r5, #4294967295
    1126:	b.n	1116 <Logger<long, 300, 128, 64>::write(void*)+0x4e>

00001128 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1128:	push	{r4, r5, r6, lr}
    112a:	mov	r4, r0
    112c:	mov	r0, r1
    112e:	mov	r5, r1
    1130:	bl	d1c0 <strlen>
    1134:	ldr	r3, [r4, #0]
    1136:	mov	r2, r0
    1138:	mov	r1, r5
    113a:	mov	r0, r4
    113c:	ldr	r3, [r3, #4]
    113e:	ldmia.w	sp!, {r4, r5, r6, lr}
    1142:	bx	r3

00001144 <Print::println(__FlashStringHelper const*)>:
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1144:	push	{r3, r4, r5, lr}
    1146:	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1148:	mov	r0, r1
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    114a:	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    114c:	bl	d1c0 <strlen>
    1150:	ldr	r3, [r4, #0]
    1152:	mov	r2, r0
    1154:	mov	r1, r5
    1156:	ldr	r3, [r3, #4]
    1158:	mov	r0, r4
    115a:	blx	r3
    115c:	mov	r5, r0
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    115e:	mov	r0, r4
    1160:	bl	af4c <Print::println()>
    1164:	add	r0, r5
    1166:	pop	{r3, r4, r5, pc}

00001168 <seconds2tm(unsigned long)>:
  int tm_yday;
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
    1168:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    116c:	ldr	r6, [pc, #788]	; (1484 <seconds2tm(unsigned long)+0x31c>)
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
    116e:	ldr	r3, [pc, #792]	; (1488 <seconds2tm(unsigned long)+0x320>)
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    1170:	ldr	r2, [pc, #792]	; (148c <seconds2tm(unsigned long)+0x324>)
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    1172:	ldr	r7, [pc, #796]	; (1490 <seconds2tm(unsigned long)+0x328>)

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    1174:	ldr	r4, [pc, #796]	; (1494 <seconds2tm(unsigned long)+0x32c>)
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)

  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
  uint32_t days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= tt) year++;
    1176:	ldr.w	ip, [pc, #800]	; 1498 <seconds2tm(unsigned long)+0x330>
    117a:	ldr.w	lr, [pc, #800]	; 149c <seconds2tm(unsigned long)+0x334>

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    117e:	umull	r5, r6, r6, r1
    1182:	lsrs	r6, r6, #16
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
    1184:	umull	r8, r5, r3, r1
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    1188:	add.w	sl, r6, #4

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    118c:	umull	r8, r2, r2, r1
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
    1190:	lsrs	r5, r5, #5
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    1192:	umull	r8, r9, sl, r7

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    1196:	lsrs	r2, r2, #11
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
    1198:	umull	r7, r3, r3, r5
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    119c:	umull	r7, r4, r4, r2
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11a0:	rsb	r7, r9, sl
    11a4:	add.w	r7, r9, r7, lsr #1
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
    11a8:	lsrs	r3, r3, #5
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11aa:	lsrs	r7, r7, #2

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    11ac:	lsrs	r4, r4, #4
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
    11ae:	rsb	r3, r3, r3, lsl #4
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11b2:	rsb	r7, r7, r7, lsl #3

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    11b6:	add.w	r8, r4, r4, lsl #1
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11ba:	rsb	r7, r7, sl
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
    11be:	sub.w	r4, r5, r3, lsl #2
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
    11c2:	rsb	r5, r5, r5, lsl #4
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    11c6:	sub.w	r2, r2, r8, lsl #3
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11ca:	adds	r7, #1
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
    11cc:	sub.w	r1, r1, r5, lsl #2
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)

  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
  uint32_t days = 0;
    11d0:	movs	r3, #0
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
    11d2:	stmia.w	r0, {r1, r4}
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11d6:	str	r7, [r0, #24]

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    11d8:	str	r2, [r0, #8]
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)

  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
    11da:	mov	r4, r3
  uint32_t days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= tt) year++;
    11dc:	movw	r9, #365	; 0x16d
    11e0:	movs	r7, #100	; 0x64
    11e2:	mov.w	r8, #400	; 0x190
    11e6:	b.n	1204 <seconds2tm(unsigned long)+0x9c>
    11e8:	lsrs	r1, r1, #7
    11ea:	mls	r1, r8, r1, r2
    11ee:	cmp	r5, #0
    11f0:	bne.n	12cc <seconds2tm(unsigned long)+0x164>
    11f2:	cmp	r1, #0
    11f4:	ite	ne
    11f6:	movne	r2, r9
    11f8:	moveq.w	r2, #366	; 0x16e
    11fc:	add	r3, r2
    11fe:	cmp	r6, r3
    1200:	bcc.n	1226 <seconds2tm(unsigned long)+0xbe>
    1202:	adds	r4, #1
    1204:	addw	r2, r4, #1970	; 0x7b2
    1208:	umull	r5, r1, lr, r2
    120c:	lsrs	r5, r1, #5
    120e:	cmp	r4, ip
    1210:	mls	r5, r7, r5, r2
    1214:	beq.n	121c <seconds2tm(unsigned long)+0xb4>
    1216:	tst.w	r2, #3
    121a:	beq.n	11e8 <seconds2tm(unsigned long)+0x80>
    121c:	movw	r2, #365	; 0x16d
    1220:	add	r3, r2
    1222:	cmp	r6, r3
    1224:	bcs.n	1202 <seconds2tm(unsigned long)+0x9a>

  tx.tm_year = 1970+year; // year is NOT offset from 1970 

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
    1226:	ldr	r2, [pc, #624]	; (1498 <seconds2tm(unsigned long)+0x330>)
  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
  uint32_t days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= tt) year++;

  tx.tm_year = 1970+year; // year is NOT offset from 1970 
    1228:	addw	r5, r4, #1970	; 0x7b2

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
    122c:	cmp	r4, r2
  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
  uint32_t days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= tt) year++;

  tx.tm_year = 1970+year; // year is NOT offset from 1970 
    122e:	str	r5, [r0, #20]

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
    1230:	beq.w	1368 <seconds2tm(unsigned long)+0x200>
    1234:	ands.w	r7, r5, #3
    1238:	beq.n	12d2 <seconds2tm(unsigned long)+0x16a>
  tt  -= days; // now tt is days in this year, starting at 0
    123a:	mvn.w	r4, #364	; 0x16c
    123e:	add	r3, r4
    1240:	subs	r2, r6, r3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1242:	cmp	r2, #30
    1244:	bls.w	1424 <seconds2tm(unsigned long)+0x2bc>
    tt -= monthLength;
    1248:	sub.w	r3, r2, #31
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    124c:	cmp	r3, #27
    124e:	bls.w	1444 <seconds2tm(unsigned long)+0x2dc>
    tt -= monthLength;
    1252:	sub.w	r3, r2, #59	; 0x3b
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1256:	cmp	r3, #30
    1258:	bls.w	144a <seconds2tm(unsigned long)+0x2e2>
    tt -= monthLength;
    125c:	sub.w	r3, r2, #90	; 0x5a
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1260:	cmp	r3, #29
    1262:	bls.w	1450 <seconds2tm(unsigned long)+0x2e8>
    tt -= monthLength;
    1266:	sub.w	r3, r2, #120	; 0x78
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    126a:	cmp	r3, #30
    126c:	bls.w	1456 <seconds2tm(unsigned long)+0x2ee>
    tt -= monthLength;
    1270:	sub.w	r3, r2, #151	; 0x97
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1274:	cmp	r3, #29
    1276:	bls.w	145c <seconds2tm(unsigned long)+0x2f4>
    tt -= monthLength;
    127a:	sub.w	r3, r2, #181	; 0xb5
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    127e:	cmp	r3, #30
    1280:	bls.w	1462 <seconds2tm(unsigned long)+0x2fa>
    tt -= monthLength;
    1284:	sub.w	r3, r2, #212	; 0xd4
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1288:	cmp	r3, #30
    128a:	bls.w	1468 <seconds2tm(unsigned long)+0x300>
    tt -= monthLength;
    128e:	sub.w	r3, r2, #243	; 0xf3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1292:	cmp	r3, #29
    1294:	bls.w	146e <seconds2tm(unsigned long)+0x306>
    tt -= monthLength;
    1298:	mvn.w	r9, #272	; 0x110
    129c:	add.w	r3, r2, r9
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    12a0:	cmp	r3, #30
    12a2:	bls.w	141c <seconds2tm(unsigned long)+0x2b4>
    tt -= monthLength;
    12a6:	sub.w	r3, r2, #304	; 0x130
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    12aa:	cmp	r3, #29
    12ac:	bls.w	147a <seconds2tm(unsigned long)+0x312>
    tt -= monthLength;
    12b0:	sub.w	r3, r2, #334	; 0x14e
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    12b4:	cmp	r3, #30
    12b6:	bls.w	1474 <seconds2tm(unsigned long)+0x30c>
    tt -= monthLength;
    12ba:	mvn.w	r8, #364	; 0x16c
    12be:	add	r2, r8
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    12c0:	movs	r1, #13
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    tt -= monthLength;
  }
  tx.tm_mon = mm + 1;   // jan is month 1  
  tx.tm_mday = tt + 1;     // day of month
    12c2:	adds	r6, r2, #1
    12c4:	str	r6, [r0, #12]
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    tt -= monthLength;
  }
  tx.tm_mon = mm + 1;   // jan is month 1  
    12c6:	str	r1, [r0, #16]
  tx.tm_mday = tt + 1;     // day of month
  return tx;
}
    12c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)

  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
  uint32_t days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= tt) year++;
    12cc:	mov.w	r2, #366	; 0x16e
    12d0:	b.n	11fc <seconds2tm(unsigned long)+0x94>

  tx.tm_year = 1970+year; // year is NOT offset from 1970 

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
    12d2:	ldr	r2, [pc, #456]	; (149c <seconds2tm(unsigned long)+0x334>)
    12d4:	umull	r1, r2, r2, r5
    12d8:	lsrs	r4, r2, #5
    12da:	movs	r1, #100	; 0x64
    12dc:	mls	r4, r1, r4, r5
    12e0:	lsrs	r2, r2, #7
    12e2:	mov.w	r1, #400	; 0x190
    12e6:	cmp	r4, #0
    12e8:	bne.n	13d8 <seconds2tm(unsigned long)+0x270>
    12ea:	mls	r1, r1, r2, r5
    12ee:	cmp	r1, #0
    12f0:	bne.w	1406 <seconds2tm(unsigned long)+0x29e>
  tt  -= days; // now tt is days in this year, starting at 0
    12f4:	sub.w	r3, r3, #366	; 0x16e
    12f8:	subs	r6, r6, r3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    12fa:	cmp	r6, #30
    12fc:	bls.w	1480 <seconds2tm(unsigned long)+0x318>
    tt -= monthLength;
    1300:	sub.w	r2, r6, #31
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1304:	cmp	r2, #28
    1306:	bls.w	1418 <seconds2tm(unsigned long)+0x2b0>
    tt -= monthLength;
    130a:	sub.w	r2, r6, #60	; 0x3c
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    130e:	cmp	r2, #30
    1310:	bls.w	1428 <seconds2tm(unsigned long)+0x2c0>
    tt -= monthLength;
    1314:	sub.w	r2, r6, #91	; 0x5b
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1318:	cmp	r2, #29
    131a:	bls.w	142c <seconds2tm(unsigned long)+0x2c4>
    tt -= monthLength;
    131e:	sub.w	r2, r6, #121	; 0x79
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1322:	cmp	r2, #30
    1324:	bls.w	1438 <seconds2tm(unsigned long)+0x2d0>
    tt -= monthLength;
    1328:	sub.w	r2, r6, #152	; 0x98
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    132c:	cmp	r2, #29
    132e:	bls.n	1430 <seconds2tm(unsigned long)+0x2c8>
    tt -= monthLength;
    1330:	sub.w	r2, r6, #182	; 0xb6
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1334:	cmp	r2, #30
    1336:	bls.n	1434 <seconds2tm(unsigned long)+0x2cc>
    tt -= monthLength;
    1338:	sub.w	r2, r6, #213	; 0xd5
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    133c:	cmp	r2, #30
    133e:	bls.n	1440 <seconds2tm(unsigned long)+0x2d8>
    tt -= monthLength;
    1340:	sub.w	r2, r6, #244	; 0xf4
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1344:	cmp	r2, #29
    1346:	bls.n	143c <seconds2tm(unsigned long)+0x2d4>
    tt -= monthLength;
    1348:	sub.w	r2, r6, #274	; 0x112
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    134c:	cmp	r2, #30
    134e:	bls.n	141e <seconds2tm(unsigned long)+0x2b6>
    tt -= monthLength;
    1350:	mvn.w	r5, #304	; 0x130
    1354:	adds	r2, r6, r5
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1356:	cmp	r2, #29
    1358:	bhi.n	13f0 <seconds2tm(unsigned long)+0x288>
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    135a:	movs	r1, #10
    135c:	adds	r1, #1
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    tt -= monthLength;
  }
  tx.tm_mon = mm + 1;   // jan is month 1  
  tx.tm_mday = tt + 1;     // day of month
    135e:	adds	r6, r2, #1
    1360:	str	r6, [r0, #12]
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    tt -= monthLength;
  }
  tx.tm_mon = mm + 1;   // jan is month 1  
    1362:	str	r1, [r0, #16]
  tx.tm_mday = tt + 1;     // day of month
  return tx;
}
    1364:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  tx.tm_year = 1970+year; // year is NOT offset from 1970 

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
    1368:	mvn.w	r2, #364	; 0x16c
    136c:	add	r3, r2
    136e:	subs	r6, r6, r3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1370:	cmp	r6, #30
    1372:	bls.n	1422 <seconds2tm(unsigned long)+0x2ba>
    tt -= monthLength;
    1374:	sub.w	r2, r6, #31
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1378:	cmp	r2, #27
    137a:	bls.n	1418 <seconds2tm(unsigned long)+0x2b0>
    tt -= monthLength;
    137c:	sub.w	r2, r6, #59	; 0x3b
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1380:	cmp	r2, #30
    1382:	bls.n	1428 <seconds2tm(unsigned long)+0x2c0>
    tt -= monthLength;
    1384:	sub.w	r2, r6, #90	; 0x5a
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1388:	cmp	r2, #29
    138a:	bls.n	142c <seconds2tm(unsigned long)+0x2c4>
    tt -= monthLength;
    138c:	sub.w	r2, r6, #120	; 0x78
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1390:	cmp	r2, #30
    1392:	bls.n	1438 <seconds2tm(unsigned long)+0x2d0>
    tt -= monthLength;
    1394:	sub.w	r2, r6, #151	; 0x97
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1398:	cmp	r2, #29
    139a:	bls.n	1430 <seconds2tm(unsigned long)+0x2c8>
    tt -= monthLength;
    139c:	sub.w	r2, r6, #181	; 0xb5
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13a0:	cmp	r2, #30
    13a2:	bls.n	1434 <seconds2tm(unsigned long)+0x2cc>
    tt -= monthLength;
    13a4:	sub.w	r2, r6, #212	; 0xd4
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13a8:	cmp	r2, #30
    13aa:	bls.n	1440 <seconds2tm(unsigned long)+0x2d8>
    tt -= monthLength;
    13ac:	sub.w	r2, r6, #243	; 0xf3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13b0:	cmp	r2, #29
    13b2:	bls.n	143c <seconds2tm(unsigned long)+0x2d4>
    tt -= monthLength;
    13b4:	mvn.w	ip, #272	; 0x110
    13b8:	add.w	r2, r6, ip
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13bc:	cmp	r2, #30
    13be:	bls.n	141e <seconds2tm(unsigned long)+0x2b6>
    tt -= monthLength;
    13c0:	sub.w	r2, r6, #304	; 0x130
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13c4:	cmp	r2, #29
    13c6:	bls.n	135a <seconds2tm(unsigned long)+0x1f2>
    tt -= monthLength;
    13c8:	sub.w	r2, r6, #334	; 0x14e
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13cc:	cmp	r2, #30
    13ce:	bls.n	1402 <seconds2tm(unsigned long)+0x29a>
    tt -= monthLength;
    13d0:	mvn.w	r7, #364	; 0x16c
    13d4:	adds	r2, r6, r7
    13d6:	b.n	12c0 <seconds2tm(unsigned long)+0x158>

  tx.tm_year = 1970+year; // year is NOT offset from 1970 

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
    13d8:	sub.w	r3, r3, #366	; 0x16e
    13dc:	mls	r1, r1, r2, r5
    13e0:	subs	r6, r6, r3
    13e2:	cmp	r1, #0
    13e4:	beq.n	12fa <seconds2tm(unsigned long)+0x192>
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13e6:	cmp	r6, #30
    13e8:	bhi.n	1300 <seconds2tm(unsigned long)+0x198>
    13ea:	mov	r2, r6
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    13ec:	mov	r1, r7
    13ee:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    tt -= monthLength;
    13f0:	mvn.w	r3, #334	; 0x14e
    13f4:	adds	r2, r6, r3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13f6:	cmp	r2, #30
    tt -= monthLength;
    13f8:	it	hi
    13fa:	subhi.w	r2, r6, #366	; 0x16e
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13fe:	bhi.w	12c0 <seconds2tm(unsigned long)+0x158>
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1402:	movs	r1, #11
    1404:	b.n	135c <seconds2tm(unsigned long)+0x1f4>

  tx.tm_year = 1970+year; // year is NOT offset from 1970 

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
    1406:	mvn.w	r1, #364	; 0x16c
    140a:	add	r3, r1
    140c:	subs	r6, r6, r3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    140e:	cmp	r6, #30
    1410:	bhi.n	1374 <seconds2tm(unsigned long)+0x20c>
    1412:	mov	r2, r6
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1414:	mov	r1, r4
    1416:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    1418:	movs	r1, #1
    141a:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    141c:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    141e:	movs	r1, #9
    1420:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1422:	mov	r2, r6
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1424:	movs	r1, #0
    1426:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    1428:	movs	r1, #2
    142a:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    142c:	movs	r1, #3
    142e:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    1430:	movs	r1, #5
    1432:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    1434:	movs	r1, #6
    1436:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    1438:	movs	r1, #4
    143a:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    143c:	movs	r1, #8
    143e:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    1440:	movs	r1, #7
    1442:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1444:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1446:	movs	r1, #1
    1448:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    144a:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    144c:	movs	r1, #2
    144e:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1450:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1452:	movs	r1, #3
    1454:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1456:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1458:	movs	r1, #4
    145a:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    145c:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    145e:	movs	r1, #5
    1460:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1462:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1464:	movs	r1, #6
    1466:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1468:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    146a:	movs	r1, #7
    146c:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    146e:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1470:	movs	r1, #8
    1472:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1474:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1476:	movs	r1, #11
    1478:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    147a:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    147c:	movs	r1, #10
    147e:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1480:	mov	r2, r6
    1482:	b.n	135c <seconds2tm(unsigned long)+0x1f4>
    1484:	.word	0xc22e4507
    1488:	.word	0x88888889
    148c:	.word	0x91a2b3c5
    1490:	.word	0x24924925
    1494:	.word	0xaaaaaaab
    1498:	.word	0xfffff84e
    149c:	.word	0x51eb851f

000014a0 <dateTime(unsigned short*, unsigned short*)>:
  tt+=(days*24*3600);
  return tt;
}

// Call back for file timestamps.  Only called for file create and sync().
void dateTime(uint16_t* date, uint16_t* time) {
    14a0:	push	{r4, r5, lr}

  struct tm tx=seconds2tm(RTC_TSR);
    14a2:	ldr	r3, [pc, #124]	; (1520 <dateTime(unsigned short*, unsigned short*)+0x80>)
    14a4:	ldr	r3, [r3, #0]
  tt+=(days*24*3600);
  return tt;
}

// Call back for file timestamps.  Only called for file create and sync().
void dateTime(uint16_t* date, uint16_t* time) {
    14a6:	sub	sp, #44	; 0x2c
    14a8:	mov	r5, r0
    14aa:	mov	r4, r1

  struct tm tx=seconds2tm(RTC_TSR);
    14ac:	add	r0, sp, #4
    14ae:	mov	r1, r3
    14b0:	bl	1168 <seconds2tm(unsigned long)>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    14b4:	ldr	r3, [sp, #24]
    
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(tx.tm_year, tx.tm_mon, tx.tm_mday);
    14b6:	ldr	r1, [sp, #20]
    14b8:	ldr	r2, [sp, #16]
    14ba:	subw	r3, r3, #1980	; 0x7bc
    14be:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    14c0:	cmp	r3, #127	; 0x7f
    14c2:	bhi.n	14ca <dateTime(unsigned short*, unsigned short*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
    14c4:	uxtb	r0, r1
    14c6:	cmp	r0, #12
    14c8:	bls.n	150a <dateTime(unsigned short*, unsigned short*)+0x6a>
         year << 9 | month << 5 | day;
    14ca:	movs	r3, #0

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(tx.tm_hour, tx.tm_min, tx.tm_sec);
    14cc:	ldr	r0, [sp, #12]
void dateTime(uint16_t* date, uint16_t* time) {

  struct tm tx=seconds2tm(RTC_TSR);
    
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(tx.tm_year, tx.tm_mon, tx.tm_mday);
    14ce:	strh	r3, [r5, #0]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    14d0:	uxtb	r3, r0
    14d2:	cmp	r3, #23

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(tx.tm_hour, tx.tm_min, tx.tm_sec);
    14d4:	ldr	r1, [sp, #8]
    14d6:	ldr	r2, [sp, #4]
    14d8:	bhi.n	1502 <dateTime(unsigned short*, unsigned short*)+0x62>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    14da:	uxtb	r3, r1
    14dc:	cmp	r3, #59	; 0x3b
    14de:	bhi.n	1502 <dateTime(unsigned short*, unsigned short*)+0x62>
    14e0:	uxtb	r3, r2
    14e2:	cmp	r3, #59	; 0x3b
    14e4:	bhi.n	1502 <dateTime(unsigned short*, unsigned short*)+0x62>
         hour << 11 | minute << 5 | second >> 1;
    14e6:	lsls	r3, r0, #11
    14e8:	lsls	r1, r1, #5
    14ea:	and.w	r1, r1, #8160	; 0x1fe0
    14ee:	and.w	r3, r3, #522240	; 0x7f800
    14f2:	orrs	r3, r1
    14f4:	ubfx	r2, r2, #1, #7
    14f8:	orrs	r3, r2
    14fa:	uxth	r3, r3
    14fc:	strh	r3, [r4, #0]
}
    14fe:	add	sp, #44	; 0x2c
    1500:	pop	{r4, r5, pc}
    1502:	movs	r3, #0
    
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(tx.tm_year, tx.tm_mon, tx.tm_mday);

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(tx.tm_hour, tx.tm_min, tx.tm_sec);
    1504:	strh	r3, [r4, #0]
}
    1506:	add	sp, #44	; 0x2c
    1508:	pop	{r4, r5, pc}
void dateTime(uint16_t* date, uint16_t* time) {

  struct tm tx=seconds2tm(RTC_TSR);
    
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(tx.tm_year, tx.tm_mon, tx.tm_mday);
    150a:	uxtb	r2, r2
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
    150c:	cmp	r2, #31
    150e:	bhi.n	14ca <dateTime(unsigned short*, unsigned short*)+0x2a>
         year << 9 | month << 5 | day;
    1510:	lsls	r1, r1, #5
    1512:	and.w	r1, r1, #8160	; 0x1fe0
    1516:	orrs	r2, r1
    1518:	orr.w	r3, r2, r3, lsl #9
    151c:	uxth	r3, r3
    151e:	b.n	14cc <dateTime(unsigned short*, unsigned short*)+0x2c>
    1520:	.word	0x4003d000

00001524 <tm2seconds(tm*)>:
}

uint32_t tm2seconds (struct tm *tx) 
{
  uint32_t tt;
  tt=tx->tm_sec+tx->tm_min*60+tx->tm_hour*3600;  
    1524:	ldr	r2, [r0, #4]
  // count days size epoch until previous midnight
  uint32_t days=tx->tm_mday-1;

  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<(tx->tm_mon-1); mm++) days+=monthDays[mm]; 
    1526:	ldr	r1, [r0, #16]
{
  uint32_t tt;
  tt=tx->tm_sec+tx->tm_min*60+tx->tm_hour*3600;  

  // count days size epoch until previous midnight
  uint32_t days=tx->tm_mday-1;
    1528:	ldr	r3, [r0, #12]
  tx.tm_mday = tt + 1;     // day of month
  return tx;
}

uint32_t tm2seconds (struct tm *tx) 
{
    152a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tt;
  tt=tx->tm_sec+tx->tm_min*60+tx->tm_hour*3600;  
    152e:	ldr	r4, [r0, #0]
    1530:	ldr	r5, [r0, #8]
    1532:	rsb	r2, r2, r2, lsl #4
    1536:	add.w	r2, r4, r2, lsl #2
    153a:	mov.w	r8, #3600	; 0xe10
    153e:	mla	r8, r8, r5, r2
  // count days size epoch until previous midnight
  uint32_t days=tx->tm_mday-1;

  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<(tx->tm_mon-1); mm++) days+=monthDays[mm]; 
    1542:	subs	r2, r1, #1
{
  uint32_t tt;
  tt=tx->tm_sec+tx->tm_min*60+tx->tm_hour*3600;  

  // count days size epoch until previous midnight
  uint32_t days=tx->tm_mday-1;
    1544:	add.w	r4, r3, #4294967295

  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<(tx->tm_mon-1); mm++) days+=monthDays[mm]; 
    1548:	beq.n	15a6 <tm2seconds(tm*)+0x82>
    154a:	cmp	r2, #1
    154c:	add.w	r5, r3, #30
    1550:	beq.n	1624 <tm2seconds(tm*)+0x100>
    1552:	cmp	r2, #2
    1554:	add.w	r5, r3, #58	; 0x3a
    1558:	beq.n	1624 <tm2seconds(tm*)+0x100>
    155a:	cmp	r2, #3
    155c:	add.w	r5, r3, #89	; 0x59
    1560:	beq.n	1624 <tm2seconds(tm*)+0x100>
    1562:	cmp	r2, #4
    1564:	add.w	r5, r3, #119	; 0x77
    1568:	beq.n	1624 <tm2seconds(tm*)+0x100>
    156a:	cmp	r2, #5
    156c:	add.w	r5, r3, #150	; 0x96
    1570:	beq.n	1624 <tm2seconds(tm*)+0x100>
    1572:	cmp	r2, #6
    1574:	add.w	r5, r3, #180	; 0xb4
    1578:	beq.n	1624 <tm2seconds(tm*)+0x100>
    157a:	cmp	r2, #7
    157c:	add.w	r5, r3, #211	; 0xd3
    1580:	beq.n	1624 <tm2seconds(tm*)+0x100>
    1582:	cmp	r2, #8
    1584:	add.w	r5, r3, #242	; 0xf2
    1588:	beq.n	1624 <tm2seconds(tm*)+0x100>
    158a:	cmp	r2, #9
    158c:	add.w	r3, r3, #272	; 0x110
    1590:	beq.n	1628 <tm2seconds(tm*)+0x104>
    1592:	cmp	r2, #10
    1594:	add.w	r3, r4, #304	; 0x130
    1598:	beq.n	1628 <tm2seconds(tm*)+0x104>
    159a:	cmp	r2, #11
    159c:	add.w	r3, r4, #334	; 0x14e
    15a0:	beq.n	1628 <tm2seconds(tm*)+0x104>
    15a2:	addw	r4, r4, #365	; 0x16d
  if(tx->tm_mon>2 && LEAP_YEAR(tx->tm_year-1970)) days++;
    15a6:	cmp	r1, #2
    15a8:	ldr	r6, [r0, #20]
    15aa:	ble.n	15b4 <tm2seconds(tm*)+0x90>
    15ac:	cmp	r6, #0
    15ae:	ble.n	15b4 <tm2seconds(tm*)+0x90>
    15b0:	lsls	r2, r6, #30
    15b2:	beq.n	162c <tm2seconds(tm*)+0x108>

  uint32_t years=0;
  while(years++ < (tx->tm_year-1970)) days += (LEAP_YEAR(years) ? 366 : 365);
    15b4:	movw	r3, #1970	; 0x7b2
    15b8:	cmp	r6, r3
    15ba:	beq.n	1614 <tm2seconds(tm*)+0xf0>
    15bc:	mvn.w	r3, #1968	; 0x7b0
    15c0:	add	r6, r3
    15c2:	ldr	r7, [pc, #144]	; (1654 <tm2seconds(tm*)+0x130>)
    15c4:	ldr	r0, [pc, #144]	; (1658 <tm2seconds(tm*)+0x134>)
    15c6:	movs	r3, #1
    15c8:	movw	r9, #365	; 0x16d
    15cc:	mov.w	lr, #100	; 0x64
    15d0:	mov.w	ip, #400	; 0x190
    15d4:	b.n	15f0 <tm2seconds(tm*)+0xcc>
    15d6:	lsrs	r1, r1, #7
    15d8:	mls	r1, ip, r1, r2
    15dc:	cbnz	r5, 161e <tm2seconds(tm*)+0xfa>
    15de:	cmp	r1, #0
    15e0:	ite	ne
    15e2:	movne	r2, r9
    15e4:	moveq.w	r2, #366	; 0x16e
    15e8:	adds	r3, #1
    15ea:	cmp	r3, r6
    15ec:	add	r4, r2
    15ee:	beq.n	1614 <tm2seconds(tm*)+0xf0>
    15f0:	cmp	r3, r7
    15f2:	addw	r2, r3, #1970	; 0x7b2
    15f6:	beq.n	1608 <tm2seconds(tm*)+0xe4>
    15f8:	umull	r5, r1, r0, r2
    15fc:	lsrs	r5, r1, #5
    15fe:	tst.w	r2, #3
    1602:	mls	r5, lr, r5, r2
    1606:	beq.n	15d6 <tm2seconds(tm*)+0xb2>
    1608:	adds	r3, #1
    160a:	movw	r2, #365	; 0x16d
    160e:	cmp	r3, r6
    1610:	add	r4, r2
    1612:	bne.n	15f0 <tm2seconds(tm*)+0xcc>
  //  
  tt+=(days*24*3600);
  return tt;
    1614:	ldr	r0, [pc, #68]	; (165c <tm2seconds(tm*)+0x138>)
}
    1616:	mla	r0, r0, r4, r8
    161a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  uint32_t monthLength=0;
  for (mm=0; mm<(tx->tm_mon-1); mm++) days+=monthDays[mm]; 
  if(tx->tm_mon>2 && LEAP_YEAR(tx->tm_year-1970)) days++;

  uint32_t years=0;
  while(years++ < (tx->tm_year-1970)) days += (LEAP_YEAR(years) ? 366 : 365);
    161e:	mov.w	r2, #366	; 0x16e
    1622:	b.n	15e8 <tm2seconds(tm*)+0xc4>
  // count days size epoch until previous midnight
  uint32_t days=tx->tm_mday-1;

  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<(tx->tm_mon-1); mm++) days+=monthDays[mm]; 
    1624:	mov	r4, r5
    1626:	b.n	15a6 <tm2seconds(tm*)+0x82>
    1628:	mov	r4, r3
    162a:	b.n	15a6 <tm2seconds(tm*)+0x82>
  if(tx->tm_mon>2 && LEAP_YEAR(tx->tm_year-1970)) days++;
    162c:	ldr	r2, [pc, #40]	; (1658 <tm2seconds(tm*)+0x134>)
    162e:	asrs	r3, r6, #31
    1630:	smull	r1, r2, r2, r6
    1634:	rsb	r1, r3, r2, asr #5
    1638:	movs	r0, #100	; 0x64
    163a:	mls	r1, r0, r1, r6
    163e:	cbnz	r1, 1650 <tm2seconds(tm*)+0x12c>
    1640:	rsb	r3, r3, r2, asr #7
    1644:	mov.w	r2, #400	; 0x190
    1648:	mls	r3, r2, r3, r6
    164c:	cmp	r3, #0
    164e:	bne.n	15b4 <tm2seconds(tm*)+0x90>
    1650:	adds	r4, #1
    1652:	b.n	15b4 <tm2seconds(tm*)+0x90>
    1654:	.word	0xfffff84e
    1658:	.word	0x51eb851f
    165c:	.word	0x00015180

00001660 <i2sInProcessing>:
/************************Process specific code ********************************/
void i2sInProcessing(void * s, void * d)
{
	static uint16_t is_I2S=0;

	i2sProcCount++;
    1660:	ldr	r2, [pc, #164]	; (1708 <i2sInProcessing+0xa8>)



/************************Process specific code ********************************/
void i2sInProcessing(void * s, void * d)
{
    1662:	push	{r3, r4, r5, r6, r7, lr}
	static uint16_t is_I2S=0;

	i2sProcCount++;
	if(is_I2S) {i2sBusyCount++; return;}
    1664:	ldr	r4, [pc, #164]	; (170c <i2sInProcessing+0xac>)
/************************Process specific code ********************************/
void i2sInProcessing(void * s, void * d)
{
	static uint16_t is_I2S=0;

	i2sProcCount++;
    1666:	ldr	r3, [r2, #0]
	if(is_I2S) {i2sBusyCount++; return;}
    1668:	ldrh	r0, [r4, #0]
/************************Process specific code ********************************/
void i2sInProcessing(void * s, void * d)
{
	static uint16_t is_I2S=0;

	i2sProcCount++;
    166a:	adds	r3, #1
    166c:	str	r3, [r2, #0]
	if(is_I2S) {i2sBusyCount++; return;}
    166e:	cbnz	r0, 16a8 <i2sInProcessing+0x48>
	is_I2S=1;
    1670:	movs	r3, #1
    1672:	strh	r3, [r4, #0]
    1674:	add.w	r0, r1, #1020	; 0x3fc
    1678:	subs	r3, r1, #4
	int32_t *src = (int32_t *) d;

	// for ICS43432 need first shift left to get correct MSB
	// shift 8bit to right to get data-LSB to bit 0
  #ifdef MSB_CORRECTION
  	for(int ii=0; ii<I2S_CHAN*N_SAMP;ii++) { src[ii]<<=1; src[ii]>>=8;}
    167a:	ldr.w	r2, [r3, #4]!
    167e:	sbfx	r2, r2, #7, #24
    1682:	cmp	r3, r0
    1684:	str	r2, [r3, #0]
    1686:	bne.n	167a <i2sInProcessing+0x1a>
    1688:	ldr	r2, [pc, #132]	; (1710 <i2sInProcessing+0xb0>)
    168a:	movs	r3, #0
  #endif

	#ifdef DO_LOGGER
    #if N_CHAN==1
      DATA_T *logData = data1; 
      for(int ii=0; ii< N_SAMP; ii++) logData[ii]=src[ICH+2*ii];
    168c:	ldr.w	r0, [r1, r3, lsl #3]
    1690:	str.w	r0, [r2, #4]!
    1694:	adds	r3, #1
    1696:	cmp	r3, #128	; 0x80
    1698:	bne.n	168c <i2sInProcessing+0x2c>
template <typename T, int nq, int nd, int na>
int16_t Logger<T,nq,nd,na>:: write(void *inp)
  {
    int16_t h;

    if(!enabled) return 0; // don't do anything
    169a:	ldr	r6, [pc, #120]	; (1714 <i2sInProcessing+0xb4>)
    169c:	ldrsh.w	r3, [r6, #204]	; 0xcc
    16a0:	cbnz	r3, 16b2 <i2sInProcessing+0x52>
	#ifdef DO_USB_AUDIO
    mExtract(dst16,src,ICS_CHAN*N_SAMP);
		usbAudio_write(dst16,N_SAMP);
	#endif

  is_I2S=0;
    16a2:	movs	r3, #0
    16a4:	strh	r3, [r4, #0]
    16a6:	pop	{r3, r4, r5, r6, r7, pc}
void i2sInProcessing(void * s, void * d)
{
	static uint16_t is_I2S=0;

	i2sProcCount++;
	if(is_I2S) {i2sBusyCount++; return;}
    16a8:	ldr	r2, [pc, #108]	; (1718 <i2sInProcessing+0xb8>)
    16aa:	ldr	r3, [r2, #0]
    16ac:	adds	r3, #1
    16ae:	str	r3, [r2, #0]
    16b0:	pop	{r3, r4, r5, r6, r7, pc}
    
    h = head + 1;
    16b2:	ldrh.w	r5, [r6, #200]	; 0xc8
    if (h >= nq) h = 0;
    if (h == tail) {  // disaster
    16b6:	ldrsh.w	r2, [r6, #202]	; 0xca
  {
    int16_t h;

    if(!enabled) return 0; // don't do anything
    
    h = head + 1;
    16ba:	adds	r5, #1
    16bc:	sxth	r5, r5
    if (h >= nq) h = 0;
    16be:	cmp.w	r5, #300	; 0x12c
    16c2:	it	ge
    16c4:	movge	r5, #0
    if (h == tail) {  // disaster
    16c6:	cmp	r2, r5
    16c8:	sub.w	r3, r6, #154624	; 0x25c00
    16cc:	beq.n	1700 <i2sInProcessing+0xa0>
      overrun++;
      // simply ignore new data
      return -1;
    } 
    else 
    { queue[h] = pool.fetch(h);
    16ce:	add.w	r1, r5, #38400	; 0x9600
    16d2:	adds	r1, #6
class store
{ T pool[nb*nd];

  public:
  store(void) {;}
  T *fetch(int ii) {return &pool[ii*nd];}
    16d4:	add.w	r7, r3, r5, lsl #9
    16d8:	adds	r7, #24
      overrun++;
      // simply ignore new data
      return -1;
    } 
    else 
    { queue[h] = pool.fetch(h);
    16da:	str.w	r7, [r3, r1, lsl #2]
    16de:	mov	r0, r7
    16e0:	mov.w	r2, #512	; 0x200
    16e4:	ldr	r1, [pc, #52]	; (171c <i2sInProcessing+0xbc>)
    16e6:	bl	9404 <memcpy>
      DATA_T *logData = data1; 
      for(int ii=0; ii< N_SAMP; ii++) logData[ii]=src[ICH+2*ii];
    #else
      DATA_T *logData = src;
    #endif
		if(logger.write(logData)<0) //store always original data
    16ea:	cmp	r5, #0
      T *ptr = queue[h];
      if(ptr)
      { T *src = (T*) inp;
        for(int ii=0; ii<nd; ii++) ptr[ii]=src[ii];
        head = h;
    16ec:	strh.w	r5, [r6, #200]	; 0xc8
    16f0:	bge.n	16a2 <i2sInProcessing+0x42>
    { // have write error
      i2sWriteErrorCount++;
    16f2:	ldr	r2, [pc, #44]	; (1720 <i2sInProcessing+0xc0>)
    16f4:	ldr	r3, [r2, #0]
    16f6:	adds	r3, #1
    16f8:	str	r3, [r2, #0]
	#ifdef DO_USB_AUDIO
    mExtract(dst16,src,ICS_CHAN*N_SAMP);
		usbAudio_write(dst16,N_SAMP);
	#endif

  is_I2S=0;
    16fa:	movs	r3, #0
    16fc:	strh	r3, [r4, #0]
    16fe:	pop	{r3, r4, r5, r6, r7, pc}
    if(!enabled) return 0; // don't do anything
    
    h = head + 1;
    if (h >= nq) h = 0;
    if (h == tail) {  // disaster
      overrun++;
    1700:	ldr	r2, [r3, #4]
    1702:	adds	r2, #1
    1704:	str	r2, [r3, #4]
    1706:	b.n	16f2 <i2sInProcessing+0x92>
    1708:	.word	0x1fff1734
    170c:	.word	0x1fff2482
    1710:	.word	0x20020158
    1714:	.word	0x20018084
    1718:	.word	0x1fff1730
    171c:	.word	0x2002015c
    1720:	.word	0x1fff1740

00001724 <yield>:

// to disable EventResponder
// (https://forum.pjrc.com/threads/46442-Minimal-Blink-fails-with-void-yield()?p=153602&viewfull=1#post153602)
extern "C" volatile uint32_t systick_millis_count;
void mySystick_isr(void){ systick_millis_count++;}
void yield(void){}
    1724:	bx	lr
    1726:	nop

00001728 <check_hibernate(parameters_s*, int)>:
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
}

void check_hibernate( parameters_s *par, int flag)
{
    1728:	push	{r4, r5, r6, r7, lr}
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    172a:	ldr	r3, [pc, #300]	; (1858 <check_hibernate(parameters_s*, int)+0x130>)
    172c:	ldr	r6, [r3, #0]
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
}

void check_hibernate( parameters_s *par, int flag)
{
    172e:	sub	sp, #44	; 0x2c
    1730:	mov	r4, r0
    1732:	mov	r7, r1
  uint32_t tt=getRTC();
  struct tm tx=seconds2tm(tt);
    1734:	add	r0, sp, #4
    1736:	mov	r1, r6
    1738:	bl	1168 <seconds2tm(unsigned long)>
  uint16_t to = tx.tm_hour;
  
  // check if we should sleep longer
  uint16_t doRecording=1;
  doRecording = check_time(to,par->first_hour, par->second_hour) ||
    173c:	ldrh	r1, [r4, #4]
    173e:	ldrh	r3, [r4, #6]

void check_hibernate( parameters_s *par, int flag)
{
  uint32_t tt=getRTC();
  struct tm tx=seconds2tm(tt);
  uint16_t to = tx.tm_hour;
    1740:	ldrh.w	r2, [sp, #12]
  uint16_t last_hour;

 */
inline uint16_t check_time(uint16_t to, uint16_t t1, uint16_t t2)
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
    1744:	cmp	r1, r3
    1746:	bcs.n	17e2 <check_hibernate(parameters_s*, int)+0xba>
    1748:	cmp	r2, r1
    174a:	bcc.n	175e <check_hibernate(parameters_s*, int)+0x36>
    174c:	cmp	r2, r3
    174e:	ite	cs
    1750:	movcs	r0, #0
    1752:	movcc	r0, #1
  struct tm tx=seconds2tm(tt);
  uint16_t to = tx.tm_hour;
  
  // check if we should sleep longer
  uint16_t doRecording=1;
  doRecording = check_time(to,par->first_hour, par->second_hour) ||
    1754:	cbz	r0, 175e <check_hibernate(parameters_s*, int)+0x36>
                check_time(to,par->third_hour, par->last_hour);
  
  int32_t dto=0, dt=0, t1;
  if(doRecording)
  { if(flag)
    1756:	cmp	r7, #0
    1758:	bne.n	17ea <check_hibernate(parameters_s*, int)+0xc2>
//    while(!Serial);  Serial.printf("%d %d %d %d\n\r",dto,t1,tx,dt); Serial.flush();  delay(10000);
    Serial.println(dt);
    go_hibernate(dt);
#endif
  }
}
    175a:	add	sp, #44	; 0x2c
    175c:	pop	{r4, r5, r6, r7, pc}
  uint16_t to = tx.tm_hour;
  
  // check if we should sleep longer
  uint16_t doRecording=1;
  doRecording = check_time(to,par->first_hour, par->second_hour) ||
                check_time(to,par->third_hour, par->last_hour);
    175e:	ldrh	r5, [r4, #8]
    1760:	ldrh	r0, [r4, #10]
  uint16_t last_hour;

 */
inline uint16_t check_time(uint16_t to, uint16_t t1, uint16_t t2)
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
    1762:	cmp	r5, r0
    1764:	bcs.n	1822 <check_hibernate(parameters_s*, int)+0xfa>
    1766:	cmp	r2, r5
    1768:	bcs.n	1826 <check_hibernate(parameters_s*, int)+0xfe>
    176a:	cmp	r1, r0
    176c:	bls.n	183c <check_hibernate(parameters_s*, int)+0x114>
    176e:	cmp	r2, r0
    1770:	bcs.n	1846 <check_hibernate(parameters_s*, int)+0x11e>
      dto=(par->first_hour - par->last_hour);
      t1=par->last_hour;
    }
    else // is in middle sleep period
    {
      dto=(par->third_hour - par->second_hour);
    1772:	subs	r5, r5, r3

    dto *= 3600;
    t1 *= 3600;
    int32_t tx =tt % (24*3600); // seconds of day
    
    dt = dto - ((tx-t1 +24*3600) % (24*3600));
    1774:	ldr	r1, [pc, #228]	; (185c <check_hibernate(parameters_s*, int)+0x134>)
    1776:	ldr	r4, [pc, #232]	; (1860 <check_hibernate(parameters_s*, int)+0x138>)

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
    1778:	ldr	r0, [pc, #232]	; (1864 <check_hibernate(parameters_s*, int)+0x13c>)
    177a:	umull	r7, r2, r1, r6
    177e:	lsrs	r2, r2, #16
    1780:	mls	r6, r4, r2, r6
    1784:	mov.w	r2, #3600	; 0xe10
    1788:	mls	r3, r2, r3, r6
    178c:	add.w	r3, r3, #86016	; 0x15000
    1790:	add.w	r3, r3, #384	; 0x180
    1794:	smull	r6, r7, r3, r1
    else // is in middle sleep period
    {
      dto=(par->third_hour - par->second_hour);
      t1=par->second_hour;
    }
    if(dto<0) dto += 24;
    1798:	cmp	r5, #0

    dto *= 3600;
    t1 *= 3600;
    int32_t tx =tt % (24*3600); // seconds of day
    
    dt = dto - ((tx-t1 +24*3600) % (24*3600));
    179a:	add.w	r6, r3, r7
    179e:	mov.w	r1, r3, asr #31
    else // is in middle sleep period
    {
      dto=(par->third_hour - par->second_hour);
      t1=par->second_hour;
    }
    if(dto<0) dto += 24;
    17a2:	it	lt
    17a4:	addlt	r5, #24

    dto *= 3600;
    t1 *= 3600;
    int32_t tx =tt % (24*3600); // seconds of day
    
    dt = dto - ((tx-t1 +24*3600) % (24*3600));
    17a6:	rsb	r1, r1, r6, asr #16
    17aa:	mls	r3, r4, r1, r3
    17ae:	mul.w	r2, r2, r5
    17b2:	subs	r5, r2, r3
    17b4:	mov	r1, r5
    17b6:	bl	ae9c <Print::print(long)>
    17ba:	ldr	r0, [pc, #168]	; (1864 <check_hibernate(parameters_s*, int)+0x13c>)
    17bc:	bl	af4c <Print::println()>
			} else if (pin == 21) {
				CORE_PIN21_PORTCLEAR = CORE_PIN21_BITMASK;
			} else if (pin == 22) {
				CORE_PIN22_PORTCLEAR = CORE_PIN22_BITMASK;
			} else if (pin == 23) {
				CORE_PIN23_PORTCLEAR = CORE_PIN23_BITMASK;
    17c0:	ldr	r3, [pc, #164]	; (1868 <check_hibernate(parameters_s*, int)+0x140>)
    17c2:	movs	r2, #4
    17c4:	str	r2, [r3, #0]
 */
#include "hibernate.h"

void go_hibernate(uint32_t seconds)
{ digitalWriteFast(23,LOW); // turn sensor an micro OFF 
  for(int ii=0;ii<24;ii++) pinMode(ii,INPUT);   
    17c6:	movs	r4, #0
    17c8:	uxtb	r0, r4
    17ca:	movs	r1, #0
    17cc:	adds	r4, #1
    17ce:	bl	9c28 <pinMode>
    17d2:	cmp	r4, #24
    17d4:	bne.n	17c8 <check_hibernate(parameters_s*, int)+0xa0>
  hibernate(seconds);
    17d6:	mov	r0, r5
//    while(!Serial);  Serial.printf("%d %d %d %d\n\r",dto,t1,tx,dt); Serial.flush();  delay(10000);
    Serial.println(dt);
    go_hibernate(dt);
#endif
  }
}
    17d8:	add	sp, #44	; 0x2c
    17da:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#include "hibernate.h"

void go_hibernate(uint32_t seconds)
{ digitalWriteFast(23,LOW); // turn sensor an micro OFF 
  for(int ii=0;ii<24;ii++) pinMode(ii,INPUT);   
  hibernate(seconds);
    17de:	b.w	da0 <hibernate>
  uint16_t last_hour;

 */
inline uint16_t check_time(uint16_t to, uint16_t t1, uint16_t t2)
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
    17e2:	cmp	r2, r1
    17e4:	bcc.n	174c <check_hibernate(parameters_s*, int)+0x24>
  doRecording = check_time(to,par->first_hour, par->second_hour) ||
                check_time(to,par->third_hour, par->last_hour);
  
  int32_t dto=0, dt=0, t1;
  if(doRecording)
  { if(flag)
    17e6:	cmp	r7, #0
    17e8:	beq.n	175a <check_hibernate(parameters_s*, int)+0x32>
    {
      dto = (par->on_time + par->off_time)*60;
      dt = dto - (tt % dto);
    17ea:	ldrh	r1, [r4, #0]
    17ec:	ldrh	r3, [r4, #2]
    17ee:	ldr	r2, [pc, #120]	; (1868 <check_hibernate(parameters_s*, int)+0x140>)
    17f0:	add	r3, r1
    17f2:	rsb	r3, r3, r3, lsl #4
    17f6:	lsls	r3, r3, #2
    17f8:	movs	r1, #4
    17fa:	udiv	r5, r6, r3
    17fe:	mls	r5, r3, r5, r6
    1802:	subs	r5, r3, r5
    1804:	str	r1, [r2, #0]
 */
#include "hibernate.h"

void go_hibernate(uint32_t seconds)
{ digitalWriteFast(23,LOW); // turn sensor an micro OFF 
  for(int ii=0;ii<24;ii++) pinMode(ii,INPUT);   
    1806:	movs	r4, #0
    1808:	uxtb	r0, r4
    180a:	movs	r1, #0
    180c:	adds	r4, #1
    180e:	bl	9c28 <pinMode>
    1812:	cmp	r4, #24
    1814:	bne.n	1808 <check_hibernate(parameters_s*, int)+0xe0>
  hibernate(seconds);
    1816:	mov	r0, r5
//    while(!Serial);  Serial.printf("%d %d %d %d\n\r",dto,t1,tx,dt); Serial.flush();  delay(10000);
    Serial.println(dt);
    go_hibernate(dt);
#endif
  }
}
    1818:	add	sp, #44	; 0x2c
    181a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#include "hibernate.h"

void go_hibernate(uint32_t seconds)
{ digitalWriteFast(23,LOW); // turn sensor an micro OFF 
  for(int ii=0;ii<24;ii++) pinMode(ii,INPUT);   
  hibernate(seconds);
    181e:	b.w	da0 <hibernate>
  uint16_t last_hour;

 */
inline uint16_t check_time(uint16_t to, uint16_t t1, uint16_t t2)
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
    1822:	cmp	r2, r5
    1824:	bcs.n	1756 <check_hibernate(parameters_s*, int)+0x2e>
    1826:	cmp	r2, r0
    1828:	ite	cs
    182a:	movcs.w	lr, #0
    182e:	movcc.w	lr, #1
  struct tm tx=seconds2tm(tt);
  uint16_t to = tx.tm_hour;
  
  // check if we should sleep longer
  uint16_t doRecording=1;
  doRecording = check_time(to,par->first_hour, par->second_hour) ||
    1832:	cmp.w	lr, #0
    1836:	bne.n	1756 <check_hibernate(parameters_s*, int)+0x2e>
  uint16_t last_hour;

 */
inline uint16_t check_time(uint16_t to, uint16_t t1, uint16_t t2)
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
    1838:	cmp	r1, r0
    183a:	bhi.n	176e <check_hibernate(parameters_s*, int)+0x46>
    183c:	cmp	r2, r0
    183e:	bcc.n	1846 <check_hibernate(parameters_s*, int)+0x11e>
    dt = dto - (tt % dto);
    go_hibernate(dt);
#else
    if(check_time(to,par->last_hour,par->first_hour))
    {
      dto=(par->first_hour - par->last_hour);
    1840:	mov	r3, r0
    1842:	subs	r5, r1, r0
    1844:	b.n	1774 <check_hibernate(parameters_s*, int)+0x4c>
    1846:	cmp	r2, r1
    1848:	ite	cs
    184a:	movcs	r2, #0
    184c:	movcc	r2, #1
#if SLEEP_MODE==0
    dto = (par->on_time+par->off_time)*60;
    dt = dto - (tt % dto);
    go_hibernate(dt);
#else
    if(check_time(to,par->last_hour,par->first_hour))
    184e:	cmp	r2, #0
    1850:	beq.n	1772 <check_hibernate(parameters_s*, int)+0x4a>
    {
      dto=(par->first_hour - par->last_hour);
    1852:	mov	r3, r0
    1854:	subs	r5, r1, r0
    1856:	b.n	1774 <check_hibernate(parameters_s*, int)+0x4c>
    1858:	.word	0x4003d000
    185c:	.word	0xc22e4507
    1860:	.word	0x00015180
    1864:	.word	0x1fff0898
    1868:	.word	0x400ff088

0000186c <encode_mac(char*)>:
  doRead_mac(0xe,mac,0);
  doRead_mac(0xf,mac,3);
}

char * encode_mac(char * text)  
{
    186c:	push	{r4, r5, r6, r7}
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    186e:	ldr	r2, [pc, #316]	; (19ac <encode_mac(char*)+0x140>)
  FTFL_FCCOB1 = word;             // read the given word of read once area

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
    1870:	ldr	r3, [pc, #316]	; (19b0 <encode_mac(char*)+0x144>)

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
  FTFL_FCCOB1 = word;             // read the given word of read once area
    1872:	ldr	r4, [pc, #320]	; (19b4 <encode_mac(char*)+0x148>)
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    1874:	movs	r6, #65	; 0x41
  FTFL_FCCOB1 = word;             // read the given word of read once area
    1876:	movs	r5, #14

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
    1878:	movs	r1, #128	; 0x80
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    187a:	strb	r6, [r2, #0]
  FTFL_FCCOB1 = word;             // read the given word of read once area
    187c:	strb	r5, [r4, #0]

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));
    187e:	mov	r2, r3
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
  FTFL_FCCOB1 = word;             // read the given word of read once area

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
    1880:	strb	r1, [r3, #0]
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));
    1882:	ldrb	r3, [r2, #0]
    1884:	ldr	r1, [pc, #296]	; (19b0 <encode_mac(char*)+0x144>)
    1886:	lsls	r4, r3, #24
    1888:	bpl.n	1882 <encode_mac(char*)+0x16>

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
    188a:	ldr	r3, [pc, #300]	; (19b8 <encode_mac(char*)+0x14c>)
    188c:	ldr	r2, [pc, #300]	; (19bc <encode_mac(char*)+0x150>)
    188e:	ldrb	r4, [r3, #0]
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    1890:	ldr	r6, [pc, #300]	; (19c0 <encode_mac(char*)+0x154>)

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
    1892:	strb	r4, [r2, #0]
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
  *(mac+offset+2) = FTFL_FCCOB7;       // Skip FTFL_FCCOB4 as it's always 0.
    1894:	subs	r3, #2
  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    1896:	ldrb	r6, [r6, #0]
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    1898:	ldr	r4, [pc, #272]	; (19ac <encode_mac(char*)+0x140>)
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
  *(mac+offset+2) = FTFL_FCCOB7;       // Skip FTFL_FCCOB4 as it's always 0.
    189a:	ldrb	r3, [r3, #0]

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
  FTFL_FCCOB1 = word;             // read the given word of read once area
    189c:	ldr	r5, [pc, #276]	; (19b4 <encode_mac(char*)+0x148>)
  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    189e:	strb	r6, [r2, #1]
  *(mac+offset+2) = FTFL_FCCOB7;       // Skip FTFL_FCCOB4 as it's always 0.
    18a0:	strb	r3, [r2, #2]
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    18a2:	movs	r7, #65	; 0x41
  FTFL_FCCOB1 = word;             // read the given word of read once area
    18a4:	movs	r6, #15

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
    18a6:	movs	r3, #128	; 0x80
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    18a8:	strb	r7, [r4, #0]
  FTFL_FCCOB1 = word;             // read the given word of read once area
    18aa:	strb	r6, [r5, #0]

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));
    18ac:	mov	r4, r1
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
  FTFL_FCCOB1 = word;             // read the given word of read once area

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
    18ae:	strb	r3, [r1, #0]
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));
    18b0:	ldrb	r3, [r4, #0]
    18b2:	lsls	r3, r3, #24
    18b4:	bpl.n	18b0 <encode_mac(char*)+0x44>
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    18b6:	ldrb	r3, [r2, #0]

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
    18b8:	ldr	r5, [pc, #252]	; (19b8 <encode_mac(char*)+0x14c>)
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    18ba:	ldr	r4, [pc, #260]	; (19c0 <encode_mac(char*)+0x154>)
  *(mac+offset+2) = FTFL_FCCOB7;       // Skip FTFL_FCCOB4 as it's always 0.
    18bc:	ldr	r1, [pc, #260]	; (19c4 <encode_mac(char*)+0x158>)

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
    18be:	ldrb	r5, [r5, #0]
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    18c0:	ldrb	r4, [r4, #0]
  *(mac+offset+2) = FTFL_FCCOB7;       // Skip FTFL_FCCOB4 as it's always 0.
    18c2:	ldrb	r1, [r1, #0]
    18c4:	strb	r1, [r2, #5]
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    18c6:	lsrs	r3, r3, #4
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18c8:	cmp	r3, #9
    18ca:	ite	hi
    18cc:	addhi	r3, #55	; 0x37
    18ce:	addls	r3, #48	; 0x30

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
    18d0:	strb	r5, [r2, #3]
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    18d2:	strb	r4, [r2, #4]
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18d4:	strb	r3, [r0, #0]
    digit=(mac[ii] & 0x0F);
    18d6:	ldrb	r3, [r2, #0]
    18d8:	and.w	r3, r3, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18dc:	cmp	r3, #9
    18de:	ite	hi
    18e0:	addhi	r3, #55	; 0x37
    18e2:	addls	r3, #48	; 0x30
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    18e4:	movs	r1, #95	; 0x5f
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18e6:	strb	r3, [r0, #1]
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    18e8:	strb	r1, [r0, #2]
    digit=(mac[ii] & 0xF0) >> 4;
    18ea:	ldrb	r3, [r2, #1]
    18ec:	lsrs	r3, r3, #4
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18ee:	cmp	r3, #9
    18f0:	bls.n	1996 <encode_mac(char*)+0x12a>
    18f2:	adds	r3, #55	; 0x37
    18f4:	strb	r3, [r0, #3]
    digit=(mac[ii] & 0x0F);
    18f6:	ldrb	r3, [r2, #1]
    18f8:	and.w	r3, r3, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18fc:	cmp	r3, #9
    18fe:	ite	hi
    1900:	addhi	r3, #55	; 0x37
    1902:	addls	r3, #48	; 0x30
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1904:	movs	r1, #95	; 0x5f
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1906:	strb	r3, [r0, #4]
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1908:	strb	r1, [r0, #5]
    digit=(mac[ii] & 0xF0) >> 4;
    190a:	ldrb	r3, [r2, #2]
    190c:	lsrs	r3, r3, #4
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    190e:	cmp	r3, #9
    1910:	bls.n	19a6 <encode_mac(char*)+0x13a>
    1912:	adds	r3, #55	; 0x37
    1914:	strb	r3, [r0, #6]
    digit=(mac[ii] & 0x0F);
    1916:	ldrb	r3, [r2, #2]
    1918:	and.w	r3, r3, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    191c:	cmp	r3, #9
    191e:	ite	hi
    1920:	addhi	r3, #55	; 0x37
    1922:	addls	r3, #48	; 0x30
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1924:	movs	r1, #95	; 0x5f
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1926:	strb	r3, [r0, #7]
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1928:	strb	r1, [r0, #8]
    digit=(mac[ii] & 0xF0) >> 4;
    192a:	ldrb	r3, [r2, #3]
    192c:	lsrs	r3, r3, #4
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    192e:	cmp	r3, #9
    1930:	bls.n	19a2 <encode_mac(char*)+0x136>
    1932:	adds	r3, #55	; 0x37
    digit=(mac[ii] & 0x0F);
    1934:	ldrb	r1, [r2, #3]
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1936:	strb	r3, [r0, #9]
    digit=(mac[ii] & 0x0F);
    1938:	and.w	r3, r1, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    193c:	cmp	r3, #9
    193e:	ite	hi
    1940:	addhi.w	r1, r3, #55	; 0x37
    1944:	addls.w	r1, r3, #48	; 0x30
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    1948:	ldrb	r3, [r2, #4]
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    194a:	strb	r1, [r0, #10]
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    194c:	lsrs	r3, r3, #4
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    194e:	movs	r1, #95	; 0x5f
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1950:	cmp	r3, #9
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1952:	strb	r1, [r0, #11]
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1954:	bls.n	199e <encode_mac(char*)+0x132>
    1956:	adds	r3, #55	; 0x37
    digit=(mac[ii] & 0x0F);
    1958:	ldrb	r1, [r2, #4]
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    195a:	strb	r3, [r0, #12]
    digit=(mac[ii] & 0x0F);
    195c:	and.w	r3, r1, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1960:	cmp	r3, #9
    1962:	ite	hi
    1964:	addhi.w	r1, r3, #55	; 0x37
    1968:	addls.w	r1, r3, #48	; 0x30
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    196c:	ldrb	r3, [r2, #5]
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    196e:	strb	r1, [r0, #13]
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    1970:	lsrs	r3, r3, #4
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1972:	movs	r1, #95	; 0x5f
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1974:	cmp	r3, #9
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1976:	strb	r1, [r0, #14]
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1978:	bhi.n	199a <encode_mac(char*)+0x12e>
    197a:	adds	r3, #48	; 0x30
    digit=(mac[ii] & 0x0F);
    197c:	ldrb	r2, [r2, #5]
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    197e:	strb	r3, [r0, #15]
    digit=(mac[ii] & 0x0F);
    1980:	and.w	r3, r2, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1984:	cmp	r3, #9
    1986:	ite	ls
    1988:	addls	r3, #48	; 0x30
    198a:	addhi	r3, #55	; 0x37
  }
  text[jj]=0;
    198c:	movs	r2, #0
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    198e:	strb	r3, [r0, #16]
  }
  text[jj]=0;
    1990:	strb	r2, [r0, #17]

  return text;
}
    1992:	pop	{r4, r5, r6, r7}
    1994:	bx	lr
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1996:	adds	r3, #48	; 0x30
    1998:	b.n	18f4 <encode_mac(char*)+0x88>
    199a:	adds	r3, #55	; 0x37
    199c:	b.n	197c <encode_mac(char*)+0x110>
    199e:	adds	r3, #48	; 0x30
    19a0:	b.n	1958 <encode_mac(char*)+0xec>
    19a2:	adds	r3, #48	; 0x30
    19a4:	b.n	1934 <encode_mac(char*)+0xc8>
    19a6:	adds	r3, #48	; 0x30
    19a8:	b.n	1914 <encode_mac(char*)+0xa8>
    19aa:	nop
    19ac:	.word	0x40020007
    19b0:	.word	0x40020000
    19b4:	.word	0x40020006
    19b8:	.word	0x4002000a
    19bc:	.word	0x1fff1744
    19c0:	.word	0x40020009
    19c4:	.word	0x40020008

000019c8 <printAll()>:
int getLightSensor();
#endif
char text[32];

static void printAll(void)
{
    19c8:	push	{r4, r5, r6, r7, lr}
  SERIALX.printf("%c %2d on_time\n\r",     'g',parameters.on_time);
    19ca:	ldr	r4, [pc, #316]	; (1b08 <printAll()+0x140>)
    19cc:	ldr	r5, [pc, #316]	; (1b0c <printAll()+0x144>)
    19ce:	ldr	r1, [pc, #320]	; (1b10 <printAll()+0x148>)
    19d0:	ldrh	r3, [r5, #0]
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    19d2:	ldr	r7, [pc, #320]	; (1b14 <printAll()+0x14c>)

static char * getDate(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    sprintf(text,"%04d/%02d/%02d",tx.tm_year, tx.tm_mon, tx.tm_mday);
    19d4:	ldr	r6, [pc, #320]	; (1b18 <printAll()+0x150>)
int getLightSensor();
#endif
char text[32];

static void printAll(void)
{
    19d6:	sub	sp, #52	; 0x34
  SERIALX.printf("%c %2d on_time\n\r",     'g',parameters.on_time);
    19d8:	mov	r0, r4
    19da:	movs	r2, #103	; 0x67
    19dc:	bl	af7c <Print::printf(char const*, ...)>
  SERIALX.printf("%c %2d off_time\n\r",    'p',parameters.off_time);
    19e0:	ldrh	r3, [r5, #2]
    19e2:	ldr	r1, [pc, #312]	; (1b1c <printAll()+0x154>)
    19e4:	mov	r0, r4
    19e6:	movs	r2, #112	; 0x70
    19e8:	bl	af7c <Print::printf(char const*, ...)>
  SERIALX.printf("%c %2d first_hour\n\r",  'i',parameters.first_hour);
    19ec:	ldrh	r3, [r5, #4]
    19ee:	ldr	r1, [pc, #304]	; (1b20 <printAll()+0x158>)
    19f0:	mov	r0, r4
    19f2:	movs	r2, #105	; 0x69
    19f4:	bl	af7c <Print::printf(char const*, ...)>
  SERIALX.printf("%c %2d second_hour\n\r", 'u',parameters.second_hour);
    19f8:	ldrh	r3, [r5, #6]
    19fa:	ldr	r1, [pc, #296]	; (1b24 <printAll()+0x15c>)
    19fc:	mov	r0, r4
    19fe:	movs	r2, #117	; 0x75
    1a00:	bl	af7c <Print::printf(char const*, ...)>
  SERIALX.printf("%c %2d third_hour\n\r",  'v',parameters.third_hour);
    1a04:	ldrh	r3, [r5, #8]
    1a06:	ldr	r1, [pc, #288]	; (1b28 <printAll()+0x160>)
    1a08:	mov	r0, r4
    1a0a:	movs	r2, #118	; 0x76
    1a0c:	bl	af7c <Print::printf(char const*, ...)>
  SERIALX.printf("%c %2d last_hour\n\r",   'f',parameters.last_hour);
    1a10:	ldrh	r3, [r5, #10]
    1a12:	ldr	r1, [pc, #280]	; (1b2c <printAll()+0x164>)
    1a14:	mov	r0, r4
    1a16:	movs	r2, #102	; 0x66
    1a18:	bl	af7c <Print::printf(char const*, ...)>
  SERIALX.printf("%c %s name\n\r",         'n',parameters.name);
    1a1c:	add.w	r3, r5, #12
    1a20:	movs	r2, #110	; 0x6e
    1a22:	mov	r0, r4
    1a24:	ldr	r1, [pc, #264]	; (1b30 <printAll()+0x168>)
    1a26:	bl	af7c <Print::printf(char const*, ...)>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1a2a:	ldr	r1, [r7, #0]
}

static char * getDate(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1a2c:	add	r0, sp, #12
    1a2e:	bl	1168 <seconds2tm(unsigned long)>
    sprintf(text,"%04d/%02d/%02d",tx.tm_year, tx.tm_mon, tx.tm_mday);
    1a32:	ldr	r1, [sp, #24]
    1a34:	ldr	r3, [sp, #28]
    1a36:	ldr	r2, [sp, #32]
    1a38:	str	r1, [sp, #0]
    1a3a:	mov	r0, r6
    1a3c:	ldr	r1, [pc, #244]	; (1b34 <printAll()+0x16c>)
    1a3e:	bl	d030 <sprintf>
  SERIALX.printf("%c %2d first_hour\n\r",  'i',parameters.first_hour);
  SERIALX.printf("%c %2d second_hour\n\r", 'u',parameters.second_hour);
  SERIALX.printf("%c %2d third_hour\n\r",  'v',parameters.third_hour);
  SERIALX.printf("%c %2d last_hour\n\r",   'f',parameters.last_hour);
  SERIALX.printf("%c %s name\n\r",         'n',parameters.name);
  SERIALX.printf("%c %s date\n\r",         'd',getDate(text));
    1a42:	mov	r3, r6
    1a44:	movs	r2, #100	; 0x64
    1a46:	mov	r0, r4
    1a48:	ldr	r1, [pc, #236]	; (1b38 <printAll()+0x170>)
    1a4a:	bl	af7c <Print::printf(char const*, ...)>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1a4e:	ldr	r1, [r7, #0]
}

static char * getTime(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1a50:	add	r0, sp, #12
    1a52:	bl	1168 <seconds2tm(unsigned long)>
    sprintf(text,"%02d:%02d:%02d",tx.tm_hour, tx.tm_min, tx.tm_sec);
    1a56:	ldr	r1, [sp, #12]
    1a58:	ldr	r3, [sp, #16]
    1a5a:	ldr	r2, [sp, #20]
    1a5c:	str	r1, [sp, #0]
    1a5e:	mov	r0, r6
    1a60:	ldr	r1, [pc, #216]	; (1b3c <printAll()+0x174>)
    1a62:	bl	d030 <sprintf>
  SERIALX.printf("%c %2d second_hour\n\r", 'u',parameters.second_hour);
  SERIALX.printf("%c %2d third_hour\n\r",  'v',parameters.third_hour);
  SERIALX.printf("%c %2d last_hour\n\r",   'f',parameters.last_hour);
  SERIALX.printf("%c %s name\n\r",         'n',parameters.name);
  SERIALX.printf("%c %s date\n\r",         'd',getDate(text));
  SERIALX.printf("%c %s time\n\r",         't',getTime(text));
    1a66:	mov	r3, r6
    1a68:	movs	r2, #116	; 0x74
    1a6a:	ldr	r1, [pc, #212]	; (1b40 <printAll()+0x178>)
    1a6c:	mov	r0, r4
    1a6e:	bl	af7c <Print::printf(char const*, ...)>
  SERIALX.printf("%c %s mac address\n\r",  'm',encode_mac(text));
    1a72:	mov	r0, r6
    1a74:	bl	186c <encode_mac(char*)>
    1a78:	movs	r2, #109	; 0x6d
    1a7a:	mov	r3, r0
    1a7c:	ldr	r1, [pc, #196]	; (1b44 <printAll()+0x17c>)
    1a7e:	mov	r0, r4
    1a80:	bl	af7c <Print::printf(char const*, ...)>
  SERIALX.println();
    1a84:	mov	r0, r4
    1a86:	bl	af4c <Print::println()>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a8a:	movs	r1, #23
    1a8c:	ldr	r0, [pc, #184]	; (1b48 <printAll()+0x180>)
    1a8e:	bl	9604 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1a92:	mov	r0, r4
    1a94:	bl	af4c <Print::println()>
    1a98:	movs	r1, #48	; 0x30
    1a9a:	ldr	r0, [pc, #176]	; (1b4c <printAll()+0x184>)
    1a9c:	bl	9604 <usb_serial_write>
    1aa0:	mov	r0, r4
    1aa2:	bl	af4c <Print::println()>
    1aa6:	movs	r1, #32
    1aa8:	ldr	r0, [pc, #164]	; (1b50 <printAll()+0x188>)
    1aaa:	bl	9604 <usb_serial_write>
    1aae:	mov	r0, r4
    1ab0:	bl	af4c <Print::println()>
    1ab4:	movs	r1, #70	; 0x46
    1ab6:	ldr	r0, [pc, #156]	; (1b54 <printAll()+0x18c>)
    1ab8:	bl	9604 <usb_serial_write>
    1abc:	mov	r0, r4
    1abe:	bl	af4c <Print::println()>
    1ac2:	movs	r1, #38	; 0x26
    1ac4:	ldr	r0, [pc, #144]	; (1b58 <printAll()+0x190>)
    1ac6:	bl	9604 <usb_serial_write>
    1aca:	mov	r0, r4
    1acc:	bl	af4c <Print::println()>
    1ad0:	movs	r1, #69	; 0x45
    1ad2:	ldr	r0, [pc, #136]	; (1b5c <printAll()+0x194>)
    1ad4:	bl	9604 <usb_serial_write>
    1ad8:	mov	r0, r4
    1ada:	bl	af4c <Print::println()>
    1ade:	movs	r1, #50	; 0x32
    1ae0:	ldr	r0, [pc, #124]	; (1b60 <printAll()+0x198>)
    1ae2:	bl	9604 <usb_serial_write>
    1ae6:	mov	r0, r4
    1ae8:	bl	af4c <Print::println()>
    1aec:	movs	r1, #43	; 0x2b
    1aee:	ldr	r0, [pc, #116]	; (1b64 <printAll()+0x19c>)
    1af0:	bl	9604 <usb_serial_write>
    1af4:	mov	r0, r4
    1af6:	bl	af4c <Print::println()>
  SERIALX.println("exter '!cval' to read value c=(g,p,i,u,v,f,n,d,t) and val is new value");
  SERIALX.println("  e.g.: !i10 will set first hour to 10");
  SERIALX.println("exter 'xval' to exit menu (x is delay in minutes, -1 means immediate)");
  SERIALX.println("  e.g.: x10 will exit and hibernate for 10 minutes");
  SERIALX.println("        x-1 with exit and start immediately");
  SERIALX.println();
    1afa:	mov	r0, r4
}
    1afc:	add	sp, #52	; 0x34
    1afe:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  SERIALX.println("exter '!cval' to read value c=(g,p,i,u,v,f,n,d,t) and val is new value");
  SERIALX.println("  e.g.: !i10 will set first hour to 10");
  SERIALX.println("exter 'xval' to exit menu (x is delay in minutes, -1 means immediate)");
  SERIALX.println("  e.g.: x10 will exit and hibernate for 10 minutes");
  SERIALX.println("        x-1 with exit and start immediately");
  SERIALX.println();
    1b02:	b.w	af4c <Print::println()>
    1b06:	nop
    1b08:	.word	0x1fff0898
    1b0c:	.word	0x1fff0734
    1b10:	.word	0x0001387c
    1b14:	.word	0x4003d000
    1b18:	.word	0x1fff245c
    1b1c:	.word	0x00013890
    1b20:	.word	0x000138a4
    1b24:	.word	0x000138b8
    1b28:	.word	0x000138d0
    1b2c:	.word	0x000138e4
    1b30:	.word	0x000138f8
    1b34:	.word	0x00013908
    1b38:	.word	0x00013918
    1b3c:	.word	0x00013928
    1b40:	.word	0x00013938
    1b44:	.word	0x00013948
    1b48:	.word	0x0001395c
    1b4c:	.word	0x00013974
    1b50:	.word	0x000139a8
    1b54:	.word	0x000139cc
    1b58:	.word	0x00013a14
    1b5c:	.word	0x00013a3c
    1b60:	.word	0x00013a84
    1b64:	.word	0x00013ab8

00001b68 <doMenu()>:
      parMods=1;
    }  
}

int16_t doMenu(void)
{
    1b68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
static void setRTC(uint32_t tt)
{
  RTC_SR = 0;
    1b6c:	ldr	r5, [pc, #640]	; (1df0 <doMenu()+0x288>)
  RTC_TPR = 0;
    1b6e:	ldr	r6, [pc, #644]	; (1df4 <doMenu()+0x28c>)
      parMods=1;
    }  
}

int16_t doMenu(void)
{
    1b70:	sub	sp, #52	; 0x34
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1b72:	bl	95b0 <usb_serial_available>
  int16_t ret=0;
  do
  {
    while(!SERIALX.available());
    1b76:	cmp	r0, #0
    1b78:	beq.n	1b72 <doMenu()+0xa>
        virtual int read() { return usb_serial_getchar(); }
    1b7a:	bl	9538 <usb_serial_getchar>
    1b7e:	uxtb	r4, r0
    char c=SERIALX.read();
    
    if (strchr("?!xa", c))
    1b80:	mov	r1, r4
    1b82:	ldr	r0, [pc, #628]	; (1df8 <doMenu()+0x290>)
    1b84:	bl	d0d8 <strchr>
    1b88:	cmp	r0, #0
    1b8a:	beq.n	1b72 <doMenu()+0xa>
    { switch (c)
    1b8c:	cmp	r4, #63	; 0x3f
    1b8e:	beq.n	1bae <doMenu()+0x46>
    1b90:	ble.n	1c20 <doMenu()+0xb8>
    1b92:	cmp	r4, #97	; 0x61
    1b94:	beq.w	1cac <doMenu()+0x144>
    1b98:	cmp	r4, #120	; 0x78
    1b9a:	bne.n	1b72 <doMenu()+0xa>
      {
        case '?': doMenu1(); break;
        case '!': doMenu2(); break;
        case 'x': ret = SERIALX.parseInt(); break;
    1b9c:	ldr	r0, [pc, #604]	; (1dfc <doMenu()+0x294>)
    1b9e:	bl	b180 <Stream::parseInt()>
    1ba2:	sxth	r0, r0
        case 'a': printAll(); break;
      }
    }
  } while(ret==0);
    1ba4:	cmp	r0, #0
    1ba6:	beq.n	1b72 <doMenu()+0xa>
  return ret;
}
    1ba8:	add	sp, #52	; 0x34
    1baa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1bae:	bl	95b0 <usb_serial_available>
  SERIALX.println();
}

static void doMenu1(void)
{ // for enquiries
    while(!SERIALX.available());
    1bb2:	cmp	r0, #0
    1bb4:	beq.n	1bae <doMenu()+0x46>
        virtual int read() { return usb_serial_getchar(); }
    1bb6:	bl	9538 <usb_serial_getchar>
    1bba:	uxtb	r4, r0
    char c=SERIALX.read();
    
    if (strchr("gpiuvfndtlm", c))
    1bbc:	mov	r1, r4
    1bbe:	ldr	r0, [pc, #576]	; (1e00 <doMenu()+0x298>)
    1bc0:	bl	d0d8 <strchr>
    1bc4:	cmp	r0, #0
    1bc6:	beq.n	1b72 <doMenu()+0xa>
    { switch (c)
    1bc8:	subs	r4, #100	; 0x64
    1bca:	cmp	r4, #18
    1bcc:	bhi.n	1b72 <doMenu()+0xa>
    1bce:	add	r3, pc, #4	; (adr r3, 1bd4 <doMenu()+0x6c>)
    1bd0:	ldr.w	pc, [r3, r4, lsl #2]
    1bd4:	.word	0x00001d75
    1bd8:	.word	0x00001b73
    1bdc:	.word	0x00001d9b
    1be0:	.word	0x00001da9
    1be4:	.word	0x00001b73
    1be8:	.word	0x00001db7
    1bec:	.word	0x00001b73
    1bf0:	.word	0x00001b73
    1bf4:	.word	0x00001b73
    1bf8:	.word	0x00001dc5
    1bfc:	.word	0x00001dd7
    1c00:	.word	0x00001b73
    1c04:	.word	0x00001de3
    1c08:	.word	0x00001b73
    1c0c:	.word	0x00001b73
    1c10:	.word	0x00001b73
    1c14:	.word	0x00001e2d
    1c18:	.word	0x00001e43
    1c1c:	.word	0x00001e51
  {
    while(!SERIALX.available());
    char c=SERIALX.read();
    
    if (strchr("?!xa", c))
    { switch (c)
    1c20:	cmp	r4, #33	; 0x21
    1c22:	bne.n	1b72 <doMenu()+0xa>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1c24:	bl	95b0 <usb_serial_available>
! t timestring\n ESM_Logger sets time
! x delay\n      ESM_Logger exits menu and hibernates for the amount given in delay
*/
static void doMenu2(void)
{ // for settings
    while(!SERIALX.available());
    1c28:	cmp	r0, #0
    1c2a:	beq.n	1c24 <doMenu()+0xbc>
        virtual int read() { return usb_serial_getchar(); }
    1c2c:	bl	9538 <usb_serial_getchar>
    1c30:	uxtb	r4, r0
    char c=SERIALX.read();
    uint16_t year,month,day,hour,minutes,seconds;
    
    if (strchr("gpiuvfndt", c))
    1c32:	mov	r1, r4
    1c34:	ldr	r0, [pc, #460]	; (1e04 <doMenu()+0x29c>)
    1c36:	bl	d0d8 <strchr>
    1c3a:	cmp	r0, #0
    1c3c:	beq.n	1b72 <doMenu()+0xa>
    { switch (c)
    1c3e:	subs	r4, #100	; 0x64
    1c40:	cmp	r4, #18
    1c42:	bhi.n	1ca4 <doMenu()+0x13c>
    1c44:	tbb	[pc, r4]
    1c48:	.word	0x473e2e0a
    1c4c:	.word	0x2e2e502e
    1c50:	.word	0x2e592e2e
    1c54:	.word	0x2e2e2e68
    1c58:	.short	0x8d71
    1c5a:	.byte	0x35
    1c5b:	.byte	0x00
        case 'v': parameters.third_hour  =SERIALX.parseInt();break;
        case 'f': parameters.last_hour   =SERIALX.parseInt();break;
        case 'n': for(int ii=0; ii<4;ii++) parameters.name[ii] = SERIALX.read();
                  parameters.name[4]=0; break;
        case 'd':     
                  year= SERIALX.parseInt();
    1c5c:	ldr	r0, [pc, #412]	; (1dfc <doMenu()+0x294>)
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1c5e:	ldr.w	r9, [pc, #436]	; 1e14 <doMenu()+0x2ac>
        case 'v': parameters.third_hour  =SERIALX.parseInt();break;
        case 'f': parameters.last_hour   =SERIALX.parseInt();break;
        case 'n': for(int ii=0; ii<4;ii++) parameters.name[ii] = SERIALX.read();
                  parameters.name[4]=0; break;
        case 'd':     
                  year= SERIALX.parseInt();
    1c62:	bl	b180 <Stream::parseInt()>
    1c66:	mov	r8, r0
                  month= SERIALX.parseInt();
    1c68:	ldr	r0, [pc, #400]	; (1dfc <doMenu()+0x294>)
    1c6a:	bl	b180 <Stream::parseInt()>
    1c6e:	mov	r7, r0
                  day= SERIALX.parseInt();
    1c70:	ldr	r0, [pc, #392]	; (1dfc <doMenu()+0x294>)
    1c72:	bl	b180 <Stream::parseInt()>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1c76:	ldr.w	r1, [r9]
        case 'n': for(int ii=0; ii<4;ii++) parameters.name[ii] = SERIALX.read();
                  parameters.name[4]=0; break;
        case 'd':     
                  year= SERIALX.parseInt();
                  month= SERIALX.parseInt();
                  day= SERIALX.parseInt();
    1c7a:	mov	r4, r0
}

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    1c7c:	add	r0, sp, #12
    1c7e:	bl	1168 <seconds2tm(unsigned long)>
    tx.tm_year=year;
    tx.tm_mon=month;
    1c82:	uxth	r7, r7

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    tx.tm_year=year;
    1c84:	uxth.w	r3, r8
    tx.tm_mon=month;
    tx.tm_mday=day;
    1c88:	uxth	r4, r4
    tt=tm2seconds(&tx);
    1c8a:	add	r0, sp, #12

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    tx.tm_year=year;
    1c8c:	str	r3, [sp, #32]
    tx.tm_mon=month;
    1c8e:	str	r7, [sp, #28]
    tx.tm_mday=day;
    1c90:	str	r4, [sp, #24]
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    tx.tm_hour=hour;
    tx.tm_min=minutes;
    tx.tm_sec=seconds;
    tt=tm2seconds(&tx);
    1c92:	bl	1524 <tm2seconds(tm*)>
/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
static void setRTC(uint32_t tt)
{
  RTC_SR = 0;
    1c96:	movs	r3, #0
  RTC_TPR = 0;
  RTC_TSR = tt;
  RTC_SR = RTC_SR_TCE;
    1c98:	movs	r2, #16
/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
static void setRTC(uint32_t tt)
{
  RTC_SR = 0;
    1c9a:	str	r3, [r5, #0]
  RTC_TPR = 0;
    1c9c:	str	r3, [r6, #0]
  RTC_TSR = tt;
    1c9e:	str.w	r0, [r9]
  RTC_SR = RTC_SR_TCE;
    1ca2:	str	r2, [r5, #0]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1ca4:	ldr	r3, [pc, #352]	; (1e08 <doMenu()+0x2a0>)
    1ca6:	movs	r2, #1
    1ca8:	strh	r2, [r3, #0]
    1caa:	b.n	1b72 <doMenu()+0xa>
    { switch (c)
      {
        case '?': doMenu1(); break;
        case '!': doMenu2(); break;
        case 'x': ret = SERIALX.parseInt(); break;
        case 'a': printAll(); break;
    1cac:	bl	19c8 <printAll()>
    1cb0:	b.n	1b72 <doMenu()+0xa>
      {
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
        case 'i': parameters.first_hour  =SERIALX.parseInt();break;
        case 'u': parameters.second_hour =SERIALX.parseInt();break;
        case 'v': parameters.third_hour  =SERIALX.parseInt();break;
    1cb2:	ldr	r0, [pc, #328]	; (1dfc <doMenu()+0x294>)
    1cb4:	bl	b180 <Stream::parseInt()>
    1cb8:	ldr	r3, [pc, #336]	; (1e0c <doMenu()+0x2a4>)
    1cba:	strh	r0, [r3, #8]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1cbc:	ldr	r3, [pc, #328]	; (1e08 <doMenu()+0x2a0>)
    1cbe:	movs	r2, #1
    1cc0:	strh	r2, [r3, #0]
    1cc2:	b.n	1b72 <doMenu()+0xa>
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
        case 'i': parameters.first_hour  =SERIALX.parseInt();break;
        case 'u': parameters.second_hour =SERIALX.parseInt();break;
        case 'v': parameters.third_hour  =SERIALX.parseInt();break;
        case 'f': parameters.last_hour   =SERIALX.parseInt();break;
    1cc4:	ldr	r0, [pc, #308]	; (1dfc <doMenu()+0x294>)
    1cc6:	bl	b180 <Stream::parseInt()>
    1cca:	ldr	r3, [pc, #320]	; (1e0c <doMenu()+0x2a4>)
    1ccc:	strh	r0, [r3, #10]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1cce:	ldr	r3, [pc, #312]	; (1e08 <doMenu()+0x2a0>)
    1cd0:	movs	r2, #1
    1cd2:	strh	r2, [r3, #0]
    1cd4:	b.n	1b72 <doMenu()+0xa>
    uint16_t year,month,day,hour,minutes,seconds;
    
    if (strchr("gpiuvfndt", c))
    { switch (c)
      {
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
    1cd6:	ldr	r0, [pc, #292]	; (1dfc <doMenu()+0x294>)
    1cd8:	bl	b180 <Stream::parseInt()>
    1cdc:	ldr	r3, [pc, #300]	; (1e0c <doMenu()+0x2a4>)
    1cde:	strh	r0, [r3, #0]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1ce0:	ldr	r3, [pc, #292]	; (1e08 <doMenu()+0x2a0>)
    1ce2:	movs	r2, #1
    1ce4:	strh	r2, [r3, #0]
    1ce6:	b.n	1b72 <doMenu()+0xa>
    if (strchr("gpiuvfndt", c))
    { switch (c)
      {
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
        case 'i': parameters.first_hour  =SERIALX.parseInt();break;
    1ce8:	ldr	r0, [pc, #272]	; (1dfc <doMenu()+0x294>)
    1cea:	bl	b180 <Stream::parseInt()>
    1cee:	ldr	r3, [pc, #284]	; (1e0c <doMenu()+0x2a4>)
    1cf0:	strh	r0, [r3, #4]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1cf2:	ldr	r3, [pc, #276]	; (1e08 <doMenu()+0x2a0>)
    1cf4:	movs	r2, #1
    1cf6:	strh	r2, [r3, #0]
    1cf8:	b.n	1b72 <doMenu()+0xa>
    1cfa:	ldr	r4, [pc, #276]	; (1e10 <doMenu()+0x2a8>)
    1cfc:	adds	r7, r4, #4
    1cfe:	bl	9538 <usb_serial_getchar>
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
        case 'i': parameters.first_hour  =SERIALX.parseInt();break;
        case 'u': parameters.second_hour =SERIALX.parseInt();break;
        case 'v': parameters.third_hour  =SERIALX.parseInt();break;
        case 'f': parameters.last_hour   =SERIALX.parseInt();break;
        case 'n': for(int ii=0; ii<4;ii++) parameters.name[ii] = SERIALX.read();
    1d02:	strb.w	r0, [r4, #1]!
    1d06:	cmp	r4, r7
    1d08:	bne.n	1cfe <doMenu()+0x196>
                  parameters.name[4]=0; break;
    1d0a:	ldr	r3, [pc, #256]	; (1e0c <doMenu()+0x2a4>)
    1d0c:	movs	r2, #0
    1d0e:	strb	r2, [r3, #16]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1d10:	ldr	r3, [pc, #244]	; (1e08 <doMenu()+0x2a0>)
    1d12:	movs	r2, #1
    1d14:	strh	r2, [r3, #0]
    1d16:	b.n	1b72 <doMenu()+0xa>
    
    if (strchr("gpiuvfndt", c))
    { switch (c)
      {
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
    1d18:	ldr	r0, [pc, #224]	; (1dfc <doMenu()+0x294>)
    1d1a:	bl	b180 <Stream::parseInt()>
    1d1e:	ldr	r3, [pc, #236]	; (1e0c <doMenu()+0x2a4>)
    1d20:	strh	r0, [r3, #2]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1d22:	ldr	r3, [pc, #228]	; (1e08 <doMenu()+0x2a0>)
    1d24:	movs	r2, #1
    1d26:	strh	r2, [r3, #0]
    1d28:	b.n	1b72 <doMenu()+0xa>
                  month= SERIALX.parseInt();
                  day= SERIALX.parseInt();
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour= SERIALX.parseInt();
    1d2a:	ldr	r0, [pc, #208]	; (1dfc <doMenu()+0x294>)
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1d2c:	ldr.w	r9, [pc, #228]	; 1e14 <doMenu()+0x2ac>
                  month= SERIALX.parseInt();
                  day= SERIALX.parseInt();
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour= SERIALX.parseInt();
    1d30:	bl	b180 <Stream::parseInt()>
    1d34:	mov	r8, r0
                  minutes= SERIALX.parseInt();
    1d36:	ldr	r0, [pc, #196]	; (1dfc <doMenu()+0x294>)
    1d38:	bl	b180 <Stream::parseInt()>
    1d3c:	mov	r7, r0
                  seconds= SERIALX.parseInt();
    1d3e:	ldr	r0, [pc, #188]	; (1dfc <doMenu()+0x294>)
    1d40:	bl	b180 <Stream::parseInt()>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1d44:	ldr.w	r1, [r9]
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour= SERIALX.parseInt();
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
    1d48:	mov	r4, r0
}

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    1d4a:	add	r0, sp, #12
    1d4c:	bl	1168 <seconds2tm(unsigned long)>
    tx.tm_hour=hour;
    tx.tm_min=minutes;
    1d50:	uxth	r7, r7

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    tx.tm_hour=hour;
    1d52:	uxth.w	r3, r8
    tx.tm_min=minutes;
    tx.tm_sec=seconds;
    1d56:	uxth	r4, r4
    tt=tm2seconds(&tx);
    1d58:	add	r0, sp, #12

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    tx.tm_hour=hour;
    1d5a:	str	r3, [sp, #20]
    tx.tm_min=minutes;
    1d5c:	str	r7, [sp, #16]
    tx.tm_sec=seconds;
    1d5e:	str	r4, [sp, #12]
    1d60:	b.n	1c92 <doMenu()+0x12a>
    { switch (c)
      {
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
        case 'i': parameters.first_hour  =SERIALX.parseInt();break;
        case 'u': parameters.second_hour =SERIALX.parseInt();break;
    1d62:	ldr	r0, [pc, #152]	; (1dfc <doMenu()+0x294>)
    1d64:	bl	b180 <Stream::parseInt()>
    1d68:	ldr	r3, [pc, #160]	; (1e0c <doMenu()+0x2a4>)
    1d6a:	strh	r0, [r3, #6]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1d6c:	ldr	r3, [pc, #152]	; (1e08 <doMenu()+0x2a0>)
    1d6e:	movs	r2, #1
    1d70:	strh	r2, [r3, #0]
    1d72:	b.n	1b72 <doMenu()+0xa>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1d74:	ldr	r3, [pc, #156]	; (1e14 <doMenu()+0x2ac>)
}

static char * getDate(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1d76:	add	r0, sp, #12
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1d78:	ldr	r1, [r3, #0]
}

static char * getDate(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1d7a:	bl	1168 <seconds2tm(unsigned long)>
    sprintf(text,"%04d/%02d/%02d",tx.tm_year, tx.tm_mon, tx.tm_mday);
    1d7e:	ldr	r1, [sp, #24]
    1d80:	str	r1, [sp, #0]
    1d82:	ldr	r3, [sp, #28]
    1d84:	ldr	r2, [sp, #32]
    1d86:	ldr	r1, [pc, #144]	; (1e18 <doMenu()+0x2b0>)

static char * getTime(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    sprintf(text,"%02d:%02d:%02d",tx.tm_hour, tx.tm_min, tx.tm_sec);
    1d88:	ldr	r0, [pc, #144]	; (1e1c <doMenu()+0x2b4>)
    1d8a:	bl	d030 <sprintf>
        case 'u': SERIALX.printf("%02d\r\n",parameters.second_hour);break;
        case 'v': SERIALX.printf("%02d\r\n",parameters.third_hour);break;
        case 'f': SERIALX.printf("%02d\r\n",parameters.last_hour);break;
        case 'n': SERIALX.printf("%s\r\n",parameters.name);break;  // could be (unique) mac address
        case 'd': SERIALX.printf("%s\r\n",getDate(text));break;
        case 't': SERIALX.printf("%s\r\n",getTime(text));break;
    1d8e:	ldr	r2, [pc, #140]	; (1e1c <doMenu()+0x2b4>)
    1d90:	ldr	r1, [pc, #140]	; (1e20 <doMenu()+0x2b8>)
    1d92:	ldr	r0, [pc, #104]	; (1dfc <doMenu()+0x294>)
    1d94:	bl	af7c <Print::printf(char const*, ...)>
    1d98:	b.n	1b72 <doMenu()+0xa>
        case 'g': SERIALX.printf("%02d\r\n",parameters.on_time); break;
        case 'p': SERIALX.printf("%02d\r\n",parameters.off_time); break;
        case 'i': SERIALX.printf("%02d\r\n",parameters.first_hour);break;
        case 'u': SERIALX.printf("%02d\r\n",parameters.second_hour);break;
        case 'v': SERIALX.printf("%02d\r\n",parameters.third_hour);break;
        case 'f': SERIALX.printf("%02d\r\n",parameters.last_hour);break;
    1d9a:	ldr	r3, [pc, #112]	; (1e0c <doMenu()+0x2a4>)
    1d9c:	ldr	r1, [pc, #132]	; (1e24 <doMenu()+0x2bc>)
    1d9e:	ldrh	r2, [r3, #10]
    1da0:	ldr	r0, [pc, #88]	; (1dfc <doMenu()+0x294>)
    1da2:	bl	af7c <Print::printf(char const*, ...)>
    1da6:	b.n	1b72 <doMenu()+0xa>
    char c=SERIALX.read();
    
    if (strchr("gpiuvfndtlm", c))
    { switch (c)
      {
        case 'g': SERIALX.printf("%02d\r\n",parameters.on_time); break;
    1da8:	ldr	r3, [pc, #96]	; (1e0c <doMenu()+0x2a4>)
    1daa:	ldr	r1, [pc, #120]	; (1e24 <doMenu()+0x2bc>)
    1dac:	ldrh	r2, [r3, #0]
    1dae:	ldr	r0, [pc, #76]	; (1dfc <doMenu()+0x294>)
    1db0:	bl	af7c <Print::printf(char const*, ...)>
    1db4:	b.n	1b72 <doMenu()+0xa>
        case 'p': SERIALX.printf("%02d\r\n",parameters.off_time); break;
        case 'i': SERIALX.printf("%02d\r\n",parameters.first_hour);break;
    1db6:	ldr	r3, [pc, #84]	; (1e0c <doMenu()+0x2a4>)
    1db8:	ldr	r1, [pc, #104]	; (1e24 <doMenu()+0x2bc>)
    1dba:	ldrh	r2, [r3, #4]
    1dbc:	ldr	r0, [pc, #60]	; (1dfc <doMenu()+0x294>)
    1dbe:	bl	af7c <Print::printf(char const*, ...)>
    1dc2:	b.n	1b72 <doMenu()+0xa>
        case 'd': SERIALX.printf("%s\r\n",getDate(text));break;
        case 't': SERIALX.printf("%s\r\n",getTime(text));break;
        #if USE_LUX==1
        case 'l': SERIALX.printf("%04d\r\n",getLightSensor());break;
        #endif
        case 'm': SERIALX.printf("%s\r\n",encode_mac(text)); break;
    1dc4:	ldr	r0, [pc, #84]	; (1e1c <doMenu()+0x2b4>)
    1dc6:	bl	186c <encode_mac(char*)>
    1dca:	ldr	r1, [pc, #84]	; (1e20 <doMenu()+0x2b8>)
    1dcc:	mov	r2, r0
    1dce:	ldr	r0, [pc, #44]	; (1dfc <doMenu()+0x294>)
    1dd0:	bl	af7c <Print::printf(char const*, ...)>
    1dd4:	b.n	1b72 <doMenu()+0xa>
        case 'p': SERIALX.printf("%02d\r\n",parameters.off_time); break;
        case 'i': SERIALX.printf("%02d\r\n",parameters.first_hour);break;
        case 'u': SERIALX.printf("%02d\r\n",parameters.second_hour);break;
        case 'v': SERIALX.printf("%02d\r\n",parameters.third_hour);break;
        case 'f': SERIALX.printf("%02d\r\n",parameters.last_hour);break;
        case 'n': SERIALX.printf("%s\r\n",parameters.name);break;  // could be (unique) mac address
    1dd6:	ldr	r2, [pc, #80]	; (1e28 <doMenu()+0x2c0>)
    1dd8:	ldr	r1, [pc, #68]	; (1e20 <doMenu()+0x2b8>)
    1dda:	ldr	r0, [pc, #32]	; (1dfc <doMenu()+0x294>)
    1ddc:	bl	af7c <Print::printf(char const*, ...)>
    1de0:	b.n	1b72 <doMenu()+0xa>
    
    if (strchr("gpiuvfndtlm", c))
    { switch (c)
      {
        case 'g': SERIALX.printf("%02d\r\n",parameters.on_time); break;
        case 'p': SERIALX.printf("%02d\r\n",parameters.off_time); break;
    1de2:	ldr	r3, [pc, #40]	; (1e0c <doMenu()+0x2a4>)
    1de4:	ldr	r1, [pc, #60]	; (1e24 <doMenu()+0x2bc>)
    1de6:	ldrh	r2, [r3, #2]
    1de8:	ldr	r0, [pc, #16]	; (1dfc <doMenu()+0x294>)
    1dea:	bl	af7c <Print::printf(char const*, ...)>
    1dee:	b.n	1b72 <doMenu()+0xa>
    1df0:	.word	0x4003d014
    1df4:	.word	0x4003d004
    1df8:	.word	0x00013ae4
    1dfc:	.word	0x1fff0898
    1e00:	.word	0x00013aec
    1e04:	.word	0x00013b08
    1e08:	.word	0x1fff1f4c
    1e0c:	.word	0x1fff0734
    1e10:	.word	0x1fff073f
    1e14:	.word	0x4003d000
    1e18:	.word	0x00013908
    1e1c:	.word	0x1fff245c
    1e20:	.word	0x00013b00
    1e24:	.word	0x00013af8
    1e28:	.word	0x1fff0740
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1e2c:	ldr	r3, [pc, #48]	; (1e60 <doMenu()+0x2f8>)
}

static char * getTime(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1e2e:	add	r0, sp, #12
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1e30:	ldr	r1, [r3, #0]
}

static char * getTime(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1e32:	bl	1168 <seconds2tm(unsigned long)>
    sprintf(text,"%02d:%02d:%02d",tx.tm_hour, tx.tm_min, tx.tm_sec);
    1e36:	ldr	r1, [sp, #12]
    1e38:	str	r1, [sp, #0]
    1e3a:	ldr	r3, [sp, #16]
    1e3c:	ldr	r2, [sp, #20]
    1e3e:	ldr	r1, [pc, #36]	; (1e64 <doMenu()+0x2fc>)
    1e40:	b.n	1d88 <doMenu()+0x220>
    { switch (c)
      {
        case 'g': SERIALX.printf("%02d\r\n",parameters.on_time); break;
        case 'p': SERIALX.printf("%02d\r\n",parameters.off_time); break;
        case 'i': SERIALX.printf("%02d\r\n",parameters.first_hour);break;
        case 'u': SERIALX.printf("%02d\r\n",parameters.second_hour);break;
    1e42:	ldr	r3, [pc, #36]	; (1e68 <doMenu()+0x300>)
    1e44:	ldr	r1, [pc, #36]	; (1e6c <doMenu()+0x304>)
    1e46:	ldrh	r2, [r3, #6]
    1e48:	ldr	r0, [pc, #36]	; (1e70 <doMenu()+0x308>)
    1e4a:	bl	af7c <Print::printf(char const*, ...)>
    1e4e:	b.n	1b72 <doMenu()+0xa>
        case 'v': SERIALX.printf("%02d\r\n",parameters.third_hour);break;
    1e50:	ldr	r3, [pc, #20]	; (1e68 <doMenu()+0x300>)
    1e52:	ldr	r1, [pc, #24]	; (1e6c <doMenu()+0x304>)
    1e54:	ldrh	r2, [r3, #8]
    1e56:	ldr	r0, [pc, #24]	; (1e70 <doMenu()+0x308>)
    1e58:	bl	af7c <Print::printf(char const*, ...)>
    1e5c:	b.n	1b72 <doMenu()+0xa>
    1e5e:	nop
    1e60:	.word	0x4003d000
    1e64:	.word	0x00013928
    1e68:	.word	0x1fff0734
    1e6c:	.word	0x00013af8
    1e70:	.word	0x1fff0898

00001e74 <SdBase<FsVolume>::errorHalt(Print*)>:
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(Print* pr) {
    1e74:	mov	r5, r0
    1e76:	ldr.w	r0, [r0, #1156]	; 0x484
    1e7a:	push	{r3, lr}
    1e7c:	mov	r4, r1


  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1e7e:	cbz	r0, 1eb0 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
      return m_card->errorCode();
    1e80:	ldr	r3, [r0, #0]
    1e82:	ldr	r3, [r3, #36]	; 0x24
    1e84:	blx	r3
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(Print* pr) {
    if (sdErrorCode()) {
    1e86:	cbnz	r0, 1eb0 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
    1e88:	ldr.w	r3, [r5, #1144]	; 0x478
  /** \return Partition type, FAT_TYPE_EXFAT, FAT_TYPE_FAT32,
   *          FAT_TYPE_FAT16, or zero for error.
   */
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
    1e8c:	cbz	r3, 1e9e <SdBase<FsVolume>::errorHalt(Print*)+0x2a>
    1e8e:	ldrb	r3, [r3, #7]
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    1e90:	cbz	r3, 1e94 <SdBase<FsVolume>::errorHalt(Print*)+0x20>
    1e92:	b.n	1e92 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
      pr->println(F("Check SD format."));
    1e94:	mov	r0, r4
    1e96:	ldr	r1, [pc, #104]	; (1f00 <SdBase<FsVolume>::errorHalt(Print*)+0x8c>)
    1e98:	bl	1144 <Print::println(__FlashStringHelper const*)>
    1e9c:	b.n	1e92 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1e9e:	ldr.w	r3, [r5, #1148]	; 0x47c
    1ea2:	cmp	r3, #0
    1ea4:	beq.n	1e94 <SdBase<FsVolume>::errorHalt(Print*)+0x20>
    1ea6:	ldrb.w	r3, [r3, #1084]	; 0x43c
    if (sdErrorCode()) {
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    1eaa:	cmp	r3, #0
    1eac:	bne.n	1e92 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1eae:	b.n	1e94 <SdBase<FsVolume>::errorHalt(Print*)+0x20>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1eb0:	ldr	r1, [pc, #80]	; (1f04 <SdBase<FsVolume>::errorHalt(Print*)+0x90>)
    1eb2:	mov	r0, r4
    1eb4:	bl	1128 <Print::write(char const*)>
    1eb8:	ldr.w	r0, [r5, #1156]	; 0x484


  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1ebc:	cbz	r0, 1ef8 <SdBase<FsVolume>::errorHalt(Print*)+0x84>
      return m_card->errorCode();
    1ebe:	ldr	r3, [r0, #0]
    1ec0:	ldr	r3, [r3, #36]	; 0x24
    1ec2:	blx	r3
    1ec4:	mov	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1ec6:	movs	r3, #0
    1ec8:	movs	r2, #16
    1eca:	mov	r0, r4
    1ecc:	bl	af98 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1ed0:	ldr	r1, [pc, #52]	; (1f08 <SdBase<FsVolume>::errorHalt(Print*)+0x94>)
    1ed2:	mov	r0, r4
    1ed4:	bl	1128 <Print::write(char const*)>
    1ed8:	ldr.w	r0, [r5, #1156]	; 0x484
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    1edc:	cbz	r0, 1efc <SdBase<FsVolume>::errorHalt(Print*)+0x88>
    1ede:	ldr	r3, [r0, #0]
    1ee0:	ldr	r3, [r3, #40]	; 0x28
    1ee2:	blx	r3
    1ee4:	uxtb	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1ee6:	movs	r3, #0
    1ee8:	movs	r2, #16
    1eea:	mov	r0, r4
    1eec:	bl	af98 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    1ef0:	mov	r0, r4
    1ef2:	bl	af4c <Print::println()>
    1ef6:	b.n	1e92 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>


  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1ef8:	movs	r1, #39	; 0x27
    1efa:	b.n	1ec6 <SdBase<FsVolume>::errorHalt(Print*)+0x52>
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    1efc:	mov	r1, r0
    1efe:	b.n	1ee6 <SdBase<FsVolume>::errorHalt(Print*)+0x72>
    1f00:	.word	0x00013b24
    1f04:	.word	0x00013b14
    1f08:	.word	0x00013b20

00001f0c <SdBase<FsVolume>::errorHalt(char const*)>:
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1f0c:	ldr	r4, [pc, #28]	; (1f2c <SdBase<FsVolume>::errorHalt(char const*)+0x20>)
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] msg Message to print.
   */
  void errorHalt(const char* msg) {errorHalt(&Serial, msg);}
    1f0e:	push	{r3, lr}
    1f10:	mov	r5, r0
    1f12:	mov	r6, r1
    1f14:	mov	r0, r4
    1f16:	ldr	r1, [pc, #24]	; (1f30 <SdBase<FsVolume>::errorHalt(char const*)+0x24>)
    1f18:	bl	1128 <Print::write(char const*)>
   * \param[in] pr Print destination.
   * \param[in] msg Message to print.
   */
  void errorHalt(Print* pr, const char* msg) {
    pr->print(F("error: "));
    pr->println(msg);
    1f1c:	mov	r1, r6
    1f1e:	mov	r0, r4
    1f20:	bl	1144 <Print::println(__FlashStringHelper const*)>
    errorHalt(pr);
    1f24:	mov	r1, r4
    1f26:	mov	r0, r5
    1f28:	bl	1e74 <SdBase<FsVolume>::errorHalt(Print*)>
    1f2c:	.word	0x1fff0898
    1f30:	.word	0x00013b38

00001f34 <readConfig(void*)>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    1f34:	ldr	r3, [pc, #176]	; (1fe8 <readConfig(void*)+0xb4>)
    1f36:	ldr	r1, [r3, #0]
    1f38:	cmp	r1, #0
    1f3a:	beq.n	1fbe <readConfig(void*)+0x8a>
  mFS.close();
  
}

void readConfig(void * ptr)
{
    1f3c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f40:	movs	r3, #1
    1f42:	sub	sp, #32
    1f44:	mov	r4, r0
    1f46:	ldr	r2, [pc, #164]	; (1fec <readConfig(void*)+0xb8>)
    1f48:	ldr	r0, [pc, #164]	; (1ff0 <readConfig(void*)+0xbc>)
    1f4a:	bl	3220 <FsFile::open(FsVolume*, char const*, unsigned char)>
    1f4e:	cbz	r0, 1fb8 <readConfig(void*)+0x84>
    1f50:	ldr	r6, [pc, #160]	; (1ff4 <readConfig(void*)+0xc0>)
    1f52:	add.w	r7, r4, #12
    1f56:	mov	r8, r6
    1f58:	b.n	1f78 <readConfig(void*)+0x44>
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    1f5a:	movs	r2, #4
    1f5c:	mov	r1, sp
    1f5e:	bl	52bc <FatFile::read(void*, unsigned int)>
    1f62:	mov	r5, r0
      return nbuf;
    }

    uint32_t read(uint8_t *buffer, uint32_t nbuf)
    {      
      if ((int)nbuf != file.read(buffer, nbuf)) sd.errorHalt("read failed");
    1f64:	cmp	r5, #4
    1f66:	bne.n	1fde <readConfig(void*)+0xaa>
  char text[32];
  uint16_t *data = (uint16_t *) ptr;
  if(!mFS.open((char*)"Config.txt",O_RDONLY)) return;
  for(int ii=0; ii<6; ii++)
    {mFS.read((uint8_t*)text,4); sscanf(text,"%d",&data[ii]);}
    1f68:	mov	r2, r4
    1f6a:	ldr	r1, [pc, #140]	; (1ff8 <readConfig(void*)+0xc4>)
    1f6c:	adds	r4, #2
    1f6e:	mov	r0, sp
    1f70:	bl	d07c <sscanf>
void readConfig(void * ptr)
{
  char text[32];
  uint16_t *data = (uint16_t *) ptr;
  if(!mFS.open((char*)"Config.txt",O_RDONLY)) return;
  for(int ii=0; ii<6; ii++)
    1f74:	cmp	r7, r4
    1f76:	beq.n	1f92 <readConfig(void*)+0x5e>
    1f78:	ldr.w	r0, [r6, #1280]	; 0x500
    1f7c:	cmp	r0, #0
    1f7e:	bne.n	1f5a <readConfig(void*)+0x26>
    1f80:	ldr.w	r0, [r8, #1284]	; 0x504
    1f84:	cbz	r0, 1fde <readConfig(void*)+0xaa>
    1f86:	movs	r2, #4
    1f88:	mov	r1, sp
    1f8a:	bl	34a8 <ExFatFile::read(void*, unsigned int)>
    1f8e:	mov	r5, r0
    1f90:	b.n	1f64 <readConfig(void*)+0x30>
    1f92:	ldr.w	r0, [r6, #1280]	; 0x500
    1f96:	ldr	r3, [pc, #92]	; (1ff4 <readConfig(void*)+0xc0>)
    1f98:	cbz	r0, 1fce <readConfig(void*)+0x9a>
    1f9a:	mov	r2, r5
    1f9c:	mov	r1, r7
    1f9e:	bl	52bc <FatFile::read(void*, unsigned int)>
    1fa2:	cmp	r0, #4
    1fa4:	bne.n	1fde <readConfig(void*)+0xaa>
    1fa6:	ldr.w	r0, [r6, #1280]	; 0x500
    1faa:	ldr	r3, [pc, #72]	; (1ff4 <readConfig(void*)+0xc0>)
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    1fac:	cbz	r0, 1fc0 <readConfig(void*)+0x8c>
    1fae:	bl	56c0 <FatFile::truncate()>
    }

    void close(void)
    {
      file.truncate();
      file.close();
    1fb2:	ldr	r0, [pc, #60]	; (1ff0 <readConfig(void*)+0xbc>)
    1fb4:	bl	31f8 <FsFile::close()>
    {mFS.read((uint8_t*)text,4); sscanf(text,"%d",&data[ii]);}
  mFS.read((uint8_t*)&data[6],4);
  mFS.close();
}
    1fb8:	add	sp, #32
    1fba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fbe:	bx	lr
    1fc0:	ldr.w	r0, [r3, #1284]	; 0x504
    1fc4:	cmp	r0, #0
    1fc6:	beq.n	1fb2 <readConfig(void*)+0x7e>
    1fc8:	bl	4b60 <ExFatFile::truncate()>
    1fcc:	b.n	1fb2 <readConfig(void*)+0x7e>
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    1fce:	ldr.w	r0, [r3, #1284]	; 0x504
    1fd2:	cbz	r0, 1fde <readConfig(void*)+0xaa>
    1fd4:	mov	r2, r5
    1fd6:	mov	r1, r7
    1fd8:	bl	34a8 <ExFatFile::read(void*, unsigned int)>
    1fdc:	b.n	1fa2 <readConfig(void*)+0x6e>
      return nbuf;
    }

    uint32_t read(uint8_t *buffer, uint32_t nbuf)
    {      
      if ((int)nbuf != file.read(buffer, nbuf)) sd.errorHalt("read failed");
    1fde:	ldr	r1, [pc, #28]	; (1ffc <readConfig(void*)+0xc8>)
    1fe0:	ldr	r0, [pc, #16]	; (1ff4 <readConfig(void*)+0xc0>)
    1fe2:	bl	1f0c <SdBase<FsVolume>::errorHalt(char const*)>
    1fe6:	nop
    1fe8:	.word	0x20020360
    1fec:	.word	0x00013b40
    1ff0:	.word	0x1fff2408
    1ff4:	.word	0x1fff1f50
    1ff8:	.word	0x00013b58
    1ffc:	.word	0x00013b4c

00002000 <storeConfig(void*)>:
  mFS.logText((char *)"lux.txt",(char *)txt);
}
#endif

void storeConfig(void * ptr)
{ char text[32];
    2000:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    2004:	ldr	r3, [pc, #184]	; (20c0 <storeConfig(void*)+0xc0>)
    2006:	ldr	r1, [r3, #0]
    2008:	sub	sp, #36	; 0x24
    200a:	mov	r8, r0
    200c:	cbz	r1, 2018 <storeConfig(void*)+0x18>
    200e:	movs	r3, #82	; 0x52
    2010:	ldr	r2, [pc, #176]	; (20c4 <storeConfig(void*)+0xc4>)
    2012:	ldr	r0, [pc, #180]	; (20c8 <storeConfig(void*)+0xc8>)
    2014:	bl	3220 <FsFile::open(FsVolume*, char const*, unsigned char)>
    2018:	ldr	r6, [pc, #176]	; (20cc <storeConfig(void*)+0xcc>)
    201a:	sub.w	r4, r8, #2
    201e:	mov	r9, r6
    2020:	add.w	r7, r8, #10
    2024:	b.n	2036 <storeConfig(void*)+0x36>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    2026:	mov	r2, r5
    2028:	mov	r1, sp
    202a:	bl	5738 <FatFile::write(void const*, unsigned int)>
      file.close();
    }

    uint32_t write(uint8_t *buffer, uint32_t nbuf)
    {
      if (nbuf != file.write(buffer, nbuf)) sd.errorHalt("write failed");
    202e:	cmp	r5, r0
    2030:	bne.n	20b8 <storeConfig(void*)+0xb8>
  uint16_t *data = (uint16_t *) ptr;
  mFS.open((char*)"Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<6; ii++)
    2032:	cmp	r7, r4
    2034:	beq.n	2064 <storeConfig(void*)+0x64>
    {sprintf(text,"%2d\r\n",data[ii]); mFS.write((uint8_t*)text,strlen(text));}
    2036:	ldrh.w	r2, [r4, #2]!
    203a:	ldr	r1, [pc, #148]	; (20d0 <storeConfig(void*)+0xd0>)
    203c:	mov	r0, sp
    203e:	bl	d030 <sprintf>
    2042:	mov	r0, sp
    2044:	bl	d1c0 <strlen>
    2048:	mov	r5, r0
    204a:	ldr.w	r0, [r6, #1280]	; 0x500
    204e:	cmp	r0, #0
    2050:	bne.n	2026 <storeConfig(void*)+0x26>
    2052:	ldr.w	r0, [r9, #1284]	; 0x504
    2056:	cmp	r0, #0
    2058:	beq.n	202e <storeConfig(void*)+0x2e>
    205a:	mov	r2, r5
    205c:	mov	r1, sp
    205e:	bl	4c80 <ExFatFile::write(void const*, unsigned int)>
    2062:	b.n	202e <storeConfig(void*)+0x2e>
    2064:	ldr.w	r0, [r6, #1280]	; 0x500
    2068:	ldr	r3, [pc, #96]	; (20cc <storeConfig(void*)+0xcc>)
  mFS.write((uint8_t *)&data[6],4);
    206a:	add.w	r1, r8, #12
    206e:	cbz	r0, 2092 <storeConfig(void*)+0x92>
    2070:	movs	r2, #4
    2072:	bl	5738 <FatFile::write(void const*, unsigned int)>
    2076:	cmp	r0, #4
    2078:	bne.n	20b8 <storeConfig(void*)+0xb8>
    207a:	ldr.w	r0, [r6, #1280]	; 0x500
    207e:	ldr	r3, [pc, #76]	; (20cc <storeConfig(void*)+0xcc>)
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    2080:	cbz	r0, 20a0 <storeConfig(void*)+0xa0>
    2082:	bl	56c0 <FatFile::truncate()>
    }

    void close(void)
    {
      file.truncate();
      file.close();
    2086:	ldr	r0, [pc, #64]	; (20c8 <storeConfig(void*)+0xc8>)
    2088:	bl	31f8 <FsFile::close()>
  mFS.close();
  
}
    208c:	add	sp, #36	; 0x24
    208e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    2092:	ldr.w	r0, [r3, #1284]	; 0x504
    2096:	cbz	r0, 20b8 <storeConfig(void*)+0xb8>
    2098:	movs	r2, #4
    209a:	bl	4c80 <ExFatFile::write(void const*, unsigned int)>
    209e:	b.n	2076 <storeConfig(void*)+0x76>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    20a0:	ldr.w	r0, [r3, #1284]	; 0x504
    20a4:	cmp	r0, #0
    20a6:	beq.n	2086 <storeConfig(void*)+0x86>
    20a8:	bl	4b60 <ExFatFile::truncate()>
    20ac:	ldr	r0, [pc, #24]	; (20c8 <storeConfig(void*)+0xc8>)
    20ae:	bl	31f8 <FsFile::close()>
    20b2:	add	sp, #36	; 0x24
    20b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

    uint32_t write(uint8_t *buffer, uint32_t nbuf)
    {
      if (nbuf != file.write(buffer, nbuf)) sd.errorHalt("write failed");
    20b8:	ldr	r1, [pc, #24]	; (20d4 <storeConfig(void*)+0xd4>)
    20ba:	ldr	r0, [pc, #16]	; (20cc <storeConfig(void*)+0xcc>)
    20bc:	bl	1f0c <SdBase<FsVolume>::errorHalt(char const*)>
    20c0:	.word	0x20020360
    20c4:	.word	0x00013b40
    20c8:	.word	0x1fff2408
    20cc:	.word	0x1fff1f50
    20d0:	.word	0x00013b5c
    20d4:	.word	0x00013b64

000020d8 <setup>:
void mySystick_isr(void){ systick_millis_count++;}
void yield(void){}
//
// Arduino Setup
void setup(void)
{
    20d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // redirect Systick 
  _VectorsRam[15] = mySystick_isr;
    20dc:	ldr	r3, [pc, #720]	; (23b0 <setup+0x2d8>)
    20de:	ldr	r2, [pc, #724]	; (23b4 <setup+0x2dc>)
    20e0:	str	r2, [r3, #60]	; 0x3c

  // check first (with pin2 set to low) if we wanted to enter menu mode
  pinMode(2,INPUT_PULLUP);
    20e2:	movs	r1, #2
    20e4:	mov	r0, r1
void mySystick_isr(void){ systick_millis_count++;}
void yield(void){}
//
// Arduino Setup
void setup(void)
{
    20e6:	sub	sp, #60	; 0x3c
  // redirect Systick 
  _VectorsRam[15] = mySystick_isr;

  // check first (with pin2 set to low) if we wanted to enter menu mode
  pinMode(2,INPUT_PULLUP);
    20e8:	bl	9c28 <pinMode>
  delay(1000);
    20ec:	mov.w	r0, #1000	; 0x3e8
    20f0:	bl	9ce4 <delay>
    20f4:	ldr.w	sl, [pc, #736]	; 23d8 <setup+0x300>
  pinMode(23, OUTPUT);
    20f8:	movs	r1, #1
    20fa:	movs	r0, #23
    20fc:	bl	9c28 <pinMode>
    2100:	movs	r2, #4
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
    2102:	ldr	r3, [pc, #692]	; (23b8 <setup+0x2e0>)
			} else if (pin == 21) {
				CORE_PIN21_PORTCLEAR = CORE_PIN21_BITMASK;
			} else if (pin == 22) {
				CORE_PIN22_PORTCLEAR = CORE_PIN22_BITMASK;
			} else if (pin == 23) {
				CORE_PIN23_PORTCLEAR = CORE_PIN23_BITMASK;
    2104:	str.w	r2, [sl]
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
    2108:	ldr	r3, [r3, #0]
  digitalWriteFast(23,LOW); // turn sensor and mic ON 
  
  if(digitalReadFast(2)==LOW)
    210a:	lsls	r2, r3, #31
    210c:	bpl.w	22e4 <setup+0x20c>
  SdFs sd;
  FsFile file;
  
  public:
    void init(void)
    { if(FS_started) return;
    2110:	ldr	r5, [pc, #680]	; (23bc <setup+0x2e4>)

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    2112:	ldr	r3, [pc, #684]	; (23c0 <setup+0x2e8>)
    2114:	ldrh	r2, [r5, #0]
		header.nsamp = nsamp;
    2116:	movs	r0, #128	; 0x80
		header.fsamp = fsamp;
    2118:	movw	r1, #44100	; 0xac44

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    211c:	movs	r4, #1
		header.nsamp = nsamp;
    211e:	str	r0, [r3, #20]
		header.fsamp = fsamp;
    2120:	str	r1, [r3, #12]

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    2122:	str	r4, [r3, #8]
    2124:	cmp	r2, #0
    2126:	beq.w	2340 <setup+0x268>
 * 
 */
void uSD_IF::init(void)
{
  mFS.init();
  fileStatus=0;
    212a:	ldr	r7, [pc, #664]	; (23c4 <setup+0x2ec>)
  }
  else
  {
    #ifdef DO_LOGGER
      loggerSetup(N_CHAN, F_SAMP, N_SAMP);
      readConfig(&parameters);
    212c:	ldr	r0, [pc, #664]	; (23c8 <setup+0x2f0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    212e:	ldr	r4, [pc, #668]	; (23cc <setup+0x2f4>)
    2130:	ldr.w	r9, [pc, #760]	; 242c <setup+0x354>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    2134:	ldr	r5, [pc, #664]	; (23d0 <setup+0x2f8>)
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    2136:	ldr	r6, [pc, #668]	; (23d4 <setup+0x2fc>)
    2138:	movs	r3, #0
    213a:	strh	r3, [r7, #14]
    213c:	bl	1f34 <readConfig(void*)>
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
}

void doBlink(uint32_t dt, uint32_t msec)
{ pinMode(13,OUTPUT);
    2140:	movs	r1, #1
    2142:	movs	r0, #13
    2144:	bl	9c28 <pinMode>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2148:	ldr	r3, [r4, #0]
    214a:	str	r3, [sp, #52]	; 0x34
	return ret;
    214c:	ldr	r2, [sp, #52]	; 0x34
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    214e:	ldr.w	lr, [pc, #648]	; 23d8 <setup+0x300>
    2152:	ldr.w	r3, [r9]
    2156:	addw	r2, r2, #1500	; 0x5dc
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    215a:	mov	r1, r4
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    215c:	movs	r0, #32

//------------------------ Asynchronous Blink ------------------------------
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1<to+msec) {yield(); return;}
    215e:	add.w	ip, r3, #500	; 0x1f4
    2162:	b.n	216e <setup+0x96>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2164:	ldr	r3, [r1, #0]
    2166:	str	r3, [sp, #44]	; 0x2c
	return ret;
    2168:	ldr	r3, [sp, #44]	; 0x2c
    216a:	cmp	r3, ip
    216c:	bcs.n	21e4 <setup+0x10c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    216e:	ldr	r3, [r4, #0]
    2170:	str	r3, [sp, #48]	; 0x30
	return ret;
    2172:	ldr	r3, [sp, #48]	; 0x30
}

void doBlink(uint32_t dt, uint32_t msec)
{ pinMode(13,OUTPUT);
  uint32_t t0=millis();
  while(millis()<t0+dt) blink(msec);
    2174:	cmp	r3, r2
    2176:	bcc.n	2164 <setup+0x8c>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2178:	ldr	r3, [pc, #604]	; (23d8 <setup+0x300>)
    217a:	ldr	r5, [pc, #608]	; (23dc <setup+0x304>)
    217c:	ldr	r6, [pc, #608]	; (23e0 <setup+0x308>)
    217e:	ldr.w	r8, [pc, #688]	; 2430 <setup+0x358>
    2182:	movs	r2, #32
    2184:	str	r2, [r3, #0]
	#ifdef DO_USB_AUDIO
		usbAudio_init();
	#endif

  // limit acquisition to specific hours of day
  check_hibernate(&parameters,0);
    2186:	movs	r1, #0
    2188:	ldr	r0, [pc, #572]	; (23c8 <setup+0x2f0>)
    218a:	bl	1728 <check_hibernate(parameters_s*, int)>
       
	#if DO_DEBUG>0
    // wait for serial line to come up
    pinMode(13,OUTPUT); // for LED
    218e:	movs	r1, #1
    2190:	movs	r0, #13
    2192:	bl	9c28 <pinMode>
    pinMode(13,HIGH);
    2196:	movs	r1, #1
    2198:	movs	r0, #13
    219a:	bl	9c28 <pinMode>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    219e:	ldr	r2, [pc, #560]	; (23d0 <setup+0x2f8>)
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    21a0:	ldr.w	lr, [pc, #564]	; 23d8 <setup+0x300>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    21a4:	ldr	r0, [pc, #556]	; (23d4 <setup+0x2fc>)
    21a6:	ldr.w	r3, [r9]
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    21aa:	movs	r1, #32

//------------------------ Asynchronous Blink ------------------------------
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1<to+msec) {yield(); return;}
    21ac:	add.w	ip, r3, #500	; 0x1f4
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    21b0:	ldrb	r3, [r5, #0]
    21b2:	cbz	r3, 21c8 <setup+0xf0>
    21b4:	ldrb	r3, [r6, #0]
    21b6:	lsls	r3, r3, #31
    21b8:	bpl.n	21c8 <setup+0xf0>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    21ba:	ldr	r3, [r4, #0]
    21bc:	ldr.w	sl, [r8]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    21c0:	rsb	r3, sl, r3
    21c4:	cmp	r3, #14
    21c6:	bhi.n	21f6 <setup+0x11e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    21c8:	ldr	r3, [r4, #0]
    21ca:	str	r3, [sp, #28]
	return ret;
    21cc:	ldr	r3, [sp, #28]
    21ce:	cmp	r3, ip
    21d0:	bcc.n	21b0 <setup+0xd8>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    21d2:	ldr.w	ip, [r2]
    21d6:	tst.w	ip, #32
    21da:	bne.n	22a6 <setup+0x1ce>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    21dc:	str	r1, [r0, #0]
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
    21de:	str.w	r3, [r9]
    21e2:	b.n	21ac <setup+0xd4>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    21e4:	ldr.w	ip, [r5]
    21e8:	tst.w	ip, #32
    21ec:	bne.n	22ac <setup+0x1d4>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    21ee:	str	r0, [r6, #0]
    21f0:	str.w	r3, [r9]
    21f4:	b.n	215e <setup+0x86>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    21f6:	movs	r1, #22
    21f8:	ldr	r0, [pc, #488]	; (23e4 <setup+0x30c>)
    21fa:	bl	9604 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    21fe:	ldr	r0, [pc, #488]	; (23e8 <setup+0x310>)
    2200:	bl	af4c <Print::println()>
}

inline uint16_t acqSetup(void)
{
  // initialize and start ICS43432 interface
  uint32_t fs = ICS43432.init(F_SAMP, i2s_rx_buffer, N_BUF, I2S_CHAN);
    2204:	movs	r3, #2
    2206:	str	r3, [sp, #0]
    2208:	ldr	r2, [pc, #480]	; (23ec <setup+0x314>)
    220a:	ldr	r0, [pc, #484]	; (23f0 <setup+0x318>)
    220c:	mov.w	r3, #512	; 0x200
    2210:	movw	r1, #44100	; 0xac44
    2214:	bl	2ae0 <c_ICS43432::init(long, long*, unsigned long, unsigned short)>
  if(fs>0)
    2218:	str	r0, [sp, #12]
    221a:	mov	r3, r0
    221c:	cmp	r0, #0
    221e:	bne.n	22b2 <setup+0x1da>
	#ifdef DO_LOGGER
    logLightSensor();  
	#endif
  #endif

	haveAcq=acqSetup();
    2220:	ldr	r1, [pc, #464]	; (23f4 <setup+0x31c>)
 loopStatus=0;
 doHibernate=0;
    2222:	ldr	r2, [pc, #468]	; (23f8 <setup+0x320>)
    logLightSensor();  
	#endif
  #endif

	haveAcq=acqSetup();
 loopStatus=0;
    2224:	ldr	r6, [pc, #468]	; (23fc <setup+0x324>)
	#ifdef DO_LOGGER
    logLightSensor();  
	#endif
  #endif

	haveAcq=acqSetup();
    2226:	str	r3, [r1, #0]
 loopStatus=0;
    2228:	movs	r5, #0
    222a:	movs	r1, #9
    222c:	ldr	r0, [pc, #464]	; (2400 <setup+0x328>)
 doHibernate=0;
    222e:	str	r5, [r2, #0]
    logLightSensor();  
	#endif
  #endif

	haveAcq=acqSetup();
 loopStatus=0;
    2230:	str	r5, [r6, #0]
    2232:	bl	9604 <usb_serial_write>
    2236:	ldr	r0, [pc, #432]	; (23e8 <setup+0x310>)
    2238:	bl	af4c <Print::println()>
inline void acqStart(void)
{ 
  #if DO_DEBUG == 2
    Serial.println("Start Acq");
  #endif
  ICS43432.start();
    223c:	ldr	r0, [pc, #432]	; (23f0 <setup+0x318>)
    223e:	bl	2b60 <c_ICS43432::start()>
 loopStatus=0;
 doHibernate=0;
 #if ON_TIME > 0
   acqStart();
   #ifdef DO_LOGGER
     delay(300); // delay logger to allow acq to settle down
    2242:	mov.w	r0, #300	; 0x12c
    2246:	bl	9ce4 <delay>
    224a:	movs	r1, #12
    224c:	ldr	r0, [pc, #436]	; (2404 <setup+0x32c>)
    224e:	bl	9604 <usb_serial_write>
    2252:	ldr	r0, [pc, #404]	; (23e8 <setup+0x310>)
    2254:	bl	af4c <Print::println()>

/*--------------- larger AudioRecorderLogger methods ------------------*/
template <typename T, int nq, int nd, int na>
void Logger<T,nq,nd,na>:: clear(void)
  {
    uint16_t t = tail;
    2258:	ldr.w	lr, [pc, #472]	; 2434 <setup+0x35c>
    225c:	ldrh.w	r2, [lr, #202]	; 0xca
    while (t != head) {
    2260:	ldrsh.w	r6, [lr, #200]	; 0xc8
    2264:	cmp	r2, r6
    2266:	beq.n	2286 <setup+0x1ae>
      if (++t >= nq) t = 0;
      pool.release(t);
      queue[t]=0; // remove address from queue
    2268:	mov	r0, r5
template <typename T, int nq, int nd, int na>
void Logger<T,nq,nd,na>:: clear(void)
  {
    uint16_t t = tail;
    while (t != head) {
      if (++t >= nq) t = 0;
    226a:	adds	r3, r2, #1
    226c:	uxth	r3, r3
    226e:	cmp.w	r3, #300	; 0x12c
    2272:	it	cs
    2274:	movcs	r3, #0
      pool.release(t);
      queue[t]=0; // remove address from queue
    2276:	add.w	r1, r3, #38400	; 0x9600
    227a:	adds	r1, #6
/*--------------- larger AudioRecorderLogger methods ------------------*/
template <typename T, int nq, int nd, int na>
void Logger<T,nq,nd,na>:: clear(void)
  {
    uint16_t t = tail;
    while (t != head) {
    227c:	cmp	r6, r3
    227e:	uxth	r2, r3
      if (++t >= nq) t = 0;
      pool.release(t);
      queue[t]=0; // remove address from queue
    2280:	str.w	r0, [r7, r1, lsl #2]
/*--------------- larger AudioRecorderLogger methods ------------------*/
template <typename T, int nq, int nd, int na>
void Logger<T,nq,nd,na>:: clear(void)
  {
    uint16_t t = tail;
    while (t != head) {
    2284:	bne.n	226a <setup+0x192>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2286:	ldr	r3, [r4, #0]
    2288:	str	r3, [sp, #20]
     loggerStart(); 
   #endif
   startTime=millis();
    228a:	ldr	r1, [pc, #380]	; (2408 <setup+0x330>)
	return ret;
    228c:	ldr	r0, [sp, #20]
      if (++t >= nq) t = 0;
      pool.release(t);
      queue[t]=0; // remove address from queue
    }
    tail = t;
    228e:	strh.w	r2, [lr, #202]	; 0xca
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
  { maxBlockSize = na*nd*sizeof(T);}

  void start(void) { clear(); reset(); isRunning=1; enabled = 1; }
    2292:	movs	r3, #1
class uSD_IF
{
  public:
  uSD_IF(void) {;}
  void init(void);
  void reset(void) {fileStatus=0;}
    2294:	movs	r2, #0
    2296:	str	r0, [r1, #0]
    2298:	strh	r2, [r7, #14]
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
  { maxBlockSize = na*nd*sizeof(T);}

  void start(void) { clear(); reset(); isRunning=1; enabled = 1; }
    229a:	strh	r3, [r7, #12]
    229c:	strh.w	r3, [lr, #204]	; 0xcc
 #endif

}
    22a0:	add	sp, #60	; 0x3c
    22a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    22a6:	str.w	r1, [lr]
    22aa:	b.n	21de <setup+0x106>
    22ac:	str.w	r0, [lr]
    22b0:	b.n	21f0 <setup+0x118>
    22b2:	vmov	s15, r0
  uint32_t fs = ICS43432.init(F_SAMP, i2s_rx_buffer, N_BUF, I2S_CHAN);
  if(fs>0)
  {
    #if DO_DEBUG>0
      Serial.printf("Fsamp requested: %.3f kHz  got %.3f kHz\n\r" ,
          F_SAMP/1000.0f, fs/1000.0f);
    22b6:	vcvt.f32.u32	s14, s15
    22ba:	vldr	s15, [pc, #336]	; 240c <setup+0x334>
    22be:	vdiv.f32	s13, s14, s15
    22c2:	vmov	r0, s13
    22c6:	bl	b660 <__aeabi_f2d>
    22ca:	add	r3, pc, #220	; (adr r3, 23a8 <setup+0x2d0>)
    22cc:	ldrd	r2, r3, [r3]
    22d0:	strd	r0, r1, [sp]
    22d4:	ldr	r1, [pc, #312]	; (2410 <setup+0x338>)
    22d6:	ldr	r0, [pc, #272]	; (23e8 <setup+0x310>)
    22d8:	bl	af7c <Print::printf(char const*, ...)>
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    22dc:	bl	980c <usb_serial_flush_output>
    22e0:	movs	r3, #1
    22e2:	b.n	2220 <setup+0x148>
    22e4:	ldr.w	r9, [pc, #324]	; 242c <setup+0x354>
    22e8:	ldr	r5, [pc, #240]	; (23dc <setup+0x304>)
    22ea:	ldr	r6, [pc, #244]	; (23e0 <setup+0x308>)
    22ec:	ldr	r4, [pc, #220]	; (23cc <setup+0x2f4>)
    22ee:	ldr.w	r8, [pc, #320]	; 2430 <setup+0x358>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    22f2:	ldr	r7, [pc, #224]	; (23d4 <setup+0x2fc>)
  digitalWriteFast(23,LOW); // turn sensor and mic ON 
  
  if(digitalReadFast(2)==LOW)
  { 
    // signal begin of menu
    pinMode(13,OUTPUT); // for LED
    22f4:	movs	r1, #1
    22f6:	movs	r0, #13
    22f8:	bl	9c28 <pinMode>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    22fc:	ldr	r0, [pc, #208]	; (23d0 <setup+0x2f8>)
    22fe:	ldr.w	r3, [r9]
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2302:	mov	r2, sl
    2304:	movs	r1, #32

//------------------------ Asynchronous Blink ------------------------------
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1<to+msec) {yield(); return;}
    2306:	add.w	lr, r3, #1000	; 0x3e8
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    230a:	ldrb	r3, [r5, #0]
    230c:	cbz	r3, 2324 <setup+0x24c>
    230e:	ldrb	r3, [r6, #0]
    2310:	lsls	r3, r3, #31
    2312:	bpl.n	2324 <setup+0x24c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2314:	ldr	r3, [r4, #0]
    2316:	ldr.w	ip, [r8]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    231a:	rsb	r3, ip, r3
    231e:	cmp	r3, #14
    2320:	bhi.w	2438 <setup+0x360>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2324:	ldr	r3, [r4, #0]
    2326:	str	r3, [sp, #24]
	return ret;
    2328:	ldr	r3, [sp, #24]
    232a:	cmp	r3, lr
    232c:	bcc.n	230a <setup+0x232>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    232e:	ldr.w	lr, [r0]
    2332:	tst.w	lr, #32
    2336:	beq.n	2394 <setup+0x2bc>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2338:	str	r1, [r2, #0]
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
    233a:	str.w	r3, [r9]
    233e:	b.n	2306 <setup+0x22e>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    2340:	ldr	r7, [pc, #208]	; (2414 <setup+0x33c>)
    2342:	add.w	r6, r7, #1160	; 0x488
    2346:	mov	r1, r4
    2348:	mov	r0, r6
    234a:	bl	8750 <SdioCard::begin(SdioConfig)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    234e:	movs	r1, #9
    2350:	ldr	r0, [pc, #196]	; (2418 <setup+0x340>)
    2352:	bl	9604 <usb_serial_write>
    2356:	ldr	r0, [pc, #144]	; (23e8 <setup+0x310>)
    2358:	bl	af4c <Print::println()>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    235c:	mov	r0, r6
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    235e:	str.w	r6, [r7, #1156]	; 0x484
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    2362:	bl	7da8 <SdioCard::errorCode() const>
    2366:	mov	r2, r6
    2368:	mov	r3, r0
    236a:	ldr	r1, [pc, #176]	; (241c <setup+0x344>)
    236c:	ldr	r0, [pc, #120]	; (23e8 <setup+0x310>)
    236e:	bl	af7c <Print::printf(char const*, ...)>
    return m_card && !m_card->errorCode();
    2372:	ldr.w	r0, [r7, #1156]	; 0x484
    2376:	cbz	r0, 238c <setup+0x2b4>
    2378:	ldr	r3, [r0, #0]
    237a:	ldr	r3, [r3, #36]	; 0x24
    237c:	blx	r3
    237e:	cbnz	r0, 238c <setup+0x2b4>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2380:	ldr.w	r1, [r7, #1156]	; 0x484
    2384:	mov	r0, r7
    2386:	bl	32c4 <FsVolume::begin(SdCardInterface*)>
    238a:	cbnz	r0, 2398 <setup+0x2c0>
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
    238c:	ldr	r1, [pc, #144]	; (2420 <setup+0x348>)
    238e:	ldr	r0, [pc, #132]	; (2414 <setup+0x33c>)
    2390:	bl	1f0c <SdBase<FsVolume>::errorHalt(char const*)>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    2394:	str	r1, [r7, #0]
    2396:	b.n	233a <setup+0x262>
      // Set Time callback
      FsDateTime::callback = dateTime;
    2398:	ldr	r3, [pc, #136]	; (2424 <setup+0x34c>)
    239a:	ldr	r2, [pc, #140]	; (2428 <setup+0x350>)

      FS_started=1;
    239c:	strh	r4, [r5, #0]
  public:
    void init(void)
    { if(FS_started) return;
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    239e:	str	r2, [r3, #0]
    23a0:	b.n	212a <setup+0x52>
    23a2:	nop
    23a4:	nop.w
    23a8:	.word	0xc0000000
    23ac:	.word	0x40460ccc
    23b0:	.word	0x1fff0200
    23b4:	.word	0x00000f09
    23b8:	.word	0x400ff0d0
    23bc:	.word	0x1fff152c
    23c0:	.word	0x1fff1530
    23c4:	.word	0x1fff2484
    23c8:	.word	0x1fff0734
    23cc:	.word	0x200203c0
    23d0:	.word	0x400ff090
    23d4:	.word	0x400ff084
    23d8:	.word	0x400ff088
    23dc:	.word	0x200204a4
    23e0:	.word	0x200203bc
    23e4:	.word	0x00013c60
    23e8:	.word	0x1fff0898
    23ec:	.word	0x1fff174c
    23f0:	.word	0x1fff2480
    23f4:	.word	0x1fff173c
    23f8:	.word	0x1fff1738
    23fc:	.word	0x1fff2458
    2400:	.word	0x00013c44
    2404:	.word	0x00013c50
    2408:	.word	0x20020158
    240c:	.word	0x447a0000
    2410:	.word	0x00013c18
    2414:	.word	0x1fff1f50
    2418:	.word	0x00013b74
    241c:	.word	0x00013b80
    2420:	.word	0x00013b94
    2424:	.word	0x20020364
    2428:	.word	0x000014a1
    242c:	.word	0x1fff247c
    2430:	.word	0x20020534
    2434:	.word	0x20018084
  if(digitalReadFast(2)==LOW)
  { 
    // signal begin of menu
    pinMode(13,OUTPUT); // for LED
    while(!SERIALX) blink(1000);
    digitalWrite(13,LOW); // switch of Led
    2438:	movs	r1, #0
    243a:	movs	r0, #13
    243c:	bl	9be0 <digitalWrite>
  SdFs sd;
  FsFile file;
  
  public:
    void init(void)
    { if(FS_started) return;
    2440:	ldr	r3, [pc, #464]	; (2614 <setup+0x53c>)
#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
		header.nsamp = nsamp;
    2442:	ldr	r0, [pc, #468]	; (2618 <setup+0x540>)
    2444:	ldrh	r3, [r3, #0]
    2446:	movs	r1, #128	; 0x80
		header.fsamp = fsamp;
    2448:	movw	r2, #44100	; 0xac44

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    244c:	movs	r7, #1
		header.nsamp = nsamp;
    244e:	str	r1, [r0, #20]
		header.fsamp = fsamp;
    2450:	str	r2, [r0, #12]

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    2452:	str	r7, [r0, #8]
    2454:	cmp	r3, #0
    2456:	beq.n	2540 <setup+0x468>
 * 
 */
void uSD_IF::init(void)
{
  mFS.init();
  fileStatus=0;
    2458:	ldr	r7, [pc, #448]	; (261c <setup+0x544>)
      loggerSetup(N_CHAN, F_SAMP, N_SAMP);
      readConfig(&parameters);
    #endif
    printAll();

    parMods=0;
    245a:	ldr.w	fp, [pc, #492]	; 2648 <setup+0x570>

    SERIALX.begin(9600);

    #ifdef DO_LOGGER
      loggerSetup(N_CHAN, F_SAMP, N_SAMP);
      readConfig(&parameters);
    245e:	ldr	r0, [pc, #448]	; (2620 <setup+0x548>)
    2460:	mov.w	sl, #0
    2464:	strh.w	sl, [r7, #14]
    2468:	bl	1f34 <readConfig(void*)>
    #endif
    printAll();
    246c:	bl	19c8 <printAll()>

    parMods=0;
    2470:	strh.w	sl, [fp]
    int16_t ret=0;
    do ret=doMenu(); while(ret==0);
    2474:	bl	1b68 <doMenu()>
    2478:	cmp	r0, #0
    247a:	beq.n	2474 <setup+0x39c>
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
}

void doBlink(uint32_t dt, uint32_t msec)
{ pinMode(13,OUTPUT);
    247c:	movs	r1, #1
    247e:	mov	sl, r0
    2480:	movs	r0, #13
    2482:	bl	9c28 <pinMode>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2486:	ldr	r3, [r4, #0]
    2488:	str	r3, [sp, #40]	; 0x28
	return ret;
    248a:	ldr	r2, [sp, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    248c:	ldr	r1, [pc, #404]	; (2624 <setup+0x54c>)
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    248e:	ldr.w	lr, [pc, #444]	; 264c <setup+0x574>
    2492:	ldr.w	r3, [r9]
    2496:	add.w	r2, r2, #1000	; 0x3e8
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    249a:	movs	r0, #32

//------------------------ Asynchronous Blink ------------------------------
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1<to+msec) {yield(); return;}
    249c:	add.w	ip, r3, #100	; 0x64
    24a0:	b.n	24ac <setup+0x3d4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    24a2:	ldr	r3, [r1, #0]
    24a4:	str	r3, [sp, #32]
	return ret;
    24a6:	ldr	r3, [sp, #32]
    24a8:	cmp	r3, ip
    24aa:	bcs.n	2522 <setup+0x44a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    24ac:	ldr	r3, [r4, #0]
    24ae:	str	r3, [sp, #36]	; 0x24
	return ret;
    24b0:	ldr	r3, [sp, #36]	; 0x24
}

void doBlink(uint32_t dt, uint32_t msec)
{ pinMode(13,OUTPUT);
  uint32_t t0=millis();
  while(millis()<t0+dt) blink(msec);
    24b2:	cmp	r3, r2
    24b4:	bcc.n	24a2 <setup+0x3ca>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    24b6:	ldr	r3, [pc, #368]	; (2628 <setup+0x550>)
    24b8:	movs	r2, #32
    24ba:	str	r2, [r3, #0]
    //expect -1 to continue with program and a value >0 to hibernate for (val) minutes
    
    // signal end of menu
    doBlink(1000,100);

    if(parMods)
    24bc:	ldrsh.w	r3, [fp]
    24c0:	cbz	r3, 24ec <setup+0x414>
    24c2:	ldr	r3, [pc, #336]	; (2614 <setup+0x53c>)

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    24c4:	ldr	r1, [pc, #336]	; (2618 <setup+0x540>)
    24c6:	ldrh	r3, [r3, #0]
		header.nsamp = nsamp;
    24c8:	movs	r2, #128	; 0x80

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    24ca:	mov.w	fp, #1
		header.nsamp = nsamp;
    24ce:	str	r2, [r1, #20]
		header.fsamp = fsamp;
    24d0:	movw	r2, #44100	; 0xac44

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    24d4:	str.w	fp, [r1, #8]
		header.nsamp = nsamp;
		header.fsamp = fsamp;
    24d8:	str	r2, [r1, #12]
    24da:	cmp	r3, #0
    24dc:	beq.n	25a6 <setup+0x4ce>
    24de:	movs	r3, #0

    if(parMods)
    {
      #ifdef DO_LOGGER
        loggerSetup(N_CHAN, F_SAMP, N_SAMP);
        storeConfig(&parameters);
    24e0:	ldr	r0, [pc, #316]	; (2620 <setup+0x548>)
    24e2:	strh	r3, [r7, #14]
    24e4:	bl	2000 <storeConfig(void*)>
      #endif
      printAll();
    24e8:	bl	19c8 <printAll()>
    }

    if(ret>0) go_hibernate(ret*60);
    24ec:	cmp.w	sl, #0
    24f0:	ble.w	2186 <setup+0xae>
			} else if (pin == 21) {
				CORE_PIN21_PORTCLEAR = CORE_PIN21_BITMASK;
			} else if (pin == 22) {
				CORE_PIN22_PORTCLEAR = CORE_PIN22_BITMASK;
			} else if (pin == 23) {
				CORE_PIN23_PORTCLEAR = CORE_PIN23_BITMASK;
    24f4:	ldr	r3, [pc, #304]	; (2628 <setup+0x550>)
    24f6:	rsb	sl, sl, sl, lsl #4
    24fa:	movs	r2, #4
    24fc:	mov.w	fp, sl, lsl #2
    2500:	str	r2, [r3, #0]
 */
#include "hibernate.h"

void go_hibernate(uint32_t seconds)
{ digitalWriteFast(23,LOW); // turn sensor an micro OFF 
  for(int ii=0;ii<24;ii++) pinMode(ii,INPUT);   
    2502:	mov.w	sl, #0
    2506:	uxtb.w	r0, sl
    250a:	movs	r1, #0
    250c:	add.w	sl, sl, #1
    2510:	bl	9c28 <pinMode>
    2514:	cmp.w	sl, #24
    2518:	bne.n	2506 <setup+0x42e>
  hibernate(seconds);
    251a:	mov	r0, fp
    251c:	bl	da0 <hibernate>
    2520:	b.n	2186 <setup+0xae>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    2522:	ldr.w	ip, [lr]
    2526:	str	r3, [sp, #12]
    2528:	tst.w	ip, #32
    252c:	beq.n	253a <setup+0x462>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    252e:	ldr	r3, [pc, #248]	; (2628 <setup+0x550>)
    2530:	str	r0, [r3, #0]
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1<to+msec) {yield(); return;}
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
    2532:	ldr	r3, [sp, #12]
    2534:	str.w	r3, [r9]
    2538:	b.n	249c <setup+0x3c4>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    253a:	ldr	r3, [pc, #240]	; (262c <setup+0x554>)
    253c:	str	r0, [r3, #0]
    253e:	b.n	2532 <setup+0x45a>
    2540:	ldr.w	sl, [pc, #256]	; 2644 <setup+0x56c>
    2544:	add.w	fp, sl, #1160	; 0x488
    2548:	mov	r1, r7
    254a:	mov	r0, fp
    254c:	bl	8750 <SdioCard::begin(SdioConfig)>
    2550:	movs	r1, #9
    2552:	ldr	r0, [pc, #220]	; (2630 <setup+0x558>)
    2554:	bl	9604 <usb_serial_write>
    2558:	ldr	r0, [pc, #216]	; (2634 <setup+0x55c>)
    255a:	bl	af4c <Print::println()>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    255e:	mov	r0, fp
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    2560:	str.w	fp, [sl, #1156]	; 0x484
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    2564:	bl	7da8 <SdioCard::errorCode() const>
    2568:	mov	r2, fp
    256a:	mov	r3, r0
    256c:	ldr	r1, [pc, #200]	; (2638 <setup+0x560>)
    256e:	ldr	r0, [pc, #196]	; (2634 <setup+0x55c>)
    2570:	bl	af7c <Print::printf(char const*, ...)>
    return m_card && !m_card->errorCode();
    2574:	ldr.w	r0, [sl, #1156]	; 0x484
    2578:	cmp	r0, #0
    257a:	beq.w	238c <setup+0x2b4>
    257e:	ldr	r3, [r0, #0]
    2580:	ldr	r3, [r3, #36]	; 0x24
    2582:	blx	r3
    2584:	cmp	r0, #0
    2586:	bne.w	238c <setup+0x2b4>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    258a:	ldr.w	r1, [sl, #1156]	; 0x484
    258e:	mov	r0, sl
    2590:	bl	32c4 <FsVolume::begin(SdCardInterface*)>
    2594:	cmp	r0, #0
    2596:	beq.w	238c <setup+0x2b4>
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    259a:	ldr	r3, [pc, #160]	; (263c <setup+0x564>)

      FS_started=1;
    259c:	ldr	r1, [pc, #116]	; (2614 <setup+0x53c>)
  public:
    void init(void)
    { if(FS_started) return;
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    259e:	ldr	r2, [pc, #160]	; (2640 <setup+0x568>)

      FS_started=1;
    25a0:	strh	r7, [r1, #0]
  public:
    void init(void)
    { if(FS_started) return;
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    25a2:	str	r2, [r3, #0]
    25a4:	b.n	2458 <setup+0x380>
    25a6:	ldr	r3, [pc, #156]	; (2644 <setup+0x56c>)
    25a8:	add.w	r2, r3, #1160	; 0x488
    25ac:	mov	r0, r2
    25ae:	mov	r1, fp
    25b0:	str	r2, [sp, #12]
    25b2:	bl	8750 <SdioCard::begin(SdioConfig)>
    25b6:	movs	r1, #9
    25b8:	ldr	r0, [pc, #116]	; (2630 <setup+0x558>)
    25ba:	bl	9604 <usb_serial_write>
    25be:	ldr	r0, [pc, #116]	; (2634 <setup+0x55c>)
    25c0:	bl	af4c <Print::println()>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    25c4:	ldr	r2, [sp, #12]
    25c6:	mov	r0, r2
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    25c8:	str.w	r2, [r2, #-4]
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    25cc:	bl	7da8 <SdioCard::errorCode() const>
    25d0:	ldr	r2, [sp, #12]
    25d2:	ldr	r1, [pc, #100]	; (2638 <setup+0x560>)
    25d4:	mov	r3, r0
    25d6:	ldr	r0, [pc, #92]	; (2634 <setup+0x55c>)
    25d8:	bl	af7c <Print::printf(char const*, ...)>
    return m_card && !m_card->errorCode();
    25dc:	ldr	r3, [pc, #100]	; (2644 <setup+0x56c>)
    25de:	ldr.w	r0, [r3, #1156]	; 0x484
    25e2:	cmp	r0, #0
    25e4:	beq.w	238c <setup+0x2b4>
    25e8:	ldr	r3, [r0, #0]
    25ea:	ldr	r3, [r3, #36]	; 0x24
    25ec:	blx	r3
    25ee:	cmp	r0, #0
    25f0:	bne.w	238c <setup+0x2b4>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    25f4:	ldr	r3, [pc, #76]	; (2644 <setup+0x56c>)
    25f6:	ldr.w	r1, [r3, #1156]	; 0x484
    25fa:	mov	r0, r3
    25fc:	bl	32c4 <FsVolume::begin(SdCardInterface*)>
    2600:	cmp	r0, #0
    2602:	beq.w	238c <setup+0x2b4>

      FS_started=1;
    2606:	ldr	r2, [pc, #12]	; (2614 <setup+0x53c>)
  public:
    void init(void)
    { if(FS_started) return;
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    2608:	ldr	r3, [pc, #48]	; (263c <setup+0x564>)

      FS_started=1;
    260a:	strh.w	fp, [r2]
  public:
    void init(void)
    { if(FS_started) return;
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    260e:	ldr	r2, [pc, #48]	; (2640 <setup+0x568>)
    2610:	str	r2, [r3, #0]
    2612:	b.n	24de <setup+0x406>
    2614:	.word	0x1fff152c
    2618:	.word	0x1fff1530
    261c:	.word	0x1fff2484
    2620:	.word	0x1fff0734
    2624:	.word	0x200203c0
    2628:	.word	0x400ff088
    262c:	.word	0x400ff084
    2630:	.word	0x00013b74
    2634:	.word	0x1fff0898
    2638:	.word	0x00013b80
    263c:	.word	0x20020364
    2640:	.word	0x000014a1
    2644:	.word	0x1fff1f50
    2648:	.word	0x1fff1f4c
    264c:	.word	0x400ff090

00002650 <loop>:
int menu(void);

/*************************** Arduino loop ************************************/
void loop(void)
{ 
  if(!haveAcq) return;
    2650:	ldr	r3, [pc, #696]	; (290c <loop+0x2bc>)
    2652:	ldr	r3, [r3, #0]
    2654:	cmp	r3, #0
    2656:	beq.n	2724 <loop+0xd4>

int menu(void);

/*************************** Arduino loop ************************************/
void loop(void)
{ 
    2658:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(!haveAcq) return;
  //
  if(doHibernate && (loopStatus<2)) 
    265c:	ldr	r4, [pc, #688]	; (2910 <loop+0x2c0>)
    265e:	ldr	r5, [pc, #692]	; (2914 <loop+0x2c4>)
    2660:	ldr	r3, [r4, #0]

int menu(void);

/*************************** Arduino loop ************************************/
void loop(void)
{ 
    2662:	sub	sp, #156	; 0x9c
  if(!haveAcq) return;
  //
  if(doHibernate && (loopStatus<2)) 
    2664:	cbz	r3, 2698 <loop+0x48>
    2666:	ldr	r3, [r5, #0]
    2668:	cmp	r3, #1
    266a:	ble.n	2676 <loop+0x26>
#if ON_TIME > 0
    #ifdef DO_LOGGER
      if(loopStatus==0) loopStatus=2;
    #endif
    
    if((loopStatus==2) && (millis()>(parameters.on_time*60+3)*1000))  //
    266c:	cmp	r3, #2
    266e:	beq.n	26a2 <loop+0x52>
    	#else
    		acqLoop();
    	#endif
    }
#endif
}
    2670:	add	sp, #156	; 0x9c
    2672:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2676:	movs	r1, #8
    2678:	ldr	r0, [pc, #668]	; (2918 <loop+0x2c8>)
    267a:	bl	9604 <usb_serial_write>
    267e:	ldr	r0, [pc, #668]	; (291c <loop+0x2cc>)
    2680:	bl	af4c <Print::println()>
inline void acqStop(void)
{ 
  #if DO_DEBUG == 2
    Serial.println("Stop Acq");
  #endif
  ICS43432.stop();
    2684:	ldr	r0, [pc, #664]	; (2920 <loop+0x2d0>)
    2686:	bl	2b74 <c_ICS43432::stop()>
}

inline void acqExit(void)
{
  ICS43432.exit();
    268a:	ldr	r0, [pc, #660]	; (2920 <loop+0x2d0>)
    268c:	bl	2b84 <c_ICS43432::exit()>
  //
  if(doHibernate && (loopStatus<2)) 
  { acqStop();
    acqExit();

    check_hibernate(&parameters,1); 
    2690:	movs	r1, #1
    2692:	ldr	r0, [pc, #656]	; (2924 <loop+0x2d4>)
    2694:	bl	1728 <check_hibernate(parameters_s*, int)>
    2698:	ldr	r3, [r5, #0]
  }
  
#if ON_TIME > 0
    #ifdef DO_LOGGER
      if(loopStatus==0) loopStatus=2;
    269a:	cmp	r3, #0
    269c:	bne.n	266c <loop+0x1c>
    269e:	movs	r3, #2
    26a0:	str	r3, [r5, #0]
    #endif
    
    if((loopStatus==2) && (millis()>(parameters.on_time*60+3)*1000))  //
    26a2:	ldr	r2, [pc, #640]	; (2924 <loop+0x2d4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    26a4:	ldr	r3, [pc, #640]	; (2928 <loop+0x2d8>)
    26a6:	ldrh	r1, [r2, #0]
    26a8:	ldr	r3, [r3, #0]
    26aa:	str	r3, [sp, #32]
    26ac:	movw	r3, #60000	; 0xea60
	return ret;
    26b0:	ldr	r2, [sp, #32]
    26b2:	mul.w	r3, r3, r1
    26b6:	addw	r3, r3, #3000	; 0xbb8
    26ba:	cmp	r3, r2
    26bc:	bcc.n	26fe <loop+0xae>

  char filename[80];
  uint16_t nbuf = maxBlockSize;
  uint32_t maxLoggerCount = (max_mb*1024*1024)/maxBlockSize;

  if (isLogging) return 1; // we are already busy (should not happen)
    26be:	ldr	r7, [pc, #620]	; (292c <loop+0x2dc>)
    26c0:	ldrh	r3, [r7, #0]
    26c2:	cmp	r3, #0
    26c4:	bne.n	2670 <loop+0x20>
{ // does also open/close a file when required
  //
  static uint16_t isLogging = 0; // flag to ensure single access to function

  char filename[80];
  uint16_t nbuf = maxBlockSize;
    26c6:	ldr	r6, [pc, #616]	; (2930 <loop+0x2e0>)
    26c8:	ldr	r2, [r6, #8]
  uint32_t maxLoggerCount = (max_mb*1024*1024)/maxBlockSize;

  if (isLogging) return 1; // we are already busy (should not happen)
  isLogging = 1;

  if(fileStatus==0)
    26ca:	ldrh	r3, [r6, #14]
{ // does also open/close a file when required
  //
  static uint16_t isLogging = 0; // flag to ensure single access to function

  char filename[80];
  uint16_t nbuf = maxBlockSize;
    26cc:	str	r2, [sp, #28]
    26ce:	mov	r1, r2
  uint32_t maxLoggerCount = (max_mb*1024*1024)/maxBlockSize;

  if (isLogging) return 1; // we are already busy (should not happen)
  isLogging = 1;
    26d0:	movs	r2, #1
  //
  static uint16_t isLogging = 0; // flag to ensure single access to function

  char filename[80];
  uint16_t nbuf = maxBlockSize;
  uint32_t maxLoggerCount = (max_mb*1024*1024)/maxBlockSize;
    26d2:	mov.w	r8, #41943040	; 0x2800000

  if (isLogging) return 1; // we are already busy (should not happen)
  isLogging = 1;
    26d6:	strh	r2, [r7, #0]
  //
  static uint16_t isLogging = 0; // flag to ensure single access to function

  char filename[80];
  uint16_t nbuf = maxBlockSize;
  uint32_t maxLoggerCount = (max_mb*1024*1024)/maxBlockSize;
    26d8:	udiv	r2, r8, r1
    26dc:	str	r2, [sp, #24]

  if (isLogging) return 1; // we are already busy (should not happen)
  isLogging = 1;

  if(fileStatus==0)
    26de:	cbz	r3, 2736 <loop+0xe6>
      fileStatus = 3; // close file on write failure
    else
      fileStatus = 2; // flag as open
  }

  if(fileStatus==2)
    26e0:	cmp	r3, #2
    26e2:	beq.n	27d2 <loop+0x182>
    { fileStatus=3; // flag to stop logging
      isRunning=0;  // tell close to finish to finish aquisition
    }
  }

  if(fileStatus==3)
    26e4:	cmp	r3, #3
    26e6:	beq.w	28a0 <loop+0x250>
    #endif
    //
    fileStatus= 0; // flag file as closed   
  }

  if(isRunning==0) // we should stop logging
    26ea:	ldrsh.w	r2, [r6, #12]
    26ee:	cbz	r2, 2726 <loop+0xd6>
  { haveFinished(); fileStatus = 4; 
  }

  isLogging = 0;
    26f0:	movs	r2, #0
  if(fileStatus==4) { return -1; } // don't do anything anymore 
    26f2:	cmp	r3, #4

  if(isRunning==0) // we should stop logging
  { haveFinished(); fileStatus = 4; 
  }

  isLogging = 0;
    26f4:	strh	r2, [r7, #0]
  if(fileStatus==4) { return -1; } // don't do anything anymore 
    26f6:	bne.n	2670 <loop+0x20>
    }
    
    #ifdef DO_LOGGER
      if(loopStatus==2)
      { int16_t stat = loggerLoop();
        if(stat <= 0 ) loopStatus=1; 
    26f8:	movs	r3, #1
    26fa:	str	r3, [r5, #0]
    26fc:	b.n	2670 <loop+0x20>
    #ifdef DO_LOGGER
      if(loopStatus==0) loopStatus=2;
    #endif
    
    if((loopStatus==2) && (millis()>(parameters.on_time*60+3)*1000))  //
    { doHibernate=1; 
    26fe:	movs	r3, #1
    2700:	movs	r1, #11
    2702:	ldr	r0, [pc, #560]	; (2934 <loop+0x2e4>)
    2704:	str	r3, [r4, #0]
    2706:	bl	9604 <usb_serial_write>
    270a:	ldr	r0, [pc, #528]	; (291c <loop+0x2cc>)
    270c:	bl	af4c <Print::println()>
        loggerStop(1);
      #endif
    }
    
    #ifdef DO_LOGGER
      if(loopStatus==2)
    2710:	ldr	r3, [r5, #0]
  Logger (void) : head(0), tail(0), enabled(0)
  { maxBlockSize = na*nd*sizeof(T);}

  void start(void) { clear(); reset(); isRunning=1; enabled = 1; }
  void stop(void) { isRunning=0; } // tell uSD_IF
  void stopnow(void) { isRunning=-1; } // tell uSD_IF
    2712:	ldr	r2, [pc, #540]	; (2930 <loop+0x2e0>)
    2714:	movw	r1, #65535	; 0xffff
    2718:	cmp	r3, #2
    271a:	strh	r1, [r2, #12]
    271c:	beq.n	26be <loop+0x6e>
    	#else
    		acqLoop();
    	#endif
    }
#endif
}
    271e:	add	sp, #156	; 0x9c
    2720:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2724:	bx	lr
  //
  void clear(void);
  //
  void *drain(void);
  int16_t write(void *src);
  void haveFinished(void) {enabled=0;} // got signal from uSD_IF
    2726:	ldr	r1, [pc, #528]	; (2938 <loop+0x2e8>)
    2728:	movs	r3, #0
    //
    fileStatus= 0; // flag file as closed   
  }

  if(isRunning==0) // we should stop logging
  { haveFinished(); fileStatus = 4; 
    272a:	movs	r2, #4
  //
  void clear(void);
  //
  void *drain(void);
  int16_t write(void *src);
  void haveFinished(void) {enabled=0;} // got signal from uSD_IF
    272c:	strh.w	r3, [r1, #204]	; 0xcc

  if(isRunning==0) // we should stop logging
  { haveFinished(); fileStatus = 4; 
  }

  isLogging = 0;
    2730:	strh	r3, [r7, #0]
    //
    fileStatus= 0; // flag file as closed   
  }

  if(isRunning==0) // we should stop logging
  { haveFinished(); fileStatus = 4; 
    2732:	strh	r2, [r6, #14]
    2734:	b.n	26f8 <loop+0xa8>
#include <time.h>
struct tm seconds2tm(uint32_t tt);

uint16_t generateFilename(char *dev, char *filename)
{
  struct tm tx=seconds2tm(RTC_TSR);;
    2736:	ldr	r3, [pc, #516]	; (293c <loop+0x2ec>)
    2738:	add	r0, sp, #36	; 0x24
    273a:	ldr	r1, [r3, #0]
    273c:	bl	1168 <seconds2tm(unsigned long)>
  sprintf(filename,"%s_%04d%02d%02d_%02d%02d%02d.bin",dev,
          tx.tm_year, tx.tm_mon, tx.tm_mday,
          tx.tm_hour, tx.tm_min, tx.tm_sec);
    2740:	ldr	r1, [sp, #36]	; 0x24
    2742:	ldr	r2, [sp, #40]	; 0x28
    2744:	ldr	r0, [sp, #44]	; 0x2c
    2746:	str	r1, [sp, #16]
    2748:	str	r2, [sp, #12]
    274a:	ldr	r1, [sp, #48]	; 0x30
    274c:	ldr	r2, [sp, #52]	; 0x34
    274e:	ldr	r3, [sp, #56]	; 0x38
    2750:	str	r0, [sp, #8]
    2752:	str	r1, [sp, #4]
    2754:	str	r2, [sp, #0]
    2756:	ldr	r1, [pc, #488]	; (2940 <loop+0x2f0>)
    2758:	ldr	r2, [pc, #488]	; (2944 <loop+0x2f4>)
    275a:	add	r0, sp, #72	; 0x48
    275c:	bl	d030 <sprintf>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    2760:	ldr	r3, [pc, #484]	; (2948 <loop+0x2f8>)
    2762:	ldr	r1, [r3, #0]
    2764:	cmp	r1, #0
    2766:	beq.w	2898 <loop+0x248>
    276a:	ldr	r4, [pc, #480]	; (294c <loop+0x2fc>)
    276c:	movs	r3, #83	; 0x53
    276e:	add.w	r0, r4, #1208	; 0x4b8
    2772:	add	r2, sp, #72	; 0x48
    2774:	bl	3220 <FsFile::open(FsVolume*, char const*, unsigned char)>
    2778:	cmp	r0, #0
    277a:	beq.w	2898 <loop+0x248>
    277e:	ldr.w	r0, [r4, #1280]	; 0x500
   *
   * \param[in] length size of the file in bytes.
   * \return true for success else false.
   */
  bool preAllocate(uint64_t length) {
    if (m_fFile) {
    2782:	cmp	r0, #0
    2784:	beq.w	2a00 <loop+0x3b0>
      return length < (1ULL << 32) ? m_fFile->preAllocate(length) : false;
    2788:	mov	r1, r8
    278a:	bl	5114 <FatFile::preAllocate(unsigned long)>
    void open(char * filename)
    {
      if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) {
        sd.errorHalt("file.open failed");
      }
      if (!file.preAllocate(PRE_ALLOCATE_SIZE)) {
    278e:	cmp	r0, #0
    2790:	beq.w	29f0 <loop+0x3a0>
      isLogging = 0; return 0; // tell calling loop() we have error
    } // end of all operations

    mFS.open(filename);
    #if DO_DEBUG > 0
        Serial.printf(" %s\n\r",filename);
    2794:	add	r2, sp, #72	; 0x48
    2796:	ldr	r1, [pc, #440]	; (2950 <loop+0x300>)
    2798:	ldr	r0, [pc, #384]	; (291c <loop+0x2cc>)
    279a:	bl	af7c <Print::printf(char const*, ...)>
        Serial.printf(" %d blocks max: %d  MB\n\r",maxLoggerCount,max_mb);
    279e:	movs	r3, #40	; 0x28
    27a0:	ldr	r2, [sp, #24]
    27a2:	ldr	r1, [pc, #432]	; (2954 <loop+0x304>)
    27a4:	ldr	r0, [pc, #372]	; (291c <loop+0x2cc>)
    27a6:	bl	af7c <Print::printf(char const*, ...)>
    27aa:	ldr.w	r0, [r4, #1280]	; 0x500
    27ae:	ldr	r2, [pc, #412]	; (294c <loop+0x2fc>)
    #endif
    loggerCount=0;  // count successful transfers
    27b0:	movs	r3, #0
    27b2:	str	r3, [r6, #20]
    overrun=0;      // count buffer overruns
    27b4:	str	r3, [r6, #4]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    27b6:	cmp	r0, #0
    27b8:	beq.w	28e0 <loop+0x290>
    27bc:	mov.w	r2, #512	; 0x200
    27c0:	ldr	r1, [pc, #404]	; (2958 <loop+0x308>)
    27c2:	bl	5738 <FatFile::write(void const*, unsigned int)>
      file.close();
    }

    uint32_t write(uint8_t *buffer, uint32_t nbuf)
    {
      if (nbuf != file.write(buffer, nbuf)) sd.errorHalt("write failed");
    27c6:	cmp.w	r0, #512	; 0x200
    27ca:	bne.w	29f8 <loop+0x3a8>
    //
    if (!mFS.write((uint8_t*)&header, sizeof(header_s)))
      fileStatus = 3; // close file on write failure
    else
      fileStatus = 2; // flag as open
    27ce:	movs	r3, #2
    27d0:	strh	r3, [r6, #14]
  
template <typename T, int nq, int nd, int na>
void * Logger<T,nq,nd,na>:: drain(void)
  {
    uint16_t n;
    if(head>tail) n=head-tail; else n = nq + head -tail;
    27d2:	ldr	r3, [pc, #356]	; (2938 <loop+0x2e8>)
    27d4:	ldrsh.w	r9, [r3, #202]	; 0xca
    27d8:	ldrsh.w	sl, [r3, #200]	; 0xc8
    27dc:	cmp	sl, r9
    27de:	it	le
    27e0:	addle.w	r3, sl, #300	; 0x12c
    27e4:	uxth.w	r4, r9
    27e8:	ite	gt
    27ea:	rsbgt	r3, r4, sl
    27ee:	suble	r3, r3, r4
    27f0:	uxth	r3, r3

    int16_t nb=na; // na is number of buffers to fetched from queue and written to disk
    if(n>nb)
    27f2:	cmp	r3, #64	; 0x40
    27f4:	ble.n	28f6 <loop+0x2a6>
    27f6:	movs	r3, #0
    27f8:	mov.w	lr, #64	; 0x40
    {
      T *bptr = buffer;
    27fc:	ldr.w	r8, [pc, #348]	; 295c <loop+0x30c>
    2800:	mov	ip, r5
          // copy to buffer     
          { T *src = queue[t];
            if(src)
            { for(int jj=0; jj<nd; jj++) bptr[jj]=src[jj];
              pool.release(t);
              queue[t]=0;
    2802:	mov	fp, r3
    2804:	mov	r5, lr
      T *bptr = buffer;
      //
      uint16_t t = tail;
      while(--nb>=0)
      {
        if (t != head) 
    2806:	cmp	sl, r4
    2808:	beq.n	2848 <loop+0x1f8>
        {
          if (++t >= nq) t = 0;
    280a:	adds	r4, #1
    280c:	uxth	r4, r4
    280e:	cmp.w	r4, #300	; 0x12c
    2812:	bcs.n	288e <loop+0x23e>
    2814:	mov	lr, r4
    2816:	sxth.w	r9, r4
          
          // copy to buffer     
          { T *src = queue[t];
    281a:	add.w	lr, lr, #38400	; 0x9600
    281e:	add.w	lr, lr, #6
    2822:	ldr.w	r0, [r6, lr, lsl #2]
            if(src)
    2826:	cbz	r0, 2842 <loop+0x1f2>
    2828:	subs	r3, r0, #4
    282a:	sub.w	r2, r8, #4
    282e:	add.w	r0, r0, #508	; 0x1fc
            { for(int jj=0; jj<nd; jj++) bptr[jj]=src[jj];
    2832:	ldr.w	r1, [r3, #4]!
    2836:	str.w	r1, [r2, #4]!
    283a:	cmp	r3, r0
    283c:	bne.n	2832 <loop+0x1e2>
              pool.release(t);
              queue[t]=0;
    283e:	str.w	fp, [r6, lr, lsl #2]
            }
          }
          tail = t;
          bptr += nd;
    2842:	add.w	r8, r8, #512	; 0x200
    2846:	movs	r3, #1
    2848:	subs	r5, #1
    284a:	uxth	r5, r5
    if(n>nb)
    {
      T *bptr = buffer;
      //
      uint16_t t = tail;
      while(--nb>=0)
    284c:	cmp	r5, #0
    284e:	bne.n	2806 <loop+0x1b6>
    2850:	mov	r5, ip
    2852:	cmp	r3, #0
    2854:	bne.w	29e8 <loop+0x398>
    2858:	ldr	r4, [pc, #240]	; (294c <loop+0x2fc>)
    285a:	ldrh.w	r8, [sp, #28]
    285e:	ldr.w	r0, [r4, #1280]	; 0x500
    2862:	cmp	r0, #0
    2864:	beq.w	29c2 <loop+0x372>
    2868:	mov	r2, r8
    286a:	ldr	r1, [pc, #240]	; (295c <loop+0x30c>)
    286c:	bl	5738 <FatFile::write(void const*, unsigned int)>
    2870:	cmp	r8, r0
    2872:	bne.w	29f8 <loop+0x3a8>
  { 
    // write to file
    uint8_t *buffer=(uint8_t*)drain();
    if(buffer)
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
    2876:	cmp.w	r8, #0
    287a:	bne.n	296c <loop+0x31c>
    287c:	movs	r3, #3
    287e:	strh	r3, [r6, #14]
            Serial.flush();
          }
        #endif
      }
    }
    if(isRunning<0) 
    2880:	ldrsh.w	r2, [r6, #12]
    2884:	ldr	r3, [pc, #168]	; (2930 <loop+0x2e0>)
    2886:	cmp	r2, #0
    2888:	blt.n	2900 <loop+0x2b0>
    288a:	ldrh	r3, [r3, #14]
    288c:	b.n	26e4 <loop+0x94>
      uint16_t t = tail;
      while(--nb>=0)
      {
        if (t != head) 
        {
          if (++t >= nq) t = 0;
    288e:	mov.w	r9, #0
    2892:	mov	lr, r9
    2894:	mov	r4, r9
    2896:	b.n	281a <loop+0x1ca>
    }
    
    void open(char * filename)
    {
      if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) {
        sd.errorHalt("file.open failed");
    2898:	ldr	r1, [pc, #196]	; (2960 <loop+0x310>)
    289a:	ldr	r0, [pc, #176]	; (294c <loop+0x2fc>)
    289c:	bl	1f0c <SdBase<FsVolume>::errorHalt(char const*)>
    28a0:	ldr	r4, [pc, #168]	; (294c <loop+0x2fc>)
    28a2:	ldr.w	r0, [r4, #1280]	; 0x500
    28a6:	ldr	r3, [pc, #164]	; (294c <loop+0x2fc>)
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    28a8:	cbz	r0, 28d2 <loop+0x282>
    28aa:	bl	56c0 <FatFile::truncate()>
    }

    void close(void)
    {
      file.truncate();
      file.close();
    28ae:	ldr	r0, [pc, #180]	; (2964 <loop+0x314>)
    28b0:	bl	31f8 <FsFile::close()>
  if(fileStatus==3)
  {
    //close file
    mFS.close();
    #if DO_DEBUG ==2
        Serial.printf("\n\r overrun: (%d)\n\r",overrun);
    28b4:	ldr	r2, [r6, #4]
    28b6:	ldr	r1, [pc, #176]	; (2968 <loop+0x318>)
    28b8:	ldr	r0, [pc, #96]	; (291c <loop+0x2cc>)
    28ba:	bl	af7c <Print::printf(char const*, ...)>
    #endif
    //
    fileStatus= 0; // flag file as closed   
    28be:	movs	r3, #0
    28c0:	strh	r3, [r6, #14]
    28c2:	ldrsh.w	r3, [r6, #12]
  }

  if(isRunning==0) // we should stop logging
    28c6:	cmp	r3, #0
    28c8:	beq.w	2726 <loop+0xd6>
  { haveFinished(); fileStatus = 4; 
  }

  isLogging = 0;
    28cc:	movs	r3, #0
    28ce:	strh	r3, [r7, #0]
    28d0:	b.n	2670 <loop+0x20>
    28d2:	ldr.w	r0, [r3, #1284]	; 0x504
    28d6:	cmp	r0, #0
    28d8:	beq.n	28ae <loop+0x25e>
    28da:	bl	4b60 <ExFatFile::truncate()>
    28de:	b.n	28ae <loop+0x25e>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    28e0:	ldr.w	r0, [r2, #1284]	; 0x504
    28e4:	cmp	r0, #0
    28e6:	beq.w	29f8 <loop+0x3a8>
    28ea:	mov.w	r2, #512	; 0x200
    28ee:	ldr	r1, [pc, #104]	; (2958 <loop+0x308>)
    28f0:	bl	4c80 <ExFatFile::write(void const*, unsigned int)>
    28f4:	b.n	27c6 <loop+0x176>
            Serial.flush();
          }
        #endif
      }
    }
    if(isRunning<0) 
    28f6:	ldrsh.w	r3, [r6, #12]
    28fa:	cmp	r3, #0
    28fc:	bge.n	28c6 <loop+0x276>
    28fe:	ldr	r4, [pc, #76]	; (294c <loop+0x2fc>)
    { fileStatus=3; // flag to stop logging
    2900:	movs	r2, #3
      isRunning=0;  // tell close to finish to finish aquisition
    2902:	movs	r3, #0
          }
        #endif
      }
    }
    if(isRunning<0) 
    { fileStatus=3; // flag to stop logging
    2904:	strh	r2, [r6, #14]
      isRunning=0;  // tell close to finish to finish aquisition
    2906:	strh	r3, [r6, #12]
    2908:	b.n	28a2 <loop+0x252>
    290a:	nop
    290c:	.word	0x1fff173c
    2910:	.word	0x1fff1738
    2914:	.word	0x1fff2458
    2918:	.word	0x00013c78
    291c:	.word	0x1fff0898
    2920:	.word	0x1fff2480
    2924:	.word	0x1fff0734
    2928:	.word	0x200203c0
    292c:	.word	0x20020154
    2930:	.word	0x1fff2484
    2934:	.word	0x00013c84
    2938:	.word	0x20018084
    293c:	.word	0x4003d000
    2940:	.word	0x000137c8
    2944:	.word	0x1fff0740
    2948:	.word	0x20020360
    294c:	.word	0x1fff1f50
    2950:	.word	0x00013bbc
    2954:	.word	0x00013be8
    2958:	.word	0x1fff1530
    295c:	.word	0x20018154
    2960:	.word	0x00013bd4
    2964:	.word	0x1fff2408
    2968:	.word	0x00013c04
    // write to file
    uint8_t *buffer=(uint8_t*)drain();
    if(buffer)
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
      if(fileStatus == 2)
    296c:	ldrh	r3, [r6, #14]
    296e:	ldr.w	r8, [pc, #196]	; 2a34 <loop+0x3e4>
    2972:	cmp	r3, #2
    2974:	bne.n	2880 <loop+0x230>
      { loggerCount++;
    2976:	ldr.w	r3, [r8, #20]
        if(loggerCount == maxLoggerCount)
    297a:	ldr	r2, [sp, #24]
    uint8_t *buffer=(uint8_t*)drain();
    if(buffer)
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
      if(fileStatus == 2)
      { loggerCount++;
    297c:	adds	r3, #1
        if(loggerCount == maxLoggerCount)
    297e:	cmp	r2, r3
    uint8_t *buffer=(uint8_t*)drain();
    if(buffer)
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
      if(fileStatus == 2)
      { loggerCount++;
    2980:	str.w	r3, [r8, #20]
        if(loggerCount == maxLoggerCount)
    2984:	beq.n	29d6 <loop+0x386>
        { fileStatus= 3;}
        #if DO_DEBUG == 2
          else
          { if (!(loggerCount % 10)) Serial.printf(".");
    2986:	ldr	r2, [pc, #140]	; (2a14 <loop+0x3c4>)
    2988:	umull	r1, r2, r2, r3
    298c:	lsrs	r2, r2, #3
    298e:	add.w	r2, r2, r2, lsl #2
    2992:	cmp.w	r3, r2, lsl #1
    2996:	bne.n	29a4 <loop+0x354>
    2998:	ldr	r1, [pc, #124]	; (2a18 <loop+0x3c8>)
    299a:	ldr	r0, [pc, #128]	; (2a1c <loop+0x3cc>)
    299c:	bl	af7c <Print::printf(char const*, ...)>
    29a0:	ldr.w	r3, [r8, #20]
            if (!(loggerCount % 640)) {Serial.println(); }
    29a4:	ldr	r2, [pc, #108]	; (2a14 <loop+0x3c4>)
    29a6:	umull	r1, r2, r2, r3
    29aa:	lsrs	r2, r2, #9
    29ac:	add.w	r2, r2, r2, lsl #2
    29b0:	cmp.w	r3, r2, lsl #7
    29b4:	bne.n	29bc <loop+0x36c>
    29b6:	ldr	r0, [pc, #100]	; (2a1c <loop+0x3cc>)
    29b8:	bl	af4c <Print::println()>
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    29bc:	bl	980c <usb_serial_flush_output>
    29c0:	b.n	2880 <loop+0x230>
    29c2:	ldr.w	r0, [r4, #1284]	; 0x504
    29c6:	cmp	r0, #0
    29c8:	beq.w	2870 <loop+0x220>
    29cc:	mov	r2, r8
    29ce:	ldr	r1, [pc, #80]	; (2a20 <loop+0x3d0>)
    29d0:	bl	4c80 <ExFatFile::write(void const*, unsigned int)>
    29d4:	b.n	2870 <loop+0x220>
            Serial.flush();
          }
        #endif
      }
    }
    if(isRunning<0) 
    29d6:	ldrsh.w	r3, [r8, #12]
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
      if(fileStatus == 2)
      { loggerCount++;
        if(loggerCount == maxLoggerCount)
        { fileStatus= 3;}
    29da:	movs	r2, #3
            Serial.flush();
          }
        #endif
      }
    }
    if(isRunning<0) 
    29dc:	cmp	r3, #0
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
      if(fileStatus == 2)
      { loggerCount++;
        if(loggerCount == maxLoggerCount)
        { fileStatus= 3;}
    29de:	strh.w	r2, [r8, #14]
            Serial.flush();
          }
        #endif
      }
    }
    if(isRunning<0) 
    29e2:	bge.w	28a2 <loop+0x252>
    29e6:	b.n	2900 <loop+0x2b0>
    29e8:	ldr	r3, [pc, #56]	; (2a24 <loop+0x3d4>)
    29ea:	strh.w	r9, [r3, #202]	; 0xca
    29ee:	b.n	2858 <loop+0x208>
    {
      if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) {
        sd.errorHalt("file.open failed");
      }
      if (!file.preAllocate(PRE_ALLOCATE_SIZE)) {
        sd.errorHalt("file.preAllocate failed");    
    29f0:	ldr	r1, [pc, #52]	; (2a28 <loop+0x3d8>)
    29f2:	ldr	r0, [pc, #56]	; (2a2c <loop+0x3dc>)
    29f4:	bl	1f0c <SdBase<FsVolume>::errorHalt(char const*)>
      file.close();
    }

    uint32_t write(uint8_t *buffer, uint32_t nbuf)
    {
      if (nbuf != file.write(buffer, nbuf)) sd.errorHalt("write failed");
    29f8:	ldr	r1, [pc, #52]	; (2a30 <loop+0x3e0>)
    29fa:	ldr	r0, [pc, #48]	; (2a2c <loop+0x3dc>)
    29fc:	bl	1f0c <SdBase<FsVolume>::errorHalt(char const*)>
   */
  bool preAllocate(uint64_t length) {
    if (m_fFile) {
      return length < (1ULL << 32) ? m_fFile->preAllocate(length) : false;
    }
    return m_xFile ? m_xFile->preAllocate(length) : false;
    2a00:	ldr.w	r0, [r4, #1284]	; 0x504
    2a04:	cmp	r0, #0
    2a06:	beq.n	29f0 <loop+0x3a0>
    2a08:	mov.w	r2, #41943040	; 0x2800000
    2a0c:	movs	r3, #0
    2a0e:	bl	4984 <ExFatFile::preAllocate(unsigned long long)>
    2a12:	b.n	278e <loop+0x13e>
    2a14:	.word	0xcccccccd
    2a18:	.word	0x00013bc4
    2a1c:	.word	0x1fff0898
    2a20:	.word	0x20018154
    2a24:	.word	0x20018084
    2a28:	.word	0x00013ba4
    2a2c:	.word	0x1fff1f50
    2a30:	.word	0x00013b64
    2a34:	.word	0x1fff2484

00002a38 <_GLOBAL__sub_I_parameters>:
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
  }
  text[jj]=0;

  return text;
}
    2a38:	push	{r3, r4, r5, r6, r7, lr}
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    2a3a:	ldr	r3, [pc, #128]	; (2abc <_GLOBAL__sub_I_parameters+0x84>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2a3c:	ldr	r4, [pc, #128]	; (2ac0 <_GLOBAL__sub_I_parameters+0x88>)
    2a3e:	str.w	r4, [r3, #1160]	; 0x488
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    2a42:	movs	r4, #38	; 0x26
    2a44:	strb.w	r4, [r3, #1192]	; 0x4a8
    2a48:	ldr	r0, [pc, #120]	; (2ac4 <_GLOBAL__sub_I_parameters+0x8c>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    2a4a:	ldr	r7, [pc, #124]	; (2ac8 <_GLOBAL__sub_I_parameters+0x90>)
class FsFile : public Stream {
#else  // ENABLE_ARDUINO_FEATURES
class FsFile {
#endif  // ENABLE_ARDUINO_FEATURES
 public:
  FsFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    2a4c:	ldr	r5, [pc, #124]	; (2acc <_GLOBAL__sub_I_parameters+0x94>)
    2a4e:	str.w	r0, [r3, #1176]	; 0x498
    2a52:	movs	r4, #0
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2a54:	mov.w	r6, #1000	; 0x3e8
  void release(uint16_t ii) {;}
};


#include "mfs.h"
c_mFS mFS;
    2a58:	ldr	r2, [pc, #116]	; (2ad0 <_GLOBAL__sub_I_parameters+0x98>)
    2a5a:	ldr	r1, [pc, #120]	; (2ad4 <_GLOBAL__sub_I_parameters+0x9c>)
    2a5c:	str.w	r7, [r3, #1200]	; 0x4b0
    2a60:	mov	r0, r3
    2a62:	str.w	r6, [r3, #1216]	; 0x4c0
    2a66:	str.w	r5, [r3, #1208]	; 0x4b8
    2a6a:	str.w	r4, [r3, #1144]	; 0x478
    2a6e:	str.w	r4, [r3, #1148]	; 0x47c
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    2a72:	strb.w	r4, [r3, #1172]	; 0x494
    2a76:	strb.w	r4, [r3, #1195]	; 0x4ab
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiAltDriver {
 public:
#if IMPLEMENT_SPI_PORT_SELECTION
  SdSpiAltDriver() : m_spi(nullptr) {}
    2a7a:	str.w	r4, [r3, #1196]	; 0x4ac
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2a7e:	strb.w	r4, [r3, #1212]	; 0x4bc
    2a82:	strb.w	r4, [r3, #1220]	; 0x4c4
    2a86:	str.w	r4, [r3, #1280]	; 0x500
    2a8a:	str.w	r4, [r3, #1284]	; 0x504
    2a8e:	bl	c3dc <__aeabi_atexit>

/*--------------  - uSDLogger class          ------------------*/
class uSD_IF
{
  public:
  uSD_IF(void) {;}
    2a92:	ldr	r3, [pc, #68]	; (2ad8 <_GLOBAL__sub_I_parameters+0xa0>)
 */
template <typename T, int nq, int nd, int na>
class Logger : public uSD_IF
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
    2a94:	ldr	r0, [pc, #68]	; (2adc <_GLOBAL__sub_I_parameters+0xa4>)

/*--------------  - uSDLogger class          ------------------*/
class uSD_IF
{
  public:
  uSD_IF(void) {;}
    2a96:	str	r4, [r3, #4]
 */
template <typename T, int nq, int nd, int na>
class Logger : public uSD_IF
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
    2a98:	add.w	r2, r3, #154624	; 0x25c00
  { maxBlockSize = na*nd*sizeof(T);}
    2a9c:	mov.w	r1, #32768	; 0x8000

/*--------------  - uSDLogger class          ------------------*/
class uSD_IF
{
  public:
  uSD_IF(void) {;}
    2aa0:	strh	r4, [r3, #12]
    2aa2:	strh	r4, [r3, #14]
    2aa4:	str	r4, [r3, #16]
    2aa6:	str	r4, [r3, #20]
 */
template <typename T, int nq, int nd, int na>
class Logger : public uSD_IF
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
    2aa8:	str	r0, [r3, #0]
  { maxBlockSize = na*nd*sizeof(T);}
    2aaa:	str	r1, [r3, #8]
 */
template <typename T, int nq, int nd, int na>
class Logger : public uSD_IF
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
    2aac:	strh.w	r4, [r2, #200]	; 0xc8
    2ab0:	strh.w	r4, [r2, #202]	; 0xca
    2ab4:	strh.w	r4, [r2, #204]	; 0xcc
    2ab8:	pop	{r3, r4, r5, r6, r7, pc}
    2aba:	nop
    2abc:	.word	0x1fff1f50
    2ac0:	.word	0x00013d7c
    2ac4:	.word	0x00013d24
    2ac8:	.word	0x38011001
    2acc:	.word	0x00013798
    2ad0:	.word	0x1fff0730
    2ad4:	.word	0x00000fbd
    2ad8:	.word	0x1fff2484
    2adc:	.word	0x000137bc

00002ae0 <c_ICS43432::init(long, long*, unsigned long, unsigned short)>:
 */

  extern int iscl[];

uint32_t c_ICS43432::init(int32_t fsamp, int32_t *buffer, uint32_t nbuf, uint16_t nch)
{
    2ae0:	push	{r4, r5, r6, r7, lr}
    2ae2:	vpush	{d8}
    2ae6:	sub	sp, #12
    2ae8:	mov	r4, r1
    2aea:	mov	r5, r2
    2aec:	mov	r6, r3
    2aee:	ldrh.w	r7, [sp, #40]	; 0x28
  i2s_init();
    2af2:	bl	47c <i2s_init>
  
  float fs = i2s_speedConfig(ICS43432_DEV,N_BITS, fsamp);
    2af6:	mov	r2, r4
    2af8:	movs	r1, #32
    2afa:	movs	r0, #5
    2afc:	bl	48c <i2s_speedConfig>
  if(fs<1.0f) return 0;
    2b00:	vmov.f32	s15, #112	; 0x3f800000  1.0
    2b04:	vcmpe.f32	s0, s15
    2b08:	vmrs	APSR_nzcv, fpscr
    2b0c:	bmi.n	2b50 <c_ICS43432::init(long, long*, unsigned long, unsigned short)+0x70>

  if(nch>2)  
    2b0e:	cmp	r7, #2
  	i2s_config(1, N_BITS, I2S_RX_2CH, 0); // both RX channels
    2b10:	mov.w	r3, #0
  else
	  i2s_config(1, N_BITS, 0, 0);  // only 1 RX channel
    2b14:	ite	ls
    2b16:	movls	r2, r3
  
  float fs = i2s_speedConfig(ICS43432_DEV,N_BITS, fsamp);
  if(fs<1.0f) return 0;

  if(nch>2)  
  	i2s_config(1, N_BITS, I2S_RX_2CH, 0); // both RX channels
    2b18:	movhi	r2, #2
  else
	  i2s_config(1, N_BITS, 0, 0);  // only 1 RX channel
    2b1a:	movs	r1, #32
    2b1c:	movs	r0, #1
    2b1e:	vmov.f32	s16, s0
    2b22:	bl	734 <i2s_config>
  i2s_configurePorts(2);
    2b26:	movs	r0, #2
    2b28:	bl	8e8 <i2s_configurePorts>

  DMA_init();
    2b2c:	bl	b0c <DMA_init>
  i2s_setupInput(buffer,nbuf,2,5); //port, prio (8=normal)
    2b30:	mov	r0, r5
    2b32:	mov	r1, r6
    2b34:	movs	r3, #5
    2b36:	movs	r2, #2
    2b38:	bl	994 <i2s_setupInput>
  return (uint32_t) fs;
    2b3c:	vcvt.u32.f32	s15, s16
    2b40:	vmov	r0, s15
    2b44:	vstr	s15, [sp, #4]
}
    2b48:	add	sp, #12
    2b4a:	vpop	{d8}
    2b4e:	pop	{r4, r5, r6, r7, pc}
uint32_t c_ICS43432::init(int32_t fsamp, int32_t *buffer, uint32_t nbuf, uint16_t nch)
{
  i2s_init();
  
  float fs = i2s_speedConfig(ICS43432_DEV,N_BITS, fsamp);
  if(fs<1.0f) return 0;
    2b50:	movs	r3, #0
    2b52:	mov	r0, r3
    2b54:	str	r3, [sp, #4]
  i2s_configurePorts(2);

  DMA_init();
  i2s_setupInput(buffer,nbuf,2,5); //port, prio (8=normal)
  return (uint32_t) fs;
}
    2b56:	add	sp, #12
    2b58:	vpop	{d8}
    2b5c:	pop	{r4, r5, r6, r7, pc}
    2b5e:	nop

00002b60 <c_ICS43432::start()>:

void c_ICS43432::start(void)
{
    2b60:	push	{r3, lr}
  i2s_enableInputDMA();
    2b62:	bl	ae8 <i2s_enableInputDMA>
  DMA_startAll();
    2b66:	bl	d00 <DMA_startAll>
  i2s_startInput();
}
    2b6a:	ldmia.w	sp!, {r3, lr}

void c_ICS43432::start(void)
{
  i2s_enableInputDMA();
  DMA_startAll();
  i2s_startInput();
    2b6e:	b.w	ad8 <i2s_startInput>
    2b72:	nop

00002b74 <c_ICS43432::stop()>:
}

void c_ICS43432::stop(void)
{
    2b74:	push	{r3, lr}
  i2s_stopInput();
    2b76:	bl	ac8 <i2s_stopInput>
  DMA_haltAll();
}
    2b7a:	ldmia.w	sp!, {r3, lr}
}

void c_ICS43432::stop(void)
{
  i2s_stopInput();
  DMA_haltAll();
    2b7e:	b.w	cf0 <DMA_haltAll>
    2b82:	nop

00002b84 <c_ICS43432::exit()>:
}

void c_ICS43432::exit(void) { i2s_stopClock();}
    2b84:	b.w	46c <i2s_stopClock>

00002b88 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    2b88:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2b8a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2b8c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2b8e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2b90:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2b92:	beq.n	2b9c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    2b94:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2b98:	b.w	ab68 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2b9c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    2b9e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2ba2:	bx	r3

00002ba4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    2ba4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ba8:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    2baa:	ldr	r5, [r4, #12]
    2bac:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    2bb0:	ldr	r5, [pc, #484]	; (2d98 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    2bb2:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    2bb4:	bne.n	2c5c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2bb6:	lsls	r7, r3, #31
    2bb8:	bpl.w	2d22 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    2bbc:	cmp	r1, #0
    2bbe:	beq.w	2d88 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2bc2:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    2bc4:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2bc6:	it	ne
    2bc8:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    2bcc:	str	r5, [r4, #52]	; 0x34
    2bce:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2bd0:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    2bd4:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2bd8:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2bdc:	cmp.w	ip, #0
    2be0:	beq.w	2d34 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    2be4:	cbz	r1, 2bf0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    2be6:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    2be8:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    2bec:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2bf0:	ldr	r5, [r0, #4]
    2bf2:	ldrb	r6, [r5, #8]
			if (count == 2)
    2bf4:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2bf8:	add.w	r6, r6, #4294967295
    2bfc:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    2c00:	ite	eq
    2c02:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2c06:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2c0a:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2c0c:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    2c0e:	sub.w	ip, ip, #2
    2c12:	b.n	2c26 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    2c14:	cbz	r2, 2c1a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    2c16:	strb	r4, [r2, #0]
    2c18:	adds	r2, #1
						} 
						count_read--;
    2c1a:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2c1c:	and.w	r5, r5, #61440	; 0xf000
    2c20:	cmp	r5, r6
    2c22:	bls.n	2c52 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    2c24:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    2c26:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    2c28:	tst.w	r5, #240	; 0xf0
    2c2c:	beq.n	2c1c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    2c2e:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    2c30:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    2c34:	mov	r7, r2
    2c36:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    2c3a:	bne.n	2c14 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    2c3c:	cbz	r2, 2c46 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    2c3e:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    2c42:	strb	r4, [r2, #1]
    2c44:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2c46:	and.w	r5, r5, #61440	; 0xf000
    2c4a:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    2c4c:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2c50:	bhi.n	2c24 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    2c52:	cmp.w	ip, #0
    2c56:	beq.n	2d34 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    2c58:	ldr	r4, [r0, #0]
    2c5a:	b.n	2be4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2c5c:	lsls	r5, r3, #31
    2c5e:	bpl.n	2cfa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    2c60:	cmp	r1, #0
    2c62:	beq.w	2d78 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2c66:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    2c68:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2c6a:	it	ne
    2c6c:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    2c70:	str	r5, [r4, #52]	; 0x34
    2c72:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    2c74:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    2c78:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    2c7c:	cmp.w	lr, #0
    2c80:	beq.n	2d06 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    2c82:	cbz	r1, 2c90 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    2c84:	ldrb.w	ip, [r1, #1]
    2c88:	ldrb	r5, [r1, #0]
    2c8a:	adds	r1, #2
    2c8c:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2c90:	ldr	r5, [r0, #4]
    2c92:	ldrb	r6, [r5, #8]
			if (count == 2)
    2c94:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2c98:	add.w	r6, r6, #4294967295
    2c9c:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    2ca0:	ite	eq
    2ca2:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2ca6:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2caa:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2cac:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    2cae:	sub.w	lr, lr, #2
    2cb2:	b.n	2cc6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    2cb4:	cbz	r2, 2cba <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    2cb6:	strb	r4, [r2, #0]
    2cb8:	adds	r2, #1
						} 
						count_read--;
    2cba:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2cbc:	and.w	r5, r5, #61440	; 0xf000
    2cc0:	cmp	r5, r6
    2cc2:	bls.n	2cf0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    2cc4:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    2cc6:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    2cc8:	tst.w	r5, #240	; 0xf0
    2ccc:	beq.n	2cbc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    2cce:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    2cd2:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    2cd4:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    2cd6:	bne.n	2cb4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    2cd8:	cbz	r2, 2ce4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    2cda:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    2cde:	asrs	r4, r4, #8
    2ce0:	strb	r4, [r2, #1]
    2ce2:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2ce4:	and.w	r5, r5, #61440	; 0xf000
    2ce8:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    2cea:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2cee:	bhi.n	2cc4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    2cf0:	cmp.w	lr, #0
    2cf4:	beq.n	2d06 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    2cf6:	ldr	r4, [r0, #0]
    2cf8:	b.n	2c82 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2cfa:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    2cfc:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    2d00:	cmp.w	lr, #0
    2d04:	bne.n	2c82 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    2d06:	cbz	r3, 2d50 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    2d08:	ldr	r4, [r0, #0]
			sr = port().SR;
    2d0a:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2d0c:	tst.w	r1, #240	; 0xf0
    2d10:	beq.n	2d0a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    2d12:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    2d14:	lsls	r4, r3, #31
    2d16:	bpl.n	2d54 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    2d18:	cbz	r2, 2d1e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    2d1a:	strb	r1, [r2, #0]
    2d1c:	adds	r2, #1
					count_read--;
    2d1e:	subs	r3, #1
    2d20:	b.n	2d06 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2d22:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2d26:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2d28:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2d2c:	cmp.w	ip, #0
    2d30:	bne.w	2be4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    2d34:	cbz	r3, 2d50 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    2d36:	ldr	r4, [r0, #0]
			sr = port().SR;
    2d38:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2d3a:	tst.w	r1, #240	; 0xf0
    2d3e:	beq.n	2d38 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    2d40:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    2d42:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    2d44:	bpl.n	2d66 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    2d46:	cbz	r2, 2d4c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    2d48:	strb	r1, [r2, #0]
    2d4a:	adds	r2, #1
					count_read--;
    2d4c:	subs	r3, #1
    2d4e:	b.n	2d34 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    2d50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    2d54:	cbz	r2, 2d62 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    2d56:	mov	r4, r2
						*p_read++ = w >> 8;
    2d58:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    2d5a:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    2d5e:	strb	r5, [r2, #1]
    2d60:	mov	r2, r4
					}
					count_read -= 2;
    2d62:	subs	r3, #2
    2d64:	b.n	2d06 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    2d66:	cbz	r2, 2d74 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    2d68:	mov	r4, r2
    2d6a:	asrs	r5, r1, #8
    2d6c:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    2d70:	strb	r1, [r2, #1]
    2d72:	mov	r2, r4
					}
					count_read -= 2;
    2d74:	subs	r3, #2
    2d76:	b.n	2d34 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2d78:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    2d7c:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2d7e:	it	ne
    2d80:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    2d84:	str	r5, [r4, #52]	; 0x34
    2d86:	b.n	2c74 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2d88:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    2d8c:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2d8e:	it	ne
    2d90:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    2d94:	str	r5, [r4, #52]	; 0x34
    2d96:	b.n	2bd0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    2d98:	.word	0x801f0400

00002d9c <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    2d9c:	cbz	r3, 2da2 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    2d9e:	b.w	2ba4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    2da2:	bx	lr

00002da4 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    2da4:	ldrb.w	r2, [r0, #57]	; 0x39
    2da8:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    2dac:	subs	r0, r2, r0
    2dae:	bx	lr

00002db0 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2db0:	ldrb.w	r3, [r0, #56]	; 0x38
    2db4:	ldrb.w	r2, [r0, #57]	; 0x39
    2db8:	cmp	r2, r3
    2dba:	bls.n	2dc8 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    2dbc:	adds	r2, r3, #1
    2dbe:	add	r3, r0
    2dc0:	strb.w	r2, [r0, #56]	; 0x38
    2dc4:	ldrb	r0, [r3, #24]
    2dc6:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2dc8:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    2dcc:	bx	lr
    2dce:	nop

00002dd0 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2dd0:	ldrb.w	r3, [r0, #56]	; 0x38
    2dd4:	ldrb.w	r2, [r0, #57]	; 0x39
    2dd8:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    2dda:	itte	hi
    2ddc:	addhi	r3, r3, r0
    2dde:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2de0:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    2de4:	bx	lr
    2de6:	nop

00002de8 <TwoWire::flush()>:
	virtual void flush(void) {
    2de8:	bx	lr
    2dea:	nop

00002dec <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2dec:	push	{r3, r4, r5, lr}
    2dee:	mov	r5, r0
	if (transmitting || slave_mode) {
    2df0:	ldrh.w	r0, [r0, #94]	; 0x5e
    2df4:	cbz	r0, 2e1c <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    2df6:	ldrb.w	r3, [r5, #93]	; 0x5d
    2dfa:	mov	r4, r2
    2dfc:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    2e00:	cmp	r4, r2
    2e02:	bhi.n	2e1e <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    2e04:	add.w	r0, r5, #59	; 0x3b
    2e08:	add	r0, r3
    2e0a:	mov	r2, r4
    2e0c:	bl	9404 <memcpy>
		txBufferLength += quantity;
    2e10:	ldrb.w	r3, [r5, #93]	; 0x5d
    2e14:	add	r3, r4
    2e16:	strb.w	r3, [r5, #93]	; 0x5d
    2e1a:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    2e1c:	pop	{r3, r4, r5, pc}
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    2e1e:	movs	r0, #1
    2e20:	mov	r4, r2
    2e22:	strb	r0, [r5, #4]
    2e24:	b.n	2e04 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    2e26:	nop

00002e28 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    2e28:	ldrh.w	r3, [r0, #94]	; 0x5e
    2e2c:	cbz	r3, 2e4a <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    2e2e:	ldrb.w	r3, [r0, #93]	; 0x5d
    2e32:	cmp	r3, #32
    2e34:	bhi.n	2e46 <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    2e36:	adds	r2, r0, r3
    2e38:	adds	r3, #1
    2e3a:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    2e3e:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    2e40:	strb.w	r1, [r2, #59]	; 0x3b
    2e44:	bx	lr
    2e46:	movs	r3, #1
    2e48:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    2e4a:	movs	r0, #0
    2e4c:	bx	lr
    2e4e:	nop

00002e50 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    2e50:	push	{r3, r4, r5, lr}
    2e52:	ldr	r5, [pc, #300]	; (2f80 <i2c0_isr+0x130>)
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    2e54:	ldr	r2, [r5, #16]
void TwoWire::isr(void)
{
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    2e56:	ldrb	r4, [r2, #3]
    2e58:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    2e5a:	lsls	r1, r4, #27
    2e5c:	bpl.n	2eaa <i2c0_isr+0x5a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    2e5e:	movs	r3, #16
    2e60:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    2e62:	lsls	r3, r4, #25
    2e64:	bpl.n	2ea8 <i2c0_isr+0x58>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    2e66:	and.w	r4, r4, #4
    2e6a:	and.w	r3, r4, #255	; 0xff
    2e6e:	cmp	r4, #0
    2e70:	beq.n	2f2e <i2c0_isr+0xde>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    2e72:	ldr	r1, [pc, #272]	; (2f84 <i2c0_isr+0x134>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    2e74:	ldr	r2, [r5, #100]	; 0x64
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
			txBufferLength = 0;
    2e76:	ldr	r4, [pc, #264]	; (2f80 <i2c0_isr+0x130>)
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    2e78:	movs	r3, #0
    2e7a:	strb	r3, [r1, #0]
			txBufferLength = 0;
    2e7c:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    2e80:	cmp	r2, #0
    2e82:	beq.n	2f56 <i2c0_isr+0x106>
				user_onRequest();
    2e84:	blx	r2
			}
			if (txBufferLength == 0) {
    2e86:	ldrb.w	r3, [r4, #93]	; 0x5d
    2e8a:	cmp	r3, #0
    2e8c:	beq.n	2f56 <i2c0_isr+0x106>
    2e8e:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    2e90:	movs	r2, #208	; 0xd0
    2e92:	strb	r2, [r3, #2]
    2e94:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    2e96:	ldrb.w	r2, [r5, #59]	; 0x3b
    2e9a:	strb	r2, [r3, #4]
    2e9c:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    2e9e:	movs	r2, #1
    2ea0:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2ea4:	movs	r2, #2
    2ea6:	strb	r2, [r3, #3]
    2ea8:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    2eaa:	and.w	r3, r4, #64	; 0x40
    2eae:	and.w	r0, r3, #255	; 0xff
    2eb2:	cmp	r3, #0
    2eb4:	bne.n	2e66 <i2c0_isr+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    2eb6:	ldrb	r3, [r2, #6]
    2eb8:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    2eba:	and.w	r1, r3, #96	; 0x60
    2ebe:	cmp	r1, #96	; 0x60
    2ec0:	beq.n	2f64 <i2c0_isr+0x114>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    2ec2:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    2ec4:	and.w	r3, r3, #16
    2ec8:	and.w	r1, r3, #255	; 0xff
    2ecc:	cbz	r3, 2efe <i2c0_isr+0xae>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    2ece:	ands.w	r4, r4, #1
    2ed2:	bne.n	2f48 <i2c0_isr+0xf8>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    2ed4:	ldrb.w	r3, [r5, #92]	; 0x5c
    2ed8:	ldrb.w	r0, [r5, #93]	; 0x5d
    2edc:	ldr	r1, [pc, #160]	; (2f80 <i2c0_isr+0x130>)
    2ede:	cmp	r0, r3
    2ee0:	bls.n	2f7c <i2c0_isr+0x12c>
				port().D = txBuffer[txBufferIndex++];
    2ee2:	adds	r0, r1, r3
    2ee4:	adds	r3, #1
    2ee6:	ldrb.w	r0, [r0, #59]	; 0x3b
    2eea:	strb.w	r3, [r1, #92]	; 0x5c
    2eee:	strb	r0, [r2, #4]
    2ef0:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    2ef2:	movs	r2, #208	; 0xd0
    2ef4:	strb	r2, [r3, #2]
    2ef6:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2ef8:	movs	r2, #2
    2efa:	strb	r2, [r3, #3]
    2efc:	b.n	2ea8 <i2c0_isr+0x58>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    2efe:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    2f02:	ldrb	r3, [r2, #6]
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    2f04:	ldr	r0, [pc, #120]	; (2f80 <i2c0_isr+0x130>)
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    2f06:	orr.w	r3, r3, #32
    2f0a:	strb	r3, [r2, #6]
    2f0c:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    2f0e:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    2f12:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    2f14:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    2f16:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    2f18:	bhi.n	2ea4 <i2c0_isr+0x54>
    2f1a:	ldr	r4, [pc, #104]	; (2f84 <i2c0_isr+0x134>)
    2f1c:	ldrb	r4, [r4, #0]
    2f1e:	cmp	r4, #0
    2f20:	beq.n	2ea4 <i2c0_isr+0x54>
			rxBuffer[rxBufferLength++] = data;
    2f22:	adds	r4, r0, r1
    2f24:	adds	r1, #1
    2f26:	strb	r2, [r4, #24]
    2f28:	strb.w	r1, [r0, #57]	; 0x39
    2f2c:	b.n	2ea4 <i2c0_isr+0x54>
    2f2e:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    2f30:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    2f34:	movs	r3, #192	; 0xc0
    2f36:	strb	r3, [r2, #2]
    2f38:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    2f3a:	ldr	r2, [pc, #72]	; (2f84 <i2c0_isr+0x134>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    2f3c:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    2f3e:	movs	r1, #1
    2f40:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2f42:	movs	r2, #2
    2f44:	strb	r2, [r3, #3]
    2f46:	b.n	2ea8 <i2c0_isr+0x58>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    2f48:	movs	r3, #192	; 0xc0
    2f4a:	strb	r3, [r2, #2]
    2f4c:	ldr	r3, [r5, #16]
			data = port().D;
    2f4e:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2f50:	movs	r2, #2
    2f52:	strb	r2, [r3, #3]
    2f54:	b.n	2ea8 <i2c0_isr+0x58>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    2f56:	movs	r2, #1
				txBuffer[0] = 0;
    2f58:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    2f5a:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    2f5e:	strb.w	r3, [r5, #59]	; 0x3b
    2f62:	b.n	2e8e <i2c0_isr+0x3e>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    2f64:	and.w	r3, r3, #223	; 0xdf
    2f68:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    2f6a:	ldr	r3, [r5, #104]	; 0x68
    2f6c:	cbz	r3, 2f78 <i2c0_isr+0x128>
			rxBufferIndex = 0;
    2f6e:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    2f72:	ldrb.w	r0, [r5, #57]	; 0x39
    2f76:	blx	r3
    2f78:	ldr	r2, [r5, #16]
    2f7a:	b.n	2ec2 <i2c0_isr+0x72>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    2f7c:	strb	r4, [r2, #4]
    2f7e:	b.n	2ef0 <i2c0_isr+0xa0>
    2f80:	.word	0x1fff07b4
    2f84:	.word	0x2002035c

00002f88 <i2c1_isr>:
void i2c0_isr(void) { Wire.isr(); }
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    2f88:	push	{r3, r4, r5, lr}
    2f8a:	ldr	r5, [pc, #300]	; (30b8 <i2c1_isr+0x130>)
    2f8c:	ldr	r2, [r5, #16]
void TwoWire::isr(void)
{
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    2f8e:	ldrb	r4, [r2, #3]
    2f90:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    2f92:	lsls	r1, r4, #27
    2f94:	bpl.n	2fe2 <i2c1_isr+0x5a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    2f96:	movs	r3, #16
    2f98:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    2f9a:	lsls	r3, r4, #25
    2f9c:	bpl.n	2fe0 <i2c1_isr+0x58>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    2f9e:	and.w	r4, r4, #4
    2fa2:	and.w	r3, r4, #255	; 0xff
    2fa6:	cmp	r4, #0
    2fa8:	beq.n	3066 <i2c1_isr+0xde>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    2faa:	ldr	r1, [pc, #272]	; (30bc <i2c1_isr+0x134>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    2fac:	ldr	r2, [r5, #100]	; 0x64
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
			txBufferLength = 0;
    2fae:	ldr	r4, [pc, #264]	; (30b8 <i2c1_isr+0x130>)
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    2fb0:	movs	r3, #0
    2fb2:	strb	r3, [r1, #0]
			txBufferLength = 0;
    2fb4:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    2fb8:	cmp	r2, #0
    2fba:	beq.n	308e <i2c1_isr+0x106>
				user_onRequest();
    2fbc:	blx	r2
			}
			if (txBufferLength == 0) {
    2fbe:	ldrb.w	r3, [r4, #93]	; 0x5d
    2fc2:	cmp	r3, #0
    2fc4:	beq.n	308e <i2c1_isr+0x106>
    2fc6:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    2fc8:	movs	r2, #208	; 0xd0
    2fca:	strb	r2, [r3, #2]
    2fcc:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    2fce:	ldrb.w	r2, [r5, #59]	; 0x3b
    2fd2:	strb	r2, [r3, #4]
    2fd4:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    2fd6:	movs	r2, #1
    2fd8:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2fdc:	movs	r2, #2
    2fde:	strb	r2, [r3, #3]
    2fe0:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    2fe2:	and.w	r3, r4, #64	; 0x40
    2fe6:	and.w	r0, r3, #255	; 0xff
    2fea:	cmp	r3, #0
    2fec:	bne.n	2f9e <i2c1_isr+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    2fee:	ldrb	r3, [r2, #6]
    2ff0:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    2ff2:	and.w	r1, r3, #96	; 0x60
    2ff6:	cmp	r1, #96	; 0x60
    2ff8:	beq.n	309c <i2c1_isr+0x114>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    2ffa:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    2ffc:	and.w	r3, r3, #16
    3000:	and.w	r1, r3, #255	; 0xff
    3004:	cbz	r3, 3036 <i2c1_isr+0xae>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    3006:	ands.w	r4, r4, #1
    300a:	bne.n	3080 <i2c1_isr+0xf8>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    300c:	ldrb.w	r3, [r5, #92]	; 0x5c
    3010:	ldrb.w	r0, [r5, #93]	; 0x5d
    3014:	ldr	r1, [pc, #160]	; (30b8 <i2c1_isr+0x130>)
    3016:	cmp	r0, r3
    3018:	bls.n	30b4 <i2c1_isr+0x12c>
				port().D = txBuffer[txBufferIndex++];
    301a:	adds	r0, r1, r3
    301c:	adds	r3, #1
    301e:	ldrb.w	r0, [r0, #59]	; 0x3b
    3022:	strb.w	r3, [r1, #92]	; 0x5c
    3026:	strb	r0, [r2, #4]
    3028:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    302a:	movs	r2, #208	; 0xd0
    302c:	strb	r2, [r3, #2]
    302e:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3030:	movs	r2, #2
    3032:	strb	r2, [r3, #3]
    3034:	b.n	2fe0 <i2c1_isr+0x58>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    3036:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    303a:	ldrb	r3, [r2, #6]
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    303c:	ldr	r0, [pc, #120]	; (30b8 <i2c1_isr+0x130>)
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    303e:	orr.w	r3, r3, #32
    3042:	strb	r3, [r2, #6]
    3044:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    3046:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    304a:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    304c:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    304e:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    3050:	bhi.n	2fdc <i2c1_isr+0x54>
    3052:	ldr	r4, [pc, #104]	; (30bc <i2c1_isr+0x134>)
    3054:	ldrb	r4, [r4, #0]
    3056:	cmp	r4, #0
    3058:	beq.n	2fdc <i2c1_isr+0x54>
			rxBuffer[rxBufferLength++] = data;
    305a:	adds	r4, r0, r1
    305c:	adds	r1, #1
    305e:	strb	r2, [r4, #24]
    3060:	strb.w	r1, [r0, #57]	; 0x39
    3064:	b.n	2fdc <i2c1_isr+0x54>
    3066:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    3068:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    306c:	movs	r3, #192	; 0xc0
    306e:	strb	r3, [r2, #2]
    3070:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    3072:	ldr	r2, [pc, #72]	; (30bc <i2c1_isr+0x134>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    3074:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    3076:	movs	r1, #1
    3078:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    307a:	movs	r2, #2
    307c:	strb	r2, [r3, #3]
    307e:	b.n	2fe0 <i2c1_isr+0x58>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    3080:	movs	r3, #192	; 0xc0
    3082:	strb	r3, [r2, #2]
    3084:	ldr	r3, [r5, #16]
			data = port().D;
    3086:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3088:	movs	r2, #2
    308a:	strb	r2, [r3, #3]
    308c:	b.n	2fe0 <i2c1_isr+0x58>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    308e:	movs	r2, #1
				txBuffer[0] = 0;
    3090:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    3092:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    3096:	strb.w	r3, [r5, #59]	; 0x3b
    309a:	b.n	2fc6 <i2c1_isr+0x3e>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    309c:	and.w	r3, r3, #223	; 0xdf
    30a0:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    30a2:	ldr	r3, [r5, #104]	; 0x68
    30a4:	cbz	r3, 30b0 <i2c1_isr+0x128>
			rxBufferIndex = 0;
    30a6:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    30aa:	ldrb.w	r0, [r5, #57]	; 0x39
    30ae:	blx	r3
    30b0:	ldr	r2, [r5, #16]
    30b2:	b.n	2ffa <i2c1_isr+0x72>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    30b4:	strb	r4, [r2, #4]
    30b6:	b.n	3028 <i2c1_isr+0xa0>
    30b8:	.word	0x1fff0820
    30bc:	.word	0x2002035c

000030c0 <i2c2_isr>:
void i2c1_isr(void) { Wire1.isr(); }
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    30c0:	push	{r3, r4, r5, lr}
    30c2:	ldr	r5, [pc, #300]	; (31f0 <i2c2_isr+0x130>)
    30c4:	ldr	r2, [r5, #16]
void TwoWire::isr(void)
{
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    30c6:	ldrb	r4, [r2, #3]
    30c8:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    30ca:	lsls	r1, r4, #27
    30cc:	bpl.n	311a <i2c2_isr+0x5a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    30ce:	movs	r3, #16
    30d0:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    30d2:	lsls	r3, r4, #25
    30d4:	bpl.n	3118 <i2c2_isr+0x58>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    30d6:	and.w	r4, r4, #4
    30da:	and.w	r3, r4, #255	; 0xff
    30de:	cmp	r4, #0
    30e0:	beq.n	319e <i2c2_isr+0xde>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    30e2:	ldr	r1, [pc, #272]	; (31f4 <i2c2_isr+0x134>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    30e4:	ldr	r2, [r5, #100]	; 0x64
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
			txBufferLength = 0;
    30e6:	ldr	r4, [pc, #264]	; (31f0 <i2c2_isr+0x130>)
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    30e8:	movs	r3, #0
    30ea:	strb	r3, [r1, #0]
			txBufferLength = 0;
    30ec:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    30f0:	cmp	r2, #0
    30f2:	beq.n	31c6 <i2c2_isr+0x106>
				user_onRequest();
    30f4:	blx	r2
			}
			if (txBufferLength == 0) {
    30f6:	ldrb.w	r3, [r4, #93]	; 0x5d
    30fa:	cmp	r3, #0
    30fc:	beq.n	31c6 <i2c2_isr+0x106>
    30fe:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    3100:	movs	r2, #208	; 0xd0
    3102:	strb	r2, [r3, #2]
    3104:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    3106:	ldrb.w	r2, [r5, #59]	; 0x3b
    310a:	strb	r2, [r3, #4]
    310c:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    310e:	movs	r2, #1
    3110:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3114:	movs	r2, #2
    3116:	strb	r2, [r3, #3]
    3118:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    311a:	and.w	r3, r4, #64	; 0x40
    311e:	and.w	r0, r3, #255	; 0xff
    3122:	cmp	r3, #0
    3124:	bne.n	30d6 <i2c2_isr+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    3126:	ldrb	r3, [r2, #6]
    3128:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    312a:	and.w	r1, r3, #96	; 0x60
    312e:	cmp	r1, #96	; 0x60
    3130:	beq.n	31d4 <i2c2_isr+0x114>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    3132:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    3134:	and.w	r3, r3, #16
    3138:	and.w	r1, r3, #255	; 0xff
    313c:	cbz	r3, 316e <i2c2_isr+0xae>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    313e:	ands.w	r4, r4, #1
    3142:	bne.n	31b8 <i2c2_isr+0xf8>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    3144:	ldrb.w	r3, [r5, #92]	; 0x5c
    3148:	ldrb.w	r0, [r5, #93]	; 0x5d
    314c:	ldr	r1, [pc, #160]	; (31f0 <i2c2_isr+0x130>)
    314e:	cmp	r0, r3
    3150:	bls.n	31ec <i2c2_isr+0x12c>
				port().D = txBuffer[txBufferIndex++];
    3152:	adds	r0, r1, r3
    3154:	adds	r3, #1
    3156:	ldrb.w	r0, [r0, #59]	; 0x3b
    315a:	strb.w	r3, [r1, #92]	; 0x5c
    315e:	strb	r0, [r2, #4]
    3160:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    3162:	movs	r2, #208	; 0xd0
    3164:	strb	r2, [r3, #2]
    3166:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3168:	movs	r2, #2
    316a:	strb	r2, [r3, #3]
    316c:	b.n	3118 <i2c2_isr+0x58>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    316e:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    3172:	ldrb	r3, [r2, #6]
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    3174:	ldr	r0, [pc, #120]	; (31f0 <i2c2_isr+0x130>)
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    3176:	orr.w	r3, r3, #32
    317a:	strb	r3, [r2, #6]
    317c:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    317e:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    3182:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    3184:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    3186:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    3188:	bhi.n	3114 <i2c2_isr+0x54>
    318a:	ldr	r4, [pc, #104]	; (31f4 <i2c2_isr+0x134>)
    318c:	ldrb	r4, [r4, #0]
    318e:	cmp	r4, #0
    3190:	beq.n	3114 <i2c2_isr+0x54>
			rxBuffer[rxBufferLength++] = data;
    3192:	adds	r4, r0, r1
    3194:	adds	r1, #1
    3196:	strb	r2, [r4, #24]
    3198:	strb.w	r1, [r0, #57]	; 0x39
    319c:	b.n	3114 <i2c2_isr+0x54>
    319e:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    31a0:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    31a4:	movs	r3, #192	; 0xc0
    31a6:	strb	r3, [r2, #2]
    31a8:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    31aa:	ldr	r2, [pc, #72]	; (31f4 <i2c2_isr+0x134>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    31ac:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    31ae:	movs	r1, #1
    31b0:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    31b2:	movs	r2, #2
    31b4:	strb	r2, [r3, #3]
    31b6:	b.n	3118 <i2c2_isr+0x58>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    31b8:	movs	r3, #192	; 0xc0
    31ba:	strb	r3, [r2, #2]
    31bc:	ldr	r3, [r5, #16]
			data = port().D;
    31be:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    31c0:	movs	r2, #2
    31c2:	strb	r2, [r3, #3]
    31c4:	b.n	3118 <i2c2_isr+0x58>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    31c6:	movs	r2, #1
				txBuffer[0] = 0;
    31c8:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    31ca:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    31ce:	strb.w	r3, [r5, #59]	; 0x3b
    31d2:	b.n	30fe <i2c2_isr+0x3e>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    31d4:	and.w	r3, r3, #223	; 0xdf
    31d8:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    31da:	ldr	r3, [r5, #104]	; 0x68
    31dc:	cbz	r3, 31e8 <i2c2_isr+0x128>
			rxBufferIndex = 0;
    31de:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    31e2:	ldrb.w	r0, [r5, #57]	; 0x39
    31e6:	blx	r3
    31e8:	ldr	r2, [r5, #16]
    31ea:	b.n	3132 <i2c2_isr+0x72>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    31ec:	strb	r4, [r2, #4]
    31ee:	b.n	3160 <i2c2_isr+0xa0>
    31f0:	.word	0x1fff0748
    31f4:	.word	0x2002035c

000031f8 <FsFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//-----------------------------------------------------------------------------
bool FsFile::close() {
    31f8:	push	{r4, lr}
    31fa:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    31fc:	ldr	r0, [r0, #72]	; 0x48
    31fe:	cbz	r0, 320c <FsFile::close()+0x14>
    3200:	bl	505c <FatFile::close()>
    3204:	cbz	r0, 320c <FsFile::close()+0x14>
    m_fFile = nullptr;
    3206:	movs	r3, #0
    3208:	str	r3, [r4, #72]	; 0x48
    return true;
    320a:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    320c:	ldr	r0, [r4, #76]	; 0x4c
    320e:	cbz	r0, 321c <FsFile::close()+0x24>
    3210:	bl	33b0 <ExFatFile::close()>
    3214:	cbz	r0, 321c <FsFile::close()+0x24>
    m_xFile = nullptr;
    3216:	movs	r3, #0
    3218:	str	r3, [r4, #76]	; 0x4c
    321a:	pop	{r4, pc}
    return true;
  }
  return false;
    321c:	movs	r0, #0
}
    321e:	pop	{r4, pc}

00003220 <FsFile::open(FsVolume*, char const*, unsigned char)>:
  }
  return false;
}
//-----------------------------------------------------------------------------
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
  if (!vol) {
    3220:	cmp	r1, #0
    3222:	beq.n	32ba <FsFile::open(FsVolume*, char const*, unsigned char)+0x9a>
    m_xFile = nullptr;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
    3224:	push	{r3, r4, r5, r6, r7, lr}
    3226:	mov	r4, r0
  }
  return *this;
}
//-----------------------------------------------------------------------------
bool FsFile::close() {
  if (m_fFile && m_fFile->close()) {
    3228:	ldr	r0, [r0, #72]	; 0x48
    322a:	mov	r5, r1
    322c:	mov	r7, r3
    322e:	mov	r6, r2
    3230:	cbz	r0, 3268 <FsFile::open(FsVolume*, char const*, unsigned char)+0x48>
    3232:	bl	505c <FatFile::close()>
    3236:	cbz	r0, 3268 <FsFile::open(FsVolume*, char const*, unsigned char)+0x48>
    m_fFile = nullptr;
    3238:	movs	r3, #0
    323a:	str	r3, [r4, #72]	; 0x48
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    323c:	ldr.w	r3, [r5, #1144]	; 0x478
    3240:	cbz	r3, 3282 <FsFile::open(FsVolume*, char const*, unsigned char)+0x62>
    m_fFile = new (m_fileMem) FatFile;
    3242:	add.w	r1, r4, #16
    3246:	movs	r0, #36	; 0x24
    3248:	bl	33ac <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    324c:	movs	r3, #0
    324e:	strb	r3, [r0, #0]
    3250:	strb	r3, [r0, #1]
    3252:	strb	r3, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    3254:	mov	r2, r6
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    3256:	str	r0, [r4, #72]	; 0x48
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    3258:	mov	r3, r7
    325a:	ldr.w	r1, [r5, #1144]	; 0x478
    325e:	bl	526c <FatFile::open(FatVolume*, char const*, unsigned char)>
    3262:	cbz	r0, 32b6 <FsFile::open(FsVolume*, char const*, unsigned char)+0x96>
      return true;
    3264:	movs	r0, #1
    3266:	pop	{r3, r4, r5, r6, r7, pc}
bool FsFile::close() {
  if (m_fFile && m_fFile->close()) {
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    3268:	ldr	r0, [r4, #76]	; 0x4c
    326a:	cmp	r0, #0
    326c:	beq.n	323c <FsFile::open(FsVolume*, char const*, unsigned char)+0x1c>
    326e:	bl	33b0 <ExFatFile::close()>
    3272:	cmp	r0, #0
    3274:	beq.n	323c <FsFile::open(FsVolume*, char const*, unsigned char)+0x1c>
    m_xFile = nullptr;
    3276:	movs	r3, #0
    3278:	str	r3, [r4, #76]	; 0x4c
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    327a:	ldr.w	r3, [r5, #1144]	; 0x478
    327e:	cmp	r3, #0
    3280:	bne.n	3242 <FsFile::open(FsVolume*, char const*, unsigned char)+0x22>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    3282:	ldr.w	r3, [r5, #1148]	; 0x47c
    3286:	cbz	r3, 32be <FsFile::open(FsVolume*, char const*, unsigned char)+0x9e>
    m_xFile = new (m_fileMem) ExFatFile;
    3288:	add.w	r1, r4, #16
    328c:	movs	r0, #56	; 0x38
    328e:	bl	33ac <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    3292:	movs	r3, #0
    3294:	strb.w	r3, [r0, #49]	; 0x31
    3298:	strb.w	r3, [r0, #50]	; 0x32
    329c:	strb.w	r3, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    32a0:	ldr.w	r1, [r5, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    32a4:	str	r0, [r4, #76]	; 0x4c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    32a6:	mov	r3, r7
    32a8:	mov	r2, r6
    32aa:	bl	3c48 <ExFatFile::open(ExFatVolume*, char const*, int)>
    32ae:	cmp	r0, #0
    32b0:	bne.n	3264 <FsFile::open(FsVolume*, char const*, unsigned char)+0x44>
      return true;
    }
    m_xFile = nullptr;
    32b2:	str	r0, [r4, #76]	; 0x4c
  }
  return false;
}
    32b4:	pop	{r3, r4, r5, r6, r7, pc}
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
    32b6:	str	r0, [r4, #72]	; 0x48
    return false;
    32b8:	pop	{r3, r4, r5, r6, r7, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
  if (!vol) {
    return false;
    32ba:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    32bc:	bx	lr
  return false;
}
//-----------------------------------------------------------------------------
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
  if (!vol) {
    return false;
    32be:	movs	r0, #0
    32c0:	pop	{r3, r4, r5, r6, r7, pc}
    32c2:	nop

000032c4 <FsVolume::begin(SdCardInterface*)>:
 */
#include "FsVolume.h"
#include "FsFile.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    32c4:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    32c6:	movs	r6, #0
 */
#include "FsVolume.h"
#include "FsFile.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    32c8:	mov	r5, r0
  m_blockDev = blockDev;
    32ca:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    32ce:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    32d2:	mov	r1, r0
    32d4:	mov.w	r0, #1144	; 0x478
    32d8:	bl	33ac <operator new(unsigned int, unsigned long*)>
    32dc:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    32de:	str	r6, [r0, #4]
    invalidate();
    32e0:	bl	3c58 <FsCache::invalidate()>
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    32e4:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    32e8:	add.w	r0, r4, #524	; 0x20c
    32ec:	bl	3c58 <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    32f0:	strb.w	r6, [r4, #1084]	; 0x43c
    32f4:	strb.w	r6, [r4, #1137]	; 0x471
    32f8:	strb.w	r6, [r4, #1138]	; 0x472
    32fc:	strb.w	r6, [r4, #1139]	; 0x473
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    3300:	ldr.w	r6, [r5, #1152]	; 0x480
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    3304:	str.w	r4, [r5, #1148]	; 0x47c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 0) {
    if (!(part ? init(dev, part) : init(dev, 1) || init(dev, 0))) {
    3308:	mov	r1, r6
    330a:	mov	r0, r4
    330c:	movs	r2, #1
    330e:	bl	3d14 <ExFatPartition::init(SdCardInterface*, unsigned char)>
    3312:	cbz	r0, 3332 <FsVolume::begin(SdCardInterface*)+0x6e>
  /**
   * Set volume working directory to root.
   * \return true for success else false.
   */
  bool chdir() {
    m_vwd.close();
    3314:	add.w	r6, r4, #1088	; 0x440
    3318:	mov	r0, r6
    331a:	bl	33b0 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    331e:	mov	r1, r4
    3320:	mov	r0, r6
    3322:	bl	3480 <ExFatFile::openRoot(ExFatVolume*)>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    3326:	cbz	r0, 3340 <FsVolume::begin(SdCardInterface*)+0x7c>
    3328:	ldr	r2, [pc, #124]	; (33a8 <FsVolume::begin(SdCardInterface*)+0xe4>)
  return false;

 done:
  m_cwv = this;

  return true;
    332a:	mov	r3, r5
    332c:	movs	r0, #1
    332e:	str	r3, [r2, #0]
}
    3330:	pop	{r4, r5, r6, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 0) {
    if (!(part ? init(dev, part) : init(dev, 1) || init(dev, 0))) {
    3332:	mov	r2, r0
    3334:	mov	r1, r6
    3336:	mov	r0, r4
    3338:	bl	3d14 <ExFatPartition::init(SdCardInterface*, unsigned char)>
    333c:	cmp	r0, #0
    333e:	bne.n	3314 <FsVolume::begin(SdCardInterface*)+0x50>
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    3340:	movs	r6, #0
    3342:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    3346:	mov	r1, r5
    3348:	mov.w	r0, #1120	; 0x460
    334c:	bl	33ac <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    3350:	strb	r6, [r0, #7]
    3352:	strb.w	r6, [r0, #1084]	; 0x43c
    3356:	strb.w	r6, [r0, #1085]	; 0x43d
    335a:	strb.w	r6, [r0, #1086]	; 0x43e
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    335e:	ldr.w	r6, [r5, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
    3362:	str.w	r0, [r5, #1144]	; 0x478
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 0) {
    if (!(part ? init(dev, part) : init(dev, 1) || init(dev, 0))) {
    3366:	movs	r2, #1
    3368:	mov	r1, r6
    336a:	mov	r4, r0
    336c:	bl	6458 <FatPartition::init(SdCardInterface*, unsigned char)>
    3370:	cbz	r0, 3398 <FsVolume::begin(SdCardInterface*)+0xd4>
  /**
   * Set volume working directory to root.
   * \return true for success else false.
   */
  bool chdir() {
    m_vwd.close();
    3372:	addw	r6, r4, #1084	; 0x43c
    3376:	mov	r0, r6
    3378:	bl	505c <FatFile::close()>
    return m_vwd.openRoot(this);
    337c:	mov	r1, r4
    337e:	mov	r0, r6
    3380:	bl	527c <FatFile::openRoot(FatVolume*)>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    3384:	cmp	r0, #0
    3386:	bne.n	3328 <FsVolume::begin(SdCardInterface*)+0x64>
    goto done;
  }
  m_cwv = nullptr;
  m_fVol = nullptr;
    3388:	movs	r2, #0
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    338a:	mov	r3, r2
  m_fVol = nullptr;
    338c:	str.w	r2, [r5, #1144]	; 0x478
  return false;
    3390:	mov	r0, r2
    3392:	ldr	r2, [pc, #20]	; (33a8 <FsVolume::begin(SdCardInterface*)+0xe4>)
    3394:	str	r3, [r2, #0]

 done:
  m_cwv = this;

  return true;
}
    3396:	pop	{r4, r5, r6, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 0) {
    if (!(part ? init(dev, part) : init(dev, 1) || init(dev, 0))) {
    3398:	mov	r2, r0
    339a:	mov	r1, r6
    339c:	mov	r0, r4
    339e:	bl	6458 <FatPartition::init(SdCardInterface*, unsigned char)>
    33a2:	cmp	r0, #0
    33a4:	bne.n	3372 <FsVolume::begin(SdCardInterface*)+0xae>
    33a6:	b.n	3388 <FsVolume::begin(SdCardInterface*)+0xc4>
    33a8:	.word	0x20020360

000033ac <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    33ac:	mov	r0, r1
    33ae:	bx	lr

000033b0 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    33b0:	push	{r4, lr}
    33b2:	mov	r4, r0
  bool rtn = sync();
    33b4:	bl	4924 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    33b8:	movs	r3, #0
    33ba:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    33be:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    33c2:	pop	{r4, pc}

000033c4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    33c4:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    33c6:	ldrb	r0, [r1, #0]
    33c8:	cmp	r0, #32
    33ca:	bne.n	33d4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    33cc:	ldrb.w	r0, [r1, #1]!
    33d0:	cmp	r0, #32
    33d2:	beq.n	33cc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    33d4:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    33d6:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    33d8:	cmp	r0, #0
    33da:	beq.n	3476 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb2>
    33dc:	cmp	r0, #47	; 0x2f
    33de:	beq.n	3438 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    33e0:	cmp	r0, #92	; 0x5c
    33e2:	beq.n	3426 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    33e4:	sub.w	r4, r0, #34	; 0x22
    33e8:	uxtb	r4, r4
    33ea:	cmp	r4, #29
    33ec:	bls.n	342a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    33ee:	ldr.w	lr, [pc, #140]	; 347c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb8>
    33f2:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    33f4:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    33f6:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    33f8:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    33fc:	mov	r7, r6
    33fe:	beq.n	3426 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3400:	cmp	r5, #94	; 0x5e
    3402:	bhi.n	3426 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3404:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3408:	sub.w	r5, r0, #34	; 0x22
    340c:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    340e:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    3410:	cbz	r0, 3468 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa4>
    3412:	cmp	r0, #47	; 0x2f
    3414:	beq.n	343a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    3416:	cmp	r0, #92	; 0x5c
    3418:	lsr.w	r7, lr, r5
    341c:	beq.n	3426 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    341e:	cmp	r5, #29
    3420:	bhi.n	33f6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    3422:	lsls	r5, r7, #31
    3424:	bpl.n	33f6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3426:	movs	r0, #0
    3428:	pop	{r4, r5, r6, r7, pc}
    342a:	ldr	r5, [pc, #80]	; (347c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb8>)
    342c:	lsr.w	r4, r5, r4
    3430:	lsls	r6, r4, #31
    3432:	bpl.n	33ee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    3434:	movs	r0, #0
    3436:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3438:	movs	r4, #0
    343a:	add	r1, r4
    343c:	mov	r0, r1
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    343e:	mov	r6, r0
    3440:	ldrb.w	r5, [r0], #1
    3444:	cmp	r5, #32
    3446:	beq.n	343e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7a>
    3448:	cmp	r5, #47	; 0x2f
    344a:	beq.n	343e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7a>
  *ptr = &path[end];
    344c:	str	r6, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    344e:	cbz	r4, 3460 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>
    c = path[len - 1];
    3450:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    3454:	cmp	r3, #46	; 0x2e
    3456:	beq.n	345c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>
    3458:	cmp	r3, #32
    345a:	bne.n	346e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xaa>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    345c:	subs	r4, #1
    345e:	bne.n	3450 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    3460:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    3462:	str	r0, [r2, #0]
  return true;
    3464:	movs	r0, #1
    3466:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3468:	str	r7, [r3, #0]
    346a:	add	r1, r4
    346c:	b.n	3450 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    346e:	cmp	r4, #255	; 0xff
    3470:	ble.n	3460 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3472:	movs	r0, #0
    3474:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3476:	str	r1, [r3, #0]
    3478:	b.n	3462 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9e>
    347a:	nop
    347c:	.word	0x35000101

00003480 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    3480:	ldrb.w	r2, [r0, #49]	; 0x31
    3484:	cbz	r2, 348a <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    3486:	movs	r0, #0
    3488:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    348a:	push	{r3, r4, r5, lr}
    348c:	mov	r4, r0
    348e:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3490:	mov	r1, r2
    3492:	movs	r2, #56	; 0x38
    3494:	bl	cb88 <memset>
  m_attributes = FILE_ATTR_ROOT;
    3498:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    349a:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    349c:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    34a0:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    34a4:	str	r5, [r4, #32]
    34a6:	pop	{r3, r4, r5, pc}

000034a8 <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    34a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    34ac:	ldrb.w	r3, [r0, #51]	; 0x33
    34b0:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    34b2:	lsls	r0, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    34b4:	sub	sp, #8
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    34b6:	bpl.w	361e <ExFatFile::read(void*, unsigned int)+0x176>
    34ba:	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    34bc:	lsls	r1, r3, #25
    34be:	mov	r6, r2
    34c0:	bpl.w	3634 <ExFatFile::read(void*, unsigned int)+0x18c>
    if ((m_curPosition + count) > m_validLength) {
    34c4:	ldrd	r0, r1, [r4]
    34c8:	ldrd	r2, r3, [r4, #16]
    34cc:	adds.w	r8, r0, r6
    34d0:	adc.w	r9, r1, #0
    34d4:	cmp	r3, r9
    34d6:	it	eq
    34d8:	cmpeq	r2, r8
    34da:	bcc.w	3640 <ExFatFile::read(void*, unsigned int)+0x198>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    34de:	cmp	r6, #0
    34e0:	beq.w	3644 <ExFatFile::read(void*, unsigned int)+0x19c>
    34e4:	mov	r9, r4
    34e6:	ldrd	r2, r3, [r9], #24
    34ea:	mov	r8, r6
    34ec:	b.n	359a <ExFatFile::read(void*, unsigned int)+0xf2>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    34ee:	orrs	r3, r2
    34f0:	bne.n	35d6 <ExFatFile::read(void*, unsigned int)+0x12e>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    34f2:	ldrb.w	r3, [r4, #49]	; 0x31
    34f6:	lsls	r3, r3, #25
    34f8:	ite	mi
    34fa:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    34fe:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    3500:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    3502:	ldrb.w	lr, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3506:	ldr.w	r3, [r0, #1060]	; 0x424
    350a:	subs	r1, #2
    350c:	lsrs	r7, r7, #9
    350e:	lsl.w	r2, r1, lr
    3512:	adds	r1, r7, r3
    3514:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    3516:	cmp.w	sl, #0
    351a:	bne.n	35ae <ExFatFile::read(void*, unsigned int)+0x106>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    351c:	cmp.w	r8, #512	; 0x200
    3520:	bcc.n	35ae <ExFatFile::read(void*, unsigned int)+0x106>
    3522:	ldr.w	r3, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    3526:	cmp	r1, r3
    3528:	beq.n	35ae <ExFatFile::read(void*, unsigned int)+0x106>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    352a:	cmp.w	r8, #1024	; 0x400
    352e:	bcc.n	35e4 <ExFatFile::read(void*, unsigned int)+0x13c>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isContiguous()) {
    3530:	ldrb.w	r2, [r4, #51]	; 0x33
    3534:	lsls	r2, r2, #25
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3536:	mov.w	sl, r8, lsr #9
      if (!isContiguous()) {
    353a:	bmi.n	354c <ExFatFile::read(void*, unsigned int)+0xa4>
        uint32_t maxNs = m_vol->sectorsPerCluster()
                         - (clusterOffset >> m_vol->bytesPerSectorShift());
    353c:	movs	r2, #1
    353e:	lsl.w	lr, r2, lr
    3542:	rsb	r7, r7, lr
    3546:	cmp	sl, r7
    3548:	it	cs
    354a:	movcs	sl, r7
          ns = maxNs;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (m_vol->dataCacheSector() <= sector
          && m_vol->dataCacheSector() < (sector + ns)) {
    354c:	cmp	r1, r3
                         - (clusterOffset >> m_vol->bytesPerSectorShift());
        if (ns > maxNs) {
          ns = maxNs;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    354e:	mov.w	r7, sl, lsl #9
      if (m_vol->dataCacheSector() <= sector
          && m_vol->dataCacheSector() < (sector + ns)) {
    3552:	bcc.n	356e <ExFatFile::read(void*, unsigned int)+0xc6>
    3554:	add.w	r2, sl, r1
    3558:	cmp	r2, r3
    355a:	bls.n	356e <ExFatFile::read(void*, unsigned int)+0xc6>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    355c:	add.w	r0, r0, #524	; 0x20c
    3560:	str	r1, [sp, #4]
    3562:	bl	3ce8 <FsCache::sync()>
        // flush cache if a sector is in the cache
        if (!m_vol->dataCacheSync()) {
    3566:	cmp	r0, #0
    3568:	beq.n	361e <ExFatFile::read(void*, unsigned int)+0x176>
    356a:	ldr	r0, [r4, #32]
    356c:	ldr	r1, [sp, #4]
    356e:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    3572:	ldr	r2, [r0, #0]
    3574:	mov	r3, sl
    3576:	ldr.w	sl, [r2, #12]
    357a:	mov	r2, r5
    357c:	blx	sl
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    357e:	cmp	r0, #0
    3580:	beq.n	361e <ExFatFile::read(void*, unsigned int)+0x176>
    3582:	mov	r0, r7
    3584:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    3586:	ldrd	r2, r3, [r4]
    358a:	adds	r2, r2, r0
    358c:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    358e:	subs.w	r8, r8, r7
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    3592:	add	r5, r7
    m_curPosition += n;
    3594:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3598:	beq.n	3644 <ExFatFile::read(void*, unsigned int)+0x19c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    359a:	ldr	r0, [r4, #32]
    359c:	ldr.w	r7, [r0, #1072]	; 0x430
    35a0:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    35a2:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    35a6:	cmp	r7, #0
    35a8:	beq.n	34ee <ExFatFile::read(void*, unsigned int)+0x46>
    35aa:	ldr	r1, [r4, #24]
    35ac:	b.n	3502 <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    35ae:	add.w	r0, r0, #524	; 0x20c
    35b2:	movs	r2, #0
    35b4:	bl	3c64 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    35b8:	cbz	r0, 361e <ExFatFile::read(void*, unsigned int)+0x176>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    35ba:	rsb	r7, sl, #512	; 0x200
    35be:	cmp	r7, r8
    35c0:	it	cs
    35c2:	movcs	r7, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    35c4:	add.w	r1, r0, sl
    35c8:	mov	r2, r7
    35ca:	mov	r0, r5
    35cc:	bl	9404 <memcpy>
    35d0:	mov	r0, r7
    35d2:	movs	r1, #0
    35d4:	b.n	3586 <ExFatFile::read(void*, unsigned int)+0xde>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    35d6:	ldrb.w	r3, [r4, #51]	; 0x33
    35da:	lsls	r1, r3, #25
    35dc:	bpl.n	35fe <ExFatFile::read(void*, unsigned int)+0x156>
        m_curCluster++;
    35de:	ldr	r1, [r4, #24]
    35e0:	adds	r1, #1
    35e2:	b.n	3500 <ExFatFile::read(void*, unsigned int)+0x58>
    35e4:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    35e8:	ldr	r3, [r0, #0]
    35ea:	mov	r2, r5
    35ec:	ldr	r3, [r3, #8]
    35ee:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    35f0:	cbz	r0, 361e <ExFatFile::read(void*, unsigned int)+0x176>
    35f2:	mov.w	r0, #512	; 0x200
    35f6:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    35f8:	mov.w	r7, #512	; 0x200
    35fc:	b.n	3586 <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    35fe:	mov	r2, r9
    3600:	ldr	r1, [r4, #24]
    3602:	bl	42bc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3606:	sxtb	r0, r0
        if (fg < 0) {
    3608:	cmp	r0, #0
    360a:	blt.n	361e <ExFatFile::read(void*, unsigned int)+0x176>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    360c:	beq.n	3614 <ExFatFile::read(void*, unsigned int)+0x16c>
    360e:	ldr	r0, [r4, #32]
    3610:	ldr	r1, [r4, #24]
    3612:	b.n	3502 <ExFatFile::read(void*, unsigned int)+0x5a>
          // EOF if directory.
          if (isDir()) {
    3614:	ldrb.w	r3, [r4, #49]	; 0x31
    3618:	tst.w	r3, #80	; 0x50
    361c:	bne.n	3648 <ExFatFile::read(void*, unsigned int)+0x1a0>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    361e:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    3622:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    3626:	orr.w	r3, r3, #2
    362a:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    362e:	add	sp, #8
    3630:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3634:	ldrb.w	r3, [r4, #49]	; 0x31
    3638:	lsls	r2, r3, #28
    363a:	bmi.w	34c4 <ExFatFile::read(void*, unsigned int)+0x1c>
    363e:	b.n	34de <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    3640:	subs	r6, r2, r0
    3642:	b.n	34de <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3644:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    3648:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    364c:	add	sp, #8
    364e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3652:	nop

00003654 <ExFatFile::peek()>:
 fail:
  *name = 0;
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    3654:	push	{r4, r5, r6, r7, lr}
    3656:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3658:	movs	r2, #1
    365a:	add.w	r1, sp, #7
    365e:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    3660:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    3664:	ldr	r5, [r0, #24]
    3666:	bl	34a8 <ExFatFile::read(void*, unsigned int)>
    366a:	cmp	r0, #1
    366c:	it	eq
    366e:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    3672:	str	r5, [r4, #24]
    3674:	it	ne
    3676:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    367a:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    367e:	add	sp, #12
    3680:	pop	{r4, r5, r6, r7, pc}
    3682:	nop

00003684 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3684:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3688:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    368c:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    368e:	sub	sp, #12
    3690:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3692:	cmp.w	lr, #0
    3696:	beq.n	36d0 <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3698:	ldrd	r0, r1, [r0]
    369c:	cmp	r1, r3
    369e:	it	eq
    36a0:	cmpeq	r0, r2
    36a2:	mov	r6, r2
    36a4:	mov	r7, r3
    36a6:	beq.n	3720 <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    36a8:	orrs.w	r3, r6, r7
    36ac:	bne.n	36be <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    36ae:	movs	r3, #0
    36b0:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    36b2:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    36b4:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    36b8:	add	sp, #12
    36ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    36be:	tst.w	lr, #8
    36c2:	beq.n	36da <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    36c4:	ldrd	r2, r3, [r4, #16]
    36c8:	cmp	r3, r7
    36ca:	it	eq
    36cc:	cmpeq	r2, r6
    36ce:	bcs.n	36da <ExFatFile::seekSet(unsigned long long)+0x56>
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    36d0:	str	r5, [r4, #24]
  return false;
    36d2:	movs	r0, #0
}
    36d4:	add	sp, #12
    36d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    36da:	ldr	r3, [r4, #32]
    36dc:	str	r3, [sp, #4]
    36de:	ldrb.w	ip, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    36e2:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    36e6:	add.w	ip, ip, #9
    36ea:	uxtb.w	ip, ip
    36ee:	adds.w	r2, r6, #4294967295
    36f2:	adc.w	r3, r7, #4294967295
    36f6:	rsb	r8, ip, #32
    36fa:	lsl.w	fp, r3, r8
    36fe:	lsr.w	r2, r2, ip
    3702:	orr.w	r2, r2, fp
    3706:	sub.w	fp, ip, #32
    370a:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    370e:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3712:	orr.w	r2, r2, r3
  if (isContiguous()) {
    3716:	beq.n	3724 <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    3718:	ldr	r3, [r4, #28]
    371a:	add	r2, r3
    371c:	str	r2, [r4, #24]
    goto done;
    371e:	b.n	36b2 <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    3720:	movs	r0, #1
    3722:	b.n	36d4 <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3724:	adds.w	r9, r0, #4294967295
    3728:	adc.w	sl, r1, #4294967295
    372c:	lsr.w	ip, r9, ip
    3730:	lsl.w	r8, sl, r8
    3734:	orr.w	ip, ip, r8
    3738:	lsr.w	fp, sl, fp
    373c:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    3740:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3742:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    3744:	bcs.n	3776 <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3746:	tst.w	lr, #64	; 0x40
    374a:	itet	ne
    374c:	ldrne	r3, [sp, #4]
    374e:	ldreq	r3, [r4, #28]
    3750:	ldrne.w	r3, [r3, #1068]	; 0x42c
    3754:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3756:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3758:	add.w	r9, r4, #24
    375c:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    375e:	cmp.w	r8, #0
    3762:	beq.n	36b2 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3764:	ldr	r1, [r4, #24]
    3766:	ldr	r0, [r4, #32]
    3768:	bl	42bc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    376c:	add.w	r8, r8, #4294967295
    3770:	cmp	r0, #0
    3772:	bne.n	375c <ExFatFile::seekSet(unsigned long long)+0xd8>
    3774:	b.n	36d0 <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    3776:	orrs.w	r3, r0, r1
    377a:	beq.n	3746 <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    377c:	rsb	r2, ip, r2
    3780:	b.n	3756 <ExFatFile::seekSet(unsigned long long)+0xd2>
    3782:	nop

00003784 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, uint8_t oflag) {
    3784:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3788:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    378a:	ldrb.w	r4, [r0, #49]	; 0x31
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, uint8_t oflag) {
    378e:	str	r2, [sp, #0]
    3790:	mov	r5, r1
    3792:	ldrb.w	r1, [sp, #112]	; 0x70
    3796:	str	r1, [sp, #8]
    3798:	mov	r6, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    379a:	cbnz	r4, 37a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    379c:	mov	sl, r3
    379e:	ldrb.w	r3, [r5, #49]	; 0x31
    37a2:	tst.w	r3, #80	; 0x50
    37a6:	bne.n	37b8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x34>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    37a8:	movs	r0, #0
    37aa:	strb.w	r0, [r6, #49]	; 0x31
  m_flags = 0;
    37ae:	strb.w	r0, [r6, #51]	; 0x33
  return false;
}
    37b2:	add	sp, #76	; 0x4c
    37b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37b8:	mov	r3, r2
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (name) {
    37ba:	cmp	r2, #0
    37bc:	beq.w	39ee <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x26a>
    37c0:	mov	r0, r3
    nameHash = exFatHashName(name, nameLength, 0);
    37c2:	mov	r2, r4
    37c4:	mov	r1, sl
    37c6:	bl	469c <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    37ca:	ldrb.w	r3, [r5, #49]	; 0x31
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    37ce:	str	r0, [sp, #16]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    37d0:	cmp	r3, #0
    37d2:	bne.w	39d8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x254>
  }
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    37d6:	ldr	r2, [pc, #540]	; (39f4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x270>)
    37d8:	add.w	r3, sl, #14
    37dc:	smull	r1, r2, r2, r3
    37e0:	add	r2, r3
    37e2:	asrs	r3, r3, #31
    37e4:	rsb	r3, r3, r2, asr #3
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
    37e8:	ldr	r2, [sp, #8]
  }
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    37ea:	uxtb	r3, r3
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
    37ec:	and.w	r2, r2, #7
  }
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    37f0:	str	r3, [sp, #20]
    37f2:	adds	r3, #2
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    37f4:	mov.w	r9, #0
  }
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    37f8:	uxtb.w	fp, r3

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
    37fc:	orr.w	r3, r2, #64	; 0x40
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
    3800:	str	r2, [sp, #4]

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    3802:	mov	r4, r9
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, uint8_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    3804:	mov	r7, r9

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
    3806:	str	r3, [sp, #12]
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    3808:	movs	r2, #32
    380a:	add	r1, sp, #40	; 0x28
    380c:	mov	r0, r5
    380e:	bl	34a8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3812:	cmp	r0, #0
    3814:	beq.n	3892 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x10e>
      goto create;
    }
    if (n != 32) {
    3816:	cmp	r0, #32
    3818:	bne.n	37a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    381a:	ldrb.w	r3, [sp, #40]	; 0x28
    381e:	lsls	r2, r3, #24
    3820:	bmi.n	38ea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x166>
      if (freeCount == 0) {
    3822:	cmp	r4, #0
    3824:	bne.n	38e4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x160>
        freePos.position = dir->curPosition() - 32;
    3826:	ldr	r2, [r5, #0]
        freePos.cluster = dir->curCluster();
    3828:	ldr	r1, [r5, #24]
    382a:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    382c:	subs	r2, #32
    382e:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    3830:	adds	r4, #1
    3832:	uxtb	r4, r4
      }
      if (!buf[0]) {
    3834:	cbz	r3, 3892 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x10e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    3836:	cmp	r3, #192	; 0xc0
    3838:	beq.w	3984 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x200>
    383c:	cmp	r3, #193	; 0xc1
    383e:	beq.n	3900 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x17c>
    3840:	cmp	r3, #133	; 0x85
    3842:	bne.n	3808 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    3844:	movs	r2, #56	; 0x38
    3846:	movs	r1, #0
    3848:	mov	r0, r6
    384a:	bl	cb88 <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    384e:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    3852:	ldrb.w	r2, [sp, #41]	; 0x29
    3856:	strb.w	r2, [r6, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    385a:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    385e:	lsls	r3, r3, #27
          m_attributes |= FILE_ATTR_FILE;
    3860:	it	pl
    3862:	orrpl.w	r2, r2, #8
    3866:	strb.w	r2, [r6, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    386a:	ldr	r3, [r5, #0]
    386c:	ldr	r1, [r5, #32]
    386e:	ldr	r2, [r5, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    3870:	str	r2, [r6, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    3872:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    3874:	str	r1, [r6, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    3876:	str	r3, [r6, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    3878:	ldrb.w	r3, [r5, #51]	; 0x33
    387c:	ubfx	r3, r3, #6, #1
    3880:	strb.w	r3, [r6, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    3884:	movs	r2, #32
    3886:	add	r1, sp, #40	; 0x28
    3888:	mov	r0, r5
    388a:	bl	34a8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    388e:	cmp	r0, #0
    3890:	bne.n	3816 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x92>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE) || !name) {
    3892:	ldr	r3, [sp, #8]
    3894:	and.w	r3, r3, #66	; 0x42
    3898:	cmp	r3, #66	; 0x42
    389a:	bne.n	37a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    389c:	ldr	r3, [sp, #0]
    389e:	cmp	r3, #0
    38a0:	beq.n	37a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    38a2:	cmp	r4, fp
    38a4:	bcc.n	38c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x13e>
    38a6:	b.n	39f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x274>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    38a8:	cmp	r0, #32
    38aa:	bne.w	37a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    38ae:	cbnz	r4, 38ba <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x136>
      freePos.position = dir->curPosition() - 32;
    38b0:	ldr	r2, [r5, #0]
      freePos.cluster = dir->curCluster();
    38b2:	ldr	r1, [r5, #24]
    38b4:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    38b6:	subs	r2, #32
    38b8:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    38ba:	uxtb	r4, r3
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    38bc:	cmp	fp, r4
    38be:	bls.w	39f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x274>
    n = dir->read(buf, 32);
    38c2:	movs	r2, #32
    38c4:	add	r1, sp, #40	; 0x28
    38c6:	mov	r0, r5
    38c8:	bl	34a8 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    38cc:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    38ce:	cmp	r0, #0
    38d0:	bne.n	38a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x124>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    38d2:	mov	r0, r5
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    38d4:	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    38d6:	bl	4a24 <ExFatFile::addDirCluster()>
    38da:	cmp	r0, #0
    38dc:	beq.w	37a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    38e0:	str	r7, [r5, #24]
      continue;
    38e2:	b.n	38bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x138>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    38e4:	cmp	r4, fp
    38e6:	bcs.n	3834 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0xb0>
    38e8:	b.n	3830 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0xac>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    38ea:	cmp.w	r9, #0
    38ee:	bne.n	3836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0xb2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    38f0:	cmp	r4, fp
    38f2:	it	cc
    38f4:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    38f6:	cmp	r3, #133	; 0x85
    38f8:	bne.n	3808 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
        continue;
      }
      inSet = true;
    38fa:	mov.w	r9, #1
    38fe:	b.n	3844 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0xc0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    3900:	rsb	r8, r7, sl
    3904:	uxtb.w	r8, r8
    3908:	cmp.w	r8, #15
    390c:	it	cs
    390e:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    3912:	mov	r3, r8
    3914:	mov	r2, r7
    3916:	ldr	r1, [sp, #0]
    3918:	add	r0, sp, #40	; 0x28
    391a:	bl	46d8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    391e:	cmp	r0, #0
    3920:	beq.n	39c6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x242>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    3922:	add	r7, r8
    3924:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    3926:	cmp	sl, r7
    3928:	bne.w	3808 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    392c:	ldr	r3, [sp, #8]
    392e:	lsls	r0, r3, #24
    3930:	bmi.w	37a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
    3934:	tst.w	r3, #50	; 0x32
    3938:	beq.n	3946 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x1c2>
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    393a:	ldrb.w	r3, [r6, #49]	; 0x31
    393e:	tst.w	r3, #17
    3942:	bne.w	37a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
#if !READ_ONLY
  if (oflag & O_TRUNC) {
    3946:	ldr	r2, [sp, #8]
    3948:	lsls	r1, r2, #27
    394a:	mov	r3, r2
    394c:	bpl.w	3ac8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x344>
    if (!(oflag & O_WRITE)) {
    3950:	lsls	r2, r3, #30
    3952:	bpl.w	37a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3956:	ldrb.w	r3, [r6, #49]	; 0x31
    395a:	cmp	r3, #0
    395c:	beq.w	37a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3960:	ldrd	r2, r3, [r6]
    3964:	orrs	r3, r2
    3966:	beq.n	3974 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x1f0>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    3968:	movs	r2, #0
    396a:	movs	r3, #0
    396c:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    3970:	movs	r1, #0
    3972:	str	r1, [r6, #24]
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    3974:	mov	r0, r6
    3976:	bl	4b60 <ExFatFile::truncate()>
    397a:	cmp	r0, #0
    397c:	beq.w	37a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    3980:	movs	r0, #1
    3982:	b.n	37b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x2e>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    3984:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
    3988:	ldrb.w	r2, [sp, #4]
    398c:	strb.w	r2, [r6, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    3990:	lsls	r7, r3, #30
          m_flags |= FILE_FLAG_CONTIGUOUS;
    3992:	itt	mi
    3994:	ldrbmi.w	r3, [sp, #12]
    3998:	strbmi.w	r3, [r6, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    399c:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    39a0:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    39a4:	strd	r2, r3, [r6, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    39a8:	ldr	r3, [sp, #60]	; 0x3c
    39aa:	str	r3, [r6, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    39ac:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    39ae:	strd	r0, r1, [r6, #8]
        if (!name) {
    39b2:	cmp	r3, #0
    39b4:	beq.n	392c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x1a8>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    39b6:	ldrb.w	r3, [sp, #43]	; 0x2b
    39ba:	cmp	r3, sl
    39bc:	beq.n	39ca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x246>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    39be:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    39c2:	mov	r7, r9
    39c4:	b.n	3808 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    39c6:	mov	r9, r0
    39c8:	b.n	3808 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    39ca:	ldrh.w	r3, [sp, #44]	; 0x2c
    39ce:	ldr	r2, [sp, #16]
    39d0:	cmp	r3, r2
    39d2:	bne.n	39be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x23a>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    39d4:	movs	r7, #0
    39d6:	b.n	3808 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    39d8:	ldrd	r2, r3, [r5]
    39dc:	orrs	r3, r2
    39de:	beq.w	37d6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x52>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    39e2:	movs	r2, #0
    39e4:	movs	r3, #0
    39e6:	strd	r2, r3, [r5]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    39ea:	str	r4, [r5, #24]
    39ec:	b.n	37d6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x52>
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, uint8_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint16_t nameHash = 0;
    39ee:	str	r2, [sp, #16]
    39f0:	b.n	37d6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x52>
    39f2:	nop
    39f4:	.word	0x88888889
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    39f8:	ldrb.w	r3, [r5, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    39fc:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    39fe:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    3a02:	movs	r1, #0
    3a04:	mov	r0, r6
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    3a06:	add	r4, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    3a08:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    3a0c:	bl	cb88 <memset>
    3a10:	ldr	r3, [r5, #32]
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = EXFAT_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
      m_flags |= oflag & FILE_FLAG_OFLAG;
    3a12:	ldr	r5, [sp, #8]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    3a14:	str	r3, [r6, #32]
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    3a16:	ldmia.w	r4, {r0, r1, r2}
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = EXFAT_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
      m_flags |= oflag & FILE_FLAG_OFLAG;
    3a1a:	and.w	r7, r5, #7
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    3a1e:	movs	r5, #8
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = EXFAT_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
      m_flags |= oflag & FILE_FLAG_OFLAG;
    3a20:	orn	r9, r7, #125	; 0x7d
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    3a24:	strb.w	r5, [r6, #49]	; 0x31
    3a28:	add.w	r7, sl, #30
  m_dirPos = freePos;
    3a2c:	add.w	r5, r6, #36	; 0x24
    3a30:	stmia.w	r5, {r0, r1, r2}
    3a34:	uxtb	r7, r7
    3a36:	ldr	r5, [sp, #0]
    3a38:	str.w	r9, [sp]
  for (uint8_t i = 0; i < freeNeed; i++) {
    3a3c:	mov.w	r8, #0
    3a40:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    3a42:	movs	r2, #1
    3a44:	mov	r1, r4
    3a46:	bl	4140 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    3a4a:	mov	r9, r0
    3a4c:	cmp	r0, #0
    3a4e:	beq.w	37a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    3a52:	ldrsb.w	r2, [r0]
    3a56:	cmp	r2, #0
    3a58:	blt.w	37a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    3a5c:	movs	r2, #32
    3a5e:	movs	r1, #0
    3a60:	bl	cb88 <memset>
    if (i == 0) {
    3a64:	cmp.w	r8, #0
    3a68:	beq.n	3b0c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x388>
        uint16_t date, time;
        FsDateTime::callback(&date, &time);
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    3a6a:	cmp.w	r8, #1
    3a6e:	beq.n	3aea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x366>
    3a70:	rsb	r2, r8, r8, lsl #4
    3a74:	cmp	r7, #15
    3a76:	sub.w	r2, r2, #30
      m_flags |= oflag & FILE_FLAG_OFLAG;
      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    3a7a:	mov.w	r1, #193	; 0xc1
    3a7e:	mov	r0, r7
    3a80:	it	cs
    3a82:	movcs	r0, #15
    3a84:	uxtb	r2, r2
    3a86:	strb.w	r1, [r9]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    3a8a:	cbz	r0, 3aa4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x320>
    3a8c:	add.w	r3, r9, #2
    3a90:	sxth	r0, r0
    3a92:	add.w	r0, r3, r0, lsl #1
    3a96:	add	r2, r5
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    3a98:	ldrb.w	r1, [r2], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    3a9c:	strh.w	r1, [r3], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    3aa0:	cmp	r0, r3
    3aa2:	bne.n	3a98 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x314>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    3aa4:	add.w	r8, r8, #1
    3aa8:	uxtb.w	r8, r8
    3aac:	cmp	fp, r8
    3aae:	bls.n	3ae2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x35e>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    3ab0:	movs	r2, #32
    3ab2:	mov	r1, r4
    3ab4:	ldr	r0, [r6, #32]
    3ab6:	bl	41ec <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3aba:	cmp	r0, #1
    3abc:	bne.w	37a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    3ac0:	subs	r7, #15
    3ac2:	uxtb	r7, r7
    3ac4:	ldr	r0, [r6, #32]
    3ac6:	b.n	3a42 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x2be>
    3ac8:	mov	r3, r2
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    3aca:	lsls	r3, r3, #26
    3acc:	bpl.w	3980 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x1fc>
    3ad0:	ldrd	r2, r3, [r6, #16]
    3ad4:	mov	r0, r6
    3ad6:	bl	3684 <ExFatFile::seekSet(unsigned long long)>
    3ada:	cmp	r0, #0
    3adc:	bne.w	3980 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x1fc>
    3ae0:	b.n	37a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    3ae2:	mov	r0, r6
    3ae4:	bl	4924 <ExFatFile::sync()>
    3ae8:	b.n	37b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x2e>
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = EXFAT_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
      m_flags |= oflag & FILE_FLAG_OFLAG;
    3aea:	ldrb.w	r3, [sp]
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    3aee:	movs	r1, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    3af0:	movs	r2, #3
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    3af2:	strb.w	r1, [r9]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    3af6:	strb.w	r2, [r9, #1]
      m_flags = EXFAT_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
      m_flags |= oflag & FILE_FLAG_OFLAG;
    3afa:	strb.w	r3, [r6, #51]	; 0x33
    3afe:	ldrh.w	r3, [sp, #16]
      dirStream->nameLength = nameLength;
    3b02:	strb.w	sl, [r9, #3]
    3b06:	strh.w	r3, [r9, #4]
    3b0a:	b.n	3aa4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x320>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3b0c:	ldr	r3, [sp, #20]
    3b0e:	adds	r2, r3, #1
    3b10:	uxtb	r2, r2
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    3b12:	movs	r1, #133	; 0x85
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    3b14:	ldr	r3, [pc, #44]	; (3b44 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x3c0>)
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    3b16:	strb.w	r1, [r9]
      m_setCount = freeNeed - 1;
    3b1a:	strb.w	r2, [r6, #48]	; 0x30
      dirFile->setCount = m_setCount;
    3b1e:	strb.w	r2, [r9, #1]
      if (FsDateTime::callback) {
    3b22:	ldr	r2, [r3, #0]
    3b24:	cmp	r2, #0
    3b26:	beq.n	3aa4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x320>
        uint16_t date, time;
        FsDateTime::callback(&date, &time);
    3b28:	add.w	r1, sp, #26
    3b2c:	add	r0, sp, #24
    3b2e:	blx	r2
    3b30:	ldrh.w	r1, [sp, #26]
    3b34:	ldrh.w	r2, [sp, #24]
    3b38:	strh.w	r1, [r9, #8]
    3b3c:	strh.w	r2, [r9, #10]
    3b40:	b.n	3aa4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x320>
    3b42:	nop
    3b44:	.word	0x20020364

00003b48 <ExFatFile::open(ExFatFile*, char const*, unsigned char)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, uint8_t oflag) {
    3b48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3b4c:	mov	r6, r0
    3b4e:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    3b50:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, uint8_t oflag) {
    3b54:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    3b56:	movs	r0, #0
    3b58:	strb.w	r0, [sp, #73]	; 0x49
    3b5c:	strb.w	r0, [sp, #74]	; 0x4a
    3b60:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    3b64:	cbnz	r4, 3b74 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x2c>
    3b66:	mov	r9, r3
    3b68:	ldrb.w	r3, [r1, #49]	; 0x31
    3b6c:	tst.w	r3, #80	; 0x50
    3b70:	mov	r5, r1
    3b72:	bne.n	3b7c <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    3b74:	movs	r0, #0
}
    3b76:	add	sp, #84	; 0x54
    3b78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    3b7c:	ldrb	r3, [r2, #0]
    3b7e:	cmp	r3, #47	; 0x2f
    3b80:	mov	r4, r2
    3b82:	beq.n	3bec <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0xa4>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, uint8_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, uint8_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    3b84:	mov.w	r8, #1
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    3b88:	mov	r1, r4
    3b8a:	add	r3, sp, #12
    3b8c:	add	r2, sp, #16
    3b8e:	mov	r0, r6
    3b90:	bl	33c4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    3b94:	cmp	r0, #0
    3b96:	beq.n	3b74 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    3b98:	ldr	r3, [sp, #12]
    3b9a:	ldrb	r3, [r3, #0]
    3b9c:	cmp	r3, #0
    3b9e:	beq.n	3c16 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0xce>
    3ba0:	ldrb.w	r3, [sp, #16]
    3ba4:	ldr	r2, [sp, #20]
    3ba6:	str.w	r8, [sp]
    3baa:	mov	r1, r5
    3bac:	mov	r0, r6
    3bae:	bl	3784 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
    3bb2:	cmp	r0, #0
    3bb4:	beq.n	3b74 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    3bb6:	mov	r4, r6
    3bb8:	add	r7, sp, #24
    3bba:	add.w	lr, r6, #48	; 0x30
    3bbe:	ldr	r0, [r4, #0]
    3bc0:	ldr	r1, [r4, #4]
    3bc2:	ldr	r2, [r4, #8]
    3bc4:	ldr	r3, [r4, #12]
    3bc6:	mov	r5, r7
    3bc8:	stmia	r5!, {r0, r1, r2, r3}
    3bca:	adds	r4, #16
    3bcc:	cmp	r4, lr
    3bce:	mov	r7, r5
    3bd0:	bne.n	3bbe <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x76>
    3bd2:	ldr	r0, [r4, #0]
    3bd4:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    3bd6:	mov	r0, r6
    3bd8:	bl	4924 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3bdc:	movs	r3, #0
    3bde:	strb.w	r3, [r6, #49]	; 0x31
  m_flags = 0;
    3be2:	strb.w	r3, [r6, #51]	; 0x33
    3be6:	ldr	r4, [sp, #12]
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    3be8:	add	r5, sp, #24
    3bea:	b.n	3b88 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    3bec:	adds	r4, #1
    3bee:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    3bf0:	ldrb	r1, [r4, #0]
    3bf2:	cmp	r1, #47	; 0x2f
    3bf4:	beq.n	3bec <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0xa4>
      path++;
    }
    if (*path == 0) {
    3bf6:	cbz	r1, 3c2e <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0xe6>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3bf8:	movs	r2, #56	; 0x38
    3bfa:	add	r0, sp, #24
    3bfc:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    3bfe:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3c00:	bl	cb88 <memset>
  m_attributes = FILE_ATTR_ROOT;
    3c04:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3c06:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    3c08:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    3c0a:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3c0c:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3c10:	strb.w	r3, [sp, #75]	; 0x4b
    3c14:	b.n	3b84 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x3c>
    3c16:	ldrb.w	r3, [sp, #16]
    3c1a:	ldr	r2, [sp, #20]
    3c1c:	str.w	r9, [sp]
    3c20:	mov	r1, r5
    3c22:	mov	r0, r6
    3c24:	bl	3784 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    3c28:	add	sp, #84	; 0x54
    3c2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3c2e:	movs	r2, #56	; 0x38
    3c30:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    3c32:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3c34:	bl	cb88 <memset>
  m_attributes = FILE_ATTR_ROOT;
    3c38:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3c3a:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    3c3c:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3c3e:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3c42:	strb.w	r0, [r6, #51]	; 0x33
    3c46:	b.n	3b76 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x2e>

00003c48 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    3c48:	cbz	r1, 3c54 <ExFatFile::open(ExFatVolume*, char const*, int)+0xc>
    3c4a:	uxtb	r3, r3
    3c4c:	add.w	r1, r1, #1088	; 0x440
    3c50:	b.w	3b48 <ExFatFile::open(ExFatFile*, char const*, unsigned char)>
}
    3c54:	mov	r0, r1
    3c56:	bx	lr

00003c58 <FsCache::invalidate()>:
#include "ExFatVolume.h"
#include "../common/FsStructs.h"

//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    3c58:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    3c5a:	mov.w	r3, #4294967295
#include "ExFatVolume.h"
#include "../common/FsStructs.h"

//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    3c5e:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    3c60:	str	r3, [r0, #8]
    3c62:	bx	lr

00003c64 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3c64:	ldr	r3, [r0, #4]
    3c66:	cmp	r3, #0
    3c68:	beq.n	3ce2 <FsCache::get(unsigned long, unsigned char)+0x7e>
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    3c6a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c6e:	mov	r6, r1
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    3c70:	ldr	r1, [r0, #8]
    3c72:	cmp	r1, r6
    3c74:	mov	r7, r2
    3c76:	mov	r4, r0
    3c78:	beq.n	3c9a <FsCache::get(unsigned long, unsigned char)+0x36>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3c7a:	ldrb	r2, [r0, #0]
    3c7c:	lsls	r2, r2, #31
    3c7e:	bmi.n	3cae <FsCache::get(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    3c80:	lsls	r3, r7, #30
    3c82:	add.w	r5, r0, #12
    3c86:	bpl.n	3ccc <FsCache::get(unsigned long, unsigned char)+0x68>
    3c88:	movs	r3, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    3c8a:	and.w	r2, r7, #1
    3c8e:	orrs	r2, r3
    3c90:	strb	r2, [r4, #0]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    3c92:	str	r6, [r4, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;
    3c94:	mov	r0, r5
    3c96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c9a:	mov	r5, r0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    3c9c:	and.w	r2, r7, #1
    3ca0:	ldrsb.w	r3, [r5], #12
    3ca4:	orrs	r2, r3
    3ca6:	strb	r2, [r4, #0]
  return m_cacheBuffer;
    3ca8:	mov	r0, r5
    3caa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    3cae:	ldr	r2, [r3, #0]
    3cb0:	add.w	r5, r0, #12
    3cb4:	ldr.w	r8, [r2, #24]
    3cb8:	mov	r0, r3
    3cba:	mov	r2, r5
    3cbc:	blx	r8
    3cbe:	cbz	r0, 3cdc <FsCache::get(unsigned long, unsigned char)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    3cc0:	ldrb	r3, [r4, #0]
    3cc2:	bic.w	r3, r3, #1
    3cc6:	strb	r3, [r4, #0]
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    3cc8:	lsls	r3, r7, #30
    3cca:	bmi.n	3c88 <FsCache::get(unsigned long, unsigned char)+0x24>
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    3ccc:	ldr	r0, [r4, #4]
    3cce:	ldr	r3, [r0, #0]
    3cd0:	mov	r2, r5
    3cd2:	ldr	r3, [r3, #8]
    3cd4:	mov	r1, r6
    3cd6:	blx	r3
    3cd8:	cmp	r0, #0
    3cda:	bne.n	3c88 <FsCache::get(unsigned long, unsigned char)+0x24>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    3cdc:	movs	r0, #0
    3cde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ce2:	movs	r0, #0
}
    3ce4:	bx	lr
    3ce6:	nop

00003ce8 <FsCache::sync()>:
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3ce8:	ldrb	r3, [r0, #0]
    3cea:	lsls	r3, r3, #31
    3cec:	bmi.n	3cf2 <FsCache::sync()+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
    3cee:	movs	r0, #1
    3cf0:	bx	lr

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    3cf2:	push	{r4, lr}
    3cf4:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    3cf6:	ldr	r0, [r0, #4]
    3cf8:	ldr	r1, [r4, #8]
    3cfa:	ldr	r3, [r0, #0]
    3cfc:	add.w	r2, r4, #12
    3d00:	ldr	r3, [r3, #24]
    3d02:	blx	r3
    3d04:	cbz	r0, 3d10 <FsCache::sync()+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    3d06:	ldrb	r3, [r4, #0]
    3d08:	bic.w	r3, r3, #1
    3d0c:	strb	r3, [r4, #0]
    3d0e:	pop	{r4, pc}
  }
  return true;

fail:
  return false;
}
    3d10:	pop	{r4, pc}
    3d12:	nop

00003d14 <ExFatPartition::init(SdCardInterface*, unsigned char)>:
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    3d14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#include "../common/FsStructs.h"

//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    3d18:	mov.w	r3, #4294967295
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    3d1c:	movs	r5, #0
  m_blockDev = dev;
    3d1e:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    3d22:	str	r1, [r0, #4]
    3d24:	str.w	r1, [r0, #528]	; 0x210
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    3d28:	strb.w	r5, [r0, #1084]	; 0x43c
#include "ExFatVolume.h"
#include "../common/FsStructs.h"

//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    3d2c:	strb	r5, [r0, #0]
    3d2e:	strb.w	r5, [r0, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    3d32:	str	r3, [r0, #8]
    3d34:	str.w	r3, [r0, #532]	; 0x214
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3d38:	cbz	r1, 3d76 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    3d3a:	ldr	r3, [r1, #0]
    3d3c:	add.w	r8, r0, #536	; 0x218
    3d40:	mov	r6, r2
    3d42:	mov	r4, r0
    3d44:	ldr	r3, [r3, #8]
    3d46:	mov	r0, r1
    3d48:	mov	r2, r8
    3d4a:	mov	r1, r5
    3d4c:	blx	r3
    3d4e:	mov	r7, r0
    3d50:	cbz	r0, 3d76 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    3d52:	cmp	r6, #4
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    3d54:	strb.w	r5, [r4, #524]	; 0x20c
    m_sector = sector;
    3d58:	str.w	r5, [r4, #532]	; 0x214

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    3d5c:	bhi.n	3d76 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    3d5e:	cbnz	r6, 3d7e <ExFatPartition::init(SdCardInterface*, unsigned char)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    3d60:	movs	r2, #5
    3d62:	ldr	r1, [pc, #476]	; (3f40 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x22c>)
    3d64:	addw	r0, r4, #539	; 0x21b
    3d68:	bl	d29c <strncmp>
    3d6c:	cbnz	r0, 3d76 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    3d6e:	ldrb.w	r3, [r4, #644]	; 0x284
    3d72:	cmp	r3, #9
    3d74:	beq.n	3dc2 <ExFatPartition::init(SdCardInterface*, unsigned char)+0xae>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    3d76:	movs	r7, #0
}
    3d78:	mov	r0, r7
    3d7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    3d7e:	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    3d80:	add.w	r3, r4, r3, lsl #4
    3d84:	ldrb.w	r2, [r3, #982]	; 0x3d6
    3d88:	ands.w	r5, r2, #127	; 0x7f
    3d8c:	bne.n	3d76 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
    3d8e:	ldrb.w	r3, [r3, #986]	; 0x3da
    3d92:	cmp	r3, #0
    3d94:	beq.n	3d76 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    3d96:	add.w	r6, r8, r6, lsl #4
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3d9a:	ldr.w	r0, [r4, #528]	; 0x210
    3d9e:	ldr.w	r6, [r6, #438]	; 0x1b6
    3da2:	cmp	r0, #0
    3da4:	beq.n	3d76 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    3da6:	cmp	r6, #0
    3da8:	beq.n	3d60 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x4c>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    3daa:	ldr	r3, [r0, #0]
    3dac:	mov	r2, r8
    3dae:	ldr	r3, [r3, #8]
    3db0:	mov	r1, r6
    3db2:	blx	r3
    3db4:	cmp	r0, #0
    3db6:	beq.n	3d76 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    3db8:	strb.w	r5, [r4, #524]	; 0x20c
    m_sector = sector;
    3dbc:	str.w	r6, [r4, #532]	; 0x214
    3dc0:	b.n	3d60 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x4c>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    3dc2:	ldrb.w	lr, [r4, #645]	; 0x285
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3dc6:	ldr.w	r3, [r4, #624]	; 0x270
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3dca:	ldr.w	r1, [r4, #616]	; 0x268
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    3dce:	str.w	r0, [r4, #1048]	; 0x418
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3dd2:	add.w	r5, lr, #9
    3dd6:	movs	r2, #1
    3dd8:	lsls	r2, r5
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3dda:	add	r1, r6
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3ddc:	add	r6, r3
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
    3dde:	ldr.w	r3, [r4, #620]	; 0x26c
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3de2:	str.w	r2, [r4, #1076]	; 0x434
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    3de6:	mov	r5, r0
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
    3de8:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
    3dec:	subs	r0, r2, #1
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    3dee:	ldr.w	r3, [r4, #632]	; 0x278
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
    3df2:	ldr.w	r2, [r4, #628]	; 0x274
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    3df6:	strb.w	lr, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
    3dfa:	str.w	r0, [r4, #1072]	; 0x430
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3dfe:	str.w	r1, [r4, #1052]	; 0x41c
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3e02:	str.w	r6, [r4, #1060]	; 0x424
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    3e06:	mov	r8, r5
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    3e08:	mov	r9, r5
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
    3e0a:	str.w	r2, [r4, #1064]	; 0x428
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    3e0e:	str.w	r3, [r4, #1068]	; 0x42c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3e12:	ldr	r0, [r4, #4]
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    3e14:	add.w	r6, r6, r8, lsr #12
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3e18:	cmp	r0, #0
    3e1a:	beq.n	3ef6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1e2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    3e1c:	ldr	r1, [r4, #8]
    3e1e:	cmp	r6, r1
    3e20:	beq.n	3f1c <ExFatPartition::init(SdCardInterface*, unsigned char)+0x208>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3e22:	ldrb	r3, [r4, #0]
    3e24:	lsls	r3, r3, #31
    3e26:	bmi.n	3f22 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x20e>
    3e28:	add.w	sl, r4, #12
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    3e2c:	ldr	r3, [r0, #0]
    3e2e:	mov	r2, sl
    3e30:	ldr	r3, [r3, #8]
    3e32:	mov	r1, r6
    3e34:	blx	r3
    3e36:	cmp	r0, #0
    3e38:	beq.n	3ef6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1e2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    3e3a:	strb.w	r9, [r4]
    m_sector = sector;
    3e3e:	str	r6, [r4, #8]
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    3e40:	movs	r0, #0
    3e42:	ldrb.w	r3, [sl, r0]
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3e46:	lsls	r2, r3, #31
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3e48:	add.w	r1, r8, #1
        if (!(mask & cache[i])) {
    3e4c:	bmi.n	3ee6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1d2>
          if ((endAlloc - bgnAlloc) == count) {
    3e4e:	subs	r2, r1, r5
    3e50:	cmp	r2, #1
    3e52:	beq.n	3ef2 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3e54:	ldr.w	r2, [r4, #1064]	; 0x428
    3e58:	cmp	r2, r1
    3e5a:	bls.n	3f12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3e5c:	lsls	r6, r3, #30
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3e5e:	add.w	r1, r8, #2
        if (!(mask & cache[i])) {
    3e62:	bmi.n	3eea <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1d6>
          if ((endAlloc - bgnAlloc) == count) {
    3e64:	subs	r6, r1, r5
    3e66:	cmp	r6, #1
    3e68:	beq.n	3ef2 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3e6a:	cmp	r1, r2
    3e6c:	bcs.n	3f12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3e6e:	lsls	r6, r3, #29
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3e70:	add.w	r1, r8, #3
        if (!(mask & cache[i])) {
    3e74:	bmi.n	3eee <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1da>
          if ((endAlloc - bgnAlloc) == count) {
    3e76:	subs	r6, r1, r5
    3e78:	cmp	r6, #1
    3e7a:	beq.n	3ef2 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3e7c:	cmp	r2, r1
    3e7e:	bls.n	3f12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3e80:	lsls	r6, r3, #28
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3e82:	add.w	r1, r8, #4
        if (!(mask & cache[i])) {
    3e86:	bmi.n	3efe <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1ea>
          if ((endAlloc - bgnAlloc) == count) {
    3e88:	subs	r6, r1, r5
    3e8a:	cmp	r6, #1
    3e8c:	beq.n	3ef2 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3e8e:	cmp	r2, r1
    3e90:	bls.n	3f12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3e92:	lsls	r6, r3, #27
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3e94:	add.w	r1, r8, #5
        if (!(mask & cache[i])) {
    3e98:	bmi.n	3f02 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1ee>
          if ((endAlloc - bgnAlloc) == count) {
    3e9a:	subs	r6, r1, r5
    3e9c:	cmp	r6, #1
    3e9e:	beq.n	3ef2 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3ea0:	cmp	r2, r1
    3ea2:	bls.n	3f12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3ea4:	lsls	r6, r3, #26
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3ea6:	add.w	r1, r8, #6
        if (!(mask & cache[i])) {
    3eaa:	bmi.n	3f06 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1f2>
          if ((endAlloc - bgnAlloc) == count) {
    3eac:	subs	r6, r1, r5
    3eae:	cmp	r6, #1
    3eb0:	beq.n	3ef2 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3eb2:	cmp	r2, r1
    3eb4:	bls.n	3f12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3eb6:	lsls	r6, r3, #25
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3eb8:	add.w	r1, r8, #7
        if (!(mask & cache[i])) {
    3ebc:	bmi.n	3f0a <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1f6>
          if ((endAlloc - bgnAlloc) == count) {
    3ebe:	subs	r6, r1, r5
    3ec0:	cmp	r6, #1
    3ec2:	beq.n	3ef2 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3ec4:	cmp	r1, r2
    3ec6:	bcs.n	3f12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3ec8:	lsls	r3, r3, #24
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3eca:	add.w	r8, r8, #8
        if (!(mask & cache[i])) {
    3ece:	bmi.n	3f0e <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fa>
          if ((endAlloc - bgnAlloc) == count) {
    3ed0:	rsb	r3, r5, r8
    3ed4:	cmp	r3, #1
    3ed6:	beq.n	3ef2 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3ed8:	cmp	r2, r8
    3eda:	bls.n	3f12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
    3edc:	adds	r0, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    3ede:	cmp.w	r0, #512	; 0x200
    3ee2:	bne.n	3e42 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x12e>
    3ee4:	b.n	3f16 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x202>
      for (; mask; mask <<= 1) {
        endAlloc++;
    3ee6:	mov	r5, r1
    3ee8:	b.n	3e54 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x140>
    3eea:	mov	r5, r1
    3eec:	b.n	3e6a <ExFatPartition::init(SdCardInterface*, unsigned char)+0x156>
    3eee:	mov	r5, r1
    3ef0:	b.n	3e7c <ExFatPartition::init(SdCardInterface*, unsigned char)+0x168>
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    3ef2:	str.w	r5, [r4, #1048]	; 0x418
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
    3ef6:	movs	r3, #64	; 0x40
    3ef8:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    3efc:	b.n	3d78 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x64>
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3efe:	mov	r5, r1
    3f00:	b.n	3e8e <ExFatPartition::init(SdCardInterface*, unsigned char)+0x17a>
    3f02:	mov	r5, r1
    3f04:	b.n	3ea0 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x18c>
    3f06:	mov	r5, r1
    3f08:	b.n	3eb2 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x19e>
    3f0a:	mov	r5, r1
    3f0c:	b.n	3ec4 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1b0>
    3f0e:	mov	r5, r8
    3f10:	b.n	3ed8 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1c4>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3f12:	movs	r5, #0
    3f14:	mov	r8, r5
    3f16:	ldr.w	r6, [r4, #1060]	; 0x424
    3f1a:	b.n	3e12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0xfe>
    3f1c:	add.w	sl, r4, #12
    3f20:	b.n	3e40 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x12c>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    3f22:	ldr	r3, [r0, #0]
    3f24:	add.w	sl, r4, #12
    3f28:	ldr	r3, [r3, #24]
    3f2a:	mov	r2, sl
    3f2c:	blx	r3
    3f2e:	cmp	r0, #0
    3f30:	beq.n	3ef6 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1e2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    3f32:	ldrb	r3, [r4, #0]
    3f34:	ldr	r0, [r4, #4]
    3f36:	bic.w	r3, r3, #1
    3f3a:	strb	r3, [r4, #0]
    3f3c:	b.n	3e2c <ExFatPartition::init(SdCardInterface*, unsigned char)+0x118>
    3f3e:	nop
    3f40:	.word	0x00013d14

00003f44 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    3f44:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f48:	sub	sp, #12
    3f4a:	mov	r7, r0
    3f4c:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    3f4e:	str	r1, [sp, #4]
    3f50:	cmp	r1, #0
    3f52:	beq.n	400a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xc6>
    3f54:	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    3f58:	ldr.w	r3, [r7, #1064]	; 0x428
    3f5c:	cmp	r8, r3
    3f5e:	bcs.n	4000 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xbc>
    3f60:	and.w	r5, r8, #7
    3f64:	movs	r3, #1
    3f66:	lsl.w	r5, r3, r5
    3f6a:	uxtb	r5, r5
    3f6c:	ubfx	sl, r8, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    3f70:	mov	r6, r8
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    3f72:	mov	r4, r8
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    3f74:	ldr.w	r3, [r7, #1060]	; 0x424
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3f78:	ldr	r0, [r7, #4]
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    3f7a:	add.w	r3, r3, r4, lsr #12
    3f7e:	str	r3, [sp, #0]
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3f80:	cmp	r0, #0
    3f82:	beq.n	4046 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x102>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    3f84:	ldr	r1, [r7, #8]
    3f86:	cmp	r3, r1
    3f88:	beq.n	4026 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe2>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3f8a:	ldrb	r3, [r7, #0]
    3f8c:	lsls	r3, r3, #31
    3f8e:	bmi.n	402c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe8>
    3f90:	add.w	fp, r7, #12
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    3f94:	ldr	r3, [r0, #0]
    3f96:	ldr	r1, [sp, #0]
    3f98:	ldr	r3, [r3, #8]
    3f9a:	mov	r2, fp
    3f9c:	blx	r3
    3f9e:	cmp	r0, #0
    3fa0:	beq.n	4046 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x102>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    3fa2:	mov.w	r3, #0
    3fa6:	strb	r3, [r7, #0]
    m_sector = sector;
    3fa8:	ldr	r3, [sp, #0]
    3faa:	str	r3, [r7, #8]
    3fac:	ldrb.w	r1, [fp, sl]
    3fb0:	b.n	3fc8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    3fb2:	cmp	r2, r9
    3fb4:	beq.n	4010 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xcc>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    3fb6:	cmp	r8, r4
    3fb8:	beq.n	3fdc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3fba:	ldr.w	r2, [r7, #1064]	; 0x428
    3fbe:	cmp	r4, r2
    3fc0:	bcs.n	3ff4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xb0>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    3fc2:	ands.w	r5, r3, #255	; 0xff
    3fc6:	beq.n	3fe4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
        endAlloc++;
    3fc8:	adds	r4, #1
        if (!(mask & cache[i])) {
    3fca:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    3fcc:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    3fd0:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3fd4:	beq.n	3fb2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    3fd6:	cmp	r8, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3fd8:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    3fda:	bne.n	3fba <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x76>
          return 1;
    3fdc:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    3fde:	add	sp, #12
    3fe0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3fe4:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    3fe8:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    3fec:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    3ff0:	bne.n	3fac <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x68>
    3ff2:	b.n	3ff8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xb4>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    3ff4:	movs	r6, #0
    3ff6:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    3ff8:	mov.w	sl, #0
    3ffc:	movs	r5, #1
    3ffe:	b.n	3f74 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x30>
    4000:	mov.w	r8, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    4004:	mov	sl, r8
    4006:	movs	r5, #1
    4008:	b.n	3f70 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    400a:	ldr.w	r8, [r0, #1048]	; 0x418
    400e:	b.n	3f58 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x14>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    4010:	ldr	r3, [sp, #4]
    4012:	cbnz	r3, 401e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xda>
    4014:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    4018:	it	eq
    401a:	streq.w	r6, [r7, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    401e:	adds	r0, r6, #2
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    4020:	add	sp, #12
    4022:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4026:	add.w	fp, r7, #12
    402a:	b.n	3fac <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x68>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    402c:	ldr	r3, [r0, #0]
    402e:	add.w	fp, r7, #12
    4032:	ldr	r3, [r3, #24]
    4034:	mov	r2, fp
    4036:	blx	r3
    4038:	cbz	r0, 4046 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x102>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    403a:	ldrb	r3, [r7, #0]
    403c:	ldr	r0, [r7, #4]
    403e:	bic.w	r3, r3, #1
    4042:	strb	r3, [r7, #0]
    4044:	b.n	3f94 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x50>
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    4046:	movs	r0, #0
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    4048:	add	sp, #12
    404a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    404e:	nop

00004050 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4050:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    4054:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4056:	mov	r6, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4058:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    405c:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    405e:	adds	r2, r1, r2
    4060:	cmp	r2, r0
    4062:	bhi.n	40f6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa6>
    4064:	mov	r8, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4066:	ldr.w	r3, [r6, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    406a:	cmp.w	r8, #0
    406e:	bne.n	40fc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xac>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    4070:	cmp	r1, r3
      m_bitmapStart = start;
    4072:	it	cc
    4074:	strcc.w	r1, [r6, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    4078:	and.w	r4, r1, #7
    407c:	movs	r3, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    407e:	ldr.w	r2, [r6, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4082:	lsl.w	r4, r3, r4
    4086:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4088:	add.w	sl, r2, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    408c:	ubfx	r9, r1, #3, #9
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4090:	ldr	r0, [r6, #4]
  mask = 1 << (start & 7);
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    4092:	add.w	r7, sl, #1
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4096:	cbz	r0, 40f6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4098:	ldr	r1, [r6, #8]
    409a:	cmp	sl, r1
    409c:	beq.n	4116 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc6>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    409e:	ldrb	r3, [r6, #0]
    40a0:	lsls	r3, r3, #31
    40a2:	bmi.n	4122 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xd2>
    40a4:	add.w	fp, r6, #12
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    40a8:	ldr	r3, [r0, #0]
    40aa:	mov	r2, fp
    40ac:	ldr	r3, [r3, #8]
    40ae:	mov	r1, sl
    40b0:	blx	r3
    40b2:	cbz	r0, 40f6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa6>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    40b4:	str.w	sl, [r6, #8]
    40b8:	movs	r3, #1
    40ba:	add.w	r1, fp, r9
  }
  m_status |= option & CACHE_STATUS_MASK;
    40be:	strb	r3, [r6, #0]
    40c0:	add.w	fp, fp, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    40c4:	ldrb	r2, [r1, #0]
    40c6:	tst	r2, r4
    40c8:	ite	ne
    40ca:	movne	r3, #1
    40cc:	moveq	r3, #0
    40ce:	cmp	r3, r8
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    40d0:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    40d4:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    40d8:	beq.n	40f6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    40da:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    40dc:	strb	r2, [r1, #0]
        if (--count == 0) {
    40de:	beq.n	4110 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    40e0:	ands.w	r4, r4, #255	; 0xff
    40e4:	bne.n	40c4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x74>
    40e6:	adds	r1, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    40e8:	cmp	fp, r1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    40ea:	mov	r9, r4
    40ec:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    40f0:	bne.n	40c4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x74>
  mask = 1 << (start & 7);
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    40f2:	mov	sl, r7
    40f4:	b.n	4090 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    40f6:	movs	r0, #0
}
    40f8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    40fc:	cmp	r1, r3
    40fe:	bhi.n	4078 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    4100:	cmp	r2, r3
    4102:	bls.n	4078 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4104:	cmp	r2, r0
    4106:	it	cs
    4108:	movcs	r2, #0
    410a:	str.w	r2, [r6, #1048]	; 0x418
    410e:	b.n	4078 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    4110:	movs	r0, #1
    4112:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4116:	mov	fp, r6
    4118:	ldrb.w	r3, [fp], #12
    411c:	orr.w	r3, r3, #1
    4120:	b.n	40ba <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x6a>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4122:	ldr	r3, [r0, #0]
    4124:	add.w	fp, r6, #12
    4128:	ldr	r3, [r3, #24]
    412a:	mov	r2, fp
    412c:	blx	r3
    412e:	cmp	r0, #0
    4130:	beq.n	40f6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4132:	ldrb	r3, [r6, #0]
    4134:	ldr	r0, [r6, #4]
    4136:	bic.w	r3, r3, #1
    413a:	strb	r3, [r6, #0]
    413c:	b.n	40a8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    413e:	nop

00004140 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4140:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    4144:	ldmia.w	r1, {r3, r5}
    4148:	ldr.w	r6, [r0, #1072]	; 0x430
    414c:	ldrb.w	r4, [r0, #1085]	; 0x43d
    4150:	ldr.w	r7, [r0, #1060]	; 0x424
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4154:	ldr.w	lr, [r0, #528]	; 0x210
  return n;
}
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    4158:	ands	r5, r6
    415a:	subs	r3, #2
    415c:	add.w	r6, r7, r5, lsr #9
    4160:	lsls	r3, r4
    4162:	adds	r4, r6, r3
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4164:	cmp.w	lr, #0
    4168:	beq.n	41e4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0xa4>
    416a:	mov	r8, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    416c:	ldr.w	r1, [r0, #532]	; 0x214
    4170:	cmp	r4, r1
    4172:	mov	r5, r2
    4174:	mov	r6, r0
    4176:	beq.n	41a6 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x66>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4178:	ldrb.w	r3, [r0, #524]	; 0x20c
    417c:	lsls	r2, r3, #31
    417e:	bmi.n	41b0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x70>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    4180:	lsls	r3, r5, #30
    4182:	add.w	r7, r0, #536	; 0x218
    4186:	bpl.n	41d2 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x92>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    4188:	str.w	r4, [r6, #532]	; 0x214
    418c:	movs	r2, #0
  }
  m_status |= option & CACHE_STATUS_MASK;
    418e:	and.w	r5, r5, #1
    4192:	orrs	r5, r2
    4194:	strb.w	r5, [r6, #524]	; 0x20c
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    4198:	ldr.w	r0, [r8, #4]
    419c:	ubfx	r0, r0, #0, #9
    41a0:	add	r0, r7
    41a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41a6:	ldrsb.w	r2, [r0, #524]	; 0x20c
    41aa:	add.w	r7, r0, #536	; 0x218
    41ae:	b.n	418e <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x4e>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    41b0:	ldr.w	r3, [lr]
    41b4:	add.w	r7, r0, #536	; 0x218
    41b8:	ldr	r3, [r3, #24]
    41ba:	mov	r0, lr
    41bc:	mov	r2, r7
    41be:	blx	r3
    41c0:	cbz	r0, 41e4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    41c2:	ldrb.w	r3, [r6, #524]	; 0x20c
    41c6:	bic.w	r3, r3, #1
    41ca:	strb.w	r3, [r6, #524]	; 0x20c
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    41ce:	lsls	r3, r5, #30
    41d0:	bmi.n	4188 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x48>
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    41d2:	ldr.w	r0, [r6, #528]	; 0x210
    41d6:	ldr	r3, [r0, #0]
    41d8:	mov	r2, r7
    41da:	ldr	r3, [r3, #8]
    41dc:	mov	r1, r4
    41de:	blx	r3
    41e0:	cmp	r0, #0
    41e2:	bne.n	4188 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x48>
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    41e4:	movs	r0, #0
}
    41e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41ea:	nop

000041ec <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    41ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    41f0:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    41f2:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    41f4:	adds	r3, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    41f6:	ldr.w	r1, [r0, #1072]	; 0x430
  pos->position += offset;
    41fa:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    41fc:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4200:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4202:	adds	r3, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4204:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4206:	uxtb	r3, r3
    4208:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    420c:	mov	r7, r0
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    420e:	movs	r6, #0
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4210:	cbz	r4, 4222 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
    if (pos->isContiguous) {
    4212:	ldrb	r3, [r5, #8]
    4214:	cbz	r3, 4228 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3c>
      pos->cluster++;
    4216:	ldr	r3, [r5, #0]
    4218:	adds	r3, #1
    421a:	str	r3, [r5, #0]
    421c:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    421e:	cmp	r4, #0
    4220:	bne.n	4212 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x26>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    4222:	movs	r0, #1
    4224:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4228:	ldr.w	r3, [r7, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    422c:	ldr.w	r8, [r5]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4230:	adds	r3, #1
    4232:	cmp	r8, r3
    4234:	bls.n	423e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x52>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4236:	mov.w	r0, #4294967295
    423a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    423e:	ldr.w	r3, [r7, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4242:	ldr.w	r0, [r7, #528]	; 0x210

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4246:	add.w	r9, r3, r8, lsr #7
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    424a:	cmp	r0, #0
    424c:	beq.n	4236 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    424e:	ldr.w	r1, [r7, #532]	; 0x214
    4252:	cmp	r9, r1
    4254:	beq.n	428c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0xa0>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4256:	ldrb.w	r3, [r7, #524]	; 0x20c
    425a:	lsls	r3, r3, #31
    425c:	bmi.n	4292 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0xa6>
    425e:	add.w	sl, r7, #536	; 0x218
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4262:	ldr	r3, [r0, #0]
    4264:	mov	r2, sl
    4266:	ldr	r3, [r3, #8]
    4268:	mov	r1, r9
    426a:	blx	r3
    426c:	cmp	r0, #0
    426e:	beq.n	4236 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4270:	strb.w	r6, [r7, #524]	; 0x20c
    m_sector = sector;
    4274:	str.w	r9, [r7, #532]	; 0x214
    4278:	mov.w	r8, r8, lsl #2
    427c:	ubfx	r8, r8, #0, #9
    4280:	ldr.w	r3, [sl, r8]
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    4284:	adds	r2, r3, #1
    4286:	beq.n	42b4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0xc8>
    return 0;
  }
  *value = next;
    4288:	str	r3, [r5, #0]
    428a:	b.n	421c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x30>
    428c:	add.w	sl, r7, #536	; 0x218
    4290:	b.n	4278 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x8c>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4292:	ldr	r3, [r0, #0]
    4294:	add.w	sl, r7, #536	; 0x218
    4298:	ldr	r3, [r3, #24]
    429a:	mov	r2, sl
    429c:	blx	r3
    429e:	cmp	r0, #0
    42a0:	beq.n	4236 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    42a2:	ldrb.w	r3, [r7, #524]	; 0x20c
    42a6:	ldr.w	r0, [r7, #528]	; 0x210
    42aa:	bic.w	r3, r3, #1
    42ae:	strb.w	r3, [r7, #524]	; 0x20c
    42b2:	b.n	4262 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x76>
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    42b4:	movs	r0, #0
        return status;
      }
    }
  }
  return 1;
}
    42b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42ba:	nop

000042bc <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    42bc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    42c0:	ldr.w	r3, [r0, #1064]	; 0x428
    42c4:	adds	r3, #1
    42c6:	cmp	r3, r1
    42c8:	bcs.n	42d0 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    42ca:	movs	r0, #255	; 0xff
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    42cc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    42d0:	ldr.w	r7, [r0, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    42d4:	ldr.w	r3, [r0, #528]	; 0x210

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    42d8:	add.w	r7, r7, r1, lsr #7
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    42dc:	cmp	r3, #0
    42de:	beq.n	42ca <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    42e0:	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    42e2:	ldr.w	r1, [r0, #532]	; 0x214
    42e6:	cmp	r7, r1
    42e8:	mov	r6, r2
    42ea:	mov	r4, r0
    42ec:	beq.n	432c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x70>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    42ee:	ldrb.w	r2, [r0, #524]	; 0x20c
    42f2:	lsls	r0, r2, #31
    42f4:	bmi.n	4332 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x76>
    42f6:	add.w	r8, r4, #536	; 0x218
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    42fa:	ldr	r2, [r3, #0]
    42fc:	mov	r0, r3
    42fe:	mov	r1, r7
    4300:	ldr	r3, [r2, #8]
    4302:	mov	r2, r8
    4304:	blx	r3
    4306:	cmp	r0, #0
    4308:	beq.n	42ca <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    430a:	movs	r3, #0
    m_sector = sector;
    430c:	str.w	r7, [r4, #532]	; 0x214
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4310:	strb.w	r3, [r4, #524]	; 0x20c
    4314:	lsls	r1, r5, #2
    4316:	ubfx	r1, r1, #0, #9
    431a:	ldr.w	r3, [r8, r1]
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    431e:	adds	r2, r3, #1
    return 0;
  }
  *value = next;
  return 1;
    4320:	itte	ne
    4322:	movne	r0, #1
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
    4324:	strne	r3, [r6, #0]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    4326:	moveq	r0, #0
    4328:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    432c:	add.w	r8, r0, #536	; 0x218
    4330:	b.n	4314 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x58>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4332:	ldr	r2, [r3, #0]
    4334:	add.w	r8, r4, #536	; 0x218
    4338:	ldr.w	r9, [r2, #24]
    433c:	mov	r0, r3
    433e:	mov	r2, r8
    4340:	blx	r9
    4342:	cmp	r0, #0
    4344:	beq.n	42ca <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4346:	ldrb.w	r2, [r4, #524]	; 0x20c
    434a:	ldr.w	r3, [r4, #528]	; 0x210
    434e:	bic.w	r2, r2, #1
    4352:	strb.w	r2, [r4, #524]	; 0x20c
    4356:	b.n	42fa <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>

00004358 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4358:	cmp	r1, #1
    435a:	bls.n	43ea <ExFatPartition::fatPut(unsigned long, unsigned long)+0x92>
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    435c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4360:	ldr.w	r3, [r0, #1064]	; 0x428
    4364:	adds	r3, #1
    4366:	cmp	r1, r3
    4368:	bls.n	4370 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    436a:	movs	r0, #0
}
    436c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4370:	ldr.w	r7, [r0, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4374:	ldr.w	r3, [r0, #528]	; 0x210
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4378:	add.w	r7, r7, r1, lsr #7
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    437c:	cmp	r3, #0
    437e:	beq.n	436a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
    4380:	mov	r4, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4382:	ldr.w	r1, [r0, #532]	; 0x214
    4386:	cmp	r7, r1
    4388:	mov	r6, r2
    438a:	mov	r5, r0
    438c:	beq.n	43ee <ExFatPartition::fatPut(unsigned long, unsigned long)+0x96>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    438e:	ldrb.w	r2, [r0, #524]	; 0x20c
    4392:	lsls	r2, r2, #31
    4394:	bmi.n	43c4 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x6c>
    4396:	add.w	r8, r0, #536	; 0x218
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    439a:	ldr	r2, [r3, #0]
    439c:	mov	r0, r3
    439e:	mov	r1, r7
    43a0:	ldr	r3, [r2, #8]
    43a2:	mov	r2, r8
    43a4:	blx	r3
    43a6:	cmp	r0, #0
    43a8:	beq.n	436a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    43aa:	str.w	r7, [r5, #532]	; 0x214
    43ae:	movs	r3, #1
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    43b0:	lsls	r1, r4, #2
    43b2:	ubfx	r1, r1, #0, #9
  }
  m_status |= option & CACHE_STATUS_MASK;
    43b6:	strb.w	r3, [r5, #524]	; 0x20c
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    43ba:	movs	r0, #1
    43bc:	str.w	r6, [r8, r1]
    43c0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    43c4:	ldr	r2, [r3, #0]
    43c6:	add.w	r8, r0, #536	; 0x218
    43ca:	ldr.w	r9, [r2, #24]
    43ce:	mov	r0, r3
    43d0:	mov	r2, r8
    43d2:	blx	r9
    43d4:	cmp	r0, #0
    43d6:	beq.n	436a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    43d8:	ldrb.w	r2, [r5, #524]	; 0x20c
    43dc:	ldr.w	r3, [r5, #528]	; 0x210
    43e0:	bic.w	r2, r2, #1
    43e4:	strb.w	r2, [r5, #524]	; 0x20c
    43e8:	b.n	439a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x42>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    43ea:	movs	r0, #0
}
    43ec:	bx	lr
    43ee:	ldrb.w	r3, [r0, #524]	; 0x20c
    43f2:	add.w	r8, r0, #536	; 0x218
    43f6:	orr.w	r3, r3, #1
    43fa:	b.n	43b0 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x58>

000043fc <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    43fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4400:	mov	r5, r1
    4402:	sub	sp, #12
    4404:	mov	r6, r0
  uint32_t next;
  uint32_t start = cluster;
    4406:	mov	r7, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4408:	ldr.w	r3, [r6, #1064]	; 0x428
    440c:	adds	r3, #1
    440e:	cmp	r5, r3
    4410:	bls.n	441a <ExFatPartition::freeChain(unsigned long)+0x1e>
  } while (status);

  return true;

 fail:
  return false;
    4412:	movs	r0, #0
}
    4414:	add	sp, #12
    4416:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    441a:	ldr.w	r3, [r6, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    441e:	ldr.w	r0, [r6, #528]	; 0x210

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4422:	lsrs	r4, r5, #7
    4424:	add.w	r9, r4, r3
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4428:	cmp	r0, #0
    442a:	beq.n	4412 <ExFatPartition::freeChain(unsigned long)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    442c:	ldr.w	r1, [r6, #532]	; 0x214
    4430:	cmp	r9, r1
    4432:	beq.w	45c0 <ExFatPartition::freeChain(unsigned long)+0x1c4>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4436:	ldrb.w	r3, [r6, #524]	; 0x20c
    443a:	lsls	r3, r3, #31
    443c:	bmi.w	45c6 <ExFatPartition::freeChain(unsigned long)+0x1ca>
    4440:	add.w	fp, r6, #536	; 0x218
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4444:	ldr	r3, [r0, #0]
    4446:	mov	r2, fp
    4448:	ldr	r3, [r3, #8]
    444a:	mov	r1, r9
    444c:	blx	r3
    444e:	cmp	r0, #0
    4450:	beq.n	4412 <ExFatPartition::freeChain(unsigned long)+0x16>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4452:	movs	r3, #0
    m_sector = sector;
    4454:	str.w	r9, [r6, #532]	; 0x214
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4458:	strb.w	r3, [r6, #524]	; 0x20c

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    445c:	lsls	r3, r5, #2
    445e:	ubfx	r3, r3, #0, #9
    4462:	add.w	sl, fp, r3
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4466:	ldr.w	r3, [fp, r3]

  if (next == EXFAT_EOC) {
    446a:	adds	r1, r3, #1
    446c:	itet	ne
    446e:	movne	r8, r3
    4470:	moveq	r3, #0
    4472:	movne	r3, #1
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4474:	cmp	r5, #1
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    4476:	str	r3, [sp, #4]
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4478:	bls.n	4412 <ExFatPartition::freeChain(unsigned long)+0x16>
    447a:	ldr.w	r3, [r6, #1064]	; 0x428
    447e:	adds	r3, #1
    4480:	cmp	r5, r3
    4482:	bhi.n	4412 <ExFatPartition::freeChain(unsigned long)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4484:	ldr.w	r3, [r6, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4488:	ldr.w	r0, [r6, #528]	; 0x210
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    448c:	add	r4, r3
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    448e:	cmp	r0, #0
    4490:	beq.n	4412 <ExFatPartition::freeChain(unsigned long)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4492:	cmp	r9, r4
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4494:	ldrb.w	r3, [r6, #524]	; 0x20c
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4498:	beq.n	456e <ExFatPartition::freeChain(unsigned long)+0x172>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    449a:	lsls	r2, r3, #31
    449c:	bmi.n	4574 <ExFatPartition::freeChain(unsigned long)+0x178>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    449e:	ldr	r3, [r0, #0]
    44a0:	mov	r2, fp
    44a2:	ldr	r3, [r3, #8]
    44a4:	mov	r1, r4
    44a6:	blx	r3
    44a8:	cmp	r0, #0
    44aa:	beq.n	4412 <ExFatPartition::freeChain(unsigned long)+0x16>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    44ac:	str.w	r4, [r6, #532]	; 0x214
    44b0:	movs	r3, #1
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    44b2:	adds	r5, #1
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    44b4:	movs	r2, #0
    44b6:	cmp	r5, r8
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    44b8:	strb.w	r3, [r6, #524]	; 0x20c
    44bc:	str.w	r2, [sl]
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    44c0:	bne.n	44c8 <ExFatPartition::freeChain(unsigned long)+0xcc>
    44c2:	ldr	r3, [sp, #4]
    44c4:	cmp	r3, #0
    44c6:	bne.n	456a <ExFatPartition::freeChain(unsigned long)+0x16e>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    44c8:	subs	r5, r5, r7
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    44ca:	ldr.w	r3, [r6, #1064]	; 0x428
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    44ce:	subs	r7, #2
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    44d0:	adds	r2, r5, r7
    44d2:	cmp	r2, r3
    44d4:	bhi.n	4412 <ExFatPartition::freeChain(unsigned long)+0x16>
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    44d6:	ldr.w	r3, [r6, #1048]	; 0x418
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    44da:	and.w	r4, r7, #7
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    44de:	cmp	r7, r3
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    44e0:	mov.w	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    44e4:	ldr.w	r3, [r6, #1060]	; 0x424
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    44e8:	it	cc
    44ea:	strcc.w	r7, [r6, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    44ee:	lsl.w	r4, r2, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    44f2:	add.w	r9, r3, r7, lsr #12
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    44f6:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    44f8:	ubfx	r7, r7, #3, #9
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    44fc:	ldr	r0, [r6, #4]
  mask = 1 << (start & 7);
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    44fe:	add.w	sl, r9, #1
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4502:	cmp	r0, #0
    4504:	beq.n	4412 <ExFatPartition::freeChain(unsigned long)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4506:	ldr	r1, [r6, #8]
    4508:	cmp	r9, r1
    450a:	beq.n	4596 <ExFatPartition::freeChain(unsigned long)+0x19a>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    450c:	ldrb	r3, [r6, #0]
    450e:	lsls	r3, r3, #31
    4510:	bmi.n	45a2 <ExFatPartition::freeChain(unsigned long)+0x1a6>
    4512:	add.w	fp, r6, #12
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4516:	ldr	r3, [r0, #0]
    4518:	mov	r2, fp
    451a:	ldr	r3, [r3, #8]
    451c:	mov	r1, r9
    451e:	blx	r3
    4520:	cmp	r0, #0
    4522:	beq.w	4412 <ExFatPartition::freeChain(unsigned long)+0x16>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    4526:	str.w	r9, [r6, #8]
    452a:	movs	r3, #1
    452c:	add.w	r1, fp, r7
  }
  m_status |= option & CACHE_STATUS_MASK;
    4530:	strb	r3, [r6, #0]
    4532:	add.w	fp, fp, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    4536:	ldrb	r3, [r1, #0]
    4538:	tst	r3, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    453a:	eor.w	r0, r3, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    453e:	mov.w	r2, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    4542:	beq.w	4412 <ExFatPartition::freeChain(unsigned long)+0x16>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    4546:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4548:	strb	r0, [r1, #0]
        if (--count == 0) {
    454a:	beq.n	4562 <ExFatPartition::freeChain(unsigned long)+0x166>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    454c:	ands.w	r4, r2, #255	; 0xff
    4550:	bne.n	4536 <ExFatPartition::freeChain(unsigned long)+0x13a>
    4552:	adds	r1, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4554:	cmp	r1, fp
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4556:	mov	r7, r4
    4558:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    455c:	bne.n	4536 <ExFatPartition::freeChain(unsigned long)+0x13a>
  mask = 1 << (start & 7);
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    455e:	mov	r9, sl
    4560:	b.n	44fc <ExFatPartition::freeChain(unsigned long)+0x100>
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    4562:	ldr	r3, [sp, #4]
    4564:	cmp	r3, #0
    4566:	beq.n	45ea <ExFatPartition::freeChain(unsigned long)+0x1ee>
    4568:	mov	r7, r8
    456a:	mov	r5, r8
    456c:	b.n	4408 <ExFatPartition::freeChain(unsigned long)+0xc>
    456e:	orr.w	r3, r3, #1
    4572:	b.n	44b2 <ExFatPartition::freeChain(unsigned long)+0xb6>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4574:	ldr	r3, [r0, #0]
    4576:	mov	r1, r9
    4578:	ldr	r3, [r3, #24]
    457a:	mov	r2, fp
    457c:	blx	r3
    457e:	cmp	r0, #0
    4580:	beq.w	4412 <ExFatPartition::freeChain(unsigned long)+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4584:	ldrb.w	r3, [r6, #524]	; 0x20c
    4588:	ldr.w	r0, [r6, #528]	; 0x210
    458c:	bic.w	r3, r3, #1
    4590:	strb.w	r3, [r6, #524]	; 0x20c
    4594:	b.n	449e <ExFatPartition::freeChain(unsigned long)+0xa2>
    4596:	mov	fp, r6
    4598:	ldrb.w	r3, [fp], #12
    459c:	orr.w	r3, r3, #1
    45a0:	b.n	452c <ExFatPartition::freeChain(unsigned long)+0x130>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    45a2:	ldr	r3, [r0, #0]
    45a4:	add.w	fp, r6, #12
    45a8:	ldr	r3, [r3, #24]
    45aa:	mov	r2, fp
    45ac:	blx	r3
    45ae:	cmp	r0, #0
    45b0:	beq.w	4412 <ExFatPartition::freeChain(unsigned long)+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    45b4:	ldrb	r3, [r6, #0]
    45b6:	ldr	r0, [r6, #4]
    45b8:	bic.w	r3, r3, #1
    45bc:	strb	r3, [r6, #0]
    45be:	b.n	4516 <ExFatPartition::freeChain(unsigned long)+0x11a>
    45c0:	add.w	fp, r6, #536	; 0x218
    45c4:	b.n	445c <ExFatPartition::freeChain(unsigned long)+0x60>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    45c6:	ldr	r3, [r0, #0]
    45c8:	add.w	fp, r6, #536	; 0x218
    45cc:	ldr	r3, [r3, #24]
    45ce:	mov	r2, fp
    45d0:	blx	r3
    45d2:	cmp	r0, #0
    45d4:	beq.w	4412 <ExFatPartition::freeChain(unsigned long)+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    45d8:	ldrb.w	r3, [r6, #524]	; 0x20c
    45dc:	ldr.w	r0, [r6, #528]	; 0x210
    45e0:	bic.w	r3, r3, #1
    45e4:	strb.w	r3, [r6, #524]	; 0x20c
    45e8:	b.n	4444 <ExFatPartition::freeChain(unsigned long)+0x48>
      start = next;
    }
    cluster = next;
  } while (status);

  return true;
    45ea:	movs	r0, #1

 fail:
  return false;
}
    45ec:	add	sp, #12
    45ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45f2:	nop

000045f4 <ExFatPartition::rootLength()>:
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    45f4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
    45f8:	mov.w	r8, #0
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    45fc:	ldr.w	r4, [r0, #1068]	; 0x42c
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4600:	mov	r6, r0
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4602:	mov	r7, r8
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4604:	ldr.w	r3, [r6, #1064]	; 0x428
    4608:	adds	r3, #1
    460a:	cmp	r3, r4
    460c:	bcs.n	4620 <ExFatPartition::rootLength()+0x2c>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    460e:	movs	r3, #0
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
  return nc << bytesPerClusterShift();
    4610:	ldrb.w	r0, [r6, #1085]	; 0x43d
    4614:	adds	r0, #9
    4616:	uxtb	r0, r0
    4618:	lsl.w	r0, r3, r0
}
    461c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4620:	ldr.w	r5, [r6, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4624:	ldr.w	r0, [r6, #528]	; 0x210

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4628:	add.w	r5, r5, r4, lsr #7
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    462c:	cmp	r0, #0
    462e:	beq.n	460e <ExFatPartition::rootLength()+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4630:	ldr.w	r1, [r6, #532]	; 0x214
    4634:	cmp	r5, r1
    4636:	beq.n	466e <ExFatPartition::rootLength()+0x7a>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4638:	ldrb.w	r3, [r6, #524]	; 0x20c
    463c:	lsls	r2, r3, #31
    463e:	bmi.n	4674 <ExFatPartition::rootLength()+0x80>
    4640:	add.w	r9, r6, #536	; 0x218
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4644:	ldr	r3, [r0, #0]
    4646:	mov	r2, r9
    4648:	ldr	r3, [r3, #8]
    464a:	mov	r1, r5
    464c:	blx	r3
    464e:	cmp	r0, #0
    4650:	beq.n	460e <ExFatPartition::rootLength()+0x1a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4652:	strb.w	r7, [r6, #524]	; 0x20c
    m_sector = sector;
    4656:	str.w	r5, [r6, #532]	; 0x214

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    465a:	lsls	r4, r4, #2
    465c:	ubfx	r4, r4, #0, #9
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4660:	ldr.w	r4, [r9, r4]

  if (next == EXFAT_EOC) {
    4664:	adds	r3, r4, #1
    4666:	beq.n	4696 <ExFatPartition::rootLength()+0xa2>
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    4668:	add.w	r8, r8, #1
    466c:	b.n	4604 <ExFatPartition::rootLength()+0x10>
    466e:	add.w	r9, r6, #536	; 0x218
    4672:	b.n	465a <ExFatPartition::rootLength()+0x66>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4674:	ldr	r3, [r0, #0]
    4676:	add.w	r9, r6, #536	; 0x218
    467a:	ldr	r3, [r3, #24]
    467c:	mov	r2, r9
    467e:	blx	r3
    4680:	cmp	r0, #0
    4682:	beq.n	460e <ExFatPartition::rootLength()+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4684:	ldrb.w	r3, [r6, #524]	; 0x20c
    4688:	ldr.w	r0, [r6, #528]	; 0x210
    468c:	bic.w	r3, r3, #1
    4690:	strb.w	r3, [r6, #524]	; 0x20c
    4694:	b.n	4644 <ExFatPartition::rootLength()+0x50>
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    4696:	add.w	r3, r8, #1
    469a:	b.n	4610 <ExFatPartition::rootLength()+0x1c>

0000469c <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    469c:	cbz	r1, 46d4 <exFatHashName(char const*, unsigned int, unsigned short)+0x38>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    469e:	push	{r4, r5, r6}
    46a0:	add	r1, r0
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    46a2:	ldrb.w	r4, [r0], #1
    if ('a' <= c && c <= 'z') {
      c -= 'a' - 'A';
    46a6:	sub.w	r5, r4, #32
    46aa:	lsls	r3, r2, #15
    46ac:	uxtb	r5, r5
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
    46ae:	sub.w	r6, r4, #97	; 0x61
      c -= 'a' - 'A';
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    46b2:	cmp	r6, #25
    46b4:	it	ls
    46b6:	movls	r4, r5
    46b8:	orr.w	r2, r3, r2, lsr #1
    46bc:	uxtah	r2, r4, r2
    46c0:	uxth	r2, r2
    46c2:	lsls	r3, r2, #15
    46c4:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    46c8:	cmp	r1, r0
    46ca:	uxth	r2, r2
    46cc:	bne.n	46a2 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    46ce:	mov	r0, r2
    46d0:	pop	{r4, r5, r6}
    46d2:	bx	lr
    46d4:	mov	r0, r2
    46d6:	bx	lr

000046d8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    46d8:	cbz	r3, 472c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    46da:	push	{r4, r5, r6}
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    46dc:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    46de:	cmp	r4, #126	; 0x7e
    46e0:	bhi.n	4720 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    46e2:	add	r3, r2
    46e4:	adds	r5, r1, r3
    46e6:	add	r2, r1
    46e8:	adds	r0, #2
    46ea:	ldrb.w	r3, [r2], #1
    46ee:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    46f0:	sub.w	r1, r3, #97	; 0x61
    46f4:	cmp	r1, #25
    46f6:	sub.w	r1, r4, #97	; 0x61
    46fa:	ite	ls
    46fc:	movls	r6, #32
    46fe:	movhi	r6, #0
    4700:	cmp	r1, #25
    4702:	ite	ls
    4704:	movls	r1, #32
    4706:	movhi	r1, #0
    4708:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    470a:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    470c:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    470e:	uxtb	r4, r4
    4710:	cmp	r4, r3
    4712:	bne.n	4720 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4714:	cmp	r5, r2
    4716:	beq.n	4726 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    4718:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    471c:	cmp	r4, #126	; 0x7e
    471e:	bls.n	46ea <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    4720:	movs	r0, #0
    }
  }
  return true;
}
    4722:	pop	{r4, r5, r6}
    4724:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4726:	movs	r0, #1
}
    4728:	pop	{r4, r5, r6}
    472a:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    472c:	movs	r0, #1
}
    472e:	bx	lr

00004730 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4730:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    4732:	push	{r3, r4, r5, r6, r7, lr}
    4734:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4736:	ldr	r0, [r0, #32]
    4738:	cbz	r1, 473c <ExFatFile::addCluster()+0xc>
    473a:	adds	r1, #1
    473c:	movs	r2, #1
    473e:	bl	3f44 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4742:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4744:	mov	r6, r0
  if (find < 2) {
    4746:	bls.n	47a8 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    4748:	movs	r3, #1
    474a:	mov	r1, r0
    474c:	mov	r2, r3
    474e:	ldr	r0, [r4, #32]
    4750:	bl	4050 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4754:	mov	r7, r0
    4756:	cbz	r0, 47a8 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4758:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    475a:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    475e:	cbz	r0, 47ae <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4760:	lsls	r2, r3, #25
    4762:	bpl.n	478c <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    4764:	adds	r2, r0, #1
    4766:	cmp	r6, r2
    4768:	beq.n	47b6 <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    476a:	bic.w	r2, r3, #64	; 0x40
    476e:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4772:	ldr	r3, [r4, #28]
    4774:	b.n	4782 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    4776:	ldr	r0, [r4, #32]
    4778:	bl	4358 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    477c:	cbz	r0, 47a8 <ExFatFile::addCluster()+0x78>
    477e:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4780:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    4782:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4784:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    4786:	mov	r1, r3
    4788:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    478a:	bcc.n	4776 <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    478c:	mov.w	r2, #4294967295
    4790:	mov	r1, r6
    4792:	ldr	r0, [r4, #32]
    4794:	bl	4358 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4798:	cbz	r0, 47a8 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    479a:	ldr	r1, [r4, #24]
    479c:	cbz	r1, 47b6 <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    479e:	mov	r2, r6
    47a0:	ldr	r0, [r4, #32]
    47a2:	bl	4358 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    47a6:	cbnz	r0, 47b6 <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    47a8:	movs	r7, #0
}
    47aa:	mov	r0, r7
    47ac:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    47ae:	orr.w	r3, r3, #64	; 0x40
    47b2:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    47b6:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    47b8:	mov	r0, r7
    47ba:	pop	{r3, r4, r5, r6, r7, pc}

000047bc <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    47bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    47c0:	add.w	sl, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    47c4:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    47c6:	ldmia.w	sl, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    47ca:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    47cc:	add.w	r8, sp, #12
    47d0:	stmia.w	r8, {r0, r1, r2}
    47d4:	movs	r7, #0
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    47d6:	ldr.w	fp, [pc, #328]	; 4920 <ExFatFile::syncDir()+0x164>
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    47da:	mov	r9, r7
//-----------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    47dc:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    47de:	movs	r2, #0
    47e0:	mov	r1, r8
    47e2:	ldr	r0, [r6, #32]
    47e4:	bl	4140 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    47e8:	uxtb	r3, r7
    if (!cache) {
    47ea:	mov	r5, r0
    47ec:	cbz	r0, 47fc <ExFatFile::syncDir()+0x40>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    47ee:	ldrb	r2, [r0, #0]
    47f0:	cmp	r2, #192	; 0xc0
    47f2:	beq.n	48a6 <ExFatFile::syncDir()+0xea>
    47f4:	cmp	r2, #193	; 0xc1
    47f6:	beq.n	4854 <ExFatFile::syncDir()+0x98>
    47f8:	cmp	r2, #133	; 0x85
    47fa:	beq.n	4810 <ExFatFile::syncDir()+0x54>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    47fc:	ldrb.w	r3, [r6, #50]	; 0x32
    4800:	orr.w	r3, r3, #1
    4804:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    4808:	movs	r0, #0
}
    480a:	add	sp, #28
    480c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4810:	ldrb.w	r1, [r6, #49]	; 0x31
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    4814:	ldr.w	r2, [fp]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    4818:	ldrb.w	r9, [r0, #1]
    481c:	and.w	r1, r1, #55	; 0x37
    4820:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    4822:	cbz	r2, 4884 <ExFatFile::syncDir()+0xc8>
          m_vol->dataCacheDirty();
    4824:	ldr	r0, [r6, #32]
    4826:	str	r3, [sp, #4]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    4828:	ldrb.w	r1, [r0, #524]	; 0x20c
    482c:	orr.w	r1, r1, #1
    4830:	strb.w	r1, [r0, #524]	; 0x20c
          uint16_t date, time;
          FsDateTime::callback(&date, &time);
    4834:	add.w	r1, sp, #10
    4838:	add	r0, sp, #8
    483a:	blx	r2
          setLe16(df->modifyTime, time);
          setLe16(df->modifyDate, date);
    483c:	ldrh.w	r2, [sp, #8]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          FsDateTime::callback(&date, &time);
          setLe16(df->modifyTime, time);
    4840:	ldrh.w	r1, [sp, #10]
    4844:	strh	r2, [r5, #14]
    4846:	strh	r2, [r5, #18]
    4848:	ldr	r3, [sp, #4]
    484a:	ldrb	r2, [r5, #0]
    484c:	strh	r1, [r5, #12]
    484e:	strh	r1, [r5, #16]
    4850:	cmp	r2, #133	; 0x85
    4852:	beq.n	4884 <ExFatFile::syncDir()+0xc8>
    4854:	subs	r1, r5, #1
    4856:	adds	r5, #31
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4858:	ldrb.w	r0, [r1, #1]!
    485c:	lsls	r2, r4, #15
    485e:	orr.w	r4, r2, r4, lsr #1
    4862:	uxtah	r4, r0, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4866:	cmp	r5, r1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4868:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    486a:	bne.n	4858 <ExFatFile::syncDir()+0x9c>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    486c:	cmp	r3, r9
    486e:	beq.n	48e2 <ExFatFile::syncDir()+0x126>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    4870:	movs	r2, #32
    4872:	mov	r1, r8
    4874:	ldr	r0, [r6, #32]
    4876:	bl	41ec <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    487a:	cmp	r0, #1
    487c:	add.w	r7, r7, #1
    4880:	beq.n	47de <ExFatFile::syncDir()+0x22>
    4882:	b.n	47fc <ExFatFile::syncDir()+0x40>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4884:	movs	r1, #0
    4886:	b.n	488c <ExFatFile::syncDir()+0xd0>
    4888:	cmp	r1, #31
    488a:	bhi.n	486c <ExFatFile::syncDir()+0xb0>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    488c:	ldrb	r0, [r5, r1]
    488e:	lsls	r2, r4, #15
    4890:	orr.w	r4, r2, r4, lsr #1
    4894:	uxtah	r4, r0, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4898:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    489a:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    489c:	add.w	r1, r1, #1
    48a0:	bne.n	4888 <ExFatFile::syncDir()+0xcc>
    48a2:	movs	r1, #4
    48a4:	b.n	488c <ExFatFile::syncDir()+0xd0>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    48a6:	ldrb.w	r2, [r6, #51]	; 0x33
    48aa:	tst.w	r2, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    48ae:	ldrb	r2, [r0, #1]
    48b0:	ite	ne
    48b2:	orrne.w	r2, r2, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    48b6:	andeq.w	r2, r2, #253	; 0xfd
    48ba:	strb	r2, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    48bc:	ldrd	r0, r1, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    48c0:	strd	r0, r1, [r5, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    48c4:	ldrd	r0, r1, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    48c8:	ldr	r2, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    48ca:	str	r2, [r5, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    48cc:	strd	r0, r1, [r5, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    48d0:	ldr	r1, [r6, #32]
    48d2:	ldrb.w	r2, [r1, #524]	; 0x20c
    48d6:	orr.w	r2, r2, #1
    48da:	strb.w	r2, [r1, #524]	; 0x20c
    48de:	ldrb	r2, [r5, #0]
    48e0:	b.n	4850 <ExFatFile::syncDir()+0x94>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    48e2:	mov	r1, sl
    48e4:	movs	r2, #1
    48e6:	ldr	r0, [r6, #32]
    48e8:	bl	4140 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    48ec:	cmp	r0, #0
    48ee:	beq.n	47fc <ExFatFile::syncDir()+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    48f0:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    48f2:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    48f4:	mov	r0, r5
    48f6:	bl	3ce8 <FsCache::sync()>
    48fa:	cmp	r0, #0
    48fc:	beq.w	47fc <ExFatFile::syncDir()+0x40>
    4900:	add.w	r0, r5, #524	; 0x20c
    4904:	bl	3ce8 <FsCache::sync()>
    4908:	cmp	r0, #0
    490a:	beq.w	47fc <ExFatFile::syncDir()+0x40>
    490e:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4912:	ldr	r3, [r0, #0]
    4914:	ldr	r3, [r3, #20]
    4916:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4918:	cmp	r0, #0
    491a:	beq.w	47fc <ExFatFile::syncDir()+0x40>
    491e:	b.n	480a <ExFatFile::syncDir()+0x4e>
    4920:	.word	0x20020364

00004924 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4924:	ldrb.w	r2, [r0, #49]	; 0x31
    4928:	cbz	r2, 4950 <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    492a:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    492c:	ldrb.w	r2, [r0, #51]	; 0x33
    4930:	lsls	r1, r2, #24
    4932:	bmi.n	4954 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    4934:	ldr	r5, [r0, #32]
    4936:	mov	r4, r0
    4938:	mov	r0, r5
    493a:	bl	3ce8 <FsCache::sync()>
    493e:	cbnz	r0, 4964 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4940:	ldrb.w	r3, [r4, #50]	; 0x32
    4944:	orr.w	r3, r3, #1
    4948:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    494c:	movs	r0, #0
}
    494e:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4950:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4952:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4954:	and.w	r2, r2, #127	; 0x7f
    4958:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    495c:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4960:	b.w	47bc <ExFatFile::syncDir()>
    4964:	add.w	r0, r5, #524	; 0x20c
    4968:	bl	3ce8 <FsCache::sync()>
    496c:	cmp	r0, #0
    496e:	beq.n	4940 <ExFatFile::sync()+0x1c>
    4970:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4974:	ldr	r3, [r0, #0]
    4976:	ldr	r3, [r3, #20]
    4978:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    497a:	cmp	r0, #0
    497c:	beq.n	4940 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    497e:	movs	r0, #1
    4980:	pop	{r3, r4, r5, pc}
    4982:	nop

00004984 <ExFatFile::preAllocate(unsigned long long)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    4984:	orrs.w	r1, r2, r3
    4988:	beq.n	4992 <ExFatFile::preAllocate(unsigned long long)+0xe>
    498a:	ldrb.w	r1, [r0, #51]	; 0x33
    498e:	lsls	r1, r1, #30
    4990:	bmi.n	4996 <ExFatFile::preAllocate(unsigned long long)+0x12>
    goto fail;
  }
  return true;

 fail:
  return false;
    4992:	movs	r0, #0
}
    4994:	bx	lr
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    4996:	ldr	r1, [r0, #28]
    4998:	cmp	r1, #0
    499a:	bne.n	4992 <ExFatFile::preAllocate(unsigned long long)+0xe>
  return sync(); 
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
    499c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    49a0:	mov	r6, r0
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    49a2:	ldr	r0, [r0, #32]
    49a4:	mov	r5, r3
    49a6:	ldrb.w	r3, [r0, #1085]	; 0x43d
    49aa:	adds	r3, #9
    49ac:	adds.w	r8, r2, #4294967295
    49b0:	uxtb	r3, r3
    49b2:	adc.w	r9, r5, #4294967295
    49b6:	rsb	r7, r3, #32
    49ba:	lsl.w	r7, r9, r7
    49be:	mov	r4, r2
    49c0:	lsr.w	r2, r8, r3
    49c4:	subs	r3, #32
    49c6:	orrs	r2, r7
    49c8:	lsr.w	r3, r9, r3
    49cc:	orrs	r2, r3
    49ce:	adds	r7, r2, #1
  find = m_vol->bitmapFind(0, need);
    49d0:	mov	r2, r7
    49d2:	bl	3f44 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    49d6:	cmp	r0, #1
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
  find = m_vol->bitmapFind(0, need);
    49d8:	mov	r8, r0
  if (find < 2) {
    49da:	bls.n	49ea <ExFatFile::preAllocate(unsigned long long)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    49dc:	mov	r1, r0
    49de:	mov	r2, r7
    49e0:	movs	r3, #1
    49e2:	ldr	r0, [r6, #32]
    49e4:	bl	4050 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    49e8:	cbnz	r0, 49f0 <ExFatFile::preAllocate(unsigned long long)+0x6c>
    goto fail;
  }
  return true;

 fail:
  return false;
    49ea:	movs	r0, #0
    49ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    49f0:	ldrb.w	r3, [r6, #51]	; 0x33
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    49f4:	ldrb.w	r2, [r6, #49]	; 0x31
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
    49f8:	str.w	r8, [r6, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    49fc:	orn	r1, r3, #63	; 0x3f
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
    4a00:	strd	r4, r5, [r6, #8]
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    4a04:	strb.w	r1, [r6, #51]	; 0x33
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4a08:	cbz	r2, 4a20 <ExFatFile::preAllocate(unsigned long long)+0x9c>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4a0a:	and.w	r3, r3, #127	; 0x7f
    4a0e:	orr.w	r3, r3, #64	; 0x40
    4a12:	strb.w	r3, [r6, #51]	; 0x33
    return syncDir();
    4a16:	mov	r0, r6
  }
  return true;

 fail:
  return false;
}
    4a18:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4a1c:	b.w	47bc <ExFatFile::syncDir()>
  }
  return true;

 fail:
  return false;
}
    4a20:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004a24 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4a24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4a28:	ldrb.w	r3, [r0, #49]	; 0x31
    4a2c:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4a2e:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4a30:	bmi.n	4aea <ExFatFile::addDirCluster()+0xc6>
    4a32:	ldr	r0, [r0, #8]
    4a34:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    4a36:	ldr.w	r3, [r3, #1076]	; 0x434
    4a3a:	add	r0, r3
    4a3c:	cmp.w	r0, #67108864	; 0x4000000
    4a40:	bcc.n	4a4a <ExFatFile::addDirCluster()+0x26>
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
    4a42:	movs	r6, #0
  }
  return sync();

 fail:
  return false;
}
    4a44:	mov	r0, r6
    4a46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    4a4a:	mov	r0, r4
    4a4c:	bl	4730 <ExFatFile::addCluster()>
    4a50:	mov	r6, r0
    4a52:	cmp	r0, #0
    4a54:	beq.n	4a42 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    4a56:	ldr	r5, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4a58:	ldrb.w	r3, [r5, #524]	; 0x20c
    4a5c:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    4a5e:	add.w	r7, r5, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4a62:	bmi.n	4b26 <ExFatFile::addDirCluster()+0x102>
      return nullptr;
    }
    invalidate();
    4a64:	mov	r0, r7
    return m_cacheBuffer;
    4a66:	add.w	r8, r5, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    4a6a:	bl	3c58 <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    4a6e:	mov.w	r2, #512	; 0x200
    4a72:	movs	r1, #0
    4a74:	mov	r0, r8
    4a76:	bl	cb88 <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    4a7a:	ldr	r5, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4a7c:	ldr	r3, [r4, #24]
    4a7e:	ldrb.w	r1, [r5, #1085]	; 0x43d
    4a82:	ldr.w	r2, [r5, #1060]	; 0x424
    4a86:	sub.w	sl, r3, #2
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4a8a:	mov.w	r9, #1
    4a8e:	lsl.w	sl, sl, r1
    4a92:	lsls.w	r3, r9, r1
    4a96:	add	sl, r2
    4a98:	it	ne
    4a9a:	movne	r7, #0
    4a9c:	beq.n	4ac2 <ExFatFile::addDirCluster()+0x9e>
    4a9e:	ldr.w	r0, [r5, #1080]	; 0x438
  }
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    4aa2:	ldr	r3, [r0, #0]
    4aa4:	add.w	r1, sl, r7
    4aa8:	ldr	r3, [r3, #24]
    4aaa:	mov	r2, r8
    4aac:	blx	r3
    4aae:	adds	r7, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    4ab0:	cmp	r0, #0
    4ab2:	beq.n	4a42 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4ab4:	ldr	r5, [r4, #32]
    4ab6:	ldrb.w	r3, [r5, #1085]	; 0x43d
    4aba:	lsl.w	r3, r9, r3
    4abe:	cmp	r3, r7
    4ac0:	bhi.n	4a9e <ExFatFile::addDirCluster()+0x7a>
    4ac2:	ldrb.w	lr, [r4, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4ac6:	ldrb.w	r7, [r4, #51]	; 0x33
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    4aca:	tst.w	lr, #64	; 0x40
    4ace:	beq.n	4af2 <ExFatFile::addDirCluster()+0xce>
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4ad0:	lsls	r3, r7, #24
    4ad2:	bmi.n	4b4e <ExFatFile::addDirCluster()+0x12a>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4ad4:	mov	r0, r5
    4ad6:	bl	3ce8 <FsCache::sync()>
    4ada:	cbnz	r0, 4b32 <ExFatFile::addDirCluster()+0x10e>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4adc:	ldrb.w	r3, [r4, #50]	; 0x32
    4ae0:	orr.w	r3, r3, #1
    4ae4:	strb.w	r3, [r4, #50]	; 0x32
    4ae8:	b.n	4a42 <ExFatFile::addDirCluster()+0x1e>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4aea:	ldr	r0, [r0, #32]
    4aec:	bl	45f4 <ExFatPartition::rootLength()>
    4af0:	b.n	4a34 <ExFatFile::addDirCluster()+0x10>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4af2:	orr.w	r7, r7, #128	; 0x80
    m_dataLength  += m_vol->bytesPerCluster();
    4af6:	ldrd	r2, r3, [r4, #8]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4afa:	strb.w	r7, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    4afe:	ldr.w	r0, [r5, #1076]	; 0x434
    m_validLength += m_vol->bytesPerCluster();
    4b02:	ldrd	r8, r9, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4b06:	adds	r2, r2, r0
    4b08:	mov.w	r1, #0
    4b0c:	adcs	r3, r1
    m_validLength += m_vol->bytesPerCluster();
    4b0e:	adds.w	r0, r0, r8
    4b12:	adc.w	r1, r1, r9
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4b16:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    4b1a:	strd	r0, r1, [r4, #16]
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4b1e:	cmp.w	lr, #0
    4b22:	beq.n	4a44 <ExFatFile::addDirCluster()+0x20>
    4b24:	b.n	4ad0 <ExFatFile::addDirCluster()+0xac>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4b26:	mov	r0, r7
    4b28:	bl	3ce8 <FsCache::sync()>
    4b2c:	cmp	r0, #0
    4b2e:	bne.n	4a64 <ExFatFile::addDirCluster()+0x40>
    4b30:	b.n	4a42 <ExFatFile::addDirCluster()+0x1e>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4b32:	add.w	r0, r5, #524	; 0x20c
    4b36:	bl	3ce8 <FsCache::sync()>
    4b3a:	cmp	r0, #0
    4b3c:	beq.n	4adc <ExFatFile::addDirCluster()+0xb8>
    4b3e:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4b42:	ldr	r3, [r0, #0]
    4b44:	ldr	r3, [r3, #20]
    4b46:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4b48:	cmp	r0, #0
    4b4a:	beq.n	4adc <ExFatFile::addDirCluster()+0xb8>
    4b4c:	b.n	4a44 <ExFatFile::addDirCluster()+0x20>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4b4e:	and.w	r7, r7, #127	; 0x7f
    4b52:	strb.w	r7, [r4, #51]	; 0x33
    return syncDir();
    4b56:	mov	r0, r4
  }
  return sync();

 fail:
  return false;
}
    4b58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4b5c:	b.w	47bc <ExFatFile::syncDir()>

00004b60 <ExFatFile::truncate()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4b60:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    4b64:	lsls	r2, r3, #30
    4b66:	bpl.n	4bfc <ExFatFile::truncate()+0x9c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    4b68:	ldr	r1, [r0, #28]
    4b6a:	cmp	r1, #0
    4b6c:	beq.n	4bf8 <ExFatFile::truncate()+0x98>
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4b6e:	push	{r4, r5, r6, r7, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    4b70:	and.w	r2, r3, #64	; 0x40
    4b74:	mov	r4, r0
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4b76:	sub	sp, #12
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    4b78:	and.w	r0, r2, #255	; 0xff
    4b7c:	cmp	r2, #0
    4b7e:	beq.n	4c00 <ExFatFile::truncate()+0xa0>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4b80:	ldr	r0, [r4, #32]
    if (m_curCluster) {
    4b82:	ldr.w	lr, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4b86:	ldrb.w	r5, [r0, #1085]	; 0x43d
    4b8a:	ldrd	r6, r7, [r4, #8]
    4b8e:	adds	r5, #9
    4b90:	uxtb	r5, r5
    4b92:	adds.w	r6, r6, #4294967295
    4b96:	rsb	ip, r5, #32
    4b9a:	adc.w	r7, r7, #4294967295
    4b9e:	lsr.w	r2, r6, r5
    4ba2:	lsl.w	ip, r7, ip
    4ba6:	subs	r5, #32
    4ba8:	orr.w	r2, r2, ip
    4bac:	lsr.w	r5, r7, r5
    4bb0:	orrs	r2, r5
    4bb2:	adds	r2, #1
    if (m_curCluster) {
    4bb4:	cmp.w	lr, #0
    4bb8:	beq.n	4c42 <ExFatFile::truncate()+0xe2>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    4bba:	subs	r1, #1
    4bbc:	rsb	r1, lr, r1
    4bc0:	add	r2, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    4bc2:	add.w	r1, lr, #1
    4bc6:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4bc8:	cmp	r2, #0
    4bca:	bne.n	4c36 <ExFatFile::truncate()+0xd6>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4bcc:	ldrd	r0, r1, [r4]
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4bd0:	ldrb.w	r2, [r4, #49]	; 0x31
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4bd4:	orr.w	r3, r3, #128	; 0x80
    4bd8:	strb.w	r3, [r4, #51]	; 0x33
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4bdc:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    4be0:	strd	r0, r1, [r4, #16]
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4be4:	cbz	r2, 4c30 <ExFatFile::truncate()+0xd0>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4be6:	and.w	r3, r3, #127	; 0x7f
    4bea:	strb.w	r3, [r4, #51]	; 0x33
    return syncDir();
    4bee:	mov	r0, r4
    4bf0:	bl	47bc <ExFatFile::syncDir()>
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4bf4:	add	sp, #12
    4bf6:	pop	{r4, r5, r6, r7, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    4bf8:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4bfa:	bx	lr
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    4bfc:	movs	r0, #0
}
    4bfe:	bx	lr
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    4c00:	ldr	r3, [r4, #24]
    4c02:	cbnz	r3, 4c48 <ExFatFile::truncate()+0xe8>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    4c04:	str	r1, [sp, #4]
      m_firstCluster = 0;
    4c06:	str	r3, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    4c08:	ldr	r0, [r4, #32]
    4c0a:	bl	43fc <ExFatPartition::freeChain(unsigned long)>
    4c0e:	cbz	r0, 4c3e <ExFatFile::truncate()+0xde>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4c10:	ldrb.w	r3, [r4, #51]	; 0x33
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4c14:	ldrb.w	r2, [r4, #49]	; 0x31
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4c18:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4c1c:	orr.w	r3, r3, #128	; 0x80
    4c20:	strb.w	r3, [r4, #51]	; 0x33
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4c24:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    4c28:	strd	r0, r1, [r4, #16]
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4c2c:	cmp	r2, #0
    4c2e:	bne.n	4be6 <ExFatFile::truncate()+0x86>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    4c30:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4c32:	add	sp, #12
    4c34:	pop	{r4, r5, r6, r7, pc}
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4c36:	movs	r3, #0
    4c38:	bl	4050 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4c3c:	cbnz	r0, 4c66 <ExFatFile::truncate()+0x106>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    4c3e:	movs	r0, #0
    4c40:	b.n	4bf4 <ExFatFile::truncate()+0x94>
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    4c42:	str.w	lr, [r4, #28]
    4c46:	b.n	4bc6 <ExFatFile::truncate()+0x66>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    4c48:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4c4a:	mov	r1, r3
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    4c4c:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4c50:	ldr	r0, [r4, #32]
    4c52:	bl	42bc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4c56:	sxtb	r0, r0
      if (fg < 0) {
    4c58:	cmp	r0, #0
    4c5a:	blt.n	4c3e <ExFatFile::truncate()+0xde>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    4c5c:	bne.n	4c6c <ExFatFile::truncate()+0x10c>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    4c5e:	ldr	r1, [sp, #4]
    4c60:	cmp	r1, #0
    4c62:	beq.n	4c10 <ExFatFile::truncate()+0xb0>
    4c64:	b.n	4c08 <ExFatFile::truncate()+0xa8>
    4c66:	ldrb.w	r3, [r4, #51]	; 0x33
    4c6a:	b.n	4bcc <ExFatFile::truncate()+0x6c>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    4c6c:	mov.w	r2, #4294967295
    4c70:	ldr	r1, [r4, #24]
    4c72:	ldr	r0, [r4, #32]
    4c74:	bl	4358 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4c78:	cmp	r0, #0
    4c7a:	bne.n	4c5e <ExFatFile::truncate()+0xfe>
    4c7c:	b.n	4c3e <ExFatFile::truncate()+0xde>
    4c7e:	nop

00004c80 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4c80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c84:	ldrb.w	r3, [r0, #51]	; 0x33
    4c88:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4c8a:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4c8c:	mov	r6, r0
    4c8e:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4c90:	bmi.n	4ca8 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    4c92:	ldrb.w	r3, [r6, #50]	; 0x32
    4c96:	orr.w	r3, r3, #1
    4c9a:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    4c9e:	mov.w	r0, #4294967295
}
    4ca2:	add	sp, #20
    4ca4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
    4ca8:	lsls	r2, r3, #29
    4caa:	mov	sl, r1
    4cac:	bmi.w	4ed2 <ExFatFile::write(void const*, unsigned int)+0x252>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    4cb0:	ldr	r3, [sp, #4]
    4cb2:	cmp	r3, #0
    4cb4:	beq.w	4efa <ExFatFile::write(void const*, unsigned int)+0x27a>
    4cb8:	mov	r1, r6
    4cba:	mov	r8, r3
    4cbc:	ldrd	r2, r3, [r1], #24
    4cc0:	str	r1, [sp, #12]
    4cc2:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4cc4:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    4cc6:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4cc8:	ldr.w	r4, [r0, #1072]	; 0x430
    4ccc:	mov	r3, fp
    4cce:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    4cd0:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    4cd4:	cbnz	r4, 4d2a <ExFatFile::write(void const*, unsigned int)+0xaa>
      // start of new cluster
      if (m_curCluster != 0) {
    4cd6:	cmp	r5, #0
    4cd8:	beq.w	4e58 <ExFatFile::write(void const*, unsigned int)+0x1d8>
        int fg;

        if (isContiguous()) {
    4cdc:	ldrb.w	r3, [r6, #51]	; 0x33
    4ce0:	lsls	r3, r3, #25
    4ce2:	bpl.w	4ea0 <ExFatFile::write(void const*, unsigned int)+0x220>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    4ce6:	ldrd	r2, r3, [r6, #8]
    4cea:	ldrb.w	r7, [r0, #1085]	; 0x43d
    4cee:	adds	r7, #9
    4cf0:	uxtb	r7, r7
    4cf2:	adds.w	r2, r2, #4294967295
    4cf6:	adc.w	r3, r3, #4294967295
    4cfa:	rsb	lr, r7, #32
    4cfe:	lsl.w	lr, r3, lr
    4d02:	lsr.w	r1, r2, r7
    4d06:	subs	r7, #32
    4d08:	lsr.w	r7, r3, r7
    4d0c:	orr.w	r1, r1, lr
    4d10:	ldr	r3, [r6, #28]
    4d12:	orrs	r1, r7
    4d14:	add	r3, r1
    4d16:	cmp	r5, r3
    4d18:	bcc.w	4e86 <ExFatFile::write(void const*, unsigned int)+0x206>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    4d1c:	mov	r0, r6
    4d1e:	bl	4730 <ExFatFile::addCluster()>
    4d22:	cmp	r0, #0
    4d24:	beq.n	4c92 <ExFatFile::write(void const*, unsigned int)+0x12>
    4d26:	ldr	r0, [r6, #32]
    4d28:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    4d2a:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4d2e:	ldrb.w	lr, [r0, #1085]	; 0x43d
    4d32:	lsrs	r4, r4, #9
    4d34:	subs	r5, #2
    4d36:	adds	r1, r4, r7
    4d38:	lsl.w	r5, r5, lr
    4d3c:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    4d3e:	cmp.w	r9, #0
    4d42:	bne.w	4e4a <ExFatFile::write(void const*, unsigned int)+0x1ca>
    4d46:	cmp.w	r8, #512	; 0x200
    4d4a:	bcs.n	4dfc <ExFatFile::write(void const*, unsigned int)+0x17c>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    4d4c:	ldrd	r2, r3, [r6, #16]
    4d50:	ldrd	r4, r5, [r6]
    4d54:	cmp.w	r8, #512	; 0x200
    4d58:	mov	r7, r8
    4d5a:	it	cs
    4d5c:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    4d60:	cmp	r5, r3
    4d62:	it	eq
    4d64:	cmpeq	r4, r2
    4d66:	ite	cc
    4d68:	movcc	r2, #1
    4d6a:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4d6c:	add.w	r0, r0, #524	; 0x20c
    4d70:	bl	3c64 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    4d74:	cmp	r0, #0
    4d76:	beq.n	4c92 <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    4d78:	add	r0, r9
    4d7a:	mov	r2, r7
    4d7c:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4d7e:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    4d80:	bl	9404 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4d84:	cmp.w	r9, #512	; 0x200
    4d88:	beq.w	4eb0 <ExFatFile::write(void const*, unsigned int)+0x230>
    4d8c:	mov	r0, r7
    4d8e:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4d90:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4d94:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4d98:	adds.w	fp, r2, r0
    4d9c:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4da0:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4da2:	mov	r2, fp
    4da4:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4da6:	it	eq
    4da8:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    4daa:	add	sl, r7
    toWrite -= n;
    4dac:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4db0:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4db4:	bcs.n	4dca <ExFatFile::write(void const*, unsigned int)+0x14a>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4db6:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    4dba:	mov	r4, ip
    4dbc:	mov	r3, fp
    4dbe:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4dc2:	orn	r1, r1, #127	; 0x7f
    4dc6:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    4dca:	cmp.w	r8, #0
    4dce:	bne.w	4cc4 <ExFatFile::write(void const*, unsigned int)+0x44>
    4dd2:	mov	r2, fp
    4dd4:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    4dd6:	ldrd	r0, r1, [r6, #8]
    4dda:	cmp	r1, r3
    4ddc:	it	eq
    4dde:	cmpeq	r0, r2
    4de0:	bcc.n	4ee2 <ExFatFile::write(void const*, unsigned int)+0x262>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    4de2:	ldr	r3, [pc, #284]	; (4f00 <ExFatFile::write(void const*, unsigned int)+0x280>)
    4de4:	ldr	r3, [r3, #0]
    4de6:	cmp	r3, #0
    4de8:	beq.w	4ef6 <ExFatFile::write(void const*, unsigned int)+0x276>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4dec:	ldrb.w	r3, [r6, #51]	; 0x33
    4df0:	ldr	r0, [sp, #4]
    4df2:	orn	r3, r3, #127	; 0x7f
    4df6:	strb.w	r3, [r6, #51]	; 0x33
    4dfa:	b.n	4ca2 <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    4dfc:	cmp.w	r8, #1024	; 0x400
    4e00:	bcc.n	4e60 <ExFatFile::write(void const*, unsigned int)+0x1e0>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    4e02:	movs	r3, #1
    4e04:	lsl.w	lr, r3, lr
    4e08:	rsb	lr, r4, lr
    4e0c:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    4e10:	mov.w	r4, r8, lsr #9
    4e14:	cmp	r4, lr
    4e16:	it	cs
    4e18:	movcs	r4, lr
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (m_vol->dataCacheSector() <= sector
          && m_vol->dataCacheSector() < (sector + ns)) {
    4e1a:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    4e1c:	mov.w	r7, r4, lsl #9
      if (m_vol->dataCacheSector() <= sector
          && m_vol->dataCacheSector() < (sector + ns)) {
    4e20:	bcc.n	4e36 <ExFatFile::write(void const*, unsigned int)+0x1b6>
    4e22:	adds	r2, r4, r1
    4e24:	cmp	r2, r3
    4e26:	bls.n	4e36 <ExFatFile::write(void const*, unsigned int)+0x1b6>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    4e28:	add.w	r0, r0, #524	; 0x20c
    4e2c:	str	r1, [sp, #8]
    4e2e:	bl	3c58 <FsCache::invalidate()>
    4e32:	ldr	r0, [r6, #32]
    4e34:	ldr	r1, [sp, #8]
    4e36:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    4e3a:	ldr	r5, [r0, #0]
    4e3c:	mov	r3, r4
    4e3e:	mov	r2, sl
    4e40:	ldr	r4, [r5, #28]
    4e42:	blx	r4
        // invalidate cache if sector is in cache
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    4e44:	cmp	r0, #0
    4e46:	bne.n	4d8c <ExFatFile::write(void const*, unsigned int)+0x10c>
    4e48:	b.n	4c92 <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    4e4a:	rsb	r7, r9, #512	; 0x200
    4e4e:	cmp	r7, r8
    4e50:	it	cs
    4e52:	movcs	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    4e54:	movs	r2, #1
    4e56:	b.n	4d6c <ExFatFile::write(void const*, unsigned int)+0xec>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    4e58:	ldr	r5, [r6, #28]
    4e5a:	cbz	r5, 4e8c <ExFatFile::write(void const*, unsigned int)+0x20c>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    4e5c:	str	r5, [r6, #24]
    4e5e:	b.n	4d2a <ExFatFile::write(void const*, unsigned int)+0xaa>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    4e60:	ldr.w	r3, [r0, #532]	; 0x214
    4e64:	cmp	r1, r3
    4e66:	beq.n	4ec2 <ExFatFile::write(void const*, unsigned int)+0x242>
    4e68:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    4e6c:	ldr	r3, [r0, #0]
    4e6e:	mov	r2, sl
    4e70:	ldr	r3, [r3, #24]
    4e72:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    4e74:	cmp	r0, #0
    4e76:	beq.w	4c92 <ExFatFile::write(void const*, unsigned int)+0x12>
    4e7a:	mov.w	r0, #512	; 0x200
    4e7e:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    4e80:	mov.w	r7, #512	; 0x200
    4e84:	b.n	4d90 <ExFatFile::write(void const*, unsigned int)+0x110>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    4e86:	adds	r5, #1
    4e88:	str	r5, [r6, #24]
    4e8a:	b.n	4d2a <ExFatFile::write(void const*, unsigned int)+0xaa>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    4e8c:	mov	r0, r6
    4e8e:	bl	4730 <ExFatFile::addCluster()>
    4e92:	cmp	r0, #0
    4e94:	beq.w	4c92 <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    4e98:	ldr	r5, [r6, #24]
    4e9a:	str	r5, [r6, #28]
    4e9c:	ldr	r0, [r6, #32]
    4e9e:	b.n	4d2a <ExFatFile::write(void const*, unsigned int)+0xaa>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4ea0:	mov	r1, r5
    4ea2:	ldr	r2, [sp, #12]
    4ea4:	bl	42bc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    4ea8:	cmp	r0, #0
    4eaa:	bne.w	4d26 <ExFatFile::write(void const*, unsigned int)+0xa6>
    4eae:	b.n	4d1c <ExFatFile::write(void const*, unsigned int)+0x9c>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    4eb0:	ldr	r0, [r6, #32]
    4eb2:	add.w	r0, r0, #524	; 0x20c
    4eb6:	bl	3ce8 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    4eba:	cmp	r0, #0
    4ebc:	bne.w	4d8c <ExFatFile::write(void const*, unsigned int)+0x10c>
    4ec0:	b.n	4c92 <ExFatFile::write(void const*, unsigned int)+0x12>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    4ec2:	add.w	r0, r0, #524	; 0x20c
    4ec6:	str	r1, [sp, #8]
    4ec8:	bl	3c58 <FsCache::invalidate()>
    4ecc:	ldr	r0, [r6, #32]
    4ece:	ldr	r1, [sp, #8]
    4ed0:	b.n	4e68 <ExFatFile::write(void const*, unsigned int)+0x1e8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
    if (!seekSet(m_validLength)) {
    4ed2:	ldrd	r2, r3, [r0, #16]
    4ed6:	bl	3684 <ExFatFile::seekSet(unsigned long long)>
    4eda:	cmp	r0, #0
    4edc:	beq.w	4c92 <ExFatFile::write(void const*, unsigned int)+0x12>
    4ee0:	b.n	4cb0 <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4ee2:	ldrb.w	r1, [r6, #51]	; 0x33
    4ee6:	ldr	r0, [sp, #4]
    4ee8:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    4eec:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4ef0:	strb.w	r1, [r6, #51]	; 0x33
    4ef4:	b.n	4ca2 <ExFatFile::write(void const*, unsigned int)+0x22>
    4ef6:	ldr	r0, [sp, #4]
    4ef8:	b.n	4ca2 <ExFatFile::write(void const*, unsigned int)+0x22>
    4efa:	ldrd	r2, r3, [r6]
    4efe:	b.n	4dd6 <ExFatFile::write(void const*, unsigned int)+0x156>
    4f00:	.word	0x20020364

00004f04 <FatFile::sync() [clone .part.39]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    4f04:	push	{r4, r5, lr}
  uint16_t date, time;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4f06:	ldrsb.w	r3, [r0, #2]
    4f0a:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    4f0c:	sub	sp, #12
    4f0e:	mov	r4, r0
  uint16_t date, time;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4f10:	blt.n	4f46 <FatFile::sync() [clone .part.39]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    4f12:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    4f14:	add.w	r0, r5, #36	; 0x24
    4f18:	bl	59e8 <FatCache::sync()>
    4f1c:	cbnz	r0, 4f2c <FatFile::sync() [clone .part.39]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    4f1e:	ldrb	r3, [r4, #1]
    4f20:	orr.w	r3, r3, #1
    4f24:	strb	r3, [r4, #1]
  return false;
    4f26:	movs	r0, #0
}
    4f28:	add	sp, #12
    4f2a:	pop	{r4, r5, pc}
    4f2c:	add.w	r0, r5, #560	; 0x230
    4f30:	bl	59e8 <FatCache::sync()>
    4f34:	cmp	r0, #0
    4f36:	beq.n	4f1e <FatFile::sync() [clone .part.39]+0x1a>
    4f38:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4f3a:	ldr	r3, [r0, #0]
    4f3c:	ldr	r3, [r3, #20]
    4f3e:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    4f40:	cmp	r0, #0
    4f42:	beq.n	4f1e <FatFile::sync() [clone .part.39]+0x1a>
    4f44:	b.n	4f28 <FatFile::sync() [clone .part.39]+0x24>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    4f46:	ldr	r0, [r0, #8]
    4f48:	ldr	r1, [r4, #24]
    4f4a:	adds	r0, #36	; 0x24
    4f4c:	movs	r2, #1
    4f4e:	bl	5958 <FatCache::read(unsigned long, unsigned char)>
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    4f52:	cmp	r0, #0
    4f54:	beq.n	4f1e <FatFile::sync() [clone .part.39]+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    4f56:	ldrh	r3, [r4, #4]
    4f58:	and.w	r3, r3, #15
    4f5c:	lsls	r3, r3, #5
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    4f5e:	adds	r5, r0, r3
    4f60:	beq.n	4f1e <FatFile::sync() [clone .part.39]+0x1a>
    4f62:	ldrb	r3, [r0, r3]
    4f64:	cmp	r3, #229	; 0xe5
    4f66:	beq.n	4f1e <FatFile::sync() [clone .part.39]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    4f68:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    4f6a:	ldr	r2, [pc, #52]	; (4fa0 <FatFile::sync() [clone .part.39]+0x9c>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    4f6c:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    4f6e:	itt	mi
    4f70:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4f72:	strmi	r3, [r5, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    4f74:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    4f76:	ldr	r2, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4f78:	strh	r3, [r5, #26]
    4f7a:	lsrs	r3, r3, #16
    4f7c:	strh	r3, [r5, #20]
    4f7e:	cbz	r2, 4f96 <FatFile::sync() [clone .part.39]+0x92>
      FsDateTime::callback(&date, &time);
    4f80:	add.w	r1, sp, #6
    4f84:	add	r0, sp, #4
    4f86:	blx	r2
      setLe16(dir->modifyDate, date);
    4f88:	ldrh.w	r3, [sp, #4]
    4f8c:	ldrh.w	r2, [sp, #6]
    4f90:	strh	r3, [r5, #24]
    4f92:	strh	r3, [r5, #18]
    4f94:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4f96:	ldrb	r3, [r4, #2]
    4f98:	and.w	r3, r3, #127	; 0x7f
    4f9c:	strb	r3, [r4, #2]
    4f9e:	b.n	4f12 <FatFile::sync() [clone .part.39]+0xe>
    4fa0:	.word	0x20020364

00004fa4 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    4fa4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    4fa8:	ldrb	r3, [r0, #0]
    4faa:	lsls	r3, r3, #26
    4fac:	bmi.n	4fb6 <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    4fae:	ldr	r3, [pc, #168]	; (5058 <FatFile::addDirCluster()+0xb4>)
    4fb0:	ldr	r2, [r0, #20]
    4fb2:	cmp	r2, r3
    4fb4:	bls.n	4fbe <FatFile::addDirCluster()+0x1a>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    4fb6:	movs	r6, #0
}
    4fb8:	mov	r0, r6
    4fba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    4fbe:	mov	r2, r0
    4fc0:	mov	r5, r0
    4fc2:	ldr.w	r4, [r2, #16]!
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    4fc6:	ldr	r0, [r0, #8]
    4fc8:	mov	r1, r4
    4fca:	bl	5ce8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    4fce:	mov	r6, r0
    4fd0:	cmp	r0, #0
    4fd2:	beq.n	4fb6 <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    4fd4:	cbnz	r4, 5032 <FatFile::addDirCluster()+0x8e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4fd6:	ldrb	r3, [r5, #2]
    4fd8:	ldr	r1, [r5, #16]
    4fda:	orr.w	r3, r3, #64	; 0x40
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4fde:	orn	r3, r3, #127	; 0x7f
    4fe2:	strb	r3, [r5, #2]
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    4fe4:	ldr	r0, [r5, #8]
    4fe6:	bl	5a3c <FatPartition::clusterStartSector(unsigned long) const>
    4fea:	mov	r7, r0
    4fec:	ldr	r0, [r5, #8]
    4fee:	mov	r1, r7
    4ff0:	adds	r0, #36	; 0x24
    4ff2:	movs	r2, #5
    4ff4:	bl	5958 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    4ff8:	mov	r8, r0
    4ffa:	cmp	r0, #0
    4ffc:	beq.n	4fb6 <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    4ffe:	mov.w	r2, #512	; 0x200
    5002:	movs	r1, #0
    5004:	bl	cb88 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5008:	ldr	r3, [r5, #8]
    500a:	ldrb	r2, [r3, #4]
    500c:	cmp	r2, #1
    500e:	bls.n	5042 <FatFile::addDirCluster()+0x9e>
    5010:	movs	r4, #1
    5012:	b.n	501c <FatFile::addDirCluster()+0x78>
    5014:	ldr	r3, [r5, #8]
    5016:	ldrb	r2, [r3, #4]
    5018:	cmp	r2, r4
    501a:	bls.n	5042 <FatFile::addDirCluster()+0x9e>
    501c:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    501e:	ldr	r3, [r0, #0]
    5020:	adds	r1, r4, r7
    5022:	ldr	r3, [r3, #24]
    5024:	mov	r2, r8
    5026:	blx	r3
    5028:	adds	r4, #1
    502a:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    502c:	cmp	r0, #0
    502e:	bne.n	5014 <FatFile::addDirCluster()+0x70>
    5030:	b.n	4fb6 <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    5032:	ldr	r1, [r5, #16]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5034:	ldrb	r3, [r5, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    5036:	adds	r4, #1
    5038:	cmp	r1, r4
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    503a:	it	ne
    503c:	andne.w	r3, r3, #191	; 0xbf
    5040:	b.n	4fde <FatFile::addDirCluster()+0x3a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    5042:	ldrb	r3, [r3, #6]
    5044:	ldr	r1, [r5, #20]
    5046:	mov.w	r2, #512	; 0x200
    504a:	lsl.w	r3, r2, r3
    504e:	uxtah	r3, r1, r3
    5052:	str	r3, [r5, #20]
    5054:	b.n	4fb8 <FatFile::addDirCluster()+0x14>
    5056:	nop
    5058:	.word	0x001ffdff

0000505c <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    505c:	push	{r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    505e:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5060:	sub	sp, #12
    5062:	mov	r4, r0
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    5064:	cbnz	r3, 5072 <FatFile::close()+0x16>
    return true;
    5066:	movs	r0, #1
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5068:	movs	r3, #0
    506a:	strb	r3, [r4, #0]
  m_flags = 0;
    506c:	strb	r3, [r4, #2]
  return rtn;
}
    506e:	add	sp, #12
    5070:	pop	{r4, r5, pc}
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5072:	ldrsb.w	r3, [r0, #2]
    5076:	cmp	r3, #0
    5078:	blt.n	50b4 <FatFile::close()+0x58>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    507a:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    507c:	add.w	r0, r5, #36	; 0x24
    5080:	bl	59e8 <FatCache::sync()>
    5084:	cbnz	r0, 509a <FatFile::close()+0x3e>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    5086:	ldrb	r3, [r4, #1]
    5088:	orr.w	r3, r3, #1
    508c:	strb	r3, [r4, #1]
  return false;
    508e:	movs	r0, #0
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5090:	movs	r3, #0
    5092:	strb	r3, [r4, #0]
  m_flags = 0;
    5094:	strb	r3, [r4, #2]
  return rtn;
}
    5096:	add	sp, #12
    5098:	pop	{r4, r5, pc}
    509a:	add.w	r0, r5, #560	; 0x230
    509e:	bl	59e8 <FatCache::sync()>
    50a2:	cmp	r0, #0
    50a4:	beq.n	5086 <FatFile::close()+0x2a>
    50a6:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    50a8:	ldr	r3, [r0, #0]
    50aa:	ldr	r3, [r3, #20]
    50ac:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    50ae:	cmp	r0, #0
    50b0:	beq.n	5086 <FatFile::close()+0x2a>
    50b2:	b.n	5068 <FatFile::close()+0xc>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    50b4:	ldr	r0, [r0, #8]
    50b6:	ldr	r1, [r4, #24]
    50b8:	adds	r0, #36	; 0x24
    50ba:	movs	r2, #1
    50bc:	bl	5958 <FatCache::read(unsigned long, unsigned char)>
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    50c0:	cmp	r0, #0
    50c2:	beq.n	5086 <FatFile::close()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    50c4:	ldrh	r3, [r4, #4]
    50c6:	and.w	r3, r3, #15
    50ca:	lsls	r3, r3, #5
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    50cc:	adds	r5, r0, r3
    50ce:	beq.n	5086 <FatFile::close()+0x2a>
    50d0:	ldrb	r3, [r0, r3]
    50d2:	cmp	r3, #229	; 0xe5
    50d4:	beq.n	5086 <FatFile::close()+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    50d6:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    50d8:	ldr	r2, [pc, #52]	; (5110 <FatFile::close()+0xb4>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    50da:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    50dc:	itt	mi
    50de:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    50e0:	strmi	r3, [r5, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    50e2:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    50e4:	ldr	r2, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    50e6:	strh	r3, [r5, #26]
    50e8:	lsrs	r3, r3, #16
    50ea:	strh	r3, [r5, #20]
    50ec:	cbz	r2, 5104 <FatFile::close()+0xa8>
      FsDateTime::callback(&date, &time);
    50ee:	add.w	r1, sp, #6
    50f2:	add	r0, sp, #4
    50f4:	blx	r2
      setLe16(dir->modifyDate, date);
    50f6:	ldrh.w	r3, [sp, #4]
    50fa:	ldrh.w	r2, [sp, #6]
    50fe:	strh	r3, [r5, #24]
    5100:	strh	r3, [r5, #18]
    5102:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5104:	ldrb	r3, [r4, #2]
    5106:	and.w	r3, r3, #127	; 0x7f
    510a:	strb	r3, [r4, #2]
    510c:	b.n	507a <FatFile::close()+0x1e>
    510e:	nop
    5110:	.word	0x20020364

00005114 <FatFile::preAllocate(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5114:	cbnz	r1, 511a <FatFile::preAllocate(unsigned long)+0x6>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    5116:	movs	r0, #0
}
    5118:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
    511a:	push	{r3, r4, r5, lr}
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    511c:	ldrb	r3, [r0, #2]
    511e:	lsls	r3, r3, #30
    5120:	bmi.n	5126 <FatFile::preAllocate(unsigned long)+0x12>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    5122:	movs	r0, #0
    5124:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5126:	ldr	r3, [r0, #32]
    5128:	cmp	r3, #0
    512a:	bne.n	5122 <FatFile::preAllocate(unsigned long)+0xe>
    512c:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    512e:	ldr	r0, [r0, #8]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    5130:	ldrb	r3, [r0, #6]
    5132:	adds	r3, #9
    5134:	mov	r5, r1
    5136:	uxtb	r3, r3
    5138:	subs	r1, #1
    513a:	lsrs	r1, r3
    513c:	adds	r1, #1
    513e:	add.w	r2, r4, #32
    5142:	bl	5e94 <FatPartition::allocContiguous(unsigned long, unsigned long*)>
    5146:	cmp	r0, #0
    5148:	beq.n	5122 <FatFile::preAllocate(unsigned long)+0xe>
  }
  m_fileSize = length;

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    514a:	ldrb	r3, [r4, #2]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    514c:	ldrb	r2, [r4, #0]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fileSize = length;
    514e:	str	r5, [r4, #28]

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5150:	orn	r3, r3, #31
    5154:	strb	r3, [r4, #2]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    5156:	cbnz	r2, 515a <FatFile::preAllocate(unsigned long)+0x46>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
}
    5158:	pop	{r3, r4, r5, pc}
    515a:	mov	r0, r4
    515c:	ldmia.w	sp!, {r3, r4, r5, lr}
    5160:	b.w	4f04 <FatFile::sync() [clone .part.39]>

00005164 <FatFile::open(FatFile*, char const*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, uint8_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
    5164:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5168:	mov	r6, r0
    516a:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    516c:	ldrb	r4, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, uint8_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
    516e:	str	r2, [sp, #4]
    5170:	movs	r0, #0
    5172:	strb.w	r0, [sp, #36]	; 0x24
    5176:	strb.w	r0, [sp, #37]	; 0x25
    517a:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    517e:	cbnz	r4, 518c <FatFile::open(FatFile*, char const*, unsigned char)+0x28>
    5180:	mov	r7, r3
    5182:	ldrb	r3, [r1, #0]
    5184:	tst.w	r3, #112	; 0x70
    5188:	mov	r5, r1
    518a:	bne.n	5194 <FatFile::open(FatFile*, char const*, unsigned char)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    518c:	movs	r0, #0
}
    518e:	add	sp, #72	; 0x48
    5190:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5194:	ldrb	r3, [r2, #0]
    5196:	cmp	r3, #47	; 0x2f
    5198:	mov	r4, r2
    519a:	bne.n	51e8 <FatFile::open(FatFile*, char const*, unsigned char)+0x84>
    while (isDirSeparator(*path)) {
      path++;
    519c:	adds	r4, #1
    519e:	str	r4, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    51a0:	ldrb.w	r8, [r4]
    51a4:	cmp.w	r8, #47	; 0x2f
    51a8:	beq.n	519c <FatFile::open(FatFile*, char const*, unsigned char)+0x38>
      path++;
    }
    if (*path == 0) {
    51aa:	cmp.w	r8, #0
    51ae:	beq.n	523e <FatFile::open(FatFile*, char const*, unsigned char)+0xda>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    51b0:	ldr	r5, [r5, #8]
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    51b2:	add	r0, sp, #36	; 0x24
    51b4:	movs	r2, #36	; 0x24
    51b6:	movs	r1, #0
    51b8:	bl	cb88 <memset>

  m_vol = vol;
    51bc:	str	r5, [sp, #44]	; 0x2c
  switch (vol->fatType()) {
    51be:	ldrb	r3, [r5, #7]
    51c0:	cmp	r3, #16
    51c2:	beq.n	5236 <FatFile::open(FatFile*, char const*, unsigned char)+0xd2>
    51c4:	cmp	r3, #32
    51c6:	bne.n	518c <FatFile::open(FatFile*, char const*, unsigned char)+0x28>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    51c8:	movs	r3, #64	; 0x40
    51ca:	strb.w	r3, [sp, #36]	; 0x24
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    51ce:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    51d0:	add	r5, sp, #36	; 0x24
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    51d2:	strb.w	r3, [sp, #38]	; 0x26
    51d6:	b.n	51e8 <FatFile::open(FatFile*, char const*, unsigned char)+0x84>
    51d8:	mov	r0, r6
    51da:	bl	4f04 <FatFile::sync() [clone .part.39]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    51de:	movs	r3, #0
    51e0:	ldr	r4, [sp, #4]
    51e2:	strb	r3, [r6, #0]
  m_flags = 0;
    51e4:	strb	r3, [r6, #2]
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    51e6:	add	r5, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    51e8:	add	r2, sp, #4
    51ea:	add	r1, sp, #12
    51ec:	mov	r0, r4
    51ee:	bl	65b4 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
    51f2:	add	r2, sp, #12
    51f4:	mov	r1, r5
    51f6:	movs	r3, #1
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    51f8:	cmp	r0, #0
    51fa:	beq.n	518c <FatFile::open(FatFile*, char const*, unsigned char)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    51fc:	ldr	r4, [sp, #4]
    51fe:	ldrb	r4, [r4, #0]
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
    5200:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5202:	cbz	r4, 5224 <FatFile::open(FatFile*, char const*, unsigned char)+0xc0>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
    5204:	bl	6900 <FatFile::open(FatFile*, fname_t*, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5208:	mov	r5, r6
    520a:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
    520c:	cmp	r0, #0
    520e:	beq.n	518c <FatFile::open(FatFile*, char const*, unsigned char)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5210:	ldmia	r5!, {r0, r1, r2, r3}
    5212:	stmia	r4!, {r0, r1, r2, r3}
    5214:	ldmia	r5!, {r0, r1, r2, r3}
    5216:	stmia	r4!, {r0, r1, r2, r3}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    5218:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    521a:	ldr	r2, [r5, #0]
    521c:	str	r2, [r4, #0]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    521e:	cmp	r3, #0
    5220:	beq.n	51de <FatFile::open(FatFile*, char const*, unsigned char)+0x7a>
    5222:	b.n	51d8 <FatFile::open(FatFile*, char const*, unsigned char)+0x74>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    5224:	mov	r3, r7
    5226:	add	r2, sp, #12
    5228:	mov	r1, r5
    522a:	mov	r0, r6
    522c:	bl	6900 <FatFile::open(FatFile*, fname_t*, unsigned char)>

fail:
  return false;
}
    5230:	add	sp, #72	; 0x48
    5232:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5236:	movs	r3, #32
    5238:	strb.w	r3, [sp, #36]	; 0x24
    523c:	b.n	51ce <FatFile::open(FatFile*, char const*, unsigned char)+0x6a>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    523e:	ldr	r4, [r5, #8]
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    5240:	movs	r2, #36	; 0x24
    5242:	mov	r1, r8
    5244:	mov	r0, r6
    5246:	bl	cb88 <memset>

  m_vol = vol;
    524a:	str	r4, [r6, #8]
  switch (vol->fatType()) {
    524c:	ldrb	r3, [r4, #7]
    524e:	cmp	r3, #16
    5250:	beq.n	5260 <FatFile::open(FatFile*, char const*, unsigned char)+0xfc>
    5252:	cmp	r3, #32
    5254:	bne.n	5266 <FatFile::open(FatFile*, char const*, unsigned char)+0x102>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5256:	movs	r3, #64	; 0x40
    5258:	strb	r3, [r6, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    525a:	movs	r0, #1
    525c:	strb	r0, [r6, #2]
    525e:	b.n	518e <FatFile::open(FatFile*, char const*, unsigned char)+0x2a>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5260:	movs	r3, #32
    5262:	strb	r3, [r6, #0]
    5264:	b.n	525a <FatFile::open(FatFile*, char const*, unsigned char)+0xf6>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    5266:	mov	r0, r8
    5268:	b.n	518e <FatFile::open(FatFile*, char const*, unsigned char)+0x2a>
    526a:	nop

0000526c <FatFile::open(FatVolume*, char const*, unsigned char)>:
bool FatFile::open(const char* path, uint8_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, uint8_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    526c:	cbz	r1, 5276 <FatFile::open(FatVolume*, char const*, unsigned char)+0xa>
    526e:	addw	r1, r1, #1084	; 0x43c
    5272:	b.w	5164 <FatFile::open(FatFile*, char const*, unsigned char)>
}
    5276:	mov	r0, r1
    5278:	bx	lr
    527a:	nop

0000527c <FatFile::openRoot(FatVolume*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    527c:	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
    527e:	ldrb	r4, [r0, #0]
    5280:	cbz	r4, 5286 <FatFile::openRoot(FatVolume*)+0xa>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    5282:	movs	r0, #0
    5284:	pop	{r4, r5, r6, pc}
    5286:	mov	r5, r0
    5288:	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    528a:	movs	r2, #36	; 0x24
    528c:	mov	r1, r4
    528e:	bl	cb88 <memset>

  m_vol = vol;
    5292:	str	r6, [r5, #8]
  switch (vol->fatType()) {
    5294:	ldrb	r3, [r6, #7]
    5296:	cmp	r3, #16
    5298:	beq.n	52ae <FatFile::openRoot(FatVolume*)+0x32>
    529a:	cmp	r3, #32
    529c:	bne.n	52aa <FatFile::openRoot(FatVolume*)+0x2e>
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    529e:	movs	r4, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    52a0:	movs	r3, #64	; 0x40
    52a2:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    52a4:	strb	r4, [r5, #2]
  return true;
    52a6:	mov	r0, r4
    52a8:	pop	{r4, r5, r6, pc}

fail:
  return false;
    52aa:	mov	r0, r4
}
    52ac:	pop	{r4, r5, r6, pc}
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    52ae:	movs	r4, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    52b0:	movs	r3, #32
    52b2:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    52b4:	strb	r4, [r5, #2]
  return true;
    52b6:	mov	r0, r4
    52b8:	pop	{r4, r5, r6, pc}
    52ba:	nop

000052bc <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    52bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    52c0:	ldrb	r3, [r0, #2]
    52c2:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    52c4:	sub	sp, #12
    52c6:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    52c8:	bpl.w	53ec <FatFile::read(void*, unsigned int)+0x130>
    52cc:	mov	r7, r1
    52ce:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    52d0:	lsls	r6, r1, #28
    52d2:	mov	r9, r2
    52d4:	bmi.w	53fe <FatFile::read(void*, unsigned int)+0x142>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    52d8:	lsls	r4, r1, #26
    52da:	bpl.n	52ee <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    52dc:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    52de:	ldr	r3, [r0, #20]
    52e0:	ldrh	r2, [r2, #8]
    52e2:	rsb	r3, r3, r2, lsl #5
    52e6:	uxth	r3, r3
    52e8:	cmp	r9, r3
    52ea:	it	cs
    52ec:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    52ee:	cmp.w	r9, #0
    52f2:	beq.w	544a <FatFile::read(void*, unsigned int)+0x18e>
    52f6:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    52f8:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    52fa:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    52fc:	mov	r6, r9
    52fe:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5302:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5306:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    530a:	bpl.n	538c <FatFile::read(void*, unsigned int)+0xd0>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    530c:	ldr	r1, [r2, #32]
    530e:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5312:	cmp.w	fp, #0
    5316:	bne.n	53c0 <FatFile::read(void*, unsigned int)+0x104>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5318:	cmp.w	r6, #512	; 0x200
    531c:	bcc.n	53c0 <FatFile::read(void*, unsigned int)+0x104>
    531e:	ldr	r3, [r2, #44]	; 0x2c
        || sector == m_vol->cacheSectorNumber()) {
    5320:	cmp	r1, r3
    5322:	beq.n	53c0 <FatFile::read(void*, unsigned int)+0x104>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5324:	cmp.w	r6, #1024	; 0x400
    5328:	bcc.n	5410 <FatFile::read(void*, unsigned int)+0x154>
      uint8_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    532a:	ldrb	r0, [r5, #0]
    532c:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint8_t ns = toRead >> m_vol->bytesPerSectorShift();
    532e:	ubfx	fp, r6, #9, #8
      if (!isRootFixed()) {
    5332:	bmi.n	5342 <FatFile::read(void*, unsigned int)+0x86>
        uint8_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5334:	ldrb	r0, [r2, #4]
    5336:	rsb	r0, r8, r0
    533a:	uxtb	r0, r0
    533c:	cmp	fp, r0
    533e:	it	cs
    5340:	movcs	fp, r0
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (m_vol->cacheSectorNumber() <= sector
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5342:	cmp	r1, r3
        uint8_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    5344:	mov.w	r4, fp, lsl #9
      if (m_vol->cacheSectorNumber() <= sector
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5348:	bcc.n	5362 <FatFile::read(void*, unsigned int)+0xa6>
    534a:	add	r3, fp
    534c:	cmp	r1, r3
    534e:	bcs.n	5362 <FatFile::read(void*, unsigned int)+0xa6>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5350:	add.w	r0, r2, #36	; 0x24
    5354:	str	r1, [sp, #4]
    5356:	bl	59e8 <FatCache::sync()>
        // flush cache if a sector is in the cache
        if (!m_vol->cacheSyncData()) {
    535a:	cmp	r0, #0
    535c:	beq.n	53ec <FatFile::read(void*, unsigned int)+0x130>
    535e:	ldr	r2, [r5, #8]
    5360:	ldr	r1, [sp, #4]
    5362:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    5364:	ldr	r2, [r0, #0]
    5366:	mov	r3, fp
    5368:	ldr.w	fp, [r2, #12]
    536c:	mov	r2, r7
    536e:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    5370:	cmp	r0, #0
    5372:	beq.n	53ec <FatFile::read(void*, unsigned int)+0x130>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5374:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5376:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5378:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    537a:	add	r7, r4
    m_curPosition += n;
    537c:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    537e:	beq.n	544a <FatFile::read(void*, unsigned int)+0x18e>
    5380:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5382:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5384:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5386:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    538a:	bmi.n	530c <FatFile::read(void*, unsigned int)+0x50>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    538c:	ldrb.w	r8, [r2, #5]
    5390:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    5394:	cmp.w	fp, #0
    5398:	bne.n	540c <FatFile::read(void*, unsigned int)+0x150>
    539a:	cmp.w	r8, #0
    539e:	bne.n	540c <FatFile::read(void*, unsigned int)+0x150>
        // start of new cluster
        if (m_curPosition == 0) {
    53a0:	cmp	r3, #0
    53a2:	bne.n	5424 <FatFile::read(void*, unsigned int)+0x168>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    53a4:	lsls	r1, r1, #25
    53a6:	ite	mi
    53a8:	ldrmi	r1, [r2, #32]
    53aa:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    53ac:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    53ae:	mov	r0, r2
    53b0:	bl	5a3c <FatPartition::clusterStartSector(unsigned long) const>
    53b4:	ldr	r2, [r5, #8]
    53b6:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    53ba:	cmp.w	fp, #0
    53be:	beq.n	5318 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    53c0:	add.w	r0, r2, #36	; 0x24
    53c4:	movs	r2, #0
    53c6:	bl	5958 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    53ca:	cbz	r0, 53ec <FatFile::read(void*, unsigned int)+0x130>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    53cc:	rsb	r4, fp, #512	; 0x200
    53d0:	cmp	r4, r6
    53d2:	it	cs
    53d4:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    53d6:	add.w	r1, r0, fp
    53da:	mov	r2, r4
    53dc:	mov	r0, r7
    53de:	bl	9404 <memcpy>
    53e2:	b.n	5374 <FatFile::read(void*, unsigned int)+0xb8>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    53e4:	ldrb	r3, [r5, #0]
    53e6:	tst.w	r3, #112	; 0x70
    53ea:	bne.n	544c <FatFile::read(void*, unsigned int)+0x190>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    53ec:	ldrb	r3, [r5, #1]
  return -1;
    53ee:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    53f2:	orr.w	r3, r3, #2
    53f6:	strb	r3, [r5, #1]
  return -1;
}
    53f8:	add	sp, #12
    53fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    53fe:	ldr	r3, [r0, #28]
    5400:	ldr	r2, [r0, #20]
    5402:	subs	r3, r3, r2
    5404:	cmp	r9, r3
    5406:	it	cs
    5408:	movcs	r9, r3
    540a:	b.n	52ee <FatFile::read(void*, unsigned int)+0x32>
    540c:	ldr	r1, [r5, #16]
    540e:	b.n	53ae <FatFile::read(void*, unsigned int)+0xf2>
    5410:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5412:	ldr	r3, [r0, #0]
    5414:	mov	r2, r7
    5416:	ldr	r3, [r3, #8]
    5418:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    541a:	cmp	r0, #0
    541c:	beq.n	53ec <FatFile::read(void*, unsigned int)+0x130>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    541e:	mov.w	r4, #512	; 0x200
    5422:	b.n	5374 <FatFile::read(void*, unsigned int)+0xb8>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    5424:	lsls	r3, r1, #28
    5426:	bpl.n	5434 <FatFile::read(void*, unsigned int)+0x178>
    5428:	ldrb	r3, [r5, #2]
    542a:	lsls	r4, r3, #25
    542c:	bpl.n	5434 <FatFile::read(void*, unsigned int)+0x178>
          m_curCluster++;
    542e:	ldr	r1, [r5, #16]
    5430:	adds	r1, #1
    5432:	b.n	53ac <FatFile::read(void*, unsigned int)+0xf0>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5434:	mov	r0, r2
    5436:	ldr	r1, [r5, #16]
    5438:	mov	r2, sl
    543a:	bl	5a48 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    543e:	cmp	r0, #0
    5440:	blt.n	53ec <FatFile::read(void*, unsigned int)+0x130>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    5442:	beq.n	53e4 <FatFile::read(void*, unsigned int)+0x128>
    5444:	ldr	r2, [r5, #8]
    5446:	ldr	r1, [r5, #16]
    5448:	b.n	53ae <FatFile::read(void*, unsigned int)+0xf2>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    544a:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    544c:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    5450:	add	sp, #12
    5452:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5456:	nop

00005458 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    5458:	push	{r4, r5, r6, lr}
    545a:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    545c:	movs	r2, #1
    545e:	add.w	r1, sp, #7
    5462:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5464:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    5466:	ldr	r5, [r0, #16]
    5468:	bl	52bc <FatFile::read(void*, unsigned int)>
    546c:	cmp	r0, #1
    546e:	it	eq
    5470:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    5474:	str	r6, [r4, #20]
    5476:	it	ne
    5478:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    547c:	str	r5, [r4, #16]
  return c;
}
    547e:	add	sp, #8
    5480:	pop	{r4, r5, r6, pc}
    5482:	nop

00005484 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
    5484:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5486:	ldr	r3, [r0, #20]
    5488:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
    548c:	sub	sp, #12
    548e:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    5490:	cbz	r5, 5494 <FatFile::readDirCache(bool)+0x10>
    5492:	cbnz	r1, 54b8 <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    5494:	movs	r2, #1
    5496:	add.w	r1, sp, #7
    549a:	mov	r0, r4
    549c:	bl	52bc <FatFile::read(void*, unsigned int)>
    54a0:	sxtb	r0, r0
    if  (n != 1) {
    54a2:	cmp	r0, #1
    54a4:	bne.n	54be <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    54a6:	ldr	r3, [r4, #20]
    54a8:	adds	r3, #31
    54aa:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    54ac:	ldr	r0, [r4, #8]
    54ae:	adds	r0, #48	; 0x30
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<dir_t*>(m_vol->cacheAddress()) + i;
    54b0:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    54b4:	add	sp, #12
    54b6:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    54b8:	adds	r3, #32
    54ba:	str	r3, [r0, #20]
    54bc:	b.n	54ac <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<dir_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    54be:	movs	r0, #0
}
    54c0:	add	sp, #12
    54c2:	pop	{r4, r5, pc}

000054c4 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    54c4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    54c8:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    54ca:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    54cc:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    54ce:	cbz	r3, 54fe <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    54d0:	ldr	r2, [r0, #20]
    54d2:	cmp	r2, r1
    54d4:	mov	r6, r1
    54d6:	beq.n	554e <FatFile::seekSet(unsigned long)+0x8a>
    return true;
  }
  if (pos == 0) {
    54d8:	cbnz	r1, 54ec <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    54da:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    54dc:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    54de:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    54e0:	bic.w	r3, r3, #32
    54e4:	strb	r3, [r4, #2]
  return true;
    54e6:	movs	r0, #1
    54e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    54ec:	lsls	r0, r3, #28
    54ee:	bmi.n	5506 <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    54f0:	lsls	r1, r3, #26
    54f2:	bpl.n	550c <FatFile::seekSet(unsigned long)+0x48>
    54f4:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    54f6:	ldrh	r3, [r3, #8]
    54f8:	cmp.w	r6, r3, lsl #5
    54fc:	bls.n	54dc <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    54fe:	str	r7, [r4, #16]
  return false;
    5500:	movs	r0, #0
    5502:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    5506:	ldr	r1, [r4, #28]
    5508:	cmp	r6, r1
    550a:	bhi.n	54fe <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    550c:	ldr.w	lr, [r4, #8]
    5510:	ldrb.w	r5, [lr, #6]
    5514:	adds	r5, #9
    5516:	uxtb	r1, r5
    5518:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    551a:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    551c:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    551e:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    5520:	cmp	r0, r5
    5522:	bhi.n	5526 <FatFile::seekSet(unsigned long)+0x62>
    5524:	cbnz	r2, 5554 <FatFile::seekSet(unsigned long)+0x90>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5526:	lsls	r3, r3, #25
    5528:	ite	mi
    552a:	ldrmi.w	r3, [lr, #32]
    552e:	ldrpl	r3, [r4, #32]
    5530:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5532:	add.w	r8, r4, #16
    5536:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    5538:	cmp	r5, #0
    553a:	beq.n	54dc <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    553c:	ldr	r1, [r4, #16]
    553e:	ldr	r0, [r4, #8]
    5540:	bl	5a48 <FatPartition::fatGet(unsigned long, unsigned long*)>
    5544:	cmp	r0, #0
    5546:	add.w	r5, r5, #4294967295
    554a:	bgt.n	5536 <FatFile::seekSet(unsigned long)+0x72>
    554c:	b.n	54fe <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    554e:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    5550:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    5554:	subs	r5, r5, r0
    5556:	b.n	5532 <FatFile::seekSet(unsigned long)+0x6e>

00005558 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
    5558:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    555c:	mov	r5, r1
    555e:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5560:	movs	r1, #0
    5562:	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
    5564:	mov	r4, r0
    5566:	mov	r7, r3
    5568:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    556c:	bl	cb88 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5570:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    5572:	ldr	r3, [r5, #32]
    5574:	str	r3, [r4, #12]
  dir_t* dir = reinterpret_cast<dir_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    5576:	and.w	r5, r8, #15
    557a:	add.w	r3, r0, #48	; 0x30
    557e:	add.w	r5, r3, r5, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5582:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    5584:	strh.w	r8, [r4, #4]
    5588:	ldrb	r2, [r5, #11]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = reinterpret_cast<dir_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    558a:	lsls	r3, r2, #28
    558c:	bmi.n	55b0 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    558e:	and.w	r2, r2, #23
    5592:	strb	r2, [r4, #0]
  if (isFileDir(dir)) {
    5594:	ldrb	r3, [r5, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    5596:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    5598:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    559c:	itt	eq
    559e:	orreq.w	r2, r2, #8
    55a2:	strbeq	r2, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
    55a4:	tst.w	r7, #50	; 0x32
    55a8:	beq.n	55ba <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x62>
    if (isSubDir() || isReadOnly()) {
    55aa:	tst.w	r2, #17
    55ae:	beq.n	55ba <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x62>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    55b0:	movs	r0, #0
    55b2:	strb	r0, [r4, #0]
  m_flags = 0;
    55b4:	strb	r0, [r4, #2]
  return false;
    55b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // save open flags for read/write
  m_flags = oflag & FILE_FLAG_OFLAG;
    55ba:	and.w	r2, r7, #7
    55be:	strb	r2, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    55c0:	ldrh	r1, [r5, #20]
    55c2:	ldrh	r3, [r5, #26]
    55c4:	ldr	r6, [r0, #44]	; 0x2c
    }
  }
  // save open flags for read/write
  m_flags = oflag & FILE_FLAG_OFLAG;

  m_dirSector = m_vol->cacheSectorNumber();
    55c6:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    55c8:	lsls	r6, r7, #27

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    55ca:	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
    55ce:	bpl.n	55de <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x86>
    if (!(oflag & O_WRITE)) {
    55d0:	lsls	r5, r7, #30
    55d2:	bpl.n	55b0 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x58>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    55d4:	cbnz	r1, 55fc <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    55d6:	orn	r2, r2, #127	; 0x7f
    55da:	strb	r2, [r4, #2]
    55dc:	b.n	55e4 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x8c>
  } else {
    m_firstCluster = firstCluster;
    55de:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    55e0:	ldr	r3, [r5, #28]
    m_fileSize = getLe32(dir->fileSize);
    55e2:	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    55e4:	lsls	r3, r7, #26
    55e6:	bmi.n	55ee <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    55e8:	movs	r0, #1

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
    55ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    55ee:	ldr	r1, [r4, #28]
    55f0:	mov	r0, r4
    55f2:	bl	54c4 <FatFile::seekSet(unsigned long)>
    55f6:	cmp	r0, #0
    55f8:	bne.n	55e8 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x90>
    55fa:	b.n	55b0 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x58>
  if (oflag & O_TRUNC) {
    if (!(oflag & O_WRITE)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    55fc:	bl	61a0 <FatPartition::freeChain(unsigned long)>
    5600:	cmp	r0, #0
    5602:	beq.n	55b0 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x58>
    5604:	ldrb	r2, [r4, #2]
    5606:	b.n	55d6 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x7e>

00005608 <FatFile::sync()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    5608:	ldrb	r3, [r0, #0]
    560a:	cbz	r3, 564e <FatFile::sync()+0x46>
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    560c:	push	{r4, r5, lr}
  uint16_t date, time;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    560e:	ldrsb.w	r3, [r0, #2]
    5612:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5614:	sub	sp, #12
    5616:	mov	r4, r0
  uint16_t date, time;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5618:	blt.n	5652 <FatFile::sync()+0x4a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    561a:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    561c:	add.w	r0, r5, #36	; 0x24
    5620:	bl	59e8 <FatCache::sync()>
    5624:	cbnz	r0, 5634 <FatFile::sync()+0x2c>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    5626:	ldrb	r3, [r4, #1]
    5628:	orr.w	r3, r3, #1
    562c:	strb	r3, [r4, #1]
  return false;
    562e:	movs	r0, #0
}
    5630:	add	sp, #12
    5632:	pop	{r4, r5, pc}
    5634:	add.w	r0, r5, #560	; 0x230
    5638:	bl	59e8 <FatCache::sync()>
    563c:	cmp	r0, #0
    563e:	beq.n	5626 <FatFile::sync()+0x1e>
    5640:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5642:	ldr	r3, [r0, #0]
    5644:	ldr	r3, [r3, #20]
    5646:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5648:	cmp	r0, #0
    564a:	beq.n	5626 <FatFile::sync()+0x1e>
    564c:	b.n	5630 <FatFile::sync()+0x28>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    return true;
    564e:	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5650:	bx	lr
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5652:	ldr	r0, [r0, #8]
    5654:	ldr	r1, [r4, #24]
    5656:	adds	r0, #36	; 0x24
    5658:	movs	r2, #1
    565a:	bl	5958 <FatCache::read(unsigned long, unsigned char)>
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    565e:	cmp	r0, #0
    5660:	beq.n	5626 <FatFile::sync()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    5662:	ldrh	r3, [r4, #4]
    5664:	and.w	r3, r3, #15
    5668:	lsls	r3, r3, #5
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    566a:	adds	r5, r0, r3
    566c:	beq.n	5626 <FatFile::sync()+0x1e>
    566e:	ldrb	r3, [r0, r3]
    5670:	cmp	r3, #229	; 0xe5
    5672:	beq.n	5626 <FatFile::sync()+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5674:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5676:	ldr	r2, [pc, #68]	; (56bc <FatFile::sync()+0xb4>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5678:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    567a:	itt	mi
    567c:	ldrmi	r3, [r4, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    567e:	strmi	r3, [r5, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5680:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5682:	ldr	r2, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5684:	strh	r3, [r5, #26]
    5686:	lsrs	r3, r3, #16
    5688:	strh	r3, [r5, #20]
    568a:	cbz	r2, 56a2 <FatFile::sync()+0x9a>
      FsDateTime::callback(&date, &time);
    568c:	add.w	r1, sp, #6
    5690:	add	r0, sp, #4
    5692:	blx	r2
      setLe16(dir->modifyDate, date);
    5694:	ldrh.w	r3, [sp, #4]
    5698:	ldrh.w	r2, [sp, #6]
    569c:	strh	r3, [r5, #24]
    569e:	strh	r3, [r5, #18]
    56a0:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    56a2:	ldrb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
    56a4:	ldr	r5, [r4, #8]
      setLe16(dir->modifyDate, date);
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    56a6:	and.w	r3, r3, #127	; 0x7f
    56aa:	strb	r3, [r4, #2]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    56ac:	add.w	r0, r5, #36	; 0x24
    56b0:	bl	59e8 <FatCache::sync()>
    56b4:	cmp	r0, #0
    56b6:	beq.n	5626 <FatFile::sync()+0x1e>
    56b8:	b.n	5634 <FatFile::sync()+0x2c>
    56ba:	nop
    56bc:	.word	0x20020364

000056c0 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    56c0:	ldrb	r3, [r0, #2]
    56c2:	lsls	r3, r3, #30
    56c4:	bpl.n	56fc <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    56c6:	ldr	r3, [r0, #32]
    56c8:	cbz	r3, 56f8 <FatFile::truncate()+0x38>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    56ca:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    56cc:	ldr	r1, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    56ce:	sub	sp, #8
    56d0:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    56d2:	cbnz	r1, 5712 <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    56d4:	str	r3, [sp, #4]
    m_firstCluster = 0;
    56d6:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    56d8:	mov	r1, r3
    56da:	ldr	r0, [r4, #8]
    56dc:	bl	61a0 <FatPartition::freeChain(unsigned long)>
    56e0:	cbz	r0, 570e <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    56e2:	ldrb	r3, [r4, #2]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    56e4:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    56e6:	ldr	r1, [r4, #20]
    56e8:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    56ea:	orn	r3, r3, #127	; 0x7f
    56ee:	strb	r3, [r4, #2]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    56f0:	cbnz	r2, 572e <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    56f2:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    56f4:	add	sp, #8
    56f6:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    56f8:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    56fa:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    56fc:	movs	r0, #0
}
    56fe:	bx	lr
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5700:	mvn.w	r2, #4026531840	; 0xf0000000
    5704:	ldr	r1, [r4, #16]
    5706:	ldr	r0, [r4, #8]
    5708:	bl	5b98 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    570c:	cbnz	r0, 5726 <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    570e:	movs	r0, #0
    5710:	b.n	56f4 <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    5712:	add	r2, sp, #8
    5714:	movs	r3, #0
    5716:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    571a:	ldr	r0, [r0, #8]
    571c:	bl	5a48 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    5720:	cmp	r0, #0
    5722:	blt.n	570e <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    5724:	bne.n	5700 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    5726:	ldr	r3, [sp, #4]
    5728:	cmp	r3, #0
    572a:	beq.n	56e2 <FatFile::truncate()+0x22>
    572c:	b.n	56d8 <FatFile::truncate()+0x18>
    572e:	mov	r0, r4
    5730:	bl	4f04 <FatFile::sync() [clone .part.39]>
    5734:	b.n	56f4 <FatFile::truncate()+0x34>
    5736:	nop

00005738 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5738:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    573c:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    573e:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5740:	sub	sp, #12
    5742:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5744:	bmi.n	5758 <FatFile::write(void const*, unsigned int)+0x20>

  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5746:	ldrb	r3, [r4, #1]
    5748:	orr.w	r3, r3, #1
    574c:	strb	r3, [r4, #1]
  return -1;
    574e:	mov.w	r0, #4294967295
}
    5752:	add	sp, #12
    5754:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5758:	mov	r8, r1
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
    575a:	lsls	r1, r3, #29
    575c:	mov	r9, r2
    575e:	bmi.w	590a <FatFile::write(void const*, unsigned int)+0x1d2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    5762:	ldr	r3, [r4, #20]
    5764:	mvns	r2, r3
    5766:	cmp	r9, r2
    5768:	bhi.n	5746 <FatFile::write(void const*, unsigned int)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    576a:	cmp.w	r9, #0
    576e:	beq.w	5922 <FatFile::write(void const*, unsigned int)+0x1ea>
    5772:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5774:	mov.w	sl, #0
    5778:	b.n	57f0 <FatFile::write(void const*, unsigned int)+0xb8>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    577a:	cmp	r1, #0
    577c:	beq.w	5888 <FatFile::write(void const*, unsigned int)+0x150>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    5780:	ldrb	r2, [r4, #2]
    5782:	lsls	r2, r2, #25
    5784:	bpl.w	58ac <FatFile::write(void const*, unsigned int)+0x174>
    5788:	ldr	r2, [r4, #28]
    578a:	cmp	r2, r3
    578c:	bls.w	58ac <FatFile::write(void const*, unsigned int)+0x174>
          m_curCluster++;
    5790:	adds	r1, #1
    5792:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5794:	bl	5a3c <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5798:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    579c:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    579e:	bcc.n	5852 <FatFile::write(void const*, unsigned int)+0x11a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    57a0:	cmp.w	r6, #1024	; 0x400
    57a4:	ldr	r0, [r4, #8]
    57a6:	bcc.n	586c <FatFile::write(void const*, unsigned int)+0x134>
      // use multiple sector write command
      uint8_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    57a8:	ldrb	r2, [r0, #4]
    57aa:	ldr	r7, [r0, #44]	; 0x2c
    57ac:	subs	r2, r2, r5
      uint8_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    57ae:	ubfx	r3, r6, #9, #8
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint8_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    57b2:	uxtb	r2, r2
    57b4:	cmp	r3, r2
    57b6:	it	cs
    57b8:	movcs	r3, r2
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      if (m_vol->cacheSectorNumber() <= sector
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    57ba:	cmp	r7, r1
      uint8_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint8_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    57bc:	mov.w	r5, r3, lsl #9
      if (m_vol->cacheSectorNumber() <= sector
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    57c0:	bhi.n	57d4 <FatFile::write(void const*, unsigned int)+0x9c>
    57c2:	add	r7, r3
    57c4:	cmp	r7, r1
    57c6:	bls.n	57d4 <FatFile::write(void const*, unsigned int)+0x9c>
    57c8:	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    57cc:	mov.w	r2, #4294967295
    57d0:	str	r2, [r0, #44]	; 0x2c
    57d2:	ldr	r0, [r4, #8]
    57d4:	ldr	r0, [r0, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    57d6:	ldr	r7, [r0, #0]
    57d8:	mov	r2, r8
    57da:	ldr	r7, [r7, #28]
    57dc:	blx	r7
        // invalidate cache if sector is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    57de:	cmp	r0, #0
    57e0:	beq.n	5746 <FatFile::write(void const*, unsigned int)+0xe>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    57e2:	ldr	r3, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    57e4:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    57e6:	add	r3, r5
    src += n;
    57e8:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    57ea:	str	r3, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    57ec:	beq.w	5922 <FatFile::write(void const*, unsigned int)+0x1ea>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    57f0:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    57f2:	ldr	r1, [r4, #16]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    57f4:	ldrb	r2, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    57f6:	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    57fa:	ubfx	r7, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    57fe:	bne.n	5842 <FatFile::write(void const*, unsigned int)+0x10a>
    5800:	cmp	r7, #0
    5802:	beq.n	577a <FatFile::write(void const*, unsigned int)+0x42>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5804:	bl	5a3c <FatPartition::clusterStartSector(unsigned long) const>
    5808:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    580a:	rsb	r5, r7, #512	; 0x200
    580e:	cmp	r5, r6
    5810:	ldr	r0, [r4, #8]
    5812:	it	cs
    5814:	movcs	r5, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    5816:	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5818:	adds	r0, #36	; 0x24
    581a:	bl	5958 <FatCache::read(unsigned long, unsigned char)>
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    581e:	cmp	r0, #0
    5820:	beq.n	5746 <FatFile::write(void const*, unsigned int)+0xe>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    5822:	add	r0, r7
    5824:	mov	r2, r5
    5826:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5828:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    582a:	bl	9404 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    582e:	cmp.w	r7, #512	; 0x200
    5832:	bne.n	57e2 <FatFile::write(void const*, unsigned int)+0xaa>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5834:	ldr	r0, [r4, #8]
    5836:	adds	r0, #36	; 0x24
    5838:	bl	59e8 <FatCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    583c:	cmp	r0, #0
    583e:	bne.n	57e2 <FatFile::write(void const*, unsigned int)+0xaa>
    5840:	b.n	5746 <FatFile::write(void const*, unsigned int)+0xe>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5842:	bl	5a3c <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    5846:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5848:	cmp	r7, #0
    584a:	bne.n	580a <FatFile::write(void const*, unsigned int)+0xd2>
    584c:	cmp.w	r6, #512	; 0x200
    5850:	bcs.n	57a0 <FatFile::write(void const*, unsigned int)+0x68>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5852:	ldr	r2, [r4, #20]
    5854:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5856:	ldr	r0, [r4, #8]
    5858:	cmp.w	r6, #512	; 0x200
    585c:	mov	r5, r6
    585e:	it	cs
    5860:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5864:	cmp	r2, r3
    5866:	bcc.n	58ee <FatFile::write(void const*, unsigned int)+0x1b6>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    5868:	movs	r2, #5
    586a:	b.n	5818 <FatFile::write(void const*, unsigned int)+0xe0>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    586c:	ldr	r3, [r0, #44]	; 0x2c
    586e:	cmp	r3, r1
    5870:	beq.n	58fc <FatFile::write(void const*, unsigned int)+0x1c4>
    5872:	ldr	r0, [r0, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5874:	ldr	r3, [r0, #0]
    5876:	mov	r2, r8
    5878:	ldr	r3, [r3, #24]
    587a:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    587c:	cmp	r0, #0
    587e:	beq.w	5746 <FatFile::write(void const*, unsigned int)+0xe>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5882:	mov.w	r5, #512	; 0x200
    5886:	b.n	57e2 <FatFile::write(void const*, unsigned int)+0xaa>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5888:	ldr	r1, [r4, #32]
    588a:	cmp	r1, #0
    588c:	bne.n	5792 <FatFile::write(void const*, unsigned int)+0x5a>
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    588e:	add.w	r2, r4, #16
    5892:	bl	5ce8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5896:	cmp	r0, #0
    5898:	beq.w	5746 <FatFile::write(void const*, unsigned int)+0xe>
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    589c:	ldrb	r3, [r4, #2]
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    589e:	ldr	r1, [r4, #16]
    58a0:	str	r1, [r4, #32]
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    58a2:	orn	r3, r3, #63	; 0x3f
    58a6:	strb	r3, [r4, #2]
    58a8:	ldr	r0, [r4, #8]
    58aa:	b.n	5794 <FatFile::write(void const*, unsigned int)+0x5c>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    58ac:	add.w	fp, r4, #16
    58b0:	mov	r2, fp
    58b2:	bl	5a48 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    58b6:	cmp	r0, #0
    58b8:	blt.w	5746 <FatFile::write(void const*, unsigned int)+0xe>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    58bc:	bne.n	594c <FatFile::write(void const*, unsigned int)+0x214>
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    58be:	ldr	r3, [r4, #16]
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    58c0:	ldr	r0, [r4, #8]
    58c2:	str	r3, [sp, #4]
    58c4:	mov	r2, fp
    58c6:	mov	r1, r3
    58c8:	bl	5ce8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    58cc:	cmp	r0, #0
    58ce:	beq.w	5746 <FatFile::write(void const*, unsigned int)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    58d2:	ldr	r3, [sp, #4]
    58d4:	cbz	r3, 5918 <FatFile::write(void const*, unsigned int)+0x1e0>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    58d6:	ldr	r1, [r4, #16]
    58d8:	adds	r3, #1
    58da:	cmp	r1, r3
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    58dc:	ldrb	r3, [r4, #2]
    58de:	it	ne
    58e0:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    58e4:	orn	r3, r3, #127	; 0x7f
    58e8:	strb	r3, [r4, #2]
    58ea:	ldr	r0, [r4, #8]
    58ec:	b.n	5794 <FatFile::write(void const*, unsigned int)+0x5c>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    58ee:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    58f0:	tst.w	r3, #32
    58f4:	ite	eq
    58f6:	moveq	r2, #1
    58f8:	movne	r2, #5
    58fa:	b.n	5818 <FatFile::write(void const*, unsigned int)+0xe0>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    58fc:	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    5900:	mov.w	r3, #4294967295
    5904:	str	r3, [r0, #44]	; 0x2c
    5906:	ldr	r0, [r4, #8]
    5908:	b.n	5872 <FatFile::write(void const*, unsigned int)+0x13a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
    if (!seekSet(m_fileSize)) {
    590a:	ldr	r1, [r0, #28]
    590c:	bl	54c4 <FatFile::seekSet(unsigned long)>
    5910:	cmp	r0, #0
    5912:	beq.w	5746 <FatFile::write(void const*, unsigned int)+0xe>
    5916:	b.n	5762 <FatFile::write(void const*, unsigned int)+0x2a>
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5918:	ldrb	r3, [r4, #2]
    591a:	ldr	r1, [r4, #16]
    591c:	orr.w	r3, r3, #64	; 0x40
    5920:	b.n	58e4 <FatFile::write(void const*, unsigned int)+0x1ac>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    5922:	ldr	r2, [r4, #28]
    5924:	cmp	r2, r3
    5926:	bcc.n	593a <FatFile::write(void const*, unsigned int)+0x202>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5928:	ldr	r3, [pc, #40]	; (5954 <FatFile::write(void const*, unsigned int)+0x21c>)
    592a:	ldr	r3, [r3, #0]
    592c:	cbz	r3, 5948 <FatFile::write(void const*, unsigned int)+0x210>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    592e:	ldrb	r3, [r4, #2]
    5930:	orn	r3, r3, #127	; 0x7f
    5934:	mov	r0, r9
    5936:	strb	r3, [r4, #2]
    5938:	b.n	5752 <FatFile::write(void const*, unsigned int)+0x1a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    593a:	ldrb	r2, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    593c:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    593e:	orn	r3, r2, #127	; 0x7f
    5942:	mov	r0, r9
    5944:	strb	r3, [r4, #2]
    5946:	b.n	5752 <FatFile::write(void const*, unsigned int)+0x1a>
    5948:	mov	r0, r9
    594a:	b.n	5752 <FatFile::write(void const*, unsigned int)+0x1a>
    594c:	ldr	r0, [r4, #8]
    594e:	ldr	r1, [r4, #16]
    5950:	b.n	5794 <FatFile::write(void const*, unsigned int)+0x5c>
    5952:	nop
    5954:	.word	0x20020364

00005958 <FatCache::read(unsigned long, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    5958:	push	{r3, r4, r5, r6, r7, lr}
    595a:	mov	r7, r1
  if (m_lbn != sector) {
    595c:	ldr	r1, [r0, #8]
    595e:	cmp	r1, r7
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    5960:	mov	r5, r0
    5962:	mov	r4, r2
  if (m_lbn != sector) {
    5964:	beq.n	5984 <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5966:	ldrb	r3, [r0, #0]
    5968:	lsls	r0, r3, #31
    596a:	bmi.n	5996 <FatCache::read(unsigned long, unsigned char)+0x3e>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    596c:	lsls	r3, r4, #29
    596e:	add.w	r6, r5, #12
    5972:	bpl.n	59b8 <FatCache::read(unsigned long, unsigned char)+0x60>
    5974:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    5976:	and.w	r4, r4, #3
    597a:	orrs	r4, r3
    597c:	strb	r4, [r5, #0]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    597e:	str	r7, [r5, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;
    5980:	mov	r0, r6
    5982:	pop	{r3, r4, r5, r6, r7, pc}
    5984:	mov	r6, r0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    5986:	and.w	r4, r4, #3
    598a:	ldrsb.w	r3, [r6], #12
    598e:	orrs	r4, r3
    5990:	strb	r4, [r5, #0]
  return &m_buffer;
    5992:	mov	r0, r6
    5994:	pop	{r3, r4, r5, r6, r7, pc}
    5996:	ldr	r3, [r5, #4]
    5998:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    599a:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    599c:	add.w	r6, r5, #12
    59a0:	ldr	r3, [r3, #24]
    59a2:	mov	r2, r6
    59a4:	blx	r3
    59a6:	cbz	r0, 59ca <FatCache::read(unsigned long, unsigned char)+0x72>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    59a8:	ldrb	r3, [r5, #0]
    59aa:	lsls	r2, r3, #30
    59ac:	bmi.n	59ce <FatCache::read(unsigned long, unsigned char)+0x76>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    59ae:	bic.w	r3, r3, #1
    59b2:	strb	r3, [r5, #0]
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    59b4:	lsls	r3, r4, #29
    59b6:	bmi.n	5974 <FatCache::read(unsigned long, unsigned char)+0x1c>
    59b8:	ldr	r3, [r5, #4]
    59ba:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    59bc:	ldr	r3, [r0, #0]
    59be:	mov	r2, r6
    59c0:	ldr	r3, [r3, #8]
    59c2:	mov	r1, r7
    59c4:	blx	r3
      if (!m_part->readSector(sector, m_buffer.data)) {
    59c6:	cmp	r0, #0
    59c8:	bne.n	5974 <FatCache::read(unsigned long, unsigned char)+0x1c>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    59ca:	movs	r0, #0
    59cc:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    59ce:	ldr	r3, [r5, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    59d0:	ldr	r2, [r5, #8]
    59d2:	ldr	r0, [r3, #0]
    59d4:	ldr	r1, [r3, #16]
    59d6:	ldr	r3, [r0, #0]
    59d8:	add	r1, r2
    59da:	ldr	r3, [r3, #24]
    59dc:	mov	r2, r6
    59de:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    59e0:	cmp	r0, #0
    59e2:	beq.n	59ca <FatCache::read(unsigned long, unsigned char)+0x72>
    59e4:	ldrb	r3, [r5, #0]
    59e6:	b.n	59ae <FatCache::read(unsigned long, unsigned char)+0x56>

000059e8 <FatCache::sync()>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    59e8:	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    59ea:	ldrb	r3, [r0, #0]
    59ec:	lsls	r1, r3, #31
    59ee:	bmi.n	59f6 <FatCache::sync()+0xe>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
    59f0:	movs	r4, #1

fail:
  return false;
}
    59f2:	mov	r0, r4
    59f4:	pop	{r3, r4, r5, r6, r7, pc}
    59f6:	ldr	r3, [r0, #4]
    59f8:	ldr	r1, [r0, #8]
    59fa:	mov	r5, r0
    59fc:	ldr	r0, [r3, #0]
    59fe:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5a00:	add.w	r6, r5, #12
    5a04:	ldr	r3, [r3, #24]
    5a06:	mov	r2, r6
    5a08:	blx	r3
    5a0a:	mov	r4, r0
    5a0c:	cbz	r0, 5a36 <FatCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5a0e:	ldrb	r3, [r5, #0]
    5a10:	lsls	r2, r3, #30
    5a12:	bmi.n	5a1e <FatCache::sync()+0x36>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5a14:	bic.w	r3, r3, #1
    5a18:	strb	r3, [r5, #0]
  }
  return true;

fail:
  return false;
}
    5a1a:	mov	r0, r4
    5a1c:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5a1e:	ldr	r3, [r5, #4]
    5a20:	ldr	r1, [r5, #8]
    5a22:	ldr	r0, [r3, #0]
    5a24:	ldr	r7, [r3, #16]
    5a26:	ldr	r3, [r0, #0]
    5a28:	mov	r2, r6
    5a2a:	add	r1, r7
    5a2c:	ldr	r3, [r3, #24]
    5a2e:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5a30:	cbz	r0, 5a36 <FatCache::sync()+0x4e>
    5a32:	ldrb	r3, [r5, #0]
    5a34:	b.n	5a14 <FatCache::sync()+0x2c>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    5a36:	movs	r4, #0
}
    5a38:	mov	r0, r4
    5a3a:	pop	{r3, r4, r5, r6, r7, pc}

00005a3c <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5a3c:	ldrb	r3, [r0, #6]
    5a3e:	ldr	r0, [r0, #20]
    5a40:	subs	r1, #2
    5a42:	lsls	r1, r3
}
    5a44:	add	r0, r1
    5a46:	bx	lr

00005a48 <FatPartition::fatGet(unsigned long, unsigned long*)>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5a48:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a4c:	ldrb	r3, [r0, #7]
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5a4e:	cmp	r3, #32
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5a50:	mov	r4, r0
    5a52:	mov	r5, r1
    5a54:	mov	r7, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5a56:	beq.n	5ae4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5a58:	cmp	r3, #16
    5a5a:	bne.n	5aae <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5a5c:	ldr	r3, [r0, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5a5e:	ldr.w	r1, [r0, #568]	; 0x238
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5a62:	ubfx	r6, r5, #8, #8
    5a66:	add	r6, r3
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5a68:	cmp	r6, r1

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5a6a:	ldrb.w	r3, [r0, #560]	; 0x230
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5a6e:	beq.n	5ab6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x6e>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5a70:	lsls	r0, r3, #31
    5a72:	bmi.n	5abc <FatPartition::fatGet(unsigned long, unsigned long*)+0x74>
    5a74:	add.w	r8, r4, #572	; 0x23c
    5a78:	ldr.w	r3, [r4, #564]	; 0x234
    5a7c:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5a7e:	ldr	r3, [r0, #0]
    5a80:	mov	r2, r8
    5a82:	ldr	r3, [r3, #8]
    5a84:	mov	r1, r6
    5a86:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5a88:	cbz	r0, 5aae <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5a8a:	str.w	r6, [r4, #568]	; 0x238
    5a8e:	movs	r3, #2
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5a90:	uxtb	r5, r5
    5a92:	add.w	r5, r4, r5, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    5a96:	strb.w	r3, [r4, #560]	; 0x230
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    5a9a:	ldrh.w	r3, [r5, #572]	; 0x23c
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    5a9e:	ldr	r2, [r4, #28]
    5aa0:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    5aa2:	itte	ls
    5aa4:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    5aa6:	strls	r3, [r7, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    5aa8:	movhi	r0, #0
    5aaa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    5aae:	mov.w	r0, #4294967295
    5ab2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ab6:	orr.w	r3, r3, #2
    5aba:	b.n	5a90 <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    5abc:	ldr.w	r3, [r4, #564]	; 0x234
    5ac0:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5ac2:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5ac4:	add.w	r8, r4, #572	; 0x23c
    5ac8:	ldr	r3, [r3, #24]
    5aca:	mov	r2, r8
    5acc:	blx	r3
    5ace:	cmp	r0, #0
    5ad0:	beq.n	5aae <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5ad2:	ldrb.w	r3, [r4, #560]	; 0x230
    5ad6:	lsls	r2, r3, #30
    5ad8:	bmi.n	5b58 <FatPartition::fatGet(unsigned long, unsigned long*)+0x110>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5ada:	bic.w	r3, r3, #1
    5ade:	strb.w	r3, [r4, #560]	; 0x230
    5ae2:	b.n	5a78 <FatPartition::fatGet(unsigned long, unsigned long*)+0x30>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5ae4:	ldr	r6, [r0, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5ae6:	ldr.w	r1, [r0, #568]	; 0x238

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5aea:	ldrb.w	r3, [r0, #560]	; 0x230

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5aee:	add.w	r6, r6, r5, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5af2:	cmp	r6, r1
    5af4:	beq.n	5b2a <FatPartition::fatGet(unsigned long, unsigned long*)+0xe2>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5af6:	lsls	r0, r3, #31
    5af8:	bmi.n	5b30 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe8>
    5afa:	add.w	r8, r4, #572	; 0x23c
    5afe:	ldr.w	r3, [r4, #564]	; 0x234
    5b02:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5b04:	ldr	r3, [r0, #0]
    5b06:	mov	r2, r8
    5b08:	ldr	r3, [r3, #8]
    5b0a:	mov	r1, r6
    5b0c:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5b0e:	cmp	r0, #0
    5b10:	beq.n	5aae <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5b12:	str.w	r6, [r4, #568]	; 0x238
    5b16:	movs	r3, #2
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5b18:	and.w	r5, r5, #127	; 0x7f
    5b1c:	add.w	r5, r4, r5, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    5b20:	strb.w	r3, [r4, #560]	; 0x230
    5b24:	ldr.w	r3, [r5, #572]	; 0x23c
    5b28:	b.n	5a9e <FatPartition::fatGet(unsigned long, unsigned long*)+0x56>
    5b2a:	orr.w	r3, r3, #2
    5b2e:	b.n	5b18 <FatPartition::fatGet(unsigned long, unsigned long*)+0xd0>
    5b30:	ldr.w	r3, [r4, #564]	; 0x234
    5b34:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5b36:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5b38:	add.w	r8, r4, #572	; 0x23c
    5b3c:	ldr	r3, [r3, #24]
    5b3e:	mov	r2, r8
    5b40:	blx	r3
    5b42:	cmp	r0, #0
    5b44:	beq.n	5aae <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5b46:	ldrb.w	r3, [r4, #560]	; 0x230
    5b4a:	lsls	r2, r3, #30
    5b4c:	bmi.n	5b78 <FatPartition::fatGet(unsigned long, unsigned long*)+0x130>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5b4e:	bic.w	r3, r3, #1
    5b52:	strb.w	r3, [r4, #560]	; 0x230
    5b56:	b.n	5afe <FatPartition::fatGet(unsigned long, unsigned long*)+0xb6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5b58:	ldr.w	r3, [r4, #564]	; 0x234
    5b5c:	ldr.w	r2, [r4, #568]	; 0x238
    5b60:	ldr	r0, [r3, #0]
    5b62:	ldr	r1, [r3, #16]
    5b64:	ldr	r3, [r0, #0]
    5b66:	add	r1, r2
    5b68:	ldr	r3, [r3, #24]
    5b6a:	mov	r2, r8
    5b6c:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5b6e:	cmp	r0, #0
    5b70:	beq.n	5aae <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
    5b72:	ldrb.w	r3, [r4, #560]	; 0x230
    5b76:	b.n	5ada <FatPartition::fatGet(unsigned long, unsigned long*)+0x92>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5b78:	ldr.w	r3, [r4, #564]	; 0x234
    5b7c:	ldr.w	r2, [r4, #568]	; 0x238
    5b80:	ldr	r0, [r3, #0]
    5b82:	ldr	r1, [r3, #16]
    5b84:	ldr	r3, [r0, #0]
    5b86:	add	r1, r2
    5b88:	ldr	r3, [r3, #24]
    5b8a:	mov	r2, r8
    5b8c:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5b8e:	cmp	r0, #0
    5b90:	beq.n	5aae <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
    5b92:	ldrb.w	r3, [r4, #560]	; 0x230
    5b96:	b.n	5b4e <FatPartition::fatGet(unsigned long, unsigned long*)+0x106>

00005b98 <FatPartition::fatPut(unsigned long, unsigned long)>:
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5b98:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b9c:	ldrb	r3, [r0, #7]
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5b9e:	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5ba0:	mov	r4, r0
    5ba2:	mov	r5, r1
    5ba4:	mov	r7, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5ba6:	beq.n	5bfc <FatPartition::fatPut(unsigned long, unsigned long)+0x64>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    5ba8:	cmp	r3, #16
    5baa:	beq.n	5bb2 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    5bac:	movs	r0, #0
    5bae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5bb2:	ldr	r3, [r0, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5bb4:	ldr.w	r1, [r0, #568]	; 0x238
    return true;
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5bb8:	ubfx	r6, r5, #8, #8
    5bbc:	add	r6, r3
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5bbe:	cmp	r6, r1

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5bc0:	ldrb.w	r3, [r0, #560]	; 0x230
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5bc4:	beq.n	5c46 <FatPartition::fatPut(unsigned long, unsigned long)+0xae>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5bc6:	lsls	r0, r3, #31
    5bc8:	bmi.n	5c52 <FatPartition::fatPut(unsigned long, unsigned long)+0xba>
    5bca:	add.w	r8, r4, #572	; 0x23c
    5bce:	ldr.w	r3, [r4, #564]	; 0x234
    5bd2:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5bd4:	ldr	r3, [r0, #0]
    5bd6:	mov	r2, r8
    5bd8:	ldr	r3, [r3, #8]
    5bda:	mov	r1, r6
    5bdc:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5bde:	cmp	r0, #0
    5be0:	beq.n	5bac <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5be2:	str.w	r6, [r4, #568]	; 0x238
    5be6:	movs	r3, #3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5be8:	uxtb	r5, r5
    5bea:	add.w	r5, r4, r5, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    5bee:	strb.w	r3, [r4, #560]	; 0x230
    5bf2:	strh.w	r7, [r5, #572]	; 0x23c
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    5bf6:	movs	r0, #1
    5bf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5bfc:	ldr	r6, [r0, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5bfe:	ldr.w	r1, [r0, #568]	; 0x238

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5c02:	ldrb.w	r3, [r0, #560]	; 0x230

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5c06:	add.w	r6, r6, r5, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5c0a:	cmp	r1, r6
    5c0c:	beq.n	5c4c <FatPartition::fatPut(unsigned long, unsigned long)+0xb4>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5c0e:	lsls	r0, r3, #31
    5c10:	bmi.n	5c7a <FatPartition::fatPut(unsigned long, unsigned long)+0xe2>
    5c12:	add.w	r8, r4, #572	; 0x23c
    5c16:	ldr.w	r3, [r4, #564]	; 0x234
    5c1a:	ldr	r0, [r3, #0]
    5c1c:	ldr	r3, [r0, #0]
    5c1e:	mov	r2, r8
    5c20:	ldr	r3, [r3, #8]
    5c22:	mov	r1, r6
    5c24:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5c26:	cmp	r0, #0
    5c28:	beq.n	5bac <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5c2a:	str.w	r6, [r4, #568]	; 0x238
    5c2e:	movs	r3, #3
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5c30:	and.w	r5, r5, #127	; 0x7f
    5c34:	add.w	r5, r4, r5, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    5c38:	strb.w	r3, [r4, #560]	; 0x230
    5c3c:	str.w	r7, [r5, #572]	; 0x23c
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    5c40:	movs	r0, #1
    5c42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c46:	orr.w	r3, r3, #3
    5c4a:	b.n	5be8 <FatPartition::fatPut(unsigned long, unsigned long)+0x50>
    5c4c:	orr.w	r3, r3, #3
    5c50:	b.n	5c30 <FatPartition::fatPut(unsigned long, unsigned long)+0x98>
    5c52:	ldr.w	r3, [r4, #564]	; 0x234
    5c56:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5c58:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5c5a:	add.w	r8, r4, #572	; 0x23c
    5c5e:	ldr	r3, [r3, #24]
    5c60:	mov	r2, r8
    5c62:	blx	r3
    5c64:	cmp	r0, #0
    5c66:	beq.n	5bac <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5c68:	ldrb.w	r3, [r4, #560]	; 0x230
    5c6c:	lsls	r2, r3, #30
    5c6e:	bmi.n	5ca2 <FatPartition::fatPut(unsigned long, unsigned long)+0x10a>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5c70:	bic.w	r3, r3, #1
    5c74:	strb.w	r3, [r4, #560]	; 0x230
    5c78:	b.n	5bce <FatPartition::fatPut(unsigned long, unsigned long)+0x36>
    5c7a:	ldr.w	r3, [r4, #564]	; 0x234
    5c7e:	ldr	r0, [r3, #0]
    5c80:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5c82:	add.w	r8, r4, #572	; 0x23c
    5c86:	ldr	r3, [r3, #24]
    5c88:	mov	r2, r8
    5c8a:	blx	r3
    5c8c:	cmp	r0, #0
    5c8e:	beq.n	5bac <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5c90:	ldrb.w	r3, [r4, #560]	; 0x230
    5c94:	lsls	r2, r3, #30
    5c96:	bmi.n	5cc4 <FatPartition::fatPut(unsigned long, unsigned long)+0x12c>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5c98:	bic.w	r3, r3, #1
    5c9c:	strb.w	r3, [r4, #560]	; 0x230
    5ca0:	b.n	5c16 <FatPartition::fatPut(unsigned long, unsigned long)+0x7e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5ca2:	ldr.w	r3, [r4, #564]	; 0x234
    5ca6:	ldr.w	r2, [r4, #568]	; 0x238
    5caa:	ldr	r0, [r3, #0]
    5cac:	ldr	r1, [r3, #16]
    5cae:	ldr	r3, [r0, #0]
    5cb0:	add	r1, r2
    5cb2:	ldr	r3, [r3, #24]
    5cb4:	mov	r2, r8
    5cb6:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5cb8:	cmp	r0, #0
    5cba:	beq.w	5bac <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
    5cbe:	ldrb.w	r3, [r4, #560]	; 0x230
    5cc2:	b.n	5c70 <FatPartition::fatPut(unsigned long, unsigned long)+0xd8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5cc4:	ldr.w	r3, [r4, #564]	; 0x234
    5cc8:	ldr.w	r2, [r4, #568]	; 0x238
    5ccc:	ldr	r0, [r3, #0]
    5cce:	ldr	r1, [r3, #16]
    5cd0:	ldr	r3, [r0, #0]
    5cd2:	add	r1, r2
    5cd4:	ldr	r3, [r3, #24]
    5cd6:	mov	r2, r8
    5cd8:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5cda:	cmp	r0, #0
    5cdc:	beq.w	5bac <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
    5ce0:	ldrb.w	r3, [r4, #560]	; 0x230
    5ce4:	b.n	5c98 <FatPartition::fatPut(unsigned long, unsigned long)+0x100>
    5ce6:	nop

00005ce8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    5ce8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5cec:	mov	r4, r0
    5cee:	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
    5cf0:	mov	r7, r1
    5cf2:	cmp	r1, #0
    5cf4:	bne.w	5e00 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x118>
    5cf8:	ldr	r6, [r0, #12]
    5cfa:	ldr	r3, [r4, #28]
    5cfc:	mov	r5, r6
    5cfe:	b.n	5d42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5a>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5d00:	ldrb.w	r3, [r4, #560]	; 0x230
    5d04:	lsls	r0, r3, #31
    5d06:	bmi.n	5d86 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x9e>
    5d08:	add.w	sl, r4, #572	; 0x23c
    5d0c:	ldr.w	r3, [r4, #564]	; 0x234
    5d10:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5d12:	ldr	r3, [r0, #0]
    5d14:	mov	r2, sl
    5d16:	ldr	r3, [r3, #8]
    5d18:	mov	r1, r9
    5d1a:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5d1c:	cbz	r0, 5d7e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    5d1e:	ldr	r3, [r4, #28]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5d20:	str.w	r9, [r4, #568]	; 0x238
    5d24:	movs	r1, #2
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5d26:	uxtb	r2, r5
    5d28:	add.w	r2, r4, r2, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    5d2c:	strb.w	r1, [r4, #560]	; 0x230
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    5d30:	ldrh.w	r2, [r2, #572]	; 0x23c
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    5d34:	cmp	r2, r3
    5d36:	bhi.n	5d3e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
    int8_t fg = fatGet(find, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    5d38:	cmp	r2, #0
    5d3a:	beq.w	5e6c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x184>
      break;
    }
    if (find == start) {
    5d3e:	cmp	r5, r6
    5d40:	beq.n	5d7e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    5d42:	ldrb	r2, [r4, #7]
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
    5d44:	adds	r5, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
    5d46:	cmp	r5, r3
    5d48:	it	hi
    5d4a:	movhi	r5, #2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5d4c:	cmp	r2, #32
    5d4e:	beq.n	5dae <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xc6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5d50:	cmp	r2, #16
    5d52:	bne.n	5d7e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5d54:	ldr	r2, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5d56:	ldr.w	r1, [r4, #568]	; 0x238
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5d5a:	ubfx	r9, r5, #8, #8
    5d5e:	add	r9, r2
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5d60:	cmp	r9, r1
    5d62:	bne.n	5d00 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    5d64:	ldrb.w	r1, [r4, #560]	; 0x230
    5d68:	orr.w	r1, r1, #2
    5d6c:	b.n	5d26 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // link clusters
    if (!fatPut(current, find)) {
    5d6e:	mov	r1, r7
    5d70:	mov	r0, r4
    5d72:	mov	r2, r5
    5d74:	bl	5b98 <FatPartition::fatPut(unsigned long, unsigned long)>
    5d78:	cmp	r0, #0
    5d7a:	bne.w	5e88 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x1a0>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    5d7e:	movs	r6, #0
}
    5d80:	mov	r0, r6
    5d82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d86:	ldr.w	r3, [r4, #564]	; 0x234
    5d8a:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5d8c:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5d8e:	add.w	sl, r4, #572	; 0x23c
    5d92:	ldr	r3, [r3, #24]
    5d94:	mov	r2, sl
    5d96:	blx	r3
    5d98:	cmp	r0, #0
    5d9a:	beq.n	5d7e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5d9c:	ldrb.w	r3, [r4, #560]	; 0x230
    5da0:	lsls	r2, r3, #30
    5da2:	bmi.n	5e2c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x144>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5da4:	bic.w	r3, r3, #1
    5da8:	strb.w	r3, [r4, #560]	; 0x230
    5dac:	b.n	5d0c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5dae:	ldr	r2, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5db0:	ldr.w	r1, [r4, #568]	; 0x238

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5db4:	add.w	r9, r2, r5, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5db8:	cmp	r1, r9
    5dba:	beq.n	5df6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10e>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5dbc:	ldrb.w	r3, [r4, #560]	; 0x230
    5dc0:	lsls	r0, r3, #31
    5dc2:	bmi.n	5e04 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x11c>
    5dc4:	add.w	sl, r4, #572	; 0x23c
    5dc8:	ldr.w	r3, [r4, #564]	; 0x234
    5dcc:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5dce:	ldr	r3, [r0, #0]
    5dd0:	mov	r2, sl
    5dd2:	ldr	r3, [r3, #8]
    5dd4:	mov	r1, r9
    5dd6:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5dd8:	cmp	r0, #0
    5dda:	beq.n	5d7e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    5ddc:	ldr	r3, [r4, #28]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5dde:	str.w	r9, [r4, #568]	; 0x238
    5de2:	movs	r1, #2
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5de4:	and.w	r2, r5, #127	; 0x7f
    5de8:	add.w	r2, r4, r2, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    5dec:	strb.w	r1, [r4, #560]	; 0x230
    5df0:	ldr.w	r2, [r2, #572]	; 0x23c
    5df4:	b.n	5d34 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4c>
    5df6:	ldrb.w	r1, [r4, #560]	; 0x230
    5dfa:	orr.w	r1, r1, #2
    5dfe:	b.n	5de4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xfc>
    5e00:	mov	r6, r1
    5e02:	b.n	5cfa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x12>
    5e04:	ldr.w	r3, [r4, #564]	; 0x234
    5e08:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5e0a:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5e0c:	add.w	sl, r4, #572	; 0x23c
    5e10:	ldr	r3, [r3, #24]
    5e12:	mov	r2, sl
    5e14:	blx	r3
    5e16:	cmp	r0, #0
    5e18:	beq.n	5d7e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5e1a:	ldrb.w	r3, [r4, #560]	; 0x230
    5e1e:	lsls	r2, r3, #30
    5e20:	bmi.n	5e4c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x164>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5e22:	bic.w	r3, r3, #1
    5e26:	strb.w	r3, [r4, #560]	; 0x230
    5e2a:	b.n	5dc8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xe0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5e2c:	ldr.w	r3, [r4, #564]	; 0x234
    5e30:	ldr.w	r2, [r4, #568]	; 0x238
    5e34:	ldr	r0, [r3, #0]
    5e36:	ldr	r1, [r3, #16]
    5e38:	ldr	r3, [r0, #0]
    5e3a:	add	r1, r2
    5e3c:	ldr	r3, [r3, #24]
    5e3e:	mov	r2, sl
    5e40:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5e42:	cmp	r0, #0
    5e44:	beq.n	5d7e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    5e46:	ldrb.w	r3, [r4, #560]	; 0x230
    5e4a:	b.n	5da4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xbc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5e4c:	ldr.w	r3, [r4, #564]	; 0x234
    5e50:	ldr.w	r2, [r4, #568]	; 0x238
    5e54:	ldr	r0, [r3, #0]
    5e56:	ldr	r1, [r3, #16]
    5e58:	ldr	r3, [r0, #0]
    5e5a:	add	r1, r2
    5e5c:	ldr	r3, [r3, #24]
    5e5e:	mov	r2, sl
    5e60:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5e62:	cmp	r0, #0
    5e64:	beq.n	5d7e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    5e66:	ldrb.w	r3, [r4, #560]	; 0x230
    5e6a:	b.n	5e22 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x13a>
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5e6c:	mvn.w	r2, #4026531840	; 0xf0000000
    5e70:	mov	r1, r5
    5e72:	mov	r0, r4
    5e74:	bl	5b98 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
    5e78:	mov	r6, r0
    5e7a:	cmp	r0, #0
    5e7c:	beq.w	5d7e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    5e80:	cmp	r7, #0
    5e82:	bne.w	5d6e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x86>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
    5e86:	str	r5, [r4, #12]
  }
  updateFreeClusterCount(-1);
  *next = find;
    5e88:	str.w	r5, [r8]
  return true;

fail:
  return false;
}
    5e8c:	mov	r0, r6
    5e8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e92:	nop

00005e94 <FatPartition::allocContiguous(unsigned long, unsigned long*)>:
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    5e94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  uint32_t startCluster = m_allocSearchStart;
    5e98:	ldr.w	r8, [r0, #12]
    5e9c:	ldr	r3, [r0, #28]
fail:
  return false;
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    5e9e:	sub	sp, #12
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  uint32_t startCluster = m_allocSearchStart;
  endCluster = bgnCluster = startCluster + 1;
    5ea0:	add.w	r7, r8, #1
fail:
  return false;
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    5ea4:	str	r2, [sp, #4]
    5ea6:	mov	r4, r0
    5ea8:	mov	fp, r1
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  uint32_t startCluster = m_allocSearchStart;
  endCluster = bgnCluster = startCluster + 1;
    5eaa:	mov	r2, r7
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
  // flag to save place to start next search
  bool setStart = true;
    5eac:	mov.w	sl, #1
    5eb0:	b.n	5ec4 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x30>
    int8_t fg = fatGet(endCluster, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    5eb2:	cmp	r2, #0
    5eb4:	bne.n	5f22 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x8e>
    5eb6:	adds	r2, r6, #1

      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
    } else if ((endCluster - bgnCluster + 1) == count) {
    5eb8:	subs	r1, r2, r7
    5eba:	cmp	r1, fp
    5ebc:	beq.w	6024 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x190>
      // done - found space
      break;
    }
    // Can't find space if all clusters checked.
    if (startCluster == endCluster) {
    5ec0:	cmp	r6, r8
    5ec2:	beq.n	5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
  endCluster = bgnCluster = startCluster + 1;

  // search the FAT for free clusters
  while (1) {
    // If past end - start from beginning of FAT.
    if (endCluster > m_lastCluster) {
    5ec4:	cmp	r2, r3
    5ec6:	it	ls
    5ec8:	movls	r6, r2
    5eca:	ldrb	r2, [r4, #7]
      bgnCluster = endCluster = 2;
    5ecc:	itt	hi
    5ece:	movhi	r7, #2
    5ed0:	movhi	r6, r7
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5ed2:	cmp	r2, #32
    5ed4:	beq.n	5f6a <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xd6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5ed6:	cmp	r2, #16
    5ed8:	bne.n	5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5eda:	ldr	r2, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5edc:	ldr.w	r1, [r4, #568]	; 0x238
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5ee0:	ubfx	r5, r6, #8, #8
    5ee4:	add	r5, r2
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5ee6:	cmp	r5, r1
    5ee8:	beq.n	5f38 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa4>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5eea:	ldrb.w	r3, [r4, #560]	; 0x230
    5eee:	lsls	r0, r3, #31
    5ef0:	bmi.n	5f42 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xae>
    5ef2:	add.w	r9, r4, #572	; 0x23c
    5ef6:	ldr.w	r3, [r4, #564]	; 0x234
    5efa:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5efc:	ldr	r3, [r0, #0]
    5efe:	mov	r2, r9
    5f00:	ldr	r3, [r3, #8]
    5f02:	mov	r1, r5
    5f04:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5f06:	cbz	r0, 5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    5f08:	ldr	r3, [r4, #28]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5f0a:	str.w	r5, [r4, #568]	; 0x238
    5f0e:	movs	r1, #2
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5f10:	uxtb	r2, r6
    5f12:	add.w	r2, r4, r2, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    5f16:	strb.w	r1, [r4, #560]	; 0x230
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    5f1a:	ldrh.w	r2, [r2, #572]	; 0x23c
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    5f1e:	cmp	r2, r3
    5f20:	bls.n	5eb2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    5f22:	adds	r7, r6, #1
    } else if ((endCluster - bgnCluster + 1) == count) {
      // done - found space
      break;
    }
    // Can't find space if all clusters checked.
    if (startCluster == endCluster) {
    5f24:	cmp	r6, r8
    5f26:	mov	r2, r7
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;

      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
    5f28:	mov.w	sl, #0
    } else if ((endCluster - bgnCluster + 1) == count) {
      // done - found space
      break;
    }
    // Can't find space if all clusters checked.
    if (startCluster == endCluster) {
    5f2c:	bne.n	5ec4 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x30>
  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;

fail:
  return false;
    5f2e:	movs	r5, #0
}
    5f30:	mov	r0, r5
    5f32:	add	sp, #12
    5f34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f38:	ldrb.w	r1, [r4, #560]	; 0x230
    5f3c:	orr.w	r1, r1, #2
    5f40:	b.n	5f10 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x7c>
    5f42:	ldr.w	r3, [r4, #564]	; 0x234
    5f46:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5f48:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5f4a:	add.w	r9, r4, #572	; 0x23c
    5f4e:	ldr	r3, [r3, #24]
    5f50:	mov	r2, r9
    5f52:	blx	r3
    5f54:	cmp	r0, #0
    5f56:	beq.n	5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5f58:	ldrb.w	r3, [r4, #560]	; 0x230
    5f5c:	lsls	r2, r3, #30
    5f5e:	bmi.n	5fe4 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x150>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5f60:	bic.w	r3, r3, #1
    5f64:	strb.w	r3, [r4, #560]	; 0x230
    5f68:	b.n	5ef6 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x62>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5f6a:	ldr	r5, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5f6c:	ldr.w	r1, [r4, #568]	; 0x238

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5f70:	add.w	r5, r5, r6, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5f74:	cmp	r1, r5
    5f76:	beq.n	5fb2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x11e>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5f78:	ldrb.w	r3, [r4, #560]	; 0x230
    5f7c:	lsls	r0, r3, #31
    5f7e:	bmi.n	5fbc <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x128>
    5f80:	add.w	r9, r4, #572	; 0x23c
    5f84:	ldr.w	r3, [r4, #564]	; 0x234
    5f88:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5f8a:	ldr	r3, [r0, #0]
    5f8c:	mov	r2, r9
    5f8e:	ldr	r3, [r3, #8]
    5f90:	mov	r1, r5
    5f92:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5f94:	cmp	r0, #0
    5f96:	beq.n	5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    5f98:	ldr	r3, [r4, #28]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5f9a:	str.w	r5, [r4, #568]	; 0x238
    5f9e:	movs	r1, #2
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5fa0:	and.w	r2, r6, #127	; 0x7f
    5fa4:	add.w	r2, r4, r2, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    5fa8:	strb.w	r1, [r4, #560]	; 0x230
    5fac:	ldr.w	r2, [r2, #572]	; 0x23c
    5fb0:	b.n	5f1e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x8a>
    5fb2:	ldrb.w	r1, [r4, #560]	; 0x230
    5fb6:	orr.w	r1, r1, #2
    5fba:	b.n	5fa0 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x10c>
    5fbc:	ldr.w	r3, [r4, #564]	; 0x234
    5fc0:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5fc2:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5fc4:	add.w	r9, r4, #572	; 0x23c
    5fc8:	ldr	r3, [r3, #24]
    5fca:	mov	r2, r9
    5fcc:	blx	r3
    5fce:	cmp	r0, #0
    5fd0:	beq.n	5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5fd2:	ldrb.w	r3, [r4, #560]	; 0x230
    5fd6:	lsls	r2, r3, #30
    5fd8:	bmi.n	6004 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x170>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5fda:	bic.w	r3, r3, #1
    5fde:	strb.w	r3, [r4, #560]	; 0x230
    5fe2:	b.n	5f84 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xf0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5fe4:	ldr.w	r3, [r4, #564]	; 0x234
    5fe8:	ldr.w	r2, [r4, #568]	; 0x238
    5fec:	ldr	r0, [r3, #0]
    5fee:	ldr	r1, [r3, #16]
    5ff0:	ldr	r3, [r0, #0]
    5ff2:	add	r1, r2
    5ff4:	ldr	r3, [r3, #24]
    5ff6:	mov	r2, r9
    5ff8:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5ffa:	cmp	r0, #0
    5ffc:	beq.n	5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    5ffe:	ldrb.w	r3, [r4, #560]	; 0x230
    6002:	b.n	5f60 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xcc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    6004:	ldr.w	r3, [r4, #564]	; 0x234
    6008:	ldr.w	r2, [r4, #568]	; 0x238
    600c:	ldr	r0, [r3, #0]
    600e:	ldr	r1, [r3, #16]
    6010:	ldr	r3, [r0, #0]
    6012:	add	r1, r2
    6014:	ldr	r3, [r3, #24]
    6016:	mov	r2, r9
    6018:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    601a:	cmp	r0, #0
    601c:	beq.n	5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    601e:	ldrb.w	r3, [r4, #560]	; 0x230
    6022:	b.n	5fda <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x146>
      goto fail;
    }
    endCluster++;
  }
  // remember possible next free cluster
  if (setStart) {
    6024:	cmp.w	sl, #0
    6028:	beq.n	602c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x198>
    m_allocSearchStart = endCluster + 1;
    602a:	str	r2, [r4, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    602c:	mvn.w	r2, #4026531840	; 0xf0000000
    6030:	mov	r1, r6
    6032:	mov	r0, r4
    6034:	bl	5b98 <FatPartition::fatPut(unsigned long, unsigned long)>
  }

  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    6038:	mov	r5, r0
    603a:	cmp	r0, #0
    603c:	beq.w	5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    6040:	cmp	r7, r6
    6042:	bcs.n	60f8 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x264>
    6044:	ldrb	r3, [r4, #7]
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    6046:	cmp	r3, #32
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) {
    6048:	add.w	r8, r6, #4294967295
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    604c:	beq.n	60a4 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x210>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    604e:	cmp	r3, #16
    6050:	bne.w	5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    6054:	ldr	r3, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6056:	ldr.w	r1, [r4, #568]	; 0x238
    return true;
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    605a:	ubfx	r6, r8, #8, #8
    605e:	add	r6, r3
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6060:	cmp	r6, r1
    6062:	beq.n	60ee <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x25a>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6064:	ldrb.w	r3, [r4, #560]	; 0x230
    6068:	lsls	r0, r3, #31
    606a:	bmi.n	6108 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x274>
    606c:	add.w	r9, r4, #572	; 0x23c
    6070:	ldr.w	r3, [r4, #564]	; 0x234
    6074:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    6076:	ldr	r3, [r0, #0]
    6078:	mov	r2, r9
    607a:	ldr	r3, [r3, #8]
    607c:	mov	r1, r6
    607e:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6080:	cmp	r0, #0
    6082:	beq.w	5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    6086:	str.w	r6, [r4, #568]	; 0x238
    608a:	movs	r1, #3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    608c:	uxtb.w	r3, r8
    6090:	add.w	r3, r4, r3, lsl #1
    6094:	add.w	r2, r8, #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    6098:	strb.w	r1, [r4, #560]	; 0x230
    609c:	mov	r6, r8
    609e:	strh.w	r2, [r3, #572]	; 0x23c
    60a2:	b.n	6040 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1ac>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    60a4:	ldr	r3, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    60a6:	ldr.w	r1, [r4, #568]	; 0x238

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    60aa:	add.w	r9, r3, r8, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    60ae:	cmp	r9, r1
    60b0:	beq.n	60fe <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x26a>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    60b2:	ldrb.w	r3, [r4, #560]	; 0x230
    60b6:	lsls	r0, r3, #31
    60b8:	bmi.n	6132 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x29e>
    60ba:	add.w	sl, r4, #572	; 0x23c
    60be:	ldr.w	r3, [r4, #564]	; 0x234
    60c2:	ldr	r0, [r3, #0]
    60c4:	ldr	r3, [r0, #0]
    60c6:	mov	r2, sl
    60c8:	ldr	r3, [r3, #8]
    60ca:	mov	r1, r9
    60cc:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    60ce:	cmp	r0, #0
    60d0:	beq.w	5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    60d4:	str.w	r9, [r4, #568]	; 0x238
    60d8:	movs	r2, #3
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    60da:	and.w	r3, r8, #127	; 0x7f
    60de:	add.w	r3, r4, r3, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    60e2:	strb.w	r2, [r4, #560]	; 0x230
    60e6:	str.w	r6, [r3, #572]	; 0x23c
    60ea:	mov	r6, r8
    60ec:	b.n	6040 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1ac>
    60ee:	ldrb.w	r1, [r4, #560]	; 0x230
    60f2:	orr.w	r1, r1, #3
    60f6:	b.n	608c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1f8>
  }
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
    60f8:	ldr	r3, [sp, #4]
    60fa:	str	r7, [r3, #0]
  return true;
    60fc:	b.n	5f30 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9c>
    60fe:	ldrb.w	r2, [r4, #560]	; 0x230
    6102:	orr.w	r2, r2, #3
    6106:	b.n	60da <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x246>
    6108:	ldr.w	r3, [r4, #564]	; 0x234
    610c:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    610e:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    6110:	add.w	r9, r4, #572	; 0x23c
    6114:	ldr	r3, [r3, #24]
    6116:	mov	r2, r9
    6118:	blx	r3
    611a:	cmp	r0, #0
    611c:	beq.w	5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6120:	ldrb.w	r3, [r4, #560]	; 0x230
    6124:	lsls	r2, r3, #30
    6126:	bmi.n	615c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x2c8>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6128:	bic.w	r3, r3, #1
    612c:	strb.w	r3, [r4, #560]	; 0x230
    6130:	b.n	6070 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1dc>
    6132:	ldr.w	r3, [r4, #564]	; 0x234
    6136:	ldr	r0, [r3, #0]
    6138:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    613a:	add.w	sl, r4, #572	; 0x23c
    613e:	ldr	r3, [r3, #24]
    6140:	mov	r2, sl
    6142:	blx	r3
    6144:	cmp	r0, #0
    6146:	beq.w	5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    614a:	ldrb.w	r3, [r4, #560]	; 0x230
    614e:	lsls	r2, r3, #30
    6150:	bmi.n	617e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x2ea>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6152:	bic.w	r3, r3, #1
    6156:	strb.w	r3, [r4, #560]	; 0x230
    615a:	b.n	60be <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x22a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    615c:	ldr.w	r3, [r4, #564]	; 0x234
    6160:	ldr.w	r2, [r4, #568]	; 0x238
    6164:	ldr	r0, [r3, #0]
    6166:	ldr	r1, [r3, #16]
    6168:	ldr	r3, [r0, #0]
    616a:	add	r1, r2
    616c:	ldr	r3, [r3, #24]
    616e:	mov	r2, r9
    6170:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    6172:	cmp	r0, #0
    6174:	beq.w	5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    6178:	ldrb.w	r3, [r4, #560]	; 0x230
    617c:	b.n	6128 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x294>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    617e:	ldr.w	r3, [r4, #564]	; 0x234
    6182:	ldr.w	r2, [r4, #568]	; 0x238
    6186:	ldr	r0, [r3, #0]
    6188:	ldr	r1, [r3, #16]
    618a:	ldr	r3, [r0, #0]
    618c:	add	r1, r2
    618e:	ldr	r3, [r3, #24]
    6190:	mov	r2, sl
    6192:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    6194:	cmp	r0, #0
    6196:	beq.w	5f2e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    619a:	ldrb.w	r3, [r4, #560]	; 0x230
    619e:	b.n	6152 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x2be>

000061a0 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    61a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    61a4:	mov	r4, r0
    61a6:	mov	r5, r1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    61a8:	mov.w	r8, #0
    61ac:	ldrb	r3, [r4, #7]
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    61ae:	cmp	r3, #32
    61b0:	beq.n	62a4 <FatPartition::freeChain(unsigned long)+0x104>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    61b2:	cmp	r3, #16
    61b4:	bne.n	620e <FatPartition::freeChain(unsigned long)+0x6e>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    61b6:	ldr	r2, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    61b8:	ldr.w	r1, [r4, #568]	; 0x238
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    61bc:	ubfx	r6, r5, #8, #8
    61c0:	add	r6, r2
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    61c2:	cmp	r6, r1
    61c4:	beq.n	6214 <FatPartition::freeChain(unsigned long)+0x74>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    61c6:	ldrb.w	r3, [r4, #560]	; 0x230
    61ca:	lsls	r0, r3, #31
    61cc:	bmi.n	627a <FatPartition::freeChain(unsigned long)+0xda>
    61ce:	add.w	r9, r4, #572	; 0x23c
    61d2:	ldr.w	r3, [r4, #564]	; 0x234
    61d6:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    61d8:	ldr	r3, [r0, #0]
    61da:	mov	r2, r9
    61dc:	ldr	r3, [r3, #8]
    61de:	mov	r1, r6
    61e0:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    61e2:	cbz	r0, 620e <FatPartition::freeChain(unsigned long)+0x6e>
    61e4:	ldrb	r3, [r4, #7]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    61e6:	str.w	r6, [r4, #568]	; 0x238
    61ea:	movs	r1, #2
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    61ec:	uxtb	r2, r5
    61ee:	add.w	r2, r4, r2, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    61f2:	strb.w	r1, [r4, #560]	; 0x230
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    61f6:	ldrh.w	r2, [r2, #572]	; 0x23c
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    61fa:	ldr	r1, [r4, #28]
    return 0;
    61fc:	cmp	r1, r2
    61fe:	itte	cs
    6200:	movcs	r7, r2
    6202:	movcs	r6, #1
    6204:	movcc	r6, #0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    6206:	cmp	r3, #32
    6208:	beq.n	62ec <FatPartition::freeChain(unsigned long)+0x14c>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    620a:	cmp	r3, #16
    620c:	beq.n	621e <FatPartition::freeChain(unsigned long)+0x7e>
  } while (fg);

  return true;

fail:
  return false;
    620e:	movs	r0, #0
    6210:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6214:	ldrb.w	r1, [r4, #560]	; 0x230
    6218:	orr.w	r1, r1, #2
    621c:	b.n	61ec <FatPartition::freeChain(unsigned long)+0x4c>
    return true;
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    621e:	ldr	r3, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6220:	ldr.w	r1, [r4, #568]	; 0x238
    return true;
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    6224:	ubfx	r9, r5, #8, #8
    6228:	add	r9, r3
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    622a:	cmp	r9, r1
    622c:	beq.w	6334 <FatPartition::freeChain(unsigned long)+0x194>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6230:	ldrb.w	r3, [r4, #560]	; 0x230
    6234:	lsls	r0, r3, #31
    6236:	bmi.w	6352 <FatPartition::freeChain(unsigned long)+0x1b2>
    623a:	add.w	sl, r4, #572	; 0x23c
    623e:	ldr.w	r3, [r4, #564]	; 0x234
    6242:	ldr	r0, [r3, #0]
    6244:	ldr	r3, [r0, #0]
    6246:	mov	r2, sl
    6248:	ldr	r3, [r3, #8]
    624a:	mov	r1, r9
    624c:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    624e:	cmp	r0, #0
    6250:	beq.n	620e <FatPartition::freeChain(unsigned long)+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    6252:	str.w	r9, [r4, #568]	; 0x238
    6256:	movs	r2, #3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6258:	uxtb	r3, r5
    625a:	add.w	r3, r4, r3, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    625e:	strb.w	r2, [r4, #560]	; 0x230
    6262:	strh.w	r8, [r3, #572]	; 0x23c
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
    6266:	ldr	r3, [r4, #12]
    6268:	cmp	r5, r3
    626a:	bcs.n	626e <FatPartition::freeChain(unsigned long)+0xce>
      m_allocSearchStart = cluster;
    626c:	str	r5, [r4, #12]
    626e:	mov	r5, r7
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    6270:	cmp	r6, #0
    6272:	bne.n	61ac <FatPartition::freeChain(unsigned long)+0xc>
      m_allocSearchStart = cluster;
    }
    cluster = next;
  } while (fg);

  return true;
    6274:	movs	r0, #1
    6276:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    627a:	ldr.w	r3, [r4, #564]	; 0x234
    627e:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    6280:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    6282:	add.w	r9, r4, #572	; 0x23c
    6286:	ldr	r3, [r3, #24]
    6288:	mov	r2, r9
    628a:	blx	r3
    628c:	cmp	r0, #0
    628e:	beq.n	620e <FatPartition::freeChain(unsigned long)+0x6e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6290:	ldrb.w	r3, [r4, #560]	; 0x230
    6294:	lsls	r2, r3, #30
    6296:	bmi.w	63d0 <FatPartition::freeChain(unsigned long)+0x230>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    629a:	bic.w	r3, r3, #1
    629e:	strb.w	r3, [r4, #560]	; 0x230
    62a2:	b.n	61d2 <FatPartition::freeChain(unsigned long)+0x32>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    62a4:	ldr	r6, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    62a6:	ldr.w	r1, [r4, #568]	; 0x238

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    62aa:	add.w	r6, r6, r5, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    62ae:	cmp	r1, r6
    62b0:	beq.n	633e <FatPartition::freeChain(unsigned long)+0x19e>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    62b2:	ldrb.w	r3, [r4, #560]	; 0x230
    62b6:	lsls	r0, r3, #31
    62b8:	bmi.n	637c <FatPartition::freeChain(unsigned long)+0x1dc>
    62ba:	add.w	r9, r4, #572	; 0x23c
    62be:	ldr.w	r3, [r4, #564]	; 0x234
    62c2:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    62c4:	ldr	r3, [r0, #0]
    62c6:	mov	r2, r9
    62c8:	ldr	r3, [r3, #8]
    62ca:	mov	r1, r6
    62cc:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    62ce:	cmp	r0, #0
    62d0:	beq.n	620e <FatPartition::freeChain(unsigned long)+0x6e>
    62d2:	ldrb	r3, [r4, #7]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    62d4:	str.w	r6, [r4, #568]	; 0x238
    62d8:	movs	r1, #2
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    62da:	and.w	r2, r5, #127	; 0x7f
    62de:	add.w	r2, r4, r2, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    62e2:	strb.w	r1, [r4, #560]	; 0x230
    62e6:	ldr.w	r2, [r2, #572]	; 0x23c
    62ea:	b.n	61fa <FatPartition::freeChain(unsigned long)+0x5a>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    62ec:	ldr	r3, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    62ee:	ldr.w	r1, [r4, #568]	; 0x238

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    62f2:	add.w	r9, r3, r5, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    62f6:	cmp	r9, r1
    62f8:	beq.n	6348 <FatPartition::freeChain(unsigned long)+0x1a8>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    62fa:	ldrb.w	r3, [r4, #560]	; 0x230
    62fe:	lsls	r0, r3, #31
    6300:	bmi.n	63a6 <FatPartition::freeChain(unsigned long)+0x206>
    6302:	add.w	sl, r4, #572	; 0x23c
    6306:	ldr.w	r3, [r4, #564]	; 0x234
    630a:	ldr	r0, [r3, #0]
    630c:	ldr	r3, [r0, #0]
    630e:	mov	r2, sl
    6310:	ldr	r3, [r3, #8]
    6312:	mov	r1, r9
    6314:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6316:	cmp	r0, #0
    6318:	beq.w	620e <FatPartition::freeChain(unsigned long)+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    631c:	str.w	r9, [r4, #568]	; 0x238
    6320:	movs	r2, #3
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6322:	and.w	r3, r5, #127	; 0x7f
    6326:	add.w	r3, r4, r3, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    632a:	strb.w	r2, [r4, #560]	; 0x230
    632e:	str.w	r8, [r3, #572]	; 0x23c
    6332:	b.n	6266 <FatPartition::freeChain(unsigned long)+0xc6>
    6334:	ldrb.w	r2, [r4, #560]	; 0x230
    6338:	orr.w	r2, r2, #3
    633c:	b.n	6258 <FatPartition::freeChain(unsigned long)+0xb8>
    633e:	ldrb.w	r1, [r4, #560]	; 0x230
    6342:	orr.w	r1, r1, #2
    6346:	b.n	62da <FatPartition::freeChain(unsigned long)+0x13a>
    6348:	ldrb.w	r2, [r4, #560]	; 0x230
    634c:	orr.w	r2, r2, #3
    6350:	b.n	6322 <FatPartition::freeChain(unsigned long)+0x182>
    6352:	ldr.w	r3, [r4, #564]	; 0x234
    6356:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    6358:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    635a:	add.w	sl, r4, #572	; 0x23c
    635e:	ldr	r3, [r3, #24]
    6360:	mov	r2, sl
    6362:	blx	r3
    6364:	cmp	r0, #0
    6366:	beq.w	620e <FatPartition::freeChain(unsigned long)+0x6e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    636a:	ldrb.w	r3, [r4, #560]	; 0x230
    636e:	lsls	r2, r3, #30
    6370:	bmi.n	63f2 <FatPartition::freeChain(unsigned long)+0x252>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6372:	bic.w	r3, r3, #1
    6376:	strb.w	r3, [r4, #560]	; 0x230
    637a:	b.n	623e <FatPartition::freeChain(unsigned long)+0x9e>
    637c:	ldr.w	r3, [r4, #564]	; 0x234
    6380:	ldr	r0, [r3, #0]
    6382:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    6384:	add.w	r9, r4, #572	; 0x23c
    6388:	ldr	r3, [r3, #24]
    638a:	mov	r2, r9
    638c:	blx	r3
    638e:	cmp	r0, #0
    6390:	beq.w	620e <FatPartition::freeChain(unsigned long)+0x6e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6394:	ldrb.w	r3, [r4, #560]	; 0x230
    6398:	lsls	r2, r3, #30
    639a:	bmi.n	6414 <FatPartition::freeChain(unsigned long)+0x274>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    639c:	bic.w	r3, r3, #1
    63a0:	strb.w	r3, [r4, #560]	; 0x230
    63a4:	b.n	62be <FatPartition::freeChain(unsigned long)+0x11e>
    63a6:	ldr.w	r3, [r4, #564]	; 0x234
    63aa:	ldr	r0, [r3, #0]
    63ac:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    63ae:	add.w	sl, r4, #572	; 0x23c
    63b2:	ldr	r3, [r3, #24]
    63b4:	mov	r2, sl
    63b6:	blx	r3
    63b8:	cmp	r0, #0
    63ba:	beq.w	620e <FatPartition::freeChain(unsigned long)+0x6e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    63be:	ldrb.w	r3, [r4, #560]	; 0x230
    63c2:	lsls	r2, r3, #30
    63c4:	bmi.n	6436 <FatPartition::freeChain(unsigned long)+0x296>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    63c6:	bic.w	r3, r3, #1
    63ca:	strb.w	r3, [r4, #560]	; 0x230
    63ce:	b.n	6306 <FatPartition::freeChain(unsigned long)+0x166>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    63d0:	ldr.w	r3, [r4, #564]	; 0x234
    63d4:	ldr.w	r2, [r4, #568]	; 0x238
    63d8:	ldr	r0, [r3, #0]
    63da:	ldr	r1, [r3, #16]
    63dc:	ldr	r3, [r0, #0]
    63de:	add	r1, r2
    63e0:	ldr	r3, [r3, #24]
    63e2:	mov	r2, r9
    63e4:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    63e6:	cmp	r0, #0
    63e8:	beq.w	620e <FatPartition::freeChain(unsigned long)+0x6e>
    63ec:	ldrb.w	r3, [r4, #560]	; 0x230
    63f0:	b.n	629a <FatPartition::freeChain(unsigned long)+0xfa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    63f2:	ldr.w	r3, [r4, #564]	; 0x234
    63f6:	ldr.w	r2, [r4, #568]	; 0x238
    63fa:	ldr	r0, [r3, #0]
    63fc:	ldr	r1, [r3, #16]
    63fe:	ldr	r3, [r0, #0]
    6400:	add	r1, r2
    6402:	ldr	r3, [r3, #24]
    6404:	mov	r2, sl
    6406:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    6408:	cmp	r0, #0
    640a:	beq.w	620e <FatPartition::freeChain(unsigned long)+0x6e>
    640e:	ldrb.w	r3, [r4, #560]	; 0x230
    6412:	b.n	6372 <FatPartition::freeChain(unsigned long)+0x1d2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    6414:	ldr.w	r3, [r4, #564]	; 0x234
    6418:	ldr.w	r2, [r4, #568]	; 0x238
    641c:	ldr	r0, [r3, #0]
    641e:	ldr	r1, [r3, #16]
    6420:	ldr	r3, [r0, #0]
    6422:	add	r1, r2
    6424:	ldr	r3, [r3, #24]
    6426:	mov	r2, r9
    6428:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    642a:	cmp	r0, #0
    642c:	beq.w	620e <FatPartition::freeChain(unsigned long)+0x6e>
    6430:	ldrb.w	r3, [r4, #560]	; 0x230
    6434:	b.n	639c <FatPartition::freeChain(unsigned long)+0x1fc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    6436:	ldr.w	r3, [r4, #564]	; 0x234
    643a:	ldr.w	r2, [r4, #568]	; 0x238
    643e:	ldr	r0, [r3, #0]
    6440:	ldr	r1, [r3, #16]
    6442:	ldr	r3, [r0, #0]
    6444:	add	r1, r2
    6446:	ldr	r3, [r3, #24]
    6448:	mov	r2, sl
    644a:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    644c:	cmp	r0, #0
    644e:	beq.w	620e <FatPartition::freeChain(unsigned long)+0x6e>
    6452:	ldrb.w	r3, [r4, #560]	; 0x230
    6456:	b.n	63c6 <FatPartition::freeChain(unsigned long)+0x226>

00006458 <FatPartition::init(SdCardInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    6458:	push	{r3, r4, r5, r6, r7, lr}
    645a:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    645c:	movs	r5, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    645e:	mov.w	r3, #4294967295
  m_allocSearchStart = 1;
    6462:	movs	r0, #1
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    6464:	str	r4, [r4, #40]	; 0x28
    6466:	str.w	r4, [r4, #564]	; 0x234
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    646a:	str	r1, [r4, #0]
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    646c:	str	r0, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    646e:	strb	r5, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6470:	strb.w	r5, [r4, #36]	; 0x24
    6474:	strb.w	r5, [r4, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
    6478:	str	r3, [r4, #44]	; 0x2c
    647a:	str.w	r3, [r4, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    647e:	mov	r6, r2
    6480:	cmp	r2, #0
    6482:	beq.n	652a <FatPartition::init(SdCardInterface*, unsigned char)+0xd2>
    if (part > 4) {
    6484:	cmp	r2, #4
    6486:	bls.n	648c <FatPartition::init(SdCardInterface*, unsigned char)+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6488:	movs	r0, #0
    648a:	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    648c:	ldr	r3, [r1, #0]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    648e:	add.w	r7, r4, #48	; 0x30
    6492:	mov	r0, r1
    6494:	ldr	r3, [r3, #8]
    6496:	mov	r2, r7
    6498:	mov	r1, r5
    649a:	blx	r3
    649c:	cmp	r0, #0
    649e:	beq.n	6488 <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    64a0:	add.w	r6, r6, #268435456	; 0x10000000
    64a4:	subs	r6, #1
    64a6:	lsls	r6, r6, #4
    64a8:	add.w	r3, r4, #494	; 0x1ee
    64ac:	adds	r2, r3, r6
      if (!m_part->readSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    64ae:	strb.w	r5, [r4, #36]	; 0x24
    m_lbn = sector;
    64b2:	str	r5, [r4, #44]	; 0x2c
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    64b4:	ldrb	r1, [r2, #4]
    64b6:	cmp	r1, #0
    64b8:	beq.n	6488 <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
    64ba:	ldrb	r3, [r3, r6]
    64bc:	lsls	r3, r3, #25
    64be:	bne.n	6488 <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    64c0:	ldr	r6, [r2, #8]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    64c2:	cbz	r6, 64de <FatPartition::init(SdCardInterface*, unsigned char)+0x86>
    64c4:	ldr	r3, [r4, #40]	; 0x28
    64c6:	ldr	r0, [r3, #0]
    64c8:	ldr	r3, [r0, #0]
    64ca:	mov	r2, r7
    64cc:	ldr	r3, [r3, #8]
    64ce:	mov	r1, r6
    64d0:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    64d2:	cmp	r0, #0
    64d4:	beq.n	6488 <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    64d6:	movs	r3, #0
    m_lbn = sector;
    64d8:	str	r6, [r4, #44]	; 0x2c
      if (!m_part->readSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    64da:	strb.w	r3, [r4, #36]	; 0x24
    volumeStartSector = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    64de:	ldrb.w	r2, [r4, #64]	; 0x40
    64e2:	cmp	r2, #2
    64e4:	bne.n	6488 <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
    64e6:	ldrh.w	r3, [r4, #59]	; 0x3b
    64ea:	cmp.w	r3, #512	; 0x200
    64ee:	bne.n	6488 <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    64f0:	ldrb.w	r3, [r4, #61]	; 0x3d
    64f4:	strb	r3, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    64f6:	subs	r0, r3, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    64f8:	movs	r1, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    64fa:	cmp	r3, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    64fc:	strb	r0, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    64fe:	strb	r1, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6500:	beq.n	659a <FatPartition::init(SdCardInterface*, unsigned char)+0x142>
    6502:	cmp	r3, #2
    6504:	beq.n	659e <FatPartition::init(SdCardInterface*, unsigned char)+0x146>
    6506:	cmp	r3, #4
    6508:	beq.n	6534 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    650a:	cmp	r3, #8
    650c:	beq.n	65a2 <FatPartition::init(SdCardInterface*, unsigned char)+0x14a>
    650e:	cmp	r3, #16
    6510:	beq.n	65a6 <FatPartition::init(SdCardInterface*, unsigned char)+0x14e>
    6512:	cmp	r3, #32
    6514:	beq.n	65aa <FatPartition::init(SdCardInterface*, unsigned char)+0x152>
    6516:	cmp	r3, #64	; 0x40
    6518:	beq.n	65ae <FatPartition::init(SdCardInterface*, unsigned char)+0x156>
    651a:	cmp	r3, #128	; 0x80
    651c:	beq.n	6532 <FatPartition::init(SdCardInterface*, unsigned char)+0xda>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
    651e:	movs	r2, #8
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6520:	cbz	r3, 6534 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    6522:	movs	r3, #8
    6524:	strb	r3, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6526:	movs	r0, #0
    6528:	pop	{r3, r4, r5, r6, r7, pc}
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    652a:	mov	r0, r1
    652c:	add.w	r7, r4, #48	; 0x30
    6530:	b.n	64c8 <FatPartition::init(SdCardInterface*, unsigned char)+0x70>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
    6532:	movs	r2, #7
    6534:	strb	r2, [r4, #6]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6536:	ldrh.w	r0, [r4, #70]	; 0x46
    653a:	str	r0, [r4, #16]
  if (m_sectorsPerFat == 0) {
    653c:	cbnz	r0, 6542 <FatPartition::init(SdCardInterface*, unsigned char)+0xea>
    653e:	ldr	r0, [r4, #84]	; 0x54
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6540:	str	r0, [r4, #16]
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6542:	ldrh.w	r3, [r4, #65]	; 0x41
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6546:	ldrh	r5, [r4, #62]	; 0x3e

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6548:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    654a:	add	r5, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    654c:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    654e:	add.w	r0, r5, r0, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6552:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    6556:	ldrh.w	r1, [r4, #67]	; 0x43

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    655a:	str	r0, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    655c:	add.w	r3, r0, r3, asr #9
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6560:	str	r5, [r4, #24]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    6562:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    6564:	cbnz	r1, 6568 <FatPartition::init(SdCardInterface*, unsigned char)+0x110>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6566:	ldr	r1, [r4, #80]	; 0x50
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    6568:	subs	r6, r6, r3
    656a:	add	r6, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    656c:	lsr.w	r2, r6, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6570:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6574:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6576:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6578:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    657a:	bls.n	6592 <FatPartition::init(SdCardInterface*, unsigned char)+0x13a>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    657c:	movw	r3, #65524	; 0xfff4
    6580:	cmp	r2, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    6582:	ittet	hi
    6584:	ldrhi	r3, [r4, #92]	; 0x5c
    6586:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    6588:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    658a:	movhi	r3, #32
    658c:	strb	r3, [r4, #7]
  }
  return true;
    658e:	movs	r0, #1
    6590:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    6592:	movs	r3, #12
    6594:	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6596:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    6598:	pop	{r3, r4, r5, r6, r7, pc}
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    659a:	mov	r2, r1
    659c:	b.n	6536 <FatPartition::init(SdCardInterface*, unsigned char)+0xde>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
    659e:	movs	r2, #1
    65a0:	b.n	6534 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    65a2:	movs	r2, #3
    65a4:	b.n	6534 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    65a6:	movs	r2, #4
    65a8:	b.n	6534 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    65aa:	movs	r2, #5
    65ac:	b.n	6534 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    65ae:	movs	r2, #6
    65b0:	b.n	6534 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    65b2:	nop

000065b4 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    65b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    65b8:	ldrb	r3, [r0, #0]
    65ba:	cmp	r3, #32
    65bc:	bne.n	65c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    65be:	ldrb.w	r3, [r0, #1]!
    65c2:	cmp	r3, #32
    65c4:	beq.n	65be <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    65c6:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    65c8:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    65ca:	cmp	r3, #0
    65cc:	beq.w	67d6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x222>
    65d0:	cmp	r3, #47	; 0x2f
    65d2:	beq.n	6634 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    65d4:	cmp	r3, #92	; 0x5c
    65d6:	beq.n	661e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    65d8:	sub.w	r4, r3, #34	; 0x22
    65dc:	uxtb	r4, r4
    65de:	cmp	r4, #29
    65e0:	bls.n	6624 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    65e2:	ldr.w	lr, [pc, #528]	; 67f4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x240>
    65e6:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    65e8:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    65ea:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    65ec:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    65f0:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    65f2:	beq.n	661e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    65f4:	cmp	r5, #94	; 0x5e
    65f6:	bhi.n	661e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    65f8:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    65fc:	sub.w	r5, r3, #34	; 0x22
    6600:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6602:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    6604:	cmp	r3, #0
    6606:	beq.w	67a8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f4>
    660a:	cmp	r3, #47	; 0x2f
    660c:	beq.n	6636 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    660e:	cmp	r3, #92	; 0x5c
    6610:	lsr.w	r7, lr, r5
    6614:	beq.n	661e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6616:	cmp	r5, #29
    6618:	bhi.n	65ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    661a:	lsls	r7, r7, #31
    661c:	bpl.n	65ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    661e:	movs	r0, #0
    6620:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6624:	ldr	r5, [pc, #460]	; (67f4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x240>)
    6626:	lsr.w	r4, r5, r4
    662a:	lsls	r4, r4, #31
    662c:	bpl.n	65e2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    662e:	movs	r0, #0
    6630:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6634:	movs	r4, #0
    6636:	adds	r6, r0, r4
    6638:	mov	r3, r6
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    663a:	mov	r7, r3
    663c:	ldrb.w	r5, [r3], #1
    6640:	cmp	r5, #32
    6642:	beq.n	663a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x86>
    6644:	cmp	r5, #47	; 0x2f
    6646:	beq.n	663a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x86>
  *ptr = &path[end];
    6648:	str	r7, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    664a:	cbz	r4, 6660 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xac>
    664c:	mov	r2, r6
    c = path[len - 1];
    664e:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    6652:	cmp	r3, #46	; 0x2e
    6654:	beq.n	665c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa8>
    6656:	cmp	r3, #32
    6658:	bne.w	67ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fa>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    665c:	subs	r4, #1
    665e:	bne.n	664e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9a>
    6660:	mov.w	r5, #4294967295
    6664:	mov	r3, r4
    6666:	add.w	r2, r1, #13
    666a:	mov.w	r7, #538976288	; 0x20202020
  }
  // Max length of LFN is 255.
  if (len > 255) {
    return false;
  }
  fname->len = len;
    666e:	str	r3, [r1, #4]
    6670:	str.w	r7, [r1, #13]
    6674:	subs	r6, r0, #1
    6676:	str	r7, [r2, #4]
    6678:	str.w	r7, [r2, #7]
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    667c:	movs	r2, #0
    667e:	b.n	6682 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xce>
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    6680:	adds	r2, #1
    6682:	ldrb.w	r3, [r6, #1]!
    6686:	cmp	r3, #46	; 0x2e
    6688:	beq.n	6680 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xcc>
    668a:	cmp	r3, #32
    668c:	beq.n	6680 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xcc>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    668e:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    6692:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    6694:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    6698:	beq.n	66b4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x100>
    669a:	ldrb	r7, [r0, r5]
    669c:	cmp	r7, #46	; 0x2e
    669e:	add.w	r6, r0, r5
    66a2:	bne.n	66ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
    66a4:	b.n	66b4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x100>
    66a6:	ldrb.w	r7, [r6, #-1]!
    66aa:	cmp	r7, #46	; 0x2e
    66ac:	beq.n	66b4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x100>
    66ae:	adds.w	r5, r5, #4294967295
    66b2:	bcs.n	66a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xf2>
  for (; si < len; si++) {
    66b4:	cmp	r2, r4
    66b6:	mov.w	r9, #0
    66ba:	bge.w	67e0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22c>
    66be:	mov	r6, r9
    66c0:	mov	sl, r9
    66c2:	movs	r7, #7
    66c4:	mov.w	r8, #8
    66c8:	b.n	6716 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    66ca:	cmp	r3, #46	; 0x2e
    66cc:	beq.n	675e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1aa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    66ce:	cmp	r3, #34	; 0x22
    66d0:	beq.n	66ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x136>
    66d2:	cmp	r3, #124	; 0x7c
    66d4:	beq.n	66ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x136>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    66d6:	sub.w	lr, r3, #42	; 0x2a
    66da:	cmp.w	lr, #5
    66de:	bls.n	6772 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1be>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    66e0:	sub.w	lr, r3, #58	; 0x3a
    66e4:	cmp.w	lr, #5
    66e8:	bhi.n	679c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1e8>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    66ea:	cmp	r5, r2
    66ec:	beq.n	6762 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    66ee:	cmp	r7, r6
    66f0:	bcc.n	6746 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x192>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    66f2:	mov.w	ip, #0
      c = '_';
    66f6:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    66f8:	add.w	lr, r6, #1
    66fc:	add.w	fp, r1, r6
    6700:	uxtb.w	r6, lr
      if (i < 7) {
    6704:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6706:	strb.w	r3, [fp, #13]
      if (i < 7) {
    670a:	bhi.n	670e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15a>
        fname->seqPos = i;
    670c:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    670e:	adds	r2, #1
    6710:	cmp	r2, r4
    6712:	bge.n	6724 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x170>
    6714:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    6716:	cmp	r3, #32
    6718:	bne.n	66ca <FatFile::parsePathName(char const*, fname_t*, char const**)+0x116>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    671a:	adds	r2, #1
    671c:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    671e:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6722:	blt.n	6714 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    6724:	ldrb	r3, [r1, #13]
    6726:	cmp	r3, #32
    6728:	beq.w	661e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    return false;
  }

  if (is83) {
    672c:	cmp.w	ip, #0
    6730:	beq.n	67c2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    6732:	tst.w	sl, r9
    6736:	it	ne
    6738:	movne.w	r9, #2
    673c:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    6740:	movs	r0, #1
    6742:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    6746:	cmp	r7, #10
    6748:	beq.n	67ba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x206>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    674a:	cmp	r5, r2
    674c:	blt.n	67ba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x206>
    674e:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    6750:	movs	r7, #10
      i = 8;    // Place for extension.
    6752:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    6754:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    6758:	mov.w	ip, #0
    675c:	b.n	670e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15a>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    675e:	cmp	r5, r2
    6760:	bne.n	671a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x166>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    6762:	cmp	r7, #10
    6764:	beq.n	67ba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x206>
    6766:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    6768:	movs	r7, #10
      i = 8;    // Place for extension.
    676a:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    676c:	mov.w	r8, #16
    6770:	b.n	670e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15a>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    6772:	cmp	r3, #45	; 0x2d
    6774:	bne.n	66ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x136>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    6776:	sub.w	lr, r3, #33	; 0x21
    677a:	cmp.w	lr, #93	; 0x5d
    677e:	bhi.n	66ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x136>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    6780:	cmp	r5, r2
    6782:	beq.n	6762 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
    6784:	cmp	r7, r6
    6786:	bcc.n	6746 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x192>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    6788:	sub.w	lr, r3, #97	; 0x61
    678c:	cmp.w	lr, #25
    6790:	bhi.n	67e4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x230>
        c += 'A' - 'a';
    6792:	subs	r3, #32
    6794:	uxtb	r3, r3
        lc |= bit;
    6796:	orr.w	r9, r8, r9
    679a:	b.n	66f8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x144>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    679c:	sub.w	lr, r3, #91	; 0x5b
    67a0:	cmp.w	lr, #2
    67a4:	bls.n	66ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x136>
    67a6:	b.n	6776 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c2>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    67a8:	str	r7, [r2, #0]
    67aa:	adds	r6, r0, r4
    67ac:	b.n	664c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x98>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    67ae:	cmp	r4, #255	; 0xff
    67b0:	bgt.w	661e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    67b4:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    67b6:	mov	r3, r4
    67b8:	b.n	6666 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb2>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    67ba:	ldrb	r3, [r1, #13]
    67bc:	cmp	r3, #32
    67be:	beq.w	661e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    67c2:	ldrb	r3, [r1, #12]
    67c4:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    67c6:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    67c8:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    67ca:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    67cc:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    67ce:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    67d0:	strb	r2, [r3, #14]
    67d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    67d6:	str	r0, [r2, #0]
    67d8:	mov	r4, r3
    67da:	mov.w	r5, #4294967295
    67de:	b.n	6666 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb2>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    67e0:	mov	sl, r9
    67e2:	b.n	6724 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x170>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    67e4:	sub.w	lr, r3, #65	; 0x41
    67e8:	cmp.w	lr, #25
        uc |= bit;
    67ec:	it	ls
    67ee:	orrls.w	sl, r8, sl
    67f2:	b.n	66f8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x144>
    67f4:	.word	0x35000101

000067f8 <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    67f8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    67fc:	ldrb	r5, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    67fe:	mov	r6, r1
    6800:	mov	r4, r0
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    6802:	movs	r7, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    6804:	mov.w	r8, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    6808:	ldr	r0, [r6, #4]
    680a:	ldr	r1, [r6, #8]
    680c:	adds	r3, r7, r0
    680e:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6810:	cbz	r0, 6824 <FatFile::lfnUniqueSfn(fname_t*)+0x2c>
    6812:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    6814:	ldrb.w	r2, [r1], #1
    6818:	add.w	r3, r3, r3, lsl #5
    681c:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    681e:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    6820:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6822:	bne.n	6814 <FatFile::lfnUniqueSfn(fname_t*)+0x1c>
    6824:	cmp	r5, #3
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
    6826:	and.w	r2, r3, #15
    682a:	it	cs
    682c:	movcs	r5, #3
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    682e:	adds	r1, r5, #4
    6830:	cmp	r2, #9
    6832:	ite	hi
    6834:	addhi.w	r0, r2, #55	; 0x37
    6838:	addls.w	r0, r2, #48	; 0x30
    683c:	uxtb	r1, r1
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    683e:	adds	r2, r5, #3
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6840:	add	r1, r6
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6842:	uxtb	r2, r2
    6844:	cmp	r5, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6846:	strb	r0, [r1, #13]
        hex >>= 4;
    6848:	mov.w	r3, r3, asr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    684c:	bcs.n	68e8 <FatFile::lfnUniqueSfn(fname_t*)+0xf0>
        uint8_t h = hex & 0XF;
    684e:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6852:	cmp	r1, #9
    6854:	ite	hi
    6856:	addhi.w	r0, r1, #55	; 0x37
    685a:	addls.w	r0, r1, #48	; 0x30
    685e:	adds	r1, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6860:	adds	r2, r5, #2
    6862:	uxtb	r2, r2
    6864:	cmp	r5, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6866:	strb	r0, [r1, #13]
    6868:	mov.w	r3, r3, asr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    686c:	bcs.n	68ea <FatFile::lfnUniqueSfn(fname_t*)+0xf2>
        uint8_t h = hex & 0XF;
    686e:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6872:	cmp	r1, #9
    6874:	ite	hi
    6876:	addhi.w	r0, r1, #55	; 0x37
    687a:	addls.w	r0, r1, #48	; 0x30
    687e:	adds	r1, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6880:	adds	r2, r5, #1
    6882:	uxtb	r2, r2
    6884:	cmp	r5, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6886:	strb	r0, [r1, #13]
    6888:	mov.w	r3, r3, asr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    688c:	bcs.n	68ea <FatFile::lfnUniqueSfn(fname_t*)+0xf2>
        uint8_t h = hex & 0XF;
    688e:	uxtb	r3, r3
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6890:	cmp	r3, #9
    6892:	ite	hi
    6894:	addhi	r3, #55	; 0x37
    6896:	addls	r3, #48	; 0x30
    6898:	add	r2, r6
    689a:	uxtb	r3, r3
    689c:	mov	r1, r5
    689e:	strb	r3, [r2, #13]
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    68a0:	adds	r3, r6, r1
   * the value false is returned for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    68a2:	mov	r0, r4
    68a4:	movs	r1, #0
    68a6:	strb.w	r8, [r3, #13]
    68aa:	bl	54c4 <FatFile::seekSet(unsigned long)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    68ae:	add.w	r9, r6, #13
      }
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
    68b2:	movs	r1, #1
    68b4:	mov	r0, r4
    68b6:	bl	5484 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    68ba:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    68bc:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    68be:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    68c0:	cbz	r0, 68ee <FatFile::lfnUniqueSfn(fname_t*)+0xf6>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    68c2:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    68c6:	mov	r0, r9
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    68c8:	cmp.w	lr, #0
    68cc:	beq.n	68fa <FatFile::lfnUniqueSfn(fname_t*)+0x102>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    68ce:	ldrb	r3, [r3, #11]
    68d0:	lsls	r3, r3, #28
    68d2:	bmi.n	68b2 <FatFile::lfnUniqueSfn(fname_t*)+0xba>
    68d4:	bl	ca5c <memcmp>
    68d8:	cmp	r0, #0
    68da:	bne.n	68b2 <FatFile::lfnUniqueSfn(fname_t*)+0xba>
    68dc:	adds	r7, #1
    68de:	uxth	r7, r7
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    68e0:	cmp	r7, #100	; 0x64
    68e2:	bne.n	6808 <FatFile::lfnUniqueSfn(fname_t*)+0x10>
fail:
  return false;

done:
  return true;
}
    68e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    68e8:	movs	r5, #3
    68ea:	mov	r1, r5
    68ec:	b.n	68a0 <FatFile::lfnUniqueSfn(fname_t*)+0xa8>
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    68ee:	ldrb	r0, [r4, #1]
    68f0:	clz	r0, r0
    68f4:	lsrs	r0, r0, #5
    68f6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    68fa:	movs	r0, #1
    68fc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006900 <FatFile::open(FatFile*, fname_t*, unsigned char)>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
    6900:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    6904:	ldrb	r4, [r1, #0]
    6906:	tst.w	r4, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
    690a:	sub	sp, #44	; 0x2c
  uint16_t time;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    690c:	beq.n	6912 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    690e:	ldrb	r4, [r0, #0]
    6910:	cbz	r4, 691a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    6912:	movs	r0, #0
}
    6914:	add	sp, #44	; 0x2c
    6916:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    691a:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
    691c:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6920:	lsls	r4, r4, #30
    6922:	bne.n	699e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x9e>
    6924:	mov.w	r8, #1
    6928:	mov	r5, r1
    692a:	mov	r9, r2
    692c:	str	r0, [sp, #28]
    692e:	movs	r1, #0
    6930:	mov	r0, r5
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint16_t freeIndex = 0;
    6932:	mov	r6, r1
    6934:	str	r3, [sp, #24]
    6936:	bl	54c4 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    693a:	add.w	r3, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    693e:	str	r6, [sp, #20]
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    6940:	str	r6, [sp, #8]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    6942:	mov	r4, r6
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    6944:	mov	r7, r6
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
    6946:	str	r6, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6948:	str	r3, [sp, #12]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    694a:	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
    694c:	movs	r1, #1
    694e:	mov	r0, r5
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6950:	ubfx	fp, r3, #5, #16
    dir = dirFile->readDirCache(true);
    6954:	bl	5484 <FatFile::readDirCache(bool)>
    if (!dir) {
    6958:	cmp	r0, #0
    695a:	beq.w	6a7a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x17a>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    695e:	ldrb	r3, [r0, #0]
    6960:	cmp	r3, #229	; 0xe5
    6962:	beq.n	69ce <FatFile::open(FatFile*, fname_t*, unsigned char)+0xce>
    6964:	cmp	r3, #0
    6966:	beq.n	69ce <FatFile::open(FatFile*, fname_t*, unsigned char)+0xce>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    6968:	cmp	r4, r8
    696a:	it	cc
    696c:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    696e:	cmp	r3, #46	; 0x2e
    6970:	beq.n	69ca <FatFile::open(FatFile*, fname_t*, unsigned char)+0xca>
    6972:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    6974:	cmp	r2, #15
    6976:	beq.n	69e8 <FatFile::open(FatFile*, fname_t*, unsigned char)+0xe8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    6978:	lsls	r2, r2, #28
    697a:	bmi.n	69ca <FatFile::open(FatFile*, fname_t*, unsigned char)+0xca>
      if (lfnOrd) {
    697c:	cmp	r7, #0
    697e:	bne.w	6c30 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x330>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6982:	movs	r2, #11
    6984:	ldr	r1, [sp, #12]
    6986:	bl	ca5c <memcmp>
    698a:	cmp	r0, #0
    698c:	bne.n	694a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    698e:	ldrb.w	r3, [r9]
    6992:	lsls	r3, r3, #31
    6994:	bpl.w	6ccc <FatFile::open(FatFile*, fname_t*, unsigned char)+0x3cc>
          goto found;
        }
        fnameFound = true;
    6998:	movs	r3, #1
    699a:	str	r3, [sp, #16]
    699c:	b.n	694a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    699e:	ldr	r5, [pc, #652]	; (6c2c <FatFile::open(FatFile*, fname_t*, unsigned char)+0x32c>)
    69a0:	add.w	r4, sl, #12
    69a4:	umull	r4, r8, r5, r4
    69a8:	mov.w	r8, r8, lsr #2
    69ac:	add.w	r8, r8, #1
    69b0:	uxtb.w	r8, r8
    69b4:	b.n	6928 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    69b6:	ldr	r2, [sp, #8]
    69b8:	subs	r2, #1
    69ba:	uxtb	r2, r2
    69bc:	cmp	r3, r2
    69be:	str	r2, [sp, #8]
    69c0:	bne.n	69ca <FatFile::open(FatFile*, fname_t*, unsigned char)+0xca>
    69c2:	ldrb	r3, [r0, #13]
    69c4:	ldr	r2, [sp, #20]
    69c6:	cmp	r2, r3
    69c8:	beq.n	69fa <FatFile::open(FatFile*, fname_t*, unsigned char)+0xfa>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    69ca:	movs	r7, #0
    69cc:	b.n	694a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    69ce:	cmp	r4, #0
    69d0:	it	eq
    69d2:	moveq	r6, fp
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    69d4:	cmp	r4, r8
        freeFound++;
    69d6:	itt	cc
    69d8:	addcc	r4, #1
    69da:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    69dc:	cmp	r3, #0
    69de:	beq.n	6a82 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x182>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    69e0:	cmp	r3, #229	; 0xe5
    69e2:	bne.n	696e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x6e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    69e4:	movs	r7, #0
    69e6:	b.n	694a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
    69e8:	cmp	r7, #0
    69ea:	bne.n	69b6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0xb6>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    69ec:	lsls	r1, r3, #25
    69ee:	bpl.n	694a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    69f0:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    69f4:	ldrb	r3, [r0, #13]
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    69f6:	str	r7, [sp, #8]
        checksum = ldir->checksum;
    69f8:	str	r3, [sp, #20]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    69fa:	ldr	r3, [sp, #8]
    69fc:	subs	r3, #1
    69fe:	add.w	r1, r3, r3, lsl #1
    6a02:	add.w	r1, r3, r1, lsl #2
      if (k >= len) {
    6a06:	cmp	sl, r1
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    6a08:	mov	r3, r1
      if (k >= len) {
    6a0a:	bls.n	69ca <FatFile::open(FatFile*, fname_t*, unsigned char)+0xca>
    6a0c:	adds	r0, #4
    6a0e:	add.w	lr, r1, #13
    6a12:	b.n	6a4e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x14e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6a14:	uxtb.w	ip, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6a18:	sub.w	r2, ip, #65	; 0x41
    6a1c:	cmp	r2, #25
    6a1e:	itt	ls
    6a20:	addls.w	r2, ip, #32
    6a24:	uxtbls.w	ip, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6a28:	ldr.w	r2, [r9, #8]
    6a2c:	ldrb	r2, [r2, r3]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6a2e:	sub.w	fp, r2, #65	; 0x41
    6a32:	cmp.w	fp, #25
    6a36:	itt	ls
    6a38:	addls	r2, #32
    6a3a:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6a3c:	cmp	r2, ip
    6a3e:	add.w	r3, r3, #1
    6a42:	bne.n	69ca <FatFile::open(FatFile*, fname_t*, unsigned char)+0xca>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    6a44:	cmp	r3, lr
    6a46:	add.w	r0, r0, #2
    6a4a:	beq.w	694a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
    6a4e:	subs	r2, r3, r1
    6a50:	uxtb	r2, r2
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < 5) {
    6a52:	cmp	r2, #4
    6a54:	bls.n	6a6a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x16a>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    6a56:	cmp	r2, #10
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6a58:	ite	ls
    6a5a:	ldrhls	r2, [r0, #0]
    6a5c:	ldrhhi	r2, [r0, #2]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    6a5e:	cmp	sl, r3
    6a60:	beq.n	6a72 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x172>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6a62:	cmp	r2, #255	; 0xff
    6a64:	bls.n	6a14 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x114>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6a66:	movs	r7, #0
    6a68:	b.n	694a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    6a6a:	cmp	sl, r3
    6a6c:	ldrh.w	r2, [r0, #-3]
    6a70:	bne.n	6a62 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x162>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    6a72:	cmp	r2, #0
    6a74:	it	ne
    6a76:	movne	r7, #0
    6a78:	b.n	694a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    6a7a:	ldrb	r3, [r5, #1]
    6a7c:	cmp	r3, #0
    6a7e:	bne.w	6912 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
    6a82:	ldr	r3, [sp, #24]
    6a84:	and.w	r3, r3, #66	; 0x42
    6a88:	cmp	r3, #66	; 0x42
    6a8a:	bne.w	6912 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    6a8e:	cmp	r4, #0
    6a90:	it	eq
    6a92:	moveq	r6, fp
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    6a94:	cmp	r4, r8
    6a96:	bcc.n	6aa0 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1a0>
    6a98:	b.n	6ad0 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1d0>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    6a9a:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    6a9c:	cmp	r8, r4
    6a9e:	bls.n	6ad0 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1d0>
    dir = dirFile->readDirCache();
    6aa0:	movs	r1, #0
    6aa2:	mov	r0, r5
    6aa4:	bl	5484 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    6aa8:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    6aaa:	cmp	r0, #0
    6aac:	bne.n	6a9a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x19a>
      if (dirFile->getError()) {
    6aae:	ldrb	r3, [r5, #1]
    6ab0:	cbz	r3, 6abc <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1bc>
    6ab2:	b.n	6912 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    6ab4:	ldr	r3, [r5, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    6ab6:	ldrb	r3, [r3, #4]
    6ab8:	cmp	r3, #1
    6aba:	bhi.n	6ad0 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1d0>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    6abc:	cmp	r8, r4
    6abe:	bls.n	6ad0 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1d0>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6ac0:	mov	r0, r5
    6ac2:	bl	4fa4 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    6ac6:	adds	r4, #16
    6ac8:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6aca:	cmp	r0, #0
    6acc:	bne.n	6ab4 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1b4>
    6ace:	b.n	6912 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    6ad0:	ldr	r3, [sp, #16]
    6ad2:	cbz	r3, 6ae2 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1e2>
    if (!dirFile->lfnUniqueSfn(fname)) {
    6ad4:	mov	r1, r9
    6ad6:	mov	r0, r5
    6ad8:	bl	67f8 <FatFile::lfnUniqueSfn(fname_t*)>
    6adc:	cmp	r0, #0
    6ade:	beq.w	6912 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    6ae2:	lsls	r1, r6, #5
    6ae4:	mov	r0, r5
    6ae6:	bl	54c4 <FatFile::seekSet(unsigned long)>
    6aea:	cmp	r0, #0
    6aec:	beq.w	6912 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    6af0:	add.w	r7, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    6af4:	ands.w	r7, r7, #255	; 0xff
    6af8:	beq.w	6cee <FatFile::open(FatFile*, fname_t*, unsigned char)+0x3ee>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6afc:	orr.w	r6, r7, #64	; 0x40
    6b00:	uxtb	r6, r6
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6b02:	mov	r8, r7
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
    6b04:	movs	r4, #0
    6b06:	movs	r1, #0
    6b08:	mov	r0, r5
    6b0a:	bl	5484 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6b0e:	cmp	r0, #0
    6b10:	beq.w	6912 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    6b14:	ldr	r1, [r5, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    6b16:	ldrb.w	r2, [r1, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6b1a:	cmp	r7, r8
    6b1c:	orr.w	r2, r2, #1
    6b20:	ite	ne
    6b22:	movne	r3, r8
    6b24:	moveq	r3, r6
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6b26:	mov.w	lr, #15
    6b2a:	strb.w	r2, [r1, #36]	; 0x24
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6b2e:	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    6b30:	strb	r4, [r0, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6b32:	strb.w	lr, [r0, #11]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6b36:	ldrb.w	lr, [r9, #13]
    6b3a:	ldrb.w	r1, [r9, #14]
    6b3e:	mov.w	r2, lr, lsr #1
    6b42:	orr.w	r2, r2, lr, lsl #7
    6b46:	add	r2, r1
    6b48:	uxtb	r2, r2
    6b4a:	ldrb.w	lr, [r9, #15]
    6b4e:	lsrs	r1, r2, #1
    6b50:	orr.w	r2, r1, r2, lsl #7
    6b54:	uxtab	r2, lr, r2
    6b58:	uxtb	r2, r2
    6b5a:	ldrb.w	lr, [r9, #16]
    6b5e:	lsrs	r1, r2, #1
    6b60:	orr.w	r2, r1, r2, lsl #7
    6b64:	uxtab	r2, lr, r2
    6b68:	uxtb	r2, r2
    6b6a:	ldrb.w	lr, [r9, #17]
    6b6e:	lsrs	r1, r2, #1
    6b70:	orr.w	r2, r1, r2, lsl #7
    6b74:	uxtab	r2, lr, r2
    6b78:	uxtb	r2, r2
    6b7a:	ldrb.w	lr, [r9, #18]
    6b7e:	lsrs	r1, r2, #1
    6b80:	orr.w	r2, r1, r2, lsl #7
    6b84:	uxtab	r2, lr, r2
    6b88:	uxtb	r2, r2
    6b8a:	ldrb.w	lr, [r9, #19]
    6b8e:	lsrs	r1, r2, #1
    6b90:	orr.w	r2, r1, r2, lsl #7
    6b94:	uxtab	r2, lr, r2
    6b98:	uxtb	r2, r2
    6b9a:	ldrb.w	lr, [r9, #20]
    6b9e:	lsrs	r1, r2, #1
    6ba0:	orr.w	r2, r1, r2, lsl #7
    6ba4:	uxtab	r2, lr, r2
    6ba8:	uxtb	r2, r2
    6baa:	ldrb.w	lr, [r9, #21]
    6bae:	lsrs	r1, r2, #1
    6bb0:	orr.w	r2, r1, r2, lsl #7
    6bb4:	uxtab	r2, lr, r2
    6bb8:	uxtb	r2, r2
    6bba:	ldrb.w	lr, [r9, #22]
    6bbe:	lsrs	r1, r2, #1
    6bc0:	orr.w	r2, r1, r2, lsl #7
    6bc4:	uxtab	r2, lr, r2
    6bc8:	uxtb	r2, r2
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6bca:	ldrb.w	lr, [r9, #23]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6bce:	strh	r4, [r0, #26]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6bd0:	lsrs	r1, r2, #1
    6bd2:	orr.w	r2, r1, r2, lsl #7
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6bd6:	and.w	r3, r3, #31
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6bda:	uxtab	r2, lr, r2
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6bde:	subs	r3, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6be0:	strb	r2, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6be2:	add.w	r2, r3, r3, lsl #1
    6be6:	add.w	r2, r3, r2, lsl #2
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    6bea:	ldr.w	lr, [r9, #8]
    6bee:	adds	r0, #4
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    6bf0:	movs	r3, #0
    6bf2:	b.n	6c14 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x314>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6bf4:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6bf6:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6bfa:	bls.n	6c26 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x326>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    6bfc:	cmp	r3, #10
    6bfe:	ite	ls
    6c00:	strhls	r1, [r0, #0]
    6c02:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    6c04:	adds	r3, #1
    6c06:	uxtb	r3, r3
    6c08:	cmp	r3, #13
    6c0a:	add.w	r2, r2, #1
    6c0e:	add.w	r0, r0, #2
    6c12:	beq.n	6ce2 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x3e2>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6c14:	cmp	sl, r2
    6c16:	bhi.n	6bf4 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x2f4>
    6c18:	ite	ne
    6c1a:	movne.w	r1, #4294967295
    6c1e:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6c20:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6c22:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6c24:	bhi.n	6bfc <FatFile::open(FatFile*, fname_t*, unsigned char)+0x2fc>
    6c26:	strh.w	r1, [r0, #-3]
    6c2a:	b.n	6c04 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x304>
    6c2c:	.word	0x4ec4ec4f
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6c30:	ldr	r3, [sp, #8]
    6c32:	cmp	r3, #1
    6c34:	bne.w	6912 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6c38:	ldrb	r1, [r0, #0]
    6c3a:	ldrb	r3, [r0, #1]
    6c3c:	ldrb	r4, [r0, #9]
    6c3e:	lsls	r2, r1, #7
    6c40:	orr.w	r2, r2, r1, lsr #1
    6c44:	add	r3, r2
    6c46:	uxtb	r3, r3
    6c48:	lsls	r2, r3, #7
    6c4a:	ldrb	r1, [r0, #2]
    6c4c:	orr.w	r3, r2, r3, lsr #1
    6c50:	uxtab	r3, r1, r3
    6c54:	uxtb	r3, r3
    6c56:	lsls	r2, r3, #7
    6c58:	ldrb	r1, [r0, #3]
    6c5a:	orr.w	r3, r2, r3, lsr #1
    6c5e:	uxtab	r3, r1, r3
    6c62:	uxtb	r3, r3
    6c64:	lsls	r2, r3, #7
    6c66:	ldrb	r1, [r0, #4]
    6c68:	orr.w	r3, r2, r3, lsr #1
    6c6c:	uxtab	r3, r1, r3
    6c70:	uxtb	r3, r3
    6c72:	lsrs	r2, r3, #1
    6c74:	ldrb	r1, [r0, #5]
    6c76:	orr.w	r3, r2, r3, lsl #7
    6c7a:	uxtab	r3, r1, r3
    6c7e:	uxtb	r3, r3
    6c80:	lsrs	r2, r3, #1
    6c82:	ldrb	r1, [r0, #6]
    6c84:	orr.w	r3, r2, r3, lsl #7
    6c88:	uxtab	r3, r1, r3
    6c8c:	uxtb	r3, r3
    6c8e:	lsrs	r2, r3, #1
    6c90:	ldrb	r1, [r0, #7]
    6c92:	orr.w	r3, r2, r3, lsl #7
    6c96:	uxtab	r3, r1, r3
    6c9a:	uxtb	r3, r3
    6c9c:	lsrs	r2, r3, #1
    6c9e:	ldrb	r1, [r0, #8]
    6ca0:	orr.w	r3, r2, r3, lsl #7
    6ca4:	uxtab	r3, r1, r3
    6ca8:	uxtb	r3, r3
    6caa:	lsrs	r2, r3, #1
    6cac:	orr.w	r3, r2, r3, lsl #7
    6cb0:	uxtab	r3, r4, r3
    6cb4:	uxtb	r3, r3
    6cb6:	lsrs	r2, r3, #1
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6cb8:	ldrb	r1, [r0, #10]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6cba:	orr.w	r3, r2, r3, lsl #7
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6cbe:	uxtab	r3, r1, r3
    6cc2:	ldr	r2, [sp, #20]
    6cc4:	uxtb	r3, r3
    6cc6:	cmp	r2, r3
    6cc8:	bne.w	6912 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    6ccc:	ldr	r3, [sp, #24]
    6cce:	lsls	r6, r3, #24
    6cd0:	bmi.w	6912 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    6cd4:	str	r7, [sp, #0]
    6cd6:	mov	r2, fp
    6cd8:	mov	r1, r5
    6cda:	ldr	r0, [sp, #28]
    6cdc:	bl	5558 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)>
    6ce0:	b.n	6914 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x14>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6ce2:	add.w	r8, r8, #4294967295
    6ce6:	ands.w	r8, r8, #255	; 0xff
    6cea:	bne.w	6b06 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x206>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6cee:	ldr	r3, [r5, #20]
  dir = dirFile->readDirCache();
    6cf0:	movs	r1, #0
    6cf2:	mov	r0, r5
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6cf4:	ubfx	fp, r3, #5, #16
  dir = dirFile->readDirCache();
    6cf8:	bl	5484 <FatFile::readDirCache(bool)>
  if (!dir) {
    6cfc:	mov	r4, r0
    6cfe:	cmp	r0, #0
    6d00:	beq.w	6912 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
    6d04:	movs	r2, #32
    6d06:	movs	r1, #0
    6d08:	bl	cb88 <memset>
  memcpy(dir->name, fname->sfn, 11);
    6d0c:	mov	r3, r9

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    6d0e:	ldr	r2, [pc, #76]	; (6d5c <FatFile::open(FatFile*, fname_t*, unsigned char)+0x45c>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
  memcpy(dir->name, fname->sfn, 11);
    6d10:	ldr.w	r1, [r3, #13]!
    6d14:	ldr	r0, [r3, #4]
    6d16:	str	r0, [r4, #4]
    6d18:	str	r1, [r4, #0]
    6d1a:	ldrh	r1, [r3, #8]
    6d1c:	ldrb	r3, [r3, #10]
    6d1e:	strb	r3, [r4, #10]
    6d20:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6d22:	ldrb.w	r3, [r9]

  // set timestamps
  if (FsDateTime::callback) {
    6d26:	ldr	r2, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6d28:	and.w	r3, r3, #24
    6d2c:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    6d2e:	cbz	r2, 6d4a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x44a>
    // call user date/time function
    FsDateTime::callback(&date, &time);
    6d30:	add.w	r1, sp, #38	; 0x26
    6d34:	add	r0, sp, #36	; 0x24
    6d36:	blx	r2
    setLe16(dir->createDate, date);
    6d38:	ldrh.w	r3, [sp, #36]	; 0x24
    setLe16(dir->createTime, time);
    6d3c:	ldrh.w	r2, [sp, #38]	; 0x26
    6d40:	strh	r3, [r4, #16]
    6d42:	strh	r3, [r4, #18]
    6d44:	strh	r3, [r4, #24]
    6d46:	strh	r2, [r4, #14]
    6d48:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    6d4a:	ldr	r2, [r5, #8]
    6d4c:	ldrb.w	r3, [r2, #36]	; 0x24
    6d50:	orr.w	r3, r3, #1
    6d54:	strb.w	r3, [r2, #36]	; 0x24
    6d58:	ldr	r3, [sp, #24]
    6d5a:	b.n	6cd4 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x3d4>
    6d5c:	.word	0x20020364

00006d60 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    6d60:	ldrb	r0, [r0, #16]
    6d62:	bx	lr

00006d64 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    6d64:	ldrb	r0, [r0, #18]
    6d66:	bx	lr

00006d68 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    6d68:	ldrb	r0, [r0, #19]
    6d6a:	bx	lr

00006d6c <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    6d6c:	bx	lr
    6d6e:	nop

00006d70 <SdSpiCard::~SdSpiCard()>:
    6d70:	push	{r4, lr}
    6d72:	movs	r1, #20
    6d74:	mov	r4, r0
    6d76:	bl	b188 <operator delete(void*, unsigned int)>
    6d7a:	mov	r0, r4
    6d7c:	pop	{r4, pc}
    6d7e:	nop

00006d80 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6d80:	push	{r4, r5, r6, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    6d82:	ldrb	r6, [r0, #17]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6d84:	mov	r5, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    6d86:	cbnz	r6, 6d9c <SdSpiCard::isBusy()+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
    6d88:	ldr	r0, [r0, #12]
    6d8a:	bl	9284 <SdSpiAltDriver::activate()>
    6d8e:	ldr	r3, [r5, #12]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
    6d90:	mov	r1, r6
    6d92:	ldrb	r0, [r3, #8]
    6d94:	bl	9be0 <digitalWrite>
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    6d98:	movs	r3, #1
    6d9a:	strb	r3, [r5, #17]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6d9c:	movs	r4, #8
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6d9e:	ldr	r0, [r5, #12]
    6da0:	bl	935c <SdSpiAltDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    6da4:	cmp	r0, #255	; 0xff
    6da6:	add.w	r3, r4, #4294967295
    6daa:	beq.n	6ddc <SdSpiCard::isBusy()+0x5c>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    6dac:	ands.w	r4, r3, #255	; 0xff
    6db0:	bne.n	6d9e <SdSpiCard::isBusy()+0x1e>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    6db2:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    6db4:	cbnz	r6, 6dba <SdSpiCard::isBusy()+0x3a>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6db6:	ldrb	r3, [r5, #17]
    6db8:	cbnz	r3, 6dbe <SdSpiCard::isBusy()+0x3e>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    6dba:	mov	r0, r4
    6dbc:	pop	{r4, r5, r6, pc}
    6dbe:	ldr	r3, [r5, #12]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
    6dc0:	movs	r1, #1
    6dc2:	ldrb	r0, [r3, #8]
    6dc4:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6dc8:	movs	r1, #255	; 0xff
    6dca:	ldr	r0, [r5, #12]
    6dcc:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6dd0:	ldr	r0, [r5, #12]
    6dd2:	bl	9314 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6dd6:	strb	r6, [r5, #17]
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    6dd8:	mov	r0, r4
    6dda:	pop	{r4, r5, r6, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    6ddc:	movs	r4, #0
    6dde:	b.n	6db4 <SdSpiCard::isBusy()+0x34>

00006de0 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    6de0:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6de2:	ldr	r7, [pc, #136]	; (6e6c <SdSpiCard::writeStop()+0x8c>)
    6de4:	sub	sp, #12
    6de6:	ldr	r3, [r7, #0]
    6de8:	str	r3, [sp, #4]
	return ret;
    6dea:	ldr	r6, [sp, #4]
    6dec:	mov	r5, r0
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    6dee:	uxth	r6, r6
    6df0:	b.n	6e02 <SdSpiCard::writeStop()+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6df2:	ldr	r3, [r7, #0]
    6df4:	str	r3, [sp, #0]
	return ret;
    6df6:	ldr	r3, [sp, #0]
    6df8:	uxth	r3, r3
    6dfa:	subs	r3, r3, r6
    6dfc:	cmp.w	r3, #600	; 0x258
    6e00:	bgt.n	6e22 <SdSpiCard::writeStop()+0x42>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6e02:	ldr	r0, [r5, #12]
    6e04:	bl	935c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    6e08:	cmp	r0, #255	; 0xff
    6e0a:	mov	r4, r0
    6e0c:	bne.n	6df2 <SdSpiCard::writeStop()+0x12>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6e0e:	movs	r1, #253	; 0xfd
    6e10:	ldr	r0, [r5, #12]
    6e12:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6e16:	ldrb	r6, [r5, #17]
    6e18:	cbnz	r6, 6e4e <SdSpiCard::writeStop()+0x6e>
    6e1a:	movs	r6, #1

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    6e1c:	mov	r0, r6
    6e1e:	add	sp, #12
    6e20:	pop	{r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6e22:	ldrb	r6, [r5, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6e24:	movs	r3, #29
    6e26:	strb	r3, [r5, #16]
    6e28:	cmp	r6, #0
    6e2a:	beq.n	6e1c <SdSpiCard::writeStop()+0x3c>
    6e2c:	ldr	r3, [r5, #12]
    6e2e:	movs	r1, #1
    6e30:	ldrb	r0, [r3, #8]
    6e32:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6e36:	movs	r1, #255	; 0xff
    6e38:	ldr	r0, [r5, #12]
    6e3a:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6e3e:	ldr	r0, [r5, #12]
    6e40:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6e44:	movs	r6, #0

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    6e46:	mov	r0, r6
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6e48:	strb	r6, [r5, #17]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    6e4a:	add	sp, #12
    6e4c:	pop	{r4, r5, r6, r7, pc}
    6e4e:	ldr	r3, [r5, #12]
    6e50:	movs	r1, #1
    6e52:	ldrb	r0, [r3, #8]
    6e54:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6e58:	mov	r1, r4
    6e5a:	ldr	r0, [r5, #12]
    6e5c:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6e60:	ldr	r0, [r5, #12]
    6e62:	bl	9314 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6e66:	movs	r3, #0
    6e68:	strb	r3, [r5, #17]
    6e6a:	b.n	6e1c <SdSpiCard::writeStop()+0x3c>
    6e6c:	.word	0x200203c0

00006e70 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    6e70:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6e74:	ldr	r7, [pc, #192]	; (6f38 <SdSpiCard::writeData(unsigned char const*)+0xc8>)
    6e76:	sub	sp, #8
    6e78:	ldr	r3, [r7, #0]
    6e7a:	str	r3, [sp, #4]
	return ret;
    6e7c:	ldr	r6, [sp, #4]
    6e7e:	mov	r5, r0
    6e80:	mov	r8, r1
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    6e82:	uxth	r6, r6
    6e84:	b.n	6e96 <SdSpiCard::writeData(unsigned char const*)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6e86:	ldr	r3, [r7, #0]
    6e88:	str	r3, [sp, #0]
	return ret;
    6e8a:	ldr	r3, [sp, #0]
    6e8c:	uxth	r3, r3
    6e8e:	subs	r3, r3, r6
    6e90:	cmp.w	r3, #600	; 0x258
    6e94:	bgt.n	6ee6 <SdSpiCard::writeData(unsigned char const*)+0x76>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6e96:	ldr	r0, [r5, #12]
    6e98:	bl	935c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    6e9c:	cmp	r0, #255	; 0xff
    6e9e:	mov	r4, r0
    6ea0:	bne.n	6e86 <SdSpiCard::writeData(unsigned char const*)+0x16>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6ea2:	movs	r1, #252	; 0xfc
    6ea4:	ldr	r0, [r5, #12]
    6ea6:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
    6eaa:	mov.w	r2, #512	; 0x200
    6eae:	mov	r1, r8
    6eb0:	ldr	r0, [r5, #12]
    6eb2:	bl	93b0 <SdSpiAltDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6eb6:	mov	r1, r4
    6eb8:	ldr	r0, [r5, #12]
    6eba:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
    6ebe:	mov	r1, r4
    6ec0:	ldr	r0, [r5, #12]
    6ec2:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6ec6:	ldr	r0, [r5, #12]
    6ec8:	bl	935c <SdSpiAltDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    6ecc:	and.w	r3, r0, #31
    6ed0:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    6ed2:	strb	r0, [r5, #18]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    6ed4:	beq.n	6f12 <SdSpiCard::writeData(unsigned char const*)+0xa2>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6ed6:	ldrb	r3, [r5, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6ed8:	movs	r2, #30
    6eda:	strb	r2, [r5, #16]
    6edc:	cbnz	r3, 6f1a <SdSpiCard::writeData(unsigned char const*)+0xaa>
  }
  return true;

fail:
  spiStop();
  return false;
    6ede:	movs	r0, #0
}
    6ee0:	add	sp, #8
    6ee2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6ee6:	ldrb	r3, [r5, #17]
    6ee8:	movs	r2, #33	; 0x21
    6eea:	strb	r2, [r5, #16]
    6eec:	cmp	r3, #0
    6eee:	beq.n	6ede <SdSpiCard::writeData(unsigned char const*)+0x6e>
    6ef0:	ldr	r3, [r5, #12]
    6ef2:	movs	r1, #1
    6ef4:	ldrb	r0, [r3, #8]
    6ef6:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6efa:	movs	r1, #255	; 0xff
    6efc:	ldr	r0, [r5, #12]
    6efe:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6f02:	ldr	r0, [r5, #12]
    6f04:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6f08:	movs	r0, #0
    6f0a:	strb	r0, [r5, #17]
  return true;

fail:
  spiStop();
  return false;
}
    6f0c:	add	sp, #8
    6f0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    goto fail;
  }
  return true;
    6f12:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    6f14:	add	sp, #8
    6f16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f1a:	ldr	r3, [r5, #12]
    6f1c:	movs	r1, #1
    6f1e:	ldrb	r0, [r3, #8]
    6f20:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6f24:	mov	r1, r4
    6f26:	ldr	r0, [r5, #12]
    6f28:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6f2c:	ldr	r0, [r5, #12]
    6f2e:	bl	9314 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6f32:	movs	r3, #0
    6f34:	strb	r3, [r5, #17]
    6f36:	b.n	6ede <SdSpiCard::writeData(unsigned char const*)+0x6e>
    6f38:	.word	0x200203c0

00006f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6f3c:	push	{r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
    6f3e:	ldrb	r5, [r0, #17]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6f40:	sub	sp, #20
    6f42:	mov	r4, r0
    6f44:	mov	r7, r1
    6f46:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    6f48:	cbnz	r5, 6f5e <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
    6f4a:	ldr	r0, [r0, #12]
    6f4c:	bl	9284 <SdSpiAltDriver::activate()>
    6f50:	ldr	r3, [r4, #12]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
    6f52:	mov	r1, r5
    6f54:	ldrb	r0, [r3, #8]
    6f56:	bl	9be0 <digitalWrite>
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    6f5a:	movs	r3, #1
    6f5c:	strb	r3, [r4, #17]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f5e:	ldr	r6, [pc, #128]	; (6fe0 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>)
    6f60:	ldr	r3, [r6, #0]
    6f62:	str	r3, [sp, #12]
	return ret;
    6f64:	ldr	r5, [sp, #12]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    6f66:	uxth	r5, r5
    6f68:	b.n	6f7a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x3e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f6a:	ldr	r3, [r6, #0]
    6f6c:	str	r3, [sp, #8]
	return ret;
    6f6e:	ldr	r3, [sp, #8]
    6f70:	uxth	r3, r3
    6f72:	subs	r3, r3, r5
    6f74:	cmp.w	r3, #600	; 0x258
    6f78:	bgt.n	6f84 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6f7a:	ldr	r0, [r4, #12]
    6f7c:	bl	935c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    6f80:	cmp	r0, #255	; 0xff
    6f82:	bne.n	6f6a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6f84:	orr.w	r1, r7, #64	; 0x40
    6f88:	ldr	r0, [r4, #12]
    6f8a:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
    6f8e:	add	r6, sp, #4
    6f90:	add	r5, sp, #8
    6f92:	ldrb.w	r1, [r5, #-1]!
    6f96:	ldr	r0, [r4, #12]
    6f98:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    6f9c:	cmp	r5, r6
    6f9e:	bne.n	6f92 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x56>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    6fa0:	cbz	r7, 6fcc <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x90>
    6fa2:	movs	r1, #135	; 0x87
    6fa4:	ldr	r0, [r4, #12]
    6fa6:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
    6faa:	cmp	r7, #12
    6fac:	beq.n	6fd6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6fae:	movs	r5, #0
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6fb0:	ldr	r0, [r4, #12]
    6fb2:	bl	935c <SdSpiAltDriver::receive()>
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
    6fb6:	lsls	r3, r0, #24
    6fb8:	strb	r0, [r4, #18]
    6fba:	bmi.n	6fc0 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x84>
  }
  return m_status;
}
    6fbc:	add	sp, #20
    6fbe:	pop	{r4, r5, r6, r7, pc}
    6fc0:	adds	r5, #1
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
    6fc2:	cmp.w	r5, #256	; 0x100
    6fc6:	bne.n	6fb0 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
  }
  return m_status;
}
    6fc8:	add	sp, #20
    6fca:	pop	{r4, r5, r6, r7, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6fcc:	movs	r1, #149	; 0x95
    6fce:	ldr	r0, [r4, #12]
    6fd0:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
    6fd4:	b.n	6fae <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x72>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6fd6:	ldr	r0, [r4, #12]
    6fd8:	bl	935c <SdSpiAltDriver::receive()>
    6fdc:	b.n	6fae <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x72>
    6fde:	nop
    6fe0:	.word	0x200203c0

00006fe4 <SdSpiCard::readOCR(unsigned long*)>:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    6fe4:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6fe6:	push	{r4, r5, r6, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    6fe8:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6fea:	mov	r4, r0
    6fec:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    6fee:	blx	r3
  if (cardCommand(CMD58, 0)) {
    6ff0:	mov	r0, r4
    6ff2:	movs	r2, #0
    6ff4:	movs	r1, #58	; 0x3a
    6ff6:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6ffa:	cbnz	r0, 7016 <SdSpiCard::readOCR(unsigned long*)+0x32>
    6ffc:	adds	r5, r6, #4
    6ffe:	ldr	r0, [r4, #12]
    7000:	bl	935c <SdSpiAltDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    7004:	strb.w	r0, [r5, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    7008:	cmp	r5, r6
    700a:	bne.n	6ffe <SdSpiCard::readOCR(unsigned long*)+0x1a>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    700c:	ldrb	r5, [r4, #17]
    700e:	cbnz	r5, 7040 <SdSpiCard::readOCR(unsigned long*)+0x5c>
    7010:	movs	r5, #1
  return true;

fail:
  spiStop();
  return false;
}
    7012:	mov	r0, r5
    7014:	pop	{r4, r5, r6, pc}
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7016:	ldrb	r5, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7018:	movs	r3, #18
    701a:	strb	r3, [r4, #16]
    701c:	cmp	r5, #0
    701e:	beq.n	7012 <SdSpiCard::readOCR(unsigned long*)+0x2e>
    7020:	ldr	r3, [r4, #12]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
    7022:	movs	r1, #1
    7024:	ldrb	r0, [r3, #8]
    7026:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    702a:	movs	r1, #255	; 0xff
    702c:	ldr	r0, [r4, #12]
    702e:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7032:	movs	r5, #0
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7034:	ldr	r0, [r4, #12]
    7036:	bl	9314 <SdSpiAltDriver::deactivate()>
    703a:	strb	r5, [r4, #17]
  return true;

fail:
  spiStop();
  return false;
}
    703c:	mov	r0, r5
    703e:	pop	{r4, r5, r6, pc}
    7040:	ldr	r3, [r4, #12]
    7042:	movs	r1, #1
    7044:	ldrb	r0, [r3, #8]
    7046:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    704a:	movs	r1, #255	; 0xff
    704c:	ldr	r0, [r4, #12]
    704e:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7052:	ldr	r0, [r4, #12]
    7054:	bl	9314 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7058:	movs	r3, #0
    705a:	strb	r3, [r4, #17]
  return true;

fail:
  spiStop();
  return false;
}
    705c:	mov	r0, r5
    705e:	pop	{r4, r5, r6, pc}

00007060 <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    7060:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7062:	ldr	r3, [r0, #0]
    7064:	ldr	r5, [pc, #88]	; (70c0 <SdSpiCard::writeStart(unsigned long)+0x60>)
    7066:	ldr	r3, [r3, #64]	; 0x40
    7068:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    706a:	sub	sp, #12
    706c:	mov	r4, r0
    706e:	mov	r2, r1
    7070:	bne.n	70b6 <SdSpiCard::writeStart(unsigned long)+0x56>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    7072:	ldrb	r0, [r0, #19]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7074:	cmp	r0, #3
    sector <<= 9;
    7076:	it	ne
    7078:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    707a:	movs	r1, #25
    707c:	mov	r0, r4
    707e:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7082:	cbz	r0, 70b0 <SdSpiCard::writeStart(unsigned long)+0x50>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7084:	ldrb	r0, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7086:	movs	r3, #14
    7088:	strb	r3, [r4, #16]
    708a:	cbnz	r0, 7090 <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    708c:	add	sp, #12
    708e:	pop	{r4, r5, pc}
    7090:	ldr	r3, [r4, #12]
    7092:	movs	r1, #1
    7094:	ldrb	r0, [r3, #8]
    7096:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    709a:	movs	r1, #255	; 0xff
    709c:	ldr	r0, [r4, #12]
    709e:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    70a2:	ldr	r0, [r4, #12]
    70a4:	bl	9314 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    70a8:	movs	r0, #0
    70aa:	strb	r0, [r4, #17]
  return true;

fail:
  spiStop();
  return false;
}
    70ac:	add	sp, #12
    70ae:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    70b0:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    70b2:	add	sp, #12
    70b4:	pop	{r4, r5, pc}
    70b6:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    70b8:	blx	r3
    70ba:	ldr	r2, [sp, #4]
    70bc:	b.n	7074 <SdSpiCard::writeStart(unsigned long)+0x14>
    70be:	nop
    70c0:	.word	0x00006d69

000070c4 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    70c4:	push	{r4, r5, r6, r7, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    70c6:	ldrb	r5, [r0, #8]
    70c8:	cmp	r5, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    70ca:	sub	sp, #12
    70cc:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    70ce:	beq.n	70de <SdSpiCard::syncDevice()+0x1a>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    70d0:	cmp	r5, #2
    70d2:	beq.n	70fc <SdSpiCard::syncDevice()+0x38>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    70d4:	movs	r3, #0
#endif  // ENABLE_DEDICATED_SPI
  return true;
    70d6:	movs	r0, #1
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    70d8:	strb	r3, [r4, #8]
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    70da:	add	sp, #12
    70dc:	pop	{r4, r5, r6, r7, pc}
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    70de:	movs	r2, #0
    70e0:	movs	r1, #12
    70e2:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    70e6:	ldrb	r3, [r4, #17]
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    70e8:	mov	r6, r0
    70ea:	cmp	r0, #0
    70ec:	beq.n	7178 <SdSpiCard::syncDevice()+0xb4>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    70ee:	movs	r2, #9
    70f0:	strb	r2, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    70f2:	cmp	r3, #0
    70f4:	bne.n	7198 <SdSpiCard::syncDevice()+0xd4>
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
      return false;
    70f6:	movs	r0, #0
    }
  }
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    70f8:	add	sp, #12
    70fa:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    70fc:	ldr	r7, [pc, #160]	; (71a0 <SdSpiCard::syncDevice()+0xdc>)
    70fe:	ldr	r3, [r7, #0]
    7100:	str	r3, [sp, #4]
	return ret;
    7102:	ldr	r6, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7104:	uxth	r6, r6
    7106:	b.n	7118 <SdSpiCard::syncDevice()+0x54>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7108:	ldr	r3, [r7, #0]
    710a:	str	r3, [sp, #0]
	return ret;
    710c:	ldr	r3, [sp, #0]
    710e:	uxth	r3, r3
    7110:	subs	r3, r3, r6
    7112:	cmp.w	r3, #600	; 0x258
    7116:	bgt.n	7150 <SdSpiCard::syncDevice()+0x8c>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7118:	ldr	r0, [r4, #12]
    711a:	bl	935c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    711e:	cmp	r0, #255	; 0xff
    7120:	mov	r5, r0
    7122:	bne.n	7108 <SdSpiCard::syncDevice()+0x44>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7124:	movs	r1, #253	; 0xfd
    7126:	ldr	r0, [r4, #12]
    7128:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    712c:	ldrb	r3, [r4, #17]
    712e:	cmp	r3, #0
    7130:	beq.n	70d4 <SdSpiCard::syncDevice()+0x10>
    7132:	ldr	r3, [r4, #12]
    7134:	movs	r1, #1
    7136:	ldrb	r0, [r3, #8]
    7138:	bl	9be0 <digitalWrite>
    713c:	mov	r1, r5
    713e:	ldr	r0, [r4, #12]
    7140:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7144:	ldr	r0, [r4, #12]
    7146:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    714a:	movs	r3, #0
    714c:	strb	r3, [r4, #17]
    714e:	b.n	70d4 <SdSpiCard::syncDevice()+0x10>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7150:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7152:	movs	r2, #29
    7154:	strb	r2, [r4, #16]
    7156:	cmp	r3, #0
    7158:	beq.n	70f6 <SdSpiCard::syncDevice()+0x32>
    715a:	ldr	r3, [r4, #12]
    715c:	movs	r1, #1
    715e:	ldrb	r0, [r3, #8]
    7160:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7164:	movs	r1, #255	; 0xff
    7166:	ldr	r0, [r4, #12]
    7168:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    716c:	ldr	r0, [r4, #12]
    716e:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7172:	movs	r3, #0
    7174:	strb	r3, [r4, #17]
    7176:	b.n	70f6 <SdSpiCard::syncDevice()+0x32>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7178:	cmp	r3, #0
    717a:	beq.n	70d4 <SdSpiCard::syncDevice()+0x10>
    717c:	ldr	r3, [r4, #12]
    717e:	mov	r1, r5
    7180:	ldrb	r0, [r3, #8]
    7182:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7186:	movs	r1, #255	; 0xff
    7188:	ldr	r0, [r4, #12]
    718a:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    718e:	ldr	r0, [r4, #12]
    7190:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7194:	strb	r6, [r4, #17]
    7196:	b.n	70d4 <SdSpiCard::syncDevice()+0x10>
    7198:	ldr	r3, [r4, #12]
    719a:	mov	r1, r5
    719c:	b.n	715e <SdSpiCard::syncDevice()+0x9a>
    719e:	nop
    71a0:	.word	0x200203c0

000071a4 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    71a4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    71a8:	ldr	r3, [r0, #0]
    71aa:	ldr	r6, [pc, #264]	; (72b4 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x110>)
    71ac:	ldr	r5, [r3, #12]
    71ae:	cmp	r5, r6
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    71b0:	sub	sp, #8
    71b2:	bne.n	7292 <SdSpiCard::readSector(unsigned long, unsigned char*)+0xee>
    71b4:	mov	r7, r2
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    71b6:	ldrb	r2, [r0, #8]
    71b8:	cmp	r2, #1
    71ba:	mov	r4, r0
    71bc:	mov	r8, r1
    71be:	beq.n	71d2 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x2e>
    if (!syncDevice()) {
    71c0:	ldr	r3, [r3, #20]
    71c2:	mov	r0, r4
    71c4:	blx	r3
    71c6:	cmp	r0, #0
    71c8:	bne.n	722c <SdSpiCard::readSector(unsigned long, unsigned char*)+0x88>
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    71ca:	movs	r0, #0
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  //  ENABLE_DEDICATED_SPI
  }
    71cc:	add	sp, #8
    71ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    71d2:	ldr	r2, [r0, #4]
    71d4:	cmp	r1, r2
    71d6:	bne.n	71c0 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    71d8:	ldr	r6, [pc, #220]	; (72b8 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x114>)
    71da:	ldr	r3, [r6, #0]
    71dc:	str	r3, [sp, #4]
	return ret;
    71de:	ldr	r5, [sp, #4]
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    71e0:	uxth	r5, r5
    71e2:	b.n	71f4 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x50>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    71e4:	ldr	r3, [r6, #0]
    71e6:	str	r3, [sp, #0]
	return ret;
    71e8:	ldr	r3, [sp, #0]
    71ea:	uxth	r3, r3
    71ec:	subs	r3, r3, r5
    71ee:	cmp.w	r3, #300	; 0x12c
    71f2:	bgt.n	7258 <SdSpiCard::readSector(unsigned long, unsigned char*)+0xb4>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    71f4:	ldr	r0, [r4, #12]
    71f6:	bl	935c <SdSpiAltDriver::receive()>
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    71fa:	cmp	r0, #255	; 0xff
    71fc:	strb	r0, [r4, #18]
    71fe:	beq.n	71e4 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x40>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_SECTOR) {
    7200:	cmp	r0, #254	; 0xfe
    7202:	beq.n	725e <SdSpiCard::readSector(unsigned long, unsigned char*)+0xba>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7204:	movs	r3, #23
    7206:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7208:	ldrb	r3, [r4, #17]
    720a:	cmp	r3, #0
    720c:	beq.n	71ca <SdSpiCard::readSector(unsigned long, unsigned char*)+0x26>
    720e:	ldr	r3, [r4, #12]
    7210:	movs	r1, #1
    7212:	ldrb	r0, [r3, #8]
    7214:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7218:	movs	r1, #255	; 0xff
    721a:	ldr	r0, [r4, #12]
    721c:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7220:	ldr	r0, [r4, #12]
    7222:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7226:	movs	r3, #0
    7228:	strb	r3, [r4, #17]
    722a:	b.n	71ca <SdSpiCard::readSector(unsigned long, unsigned char*)+0x26>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    722c:	ldr	r3, [r4, #0]
    722e:	ldr	r2, [pc, #140]	; (72bc <SdSpiCard::readSector(unsigned long, unsigned char*)+0x118>)
    7230:	ldr	r3, [r3, #64]	; 0x40
    7232:	cmp	r3, r2
    7234:	bne.n	72a2 <SdSpiCard::readSector(unsigned long, unsigned char*)+0xfe>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    7236:	ldrb	r0, [r4, #19]
    7238:	cmp	r0, #3
    sector <<= 9;
    723a:	ite	ne
    723c:	movne.w	r2, r8, lsl #9
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    7240:	moveq	r2, r8
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    7242:	movs	r1, #18
    7244:	mov	r0, r4
    7246:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    724a:	cbz	r0, 7298 <SdSpiCard::readSector(unsigned long, unsigned char*)+0xf4>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    724c:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    724e:	movs	r2, #12
    7250:	strb	r2, [r4, #16]
    7252:	cmp	r3, #0
    7254:	beq.n	71ca <SdSpiCard::readSector(unsigned long, unsigned char*)+0x26>
    7256:	b.n	720e <SdSpiCard::readSector(unsigned long, unsigned char*)+0x6a>
    7258:	movs	r3, #28
    725a:	strb	r3, [r4, #16]
    725c:	b.n	7208 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x64>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
    725e:	mov	r1, r7
    7260:	mov.w	r2, #512	; 0x200
    7264:	ldr	r0, [r4, #12]
    7266:	bl	9378 <SdSpiAltDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    726a:	strb	r0, [r4, #18]
    726c:	cbz	r0, 7274 <SdSpiCard::readSector(unsigned long, unsigned char*)+0xd0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    726e:	movs	r3, #34	; 0x22
    7270:	strb	r3, [r4, #16]
    7272:	b.n	7208 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x64>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7274:	ldr	r0, [r4, #12]
    7276:	bl	935c <SdSpiAltDriver::receive()>
    727a:	ldr	r0, [r4, #12]
    727c:	bl	935c <SdSpiAltDriver::receive()>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    7280:	ldr	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    7282:	ldrb	r2, [r4, #9]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    7284:	adds	r3, #1
    7286:	str	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    7288:	cbnz	r2, 72a8 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x104>
    728a:	movs	r0, #1
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  //  ENABLE_DEDICATED_SPI
  }
    728c:	add	sp, #8
    728e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    7292:	movs	r3, #1
    7294:	blx	r5
    7296:	b.n	71cc <SdSpiCard::readSector(unsigned long, unsigned char*)+0x28>
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    7298:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    729a:	str.w	r8, [r4, #4]
    m_curState = READ_STATE;
    729e:	strb	r3, [r4, #8]
    72a0:	b.n	71d8 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x34>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    72a2:	mov	r0, r4
    72a4:	blx	r3
    72a6:	b.n	7238 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x94>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    72a8:	ldr	r3, [r4, #0]
    72aa:	mov	r0, r4
    72ac:	ldr	r3, [r3, #20]
    72ae:	blx	r3
    72b0:	b.n	71cc <SdSpiCard::readSector(unsigned long, unsigned char*)+0x28>
    72b2:	nop
    72b4:	.word	0x00007429
    72b8:	.word	0x200203c0
    72bc:	.word	0x00006d69

000072c0 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    72c0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    72c4:	ldr	r3, [r0, #0]
    72c6:	ldr	r6, [pc, #332]	; (7414 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x154>)
    72c8:	ldr	r5, [r3, #28]
    72ca:	cmp	r5, r6
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    72cc:	sub	sp, #8
    72ce:	bne.w	73e8 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x128>
    72d2:	mov	r8, r2
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    72d4:	ldrb	r2, [r0, #8]
    72d6:	cmp	r2, #2
    72d8:	mov	r4, r0
    72da:	mov	r7, r1
    72dc:	beq.n	72f0 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    if (!syncDevice()) {
    72de:	ldr	r3, [r3, #20]
    72e0:	mov	r0, r4
    72e2:	blx	r3
    72e4:	cmp	r0, #0
    72e6:	bne.n	7382 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xc2>
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    72e8:	movs	r0, #0
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    72ea:	add	sp, #8
    72ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    72f0:	ldr	r2, [r0, #4]
    72f2:	cmp	r1, r2
    72f4:	bne.n	72de <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x1e>
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
    72f6:	ldr	r3, [r3, #68]	; 0x44
    72f8:	ldr	r2, [pc, #284]	; (7418 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x158>)
    72fa:	cmp	r3, r2
    72fc:	bne.n	73b4 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xf4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    72fe:	ldr	r7, [pc, #284]	; (741c <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x15c>)
    7300:	ldr	r3, [r7, #0]
    7302:	str	r3, [sp, #4]
	return ret;
    7304:	ldr	r6, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7306:	uxth	r6, r6
    7308:	b.n	731a <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    730a:	ldr	r3, [r7, #0]
    730c:	str	r3, [sp, #0]
	return ret;
    730e:	ldr	r3, [sp, #0]
    7310:	uxth	r3, r3
    7312:	subs	r3, r3, r6
    7314:	cmp.w	r3, #600	; 0x258
    7318:	bgt.n	73d0 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x110>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    731a:	ldr	r0, [r4, #12]
    731c:	bl	935c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7320:	cmp	r0, #255	; 0xff
    7322:	mov	r5, r0
    7324:	bne.n	730a <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x4a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7326:	movs	r1, #252	; 0xfc
    7328:	ldr	r0, [r4, #12]
    732a:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
    732e:	mov.w	r2, #512	; 0x200
    7332:	mov	r1, r8
    7334:	ldr	r0, [r4, #12]
    7336:	bl	93b0 <SdSpiAltDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    733a:	mov	r1, r5
    733c:	ldr	r0, [r4, #12]
    733e:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
    7342:	mov	r1, r5
    7344:	ldr	r0, [r4, #12]
    7346:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    734a:	ldr	r0, [r4, #12]
    734c:	bl	935c <SdSpiAltDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7350:	and.w	r3, r0, #31
    7354:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    7356:	strb	r0, [r4, #18]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7358:	beq.n	73be <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xfe>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    735a:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    735c:	movs	r2, #30
    735e:	strb	r2, [r4, #16]
    7360:	cmp	r3, #0
    7362:	beq.n	72e8 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
    7364:	ldr	r3, [r4, #12]
    7366:	movs	r1, #1
    7368:	ldrb	r0, [r3, #8]
    736a:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    736e:	mov	r1, r5
    7370:	ldr	r0, [r4, #12]
    7372:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7376:	ldr	r0, [r4, #12]
    7378:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    737c:	movs	r3, #0
    737e:	strb	r3, [r4, #17]
    7380:	b.n	72e8 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    7382:	ldr	r3, [r4, #0]
    7384:	ldr	r1, [pc, #152]	; (7420 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x160>)
    7386:	ldr	r2, [r3, #72]	; 0x48
    7388:	cmp	r2, r1
    738a:	bne.n	73ee <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x12e>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    738c:	ldr	r3, [r3, #64]	; 0x40
    738e:	ldr	r2, [pc, #148]	; (7424 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x164>)
    7390:	cmp	r3, r2
    7392:	bne.n	740e <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x14e>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    7394:	ldrb	r0, [r4, #19]
    7396:	cmp	r0, #3
    sector <<= 9;
    7398:	ite	ne
    739a:	lslne	r2, r7, #9
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    739c:	moveq	r2, r7
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    739e:	movs	r1, #25
    73a0:	mov	r0, r4
    73a2:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    73a6:	cbz	r0, 73fa <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x13a>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    73a8:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    73aa:	movs	r2, #14
    73ac:	strb	r2, [r4, #16]
    73ae:	cmp	r3, #0
    73b0:	beq.n	72e8 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
    73b2:	b.n	73da <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x11a>
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
    73b4:	mov	r1, r8
    73b6:	mov	r0, r4
    73b8:	blx	r3
    73ba:	cmp	r0, #0
    73bc:	beq.n	72e8 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
      return false;
    }
  }
  m_curSector += ns;
    73be:	ldr	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    73c0:	ldrb	r2, [r4, #9]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    73c2:	adds	r3, #1
    73c4:	str	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    73c6:	cbnz	r2, 7404 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x144>
    73c8:	movs	r0, #1
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    73ca:	add	sp, #8
    73cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    73d0:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    73d2:	movs	r2, #33	; 0x21
    73d4:	strb	r2, [r4, #16]
    73d6:	cmp	r3, #0
    73d8:	beq.n	72e8 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
    73da:	ldr	r3, [r4, #12]
    73dc:	movs	r1, #1
    73de:	ldrb	r0, [r3, #8]
    73e0:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    73e4:	movs	r1, #255	; 0xff
    73e6:	b.n	7370 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xb0>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    73e8:	movs	r3, #1
    73ea:	blx	r5
    73ec:	b.n	72ea <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x2a>
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    73ee:	mov	r1, r7
    73f0:	mov	r0, r4
    73f2:	blx	r2
    73f4:	cmp	r0, #0
    73f6:	beq.w	72e8 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    73fa:	movs	r3, #2
    73fc:	strb	r3, [r4, #8]
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    73fe:	str	r7, [r4, #4]
    7400:	ldr	r3, [r4, #0]
    7402:	b.n	72f6 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x36>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7404:	ldr	r3, [r4, #0]
    7406:	mov	r0, r4
    7408:	ldr	r3, [r3, #20]
    740a:	blx	r3
    740c:	b.n	72ea <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x2a>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    740e:	mov	r0, r4
    7410:	blx	r3
    7412:	b.n	7396 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xd6>
    7414:	.word	0x00007545
    7418:	.word	0x00006e71
    741c:	.word	0x200203c0
    7420:	.word	0x00007061
    7424:	.word	0x00006d69

00007428 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    7428:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    742c:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    742e:	ldrb	r1, [r0, #8]
    7430:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    7432:	sub	sp, #12
    7434:	mov	r4, r0
    7436:	mov	r8, r2
    7438:	mov	r9, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    743a:	beq.n	7450 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!syncDevice()) {
    743c:	ldr	r3, [r4, #0]
    743e:	mov	r0, r4
    7440:	ldr	r3, [r3, #20]
    7442:	blx	r3
    7444:	cmp	r0, #0
    7446:	bne.n	74b8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x90>
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    7448:	movs	r0, #0
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    744a:	add	sp, #12
    744c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7450:	ldr	r3, [r0, #4]
    7452:	cmp	r3, r5
    7454:	bne.n	743c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x14>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7456:	cmp.w	r9, #0
    745a:	beq.n	7538 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x110>
    745c:	ldr	r6, [pc, #220]	; (753c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x114>)
    745e:	movs	r7, #0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7460:	ldr	r3, [r6, #0]
    7462:	str	r3, [sp, #4]
	return ret;
    7464:	ldr	r5, [sp, #4]
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    7466:	uxth	r5, r5
    7468:	b.n	747a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x52>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    746a:	ldr	r3, [r6, #0]
    746c:	str	r3, [sp, #0]
	return ret;
    746e:	ldr	r3, [sp, #0]
    7470:	uxth	r3, r3
    7472:	subs	r3, r3, r5
    7474:	cmp.w	r3, #300	; 0x12c
    7478:	bgt.n	74b2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x8a>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    747a:	ldr	r0, [r4, #12]
    747c:	bl	935c <SdSpiAltDriver::receive()>
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    7480:	cmp	r0, #255	; 0xff
    7482:	strb	r0, [r4, #18]
    7484:	beq.n	746a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_SECTOR) {
    7486:	cmp	r0, #254	; 0xfe
    7488:	beq.n	74e2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xba>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    748a:	movs	r3, #23
    748c:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    748e:	ldrb	r3, [r4, #17]
    7490:	cmp	r3, #0
    7492:	beq.n	7448 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
    7494:	ldr	r3, [r4, #12]
    7496:	movs	r1, #1
    7498:	ldrb	r0, [r3, #8]
    749a:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    749e:	movs	r1, #255	; 0xff
    74a0:	ldr	r0, [r4, #12]
    74a2:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    74a6:	ldr	r0, [r4, #12]
    74a8:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    74ac:	movs	r3, #0
    74ae:	strb	r3, [r4, #17]
    74b0:	b.n	7448 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    74b2:	movs	r3, #28
    74b4:	strb	r3, [r4, #16]
    74b6:	b.n	748e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x66>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    74b8:	ldr	r3, [r4, #0]
    74ba:	ldr	r2, [pc, #132]	; (7540 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x118>)
    74bc:	ldr	r3, [r3, #64]	; 0x40
    74be:	cmp	r3, r2
    74c0:	bne.n	7528 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x100>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    74c2:	ldrb	r0, [r4, #19]
    74c4:	cmp	r0, #3
    sector <<= 9;
    74c6:	ite	ne
    74c8:	lslne	r2, r5, #9
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    74ca:	moveq	r2, r5
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    74cc:	movs	r1, #18
    74ce:	mov	r0, r4
    74d0:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    74d4:	cbz	r0, 7520 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xf8>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    74d6:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    74d8:	movs	r2, #12
    74da:	strb	r2, [r4, #16]
    74dc:	cmp	r3, #0
    74de:	beq.n	7448 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
    74e0:	b.n	7494 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6c>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
    74e2:	mov.w	r2, #512	; 0x200
    74e6:	mov	r1, r8
    74e8:	ldr	r0, [r4, #12]
    74ea:	bl	9378 <SdSpiAltDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    74ee:	strb	r0, [r4, #18]
    74f0:	cbz	r0, 74f8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xd0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    74f2:	movs	r3, #34	; 0x22
    74f4:	strb	r3, [r4, #16]
    74f6:	b.n	748e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x66>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    74f8:	ldr	r0, [r4, #12]
    74fa:	bl	935c <SdSpiAltDriver::receive()>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    74fe:	adds	r7, #1
    7500:	ldr	r0, [r4, #12]
    7502:	bl	935c <SdSpiAltDriver::receive()>
    7506:	cmp	r9, r7
    7508:	add.w	r8, r8, #512	; 0x200
    750c:	bne.n	7460 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    750e:	ldr	r3, [r4, #4]
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7510:	ldrb	r2, [r4, #9]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    7512:	add	r3, r9
    7514:	str	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    7516:	cbnz	r2, 752e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x106>
    7518:	movs	r0, #1
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    751a:	add	sp, #12
    751c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    7520:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    7522:	str	r5, [r4, #4]
    m_curState = READ_STATE;
    7524:	strb	r3, [r4, #8]
    7526:	b.n	7456 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    7528:	mov	r0, r4
    752a:	blx	r3
    752c:	b.n	74c4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x9c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    752e:	ldr	r3, [r4, #0]
    7530:	mov	r0, r4
    7532:	ldr	r3, [r3, #20]
    7534:	blx	r3
    7536:	b.n	744a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7538:	mov	r3, r5
    753a:	b.n	7510 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xe8>
    753c:	.word	0x200203c0
    7540:	.word	0x00006d69

00007544 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    7544:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7548:	mov	r5, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    754a:	ldrb	r1, [r0, #8]
    754c:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    754e:	sub	sp, #12
    7550:	mov	r4, r0
    7552:	mov	r8, r2
    7554:	mov	r9, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7556:	beq.n	756c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!syncDevice()) {
    7558:	ldr	r3, [r4, #0]
    755a:	mov	r0, r4
    755c:	ldr	r3, [r3, #20]
    755e:	blx	r3
    7560:	cmp	r0, #0
    7562:	bne.n	764c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x108>
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    7564:	movs	r0, #0

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    7566:	add	sp, #12
    7568:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    756c:	ldr	r3, [r0, #4]
    756e:	cmp	r3, r5
    7570:	bne.n	7558 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7572:	cmp.w	r9, #0
    7576:	beq.w	76a4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x160>
    757a:	ldr.w	sl, [pc, #312]	; 76b4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x170>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    757e:	ldr	r6, [pc, #296]	; (76a8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x164>)
    7580:	movs	r7, #0
    if (!writeData(src)) {
    7582:	ldr	r3, [r4, #0]
    7584:	ldr	r3, [r3, #68]	; 0x44
    7586:	cmp	r3, sl
    7588:	bne.n	760c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc8>
    758a:	ldr	r3, [r6, #0]
    758c:	str	r3, [sp, #4]
	return ret;
    758e:	ldr	r5, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7590:	uxth	r5, r5
    7592:	b.n	75a4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x60>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7594:	ldr	r3, [r6, #0]
    7596:	str	r3, [sp, #0]
	return ret;
    7598:	ldr	r3, [sp, #0]
    759a:	uxth	r3, r3
    759c:	subs	r3, r3, r5
    759e:	cmp.w	r3, #600	; 0x258
    75a2:	bgt.n	7634 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xf0>
    75a4:	ldr	r0, [r4, #12]
    75a6:	bl	935c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    75aa:	cmp	r0, #255	; 0xff
    75ac:	mov	fp, r0
    75ae:	bne.n	7594 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    75b0:	movs	r1, #252	; 0xfc
    75b2:	ldr	r0, [r4, #12]
    75b4:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
    75b8:	mov.w	r2, #512	; 0x200
    75bc:	mov	r1, r8
    75be:	ldr	r0, [r4, #12]
    75c0:	bl	93b0 <SdSpiAltDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    75c4:	mov	r1, fp
    75c6:	ldr	r0, [r4, #12]
    75c8:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
    75cc:	mov	r1, fp
    75ce:	ldr	r0, [r4, #12]
    75d0:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    75d4:	ldr	r0, [r4, #12]
    75d6:	bl	935c <SdSpiAltDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    75da:	and.w	r3, r0, #31
    75de:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    75e0:	strb	r0, [r4, #18]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    75e2:	beq.n	7616 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd2>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    75e4:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    75e6:	movs	r2, #30
    75e8:	strb	r2, [r4, #16]
    75ea:	cmp	r3, #0
    75ec:	beq.n	7564 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
    75ee:	ldr	r3, [r4, #12]
    75f0:	movs	r1, #1
    75f2:	ldrb	r0, [r3, #8]
    75f4:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    75f8:	mov	r1, fp
    75fa:	ldr	r0, [r4, #12]
    75fc:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7600:	ldr	r0, [r4, #12]
    7602:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7606:	movs	r3, #0
    7608:	strb	r3, [r4, #17]
    760a:	b.n	7564 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
    760c:	mov	r1, r8
    760e:	mov	r0, r4
    7610:	blx	r3
    7612:	cmp	r0, #0
    7614:	beq.n	7564 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7616:	adds	r7, #1
    7618:	cmp	r9, r7
    761a:	add.w	r8, r8, #512	; 0x200
    761e:	bne.n	7582 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    7620:	ldr	r3, [r4, #4]
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7622:	ldrb	r2, [r4, #9]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    7624:	add	r3, r9
    7626:	str	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    7628:	cmp	r2, #0
    762a:	bne.n	7694 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x150>
    762c:	movs	r0, #1

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    762e:	add	sp, #12
    7630:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7634:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7636:	movs	r2, #33	; 0x21
    7638:	strb	r2, [r4, #16]
    763a:	cmp	r3, #0
    763c:	beq.n	7564 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
    763e:	ldr	r3, [r4, #12]
    7640:	movs	r1, #1
    7642:	ldrb	r0, [r3, #8]
    7644:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7648:	movs	r1, #255	; 0xff
    764a:	b.n	75fa <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xb6>
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    764c:	ldr	r3, [r4, #0]
    764e:	ldr	r1, [pc, #92]	; (76ac <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x168>)
    7650:	ldr	r2, [r3, #72]	; 0x48
    7652:	cmp	r2, r1
    7654:	bne.n	7680 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x13c>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7656:	ldr	r3, [r3, #64]	; 0x40
    7658:	ldr	r2, [pc, #84]	; (76b0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16c>)
    765a:	cmp	r3, r2
    765c:	bne.n	769e <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x15a>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    765e:	ldrb	r0, [r4, #19]
    7660:	cmp	r0, #3
    sector <<= 9;
    7662:	ite	ne
    7664:	lslne	r2, r5, #9
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7666:	moveq	r2, r5
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    7668:	movs	r1, #25
    766a:	mov	r0, r4
    766c:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7670:	cbz	r0, 768c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x148>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7672:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7674:	movs	r2, #14
    7676:	strb	r2, [r4, #16]
    7678:	cmp	r3, #0
    767a:	beq.w	7564 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
    767e:	b.n	763e <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xfa>
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    7680:	mov	r1, r5
    7682:	mov	r0, r4
    7684:	blx	r2
    7686:	cmp	r0, #0
    7688:	beq.w	7564 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    768c:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    768e:	str	r5, [r4, #4]
    m_curState = WRITE_STATE;
    7690:	strb	r3, [r4, #8]
    7692:	b.n	7572 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7694:	ldr	r3, [r4, #0]
    7696:	mov	r0, r4
    7698:	ldr	r3, [r3, #20]
    769a:	blx	r3
    769c:	b.n	7566 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    769e:	mov	r0, r4
    76a0:	blx	r3
    76a2:	b.n	7660 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x11c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    76a4:	mov	r3, r5
    76a6:	b.n	7622 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xde>
    76a8:	.word	0x200203c0
    76ac:	.word	0x00007061
    76b0:	.word	0x00006d69
    76b4:	.word	0x00006e71

000076b8 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    76b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76bc:	ldr	r5, [pc, #160]	; (7760 <SdSpiCard::readData(unsigned char*, unsigned int)+0xa8>)
    76be:	sub	sp, #8
    76c0:	ldr	r3, [r5, #0]
    76c2:	str	r3, [sp, #0]
	return ret;
    76c4:	ldr	r4, [sp, #0]
    76c6:	mov	r8, r0
    76c8:	mov	r6, r1
    76ca:	mov	r7, r2
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    76cc:	uxth	r4, r4
    76ce:	b.n	76e0 <SdSpiCard::readData(unsigned char*, unsigned int)+0x28>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76d0:	ldr	r3, [r5, #0]
    76d2:	str	r3, [sp, #4]
	return ret;
    76d4:	ldr	r3, [sp, #4]
    76d6:	uxth	r3, r3
    76d8:	subs	r3, r3, r4
    76da:	cmp.w	r3, #300	; 0x12c
    76de:	bgt.n	772a <SdSpiCard::readData(unsigned char*, unsigned int)+0x72>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    76e0:	ldr.w	r0, [r8, #12]
    76e4:	bl	935c <SdSpiAltDriver::receive()>
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    76e8:	cmp	r0, #255	; 0xff
    76ea:	strb.w	r0, [r8, #18]
    76ee:	beq.n	76d0 <SdSpiCard::readData(unsigned char*, unsigned int)+0x18>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_SECTOR) {
    76f0:	cmp	r0, #254	; 0xfe
    76f2:	beq.n	7732 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    76f4:	movs	r3, #23
    76f6:	strb.w	r3, [r8, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    76fa:	ldrb.w	r0, [r8, #17]
    76fe:	cbz	r0, 7724 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6c>
    7700:	ldr.w	r3, [r8, #12]
    7704:	movs	r1, #1
    7706:	ldrb	r0, [r3, #8]
    7708:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    770c:	movs	r1, #255	; 0xff
    770e:	ldr.w	r0, [r8, #12]
    7712:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7716:	ldr.w	r0, [r8, #12]
    771a:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    771e:	movs	r0, #0
    7720:	strb.w	r0, [r8, #17]
  return true;

fail:
  spiStop();
  return false;
}
    7724:	add	sp, #8
    7726:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    772a:	movs	r3, #28
    772c:	strb.w	r3, [r8, #16]
    7730:	b.n	76fa <SdSpiCard::readData(unsigned char*, unsigned int)+0x42>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
    7732:	mov	r2, r7
    7734:	mov	r1, r6
    7736:	ldr.w	r0, [r8, #12]
    773a:	bl	9378 <SdSpiAltDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    773e:	strb.w	r0, [r8, #18]
    7742:	cbz	r0, 774c <SdSpiCard::readData(unsigned char*, unsigned int)+0x94>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7744:	movs	r3, #34	; 0x22
    7746:	strb.w	r3, [r8, #16]
    774a:	b.n	76fa <SdSpiCard::readData(unsigned char*, unsigned int)+0x42>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    774c:	ldr.w	r0, [r8, #12]
    7750:	bl	935c <SdSpiAltDriver::receive()>
    7754:	ldr.w	r0, [r8, #12]
    7758:	bl	935c <SdSpiAltDriver::receive()>
#else
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    775c:	movs	r0, #1
    775e:	b.n	7724 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6c>
    7760:	.word	0x200203c0

00007764 <SdSpiCard::readCID(CID*)>:
   *
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    7764:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7768:	ldr	r3, [r0, #0]
    776a:	ldr	r2, [pc, #332]	; (78b8 <SdSpiCard::readCID(CID*)+0x154>)
    776c:	ldr	r3, [r3, #20]
    776e:	cmp	r3, r2
    7770:	sub	sp, #8
    7772:	mov	r4, r0
    7774:	mov	r6, r1
    7776:	bne.n	77f0 <SdSpiCard::readCID(CID*)+0x8c>
#endif  // ENABLE_DEDICATED_SPI
}
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    7778:	ldrb	r5, [r0, #8]
    777a:	cmp	r5, #1
    777c:	beq.n	77f4 <SdSpiCard::readCID(CID*)+0x90>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    777e:	cmp	r5, #2
    7780:	beq.n	7812 <SdSpiCard::readCID(CID*)+0xae>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    7782:	movs	r3, #0
    7784:	strb	r3, [r4, #8]
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
  if (cardCommand(cmd, 0)) {
    7786:	movs	r2, #0
    7788:	movs	r1, #10
    778a:	mov	r0, r4
    778c:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7790:	mov	r5, r0
    7792:	cbz	r0, 77be <SdSpiCard::readCID(CID*)+0x5a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7794:	movs	r3, #26
    7796:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7798:	ldrb	r0, [r4, #17]
    779a:	cbz	r0, 77b8 <SdSpiCard::readCID(CID*)+0x54>
    779c:	ldr	r3, [r4, #12]
    779e:	movs	r1, #1
    77a0:	ldrb	r0, [r3, #8]
    77a2:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    77a6:	movs	r1, #255	; 0xff
    77a8:	ldr	r0, [r4, #12]
    77aa:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    77ae:	ldr	r0, [r4, #12]
    77b0:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    77b4:	movs	r0, #0
    77b6:	strb	r0, [r4, #17]
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
  }
    77b8:	add	sp, #8
    77ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    77be:	mov	r1, r6
    77c0:	movs	r2, #16
    77c2:	mov	r0, r4
    77c4:	bl	76b8 <SdSpiCard::readData(unsigned char*, unsigned int)>
    77c8:	cmp	r0, #0
    77ca:	beq.n	7798 <SdSpiCard::readCID(CID*)+0x34>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    77cc:	ldrb	r6, [r4, #17]
    77ce:	cmp	r6, #0
    77d0:	beq.n	77b8 <SdSpiCard::readCID(CID*)+0x54>
    77d2:	ldr	r3, [r4, #12]
    77d4:	movs	r1, #1
    77d6:	ldrb	r0, [r3, #8]
    77d8:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    77dc:	movs	r1, #255	; 0xff
    77de:	ldr	r0, [r4, #12]
    77e0:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    77e4:	ldr	r0, [r4, #12]
    77e6:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    77ea:	strb	r5, [r4, #17]
    77ec:	mov	r0, r6
    77ee:	b.n	77b8 <SdSpiCard::readCID(CID*)+0x54>
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    77f0:	blx	r3
    77f2:	b.n	7786 <SdSpiCard::readCID(CID*)+0x22>
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    77f4:	movs	r2, #0
    77f6:	movs	r1, #12
    77f8:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    77fc:	ldrb	r3, [r4, #17]
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    77fe:	mov	r7, r0
    7800:	cmp	r0, #0
    7802:	beq.n	7894 <SdSpiCard::readCID(CID*)+0x130>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7804:	movs	r2, #9
    7806:	strb	r2, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7808:	cmp	r3, #0
    780a:	beq.n	7786 <SdSpiCard::readCID(CID*)+0x22>
    780c:	ldr	r3, [r4, #12]
    780e:	mov	r1, r5
    7810:	b.n	787a <SdSpiCard::readCID(CID*)+0x116>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7812:	ldr.w	r8, [pc, #168]	; 78bc <SdSpiCard::readCID(CID*)+0x158>
    7816:	ldr.w	r3, [r8]
    781a:	str	r3, [sp, #4]
	return ret;
    781c:	ldr	r7, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    781e:	uxth	r7, r7
    7820:	b.n	7834 <SdSpiCard::readCID(CID*)+0xd0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7822:	ldr.w	r3, [r8]
    7826:	str	r3, [sp, #0]
	return ret;
    7828:	ldr	r3, [sp, #0]
    782a:	uxth	r3, r3
    782c:	subs	r3, r3, r7
    782e:	cmp.w	r3, #600	; 0x258
    7832:	bgt.n	786c <SdSpiCard::readCID(CID*)+0x108>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7834:	ldr	r0, [r4, #12]
    7836:	bl	935c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    783a:	cmp	r0, #255	; 0xff
    783c:	mov	r5, r0
    783e:	bne.n	7822 <SdSpiCard::readCID(CID*)+0xbe>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7840:	movs	r1, #253	; 0xfd
    7842:	ldr	r0, [r4, #12]
    7844:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7848:	ldrb	r3, [r4, #17]
    784a:	cmp	r3, #0
    784c:	beq.n	7782 <SdSpiCard::readCID(CID*)+0x1e>
    784e:	ldr	r3, [r4, #12]
    7850:	movs	r1, #1
    7852:	ldrb	r0, [r3, #8]
    7854:	bl	9be0 <digitalWrite>
    7858:	mov	r1, r5
    785a:	ldr	r0, [r4, #12]
    785c:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7860:	ldr	r0, [r4, #12]
    7862:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7866:	movs	r3, #0
    7868:	strb	r3, [r4, #17]
    786a:	b.n	7782 <SdSpiCard::readCID(CID*)+0x1e>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    786c:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    786e:	movs	r2, #29
    7870:	strb	r2, [r4, #16]
    7872:	cmp	r3, #0
    7874:	beq.n	7786 <SdSpiCard::readCID(CID*)+0x22>
    7876:	ldr	r3, [r4, #12]
    7878:	movs	r1, #1
    787a:	ldrb	r0, [r3, #8]
    787c:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7880:	movs	r1, #255	; 0xff
    7882:	ldr	r0, [r4, #12]
    7884:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7888:	ldr	r0, [r4, #12]
    788a:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    788e:	movs	r3, #0
    7890:	strb	r3, [r4, #17]
    7892:	b.n	7786 <SdSpiCard::readCID(CID*)+0x22>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7894:	cmp	r3, #0
    7896:	beq.w	7782 <SdSpiCard::readCID(CID*)+0x1e>
    789a:	ldr	r3, [r4, #12]
    789c:	mov	r1, r5
    789e:	ldrb	r0, [r3, #8]
    78a0:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    78a4:	movs	r1, #255	; 0xff
    78a6:	ldr	r0, [r4, #12]
    78a8:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    78ac:	ldr	r0, [r4, #12]
    78ae:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    78b2:	strb	r7, [r4, #17]
    78b4:	b.n	7782 <SdSpiCard::readCID(CID*)+0x1e>
    78b6:	nop
    78b8:	.word	0x000070c5
    78bc:	.word	0x200203c0

000078c0 <SdSpiCard::readCSD(csd_t*)>:
   *
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    78c0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    78c4:	ldr	r3, [r0, #0]
    78c6:	ldr	r2, [pc, #332]	; (7a14 <SdSpiCard::readCSD(csd_t*)+0x154>)
    78c8:	ldr	r3, [r3, #20]
    78ca:	cmp	r3, r2
    78cc:	sub	sp, #8
    78ce:	mov	r4, r0
    78d0:	mov	r6, r1
    78d2:	bne.n	794c <SdSpiCard::readCSD(csd_t*)+0x8c>
#endif  // ENABLE_DEDICATED_SPI
}
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    78d4:	ldrb	r5, [r0, #8]
    78d6:	cmp	r5, #1
    78d8:	beq.n	7950 <SdSpiCard::readCSD(csd_t*)+0x90>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    78da:	cmp	r5, #2
    78dc:	beq.n	796e <SdSpiCard::readCSD(csd_t*)+0xae>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    78de:	movs	r3, #0
    78e0:	strb	r3, [r4, #8]
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
  if (cardCommand(cmd, 0)) {
    78e2:	movs	r2, #0
    78e4:	movs	r1, #9
    78e6:	mov	r0, r4
    78e8:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    78ec:	mov	r5, r0
    78ee:	cbz	r0, 791a <SdSpiCard::readCSD(csd_t*)+0x5a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    78f0:	movs	r3, #26
    78f2:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    78f4:	ldrb	r0, [r4, #17]
    78f6:	cbz	r0, 7914 <SdSpiCard::readCSD(csd_t*)+0x54>
    78f8:	ldr	r3, [r4, #12]
    78fa:	movs	r1, #1
    78fc:	ldrb	r0, [r3, #8]
    78fe:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7902:	movs	r1, #255	; 0xff
    7904:	ldr	r0, [r4, #12]
    7906:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    790a:	ldr	r0, [r4, #12]
    790c:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7910:	movs	r0, #0
    7912:	strb	r0, [r4, #17]
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
  }
    7914:	add	sp, #8
    7916:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    791a:	mov	r1, r6
    791c:	movs	r2, #16
    791e:	mov	r0, r4
    7920:	bl	76b8 <SdSpiCard::readData(unsigned char*, unsigned int)>
    7924:	cmp	r0, #0
    7926:	beq.n	78f4 <SdSpiCard::readCSD(csd_t*)+0x34>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7928:	ldrb	r6, [r4, #17]
    792a:	cmp	r6, #0
    792c:	beq.n	7914 <SdSpiCard::readCSD(csd_t*)+0x54>
    792e:	ldr	r3, [r4, #12]
    7930:	movs	r1, #1
    7932:	ldrb	r0, [r3, #8]
    7934:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7938:	movs	r1, #255	; 0xff
    793a:	ldr	r0, [r4, #12]
    793c:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7940:	ldr	r0, [r4, #12]
    7942:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7946:	strb	r5, [r4, #17]
    7948:	mov	r0, r6
    794a:	b.n	7914 <SdSpiCard::readCSD(csd_t*)+0x54>
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    794c:	blx	r3
    794e:	b.n	78e2 <SdSpiCard::readCSD(csd_t*)+0x22>
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7950:	movs	r2, #0
    7952:	movs	r1, #12
    7954:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7958:	ldrb	r3, [r4, #17]
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    795a:	mov	r7, r0
    795c:	cmp	r0, #0
    795e:	beq.n	79f0 <SdSpiCard::readCSD(csd_t*)+0x130>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7960:	movs	r2, #9
    7962:	strb	r2, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7964:	cmp	r3, #0
    7966:	beq.n	78e2 <SdSpiCard::readCSD(csd_t*)+0x22>
    7968:	ldr	r3, [r4, #12]
    796a:	mov	r1, r5
    796c:	b.n	79d6 <SdSpiCard::readCSD(csd_t*)+0x116>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    796e:	ldr.w	r8, [pc, #168]	; 7a18 <SdSpiCard::readCSD(csd_t*)+0x158>
    7972:	ldr.w	r3, [r8]
    7976:	str	r3, [sp, #4]
	return ret;
    7978:	ldr	r7, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    797a:	uxth	r7, r7
    797c:	b.n	7990 <SdSpiCard::readCSD(csd_t*)+0xd0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    797e:	ldr.w	r3, [r8]
    7982:	str	r3, [sp, #0]
	return ret;
    7984:	ldr	r3, [sp, #0]
    7986:	uxth	r3, r3
    7988:	subs	r3, r3, r7
    798a:	cmp.w	r3, #600	; 0x258
    798e:	bgt.n	79c8 <SdSpiCard::readCSD(csd_t*)+0x108>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7990:	ldr	r0, [r4, #12]
    7992:	bl	935c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7996:	cmp	r0, #255	; 0xff
    7998:	mov	r5, r0
    799a:	bne.n	797e <SdSpiCard::readCSD(csd_t*)+0xbe>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    799c:	movs	r1, #253	; 0xfd
    799e:	ldr	r0, [r4, #12]
    79a0:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    79a4:	ldrb	r3, [r4, #17]
    79a6:	cmp	r3, #0
    79a8:	beq.n	78de <SdSpiCard::readCSD(csd_t*)+0x1e>
    79aa:	ldr	r3, [r4, #12]
    79ac:	movs	r1, #1
    79ae:	ldrb	r0, [r3, #8]
    79b0:	bl	9be0 <digitalWrite>
    79b4:	mov	r1, r5
    79b6:	ldr	r0, [r4, #12]
    79b8:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    79bc:	ldr	r0, [r4, #12]
    79be:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    79c2:	movs	r3, #0
    79c4:	strb	r3, [r4, #17]
    79c6:	b.n	78de <SdSpiCard::readCSD(csd_t*)+0x1e>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    79c8:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    79ca:	movs	r2, #29
    79cc:	strb	r2, [r4, #16]
    79ce:	cmp	r3, #0
    79d0:	beq.n	78e2 <SdSpiCard::readCSD(csd_t*)+0x22>
    79d2:	ldr	r3, [r4, #12]
    79d4:	movs	r1, #1
    79d6:	ldrb	r0, [r3, #8]
    79d8:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    79dc:	movs	r1, #255	; 0xff
    79de:	ldr	r0, [r4, #12]
    79e0:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    79e4:	ldr	r0, [r4, #12]
    79e6:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    79ea:	movs	r3, #0
    79ec:	strb	r3, [r4, #17]
    79ee:	b.n	78e2 <SdSpiCard::readCSD(csd_t*)+0x22>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    79f0:	cmp	r3, #0
    79f2:	beq.w	78de <SdSpiCard::readCSD(csd_t*)+0x1e>
    79f6:	ldr	r3, [r4, #12]
    79f8:	mov	r1, r5
    79fa:	ldrb	r0, [r3, #8]
    79fc:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7a00:	movs	r1, #255	; 0xff
    7a02:	ldr	r0, [r4, #12]
    7a04:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7a08:	ldr	r0, [r4, #12]
    7a0a:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7a0e:	strb	r7, [r4, #17]
    7a10:	b.n	78de <SdSpiCard::readCSD(csd_t*)+0x1e>
    7a12:	nop
    7a14:	.word	0x000070c5
    7a18:	.word	0x200203c0

00007a1c <SdSpiCard::sectorCount()>:
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
  }
  return m_status;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    7a1c:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7a1e:	ldr	r3, [r0, #0]
    7a20:	ldr	r1, [pc, #456]	; (7bec <SdSpiCard::sectorCount()+0x1d0>)
    7a22:	ldr	r2, [r3, #52]	; 0x34
    7a24:	cmp	r2, r1
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
  }
  return m_status;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    7a26:	sub	sp, #28
    7a28:	bne.n	7aae <SdSpiCard::sectorCount()+0x92>
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7a2a:	ldr	r3, [r3, #20]
    7a2c:	ldr	r2, [pc, #448]	; (7bf0 <SdSpiCard::sectorCount()+0x1d4>)
    7a2e:	cmp	r3, r2
    7a30:	mov	r4, r0
    7a32:	bne.w	7b7c <SdSpiCard::sectorCount()+0x160>
#endif  // ENABLE_DEDICATED_SPI
}
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    7a36:	ldrb	r5, [r0, #8]
    7a38:	cmp	r5, #1
    7a3a:	beq.w	7b80 <SdSpiCard::sectorCount()+0x164>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    7a3e:	cmp	r5, #2
    7a40:	beq.n	7b26 <SdSpiCard::sectorCount()+0x10a>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    7a42:	movs	r3, #0
    7a44:	strb	r3, [r4, #8]
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
  if (cardCommand(cmd, 0)) {
    7a46:	movs	r2, #0
    7a48:	movs	r1, #9
    7a4a:	mov	r0, r4
    7a4c:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7a50:	mov	r5, r0
    7a52:	cbz	r0, 7a80 <SdSpiCard::sectorCount()+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7a54:	movs	r3, #26
    7a56:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7a58:	ldrb	r3, [r4, #17]
    7a5a:	cbnz	r3, 7a62 <SdSpiCard::sectorCount()+0x46>
  return m_status;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7a5c:	movs	r0, #0
}
    7a5e:	add	sp, #28
    7a60:	pop	{r4, r5, r6, r7, pc}
    7a62:	ldr	r3, [r4, #12]
    7a64:	movs	r1, #1
    7a66:	ldrb	r0, [r3, #8]
    7a68:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7a6c:	movs	r1, #255	; 0xff
    7a6e:	ldr	r0, [r4, #12]
    7a70:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7a74:	ldr	r0, [r4, #12]
    7a76:	bl	9314 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7a7a:	movs	r3, #0
    7a7c:	strb	r3, [r4, #17]
    7a7e:	b.n	7a5c <SdSpiCard::sectorCount()+0x40>
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    7a80:	movs	r2, #16
    7a82:	add	r1, sp, #8
    7a84:	mov	r0, r4
    7a86:	bl	76b8 <SdSpiCard::readData(unsigned char*, unsigned int)>
    7a8a:	cmp	r0, #0
    7a8c:	beq.n	7a58 <SdSpiCard::sectorCount()+0x3c>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7a8e:	ldrb	r3, [r4, #17]
    7a90:	cbz	r3, 7ab6 <SdSpiCard::sectorCount()+0x9a>
    7a92:	ldr	r3, [r4, #12]
    7a94:	movs	r1, #1
    7a96:	ldrb	r0, [r3, #8]
    7a98:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7a9c:	movs	r1, #255	; 0xff
    7a9e:	ldr	r0, [r4, #12]
    7aa0:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7aa4:	ldr	r0, [r4, #12]
    7aa6:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7aaa:	strb	r5, [r4, #17]
    7aac:	b.n	7ab6 <SdSpiCard::sectorCount()+0x9a>
  return m_status;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7aae:	add	r1, sp, #8
    7ab0:	blx	r2
    7ab2:	cmp	r0, #0
    7ab4:	beq.n	7a5c <SdSpiCard::sectorCount()+0x40>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7ab6:	ldrb.w	r3, [sp, #8]
    7aba:	ands.w	r3, r3, #192	; 0xc0
    7abe:	beq.n	7ae4 <SdSpiCard::sectorCount()+0xc8>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7ac0:	cmp	r3, #64	; 0x40
    7ac2:	bne.n	7a5c <SdSpiCard::sectorCount()+0x40>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7ac4:	ldrb.w	r3, [sp, #17]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7ac8:	ldrb.w	r1, [sp, #15]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7acc:	ldrb.w	r0, [sp, #16]
    7ad0:	adds	r2, r3, #1
    7ad2:	and.w	r3, r1, #63	; 0x3f
    7ad6:	add.w	r3, r2, r3, lsl #16
    7ada:	add.w	r0, r3, r0, lsl #8
    7ade:	lsls	r0, r0, #10
}
    7ae0:	add	sp, #28
    7ae2:	pop	{r4, r5, r6, r7, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7ae4:	ldrb.w	r4, [sp, #17]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7ae8:	ldrb.w	r3, [sp, #14]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7aec:	ldrb.w	r2, [sp, #15]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7af0:	ldrb.w	r0, [sp, #18]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7af4:	ldrb.w	r1, [sp, #13]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7af8:	ldrb.w	r5, [sp, #16]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7afc:	and.w	r4, r4, #3
    7b00:	lsls	r4, r4, #1
    7b02:	lsls	r2, r2, #2
    7b04:	and.w	r3, r3, #3
    7b08:	orr.w	r0, r4, r0, lsr #7
    7b0c:	and.w	r1, r1, #15
    7b10:	orr.w	r3, r2, r3, lsl #10
    7b14:	add	r0, r1
    7b16:	orr.w	r3, r3, r5, lsr #6
    7b1a:	adds	r3, #1
    7b1c:	subs	r0, #7
    7b1e:	lsl.w	r0, r3, r0
    7b22:	add	sp, #28
    7b24:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7b26:	ldr	r7, [pc, #204]	; (7bf4 <SdSpiCard::sectorCount()+0x1d8>)
    7b28:	ldr	r3, [r7, #0]
    7b2a:	str	r3, [sp, #4]
	return ret;
    7b2c:	ldr	r6, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7b2e:	uxth	r6, r6
    7b30:	b.n	7b42 <SdSpiCard::sectorCount()+0x126>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7b32:	ldr	r3, [r7, #0]
    7b34:	str	r3, [sp, #0]
	return ret;
    7b36:	ldr	r3, [sp, #0]
    7b38:	uxth	r3, r3
    7b3a:	subs	r3, r3, r6
    7b3c:	cmp.w	r3, #600	; 0x258
    7b40:	bgt.n	7bb6 <SdSpiCard::sectorCount()+0x19a>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7b42:	ldr	r0, [r4, #12]
    7b44:	bl	935c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7b48:	cmp	r0, #255	; 0xff
    7b4a:	mov	r5, r0
    7b4c:	bne.n	7b32 <SdSpiCard::sectorCount()+0x116>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7b4e:	movs	r1, #253	; 0xfd
    7b50:	ldr	r0, [r4, #12]
    7b52:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7b56:	ldrb	r3, [r4, #17]
    7b58:	cmp	r3, #0
    7b5a:	beq.w	7a42 <SdSpiCard::sectorCount()+0x26>
    7b5e:	ldr	r3, [r4, #12]
    7b60:	movs	r1, #1
    7b62:	ldrb	r0, [r3, #8]
    7b64:	bl	9be0 <digitalWrite>
    7b68:	mov	r1, r5
    7b6a:	ldr	r0, [r4, #12]
    7b6c:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7b70:	ldr	r0, [r4, #12]
    7b72:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7b76:	movs	r3, #0
    7b78:	strb	r3, [r4, #17]
    7b7a:	b.n	7a42 <SdSpiCard::sectorCount()+0x26>
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7b7c:	blx	r3
    7b7e:	b.n	7a46 <SdSpiCard::sectorCount()+0x2a>
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7b80:	movs	r2, #0
    7b82:	movs	r1, #12
    7b84:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7b88:	ldrb	r3, [r4, #17]
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7b8a:	mov	r6, r0
    7b8c:	cbz	r0, 7bc8 <SdSpiCard::sectorCount()+0x1ac>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7b8e:	movs	r2, #9
    7b90:	strb	r2, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7b92:	cmp	r3, #0
    7b94:	beq.w	7a46 <SdSpiCard::sectorCount()+0x2a>
    7b98:	ldr	r3, [r4, #12]
    7b9a:	mov	r1, r5
    7b9c:	ldrb	r0, [r3, #8]
    7b9e:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7ba2:	movs	r1, #255	; 0xff
    7ba4:	ldr	r0, [r4, #12]
    7ba6:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7baa:	ldr	r0, [r4, #12]
    7bac:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7bb0:	movs	r3, #0
    7bb2:	strb	r3, [r4, #17]
    7bb4:	b.n	7a46 <SdSpiCard::sectorCount()+0x2a>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7bb6:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7bb8:	movs	r2, #29
    7bba:	strb	r2, [r4, #16]
    7bbc:	cmp	r3, #0
    7bbe:	beq.w	7a46 <SdSpiCard::sectorCount()+0x2a>
    7bc2:	ldr	r3, [r4, #12]
    7bc4:	movs	r1, #1
    7bc6:	b.n	7b9c <SdSpiCard::sectorCount()+0x180>
    7bc8:	cmp	r3, #0
    7bca:	beq.w	7a42 <SdSpiCard::sectorCount()+0x26>
    7bce:	ldr	r3, [r4, #12]
    7bd0:	mov	r1, r5
    7bd2:	ldrb	r0, [r3, #8]
    7bd4:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7bd8:	movs	r1, #255	; 0xff
    7bda:	ldr	r0, [r4, #12]
    7bdc:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7be0:	ldr	r0, [r4, #12]
    7be2:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7be6:	strb	r6, [r4, #17]
    7be8:	b.n	7a42 <SdSpiCard::sectorCount()+0x26>
    7bea:	nop
    7bec:	.word	0x000078c1
    7bf0:	.word	0x000070c5
    7bf4:	.word	0x200203c0

00007bf8 <SdSpiCard::erase(unsigned long, unsigned long)>:
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7bf8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    7bfc:	ldr	r3, [r0, #0]
    7bfe:	ldr.w	lr, [pc, #360]	; 7d68 <SdSpiCard::erase(unsigned long, unsigned long)+0x170>
    7c02:	ldr	r7, [r3, #52]	; 0x34
    7c04:	cmp	r7, lr
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7c06:	sub	sp, #24
    7c08:	mov	r4, r0
    7c0a:	mov	r5, r1
    7c0c:	mov	r6, r2
    7c0e:	bne.n	7c80 <SdSpiCard::erase(unsigned long, unsigned long)+0x88>
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7c10:	ldr	r3, [r3, #20]
    7c12:	blx	r3
  if (cardCommand(cmd, 0)) {
    7c14:	movs	r2, #0
    7c16:	movs	r1, #9
    7c18:	mov	r0, r4
    7c1a:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7c1e:	mov	r7, r0
    7c20:	cbz	r0, 7c52 <SdSpiCard::erase(unsigned long, unsigned long)+0x5a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7c22:	movs	r3, #26
    7c24:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7c26:	ldrb	r3, [r4, #17]
    7c28:	cbnz	r3, 7c34 <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    7c2a:	movs	r5, #0
}
    7c2c:	mov	r0, r5
    7c2e:	add	sp, #24
    7c30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c34:	ldr	r3, [r4, #12]
    7c36:	movs	r1, #1
    7c38:	ldrb	r0, [r3, #8]
    7c3a:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7c3e:	movs	r1, #255	; 0xff
    7c40:	ldr	r0, [r4, #12]
    7c42:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7c46:	ldr	r0, [r4, #12]
    7c48:	bl	9314 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7c4c:	movs	r3, #0
    7c4e:	strb	r3, [r4, #17]
    7c50:	b.n	7c2a <SdSpiCard::erase(unsigned long, unsigned long)+0x32>
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    7c52:	movs	r2, #16
    7c54:	add	r1, sp, #8
    7c56:	mov	r0, r4
    7c58:	bl	76b8 <SdSpiCard::readData(unsigned char*, unsigned int)>
    7c5c:	cmp	r0, #0
    7c5e:	beq.n	7c26 <SdSpiCard::erase(unsigned long, unsigned long)+0x2e>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7c60:	ldrb	r3, [r4, #17]
    7c62:	cbz	r3, 7c86 <SdSpiCard::erase(unsigned long, unsigned long)+0x8e>
    7c64:	ldr	r3, [r4, #12]
    7c66:	movs	r1, #1
    7c68:	ldrb	r0, [r3, #8]
    7c6a:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7c6e:	movs	r1, #255	; 0xff
    7c70:	ldr	r0, [r4, #12]
    7c72:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7c76:	ldr	r0, [r4, #12]
    7c78:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7c7c:	strb	r7, [r4, #17]
    7c7e:	b.n	7c86 <SdSpiCard::erase(unsigned long, unsigned long)+0x8e>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    7c80:	add	r1, sp, #8
    7c82:	blx	r7
    7c84:	cbz	r0, 7cc2 <SdSpiCard::erase(unsigned long, unsigned long)+0xca>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    7c86:	ldrb.w	r3, [sp, #18]
    7c8a:	lsls	r2, r3, #25
    7c8c:	bmi.n	7ca4 <SdSpiCard::erase(unsigned long, unsigned long)+0xac>
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7c8e:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    7c92:	ldrb.w	r1, [sp, #19]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7c96:	lsls	r3, r3, #1
    7c98:	adds	r2, r6, #1
    7c9a:	orr.w	r3, r3, r1, lsr #7
    7c9e:	orrs	r2, r5
    7ca0:	tst	r3, r2
    7ca2:	bne.n	7cec <SdSpiCard::erase(unsigned long, unsigned long)+0xf4>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    7ca4:	ldrb	r3, [r4, #19]
    7ca6:	cmp	r3, #3
    firstSector <<= 9;
    7ca8:	it	ne
    7caa:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    7cac:	mov	r2, r5
    7cae:	mov.w	r1, #32
    7cb2:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    7cb4:	it	ne
    7cb6:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    7cb8:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    7cbc:	cbz	r0, 7cf2 <SdSpiCard::erase(unsigned long, unsigned long)+0xfa>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7cbe:	movs	r3, #35	; 0x23
    7cc0:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7cc2:	ldrb	r3, [r4, #17]
    7cc4:	cmp	r3, #0
    7cc6:	beq.n	7c2a <SdSpiCard::erase(unsigned long, unsigned long)+0x32>
    7cc8:	ldr	r3, [r4, #12]
    7cca:	movs	r1, #1
    7ccc:	ldrb	r0, [r3, #8]
    7cce:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7cd2:	movs	r1, #255	; 0xff
    7cd4:	ldr	r0, [r4, #12]
    7cd6:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7cda:	ldr	r0, [r4, #12]
    7cdc:	bl	9314 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7ce0:	movs	r5, #0
  return true;

fail:
  spiStop();
  return false;
}
    7ce2:	mov	r0, r5
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7ce4:	strb	r5, [r4, #17]
  return true;

fail:
  spiStop();
  return false;
}
    7ce6:	add	sp, #24
    7ce8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7cec:	movs	r3, #36	; 0x24
    7cee:	strb	r3, [r4, #16]
    7cf0:	b.n	7cc2 <SdSpiCard::erase(unsigned long, unsigned long)+0xca>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    7cf2:	mov	r2, r6
    7cf4:	movs	r1, #33	; 0x21
    7cf6:	mov	r0, r4
    7cf8:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7cfc:	cmp	r0, #0
    7cfe:	bne.n	7cbe <SdSpiCard::erase(unsigned long, unsigned long)+0xc6>
      || cardCommand(CMD38, 0)) {
    7d00:	mov	r2, r0
    7d02:	movs	r1, #38	; 0x26
    7d04:	mov	r0, r4
    7d06:	bl	6f3c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7d0a:	cmp	r0, #0
    7d0c:	bne.n	7cbe <SdSpiCard::erase(unsigned long, unsigned long)+0xc6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7d0e:	ldr	r7, [pc, #84]	; (7d64 <SdSpiCard::erase(unsigned long, unsigned long)+0x16c>)
    7d10:	ldr	r3, [r7, #0]
    7d12:	str	r3, [sp, #4]
	return ret;
    7d14:	ldr	r5, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7d16:	movw	r8, #10000	; 0x2710
    7d1a:	uxth	r5, r5
    7d1c:	b.n	7d2c <SdSpiCard::erase(unsigned long, unsigned long)+0x134>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7d1e:	ldr	r3, [r7, #0]
    7d20:	str	r3, [sp, #0]
	return ret;
    7d22:	ldr	r3, [sp, #0]
    7d24:	uxth	r3, r3
    7d26:	subs	r3, r3, r5
    7d28:	cmp	r3, r8
    7d2a:	bgt.n	7d40 <SdSpiCard::erase(unsigned long, unsigned long)+0x148>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7d2c:	ldr	r0, [r4, #12]
    7d2e:	bl	935c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7d32:	cmp	r0, #255	; 0xff
    7d34:	mov	r6, r0
    7d36:	bne.n	7d1e <SdSpiCard::erase(unsigned long, unsigned long)+0x126>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7d38:	ldrb	r5, [r4, #17]
    7d3a:	cbnz	r5, 7d46 <SdSpiCard::erase(unsigned long, unsigned long)+0x14e>
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  spiStop();
  return true;
    7d3c:	movs	r5, #1
    7d3e:	b.n	7c2c <SdSpiCard::erase(unsigned long, unsigned long)+0x34>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7d40:	movs	r3, #37	; 0x25
    7d42:	strb	r3, [r4, #16]
    7d44:	b.n	7cc2 <SdSpiCard::erase(unsigned long, unsigned long)+0xca>
    7d46:	ldr	r3, [r4, #12]
    7d48:	movs	r1, #1
    7d4a:	ldrb	r0, [r3, #8]
    7d4c:	bl	9be0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7d50:	mov	r1, r6
    7d52:	ldr	r0, [r4, #12]
    7d54:	bl	9398 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7d58:	ldr	r0, [r4, #12]
    7d5a:	bl	9314 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7d5e:	movs	r3, #0
    7d60:	strb	r3, [r4, #17]
    7d62:	b.n	7c2c <SdSpiCard::erase(unsigned long, unsigned long)+0x34>
    7d64:	.word	0x200203c0
    7d68:	.word	0x000078c1

00007d6c <m_sdhc_isr()>:
  m_errorLine = line;
  return false;  // setSdErrorCode
}
//=============================================================================
// ISR
static void m_sdhc_isr() {
    7d6c:	push	{r4}
  SDHC_IRQSIGEN = 0;
    7d6e:	ldr	r4, [pc, #28]	; (7d8c <m_sdhc_isr()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    7d70:	ldr	r2, [pc, #28]	; (7d90 <m_sdhc_isr()+0x24>)
    7d72:	ldr	r1, [pc, #32]	; (7d94 <m_sdhc_isr()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
  m_dmaBusy = false;
    7d74:	ldr	r0, [pc, #32]	; (7d98 <m_sdhc_isr()+0x2c>)
  return false;  // setSdErrorCode
}
//=============================================================================
// ISR
static void m_sdhc_isr() {
  SDHC_IRQSIGEN = 0;
    7d76:	movs	r3, #0
    7d78:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    7d7a:	ldr	r4, [r2, #0]
    7d7c:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    7d7e:	ldr	r1, [r1, #0]
    7d80:	str	r1, [r2, #0]
  m_dmaBusy = false;
}
    7d82:	ldr.w	r4, [sp], #4
// ISR
static void m_sdhc_isr() {
  SDHC_IRQSIGEN = 0;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  m_dmaBusy = false;
    7d86:	strb	r3, [r0, #0]
}
    7d88:	bx	lr
    7d8a:	nop
    7d8c:	.word	0x400b1038
    7d90:	.word	0x400b1030
    7d94:	.word	0x20020384
    7d98:	.word	0x200203a0

00007d9c <isBusyDMA()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//-----------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    7d9c:	ldr	r3, [pc, #4]	; (7da4 <isBusyDMA()+0x8>)
    7d9e:	ldrb	r0, [r3, #0]
}
    7da0:	bx	lr
    7da2:	nop
    7da4:	.word	0x200203a0

00007da8 <SdioCard::errorCode() const>:
  }
  return true;
}
//-----------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    7da8:	ldr	r3, [pc, #4]	; (7db0 <SdioCard::errorCode() const+0x8>)
}
    7daa:	ldrb	r0, [r3, #0]
    7dac:	bx	lr
    7dae:	nop
    7db0:	.word	0x1fff088c

00007db4 <SdioCard::errorData() const>:
//-----------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    7db4:	ldr	r3, [pc, #4]	; (7dbc <SdioCard::errorData() const+0x8>)
    7db6:	ldr	r0, [r3, #0]
}
    7db8:	bx	lr
    7dba:	nop
    7dbc:	.word	0x20020384

00007dc0 <SdioCard::readCID(CID*)>:
    }
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    7dc0:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    7dc2:	ldr	r4, [pc, #20]	; (7dd8 <SdioCard::readCID(CID*)+0x18>)
    }
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    7dc4:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    7dc6:	ldmia	r4!, {r0, r1, r2, r3}
    7dc8:	str	r0, [r5, #0]
    7dca:	str	r1, [r5, #4]
    7dcc:	str	r2, [r5, #8]
    7dce:	str	r3, [r5, #12]
  return true;
}
    7dd0:	movs	r0, #1
    7dd2:	pop	{r4, r5}
    7dd4:	bx	lr
    7dd6:	nop
    7dd8:	.word	0x20020368

00007ddc <SdioCard::readCSD(csd_t*)>:
//-----------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7ddc:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    7dde:	ldr	r4, [pc, #20]	; (7df4 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7de0:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    7de2:	ldmia	r4!, {r0, r1, r2, r3}
    7de4:	str	r0, [r5, #0]
    7de6:	str	r1, [r5, #4]
    7de8:	str	r2, [r5, #8]
    7dea:	str	r3, [r5, #12]
  return true;
}
    7dec:	movs	r0, #1
    7dee:	pop	{r4, r5}
    7df0:	bx	lr
    7df2:	nop
    7df4:	.word	0x20020390

00007df8 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    7df8:	ldr	r3, [pc, #8]	; (7e04 <SdioCard::readOCR(unsigned long*)+0xc>)
    7dfa:	ldr	r3, [r3, #0]
    7dfc:	str	r3, [r1, #0]
  return true;
}
    7dfe:	movs	r0, #1
    7e00:	bx	lr
    7e02:	nop
    7e04:	.word	0x2002037c

00007e08 <SdioCard::writeStart(unsigned long)>:
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e08:	ldr	r1, [pc, #16]	; (7e1c <SdioCard::writeStart(unsigned long)+0x14>)
  m_errorLine = line;
    7e0a:	ldr	r3, [pc, #20]	; (7e20 <SdioCard::writeStart(unsigned long)+0x18>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e0c:	movs	r0, #40	; 0x28
  m_errorLine = line;
    7e0e:	movw	r2, #1297	; 0x511
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e12:	strb	r0, [r1, #0]
  m_errorLine = line;
    7e14:	str	r2, [r3, #0]
}
//-----------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  // K66/K65 Errata - SDHC: Does not support Infinite Sector Transfer Mode.
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
    7e16:	movs	r0, #0
    7e18:	bx	lr
    7e1a:	nop
    7e1c:	.word	0x1fff088c
    7e20:	.word	0x20020380

00007e24 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    7e24:	bx	lr
    7e26:	nop

00007e28 <SdioCard::~SdioCard()>:
    7e28:	push	{r4, lr}
    7e2a:	movs	r1, #16
    7e2c:	mov	r4, r0
    7e2e:	bl	b188 <operator delete(void*, unsigned int)>
    7e32:	mov	r0, r4
    7e34:	pop	{r4, pc}
    7e36:	nop

00007e38 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    7e38:	ldr	r3, [pc, #20]	; (7e50 <SdioCard::type() const+0x18>)
    7e3a:	ldrb	r3, [r3, #0]
    7e3c:	cbz	r3, 7e4c <SdioCard::type() const+0x14>
    7e3e:	ldr	r3, [pc, #20]	; (7e54 <SdioCard::type() const+0x1c>)
    7e40:	ldrb	r3, [r3, #0]
    7e42:	cmp	r3, #0
    7e44:	ite	ne
    7e46:	movne	r0, #3
    7e48:	moveq	r0, #2
    7e4a:	bx	lr
    7e4c:	movs	r0, #1
}
    7e4e:	bx	lr
    7e50:	.word	0x20020378
    7e54:	.word	0x20020379

00007e58 <SdioCard::sectorCount()>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//-----------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    7e58:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7e5a:	ldr	r1, [pc, #100]	; (7ec0 <SdioCard::sectorCount()+0x68>)
    7e5c:	ldrb	r3, [r1, #0]
    7e5e:	ands.w	r3, r3, #192	; 0xc0
    7e62:	beq.n	7e88 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7e64:	cmp	r3, #64	; 0x40
    7e66:	beq.n	7e6e <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    7e68:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    7e6a:	pop	{r4, r5, r6}
    7e6c:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7e6e:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7e70:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7e72:	ldrb	r0, [r1, #8]
    7e74:	adds	r2, r3, #1
    7e76:	and.w	r3, r4, #63	; 0x3f
    7e7a:	add.w	r3, r2, r3, lsl #16
    7e7e:	add.w	r0, r3, r0, lsl #8
    7e82:	lsls	r0, r0, #10
    7e84:	pop	{r4, r5, r6}
    7e86:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7e88:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7e8a:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7e8c:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7e8e:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7e90:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7e92:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7e94:	and.w	r1, r5, #3
    7e98:	lsls	r1, r1, #1
    7e9a:	and.w	r3, r3, #3
    7e9e:	lsls	r2, r2, #2
    7ea0:	orr.w	r0, r1, r0, lsr #7
    7ea4:	orr.w	r3, r2, r3, lsl #10
    7ea8:	and.w	r1, r4, #15
    7eac:	orr.w	r3, r3, r6, lsr #6
    7eb0:	add	r0, r1
    7eb2:	subs	r0, #7
    7eb4:	adds	r3, #1
    7eb6:	lsl.w	r0, r3, r0
    7eba:	pop	{r4, r5, r6}
    7ebc:	bx	lr
    7ebe:	nop
    7ec0:	.word	0x20020390

00007ec4 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//-----------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7ec4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DBG_IRQSTAT();
    7ec8:	ldr	r4, [pc, #156]	; (7f68 <cardCommand(unsigned long, unsigned long)+0xa4>)
    7eca:	ldr	r3, [r4, #0]
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//-----------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7ecc:	mov	r7, r0
    7ece:	mov	r8, r1
  DBG_IRQSTAT();
    7ed0:	cmp	r3, #0
    7ed2:	bne.n	7f3a <cardCommand(unsigned long, unsigned long)+0x76>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7ed4:	bl	9ca0 <micros>
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT &(SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//-----------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    7ed8:	ldr	r4, [pc, #144]	; (7f6c <cardCommand(unsigned long, unsigned long)+0xa8>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7eda:	ldr	r6, [pc, #148]	; (7f70 <cardCommand(unsigned long, unsigned long)+0xac>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7edc:	mov	r5, r0
    7ede:	b.n	7eea <cardCommand(unsigned long, unsigned long)+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7ee0:	bl	9ca0 <micros>
    7ee4:	subs	r0, r0, r5
    7ee6:	cmp	r0, r6
    7ee8:	bhi.n	7f34 <cardCommand(unsigned long, unsigned long)+0x70>
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT &(SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//-----------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    7eea:	ldr	r3, [r4, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7eec:	lsls	r1, r3, #31
    7eee:	bmi.n	7ee0 <cardCommand(unsigned long, unsigned long)+0x1c>
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    7ef0:	ldr	r2, [pc, #128]	; (7f74 <cardCommand(unsigned long, unsigned long)+0xb0>)
  SDHC_XFERTYP = xfertyp;
    7ef2:	ldr	r3, [pc, #132]	; (7f78 <cardCommand(unsigned long, unsigned long)+0xb4>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    7ef4:	str.w	r8, [r2]
  SDHC_XFERTYP = xfertyp;
    7ef8:	str	r7, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7efa:	bl	9ca0 <micros>
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//-----------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT &(SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    7efe:	ldr	r4, [pc, #104]	; (7f68 <cardCommand(unsigned long, unsigned long)+0xa4>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7f00:	ldr	r5, [pc, #108]	; (7f70 <cardCommand(unsigned long, unsigned long)+0xac>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7f02:	mov	r6, r0
    7f04:	b.n	7f10 <cardCommand(unsigned long, unsigned long)+0x4c>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7f06:	bl	9ca0 <micros>
    7f0a:	subs	r0, r0, r6
    7f0c:	cmp	r0, r5
    7f0e:	bhi.n	7f34 <cardCommand(unsigned long, unsigned long)+0x70>
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//-----------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT &(SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    7f10:	ldr	r2, [r4, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7f12:	ldr	r3, [pc, #104]	; (7f7c <cardCommand(unsigned long, unsigned long)+0xb8>)
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//-----------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT &(SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    7f14:	ldr	r1, [pc, #80]	; (7f68 <cardCommand(unsigned long, unsigned long)+0xa4>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7f16:	ands	r3, r2
    7f18:	cmp	r3, #0
    7f1a:	beq.n	7f06 <cardCommand(unsigned long, unsigned long)+0x42>
  SDHC_CMDARG = arg;
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    7f1c:	ldr	r3, [pc, #96]	; (7f80 <cardCommand(unsigned long, unsigned long)+0xbc>)
    7f1e:	ldr	r2, [r1, #0]
    7f20:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7f22:	ldr	r2, [r3, #0]
    7f24:	str	r2, [r1, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7f26:	ldr	r2, [r3, #0]
    7f28:	lsls	r2, r2, #31
    7f2a:	bpl.n	7f34 <cardCommand(unsigned long, unsigned long)+0x70>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    7f2c:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7f2e:	tst.w	r3, #983040	; 0xf0000
    7f32:	beq.n	7f60 <cardCommand(unsigned long, unsigned long)+0x9c>
    7f34:	movs	r0, #0
    7f36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7f3a:	movw	r1, #527	; 0x20f
    7f3e:	ldr	r0, [pc, #68]	; (7f84 <cardCommand(unsigned long, unsigned long)+0xc0>)
    7f40:	bl	ae9c <Print::print(long)>
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7f44:	movs	r1, #9
    7f46:	ldr	r0, [pc, #64]	; (7f88 <cardCommand(unsigned long, unsigned long)+0xc4>)
    7f48:	bl	9604 <usb_serial_write>
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//-----------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
    7f4c:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    7f4e:	ldr	r0, [pc, #52]	; (7f84 <cardCommand(unsigned long, unsigned long)+0xc0>)
    7f50:	movs	r3, #0
    7f52:	movs	r2, #16
    7f54:	bl	af98 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    7f58:	ldr	r0, [pc, #40]	; (7f84 <cardCommand(unsigned long, unsigned long)+0xc0>)
    7f5a:	bl	af4c <Print::println()>
    7f5e:	b.n	7ed4 <cardCommand(unsigned long, unsigned long)+0x10>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7f60:	movs	r0, #1
    7f62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f66:	nop
    7f68:	.word	0x400b1030
    7f6c:	.word	0x400b1024
    7f70:	.word	0x000f4240
    7f74:	.word	0x400b1008
    7f78:	.word	0x400b100c
    7f7c:	.word	0x000f0001
    7f80:	.word	0x20020384
    7f84:	.word	0x1fff0898
    7f88:	.word	0x00013dcc

00007f8c <isBusyCMD13()>:
//-----------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
    7f8c:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    7f8e:	ldr	r3, [pc, #28]	; (7fac <isBusyCMD13()+0x20>)
    7f90:	ldr	r0, [pc, #28]	; (7fb0 <isBusyCMD13()+0x24>)
    7f92:	ldr	r1, [r3, #0]
    7f94:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    7f98:	cbz	r0, 7fa8 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    7f9a:	ldr	r3, [pc, #24]	; (7fb4 <isBusyCMD13()+0x28>)
    7f9c:	ldr	r0, [r3, #0]
    7f9e:	eor.w	r0, r0, #256	; 0x100
    7fa2:	ubfx	r0, r0, #8, #1
    7fa6:	pop	{r3, pc}
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    7fa8:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    7faa:	pop	{r3, pc}
    7fac:	.word	0x20020388
    7fb0:	.word	0x0d1a0000
    7fb4:	.word	0x400b1010

00007fb8 <SdioCard::status()>:
//-----------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//-----------------------------------------------------------------------------
uint32_t SdioCard::status() {
    7fb8:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//-----------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7fba:	ldr	r3, [pc, #16]	; (7fcc <SdioCard::status()+0x14>)
    7fbc:	ldr	r0, [pc, #16]	; (7fd0 <SdioCard::status()+0x18>)
    7fbe:	ldr	r1, [r3, #0]
    7fc0:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    7fc4:	cbz	r0, 7fca <SdioCard::status()+0x12>
    7fc6:	ldr	r3, [pc, #12]	; (7fd4 <SdioCard::status()+0x1c>)
    7fc8:	ldr	r0, [r3, #0]
  return transferStop();
}
//-----------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    7fca:	pop	{r3, pc}
    7fcc:	.word	0x20020388
    7fd0:	.word	0x0d1a0000
    7fd4:	.word	0x400b1010

00007fd8 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//-----------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    7fd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7fdc:	mov	r9, r0
    7fde:	mov	sl, r1
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7fe0:	bl	9ca0 <micros>
    7fe4:	ldr	r5, [pc, #200]	; (80b0 <cardCMD6(unsigned long, unsigned char*)+0xd8>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    7fe6:	ldr.w	r8, [pc, #264]	; 80f0 <cardCMD6(unsigned long, unsigned char*)+0x118>
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7fea:	ldr	r7, [pc, #200]	; (80b4 <cardCMD6(unsigned long, unsigned char*)+0xdc>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7fec:	mov	r6, r0
    7fee:	b.n	7ffa <cardCMD6(unsigned long, unsigned char*)+0x22>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7ff0:	bl	9ca0 <micros>
    7ff4:	subs	r0, r0, r6
    7ff6:	cmp	r0, r7
    7ff8:	bhi.n	8080 <cardCMD6(unsigned long, unsigned char*)+0xa8>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    7ffa:	ldr	r1, [r5, #0]
    7ffc:	ldr	r0, [pc, #184]	; (80b8 <cardCMD6(unsigned long, unsigned char*)+0xe0>)
    7ffe:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8002:	mov	r4, r0
    8004:	cmp	r0, #0
    8006:	beq.n	7ff0 <cardCMD6(unsigned long, unsigned char*)+0x18>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8008:	ldr.w	r3, [r8]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    800c:	lsls	r2, r3, #23
    800e:	bpl.n	7ff0 <cardCMD6(unsigned long, unsigned char*)+0x18>
	  }
	}		
#endif
//-----------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8010:	ldr	r5, [pc, #168]	; (80bc <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  m_irqstat = 0;
    8012:	ldr	r7, [pc, #172]	; (80c0 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    8014:	ldr	r2, [pc, #172]	; (80c4 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  SDHC_CMDARG = arg;
    8016:	ldr	r0, [pc, #176]	; (80c8 <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8018:	ldr	r1, [pc, #176]	; (80cc <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    801a:	ldr	r3, [pc, #180]	; (80d0 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
	  }
	}		
#endif
//-----------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    801c:	movs	r6, #1
    801e:	strb	r6, [r5, #0]
  m_irqstat = 0;
    8020:	movs	r6, #0
    8022:	str	r6, [r7, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_CMDARG = arg;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8024:	ldr	r6, [pc, #172]	; (80d4 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    8026:	str.w	sl, [r2]
  SDHC_CMDARG = arg;
    802a:	str.w	r9, [r0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    802e:	str	r6, [r1, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8030:	ldr	r0, [pc, #164]	; (80d8 <cardCMD6(unsigned long, unsigned char*)+0x100>)
  SDHC_XFERTYP = CMD6_XFERTYP;
    8032:	ldr	r1, [pc, #168]	; (80dc <cardCMD6(unsigned long, unsigned char*)+0x104>)
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    8034:	ldr.w	r9, [pc, #188]	; 80f4 <cardCMD6(unsigned long, unsigned char*)+0x11c>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_CMDARG = arg;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8038:	str	r0, [r3, #0]
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    803a:	ldr	r3, [pc, #164]	; (80e0 <cardCMD6(unsigned long, unsigned char*)+0x108>)
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_CMDARG = arg;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = CMD6_XFERTYP;
    803c:	str	r1, [r2, #12]
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    803e:	str.w	r3, [r9]
  uint32_t m = micros();
    8042:	bl	9ca0 <micros>
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//-----------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    8046:	ldrb	r3, [r5, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
    8048:	mov	r6, r0
  while (fcn()) {
    804a:	cbz	r3, 8096 <cardCMD6(unsigned long, unsigned char*)+0xbe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    804c:	ldr.w	r8, [pc, #100]	; 80b4 <cardCMD6(unsigned long, unsigned char*)+0xdc>
    8050:	b.n	805a <cardCMD6(unsigned long, unsigned char*)+0x82>
      m_busyFcn = 0;
      return true;
    }
    yield();
    8052:	bl	1724 <yield>
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//-----------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    8056:	ldrb	r3, [r5, #0]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8058:	cbz	r3, 8096 <cardCMD6(unsigned long, unsigned char*)+0xbe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    805a:	bl	9ca0 <micros>
    805e:	subs	r0, r0, r6
    8060:	cmp	r0, r8
    8062:	bls.n	8052 <cardCMD6(unsigned long, unsigned char*)+0x7a>
      m_busyFcn = 0;
    8064:	movs	r3, #0
    8066:	str.w	r3, [r9]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    806a:	ldr	r1, [pc, #120]	; (80e4 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
  m_errorLine = line;
    806c:	ldr	r3, [pc, #120]	; (80e8 <cardCMD6(unsigned long, unsigned char*)+0x110>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    806e:	movs	r0, #4
  m_errorLine = line;
    8070:	mov.w	r2, #556	; 0x22c
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8074:	strb	r0, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = CMD6_XFERTYP;

  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_CMD6);
    8076:	movs	r4, #0
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8078:	str	r2, [r3, #0]

  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  return true;
}
    807a:	mov	r0, r4
    807c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8080:	ldr	r1, [pc, #96]	; (80e4 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
  m_errorLine = line;
    8082:	ldr	r3, [pc, #100]	; (80e8 <cardCMD6(unsigned long, unsigned char*)+0x110>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8084:	movs	r0, #10
  m_errorLine = line;
    8086:	movw	r2, #546	; 0x222
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    808a:	strb	r0, [r1, #0]
  m_errorLine = line;
    808c:	str	r2, [r3, #0]
}
//-----------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    808e:	movs	r4, #0

  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  return true;
}
    8090:	mov	r0, r4
    8092:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8096:	ldr	r3, [r7, #0]
    8098:	ldr	r1, [pc, #36]	; (80c0 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    809a:	movs	r2, #0
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    809c:	lsls	r3, r3, #30
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    809e:	str.w	r2, [r9]
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    80a2:	bpl.n	806a <cardCMD6(unsigned long, unsigned char*)+0x92>
    80a4:	ldr	r2, [r1, #0]
    80a6:	ldr	r3, [pc, #68]	; (80ec <cardCMD6(unsigned long, unsigned char*)+0x114>)
    80a8:	ands	r3, r2
    80aa:	cmp	r3, #0
    80ac:	bne.n	806a <cardCMD6(unsigned long, unsigned char*)+0x92>
    80ae:	b.n	8090 <cardCMD6(unsigned long, unsigned char*)+0xb8>
    80b0:	.word	0x20020388
    80b4:	.word	0x000f4240
    80b8:	.word	0x0d1a0000
    80bc:	.word	0x200203a0
    80c0:	.word	0x20020384
    80c4:	.word	0x400b1000
    80c8:	.word	0x400b1008
    80cc:	.word	0x400b1004
    80d0:	.word	0x400b1038
    80d4:	.word	0x00010040
    80d8:	.word	0x117f0002
    80dc:	.word	0x063a0011
    80e0:	.word	0x00007d9d
    80e4:	.word	0x1fff088c
    80e8:	.word	0x20020380
    80ec:	.word	0x117f0000
    80f0:	.word	0x400b1010
    80f4:	.word	0x200203a4

000080f8 <SdioCard::erase(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//-----------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    80f8:	push	{r3, r4, r5, r6, r7, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    80fa:	ldr	r6, [pc, #200]	; (81c4 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    80fc:	ldrb	r3, [r6, #10]
    80fe:	and.w	r4, r3, #64	; 0x40
//-----------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//-----------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8102:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8104:	cbnz	r4, 811e <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8106:	and.w	r3, r3, #63	; 0x3f
//-----------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    810a:	ldrb	r2, [r6, #11]
    810c:	and.w	r0, r4, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8110:	lsls	r3, r3, #1
    8112:	adds	r4, r5, #1
    8114:	orr.w	r3, r3, r2, lsr #7
    8118:	orrs	r4, r1
    811a:	tst	r3, r4
    811c:	bne.n	815a <SdioCard::erase(unsigned long, unsigned long)+0x62>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    811e:	ldr	r3, [pc, #168]	; (81c8 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    8120:	ldrb	r3, [r3, #0]
    8122:	cbnz	r3, 8128 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    8124:	lsls	r1, r1, #9
    lastSector <<= 9;
    8126:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    8128:	ldr	r0, [pc, #160]	; (81cc <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    812a:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    812e:	cbnz	r0, 8140 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8130:	ldr	r1, [pc, #156]	; (81d0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    8132:	ldr	r3, [pc, #160]	; (81d4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8134:	movs	r4, #15
  m_errorLine = line;
    8136:	movw	r2, #999	; 0x3e7
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    813a:	strb	r4, [r1, #0]
  m_errorLine = line;
    813c:	str	r2, [r3, #0]
    813e:	pop	{r3, r4, r5, r6, r7, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    8140:	mov	r1, r5
    8142:	ldr	r0, [pc, #148]	; (81d8 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    8144:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8148:	cbnz	r0, 816a <SdioCard::erase(unsigned long, unsigned long)+0x72>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    814a:	ldr	r1, [pc, #132]	; (81d0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    814c:	ldr	r3, [pc, #132]	; (81d4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    814e:	movs	r4, #16
  m_errorLine = line;
    8150:	movw	r2, #1002	; 0x3ea
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8154:	strb	r4, [r1, #0]
  m_errorLine = line;
    8156:	str	r2, [r3, #0]
    8158:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    815a:	ldr	r1, [pc, #116]	; (81d0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    815c:	ldr	r3, [pc, #116]	; (81d4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    815e:	movs	r4, #36	; 0x24
  m_errorLine = line;
    8160:	movw	r2, #991	; 0x3df
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8164:	strb	r4, [r1, #0]
  m_errorLine = line;
    8166:	str	r2, [r3, #0]
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    8168:	pop	{r3, r4, r5, r6, r7, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    816a:	movs	r1, #0
    816c:	ldr	r0, [pc, #108]	; (81dc <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    816e:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8172:	cbnz	r0, 8184 <SdioCard::erase(unsigned long, unsigned long)+0x8c>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8174:	ldr	r1, [pc, #88]	; (81d0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    8176:	ldr	r3, [pc, #92]	; (81d4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8178:	movs	r4, #17
  m_errorLine = line;
    817a:	movw	r2, #1005	; 0x3ed
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    817e:	strb	r4, [r1, #0]
  m_errorLine = line;
    8180:	str	r2, [r3, #0]
    8182:	pop	{r3, r4, r5, r6, r7, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8184:	bl	9ca0 <micros>
    8188:	ldr	r4, [pc, #84]	; (81e0 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    818a:	ldr	r7, [pc, #88]	; (81e4 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    818c:	ldr	r6, [pc, #88]	; (81e8 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    818e:	mov	r5, r0
    8190:	b.n	819c <SdioCard::erase(unsigned long, unsigned long)+0xa4>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8192:	bl	9ca0 <micros>
    8196:	subs	r0, r0, r5
    8198:	cmp	r0, r6
    819a:	bhi.n	81b0 <SdioCard::erase(unsigned long, unsigned long)+0xb8>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    819c:	ldr	r1, [r4, #0]
    819e:	ldr	r0, [pc, #76]	; (81ec <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
    81a0:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    81a4:	cmp	r0, #0
    81a6:	beq.n	8192 <SdioCard::erase(unsigned long, unsigned long)+0x9a>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    81a8:	ldr	r3, [r7, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    81aa:	lsls	r3, r3, #23
    81ac:	bpl.n	8192 <SdioCard::erase(unsigned long, unsigned long)+0x9a>
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    81ae:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81b0:	ldr	r1, [pc, #28]	; (81d0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    81b2:	ldr	r3, [pc, #32]	; (81d4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81b4:	movs	r0, #37	; 0x25
  m_errorLine = line;
    81b6:	mov.w	r2, #1008	; 0x3f0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81ba:	strb	r0, [r1, #0]
  m_errorLine = line;
    81bc:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    81be:	movs	r0, #0
    81c0:	b.n	81ae <SdioCard::erase(unsigned long, unsigned long)+0xb6>
    81c2:	nop
    81c4:	.word	0x20020390
    81c8:	.word	0x20020379
    81cc:	.word	0x201a0000
    81d0:	.word	0x1fff088c
    81d4:	.word	0x20020380
    81d8:	.word	0x211a0000
    81dc:	.word	0x261b0000
    81e0:	.word	0x20020388
    81e4:	.word	0x400b1010
    81e8:	.word	0x000f4240
    81ec:	.word	0x0d1a0000

000081f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//-----------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    81f0:	tst.w	r2, #3
    81f4:	bne.n	81f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    81f6:	cbnz	r3, 820a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81f8:	ldr	r1, [pc, #252]	; (82f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>)
  m_errorLine = line;
    81fa:	ldr	r3, [pc, #256]	; (82fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10c>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81fc:	movs	r0, #34	; 0x22
  m_errorLine = line;
    81fe:	movw	r2, #755	; 0x2f3
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8202:	strb	r0, [r1, #0]
  m_errorLine = line;
    8204:	str	r2, [r3, #0]
}
//-----------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
    8206:	movs	r0, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = xfertyp;

  return waitDmaStatus();
}
    8208:	bx	lr
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//-----------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    820a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    820e:	ldr.w	fp, [pc, #296]	; 8338 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>
    8212:	ldr	r4, [pc, #236]	; (8300 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x110>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8214:	ldr.w	sl, [pc, #292]	; 833c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8218:	ldr	r6, [pc, #232]	; (8304 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x114>)
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//-----------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    821a:	sub	sp, #12
    821c:	mov	r7, r3
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    821e:	ldr	r3, [pc, #232]	; (8308 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x118>)
    8220:	str	r0, [sp, #4]
    8222:	mov	r9, r1
    8224:	mov	r8, r2
    8226:	str.w	r3, [fp]
  uint32_t m = micros();
    822a:	bl	9ca0 <micros>
    822e:	mov	r5, r0
    8230:	b.n	8240 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x50>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8232:	bl	9ca0 <micros>
    8236:	subs	r0, r0, r5
    8238:	cmp	r0, r6
    823a:	bhi.n	82bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xcc>
      m_busyFcn = 0;
      return true;
    }
    yield();
    823c:	bl	1724 <yield>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    8240:	ldr	r1, [r4, #0]
    8242:	ldr	r0, [pc, #200]	; (830c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x11c>)
    8244:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8248:	cmp	r0, #0
    824a:	beq.n	8232 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x42>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    824c:	ldr.w	r3, [sl]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8250:	lsls	r3, r3, #23
    8252:	bpl.n	8232 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x42>
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
    8254:	ldr	r3, [pc, #184]	; (8310 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
	  }
	}		
#endif
//-----------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8256:	ldr	r4, [pc, #188]	; (8314 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
  m_irqstat = 0;
    8258:	ldr	r5, [pc, #188]	; (8318 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    825a:	ldr	r2, [pc, #192]	; (831c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
    825c:	ldrb	r3, [r3, #0]
	  }
	}		
#endif
//-----------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    825e:	movs	r1, #1
    8260:	strb	r1, [r4, #0]
  m_irqstat = 0;
    8262:	movs	r1, #0
    8264:	str	r1, [r5, #0]
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    8266:	str.w	r8, [r2]
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
    826a:	cmp	r3, #0
    826c:	bne.n	82f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    826e:	mov.w	r1, r9, lsl #9
    8272:	ldr	r3, [pc, #172]	; (8320 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8274:	ldr	r0, [pc, #172]	; (8324 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
    8276:	str	r1, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8278:	lsls	r7, r7, #16
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = xfertyp;
    827a:	ldr	r2, [pc, #172]	; (8328 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    827c:	ldr	r1, [pc, #172]	; (832c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    827e:	orr.w	r7, r7, #512	; 0x200
    8282:	str	r7, [r0, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8284:	str	r1, [r3, #48]	; 0x30
  SDHC_XFERTYP = xfertyp;
    8286:	ldr	r1, [sp, #4]
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    8288:	ldr	r3, [pc, #164]	; (8330 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = xfertyp;
    828a:	str	r1, [r2, #0]
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    828c:	str.w	r3, [fp]
  uint32_t m = micros();
    8290:	bl	9ca0 <micros>
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//-----------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    8294:	ldrb	r3, [r4, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
    8296:	mov	r6, r0
  while (fcn()) {
    8298:	cbz	r3, 82d6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe6>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    829a:	ldr	r7, [pc, #104]	; (8304 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x114>)
    829c:	b.n	82a6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb6>
      m_busyFcn = 0;
      return true;
    }
    yield();
    829e:	bl	1724 <yield>
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//-----------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    82a2:	ldrb	r3, [r4, #0]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    82a4:	cbz	r3, 82d6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe6>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    82a6:	bl	9ca0 <micros>
    82aa:	subs	r0, r0, r6
    82ac:	cmp	r0, r7
    82ae:	bls.n	829e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
      m_busyFcn = 0;
    82b0:	movs	r0, #0
    82b2:	str.w	r0, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = xfertyp;

  return waitDmaStatus();
}
    82b6:	add	sp, #12
    82b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82bc:	ldr	r1, [pc, #56]	; (82f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>)
  m_errorLine = line;
    82be:	ldr	r3, [pc, #60]	; (82fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10c>)
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    82c0:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82c2:	movs	r4, #10
  m_errorLine = line;
    82c4:	movw	r2, #758	; 0x2f6
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82c8:	strb	r4, [r1, #0]
  m_errorLine = line;
    82ca:	str	r2, [r3, #0]
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    82cc:	str.w	r0, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = xfertyp;

  return waitDmaStatus();
}
    82d0:	add	sp, #12
    82d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    82d6:	ldr	r0, [r5, #0]
    82d8:	ldr	r2, [pc, #60]	; (8318 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    82da:	movs	r3, #0
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    82dc:	ands.w	r0, r0, #2
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    82e0:	str.w	r3, [fp]
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    82e4:	beq.n	82b6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xc6>
    82e6:	ldr	r3, [r2, #0]
    82e8:	ldr	r0, [pc, #72]	; (8334 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    82ea:	ands	r0, r3
    82ec:	clz	r0, r0
    82f0:	lsrs	r0, r0, #5
    82f2:	b.n	82b6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xc6>
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
    82f4:	mov	r1, r9
    82f6:	b.n	8272 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    82f8:	.word	0x1fff088c
    82fc:	.word	0x20020380
    8300:	.word	0x20020388
    8304:	.word	0x000f4240
    8308:	.word	0x00007f8d
    830c:	.word	0x0d1a0000
    8310:	.word	0x20020379
    8314:	.word	0x200203a0
    8318:	.word	0x20020384
    831c:	.word	0x400b1000
    8320:	.word	0x400b1008
    8324:	.word	0x400b1004
    8328:	.word	0x400b100c
    832c:	.word	0x117f0002
    8330:	.word	0x00007d9d
    8334:	.word	0x117f0000
    8338:	.word	0x200203a4
    833c:	.word	0x400b1010

00008340 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    }
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8340:	push	{r3, r4, r5, r6, r7, lr}
    8342:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    8344:	ldrb	r0, [r0, #12]
    8346:	lsls	r0, r0, #31
    }
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8348:	mov	r4, r1
    834a:	mov	r5, r2
    834c:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    834e:	bmi.n	8378 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    8350:	cbz	r3, 8374 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8352:	add	r7, r1
    8354:	b.n	835a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    8356:	cmp	r4, r7
    8358:	beq.n	8374 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    835a:	ldr	r3, [r6, #0]
    835c:	mov	r2, r5
    835e:	mov	r1, r4
    8360:	ldr	r3, [r3, #8]
    8362:	mov	r0, r6
    8364:	blx	r3
    8366:	adds	r4, #1
    8368:	add.w	r5, r5, #512	; 0x200
    836c:	cmp	r0, #0
    836e:	bne.n	8356 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    8370:	movs	r0, #0
    8372:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    8374:	movs	r0, #1
    8376:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    8378:	lsls	r0, r2, #30
    837a:	beq.n	83a2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    837c:	cmp	r3, #0
    837e:	beq.n	8374 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8380:	add	r7, r1
    8382:	b.n	8388 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    8384:	cmp	r7, r4
    8386:	beq.n	8374 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    8388:	ldr	r3, [r6, #0]
    838a:	mov	r2, r5
    838c:	mov	r1, r4
    838e:	ldr	r3, [r3, #8]
    8390:	mov	r0, r6
    8392:	blx	r3
}
//-----------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8394:	adds	r4, #1
    8396:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    839a:	cmp	r0, #0
    839c:	bne.n	8384 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    839e:	movs	r0, #0
    83a0:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    83a2:	ldr	r0, [pc, #24]	; (83bc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    83a4:	bl	81f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    83a8:	cmp	r0, #0
    83aa:	bne.n	8374 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    83ac:	ldr	r1, [pc, #16]	; (83c0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    83ae:	ldr	r3, [pc, #20]	; (83c4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    83b0:	movs	r4, #12
  m_errorLine = line;
    83b2:	movw	r2, #1078	; 0x436
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    83b6:	strb	r4, [r1, #0]
  m_errorLine = line;
    83b8:	str	r2, [r3, #0]
    83ba:	pop	{r3, r4, r5, r6, r7, pc}
    83bc:	.word	0x123a0037
    83c0:	.word	0x1fff088c
    83c4:	.word	0x20020380

000083c8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    83c8:	push	{r3, r4, r5, r6, r7, lr}
    83ca:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    83cc:	ldrb	r0, [r0, #12]
    83ce:	lsls	r0, r0, #31
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    83d0:	mov	r4, r1
    83d2:	mov	r5, r2
    83d4:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    83d6:	bmi.n	8400 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
  for (size_t i = 0; i < n; i++) {
    83d8:	cbz	r3, 83fc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    83da:	add	r7, r1
    83dc:	b.n	83e2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    83de:	cmp	r4, r7
    83e0:	beq.n	83fc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!writeSector(sector + i, src + i*512UL)) {
    83e2:	ldr	r3, [r6, #0]
    83e4:	mov	r2, r5
    83e6:	mov	r1, r4
    83e8:	ldr	r3, [r3, #24]
    83ea:	mov	r0, r6
    83ec:	blx	r3
    83ee:	adds	r4, #1
    83f0:	add.w	r5, r5, #512	; 0x200
    83f4:	cmp	r0, #0
    83f6:	bne.n	83de <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    83f8:	movs	r0, #0
    83fa:	pop	{r3, r4, r5, r6, r7, pc}
    if (!writeSector(sector + i, src + i*512UL)) {
      return false;
    }
  }
  }
  return true;
    83fc:	movs	r0, #1
    83fe:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    8400:	lsls	r0, r2, #30
    8402:	beq.n	842a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    8404:	cmp	r3, #0
    8406:	beq.n	83fc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    8408:	add	r7, r1
    840a:	b.n	8410 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    840c:	cmp	r7, r4
    840e:	beq.n	83fc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    8410:	ldr	r3, [r6, #0]
    8412:	mov	r2, r5
    8414:	mov	r1, r4
    8416:	ldr	r3, [r3, #24]
    8418:	mov	r0, r6
    841a:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    841c:	adds	r4, #1
    841e:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    8422:	cmp	r0, #0
    8424:	bne.n	840c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    8426:	movs	r0, #0
    8428:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    842a:	ldr	r0, [pc, #24]	; (8444 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    842c:	bl	81f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8430:	cmp	r0, #0
    8432:	bne.n	83fc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8434:	ldr	r1, [pc, #16]	; (8448 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    8436:	ldr	r3, [pc, #20]	; (844c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8438:	movs	r4, #14
  m_errorLine = line;
    843a:	movw	r2, #1250	; 0x4e2
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    843e:	strb	r4, [r1, #0]
  m_errorLine = line;
    8440:	str	r2, [r3, #0]
    8442:	pop	{r3, r4, r5, r6, r7, pc}
    8444:	.word	0x193a0027
    8448:	.word	0x1fff088c
    844c:	.word	0x20020380

00008450 <SdioCard::writeData(unsigned char const*)>:
  }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8450:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DBG_IRQSTAT();
    8454:	ldr	r4, [pc, #360]	; (85c0 <SdioCard::writeData(unsigned char const*)+0x170>)
    8456:	ldr	r3, [r4, #0]
  }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8458:	mov	r6, r1
  DBG_IRQSTAT();
    845a:	cmp	r3, #0
    845c:	bne.w	8598 <SdioCard::writeData(unsigned char const*)+0x148>
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8460:	ldr	r3, [pc, #352]	; (85c4 <SdioCard::writeData(unsigned char const*)+0x174>)
    8462:	ldr	r3, [r3, #0]
    8464:	lsls	r2, r3, #23
    8466:	bmi.n	8490 <SdioCard::writeData(unsigned char const*)+0x40>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8468:	ldr	r3, [pc, #348]	; (85c8 <SdioCard::writeData(unsigned char const*)+0x178>)
    // Don't stop at sector gap if last sector.  Allows auto CMD12.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    846a:	ldr	r1, [pc, #352]	; (85cc <SdioCard::writeData(unsigned char const*)+0x17c>)
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    846c:	ldr	r2, [r3, #0]
    846e:	bic.w	r2, r2, #65536	; 0x10000
    8472:	str	r2, [r3, #0]
    // Don't stop at sector gap if last sector.  Allows auto CMD12.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    8474:	ldr	r2, [r1, #0]
    8476:	lsrs	r2, r2, #16
    8478:	lsls	r2, r2, #16
    847a:	cmp.w	r2, #65536	; 0x10000
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    847e:	ldr	r2, [r3, #0]
    8480:	orr.w	r2, r2, #131072	; 0x20000
    8484:	str	r2, [r3, #0]
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    // Don't stop at sector gap if last sector.  Allows auto CMD12.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    8486:	beq.n	8490 <SdioCard::writeData(unsigned char const*)+0x40>
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    } else {
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
      SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8488:	ldr	r2, [r3, #0]
    848a:	orr.w	r2, r2, #65536	; 0x10000
    848e:	str	r2, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8490:	bl	9ca0 <micros>
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
}
//-----------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    8494:	ldr	r5, [pc, #300]	; (85c4 <SdioCard::writeData(unsigned char const*)+0x174>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8496:	ldr.w	r8, [pc, #316]	; 85d4 <SdioCard::writeData(unsigned char const*)+0x184>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    849a:	mov	r7, r0
    849c:	b.n	84a8 <SdioCard::writeData(unsigned char const*)+0x58>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    849e:	bl	9ca0 <micros>
    84a2:	subs	r0, r0, r7
    84a4:	cmp	r0, r8
    84a6:	bhi.n	8570 <SdioCard::writeData(unsigned char const*)+0x120>
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
}
//-----------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    84a8:	ldr	r0, [r5, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    84aa:	ands.w	r4, r0, #1024	; 0x400
    84ae:	beq.n	849e <SdioCard::writeData(unsigned char const*)+0x4e>
  }
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    84b0:	ldr	r0, [pc, #272]	; (85c4 <SdioCard::writeData(unsigned char const*)+0x174>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    84b2:	ldr	r1, [pc, #284]	; (85d0 <SdioCard::writeData(unsigned char const*)+0x180>)
    84b4:	add.w	r2, r6, #64	; 0x40
    84b8:	add.w	r6, r6, #576	; 0x240
  }
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    84bc:	ldr	r3, [r0, #0]
    84be:	lsls	r3, r3, #21
    84c0:	bpl.n	84bc <SdioCard::writeData(unsigned char const*)+0x6c>
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    84c2:	ldr.w	r3, [r2, #-64]
    84c6:	str	r3, [r1, #0]
    84c8:	ldr.w	r3, [r2, #-60]
    84cc:	str	r3, [r1, #0]
    84ce:	ldr.w	r3, [r2, #-56]
    84d2:	str	r3, [r1, #0]
    84d4:	ldr.w	r3, [r2, #-52]
    84d8:	str	r3, [r1, #0]
    84da:	ldr.w	r3, [r2, #-48]
    84de:	str	r3, [r1, #0]
    84e0:	ldr.w	r3, [r2, #-44]
    84e4:	str	r3, [r1, #0]
    84e6:	ldr.w	r3, [r2, #-40]
    84ea:	str	r3, [r1, #0]
    84ec:	ldr.w	r3, [r2, #-36]
    84f0:	str	r3, [r1, #0]
    84f2:	ldr.w	r3, [r2, #-32]
    84f6:	str	r3, [r1, #0]
    84f8:	ldr.w	r3, [r2, #-28]
    84fc:	str	r3, [r1, #0]
    84fe:	ldr.w	r3, [r2, #-24]
    8502:	str	r3, [r1, #0]
    8504:	ldr.w	r3, [r2, #-20]
    8508:	str	r3, [r1, #0]
    850a:	ldr.w	r3, [r2, #-16]
    850e:	str	r3, [r1, #0]
    8510:	ldr.w	r3, [r2, #-12]
    8514:	str	r3, [r1, #0]
    8516:	ldr.w	r3, [r2, #-8]
    851a:	str	r3, [r1, #0]
    851c:	ldr.w	r3, [r2, #-4]
    8520:	str	r3, [r1, #0]
    8522:	adds	r2, #64	; 0x40
    }
  }
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8524:	cmp	r2, r6
    8526:	bne.n	84bc <SdioCard::writeData(unsigned char const*)+0x6c>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8528:	bl	9ca0 <micros>
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    852c:	ldr	r5, [pc, #144]	; (85c0 <SdioCard::writeData(unsigned char const*)+0x170>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    852e:	ldr	r7, [pc, #164]	; (85d4 <SdioCard::writeData(unsigned char const*)+0x184>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8530:	mov	r6, r0
    8532:	b.n	853e <SdioCard::writeData(unsigned char const*)+0xee>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8534:	bl	9ca0 <micros>
    8538:	subs	r0, r0, r6
    853a:	cmp	r0, r7
    853c:	bhi.n	8584 <SdioCard::writeData(unsigned char const*)+0x134>
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    853e:	ldr	r3, [r5, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8540:	ldr	r4, [pc, #148]	; (85d8 <SdioCard::writeData(unsigned char const*)+0x188>)
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8542:	ldr	r2, [pc, #124]	; (85c0 <SdioCard::writeData(unsigned char const*)+0x170>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8544:	ands	r4, r3
    8546:	cmp	r4, #0
    8548:	beq.n	8534 <SdioCard::writeData(unsigned char const*)+0xe4>
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    854a:	ldr	r1, [pc, #144]	; (85dc <SdioCard::writeData(unsigned char const*)+0x18c>)
    854c:	ldr	r3, [r2, #0]
    854e:	str	r3, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    8550:	ldr	r3, [r1, #0]
    8552:	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8554:	ldr	r3, [r1, #0]
    8556:	ands.w	r0, r3, #2
    855a:	beq.n	856c <SdioCard::writeData(unsigned char const*)+0x11c>
    855c:	ldr	r3, [r1, #0]
    855e:	ldr	r0, [pc, #128]	; (85e0 <SdioCard::writeData(unsigned char const*)+0x190>)
    8560:	ands	r0, r3
    8562:	clz	r0, r0
    8566:	lsrs	r0, r0, #5
    8568:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
    856c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8570:	ldr	r1, [pc, #112]	; (85e4 <SdioCard::writeData(unsigned char const*)+0x194>)
  m_errorLine = line;
    8572:	ldr	r3, [pc, #116]	; (85e8 <SdioCard::writeData(unsigned char const*)+0x198>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8574:	movs	r5, #31
  m_errorLine = line;
    8576:	movw	r2, #1277	; 0x4fd
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    857a:	strb	r5, [r1, #0]
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
      SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    }
  }
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    857c:	mov	r0, r4
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    857e:	str	r2, [r3, #0]
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
      SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    }
  }
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    8580:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8584:	ldr	r1, [pc, #92]	; (85e4 <SdioCard::writeData(unsigned char const*)+0x194>)
  m_errorLine = line;
    8586:	ldr	r3, [pc, #96]	; (85e8 <SdioCard::writeData(unsigned char const*)+0x198>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8588:	movs	r5, #33	; 0x21
  m_errorLine = line;
    858a:	mov.w	r2, #1288	; 0x508
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    858e:	strb	r5, [r1, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    8590:	mov	r0, r4
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8592:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    8594:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8598:	movw	r1, #1263	; 0x4ef
    859c:	ldr	r0, [pc, #76]	; (85ec <SdioCard::writeData(unsigned char const*)+0x19c>)
    859e:	bl	ae9c <Print::print(long)>
    85a2:	movs	r1, #9
    85a4:	ldr	r0, [pc, #72]	; (85f0 <SdioCard::writeData(unsigned char const*)+0x1a0>)
    85a6:	bl	9604 <usb_serial_write>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
    85aa:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    85ac:	ldr	r0, [pc, #60]	; (85ec <SdioCard::writeData(unsigned char const*)+0x19c>)
    85ae:	movs	r3, #0
    85b0:	movs	r2, #16
    85b2:	bl	af98 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    85b6:	ldr	r0, [pc, #52]	; (85ec <SdioCard::writeData(unsigned char const*)+0x19c>)
    85b8:	bl	af4c <Print::println()>
    85bc:	b.n	8460 <SdioCard::writeData(unsigned char const*)+0x10>
    85be:	nop
    85c0:	.word	0x400b1030
    85c4:	.word	0x400b1024
    85c8:	.word	0x400b1028
    85cc:	.word	0x400b1004
    85d0:	.word	0x400b1020
    85d4:	.word	0x000f4240
    85d8:	.word	0x117f0002
    85dc:	.word	0x20020384
    85e0:	.word	0x117f0000
    85e4:	.word	0x1fff088c
    85e8:	.word	0x20020380
    85ec:	.word	0x1fff0898
    85f0:	.word	0x00013dcc

000085f4 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//-----------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    85f4:	ldr	r3, [pc, #44]	; (8624 <SdioCard::isBusy()+0x30>)
    85f6:	ldr	r3, [r3, #0]
    85f8:	cbz	r3, 85fc <SdioCard::isBusy()+0x8>
    85fa:	bx	r3
    85fc:	ldr	r3, [pc, #40]	; (8628 <SdioCard::isBusy()+0x34>)
//-----------------------------------------------------------------------------
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//-----------------------------------------------------------------------------
bool SdioCard::isBusy() {
    85fe:	push	{r4, lr}
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8600:	ldrb	r4, [r3, #0]
    8602:	cbnz	r4, 8608 <SdioCard::isBusy()+0x14>
}
    8604:	mov	r0, r4
    8606:	pop	{r4, pc}
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    8608:	ldr	r3, [pc, #32]	; (862c <SdioCard::isBusy()+0x38>)
    860a:	ldr	r0, [pc, #36]	; (8630 <SdioCard::isBusy()+0x3c>)
    860c:	ldr	r1, [r3, #0]
    860e:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8612:	cmp	r0, #0
    8614:	beq.n	8604 <SdioCard::isBusy()+0x10>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8616:	ldr	r3, [pc, #28]	; (8634 <SdioCard::isBusy()+0x40>)
    8618:	ldr	r4, [r3, #0]
    861a:	eor.w	r4, r4, #256	; 0x100
    861e:	ubfx	r4, r4, #8, #1
    8622:	b.n	8604 <SdioCard::isBusy()+0x10>
    8624:	.word	0x200203a4
    8628:	.word	0x2002038c
    862c:	.word	0x20020388
    8630:	.word	0x0d1a0000
    8634:	.word	0x400b1010

00008638 <transferStop()>:
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
	#endif
}
//-----------------------------------------------------------------------------
static bool transferStop() {
    8638:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DBG_IRQSTAT();
    863c:	ldr	r4, [pc, #188]	; (86fc <transferStop()+0xc4>)
    863e:	ldr	r3, [r4, #0]
    8640:	cmp	r3, #0
    8642:	bne.n	86bc <transferStop()+0x84>

  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8644:	movs	r1, #0
    8646:	ldr	r0, [pc, #184]	; (8700 <transferStop()+0xc8>)
    8648:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    864c:	cbnz	r0, 8660 <transferStop()+0x28>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    864e:	ldr	r1, [pc, #180]	; (8704 <transferStop()+0xcc>)
  m_errorLine = line;
    8650:	ldr	r3, [pc, #180]	; (8708 <transferStop()+0xd0>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8652:	movs	r4, #9
  m_errorLine = line;
    8654:	movw	r2, #830	; 0x33e
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8658:	strb	r4, [r1, #0]
  m_errorLine = line;
    865a:	str	r2, [r3, #0]
//-----------------------------------------------------------------------------
static bool transferStop() {
  DBG_IRQSTAT();

  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
    865c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    8660:	ldr.w	r8, [pc, #208]	; 8734 <transferStop()+0xfc>
    8664:	ldr	r3, [pc, #164]	; (870c <transferStop()+0xd4>)
    8666:	str.w	r3, [r8]
  uint32_t m = micros();
    866a:	bl	9ca0 <micros>
    866e:	ldr	r4, [pc, #160]	; (8710 <transferStop()+0xd8>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8670:	ldr	r7, [pc, #160]	; (8714 <transferStop()+0xdc>)
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8672:	ldr	r6, [pc, #164]	; (8718 <transferStop()+0xe0>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
    8674:	mov	r5, r0
    8676:	b.n	8686 <transferStop()+0x4e>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8678:	bl	9ca0 <micros>
    867c:	subs	r0, r0, r5
    867e:	cmp	r0, r6
    8680:	bhi.n	86e2 <transferStop()+0xaa>
      m_busyFcn = 0;
      return true;
    }
    yield();
    8682:	bl	1724 <yield>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    8686:	ldr	r1, [r4, #0]
    8688:	ldr	r0, [pc, #144]	; (871c <transferStop()+0xe4>)
    868a:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    868e:	cmp	r0, #0
    8690:	beq.n	8678 <transferStop()+0x40>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8692:	ldr	r3, [r7, #0]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8694:	lsls	r3, r3, #23
    8696:	bpl.n	8678 <transferStop()+0x40>
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    8698:	ldr	r4, [pc, #132]	; (8720 <transferStop()+0xe8>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    869a:	ldr	r1, [pc, #136]	; (8724 <transferStop()+0xec>)

  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    869c:	ldr	r5, [pc, #136]	; (8728 <transferStop()+0xf0>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    869e:	ldr	r6, [r4, #0]
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    86a0:	movs	r3, #0
    86a2:	str.w	r3, [r8]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    86a6:	ldr	r3, [r1, #0]

  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    86a8:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    86aa:	bic.w	r3, r3, #65536	; 0x10000

  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    86ae:	orr.w	r2, r2, #67108864	; 0x4000000
    86b2:	str	r2, [r5, #0]

  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    86b4:	str	r6, [r4, #0]
  SDHC_PROCTL = proctl;
    86b6:	str	r3, [r1, #0]

  return true;
}
    86b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    86bc:	movw	r1, #827	; 0x33b
    86c0:	ldr	r0, [pc, #104]	; (872c <transferStop()+0xf4>)
    86c2:	bl	ae9c <Print::print(long)>
    86c6:	movs	r1, #9
    86c8:	ldr	r0, [pc, #100]	; (8730 <transferStop()+0xf8>)
    86ca:	bl	9604 <usb_serial_write>
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
	#endif
}
//-----------------------------------------------------------------------------
static bool transferStop() {
  DBG_IRQSTAT();
    86ce:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    86d0:	ldr	r0, [pc, #88]	; (872c <transferStop()+0xf4>)
    86d2:	movs	r3, #0
    86d4:	movs	r2, #16
    86d6:	bl	af98 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    86da:	ldr	r0, [pc, #80]	; (872c <transferStop()+0xf4>)
    86dc:	bl	af4c <Print::println()>
    86e0:	b.n	8644 <transferStop()+0xc>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    86e2:	ldr	r1, [pc, #32]	; (8704 <transferStop()+0xcc>)
  m_errorLine = line;
    86e4:	ldr	r3, [pc, #32]	; (8708 <transferStop()+0xd0>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    86e6:	movs	r4, #10
  m_errorLine = line;
    86e8:	movw	r2, #833	; 0x341
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    86ec:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    86ee:	strb	r4, [r1, #0]
  m_errorLine = line;
    86f0:	str	r2, [r3, #0]
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    86f2:	str.w	r0, [r8]

  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    86f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    86fa:	nop
    86fc:	.word	0x400b1030
    8700:	.word	0x0cdb0000
    8704:	.word	0x1fff088c
    8708:	.word	0x20020380
    870c:	.word	0x00007f8d
    8710:	.word	0x20020388
    8714:	.word	0x400b1010
    8718:	.word	0x000f4240
    871c:	.word	0x0d1a0000
    8720:	.word	0x400b1034
    8724:	.word	0x400b1028
    8728:	.word	0x400b102c
    872c:	.word	0x1fff0898
    8730:	.word	0x00013dcc
    8734:	.word	0x200203a4

00008738 <SdioCard::readStop()>:
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    8738:	b.w	8638 <transferStop()>

0000873c <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    873c:	ldrb	r3, [r0, #13]
    873e:	subs	r3, #1
    8740:	cmp	r3, #1
    8742:	bls.n	8748 <SdioCard::syncDevice()+0xc>
    if (!SdioCard::writeStop()) {
      return false;
    }
  }
  return true;
}
    8744:	movs	r0, #1
    8746:	bx	lr
  return statusCMD13();
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    8748:	movs	r3, #0
    874a:	strb	r3, [r0, #13]
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    874c:	b.w	8638 <transferStop()>

00008750 <SdioCard::begin(SdioConfig)>:
    }
  }
  return false;  // Caller will set errorCode.
}
//=============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8750:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8754:	ldr	r4, [pc, #544]	; (8978 <SdioCard::begin(SdioConfig)+0x228>)

	static void initClock()
	{
		#ifdef HAS_KINETIS_MPU
		  // Allow SDHC Bus Master access.
		  MPU_RGDAAC0 |= 0x0C000000;
    8756:	ldr.w	lr, [pc, #648]	; 89e0 <SdioCard::begin(SdioConfig)+0x290>
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    875a:	ldr	r7, [pc, #544]	; (897c <SdioCard::begin(SdioConfig)+0x22c>)
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    875c:	ldr	r6, [pc, #544]	; (8980 <SdioCard::begin(SdioConfig)+0x230>)
  m_version2 = false;
    875e:	ldr	r5, [pc, #548]	; (8984 <SdioCard::begin(SdioConfig)+0x234>)
}
//=============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    8760:	strb	r1, [r0, #12]
  m_curState = IDLE_STATE;
    8762:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8764:	strb	r3, [r4, #0]
//=============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    8766:	strb	r3, [r0, #13]
  m_initDone = false;
    8768:	strb	r3, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    876a:	strb	r3, [r6, #0]
  m_version2 = false;
    876c:	strb	r3, [r5, #0]

	static void initClock()
	{
		#ifdef HAS_KINETIS_MPU
		  // Allow SDHC Bus Master access.
		  MPU_RGDAAC0 |= 0x0C000000;
    876e:	ldr.w	r3, [lr]
		#endif
		// Enable SDHC clock.
		SIM_SCGC3 |= SIM_SCGC3_SDHC; 
    8772:	ldr	r2, [pc, #532]	; (8988 <SdioCard::begin(SdioConfig)+0x238>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8774:	ldr	r0, [pc, #532]	; (898c <SdioCard::begin(SdioConfig)+0x23c>)
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8776:	ldr	r1, [pc, #536]	; (8990 <SdioCard::begin(SdioConfig)+0x240>)
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8778:	ldr.w	ip, [pc, #616]	; 89e4 <SdioCard::begin(SdioConfig)+0x294>

	static void initClock()
	{
		#ifdef HAS_KINETIS_MPU
		  // Allow SDHC Bus Master access.
		  MPU_RGDAAC0 |= 0x0C000000;
    877c:	orr.w	r3, r3, #201326592	; 0xc000000
    8780:	str.w	r3, [lr]
		#endif
		// Enable SDHC clock.
		SIM_SCGC3 |= SIM_SCGC3_SDHC; 
    8784:	ldr	r3, [r2, #0]
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8786:	add.w	lr, lr, #260096	; 0x3f800
		#ifdef HAS_KINETIS_MPU
		  // Allow SDHC Bus Master access.
		  MPU_RGDAAC0 |= 0x0C000000;
		#endif
		// Enable SDHC clock.
		SIM_SCGC3 |= SIM_SCGC3_SDHC; 
    878a:	orr.w	r3, r3, #131072	; 0x20000
    878e:	str	r3, [r2, #0]
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8790:	add.w	lr, lr, #12

  // Disable GPIO clock.
  enableGPIO(false);

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL = SDHC_SYSCTL_RSTA;
    8794:	add.w	r2, r2, #428032	; 0x68800
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8798:	movw	r3, #259	; 0x103

  // Disable GPIO clock.
  enableGPIO(false);

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL = SDHC_SYSCTL_RSTA;
    879c:	addw	r2, r2, #2044	; 0x7fc
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    87a0:	str	r3, [r0, #0]
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    87a2:	str.w	r3, [ip]
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    87a6:	str	r3, [r1, #0]
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    87a8:	str.w	r3, [lr]
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    87ac:	str	r3, [r0, #16]

  // Disable GPIO clock.
  enableGPIO(false);

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL = SDHC_SYSCTL_RSTA;
    87ae:	mov.w	r0, #16777216	; 0x1000000
	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    87b2:	str	r3, [r1, #12]
    }
  }
  return false;  // Caller will set errorCode.
}
//=============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    87b4:	sub	sp, #76	; 0x4c
  // Disable GPIO clock.
  enableGPIO(false);

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL = SDHC_SYSCTL_RSTA;
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    87b6:	mov	r1, r2

  // Disable GPIO clock.
  enableGPIO(false);

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL = SDHC_SYSCTL_RSTA;
    87b8:	str	r0, [r2, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    87ba:	ldr	r3, [r1, #0]
    87bc:	ldr	r2, [pc, #468]	; (8994 <SdioCard::begin(SdioConfig)+0x244>)
    87be:	lsls	r3, r3, #7
    87c0:	bmi.n	87ba <SdioCard::begin(SdioConfig)+0x6a>
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = f_pll/(1000*sdclkfs*dvs);
    87c2:	ldr.w	r8, [pc, #548]	; 89e8 <SdioCard::begin(SdioConfig)+0x298>

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    87c6:	ldr	r1, [pc, #464]	; (8998 <SdioCard::begin(SdioConfig)+0x248>)
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = f_pll/(1000*sdclkfs*dvs);
    87c8:	mov.w	r3, #400	; 0x190
    87cc:	str.w	r3, [r8]
  sdclkfs >>= 1;
  dvs--;

	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Disable SDHC clock.
		SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    87d0:	ldr	r3, [r2, #0]
    87d2:	bic.w	r3, r3, #8
    87d6:	str	r3, [r2, #0]
	#endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    87d8:	ldr	r3, [r2, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    87da:	bic.w	r3, r3, #1044480	; 0xff000
    87de:	bic.w	r3, r3, #4080	; 0xff0

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    87e2:	orr.w	r3, r3, #917504	; 0xe0000
    87e6:	orr.w	r3, r3, #2272	; 0x8e0
    87ea:	str	r3, [r2, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    87ec:	ldr	r3, [r1, #0]
    87ee:	lsls	r0, r3, #28
    87f0:	bpl.n	87ec <SdioCard::begin(SdioConfig)+0x9c>
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    87f2:	ldr.w	r9, [pc, #416]	; 8994 <SdioCard::begin(SdioConfig)+0x244>
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    87f6:	ldr.w	ip, [pc, #404]	; 898c <SdioCard::begin(SdioConfig)+0x23c>
  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    87fa:	ldr.w	r3, [r9]
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    87fe:	ldr.w	lr, [pc, #484]	; 89e4 <SdioCard::begin(SdioConfig)+0x294>
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8802:	ldr	r0, [pc, #396]	; (8990 <SdioCard::begin(SdioConfig)+0x240>)
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8804:	ldr	r1, [pc, #404]	; (899c <SdioCard::begin(SdioConfig)+0x24c>)
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8806:	ldr	r2, [pc, #408]	; (89a0 <SdioCard::begin(SdioConfig)+0x250>)
  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    8808:	orr.w	r3, r3, #8
    880c:	str.w	r3, [r9]
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8810:	movw	r3, #1091	; 0x443
    8814:	str.w	r3, [ip]
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8818:	str.w	r3, [lr]
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    881c:	mov.w	lr, #1088	; 0x440
    8820:	str.w	lr, [r0]
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8824:	str	r3, [r1, #0]
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8826:	str	r3, [r2, #0]
  setSdclk(400);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
	SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8828:	add.w	r1, r1, #409600	; 0x64000
	SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    882c:	add.w	r2, r2, #409600	; 0x64000
    8830:	adds	r2, #40	; 0x28
  setSdclk(400);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
	SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8832:	adds	r1, #40	; 0x28
	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8834:	str	r3, [r0, #12]

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
	SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
	SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8836:	ldr	r3, [pc, #364]	; (89a4 <SdioCard::begin(SdioConfig)+0x254>)
  setSdclk(400);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
	SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8838:	ldr	r0, [pc, #364]	; (89a8 <SdioCard::begin(SdioConfig)+0x258>)
    883a:	str	r0, [r1, #0]
	SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    883c:	str	r3, [r2, #0]
//		SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL;

	#endif
		

  attachInterruptVector(IRQ_SDHC, m_sdhc_isr);
    883e:	ldr	r1, [pc, #364]	; (89ac <SdioCard::begin(SdioConfig)+0x25c>)
    8840:	movs	r0, #81	; 0x51
    8842:	bl	9938 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8846:	ldr	r3, [pc, #360]	; (89b0 <SdioCard::begin(SdioConfig)+0x260>)

	#endif
		

  attachInterruptVector(IRQ_SDHC, m_sdhc_isr);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8848:	ldr	r1, [pc, #360]	; (89b4 <SdioCard::begin(SdioConfig)+0x264>)
    884a:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    884c:	mov.w	r2, #131072	; 0x20000

	#endif
		

  attachInterruptVector(IRQ_SDHC, m_sdhc_isr);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8850:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8852:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    8854:	ldr.w	r3, [r9]
    8858:	orr.w	r3, r3, #134217728	; 0x8000000
    885c:	str.w	r3, [r9]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    8860:	mov	r3, r9
    8862:	ldr	r1, [r3, #0]
    8864:	ands.w	r1, r1, #134217728	; 0x8000000
    8868:	bne.n	8862 <SdioCard::begin(SdioConfig)+0x112>
  m_version2 = false;

  // initialize controller.
  initSDHC();
  
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    886a:	mov	r0, r1
    886c:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8870:	mov	r9, r0
    8872:	cmp	r0, #0
    8874:	beq.n	891c <SdioCard::begin(SdioConfig)+0x1cc>
    8876:	mov.w	r9, #10
    return sdError(SD_CARD_ERROR_CMD0);
  }
  
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    887a:	mov.w	r1, #426	; 0x1aa
    887e:	ldr	r0, [pc, #312]	; (89b8 <SdioCard::begin(SdioConfig)+0x268>)
    8880:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8884:	cmp	r0, #0
    8886:	bne.n	894c <SdioCard::begin(SdioConfig)+0x1fc>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    8888:	subs.w	r9, r9, #1
    888c:	bne.n	887a <SdioCard::begin(SdioConfig)+0x12a>
      m_version2 = true;
      break;
    }
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
    888e:	ldrb	r2, [r5, #0]
    8890:	ldr	r3, [pc, #296]	; (89bc <SdioCard::begin(SdioConfig)+0x26c>)
    8892:	cmp	r2, #0
    8894:	ite	eq
    8896:	moveq.w	r9, #3145728	; 0x300000
    889a:	movne	r9, r3
  uint32_t m = micros();
    889c:	bl	9ca0 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    88a0:	ldr	r5, [pc, #284]	; (89c0 <SdioCard::begin(SdioConfig)+0x270>)
      break;
    }
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
    88a2:	mov	sl, r0
  m_dmaBusy = false;
}
//=============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    88a4:	movs	r1, #0
    88a6:	ldr	r0, [pc, #284]	; (89c4 <SdioCard::begin(SdioConfig)+0x274>)
    88a8:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    88ac:	cbnz	r0, 88c6 <SdioCard::begin(SdioConfig)+0x176>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    88ae:	ldr	r2, [pc, #280]	; (89c8 <SdioCard::begin(SdioConfig)+0x278>)
    88b0:	movw	r1, #915	; 0x393
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    88b4:	movs	r3, #22
  m_errorLine = line;
    88b6:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    88b8:	strb	r3, [r4, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    88ba:	mov.w	r9, #0

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    88be:	mov	r0, r9
    88c0:	add	sp, #76	; 0x4c
    88c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_dmaBusy = false;
}
//=============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    88c6:	mov	r1, r9
    88c8:	ldr	r0, [pc, #256]	; (89cc <SdioCard::begin(SdioConfig)+0x27c>)
    88ca:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    88ce:	cmp	r0, #0
    88d0:	beq.n	88ae <SdioCard::begin(SdioConfig)+0x15e>
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    88d2:	bl	9ca0 <micros>
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    88d6:	ldr	r3, [pc, #248]	; (89d0 <SdioCard::begin(SdioConfig)+0x280>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    88d8:	ldr	r2, [pc, #228]	; (89c0 <SdioCard::begin(SdioConfig)+0x270>)
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    88da:	rsb	r0, sl, r0
    88de:	cmp	r0, r3
    88e0:	bhi.n	88ae <SdioCard::begin(SdioConfig)+0x15e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    88e2:	ldr	r3, [r5, #0]
    }
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
  do {
    88e4:	cmp	r3, #0
    88e6:	bge.n	88a4 <SdioCard::begin(SdioConfig)+0x154>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);

  m_ocr = SDHC_CMDRSP0;
    88e8:	ldr	r3, [pc, #232]	; (89d4 <SdioCard::begin(SdioConfig)+0x284>)
    88ea:	ldr	r1, [r2, #0]
    88ec:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    88ee:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    88f0:	ldr	r0, [pc, #228]	; (89d8 <SdioCard::begin(SdioConfig)+0x288>)
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);

  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    88f2:	lsls	r1, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    88f4:	it	mi
    88f6:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    88f8:	mov.w	r1, #0
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);

  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    88fc:	it	mi
    88fe:	strbmi	r3, [r6, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8900:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8904:	mov	r9, r0
    8906:	cbnz	r0, 8930 <SdioCard::begin(SdioConfig)+0x1e0>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8908:	ldr	r2, [pc, #188]	; (89c8 <SdioCard::begin(SdioConfig)+0x278>)
    890a:	movw	r1, #925	; 0x39d
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    890e:	movs	r3, #2

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8910:	mov	r0, r9
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8912:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8914:	strb	r3, [r4, #0]

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8916:	add	sp, #76	; 0x4c
    8918:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    891c:	ldr	r2, [pc, #168]	; (89c8 <SdioCard::begin(SdioConfig)+0x278>)
    891e:	mov.w	r1, #896	; 0x380
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8922:	movs	r3, #1

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8924:	mov	r0, r9
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8926:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8928:	strb	r3, [r4, #0]

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    892a:	add	sp, #76	; 0x4c
    892c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    8930:	movs	r1, #0
    8932:	ldr	r0, [pc, #168]	; (89dc <SdioCard::begin(SdioConfig)+0x28c>)
    8934:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8938:	mov	r9, r0
    893a:	cmp	r0, #0
    893c:	bne.n	89ec <SdioCard::begin(SdioConfig)+0x29c>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    893e:	ldr	r2, [pc, #136]	; (89c8 <SdioCard::begin(SdioConfig)+0x278>)
    8940:	mov.w	r1, #928	; 0x3a0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8944:	movs	r3, #3
  m_errorLine = line;
    8946:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8948:	strb	r3, [r4, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    894a:	b.n	88be <SdioCard::begin(SdioConfig)+0x16e>
  }
  
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    894c:	ldr	r3, [pc, #112]	; (89c0 <SdioCard::begin(SdioConfig)+0x270>)
    894e:	ldr	r3, [r3, #0]
    8950:	cmp.w	r3, #426	; 0x1aa
    8954:	beq.n	896e <SdioCard::begin(SdioConfig)+0x21e>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8956:	ldr	r2, [pc, #112]	; (89c8 <SdioCard::begin(SdioConfig)+0x278>)
  
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    8958:	mov.w	r9, #0
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    895c:	movw	r1, #903	; 0x387
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8960:	movs	r3, #6

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8962:	mov	r0, r9
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8964:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8966:	strb	r3, [r4, #0]

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8968:	add	sp, #76	; 0x4c
    896a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
    896e:	movs	r3, #1
    8970:	strb	r3, [r5, #0]
      break;
    }
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8972:	ldr.w	r9, [pc, #72]	; 89bc <SdioCard::begin(SdioConfig)+0x26c>
    8976:	b.n	889c <SdioCard::begin(SdioConfig)+0x14c>
    8978:	.word	0x1fff088c
    897c:	.word	0x2002038c
    8980:	.word	0x20020379
    8984:	.word	0x20020378
    8988:	.word	0x40048030
    898c:	.word	0x4004d000
    8990:	.word	0x4004d008
    8994:	.word	0x400b102c
    8998:	.word	0x400b1024
    899c:	.word	0x4004d00c
    89a0:	.word	0x4004d010
    89a4:	.word	0x117f0002
    89a8:	.word	0x117f000b
    89ac:	.word	0x00007d6d
    89b0:	.word	0xe000e108
    89b4:	.word	0xe000e451
    89b8:	.word	0x081a0000
    89bc:	.word	0x40300000
    89c0:	.word	0x400b1010
    89c4:	.word	0x371a0000
    89c8:	.word	0x20020380
    89cc:	.word	0x29020000
    89d0:	.word	0x000f4240
    89d4:	.word	0x2002037c
    89d8:	.word	0x02090000
    89dc:	.word	0x031a0000
    89e0:	.word	0x4000d800
    89e4:	.word	0x4004d004
    89e8:	.word	0x200203a8
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    89ec:	ldr	r6, [pc, #620]	; (8c5c <SdioCard::begin(SdioConfig)+0x50c>)
    89ee:	ldr	r5, [pc, #624]	; (8c60 <SdioCard::begin(SdioConfig)+0x510>)
    89f0:	ldr	r3, [r6, #0]
}
//-----------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    89f2:	ldr	r0, [pc, #624]	; (8c64 <SdioCard::begin(SdioConfig)+0x514>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    89f4:	lsrs	r3, r3, #16
    89f6:	lsls	r3, r3, #16
}
//-----------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    89f8:	mov	r1, r3
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    89fa:	str	r3, [r5, #0]
}
//-----------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    89fc:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8a00:	mov	r9, r0
    8a02:	cmp	r0, #0
    8a04:	beq.w	8b24 <SdioCard::begin(SdioConfig)+0x3d4>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8a08:	ldr	r2, [pc, #604]	; (8c68 <SdioCard::begin(SdioConfig)+0x518>)
    8a0a:	ldr.w	r9, [r6]
    8a0e:	ldr	r1, [r2, #0]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8a10:	ldr.w	lr, [pc, #676]	; 8cb8 <SdioCard::begin(SdioConfig)+0x568>
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8a14:	ldr	r3, [pc, #596]	; (8c6c <SdioCard::begin(SdioConfig)+0x51c>)
    8a16:	ldr.w	fp, [pc, #676]	; 8cbc <SdioCard::begin(SdioConfig)+0x56c>
    8a1a:	ldr	r0, [r3, #0]
    8a1c:	ldr.w	ip, [fp]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8a20:	strb.w	r9, [lr, #14]
    8a24:	mov.w	sl, r1, lsr #8
    8a28:	strb.w	sl, [lr, #9]
    8a2c:	mov.w	sl, r9, lsr #8
    8a30:	strb.w	sl, [lr, #13]
    8a34:	mov.w	sl, r9, lsr #16
    8a38:	mov.w	r9, r9, lsr #24
    8a3c:	strb.w	r9, [lr, #11]
    8a40:	mov.w	r9, r1, lsr #16
    8a44:	strb.w	r1, [lr, #10]
    8a48:	strb.w	sl, [lr, #12]
    8a4c:	lsrs	r1, r1, #24
    8a4e:	mov.w	sl, r0, lsr #8
    8a52:	strb.w	r9, [lr, #8]
    8a56:	mov.w	r9, r0, lsr #16
    8a5a:	strb.w	r0, [lr, #6]
    8a5e:	strb.w	r1, [lr, #7]
    8a62:	strb.w	sl, [lr, #5]
    8a66:	lsrs	r1, r0, #24
    8a68:	strb.w	r9, [lr, #4]
    8a6c:	mov.w	r0, ip, lsr #8
    8a70:	mov.w	r9, ip, lsr #16
  }
  d[15] = 0;
    8a74:	mov.w	sl, #0
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8a78:	strb.w	r1, [lr, #3]
    8a7c:	strb.w	r0, [lr, #1]
    8a80:	strb.w	r9, [lr]
    8a84:	strb.w	ip, [lr, #2]
}
//-----------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8a88:	ldr	r1, [r5, #0]
    8a8a:	ldr	r0, [pc, #484]	; (8c70 <SdioCard::begin(SdioConfig)+0x520>)
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    8a8c:	strb.w	sl, [lr, #15]
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8a90:	str	r2, [sp, #4]
    8a92:	str	r3, [sp, #0]
}
//-----------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8a94:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8a98:	mov	r9, r0
    8a9a:	cmp	r0, #0
    8a9c:	beq.n	8b32 <SdioCard::begin(SdioConfig)+0x3e2>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8a9e:	ldr	r2, [sp, #4]
    8aa0:	ldr	r3, [sp, #0]
    8aa2:	ldr	r0, [r6, #0]
    8aa4:	ldr	r6, [r2, #0]
    8aa6:	ldr	r2, [r3, #0]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8aa8:	ldr	r3, [pc, #456]	; (8c74 <SdioCard::begin(SdioConfig)+0x524>)
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8aaa:	ldr.w	ip, [fp]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    8aae:	strb.w	sl, [r3, #15]
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8ab2:	mov.w	lr, r0, lsr #8
    8ab6:	mov.w	sl, r6, lsr #8
    8aba:	mov.w	r9, r6, lsr #16
    8abe:	strb.w	lr, [r3, #13]
    8ac2:	mov.w	lr, r0, lsr #16
    8ac6:	strb	r0, [r3, #14]
    8ac8:	strb	r6, [r3, #10]
    8aca:	lsrs	r0, r0, #24
    8acc:	strb	r2, [r3, #6]
    8ace:	strb.w	lr, [r3, #12]
    8ad2:	mov.w	fp, r2, lsr #8
    8ad6:	mov.w	lr, r6, lsr #24
    8ada:	strb.w	sl, [r3, #9]
    8ade:	strb.w	r9, [r3, #8]
    8ae2:	mov.w	sl, r2, lsr #16
    8ae6:	mov.w	r9, ip, lsr #8
    8aea:	lsrs	r2, r2, #24
    8aec:	mov.w	r6, ip, lsr #16
    8af0:	strb	r0, [r3, #11]
    8af2:	strb.w	r9, [r3, #1]
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8af6:	ldr	r1, [r5, #0]
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8af8:	strb.w	ip, [r3, #2]
    8afc:	strb.w	lr, [r3, #7]
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8b00:	ldr	r0, [pc, #372]	; (8c78 <SdioCard::begin(SdioConfig)+0x528>)
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8b02:	strb.w	fp, [r3, #5]
    8b06:	strb.w	sl, [r3, #4]
    8b0a:	strb	r2, [r3, #3]
    8b0c:	strb	r6, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8b0e:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8b12:	mov	r9, r0
    8b14:	cbnz	r0, 8b40 <SdioCard::begin(SdioConfig)+0x3f0>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8b16:	ldr	r2, [pc, #356]	; (8c7c <SdioCard::begin(SdioConfig)+0x52c>)
    8b18:	movw	r1, #939	; 0x3ab
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b1c:	movs	r3, #5
  m_errorLine = line;
    8b1e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b20:	strb	r3, [r4, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    8b22:	b.n	88be <SdioCard::begin(SdioConfig)+0x16e>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8b24:	ldr	r2, [pc, #340]	; (8c7c <SdioCard::begin(SdioConfig)+0x52c>)
    8b26:	movw	r1, #933	; 0x3a5
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b2a:	movs	r3, #7
  m_errorLine = line;
    8b2c:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b2e:	strb	r3, [r4, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    8b30:	b.n	88be <SdioCard::begin(SdioConfig)+0x16e>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8b32:	ldr	r2, [pc, #328]	; (8c7c <SdioCard::begin(SdioConfig)+0x52c>)
    8b34:	mov.w	r1, #936	; 0x3a8
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b38:	movs	r3, #8
  m_errorLine = line;
    8b3a:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b3c:	strb	r3, [r4, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    8b3e:	b.n	88be <SdioCard::begin(SdioConfig)+0x16e>
  m_dmaBusy = false;
}
//=============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8b40:	ldr	r1, [r5, #0]
    8b42:	ldr	r0, [pc, #316]	; (8c80 <SdioCard::begin(SdioConfig)+0x530>)
    8b44:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8b48:	cbnz	r0, 8b5c <SdioCard::begin(SdioConfig)+0x40c>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8b4a:	ldr	r2, [pc, #304]	; (8c7c <SdioCard::begin(SdioConfig)+0x52c>)
    8b4c:	mov.w	r1, #944	; 0x3b0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b50:	movs	r3, #20
  m_errorLine = line;
    8b52:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b54:	strb	r3, [r4, #0]
    return sdError(SD_CARD_ERROR_CMD7);
  }
  
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    8b56:	mov.w	r9, #0
    8b5a:	b.n	88be <SdioCard::begin(SdioConfig)+0x16e>
  m_dmaBusy = false;
}
//=============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8b5c:	movs	r1, #2
    8b5e:	ldr	r0, [pc, #292]	; (8c84 <SdioCard::begin(SdioConfig)+0x534>)
    8b60:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8b64:	mov	r9, r0
    8b66:	cmp	r0, #0
    8b68:	beq.n	8b4a <SdioCard::begin(SdioConfig)+0x3fa>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8b6a:	ldr	r3, [pc, #284]	; (8c88 <SdioCard::begin(SdioConfig)+0x538>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
    8b6c:	ldr	r0, [pc, #284]	; (8c8c <SdioCard::begin(SdioConfig)+0x53c>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8b6e:	ldr	r2, [r3, #0]
    8b70:	bic.w	r2, r2, #6
    8b74:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8b76:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
    8b78:	mov.w	r4, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8b7c:	orr.w	r2, r2, #2
    8b80:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
  
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) //|| defined(__IMXRT1052__)
  // Determine if High Speed mode is supported and set frequency.
	  uint8_t status[64];
	  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8b82:	add	r1, sp, #8
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
    8b84:	str	r4, [r0, #0]
  
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) //|| defined(__IMXRT1052__)
  // Determine if High Speed mode is supported and set frequency.
	  uint8_t status[64];
	  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8b86:	mvn.w	r0, #4278190080	; 0xff000000
    8b8a:	bl	7fd8 <cardCMD6(unsigned long, unsigned char*)>
		  cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8b8e:	cbz	r0, 8b98 <SdioCard::begin(SdioConfig)+0x448>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
  
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) //|| defined(__IMXRT1052__)
  // Determine if High Speed mode is supported and set frequency.
	  uint8_t status[64];
	  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8b90:	ldrb.w	r3, [sp, #21]
    8b94:	lsls	r2, r3, #30
    8b96:	bmi.n	8c24 <SdioCard::begin(SdioConfig)+0x4d4>
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8b98:	ldr	r2, [pc, #244]	; (8c90 <SdioCard::begin(SdioConfig)+0x540>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8b9a:	ldr	r6, [pc, #248]	; (8c94 <SdioCard::begin(SdioConfig)+0x544>)
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8b9c:	ldr	r5, [pc, #248]	; (8c98 <SdioCard::begin(SdioConfig)+0x548>)
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8b9e:	ldr	r4, [pc, #252]	; (8c9c <SdioCard::begin(SdioConfig)+0x54c>)
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8ba0:	ldr	r0, [pc, #252]	; (8ca0 <SdioCard::begin(SdioConfig)+0x550>)
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8ba2:	ldr	r1, [pc, #256]	; (8ca4 <SdioCard::begin(SdioConfig)+0x554>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8ba4:	movw	r3, #259	; 0x103
    8ba8:	str	r3, [r6, #0]
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8baa:	str	r3, [r5, #0]
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8bac:	str	r3, [r4, #0]
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8bae:	str	r3, [r2, #0]
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8bb0:	str	r3, [r0, #0]
	
  while ((f_pll/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    8bb2:	movs	r2, #4
	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8bb4:	str	r3, [r1, #0]
  sdclkfs >>= 1;
  dvs--;

	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Disable SDHC clock.
		SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    8bb6:	ldr	r1, [pc, #240]	; (8ca8 <SdioCard::begin(SdioConfig)+0x558>)
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = f_pll/(1000*sdclkfs*dvs);
    8bb8:	ldr	r3, [pc, #240]	; (8cac <SdioCard::begin(SdioConfig)+0x55c>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8bba:	ldr	r0, [pc, #244]	; (8cb0 <SdioCard::begin(SdioConfig)+0x560>)
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = f_pll/(1000*sdclkfs*dvs);
    8bbc:	mov.w	r4, #1000	; 0x3e8
    8bc0:	mul.w	r4, r4, r2
    8bc4:	udiv	r3, r3, r4
    8bc8:	str.w	r3, [r8]
  sdclkfs >>= 1;
  dvs--;

	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Disable SDHC clock.
		SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    8bcc:	ldr	r3, [r1, #0]
    8bce:	bic.w	r3, r3, #8
    8bd2:	str	r3, [r1, #0]
	#endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8bd4:	ldr	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8bd6:	bic.w	r3, r3, #1044480	; 0xff000
    8bda:	bic.w	r3, r3, #4080	; 0xff0
    8bde:	subs	r2, #1
    8be0:	orr.w	r3, r3, #917504	; 0xe0000
    8be4:	orr.w	r3, r3, r2, lsl #4
    8be8:	str	r3, [r1, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8bea:	ldr	r3, [r0, #0]
    8bec:	lsls	r3, r3, #28
    8bee:	bpl.n	8bea <SdioCard::begin(SdioConfig)+0x49a>
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    8bf0:	ldr	r2, [pc, #180]	; (8ca8 <SdioCard::begin(SdioConfig)+0x558>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8bf2:	ldr.w	lr, [pc, #160]	; 8c94 <SdioCard::begin(SdioConfig)+0x544>
  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    8bf6:	ldr	r3, [r2, #0]
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8bf8:	ldr	r6, [pc, #156]	; (8c98 <SdioCard::begin(SdioConfig)+0x548>)
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8bfa:	ldr	r5, [pc, #160]	; (8c9c <SdioCard::begin(SdioConfig)+0x54c>)
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8bfc:	ldr	r4, [pc, #144]	; (8c90 <SdioCard::begin(SdioConfig)+0x540>)
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8bfe:	ldr	r0, [pc, #160]	; (8ca0 <SdioCard::begin(SdioConfig)+0x550>)
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8c00:	ldr	r1, [pc, #160]	; (8ca4 <SdioCard::begin(SdioConfig)+0x554>)
  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    8c02:	orr.w	r3, r3, #8
    8c06:	str	r3, [r2, #0]
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8c08:	movw	r3, #1091	; 0x443
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8c0c:	mov.w	r2, #1088	; 0x440
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8c10:	str.w	r3, [lr]
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8c14:	str	r3, [r6, #0]
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8c16:	str	r2, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
    8c18:	movs	r2, #1
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8c1a:	str	r3, [r4, #0]
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8c1c:	str	r3, [r0, #0]
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8c1e:	str	r3, [r1, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
    8c20:	strb	r2, [r7, #0]
  return true;
    8c22:	b.n	88be <SdioCard::begin(SdioConfig)+0x16e>
  
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) //|| defined(__IMXRT1052__)
  // Determine if High Speed mode is supported and set frequency.
	  uint8_t status[64];
	  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
		  cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8c24:	add	r1, sp, #8
    8c26:	ldr	r0, [pc, #140]	; (8cb4 <SdioCard::begin(SdioConfig)+0x564>)
    8c28:	bl	7fd8 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
  
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) //|| defined(__IMXRT1052__)
  // Determine if High Speed mode is supported and set frequency.
	  uint8_t status[64];
	  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8c2c:	cmp	r0, #0
    8c2e:	beq.n	8b98 <SdioCard::begin(SdioConfig)+0x448>
		  cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8c30:	ldrb.w	r3, [sp, #24]
    8c34:	and.w	r3, r3, #15
    8c38:	cmp	r3, #1
    8c3a:	bne.n	8b98 <SdioCard::begin(SdioConfig)+0x448>
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8c3c:	ldr	r2, [pc, #80]	; (8c90 <SdioCard::begin(SdioConfig)+0x540>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8c3e:	ldr	r6, [pc, #84]	; (8c94 <SdioCard::begin(SdioConfig)+0x544>)
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8c40:	ldr	r5, [pc, #84]	; (8c98 <SdioCard::begin(SdioConfig)+0x548>)
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8c42:	ldr	r4, [pc, #88]	; (8c9c <SdioCard::begin(SdioConfig)+0x54c>)
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8c44:	ldr	r0, [pc, #88]	; (8ca0 <SdioCard::begin(SdioConfig)+0x550>)
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8c46:	ldr	r1, [pc, #92]	; (8ca4 <SdioCard::begin(SdioConfig)+0x554>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8c48:	movw	r3, #259	; 0x103
    8c4c:	str	r3, [r6, #0]
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8c4e:	str	r3, [r5, #0]
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8c50:	str	r3, [r4, #0]
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8c52:	str	r3, [r2, #0]
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8c54:	str	r3, [r0, #0]
	
  while ((f_pll/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    8c56:	movs	r2, #2
	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8c58:	str	r3, [r1, #0]
    8c5a:	b.n	8bb6 <SdioCard::begin(SdioConfig)+0x466>
    8c5c:	.word	0x400b1010
    8c60:	.word	0x20020388
    8c64:	.word	0x09090000
    8c68:	.word	0x400b1014
    8c6c:	.word	0x400b1018
    8c70:	.word	0x0a090000
    8c74:	.word	0x20020368
    8c78:	.word	0x071b0000
    8c7c:	.word	0x20020380
    8c80:	.word	0x371a0000
    8c84:	.word	0x061a0000
    8c88:	.word	0x400b1028
    8c8c:	.word	0x400b1044
    8c90:	.word	0x4004d00c
    8c94:	.word	0x4004d000
    8c98:	.word	0x4004d004
    8c9c:	.word	0x4004d008
    8ca0:	.word	0x4004d010
    8ca4:	.word	0x4004d014
    8ca8:	.word	0x400b102c
    8cac:	.word	0x05b8d800
    8cb0:	.word	0x400b1024
    8cb4:	.word	0x80fffff1
    8cb8:	.word	0x20020390
    8cbc:	.word	0x400b101c

00008cc0 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    8cc0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DBG_IRQSTAT();
    8cc4:	ldr	r4, [pc, #376]	; (8e40 <SdioCard::readData(unsigned char*)+0x180>)
    8cc6:	ldr	r3, [r4, #0]
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    8cc8:	mov	r6, r1
  DBG_IRQSTAT();
    8cca:	cmp	r3, #0
    8ccc:	bne.w	8e0e <SdioCard::readData(unsigned char*)+0x14e>
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    8cd0:	ldr	r3, [pc, #368]	; (8e44 <SdioCard::readData(unsigned char*)+0x184>)
    8cd2:	ldr	r3, [r3, #0]
    8cd4:	lsls	r2, r3, #22
    8cd6:	bmi.n	8d06 <SdioCard::readData(unsigned char*)+0x46>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8cd8:	ldr	r3, [pc, #364]	; (8e48 <SdioCard::readData(unsigned char*)+0x188>)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    8cda:	ldr	r1, [pc, #368]	; (8e4c <SdioCard::readData(unsigned char*)+0x18c>)
//-----------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8cdc:	ldr	r2, [r3, #0]
    8cde:	bic.w	r2, r2, #65536	; 0x10000
    8ce2:	str	r2, [r3, #0]
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    8ce4:	ldr	r2, [r1, #0]
    8ce6:	lsrs	r2, r2, #16
    8ce8:	lsls	r2, r2, #16
    8cea:	cmp.w	r2, #65536	; 0x10000
    8cee:	beq.w	8e34 <SdioCard::readData(unsigned char*)+0x174>
    // Don't stop at sector gap if last sector.  Allows auto CMD12.
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    } else {
      noInterrupts();
    8cf2:	cpsid	i
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8cf4:	ldr	r2, [r3, #0]
    8cf6:	orr.w	r2, r2, #131072	; 0x20000
    8cfa:	str	r2, [r3, #0]
      SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8cfc:	ldr	r2, [r3, #0]
    8cfe:	orr.w	r2, r2, #65536	; 0x10000
    8d02:	str	r2, [r3, #0]
      interrupts();
    8d04:	cpsie	i
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8d06:	bl	9ca0 <micros>
static bool isBusyDMA() {
  return m_dmaBusy;
}
//-----------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    8d0a:	ldr	r5, [pc, #312]	; (8e44 <SdioCard::readData(unsigned char*)+0x184>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8d0c:	ldr.w	r8, [pc, #324]	; 8e54 <SdioCard::readData(unsigned char*)+0x194>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8d10:	mov	r7, r0
    8d12:	b.n	8d1e <SdioCard::readData(unsigned char*)+0x5e>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8d14:	bl	9ca0 <micros>
    8d18:	subs	r0, r0, r7
    8d1a:	cmp	r0, r8
    8d1c:	bhi.n	8de6 <SdioCard::readData(unsigned char*)+0x126>
static bool isBusyDMA() {
  return m_dmaBusy;
}
//-----------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    8d1e:	ldr	r0, [r5, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8d20:	ands.w	r4, r0, #2048	; 0x800
    8d24:	beq.n	8d14 <SdioCard::readData(unsigned char*)+0x54>
*/
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    8d26:	ldr	r0, [pc, #284]	; (8e44 <SdioCard::readData(unsigned char*)+0x184>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    8d28:	ldr	r1, [pc, #292]	; (8e50 <SdioCard::readData(unsigned char*)+0x190>)
    8d2a:	add.w	r2, r6, #64	; 0x40
    8d2e:	add.w	r6, r6, #576	; 0x240
*/
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    8d32:	ldr	r3, [r0, #0]
    8d34:	lsls	r3, r3, #20
    8d36:	bpl.n	8d32 <SdioCard::readData(unsigned char*)+0x72>
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    8d38:	ldr	r3, [r1, #0]
    8d3a:	str.w	r3, [r2, #-64]
    8d3e:	ldr	r3, [r1, #0]
    8d40:	str.w	r3, [r2, #-60]
    8d44:	ldr	r3, [r1, #0]
    8d46:	str.w	r3, [r2, #-56]
    8d4a:	ldr	r3, [r1, #0]
    8d4c:	str.w	r3, [r2, #-52]
    8d50:	ldr	r3, [r1, #0]
    8d52:	str.w	r3, [r2, #-48]
    8d56:	ldr	r3, [r1, #0]
    8d58:	str.w	r3, [r2, #-44]
    8d5c:	ldr	r3, [r1, #0]
    8d5e:	str.w	r3, [r2, #-40]
    8d62:	ldr	r3, [r1, #0]
    8d64:	str.w	r3, [r2, #-36]
    8d68:	ldr	r3, [r1, #0]
    8d6a:	str.w	r3, [r2, #-32]
    8d6e:	ldr	r3, [r1, #0]
    8d70:	str.w	r3, [r2, #-28]
    8d74:	ldr	r3, [r1, #0]
    8d76:	str.w	r3, [r2, #-24]
    8d7a:	ldr	r3, [r1, #0]
    8d7c:	str.w	r3, [r2, #-20]
    8d80:	ldr	r3, [r1, #0]
    8d82:	str.w	r3, [r2, #-16]
    8d86:	ldr	r3, [r1, #0]
    8d88:	str.w	r3, [r2, #-12]
    8d8c:	ldr	r3, [r1, #0]
    8d8e:	str.w	r3, [r2, #-8]
    8d92:	ldr	r3, [r1, #0]
    8d94:	str.w	r3, [r2, #-4]
    8d98:	adds	r2, #64	; 0x40
													);
*/
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8d9a:	cmp	r2, r6
    8d9c:	bne.n	8d32 <SdioCard::readData(unsigned char*)+0x72>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8d9e:	bl	9ca0 <micros>
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8da2:	ldr	r5, [pc, #156]	; (8e40 <SdioCard::readData(unsigned char*)+0x180>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8da4:	ldr	r7, [pc, #172]	; (8e54 <SdioCard::readData(unsigned char*)+0x194>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8da6:	mov	r6, r0
    8da8:	b.n	8db4 <SdioCard::readData(unsigned char*)+0xf4>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8daa:	bl	9ca0 <micros>
    8dae:	subs	r0, r0, r6
    8db0:	cmp	r0, r7
    8db2:	bhi.n	8dfa <SdioCard::readData(unsigned char*)+0x13a>
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8db4:	ldr	r3, [r5, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8db6:	ldr	r4, [pc, #160]	; (8e58 <SdioCard::readData(unsigned char*)+0x198>)
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8db8:	ldr	r2, [pc, #132]	; (8e40 <SdioCard::readData(unsigned char*)+0x180>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8dba:	ands	r4, r3
    8dbc:	cmp	r4, #0
    8dbe:	beq.n	8daa <SdioCard::readData(unsigned char*)+0xea>
//	Serial.println(";");
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    8dc0:	ldr	r1, [pc, #152]	; (8e5c <SdioCard::readData(unsigned char*)+0x19c>)
    8dc2:	ldr	r3, [r2, #0]
    8dc4:	str	r3, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    8dc6:	ldr	r3, [r1, #0]
    8dc8:	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8dca:	ldr	r3, [r1, #0]
    8dcc:	ands.w	r0, r3, #2
    8dd0:	beq.n	8de2 <SdioCard::readData(unsigned char*)+0x122>
    8dd2:	ldr	r3, [r1, #0]
    8dd4:	ldr	r0, [pc, #136]	; (8e60 <SdioCard::readData(unsigned char*)+0x1a0>)
    8dd6:	ands	r0, r3
    8dd8:	clz	r0, r0
    8ddc:	lsrs	r0, r0, #5
    8dde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
    8de2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8de6:	ldr	r1, [pc, #124]	; (8e64 <SdioCard::readData(unsigned char*)+0x1a4>)
  m_errorLine = line;
    8de8:	ldr	r3, [pc, #124]	; (8e68 <SdioCard::readData(unsigned char*)+0x1a8>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8dea:	movs	r5, #25
  m_errorLine = line;
    8dec:	movw	r2, #1124	; 0x464
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8df0:	strb	r5, [r1, #0]
													SDHC_PRSSTAT & SDHC_PRSSTAT_HCKOFF,
													SDHC_PRSSTAT & SDHC_PRSSTAT_SDOFF
													);
*/
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    8df2:	mov	r0, r4
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8df4:	str	r2, [r3, #0]
													SDHC_PRSSTAT & SDHC_PRSSTAT_HCKOFF,
													SDHC_PRSSTAT & SDHC_PRSSTAT_SDOFF
													);
*/
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    8df6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8dfa:	ldr	r1, [pc, #104]	; (8e64 <SdioCard::readData(unsigned char*)+0x1a4>)
  m_errorLine = line;
    8dfc:	ldr	r3, [pc, #104]	; (8e68 <SdioCard::readData(unsigned char*)+0x1a8>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8dfe:	movs	r5, #28
  m_errorLine = line;
    8e00:	movw	r2, #1138	; 0x472
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e04:	strb	r5, [r1, #0]
    }
    p32 += FIFO_WML;
//	Serial.println(";");
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    8e06:	mov	r0, r4
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8e08:	str	r2, [r3, #0]
    }
    p32 += FIFO_WML;
//	Serial.println(";");
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    8e0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8e0e:	movw	r1, #1101	; 0x44d
    8e12:	ldr	r0, [pc, #88]	; (8e6c <SdioCard::readData(unsigned char*)+0x1ac>)
    8e14:	bl	ae9c <Print::print(long)>
    8e18:	movs	r1, #9
    8e1a:	ldr	r0, [pc, #84]	; (8e70 <SdioCard::readData(unsigned char*)+0x1b0>)
    8e1c:	bl	9604 <usb_serial_write>
  memcpy(csd, &m_csd, 16);
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
  DBG_IRQSTAT();
    8e20:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    8e22:	ldr	r0, [pc, #72]	; (8e6c <SdioCard::readData(unsigned char*)+0x1ac>)
    8e24:	movs	r3, #0
    8e26:	movs	r2, #16
    8e28:	bl	af98 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    8e2c:	ldr	r0, [pc, #60]	; (8e6c <SdioCard::readData(unsigned char*)+0x1ac>)
    8e2e:	bl	af4c <Print::println()>
    8e32:	b.n	8cd0 <SdioCard::readData(unsigned char*)+0x10>
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    // Don't stop at sector gap if last sector.  Allows auto CMD12.
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8e34:	ldr	r2, [r3, #0]
    8e36:	orr.w	r2, r2, #131072	; 0x20000
    8e3a:	str	r2, [r3, #0]
    8e3c:	b.n	8d06 <SdioCard::readData(unsigned char*)+0x46>
    8e3e:	nop
    8e40:	.word	0x400b1030
    8e44:	.word	0x400b1024
    8e48:	.word	0x400b1028
    8e4c:	.word	0x400b1004
    8e50:	.word	0x400b1020
    8e54:	.word	0x000f4240
    8e58:	.word	0x117f0002
    8e5c:	.word	0x20020384
    8e60:	.word	0x117f0000
    8e64:	.word	0x1fff088c
    8e68:	.word	0x20020380
    8e6c:	.word	0x1fff0898
    8e70:	.word	0x00013dcc

00008e74 <SdioCard::readStart(unsigned long, unsigned long)>:
  // K66/K65 Errata - SDHC: Does not support Infinite Sector Transfer Mode.
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector, uint32_t count) {
    8e74:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DBG_IRQSTAT();
    8e78:	ldr	r4, [pc, #228]	; (8f60 <SdioCard::readStart(unsigned long, unsigned long)+0xec>)
    8e7a:	ldr	r3, [r4, #0]
  // K66/K65 Errata - SDHC: Does not support Infinite Sector Transfer Mode.
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector, uint32_t count) {
    8e7c:	mov	r9, r1
    8e7e:	mov	r7, r2
  DBG_IRQSTAT();
    8e80:	cmp	r3, #0
    8e82:	bne.n	8f1a <SdioCard::readStart(unsigned long, unsigned long)+0xa6>
  if (count > 0XFFFF) {
    8e84:	cmp.w	r7, #65536	; 0x10000
    8e88:	bcc.n	8e9e <SdioCard::readStart(unsigned long, unsigned long)+0x2a>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e8a:	ldr	r1, [pc, #216]	; (8f64 <SdioCard::readStart(unsigned long, unsigned long)+0xf0>)
  m_errorLine = line;
    8e8c:	ldr	r3, [pc, #216]	; (8f68 <SdioCard::readStart(unsigned long, unsigned long)+0xf4>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e8e:	movs	r0, #27
  m_errorLine = line;
    8e90:	movw	r2, #1159	; 0x487
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e94:	strb	r0, [r1, #0]
  m_errorLine = line;
    8e96:	str	r2, [r3, #0]
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector, uint32_t count) {
  DBG_IRQSTAT();
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_READ_START);
    8e98:	movs	r0, #0
    8e9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    8e9e:	ldr.w	sl, [pc, #244]	; 8f94 <SdioCard::readStart(unsigned long, unsigned long)+0x120>
    8ea2:	ldr	r3, [pc, #200]	; (8f6c <SdioCard::readStart(unsigned long, unsigned long)+0xf8>)
    8ea4:	str.w	r3, [sl]
  uint32_t m = micros();
    8ea8:	bl	9ca0 <micros>
    8eac:	ldr	r4, [pc, #192]	; (8f70 <SdioCard::readStart(unsigned long, unsigned long)+0xfc>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8eae:	ldr.w	r8, [pc, #232]	; 8f98 <SdioCard::readStart(unsigned long, unsigned long)+0x124>
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8eb2:	ldr	r6, [pc, #192]	; (8f74 <SdioCard::readStart(unsigned long, unsigned long)+0x100>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
    8eb4:	mov	r5, r0
    8eb6:	b.n	8ec6 <SdioCard::readStart(unsigned long, unsigned long)+0x52>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8eb8:	bl	9ca0 <micros>
    8ebc:	subs	r0, r0, r5
    8ebe:	cmp	r0, r6
    8ec0:	bhi.n	8f46 <SdioCard::readStart(unsigned long, unsigned long)+0xd2>
      m_busyFcn = 0;
      return true;
    }
    yield();
    8ec2:	bl	1724 <yield>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    8ec6:	ldr	r1, [r4, #0]
    8ec8:	ldr	r0, [pc, #172]	; (8f78 <SdioCard::readStart(unsigned long, unsigned long)+0x104>)
    8eca:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8ece:	cmp	r0, #0
    8ed0:	beq.n	8eb8 <SdioCard::readStart(unsigned long, unsigned long)+0x44>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8ed2:	ldr.w	r3, [r8]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8ed6:	lsls	r3, r3, #23
    8ed8:	bpl.n	8eb8 <SdioCard::readStart(unsigned long, unsigned long)+0x44>
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    8eda:	movs	r3, #0
    return sdError(SD_CARD_ERROR_READ_START);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    8edc:	cmp	r7, #1
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    8ede:	str.w	r3, [sl]
    return sdError(SD_CARD_ERROR_READ_START);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    8ee2:	bls.n	8eee <SdioCard::readStart(unsigned long, unsigned long)+0x7a>
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8ee4:	ldr	r2, [pc, #148]	; (8f7c <SdioCard::readStart(unsigned long, unsigned long)+0x108>)
    8ee6:	ldr	r3, [r2, #0]
    8ee8:	orr.w	r3, r3, #65536	; 0x10000
    8eec:	str	r3, [r2, #0]
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8eee:	ldr	r3, [pc, #144]	; (8f80 <SdioCard::readStart(unsigned long, unsigned long)+0x10c>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    8ef0:	ldr	r2, [pc, #144]	; (8f84 <SdioCard::readStart(unsigned long, unsigned long)+0x110>)
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8ef2:	ldrb	r3, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    8ef4:	lsls	r7, r7, #16
    8ef6:	orr.w	r7, r7, #512	; 0x200
    8efa:	str	r7, [r2, #0]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8efc:	cbz	r3, 8f40 <SdioCard::readStart(unsigned long, unsigned long)+0xcc>
    8efe:	mov	r1, r9
    8f00:	ldr	r0, [pc, #132]	; (8f88 <SdioCard::readStart(unsigned long, unsigned long)+0x114>)
    8f02:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    8f06:	cbnz	r0, 8f16 <SdioCard::readStart(unsigned long, unsigned long)+0xa2>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f08:	ldr	r1, [pc, #88]	; (8f64 <SdioCard::readStart(unsigned long, unsigned long)+0xf0>)
  m_errorLine = line;
    8f0a:	ldr	r3, [pc, #92]	; (8f68 <SdioCard::readStart(unsigned long, unsigned long)+0xf4>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f0c:	movs	r4, #12
  m_errorLine = line;
    8f0e:	movw	r2, #1169	; 0x491
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f12:	strb	r4, [r1, #0]
  m_errorLine = line;
    8f14:	str	r2, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    8f16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8f1a:	movw	r1, #1157	; 0x485
    8f1e:	ldr	r0, [pc, #108]	; (8f8c <SdioCard::readStart(unsigned long, unsigned long)+0x118>)
    8f20:	bl	ae9c <Print::print(long)>
    8f24:	movs	r1, #9
    8f26:	ldr	r0, [pc, #104]	; (8f90 <SdioCard::readStart(unsigned long, unsigned long)+0x11c>)
    8f28:	bl	9604 <usb_serial_write>
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector, uint32_t count) {
  DBG_IRQSTAT();
    8f2c:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    8f2e:	ldr	r0, [pc, #92]	; (8f8c <SdioCard::readStart(unsigned long, unsigned long)+0x118>)
    8f30:	movs	r3, #0
    8f32:	movs	r2, #16
    8f34:	bl	af98 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    8f38:	ldr	r0, [pc, #80]	; (8f8c <SdioCard::readStart(unsigned long, unsigned long)+0x118>)
    8f3a:	bl	af4c <Print::println()>
    8f3e:	b.n	8e84 <SdioCard::readStart(unsigned long, unsigned long)+0x10>
  }
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8f40:	mov.w	r1, r9, lsl #9
    8f44:	b.n	8f00 <SdioCard::readStart(unsigned long, unsigned long)+0x8c>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f46:	ldr	r1, [pc, #28]	; (8f64 <SdioCard::readStart(unsigned long, unsigned long)+0xf0>)
  m_errorLine = line;
    8f48:	ldr	r3, [pc, #28]	; (8f68 <SdioCard::readStart(unsigned long, unsigned long)+0xf4>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f4a:	movs	r4, #10
  m_errorLine = line;
    8f4c:	movw	r2, #1162	; 0x48a
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    8f50:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f52:	strb	r4, [r1, #0]
  m_errorLine = line;
    8f54:	str	r2, [r3, #0]
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    8f56:	str.w	r0, [sl]
  DBG_IRQSTAT();
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_READ_START);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8f5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8f5e:	nop
    8f60:	.word	0x400b1030
    8f64:	.word	0x1fff088c
    8f68:	.word	0x20020380
    8f6c:	.word	0x00007f8d
    8f70:	.word	0x20020388
    8f74:	.word	0x000f4240
    8f78:	.word	0x0d1a0000
    8f7c:	.word	0x400b1028
    8f80:	.word	0x20020379
    8f84:	.word	0x400b1004
    8f88:	.word	0x123a0036
    8f8c:	.word	0x1fff0898
    8f90:	.word	0x00013dcc
    8f94:	.word	0x200203a4
    8f98:	.word	0x400b1010

00008f9c <SdioCard::readSector(unsigned long, unsigned char*)>:
//-----------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//-----------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    8f9c:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    8f9e:	ldrb	r3, [r0, #12]
    8fa0:	lsls	r4, r3, #31
//-----------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//-----------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    8fa2:	sub.w	sp, sp, #512	; 0x200
    8fa6:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    8fa8:	bpl.n	8fd0 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    8faa:	lsls	r3, r2, #30
    8fac:	beq.n	9026 <SdioCard::readSector(unsigned long, unsigned char*)+0x8a>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    8fae:	mov	r2, sp
    8fb0:	movs	r3, #1
    8fb2:	ldr	r0, [pc, #196]	; (9078 <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    8fb4:	bl	81f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8fb8:	cmp	r0, #0
    8fba:	beq.n	9032 <SdioCard::readSector(unsigned long, unsigned char*)+0x96>
      return sdError(SD_CARD_ERROR_CMD17); 
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    8fbc:	mov	r1, sp
    8fbe:	mov	r0, r6
    8fc0:	mov.w	r2, #512	; 0x200
    8fc4:	bl	9404 <memcpy>
    m_curSector++;
    if (m_curSector >= m_limitSector) {
      m_curState = IDLE_STATE;
    }
  }
  return true;
    8fc8:	movs	r0, #1
}
    8fca:	add.w	sp, sp, #512	; 0x200
    8fce:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    8fd0:	ldrb	r3, [r0, #13]
    8fd2:	cmp	r3, #1
    8fd4:	mov	r4, r0
    8fd6:	mov	r5, r1
    8fd8:	beq.n	9048 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      if (!syncDevice()) {
    8fda:	ldr	r2, [r0, #0]
    8fdc:	ldr	r1, [pc, #156]	; (907c <SdioCard::readSector(unsigned long, unsigned char*)+0xe0>)
    8fde:	ldr	r2, [r2, #20]
    8fe0:	cmp	r2, r1
    8fe2:	bne.n	9058 <SdioCard::readSector(unsigned long, unsigned char*)+0xbc>
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    if (!SdioCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    8fe4:	cmp	r3, #2
    8fe6:	beq.n	9068 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      } 
      m_limitSector = (sector + MAX_SDHC_COUNT) & ~RU_MASK;
    8fe8:	add.w	r2, r5, #65280	; 0xff00
    8fec:	adds	r2, #255	; 0xff
    8fee:	bic.w	r2, r2, #1020	; 0x3fc
    8ff2:	bic.w	r2, r2, #3
    8ff6:	str	r2, [r4, #8]
      if (!SdioCard::readStart(sector, m_limitSector - sector)) {
    8ff8:	mov	r1, r5
    8ffa:	subs	r2, r2, r5
    8ffc:	mov	r0, r4
    8ffe:	bl	8e74 <SdioCard::readStart(unsigned long, unsigned long)>
    9002:	cbz	r0, 9060 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    9004:	movs	r3, #1
      } 
      m_limitSector = (sector + MAX_SDHC_COUNT) & ~RU_MASK;
      if (!SdioCard::readStart(sector, m_limitSector - sector)) {
        return false;
      }
      m_curSector = sector;
    9006:	str	r5, [r4, #4]
      m_curState = READ_STATE;
    9008:	strb	r3, [r4, #13]
    }
    if (!SdioCard::readData(dst)) {
    900a:	mov	r1, r6
    900c:	mov	r0, r4
    900e:	bl	8cc0 <SdioCard::readData(unsigned char*)>
    9012:	cbz	r0, 9060 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      return false;
    }
    m_curSector++;
    9014:	ldr	r3, [r4, #4]
    if (m_curSector >= m_limitSector) {
    9016:	ldr	r2, [r4, #8]
      m_curState = READ_STATE;
    }
    if (!SdioCard::readData(dst)) {
      return false;
    }
    m_curSector++;
    9018:	adds	r3, #1
    if (m_curSector >= m_limitSector) {
    901a:	cmp	r3, r2
      m_curState = READ_STATE;
    }
    if (!SdioCard::readData(dst)) {
      return false;
    }
    m_curSector++;
    901c:	str	r3, [r4, #4]
    if (m_curSector >= m_limitSector) {
    901e:	bcc.n	9042 <SdioCard::readSector(unsigned long, unsigned char*)+0xa6>
      m_curState = IDLE_STATE;
    9020:	movs	r3, #0
    9022:	strb	r3, [r4, #13]
    9024:	b.n	9042 <SdioCard::readSector(unsigned long, unsigned char*)+0xa6>
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9026:	movs	r3, #1
    9028:	ldr	r0, [pc, #76]	; (9078 <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    902a:	bl	81f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    902e:	cmp	r0, #0
    9030:	bne.n	8fc8 <SdioCard::readSector(unsigned long, unsigned char*)+0x2c>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9032:	ldr	r1, [pc, #76]	; (9080 <SdioCard::readSector(unsigned long, unsigned char*)+0xe4>)
  m_errorLine = line;
    9034:	ldr	r3, [pc, #76]	; (9084 <SdioCard::readSector(unsigned long, unsigned char*)+0xe8>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9036:	movs	r0, #11
  m_errorLine = line;
    9038:	movw	r2, #1039	; 0x40f
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    903c:	strb	r0, [r1, #0]
  m_errorLine = line;
    903e:	str	r2, [r3, #0]
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17); 
    9040:	movs	r0, #0
    if (m_curSector >= m_limitSector) {
      m_curState = IDLE_STATE;
    }
  }
  return true;
}
    9042:	add.w	sp, sp, #512	; 0x200
    9046:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    9048:	ldr	r3, [r0, #4]
    904a:	cmp	r1, r3
    904c:	beq.n	900a <SdioCard::readSector(unsigned long, unsigned char*)+0x6e>
      if (!syncDevice()) {
    904e:	ldr	r2, [r0, #0]
    9050:	ldr	r3, [pc, #40]	; (907c <SdioCard::readSector(unsigned long, unsigned char*)+0xe0>)
    9052:	ldr	r2, [r2, #20]
    9054:	cmp	r2, r3
    9056:	beq.n	9068 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
    9058:	mov	r0, r4
    905a:	blx	r2
    905c:	cmp	r0, #0
    905e:	bne.n	8fe8 <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
        return false;
    9060:	movs	r0, #0
    if (m_curSector >= m_limitSector) {
      m_curState = IDLE_STATE;
    }
  }
  return true;
}
    9062:	add.w	sp, sp, #512	; 0x200
    9066:	pop	{r4, r5, r6, pc}
  return statusCMD13();
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    9068:	movs	r3, #0
    906a:	strb	r3, [r4, #13]
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    906c:	bl	8638 <transferStop()>
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    if (!SdioCard::readStop()) {
    9070:	cmp	r0, #0
    9072:	bne.n	8fe8 <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
    9074:	b.n	9060 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
    9076:	nop
    9078:	.word	0x113a0011
    907c:	.word	0x0000873d
    9080:	.word	0x1fff088c
    9084:	.word	0x20020380

00009088 <SdioCard::writeStart(unsigned long, unsigned long)>:
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::writeStart(uint32_t sector, uint32_t count) {
  if (count > 0XFFFF) {
    9088:	cmp.w	r2, #65536	; 0x10000
    908c:	bcs.n	911a <SdioCard::writeStart(unsigned long, unsigned long)+0x92>
  // K66/K65 Errata - SDHC: Does not support Infinite Sector Transfer Mode.
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::writeStart(uint32_t sector, uint32_t count) {
    908e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_WRITE_START);
  }
  DBG_IRQSTAT();
    9092:	ldr	r4, [pc, #220]	; (9170 <SdioCard::writeStart(unsigned long, unsigned long)+0xe8>)
    9094:	ldr	r3, [r4, #0]
    9096:	mov	r9, r1
    9098:	mov	r7, r2
    909a:	cmp	r3, #0
    909c:	bne.n	914a <SdioCard::writeStart(unsigned long, unsigned long)+0xc2>
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    909e:	ldr.w	sl, [pc, #260]	; 91a4 <SdioCard::writeStart(unsigned long, unsigned long)+0x11c>
    90a2:	ldr	r3, [pc, #208]	; (9174 <SdioCard::writeStart(unsigned long, unsigned long)+0xec>)
    90a4:	str.w	r3, [sl]
  uint32_t m = micros();
    90a8:	bl	9ca0 <micros>
    90ac:	ldr	r4, [pc, #200]	; (9178 <SdioCard::writeStart(unsigned long, unsigned long)+0xf0>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    90ae:	ldr.w	r8, [pc, #248]	; 91a8 <SdioCard::writeStart(unsigned long, unsigned long)+0x120>
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    90b2:	ldr	r6, [pc, #200]	; (917c <SdioCard::writeStart(unsigned long, unsigned long)+0xf4>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
    90b4:	mov	r5, r0
    90b6:	b.n	90c6 <SdioCard::writeStart(unsigned long, unsigned long)+0x3e>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    90b8:	bl	9ca0 <micros>
    90bc:	subs	r0, r0, r5
    90be:	cmp	r0, r6
    90c0:	bhi.n	912c <SdioCard::writeStart(unsigned long, unsigned long)+0xa4>
      m_busyFcn = 0;
      return true;
    }
    yield();
    90c2:	bl	1724 <yield>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    90c6:	ldr	r1, [r4, #0]
    90c8:	ldr	r0, [pc, #180]	; (9180 <SdioCard::writeStart(unsigned long, unsigned long)+0xf8>)
    90ca:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    90ce:	cmp	r0, #0
    90d0:	beq.n	90b8 <SdioCard::writeStart(unsigned long, unsigned long)+0x30>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    90d2:	ldr.w	r3, [r8]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    90d6:	lsls	r3, r3, #23
    90d8:	bpl.n	90b8 <SdioCard::writeStart(unsigned long, unsigned long)+0x30>
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    90da:	movs	r3, #0
  }
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    90dc:	cmp	r7, #1
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    90de:	str.w	r3, [sl]
  }
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    90e2:	bls.n	90ee <SdioCard::writeStart(unsigned long, unsigned long)+0x66>
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    90e4:	ldr	r2, [pc, #156]	; (9184 <SdioCard::writeStart(unsigned long, unsigned long)+0xfc>)
    90e6:	ldr	r3, [r2, #0]
    90e8:	orr.w	r3, r3, #65536	; 0x10000
    90ec:	str	r3, [r2, #0]
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    90ee:	ldr	r3, [pc, #152]	; (9188 <SdioCard::writeStart(unsigned long, unsigned long)+0x100>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    90f0:	ldr	r2, [pc, #152]	; (918c <SdioCard::writeStart(unsigned long, unsigned long)+0x104>)

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    90f2:	ldrb	r3, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    90f4:	lsls	r7, r7, #16
    90f6:	orr.w	r7, r7, #512	; 0x200
    90fa:	str	r7, [r2, #0]

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    90fc:	cbz	r3, 9144 <SdioCard::writeStart(unsigned long, unsigned long)+0xbc>
    90fe:	mov	r1, r9
    9100:	ldr	r0, [pc, #140]	; (9190 <SdioCard::writeStart(unsigned long, unsigned long)+0x108>)
    9102:	bl	7ec4 <cardCommand(unsigned long, unsigned long)>
    9106:	cbnz	r0, 9116 <SdioCard::writeStart(unsigned long, unsigned long)+0x8e>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9108:	ldr	r1, [pc, #136]	; (9194 <SdioCard::writeStart(unsigned long, unsigned long)+0x10c>)
  m_errorLine = line;
    910a:	ldr	r3, [pc, #140]	; (9198 <SdioCard::writeStart(unsigned long, unsigned long)+0x110>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    910c:	movs	r4, #14
  m_errorLine = line;
    910e:	movw	r2, #1315	; 0x523
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9112:	strb	r4, [r1, #0]
  m_errorLine = line;
    9114:	str	r2, [r3, #0]

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    9116:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    911a:	ldr	r1, [pc, #120]	; (9194 <SdioCard::writeStart(unsigned long, unsigned long)+0x10c>)
  m_errorLine = line;
    911c:	ldr	r3, [pc, #120]	; (9198 <SdioCard::writeStart(unsigned long, unsigned long)+0x110>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    911e:	movs	r0, #32
  m_errorLine = line;
    9120:	movw	r2, #1303	; 0x517
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9124:	strb	r0, [r1, #0]
  m_errorLine = line;
    9126:	str	r2, [r3, #0]
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::writeStart(uint32_t sector, uint32_t count) {
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_WRITE_START);
    9128:	movs	r0, #0

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    912a:	bx	lr
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    912c:	ldr	r1, [pc, #100]	; (9194 <SdioCard::writeStart(unsigned long, unsigned long)+0x10c>)
  m_errorLine = line;
    912e:	ldr	r3, [pc, #104]	; (9198 <SdioCard::writeStart(unsigned long, unsigned long)+0x110>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9130:	movs	r4, #10
  m_errorLine = line;
    9132:	movw	r2, #1307	; 0x51b
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    9136:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9138:	strb	r4, [r1, #0]
  m_errorLine = line;
    913a:	str	r2, [r3, #0]
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    913c:	str.w	r0, [sl]
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_WRITE_START);
  }
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    9140:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9144:	mov.w	r1, r9, lsl #9
    9148:	b.n	9100 <SdioCard::writeStart(unsigned long, unsigned long)+0x78>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    914a:	movw	r1, #1305	; 0x519
    914e:	ldr	r0, [pc, #76]	; (919c <SdioCard::writeStart(unsigned long, unsigned long)+0x114>)
    9150:	bl	ae9c <Print::print(long)>
    9154:	movs	r1, #9
    9156:	ldr	r0, [pc, #72]	; (91a0 <SdioCard::writeStart(unsigned long, unsigned long)+0x118>)
    9158:	bl	9604 <usb_serial_write>
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::writeStart(uint32_t sector, uint32_t count) {
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_WRITE_START);
  }
  DBG_IRQSTAT();
    915c:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    915e:	ldr	r0, [pc, #60]	; (919c <SdioCard::writeStart(unsigned long, unsigned long)+0x114>)
    9160:	movs	r3, #0
    9162:	movs	r2, #16
    9164:	bl	af98 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    9168:	ldr	r0, [pc, #48]	; (919c <SdioCard::writeStart(unsigned long, unsigned long)+0x114>)
    916a:	bl	af4c <Print::println()>
    916e:	b.n	909e <SdioCard::writeStart(unsigned long, unsigned long)+0x16>
    9170:	.word	0x400b1030
    9174:	.word	0x00007f8d
    9178:	.word	0x20020388
    917c:	.word	0x000f4240
    9180:	.word	0x0d1a0000
    9184:	.word	0x400b1028
    9188:	.word	0x20020379
    918c:	.word	0x400b1004
    9190:	.word	0x193a0026
    9194:	.word	0x1fff088c
    9198:	.word	0x20020380
    919c:	.word	0x1fff0898
    91a0:	.word	0x00013dcc
    91a4:	.word	0x200203a4
    91a8:	.word	0x400b1010

000091ac <SdioCard::writeSector(unsigned long, unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    91ac:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    91ae:	ldrb	r3, [r0, #12]
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    91b0:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    91b2:	lsls	r2, r3, #31
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    91b4:	sub.w	sp, sp, #512	; 0x200
    91b8:	mov	r5, r1
  if (m_sdioConfig.useDma()) {
    91ba:	bpl.n	91f0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    91bc:	lsls	r3, r6, #30
    91be:	beq.n	91ce <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    91c0:	mov	r1, r6
    91c2:	mov	r0, sp
    91c4:	mov.w	r2, #512	; 0x200
    91c8:	bl	9404 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    91cc:	mov	r6, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    91ce:	mov	r2, r6
    91d0:	mov	r1, r5
    91d2:	movs	r3, #1
    91d4:	ldr	r0, [pc, #156]	; (9274 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>)
    91d6:	bl	81f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    91da:	cbnz	r0, 91ea <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91dc:	ldr	r1, [pc, #152]	; (9278 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xcc>)
  m_errorLine = line;
    91de:	ldr	r3, [pc, #156]	; (927c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd0>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91e0:	movs	r4, #13
  m_errorLine = line;
    91e2:	movw	r2, #1213	; 0x4bd
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91e6:	strb	r4, [r1, #0]
  m_errorLine = line;
    91e8:	str	r2, [r3, #0]
    if (m_curSector >= m_limitSector) {
      m_curState = IDLE_STATE;
    }
  }
  return true;
}
    91ea:	add.w	sp, sp, #512	; 0x200
    91ee:	pop	{r4, r5, r6, pc}
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    91f0:	ldrb	r3, [r0, #13]
    91f2:	cmp	r3, #2
    91f4:	mov	r4, r0
    91f6:	beq.n	9246 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9a>
      if (!syncDevice()) {
    91f8:	ldr	r2, [r0, #0]
    91fa:	ldr	r1, [pc, #132]	; (9280 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd4>)
    91fc:	ldr	r2, [r2, #20]
    91fe:	cmp	r2, r1
    9200:	bne.n	9256 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xaa>
uint32_t SdioCard::status() {
  return statusCMD13();
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    9202:	subs	r3, #1
    9204:	cmp	r3, #1
    9206:	bls.n	9266 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      m_limitSector = (sector + MAX_SDHC_COUNT) & ~RU_MASK;
    9208:	add.w	r2, r5, #65280	; 0xff00
    920c:	adds	r2, #255	; 0xff
    920e:	bic.w	r2, r2, #1020	; 0x3fc
    9212:	bic.w	r2, r2, #3
    9216:	str	r2, [r4, #8]
      if (!SdioCard::writeStart(sector , m_limitSector - sector)) {
    9218:	mov	r1, r5
    921a:	subs	r2, r2, r5
    921c:	mov	r0, r4
    921e:	bl	9088 <SdioCard::writeStart(unsigned long, unsigned long)>
    9222:	cbz	r0, 925e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    9224:	movs	r3, #2
      }
      m_limitSector = (sector + MAX_SDHC_COUNT) & ~RU_MASK;
      if (!SdioCard::writeStart(sector , m_limitSector - sector)) {
        return false;
      }
      m_curSector = sector;
    9226:	str	r5, [r4, #4]
      m_curState = WRITE_STATE;
    9228:	strb	r3, [r4, #13]
    }
    if (!SdioCard::writeData(src)) {
    922a:	mov	r1, r6
    922c:	mov	r0, r4
    922e:	bl	8450 <SdioCard::writeData(unsigned char const*)>
    9232:	cbz	r0, 925e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      return false;
    }
    m_curSector++;
    9234:	ldr	r3, [r4, #4]
    if (m_curSector >= m_limitSector) {
    9236:	ldr	r2, [r4, #8]
      m_curState = WRITE_STATE;
    }
    if (!SdioCard::writeData(src)) {
      return false;
    }
    m_curSector++;
    9238:	adds	r3, #1
    if (m_curSector >= m_limitSector) {
    923a:	cmp	r3, r2
      m_curState = WRITE_STATE;
    }
    if (!SdioCard::writeData(src)) {
      return false;
    }
    m_curSector++;
    923c:	str	r3, [r4, #4]
    if (m_curSector >= m_limitSector) {
    923e:	bcc.n	91ea <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      m_curState = IDLE_STATE;
    9240:	movs	r3, #0
    9242:	strb	r3, [r4, #13]
    9244:	b.n	91ea <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9246:	ldr	r3, [r0, #4]
    9248:	cmp	r1, r3
    924a:	beq.n	922a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7e>
      if (!syncDevice()) {
    924c:	ldr	r2, [r0, #0]
    924e:	ldr	r3, [pc, #48]	; (9280 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd4>)
    9250:	ldr	r2, [r2, #20]
    9252:	cmp	r2, r3
    9254:	beq.n	9266 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
    9256:	mov	r0, r4
    9258:	blx	r2
    925a:	cmp	r0, #0
    925c:	bne.n	9208 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
        return false;
    925e:	movs	r0, #0
    if (m_curSector >= m_limitSector) {
      m_curState = IDLE_STATE;
    }
  }
  return true;
}
    9260:	add.w	sp, sp, #512	; 0x200
    9264:	pop	{r4, r5, r6, pc}
  return statusCMD13();
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    9266:	movs	r3, #0
    9268:	strb	r3, [r4, #13]
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    926a:	bl	8638 <transferStop()>
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    if (!SdioCard::readStop()) {
    926e:	cmp	r0, #0
    9270:	bne.n	9208 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
    9272:	b.n	925e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
    9274:	.word	0x183a0001
    9278:	.word	0x1fff088c
    927c:	.word	0x20020380
    9280:	.word	0x0000873d

00009284 <SdSpiAltDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiAltDriver::activate() {
    9284:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    9286:	ldr	r3, [r0, #0]
    9288:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    928a:	ldrb	r1, [r3, #11]
    928c:	cbz	r1, 92ce <SdSpiAltDriver::activate()+0x4a>
			__disable_irq();
    928e:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    9290:	ldrb	r1, [r3, #11]
    9292:	lsls	r0, r1, #31
    9294:	bpl.n	92a4 <SdSpiAltDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    9296:	ldr	r0, [pc, #100]	; (92fc <SdSpiAltDriver::activate()+0x78>)
    9298:	ldr	r1, [r3, #12]
    929a:	ldr	r4, [r0, #0]
    929c:	ands	r1, r4
    929e:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    92a0:	str	r1, [r0, #0]
    92a2:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    92a4:	lsls	r4, r1, #30
    92a6:	bpl.n	92b6 <SdSpiAltDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    92a8:	ldr	r0, [pc, #84]	; (9300 <SdSpiAltDriver::activate()+0x7c>)
    92aa:	ldr	r1, [r3, #16]
    92ac:	ldr	r4, [r0, #0]
    92ae:	ands	r1, r4
    92b0:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    92b2:	str	r1, [r0, #0]
    92b4:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    92b6:	lsls	r0, r1, #29
    92b8:	bpl.n	92c8 <SdSpiAltDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    92ba:	ldr	r0, [pc, #72]	; (9304 <SdSpiAltDriver::activate()+0x80>)
    92bc:	ldr	r1, [r3, #20]
    92be:	ldr	r4, [r0, #0]
    92c0:	ands	r1, r4
    92c2:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    92c4:	str	r1, [r0, #0]
    92c6:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    92c8:	lsls	r1, r1, #28
    92ca:	bmi.n	92ec <SdSpiAltDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    92cc:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    92ce:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    92d0:	ldr	r1, [r3, #12]
    92d2:	cmp	r1, r2
    92d4:	beq.n	92e6 <SdSpiAltDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    92d6:	ldr	r0, [pc, #48]	; (9308 <SdSpiAltDriver::activate()+0x84>)
    92d8:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    92da:	ldr	r1, [pc, #48]	; (930c <SdSpiAltDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    92dc:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    92de:	orr.w	r0, r2, #1073741824	; 0x40000000
    92e2:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    92e4:	str	r1, [r3, #0]
}
    92e6:	ldr.w	r4, [sp], #4
    92ea:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    92ec:	ldr	r0, [pc, #32]	; (9310 <SdSpiAltDriver::activate()+0x8c>)
    92ee:	ldr	r1, [r3, #24]
    92f0:	ldr	r4, [r0, #0]
    92f2:	ands	r1, r4
    92f4:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    92f6:	str	r1, [r0, #0]
    92f8:	b.n	92cc <SdSpiAltDriver::activate()+0x48>
    92fa:	nop
    92fc:	.word	0xe000e180
    9300:	.word	0xe000e184
    9304:	.word	0xe000e188
    9308:	.word	0x003f4001
    930c:	.word	0x803f0000
    9310:	.word	0xe000e18c

00009314 <SdSpiAltDriver::deactivate()>:
  digitalWrite(m_csPin, HIGH);
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
    9314:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    9316:	ldrb	r3, [r2, #11]
    9318:	cbz	r3, 9348 <SdSpiAltDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    931a:	lsls	r1, r3, #31
    931c:	bpl.n	9326 <SdSpiAltDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    931e:	ldr	r3, [pc, #44]	; (934c <SdSpiAltDriver::deactivate()+0x38>)
    9320:	ldr	r1, [r2, #28]
    9322:	str	r1, [r3, #0]
    9324:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    9326:	lsls	r0, r3, #30
    9328:	bpl.n	9332 <SdSpiAltDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    932a:	ldr	r3, [pc, #36]	; (9350 <SdSpiAltDriver::deactivate()+0x3c>)
    932c:	ldr	r1, [r2, #32]
    932e:	str	r1, [r3, #0]
    9330:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    9332:	lsls	r1, r3, #29
    9334:	bpl.n	933e <SdSpiAltDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    9336:	ldr	r3, [pc, #28]	; (9354 <SdSpiAltDriver::deactivate()+0x40>)
    9338:	ldr	r1, [r2, #36]	; 0x24
    933a:	str	r1, [r3, #0]
    933c:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    933e:	lsls	r3, r3, #28
    9340:	bpl.n	9348 <SdSpiAltDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    9342:	ldr	r3, [pc, #20]	; (9358 <SdSpiAltDriver::deactivate()+0x44>)
    9344:	ldr	r2, [r2, #40]	; 0x28
    9346:	str	r2, [r3, #0]
    9348:	bx	lr
    934a:	nop
    934c:	.word	0xe000e100
    9350:	.word	0xe000e104
    9354:	.word	0xe000e108
    9358:	.word	0xe000e10c

0000935c <SdSpiAltDriver::receive()>:
//------------------------------------------------------------------------------
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
    935c:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    935e:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    9360:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    9364:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    9366:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    9368:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    936a:	ldr	r3, [r2, #44]	; 0x2c
    936c:	cmp	r3, #0
    936e:	bge.n	936a <SdSpiAltDriver::receive()+0xe>
		return port().POPR;
    9370:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    9372:	uxtb	r0, r0
    9374:	bx	lr
    9376:	nop

00009378 <SdSpiAltDriver::receive(unsigned char*, unsigned int)>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
    9378:	push	{r4, r5, r6, lr}
    937a:	mov	r5, r0
    937c:	mov	r4, r1
    937e:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, n);
    9380:	mov	r0, r1
    9382:	movs	r1, #255	; 0xff
    9384:	bl	cb88 <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    9388:	ldr	r0, [r5, #0]
    938a:	mov	r3, r6
    938c:	mov	r2, r4
    938e:	mov	r1, r4
    9390:	bl	2d9c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < n; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    9394:	movs	r0, #0
    9396:	pop	{r4, r5, r6, pc}

00009398 <SdSpiAltDriver::send(unsigned char)>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
    9398:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    939a:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    939c:	mov.w	r3, #2147483648	; 0x80000000
    93a0:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    93a2:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    93a4:	ldr	r3, [r2, #44]	; 0x2c
    93a6:	cmp	r3, #0
    93a8:	bge.n	93a4 <SdSpiAltDriver::send(unsigned char)+0xc>
		return port().POPR;
    93aa:	ldr	r3, [r2, #56]	; 0x38
    93ac:	bx	lr
    93ae:	nop

000093b0 <SdSpiAltDriver::send(unsigned char const*, unsigned int)>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
    93b0:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < n && n <= 512) {
    93b2:	subs	r5, r2, #1
    93b4:	cmp.w	r5, #512	; 0x200
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
    93b8:	sub.w	sp, sp, #516	; 0x204
    93bc:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < n && n <= 512) {
    93be:	bcc.n	93e6 <SdSpiAltDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, n);
    m_spi->transfer(tmp, n);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < n; i++) {
    93c0:	cbz	r2, 93e0 <SdSpiAltDriver::send(unsigned char const*, unsigned int)+0x30>
    93c2:	ldr	r2, [r0, #0]
    93c4:	ldr	r2, [r2, #0]
    93c6:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    93c8:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    93cc:	ldrb.w	r3, [r1], #1
    93d0:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    93d2:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    93d4:	ldr	r3, [r2, #44]	; 0x2c
    93d6:	cmp	r3, #0
    93d8:	bge.n	93d4 <SdSpiAltDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, n);
    m_spi->transfer(tmp, n);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < n; i++) {
    93da:	cmp	r1, r0
		return port().POPR;
    93dc:	ldr	r3, [r2, #56]	; 0x38
    93de:	bne.n	93cc <SdSpiAltDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    93e0:	add.w	sp, sp, #516	; 0x204
    93e4:	pop	{r4, r5, pc}
    93e6:	mov	r5, r0
    93e8:	mov	r4, r2
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < n && n <= 512) {
    memcpy(tmp, buf, n);
    93ea:	mov	r0, sp
    93ec:	bl	9404 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    93f0:	mov	r3, r4
    93f2:	mov	r2, sp
    93f4:	mov	r1, sp
    93f6:	ldr	r0, [r5, #0]
    93f8:	bl	2d9c <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < n; i++) {
    m_spi->transfer(buf[i]);
  }
}
    93fc:	add.w	sp, sp, #516	; 0x204
    9400:	pop	{r4, r5, pc}
    9402:	nop

00009404 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9404:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9406:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    940a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    940e:	bne.n	94ec <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9410:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9412:	bcc.n	9498 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9414:	ldr.w	r3, [r1], #4
    9418:	str.w	r3, [r0], #4
    941c:	ldr.w	r3, [r1], #4
    9420:	str.w	r3, [r0], #4
    9424:	ldr.w	r3, [r1], #4
    9428:	str.w	r3, [r0], #4
    942c:	ldr.w	r3, [r1], #4
    9430:	str.w	r3, [r0], #4
    9434:	ldr.w	r3, [r1], #4
    9438:	str.w	r3, [r0], #4
    943c:	ldr.w	r3, [r1], #4
    9440:	str.w	r3, [r0], #4
    9444:	ldr.w	r3, [r1], #4
    9448:	str.w	r3, [r0], #4
    944c:	ldr.w	r3, [r1], #4
    9450:	str.w	r3, [r0], #4
    9454:	ldr.w	r3, [r1], #4
    9458:	str.w	r3, [r0], #4
    945c:	ldr.w	r3, [r1], #4
    9460:	str.w	r3, [r0], #4
    9464:	ldr.w	r3, [r1], #4
    9468:	str.w	r3, [r0], #4
    946c:	ldr.w	r3, [r1], #4
    9470:	str.w	r3, [r0], #4
    9474:	ldr.w	r3, [r1], #4
    9478:	str.w	r3, [r0], #4
    947c:	ldr.w	r3, [r1], #4
    9480:	str.w	r3, [r0], #4
    9484:	ldr.w	r3, [r1], #4
    9488:	str.w	r3, [r0], #4
    948c:	ldr.w	r3, [r1], #4
    9490:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9494:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9496:	bcs.n	9414 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9498:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    949a:	bcc.n	94c0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    949c:	ldr.w	r3, [r1], #4
    94a0:	str.w	r3, [r0], #4
    94a4:	ldr.w	r3, [r1], #4
    94a8:	str.w	r3, [r0], #4
    94ac:	ldr.w	r3, [r1], #4
    94b0:	str.w	r3, [r0], #4
    94b4:	ldr.w	r3, [r1], #4
    94b8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    94bc:	subs	r2, #16
	bhs	.Lmid_block_loop
    94be:	bcs.n	949c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    94c0:	adds	r2, #12
	blo	.Lcopy_less_than_4
    94c2:	bcc.n	94d0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    94c4:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    94c8:	str.w	r3, [r0], #4
	subs	r2, #4
    94cc:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    94ce:	bcs.n	94c4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    94d0:	adds	r2, #4
	beq	.Ldone
    94d2:	beq.n	94e6 <memcpy+0xe2>

	lsls	r2, r2, #31
    94d4:	lsls	r2, r2, #31
	itt ne
    94d6:	itt	ne
	ldrbne  r3, [r1], #1
    94d8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    94dc:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    94e0:	bcc.n	94e6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    94e2:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    94e4:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    94e6:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    94e8:	bx	lr
    94ea:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    94ec:	cmp	r2, #8
	blo	.Lbyte_copy
    94ee:	bcc.n	9518 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    94f0:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    94f2:	beq.n	9410 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    94f4:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    94f8:	beq.n	9410 <memcpy+0xc>

	rsb	r3, #4
    94fa:	rsb	r3, r3, #4
	subs	r2, r3
    94fe:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9500:	lsls	r3, r3, #31
	itt ne
    9502:	itt	ne
	ldrbne  r3, [r1], #1
    9504:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9508:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    950c:	bcc.n	9410 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    950e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9512:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9516:	b.n	9410 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9518:	subs	r2, #4
	blo	.Lcopy_less_than_4
    951a:	bcc.n	94d0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    951c:	subs	r2, #1
	ldrb    r3, [r1], #1
    951e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9522:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9526:	bcs.n	951c <memcpy+0x118>

	ldrb	r3, [r1]
    9528:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    952a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    952c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    952e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9530:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9532:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9534:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9536:	bx	lr

00009538 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    9538:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    953a:	ldr	r5, [pc, #60]	; (9578 <usb_serial_getchar+0x40>)
    953c:	ldr	r0, [r5, #0]
    953e:	cbz	r0, 9560 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    9540:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    9542:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    9544:	adds	r1, r0, r3
    9546:	adds	r3, #1
	if (i >= rx_packet->len) {
    9548:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    954a:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    954c:	bcs.n	9554 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    954e:	strh	r3, [r0, #2]
	}
	return c;
    9550:	mov	r0, r4
}
    9552:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    9554:	bl	9dc0 <usb_free>
		rx_packet = NULL;
    9558:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    955a:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    955c:	str	r3, [r5, #0]
    955e:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9560:	ldr	r3, [pc, #24]	; (957c <usb_serial_getchar+0x44>)
    9562:	ldrb	r3, [r3, #0]
    9564:	cbz	r3, 9572 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    9566:	movs	r0, #3
    9568:	bl	9e0c <usb_rx>
    956c:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    956e:	cmp	r0, #0
    9570:	bne.n	9540 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9572:	mov.w	r0, #4294967295
    9576:	pop	{r3, r4, r5, pc}
    9578:	.word	0x200203b8
    957c:	.word	0x200204a4

00009580 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    9580:	push	{r4, lr}
	if (!rx_packet) {
    9582:	ldr	r4, [pc, #36]	; (95a8 <usb_serial_peekchar+0x28>)
    9584:	ldr	r0, [r4, #0]
    9586:	cbz	r0, 9590 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    9588:	ldrh	r3, [r0, #2]
    958a:	add	r0, r3
    958c:	ldrb	r0, [r0, #8]
}
    958e:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9590:	ldr	r3, [pc, #24]	; (95ac <usb_serial_peekchar+0x2c>)
    9592:	ldrb	r3, [r3, #0]
    9594:	cbz	r3, 95a2 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    9596:	movs	r0, #3
    9598:	bl	9e0c <usb_rx>
    959c:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    959e:	cmp	r0, #0
    95a0:	bne.n	9588 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    95a2:	mov.w	r0, #4294967295
    95a6:	pop	{r4, pc}
    95a8:	.word	0x200203b8
    95ac:	.word	0x200204a4

000095b0 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    95b0:	ldr	r3, [pc, #16]	; (95c4 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    95b2:	ldr	r2, [pc, #20]	; (95c8 <usb_serial_available+0x18>)
    95b4:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    95b6:	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    95b8:	cbz	r3, 95c2 <usb_serial_available+0x12>
    95ba:	ldrh	r2, [r3, #0]
    95bc:	ldrh	r3, [r3, #2]
    95be:	subs	r3, r2, r3
    95c0:	add	r0, r3
	return count;
}
    95c2:	bx	lr
    95c4:	.word	0x200203b8
    95c8:	.word	0x20020538

000095cc <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    95cc:	ldr	r3, [pc, #44]	; (95fc <usb_serial_flush_input+0x30>)
    95ce:	ldrb	r3, [r3, #0]
    95d0:	cbz	r3, 95fa <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    95d2:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    95d4:	ldr	r4, [pc, #40]	; (9600 <usb_serial_flush_input+0x34>)
    95d6:	ldr	r0, [r4, #0]
    95d8:	cbz	r0, 95ee <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    95da:	bl	9dc0 <usb_free>
		rx_packet = NULL;
    95de:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    95e0:	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    95e2:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    95e4:	bl	9e0c <usb_rx>
		if (!rx) break;
    95e8:	cbz	r0, 95f8 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    95ea:	bl	9dc0 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    95ee:	movs	r0, #3
    95f0:	bl	9e0c <usb_rx>
		if (!rx) break;
    95f4:	cmp	r0, #0
    95f6:	bne.n	95ea <usb_serial_flush_input+0x1e>
    95f8:	pop	{r4, pc}
    95fa:	bx	lr
    95fc:	.word	0x200204a4
    9600:	.word	0x200203b8

00009604 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    9604:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    9608:	ldr	r2, [pc, #396]	; (9798 <usb_serial_write+0x194>)
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    960a:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    960c:	movs	r3, #1
    960e:	strb	r3, [r2, #0]
	while (size > 0) {
    9610:	str	r1, [sp, #4]
    9612:	cmp	r1, #0
    9614:	beq.n	96f0 <usb_serial_write+0xec>
    9616:	ldr.w	r8, [pc, #400]	; 97a8 <usb_serial_write+0x1a4>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    961a:	ldr	r7, [pc, #384]	; (979c <usb_serial_write+0x198>)
    961c:	mov	r4, r0
    961e:	ldr.w	r0, [r8]
    9622:	mov	r6, r1
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
    9624:	cmp	r0, #0
    9626:	beq.w	972c <usb_serial_write+0x128>
    962a:	ldr	r5, [pc, #372]	; (97a0 <usb_serial_write+0x19c>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    962c:	ldrh	r3, [r0, #2]
    962e:	rsb	r1, r3, #64	; 0x40
    9632:	cmp	r1, r6
    9634:	it	cs
    9636:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    9638:	add.w	r9, r3, r1
    963c:	uxth.w	r9, r9
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    9640:	add.w	r2, r0, #8
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    9644:	mov.w	lr, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    9648:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    964a:	strh.w	r9, [r0, #2]
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    964e:	add.w	ip, r1, #4294967295
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    9652:	add	r2, r3
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    9654:	strb.w	lr, [r5]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    9658:	cmp	r1, #0
    965a:	beq.n	96e0 <usb_serial_write+0xdc>
    965c:	add.w	r5, r3, #8
    9660:	adds	r3, #12
    9662:	add	r3, r0
    9664:	add	r5, r0
    9666:	add.w	r9, r4, #4
    966a:	cmp	r5, r9
    966c:	it	cc
    966e:	cmpcc	r4, r3
    9670:	ite	cs
    9672:	movcs	r3, #1
    9674:	movcc	r3, #0
    9676:	cmp	r1, #9
    9678:	ite	ls
    967a:	movls	r3, #0
    967c:	andhi.w	r3, r3, #1
    9680:	cmp	r3, #0
    9682:	beq.n	971a <usb_serial_write+0x116>
    9684:	orr.w	r3, r4, r5
    9688:	lsls	r3, r3, #30
    968a:	bne.n	971a <usb_serial_write+0x116>
    968c:	subs	r3, r1, #4
    968e:	lsrs	r3, r3, #2
    9690:	adds	r3, #1
    9692:	cmp.w	ip, #2
    9696:	mov.w	r9, r3, lsl #2
    969a:	bls.n	9716 <usb_serial_write+0x112>
    969c:	sub.w	sl, r4, #4
    96a0:	mov	fp, r3
    96a2:	add.w	lr, lr, #1
    96a6:	ldr.w	r3, [sl, #4]!
    96aa:	str.w	r3, [r5], #4
    96ae:	cmp	fp, lr
    96b0:	bhi.n	96a2 <usb_serial_write+0x9e>
    96b2:	cmp	r1, r9
    96b4:	add	r2, r9
    96b6:	rsb	ip, r9, ip
    96ba:	add.w	r3, r4, r9
    96be:	beq.n	9784 <usb_serial_write+0x180>
    96c0:	ldrb	r5, [r3, #0]
    96c2:	strb	r5, [r2, #0]
    96c4:	cmp.w	ip, #0
    96c8:	beq.n	9712 <usb_serial_write+0x10e>
    96ca:	ldrb	r5, [r3, #1]
    96cc:	strb	r5, [r2, #1]
    96ce:	cmp.w	ip, #1
    96d2:	beq.n	9712 <usb_serial_write+0x10e>
    96d4:	ldrb	r3, [r3, #2]
    96d6:	strb	r3, [r2, #2]
    96d8:	add	r1, r4
    96da:	ldrh.w	r9, [r0, #2]
    96de:	mov	r4, r1
		if (tx_packet->index >= CDC_TX_SIZE) {
    96e0:	cmp.w	r9, #63	; 0x3f
    96e4:	bhi.n	96fe <usb_serial_write+0xfa>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    96e6:	ldr	r3, [pc, #188]	; (97a4 <usb_serial_write+0x1a0>)
    96e8:	movs	r2, #5
    96ea:	strb	r2, [r3, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    96ec:	cmp	r6, #0
    96ee:	bne.n	9624 <usb_serial_write+0x20>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    96f0:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    96f2:	ldr	r2, [pc, #164]	; (9798 <usb_serial_write+0x194>)
    96f4:	movs	r3, #0
    96f6:	strb	r3, [r2, #0]
	return ret;
}
    96f8:	add	sp, #12
    96fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    96fe:	movs	r3, #64	; 0x40
    9700:	strh	r3, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9702:	mov	r1, r0
    9704:	movs	r0, #4
    9706:	bl	9f3c <usb_tx>
			tx_packet = NULL;
    970a:	movs	r0, #0
    970c:	str.w	r0, [r8]
    9710:	b.n	96e6 <usb_serial_write+0xe2>
    9712:	add	r1, r4
    9714:	b.n	96da <usb_serial_write+0xd6>
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    9716:	mov	r3, r4
    9718:	b.n	96c0 <usb_serial_write+0xbc>
    971a:	subs	r2, #1
    971c:	add	r1, r4
    971e:	ldrb.w	r3, [r4], #1
    9722:	strb.w	r3, [r2, #1]!
    9726:	cmp	r4, r1
    9728:	bne.n	971e <usb_serial_write+0x11a>
    972a:	b.n	96da <usb_serial_write+0xd6>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    972c:	ldrb	r3, [r7, #0]
    972e:	cbz	r3, 9788 <usb_serial_write+0x184>
    9730:	ldr	r5, [pc, #108]	; (97a0 <usb_serial_write+0x19c>)
    9732:	movw	r9, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    9736:	mov.w	sl, #1
    973a:	b.n	974e <usb_serial_write+0x14a>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    973c:	subs.w	r9, r9, #1
    9740:	beq.n	9776 <usb_serial_write+0x172>
    9742:	ldrb	r3, [r5, #0]
    9744:	cbnz	r3, 9776 <usb_serial_write+0x172>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    9746:	bl	1724 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    974a:	ldrb	r3, [r7, #0]
    974c:	cbz	r3, 9788 <usb_serial_write+0x184>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    974e:	movs	r0, #4
    9750:	bl	9e48 <usb_tx_packet_count>
    9754:	cmp	r0, #7
    9756:	bhi.n	973c <usb_serial_write+0x138>
					tx_noautoflush = 1;
    9758:	ldr	r3, [pc, #60]	; (9798 <usb_serial_write+0x194>)
    975a:	strb.w	sl, [r3]
					tx_packet = usb_malloc();
    975e:	bl	9d80 <usb_malloc>
    9762:	str.w	r0, [r8]
					if (tx_packet) break;
    9766:	cmp	r0, #0
    9768:	bne.w	962c <usb_serial_write+0x28>
					tx_noautoflush = 0;
    976c:	ldr	r3, [pc, #40]	; (9798 <usb_serial_write+0x194>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    976e:	subs.w	r9, r9, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    9772:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9774:	bne.n	9742 <usb_serial_write+0x13e>
					transmit_previous_timeout = 1;
    9776:	movs	r3, #1
					return -1;
    9778:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    977c:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    977e:	add	sp, #12
    9780:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9784:	mov	r1, r3
    9786:	b.n	96da <usb_serial_write+0xd6>
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    9788:	ldr	r2, [pc, #12]	; (9798 <usb_serial_write+0x194>)
    978a:	movs	r3, #0
					return -1;
    978c:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    9790:	strb	r3, [r2, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    9792:	add	sp, #12
    9794:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9798:	.word	0x200203ad
    979c:	.word	0x200204a4
    97a0:	.word	0x200203b4
    97a4:	.word	0x200203ac
    97a8:	.word	0x200203b0

000097ac <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    97ac:	push	{lr}
    97ae:	sub	sp, #12
    97b0:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    97b2:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    97b4:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    97b8:	mov	r0, r3
    97ba:	bl	9604 <usb_serial_write>
}
    97be:	add	sp, #12
    97c0:	ldr.w	pc, [sp], #4

000097c4 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    97c4:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    97c6:	ldr	r5, [pc, #56]	; (9800 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    97c8:	ldr	r4, [pc, #56]	; (9804 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    97ca:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    97cc:	movs	r3, #1
    97ce:	strb	r3, [r4, #0]
	if (!tx_packet) {
    97d0:	cbz	r0, 97de <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    97d2:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    97d4:	movs	r3, #0
    97d6:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    97d8:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    97dc:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    97de:	ldr	r3, [pc, #40]	; (9808 <usb_serial_write_buffer_free+0x44>)
    97e0:	ldrb	r3, [r3, #0]
    97e2:	cbnz	r3, 97ea <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    97e4:	movs	r0, #0
    97e6:	strb	r0, [r4, #0]
			return 0;
    97e8:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    97ea:	movs	r0, #4
    97ec:	bl	9e48 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    97f0:	cmp	r0, #7
    97f2:	bhi.n	97e4 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    97f4:	bl	9d80 <usb_malloc>
    97f8:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    97fa:	cmp	r0, #0
    97fc:	bne.n	97d2 <usb_serial_write_buffer_free+0xe>
    97fe:	b.n	97e4 <usb_serial_write_buffer_free+0x20>
    9800:	.word	0x200203b0
    9804:	.word	0x200203ad
    9808:	.word	0x200204a4

0000980c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    980c:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    980e:	ldr	r3, [pc, #68]	; (9854 <usb_serial_flush_output+0x48>)
    9810:	ldrb	r3, [r3, #0]
    9812:	cbz	r3, 9838 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    9814:	ldr	r6, [pc, #64]	; (9858 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    9816:	ldr	r5, [pc, #68]	; (985c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    9818:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    981a:	movs	r7, #1
    981c:	strb	r7, [r5, #0]
	if (tx_packet) {
    981e:	cbz	r4, 983a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    9820:	ldr	r2, [pc, #60]	; (9860 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    9822:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    9824:	movs	r7, #0
    9826:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9828:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    982a:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    982c:	movs	r0, #4
    982e:	bl	9f3c <usb_tx>
		tx_packet = NULL;
    9832:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    9834:	movs	r3, #0
    9836:	strb	r3, [r5, #0]
    9838:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    983a:	bl	9d80 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    983e:	ldr	r3, [pc, #32]	; (9860 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    9840:	cbz	r0, 984e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    9842:	mov	r1, r0
    9844:	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    9846:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    9848:	bl	9f3c <usb_tx>
    984c:	b.n	9834 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    984e:	strb	r7, [r3, #0]
    9850:	b.n	9834 <usb_serial_flush_output+0x28>
    9852:	nop
    9854:	.word	0x200204a4
    9858:	.word	0x200203b0
    985c:	.word	0x200203ad
    9860:	.word	0x200203ac

00009864 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    9864:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    9866:	ldr	r3, [pc, #56]	; (98a0 <usb_serial_flush_callback+0x3c>)
    9868:	ldrb	r3, [r3, #0]
    986a:	cbnz	r3, 988a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    986c:	ldr	r4, [pc, #52]	; (98a4 <usb_serial_flush_callback+0x40>)
    986e:	ldr	r1, [r4, #0]
    9870:	cbz	r1, 988c <usb_serial_flush_callback+0x28>
    9872:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    9876:	ldrh	r3, [r1, #2]
    9878:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    987a:	movs	r0, #4
    987c:	bl	9f3c <usb_tx>
		tx_packet = NULL;
    9880:	str	r5, [r4, #0]
    9882:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    9884:	ldr	r3, [pc, #32]	; (98a8 <usb_serial_flush_callback+0x44>)
    9886:	movs	r2, #1
    9888:	strb	r2, [r3, #0]
    988a:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    988c:	bl	9d80 <usb_malloc>
		if (tx) {
    9890:	cmp	r0, #0
    9892:	beq.n	9884 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    9894:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    9896:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    989a:	movs	r0, #4
    989c:	b.w	9f3c <usb_tx>
    98a0:	.word	0x200203ad
    98a4:	.word	0x200203b0
    98a8:	.word	0x200203ac

000098ac <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    98ac:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    98ae:	ldr	r4, [pc, #64]	; (98f0 <fault_isr+0x44>)
    98b0:	b.n	98c4 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    98b2:	ldr	r3, [r4, #0]
    98b4:	lsls	r1, r3, #21
    98b6:	bmi.n	98d4 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    98b8:	ldr	r3, [r4, #0]
    98ba:	lsls	r2, r3, #20
    98bc:	bmi.n	98de <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    98be:	ldr	r3, [r4, #0]
    98c0:	lsls	r3, r3, #19
    98c2:	bmi.n	98e8 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    98c4:	ldr	r3, [r4, #0]
    98c6:	lsls	r0, r3, #13
    98c8:	bpl.n	98b2 <fault_isr+0x6>
    98ca:	bl	9fc0 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    98ce:	ldr	r3, [r4, #0]
    98d0:	lsls	r1, r3, #21
    98d2:	bpl.n	98b8 <fault_isr+0xc>
    98d4:	bl	98f4 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    98d8:	ldr	r3, [r4, #0]
    98da:	lsls	r2, r3, #20
    98dc:	bpl.n	98be <fault_isr+0x12>
    98de:	bl	98f4 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    98e2:	ldr	r3, [r4, #0]
    98e4:	lsls	r3, r3, #19
    98e6:	bpl.n	98c4 <fault_isr+0x18>
    98e8:	bl	98f4 <unused_isr>
    98ec:	b.n	98c4 <fault_isr+0x18>
    98ee:	nop
    98f0:	.word	0x40048034

000098f4 <unused_isr>:
	}
}

void unused_isr(void)
{
    98f4:	push	{r3, lr}
	fault_isr();
    98f6:	bl	98ac <fault_isr>
    98fa:	nop

000098fc <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    98fc:	ldr	r3, [pc, #4]	; (9904 <startup_early_hook+0x8>)
    98fe:	movs	r2, #16
    9900:	strh	r2, [r3, #0]
    9902:	bx	lr
    9904:	.word	0x40052000

00009908 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    9908:	bx	lr
    990a:	nop

0000990c <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    990c:	ldr	r1, [pc, #36]	; (9934 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    990e:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    9910:	ldr	r3, [r1, #0]
	if (incr != 0) {
    9912:	cbz	r0, 9922 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    9914:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    9916:	add	r0, r3
    9918:	sub.w	r2, r2, #8192	; 0x2000
    991c:	cmp	r0, r2
    991e:	bcs.n	9926 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    9920:	str	r0, [r1, #0]
	}
	return prev;
    9922:	mov	r0, r3
}
    9924:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    9926:	bl	c3f4 <__errno>
    992a:	movs	r3, #12
    992c:	str	r3, [r0, #0]
			return (void *)-1;
    992e:	mov.w	r0, #4294967295
    9932:	pop	{r3, pc}
    9934:	.word	0x1fff0890

00009938 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    9938:	adds	r0, #16
    993a:	ldr	r3, [pc, #8]	; (9944 <attachInterruptVector+0xc>)
    993c:	str.w	r1, [r3, r0, lsl #2]
    9940:	bx	lr
    9942:	nop
    9944:	.word	0x1fff0200

00009948 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    9948:	push	{r4, r5}
	RTC_SR = 0;
    994a:	ldr	r3, [pc, #20]	; (9960 <rtc_set+0x18>)
	RTC_TPR = 0;
    994c:	ldr	r5, [pc, #20]	; (9964 <rtc_set+0x1c>)
	RTC_TSR = t;
    994e:	ldr	r4, [pc, #24]	; (9968 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9950:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    9952:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9954:	str	r2, [r3, #0]
	RTC_TPR = 0;
    9956:	str	r2, [r5, #0]
	RTC_TSR = t;
    9958:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    995a:	str	r1, [r3, #0]
}
    995c:	pop	{r4, r5}
    995e:	bx	lr
    9960:	.word	0x4003d014
    9964:	.word	0x4003d004
    9968:	.word	0x4003d000

0000996c <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    996c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9970:	ldr	r3, [pc, #556]	; (9ba0 <_init_Teensyduino_internal_+0x234>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    9972:	ldr	r0, [pc, #560]	; (9ba4 <_init_Teensyduino_internal_+0x238>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    9974:	ldr.w	ip, [pc, #608]	; 9bd8 <_init_Teensyduino_internal_+0x26c>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    9978:	ldr	r4, [pc, #556]	; (9ba8 <_init_Teensyduino_internal_+0x23c>)
	FTM0_C2SC = 0x28;
    997a:	ldr	r1, [pc, #560]	; (9bac <_init_Teensyduino_internal_+0x240>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    997c:	ldr.w	lr, [pc, #604]	; 9bdc <_init_Teensyduino_internal_+0x270>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    9980:	ldr	r6, [pc, #556]	; (9bb0 <_init_Teensyduino_internal_+0x244>)
	FTM0_C4SC = 0x28;
    9982:	ldr	r5, [pc, #560]	; (9bb4 <_init_Teensyduino_internal_+0x248>)
	FTM0_C5SC = 0x28;
    9984:	ldr	r7, [pc, #560]	; (9bb8 <_init_Teensyduino_internal_+0x24c>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9986:	mov.w	r2, #134217728	; 0x8000000
    998a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    998c:	mov.w	r2, #268435456	; 0x10000000
    9990:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    9992:	mov.w	r2, #536870912	; 0x20000000
    9996:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    9998:	mov.w	r2, #1073741824	; 0x40000000
    999c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    999e:	mov.w	r2, #2147483648	; 0x80000000
    99a2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    99a4:	movs	r2, #0
    99a6:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    99a8:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    99aa:	movw	r0, #49151	; 0xbfff
    99ae:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    99b2:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    99b6:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    99b8:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    99bc:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    99be:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    99c0:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    99c2:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    99c6:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    99c8:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    99cc:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    99ce:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    99d2:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    99d4:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    99d8:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    99dc:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    99e0:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    99e4:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    99e8:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    99ea:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    99ee:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    99f0:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    99f2:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    99f4:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    99f8:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    99fa:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    99fc:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    99fe:	ldr	r4, [pc, #444]	; (9bbc <_init_Teensyduino_internal_+0x250>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    9a00:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    9a02:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9a04:	movs	r1, #9
    9a06:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    9a08:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    9a0c:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    9a10:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    9a12:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    9a14:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    9a16:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    9a18:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    9a1a:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9a1c:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    9a20:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    9a24:	add.w	r7, r7, #520192	; 0x7f000
    9a28:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    9a2a:	addw	r4, r4, #2044	; 0x7fc
    9a2e:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    9a30:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    9a32:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    9a34:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9a36:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    9a3a:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    9a3c:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    9a40:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    9a44:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9a46:	sub.w	r4, r4, #460800	; 0x70800
    9a4a:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    9a4e:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    9a50:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9a52:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9a56:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9a58:	ldr	r0, [pc, #356]	; (9bc0 <_init_Teensyduino_internal_+0x254>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9a5a:	orr.w	r1, r1, #512	; 0x200
    9a5e:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9a60:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9a62:	ldr	r4, [pc, #352]	; (9bc4 <_init_Teensyduino_internal_+0x258>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    9a64:	add.w	lr, lr, #65280	; 0xff00
    9a68:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    9a6c:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    9a70:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    9a74:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9a78:	orr.w	r1, r1, #33554432	; 0x2000000
    9a7c:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    9a7e:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    9a82:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9a86:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    9a88:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    9a8a:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    9a8c:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9a8e:	str	r2, [r4, #0]
#endif
	analog_init();
    9a90:	bl	b18c <analog_init>

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9a94:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9a96:	ldr	r5, [pc, #304]	; (9bc8 <_init_Teensyduino_internal_+0x25c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9a98:	ldr	r3, [pc, #304]	; (9bcc <_init_Teensyduino_internal_+0x260>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9a9a:	ldr	r2, [pc, #308]	; (9bd0 <_init_Teensyduino_internal_+0x264>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9a9c:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9a9e:	ldr	r4, [r5, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9aa0:	ldr	r2, [r2, #0]
	__enable_irq();
    9aa2:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9aa4:	lsls	r1, r2, #5
    9aa6:	bpl.n	9aae <_init_Teensyduino_internal_+0x142>
    9aa8:	cmp	r3, #50	; 0x32
    9aaa:	it	hi
    9aac:	addhi	r4, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9aae:	rsb	r3, r3, #95744	; 0x17600
    9ab2:	ldr	r7, [pc, #288]	; (9bd4 <_init_Teensyduino_internal_+0x268>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9ab4:	ldr.w	r9, [pc, #276]	; 9bcc <_init_Teensyduino_internal_+0x260>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9ab8:	ldr.w	r8, [pc, #276]	; 9bd0 <_init_Teensyduino_internal_+0x264>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9abc:	adds	r3, #255	; 0xff
    9abe:	mov.w	r2, #1000	; 0x3e8
    9ac2:	umull	r1, r3, r7, r3
    9ac6:	mul.w	r4, r2, r4
    9aca:	add.w	r4, r4, r3, lsr #6
    9ace:	movs	r6, #25

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9ad0:	cpsid	i
	current = SYST_CVR;
    9ad2:	ldr.w	r1, [r9]
	count = systick_millis_count;
    9ad6:	ldr	r2, [r5, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9ad8:	ldr.w	lr, [r8]
	__enable_irq();
    9adc:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9ade:	rsb	r3, r1, #95744	; 0x17600
    9ae2:	adds	r3, #255	; 0xff
    9ae4:	umull	r0, r3, r7, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9ae8:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9aec:	rsb	r3, r4, r3, lsr #6
    9af0:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9af4:	beq.n	9afc <_init_Teensyduino_internal_+0x190>
    9af6:	cmp	r1, #50	; 0x32
    9af8:	it	hi
    9afa:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9afc:	mla	r3, r0, r2, r3
    9b00:	cmp.w	r3, #1000	; 0x3e8
    9b04:	bcc.n	9b10 <_init_Teensyduino_internal_+0x1a4>
				ms--;
				if (ms == 0) return;
    9b06:	subs	r6, #1
    9b08:	beq.n	9b16 <_init_Teensyduino_internal_+0x1aa>
				start += 1000;
    9b0a:	add.w	r4, r4, #1000	; 0x3e8
    9b0e:	b.n	9ad0 <_init_Teensyduino_internal_+0x164>
			}
			yield();
    9b10:	bl	1724 <yield>
    9b14:	b.n	9ad0 <_init_Teensyduino_internal_+0x164>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
    9b16:	bl	aa74 <usb_init>

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9b1a:	cpsid	i
	current = SYST_CVR;
    9b1c:	ldr	r3, [pc, #172]	; (9bcc <_init_Teensyduino_internal_+0x260>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9b1e:	ldr	r2, [pc, #176]	; (9bd0 <_init_Teensyduino_internal_+0x264>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9b20:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9b22:	ldr	r4, [r5, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9b24:	ldr	r2, [r2, #0]
	__enable_irq();
    9b26:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9b28:	lsls	r2, r2, #5
    9b2a:	bpl.n	9b32 <_init_Teensyduino_internal_+0x1c6>
    9b2c:	cmp	r3, #50	; 0x32
    9b2e:	it	hi
    9b30:	addhi	r4, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9b32:	rsb	r3, r3, #95744	; 0x17600
    9b36:	ldr	r7, [pc, #156]	; (9bd4 <_init_Teensyduino_internal_+0x268>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9b38:	ldr.w	r9, [pc, #144]	; 9bcc <_init_Teensyduino_internal_+0x260>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9b3c:	ldr.w	r8, [pc, #144]	; 9bd0 <_init_Teensyduino_internal_+0x264>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9b40:	adds	r3, #255	; 0xff
    9b42:	mov.w	r2, #1000	; 0x3e8
    9b46:	umull	r1, r3, r7, r3
    9b4a:	mul.w	r4, r2, r4
    9b4e:	add.w	r4, r4, r3, lsr #6
    9b52:	movw	r6, #275	; 0x113

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9b56:	cpsid	i
	current = SYST_CVR;
    9b58:	ldr.w	r1, [r9]
	count = systick_millis_count;
    9b5c:	ldr	r2, [r5, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9b5e:	ldr.w	lr, [r8]
	__enable_irq();
    9b62:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9b64:	rsb	r3, r1, #95744	; 0x17600
    9b68:	adds	r3, #255	; 0xff
    9b6a:	umull	r0, r3, r7, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9b6e:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9b72:	rsb	r3, r4, r3, lsr #6
    9b76:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9b7a:	beq.n	9b82 <_init_Teensyduino_internal_+0x216>
    9b7c:	cmp	r1, #50	; 0x32
    9b7e:	it	hi
    9b80:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9b82:	mla	r3, r0, r2, r3
    9b86:	cmp.w	r3, #1000	; 0x3e8
    9b8a:	bcc.n	9b96 <_init_Teensyduino_internal_+0x22a>
				ms--;
				if (ms == 0) return;
    9b8c:	subs	r6, #1
    9b8e:	beq.n	9b9c <_init_Teensyduino_internal_+0x230>
				start += 1000;
    9b90:	add.w	r4, r4, #1000	; 0x3e8
    9b94:	b.n	9b56 <_init_Teensyduino_internal_+0x1ea>
			}
			yield();
    9b96:	bl	1724 <yield>
    9b9a:	b.n	9b56 <_init_Teensyduino_internal_+0x1ea>
    9b9c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9ba0:	.word	0xe000e104
    9ba4:	.word	0x40038004
    9ba8:	.word	0x40038014
    9bac:	.word	0x4003801c
    9bb0:	.word	0x40038024
    9bb4:	.word	0x4003802c
    9bb8:	.word	0x40038034
    9bbc:	.word	0x40038000
    9bc0:	.word	0x40048004
    9bc4:	.word	0x400c9000
    9bc8:	.word	0x200203c0
    9bcc:	.word	0xe000e018
    9bd0:	.word	0xe000ed04
    9bd4:	.word	0xaaaaaaab
    9bd8:	.word	0x40038008
    9bdc:	.word	0x4003800c

00009be0 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    9be0:	cmp	r0, #63	; 0x3f
    9be2:	bhi.n	9bfe <digitalWrite+0x1e>


// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
    9be4:	push	{r4}
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    9be6:	ldr	r3, [pc, #60]	; (9c24 <digitalWrite+0x44>)
    9be8:	ldr.w	r2, [r3, r0, lsl #3]
    9bec:	ldrb.w	r4, [r2, #640]	; 0x280
    9bf0:	cbz	r4, 9c00 <digitalWrite+0x20>
		if (val) {
			*portSetRegister(pin) = 1;
    9bf2:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    9bf4:	cbz	r1, 9c16 <digitalWrite+0x36>
			*portSetRegister(pin) = 1;
    9bf6:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9bfa:	ldr.w	r4, [sp], #4
    9bfe:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    9c00:	add.w	r0, r3, r0, lsl #3
    9c04:	ldr	r3, [r0, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9c06:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    9c08:	cbnz	r1, 9c1c <digitalWrite+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    9c0a:	bic.w	r2, r2, #2
    9c0e:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9c10:	ldr.w	r4, [sp], #4
    9c14:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    9c16:	strb.w	r3, [r2, #256]	; 0x100
    9c1a:	b.n	9c10 <digitalWrite+0x30>
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9c1c:	orr.w	r2, r2, #3
    9c20:	str	r2, [r3, #0]
    9c22:	b.n	9c10 <digitalWrite+0x30>
    9c24:	.word	0x00013dd8

00009c28 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    9c28:	cmp	r0, #63	; 0x3f
    9c2a:	bhi.n	9c6e <pinMode+0x46>
	config = portConfigRegister(pin);
    9c2c:	ldr	r2, [pc, #108]	; (9c9c <pinMode+0x74>)
    9c2e:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9c32:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    9c34:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9c36:	beq.n	9c58 <pinMode+0x30>
    9c38:	cmp	r1, #4
    9c3a:	beq.n	9c78 <pinMode+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    9c3c:	ldr.w	r0, [r2, r0, lsl #3]
    9c40:	movs	r2, #0
    9c42:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    9c46:	cbz	r1, 9c70 <pinMode+0x48>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    9c48:	cmp	r1, #2
    9c4a:	beq.n	9c92 <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    9c4c:	cmp	r1, #3
    9c4e:	bne.n	9c6c <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    9c50:	mov.w	r2, #258	; 0x102
    9c54:	str	r2, [r3, #0]
    9c56:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9c58:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9c5c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9c60:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9c64:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    9c66:	ldr	r2, [r3, #0]
    9c68:	bic.w	r2, r2, #32
    9c6c:	str	r2, [r3, #0]
    9c6e:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    9c70:	mov.w	r2, #256	; 0x100
    9c74:	str	r2, [r3, #0]
    9c76:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9c78:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9c7c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9c80:	movs	r0, #1
    9c82:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9c86:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    9c88:	ldr	r2, [r3, #0]
    9c8a:	orr.w	r2, r2, #32
    9c8e:	str	r2, [r3, #0]
    9c90:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    9c92:	movw	r2, #259	; 0x103
    9c96:	str	r2, [r3, #0]
    9c98:	bx	lr
    9c9a:	nop
    9c9c:	.word	0x00013dd8

00009ca0 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9ca0:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9ca2:	ldr	r1, [pc, #48]	; (9cd4 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9ca4:	ldr	r3, [pc, #48]	; (9cd8 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9ca6:	ldr	r2, [pc, #52]	; (9cdc <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9ca8:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9caa:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9cac:	ldr	r2, [r2, #0]
	__enable_irq();
    9cae:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9cb0:	lsls	r2, r2, #5
    9cb2:	bpl.n	9cba <micros+0x1a>
    9cb4:	cmp	r3, #50	; 0x32
    9cb6:	it	hi
    9cb8:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9cba:	ldr	r1, [pc, #36]	; (9ce0 <micros+0x40>)
    9cbc:	rsb	r3, r3, #95744	; 0x17600
    9cc0:	mov.w	r2, #1000	; 0x3e8
    9cc4:	adds	r3, #255	; 0xff
    9cc6:	umull	r1, r3, r1, r3
    9cca:	mul.w	r0, r2, r0
}
    9cce:	add.w	r0, r0, r3, lsr #6
    9cd2:	bx	lr
    9cd4:	.word	0x200203c0
    9cd8:	.word	0xe000e018
    9cdc:	.word	0xe000ed04
    9ce0:	.word	0xaaaaaaab

00009ce4 <delay>:

void delay(uint32_t ms)
{
    9ce4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ce8:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9cea:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9cec:	ldr	r7, [pc, #128]	; (9d70 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9cee:	ldr	r3, [pc, #132]	; (9d74 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9cf0:	ldr	r2, [pc, #132]	; (9d78 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9cf2:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9cf4:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9cf6:	ldr	r2, [r2, #0]
	__enable_irq();
    9cf8:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9cfa:	lsls	r2, r2, #5
    9cfc:	bpl.n	9d04 <delay+0x20>
    9cfe:	cmp	r3, #50	; 0x32
    9d00:	it	hi
    9d02:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    9d04:	cbz	r5, 9d6c <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9d06:	rsb	r3, r3, #95744	; 0x17600
    9d0a:	ldr	r6, [pc, #112]	; (9d7c <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9d0c:	ldr.w	r9, [pc, #100]	; 9d74 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9d10:	ldr.w	r8, [pc, #100]	; 9d78 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9d14:	adds	r3, #255	; 0xff
    9d16:	mov.w	r2, #1000	; 0x3e8
    9d1a:	umull	r1, r3, r6, r3
    9d1e:	mul.w	r4, r2, r4
    9d22:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9d26:	cpsid	i
	current = SYST_CVR;
    9d28:	ldr.w	r1, [r9]
	count = systick_millis_count;
    9d2c:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9d2e:	ldr.w	lr, [r8]
	__enable_irq();
    9d32:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9d34:	rsb	r3, r1, #95744	; 0x17600
    9d38:	adds	r3, #255	; 0xff
    9d3a:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9d3e:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9d42:	rsb	r3, r4, r3, lsr #6
    9d46:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9d4a:	beq.n	9d52 <delay+0x6e>
    9d4c:	cmp	r1, #50	; 0x32
    9d4e:	it	hi
    9d50:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9d52:	mla	r3, r0, r2, r3
    9d56:	cmp.w	r3, #1000	; 0x3e8
    9d5a:	bcc.n	9d66 <delay+0x82>
				ms--;
				if (ms == 0) return;
    9d5c:	subs	r5, #1
    9d5e:	beq.n	9d6c <delay+0x88>
				start += 1000;
    9d60:	add.w	r4, r4, #1000	; 0x3e8
    9d64:	b.n	9d26 <delay+0x42>
			}
			yield();
    9d66:	bl	1724 <yield>
		}
    9d6a:	b.n	9d26 <delay+0x42>
    9d6c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9d70:	.word	0x200203c0
    9d74:	.word	0xe000e018
    9d78:	.word	0xe000ed04
    9d7c:	.word	0xaaaaaaab

00009d80 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    9d80:	cpsid	i
	avail = usb_buffer_available;
    9d82:	ldr	r0, [pc, #52]	; (9db8 <usb_malloc+0x38>)
    9d84:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    9d86:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    9d8a:	cmp	r3, #11
    9d8c:	bgt.n	9db0 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    9d8e:	mov.w	r1, #2147483648	; 0x80000000
    9d92:	lsrs	r1, r3
    9d94:	bic.w	r2, r2, r1
    9d98:	str	r2, [r0, #0]
	__enable_irq();
    9d9a:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    9d9c:	ldr	r0, [pc, #28]	; (9dbc <usb_malloc+0x3c>)
    9d9e:	add.w	r3, r3, r3, lsl #3
    9da2:	lsls	r3, r3, #3
    9da4:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    9da6:	movs	r1, #0
    9da8:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    9daa:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    9dac:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    9dae:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    9db0:	cpsie	i
		return NULL;
    9db2:	movs	r0, #0
    9db4:	bx	lr
    9db6:	nop
    9db8:	.word	0x1fff0894
    9dbc:	.word	0x1fff03d0

00009dc0 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    9dc0:	ldr	r3, [pc, #52]	; (9df8 <usb_free+0x38>)
    9dc2:	ldr	r2, [pc, #56]	; (9dfc <usb_free+0x3c>)
    9dc4:	subs	r3, r0, r3
    9dc6:	umull	r2, r3, r2, r3
    9dca:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    9dcc:	cmp	r3, #11
    9dce:	bhi.n	9dea <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9dd0:	ldr	r2, [pc, #44]	; (9e00 <usb_free+0x40>)
    9dd2:	ldrb	r2, [r2, #0]
    9dd4:	cbnz	r2, 9dec <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    9dd6:	cpsid	i
	usb_buffer_available |= mask;
    9dd8:	ldr	r0, [pc, #40]	; (9e04 <usb_free+0x44>)
    9dda:	mov.w	r1, #2147483648	; 0x80000000
    9dde:	ldr	r2, [r0, #0]
    9de0:	lsr.w	r3, r1, r3
    9de4:	orrs	r2, r3
    9de6:	str	r2, [r0, #0]
	__enable_irq();
    9de8:	cpsie	i
    9dea:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9dec:	ldr	r2, [pc, #24]	; (9e08 <usb_free+0x48>)
    9dee:	ldrb	r2, [r2, #0]
    9df0:	cmp	r2, #0
    9df2:	beq.n	9dd6 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    9df4:	b.w	9e74 <usb_rx_memory>
    9df8:	.word	0x1fff03d0
    9dfc:	.word	0x38e38e39
    9e00:	.word	0x20020499
    9e04:	.word	0x1fff0894
    9e08:	.word	0x200204a4

00009e0c <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    9e0c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9e0e:	cmp	r3, #3
    9e10:	bhi.n	9e3c <usb_rx+0x30>
	__disable_irq();
    9e12:	cpsid	i
	ret = rx_first[endpoint];
    9e14:	ldr	r1, [pc, #40]	; (9e40 <usb_rx+0x34>)
    9e16:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    9e1a:	cbz	r0, 9e38 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    9e1c:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9e1e:	ldr	r4, [pc, #36]	; (9e44 <usb_rx+0x38>)
    9e20:	ldrh	r5, [r0, #0]
    9e22:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    9e26:	ldr	r6, [r0, #4]
    9e28:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9e2c:	subs	r2, r2, r5
    9e2e:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    9e32:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9e34:	pop	{r4, r5, r6}
    9e36:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    9e38:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9e3a:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9e3c:	movs	r0, #0
    9e3e:	bx	lr
    9e40:	.word	0x2002041c
    9e44:	.word	0x20020538

00009e48 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    9e48:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    9e4a:	cmp	r0, #3
    9e4c:	bhi.n	9e66 <usb_tx_packet_count+0x1e>
	__disable_irq();
    9e4e:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    9e50:	ldr	r3, [pc, #28]	; (9e70 <usb_tx_packet_count+0x28>)
    9e52:	ldr.w	r3, [r3, r0, lsl #2]
    9e56:	cbz	r3, 9e6a <usb_tx_packet_count+0x22>
    9e58:	movs	r0, #0
    9e5a:	ldr	r3, [r3, #4]
    9e5c:	adds	r0, #1
    9e5e:	cmp	r3, #0
    9e60:	bne.n	9e5a <usb_tx_packet_count+0x12>
	__enable_irq();
    9e62:	cpsie	i
	return count;
    9e64:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    9e66:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    9e68:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    9e6a:	mov	r0, r3
    9e6c:	b.n	9e62 <usb_tx_packet_count+0x1a>
    9e6e:	nop
    9e70:	.word	0x20020470

00009e74 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    9e74:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    9e76:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9e78:	ldr	r2, [pc, #172]	; (9f28 <usb_rx_memory+0xb4>)
    9e7a:	ldrb	r3, [r2, #0]
    9e7c:	lsls	r5, r3, #28
    9e7e:	bpl.n	9e8e <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9e80:	ldr	r3, [pc, #168]	; (9f2c <usb_rx_memory+0xb8>)
    9e82:	ldr	r1, [r3, #32]
    9e84:	cmp	r1, #0
    9e86:	beq.n	9ef6 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9e88:	ldr	r1, [r3, #40]	; 0x28
    9e8a:	cmp	r1, #0
    9e8c:	beq.n	9f12 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9e8e:	ldrb	r3, [r2, #1]
    9e90:	lsls	r4, r3, #28
    9e92:	bpl.n	9ea2 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9e94:	ldr	r3, [pc, #148]	; (9f2c <usb_rx_memory+0xb8>)
    9e96:	ldr	r1, [r3, #64]	; 0x40
    9e98:	cmp	r1, #0
    9e9a:	beq.n	9f1a <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9e9c:	ldr	r1, [r3, #72]	; 0x48
    9e9e:	cmp	r1, #0
    9ea0:	beq.n	9f16 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9ea2:	ldrb	r3, [r2, #2]
    9ea4:	lsls	r1, r3, #28
    9ea6:	bpl.n	9eb4 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9ea8:	ldr	r3, [pc, #128]	; (9f2c <usb_rx_memory+0xb8>)
    9eaa:	ldr	r1, [r3, #96]	; 0x60
    9eac:	cmp	r1, #0
    9eae:	beq.n	9f1e <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9eb0:	ldr	r1, [r3, #104]	; 0x68
    9eb2:	cbz	r1, 9ed8 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9eb4:	ldrb	r3, [r2, #3]
    9eb6:	lsls	r3, r3, #28
    9eb8:	bpl.n	9eca <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9eba:	ldr	r3, [pc, #112]	; (9f2c <usb_rx_memory+0xb8>)
    9ebc:	ldr.w	r2, [r3, #128]	; 0x80
    9ec0:	cbz	r2, 9f22 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9ec2:	ldr.w	r2, [r3, #136]	; 0x88
    9ec6:	movs	r1, #17
    9ec8:	cbz	r2, 9eda <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    9eca:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    9ecc:	ldr	r3, [pc, #96]	; (9f30 <usb_rx_memory+0xbc>)
    9ece:	movs	r2, #0
    9ed0:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    9ed2:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    9ed4:	b.w	9dc0 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9ed8:	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9eda:	ldr	r4, [pc, #84]	; (9f30 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9edc:	ldr	r5, [pc, #84]	; (9f34 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    9ede:	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9ee0:	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9ee4:	add.w	r3, r3, r1, lsl #3
    9ee8:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9eea:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9eec:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9eee:	strb	r2, [r4, #0]
				__enable_irq();
    9ef0:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    9ef2:	pop	{r4, r5}
    9ef4:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9ef6:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9ef8:	ldr	r4, [pc, #52]	; (9f30 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9efa:	ldr	r5, [pc, #60]	; (9f38 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    9efc:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9efe:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9f02:	add.w	r3, r3, r2, lsl #3
    9f06:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9f08:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9f0a:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9f0c:	strb	r2, [r4, #0]
				__enable_irq();
    9f0e:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    9f10:	b.n	9ef2 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9f12:	movs	r1, #5
    9f14:	b.n	9eda <usb_rx_memory+0x66>
    9f16:	movs	r1, #9
    9f18:	b.n	9eda <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9f1a:	movs	r2, #8
    9f1c:	b.n	9ef8 <usb_rx_memory+0x84>
    9f1e:	movs	r2, #12
    9f20:	b.n	9ef8 <usb_rx_memory+0x84>
    9f22:	movs	r2, #16
    9f24:	b.n	9ef8 <usb_rx_memory+0x84>
    9f26:	nop
    9f28:	.word	0x00014004
    9f2c:	.word	0x1fff0000
    9f30:	.word	0x20020499
    9f34:	.word	0x004000c8
    9f38:	.word	0x00400088

00009f3c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    9f3c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    9f3e:	cmp	r3, #3
    9f40:	bhi.n	9f7e <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    9f42:	ldr	r2, [pc, #108]	; (9fb0 <usb_tx+0x74>)
    9f44:	lsls	r0, r0, #5
    9f46:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    9f4a:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    9f4c:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    9f4e:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    9f50:	ldr	r4, [pc, #96]	; (9fb4 <usb_tx+0x78>)
    9f52:	ldrb	r2, [r4, r3]
    9f54:	cmp	r2, #3
    9f56:	bhi.n	9f90 <usb_tx+0x54>
    9f58:	tbb	[pc, r2]
    9f5c:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    9f60:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9f62:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    9f64:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9f66:	tst.w	r0, #8
    9f6a:	ite	ne
    9f6c:	movne	r3, #200	; 0xc8
    9f6e:	moveq	r3, #136	; 0x88
    9f70:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    9f74:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9f76:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    9f78:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    9f7a:	cpsie	i
}
    9f7c:	pop	{r4, r5}
    9f7e:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    9f80:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    9f82:	movs	r2, #2
		break;
    9f84:	b.n	9f62 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    9f86:	movs	r2, #5
    9f88:	b.n	9f62 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    9f8a:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    9f8c:	movs	r2, #4
		break;
    9f8e:	b.n	9f62 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    9f90:	ldr	r2, [pc, #36]	; (9fb8 <usb_tx+0x7c>)
    9f92:	ldr.w	r0, [r2, r3, lsl #2]
    9f96:	cbz	r0, 9fa8 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    9f98:	ldr	r2, [pc, #32]	; (9fbc <usb_tx+0x80>)
    9f9a:	ldr.w	r0, [r2, r3, lsl #2]
    9f9e:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    9fa0:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    9fa4:	cpsie	i
		return;
    9fa6:	b.n	9f7c <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    9fa8:	str.w	r1, [r2, r3, lsl #2]
    9fac:	ldr	r2, [pc, #12]	; (9fbc <usb_tx+0x80>)
    9fae:	b.n	9fa0 <usb_tx+0x64>
    9fb0:	.word	0x1fff0000
    9fb4:	.word	0x200204a8
    9fb8:	.word	0x20020470
    9fbc:	.word	0x20020480

00009fc0 <usb_isr>:
}



void usb_isr(void)
{
    9fc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    9fc4:	ldr.w	fp, [pc, #780]	; a2d4 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    9fc8:	ldr.w	sl, [pc, #780]	; a2d8 <usb_isr+0x318>
}



void usb_isr(void)
{
    9fcc:	sub	sp, #28
    9fce:	b.n	a05a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    9fd0:	ldr	r7, [pc, #684]	; (a280 <usb_isr+0x2c0>)
    9fd2:	mov.w	r8, r3, lsr #2
    9fd6:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    9fda:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    9fdc:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9fe0:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    9fe4:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    9fe6:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9fea:	and.w	r4, r3, #255	; 0xff
    9fee:	cmp	r3, #0
    9ff0:	bne.w	a1f8 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    9ff4:	ldr.w	r3, [r7, r8, lsl #3]
    9ff8:	lsrs	r3, r3, #16
    9ffa:	uxth	r1, r3
    9ffc:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    a000:	cmp	r3, #0
    a002:	beq.w	a1e6 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    a006:	ldr	r3, [pc, #636]	; (a284 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    a008:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    a00c:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    a010:	ldr.w	r2, [r3, r6, lsl #2]
    a014:	cmp	r2, #0
    a016:	beq.w	a5a4 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    a01a:	ldr	r5, [pc, #620]	; (a288 <usb_isr+0x2c8>)
    a01c:	ldr.w	r3, [r5, r6, lsl #2]
    a020:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    a022:	ldr	r4, [pc, #616]	; (a28c <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    a024:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    a028:	ldrh.w	r3, [r4, r6, lsl #1]
    a02c:	add	r1, r3
    a02e:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    a032:	bl	9d80 <usb_malloc>
					if (packet) {
    a036:	cmp	r0, #0
    a038:	beq.w	a596 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    a03c:	ldr	r2, [pc, #592]	; (a290 <usb_isr+0x2d0>)
    a03e:	ldr	r3, [pc, #596]	; (a294 <usb_isr+0x2d4>)
    a040:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    a044:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    a048:	it	ne
    a04a:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    a04c:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    a050:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    a054:	movs	r3, #8
    a056:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    a05a:	ldrb.w	r4, [fp]
    a05e:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    a060:	lsls	r1, r4, #29
    a062:	bpl.n	a09a <usb_isr+0xda>
		if (usb_configuration) {
    a064:	ldr	r3, [pc, #560]	; (a298 <usb_isr+0x2d8>)
    a066:	ldrb	r3, [r3, #0]
    a068:	cbz	r3, a094 <usb_isr+0xd4>
			t = usb_reboot_timer;
    a06a:	ldr	r1, [pc, #560]	; (a29c <usb_isr+0x2dc>)
    a06c:	ldrb	r2, [r1, #0]
			if (t) {
    a06e:	and.w	r3, r2, #255	; 0xff
    a072:	cbz	r2, a07e <usb_isr+0xbe>
				usb_reboot_timer = --t;
    a074:	subs	r3, #1
    a076:	uxtb	r3, r3
    a078:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    a07a:	cbnz	r3, a07e <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    a07c:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    a07e:	ldr	r1, [pc, #544]	; (a2a0 <usb_isr+0x2e0>)
    a080:	ldrb	r2, [r1, #0]
			if (t) {
    a082:	and.w	r3, r2, #255	; 0xff
    a086:	cbz	r2, a094 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    a088:	subs	r3, #1
    a08a:	uxtb	r3, r3
    a08c:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    a08e:	cmp	r3, #0
    a090:	beq.w	a542 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    a094:	movs	r3, #4
    a096:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    a09a:	and.w	r3, r4, #8
    a09e:	and.w	r2, r3, #255	; 0xff
    a0a2:	cmp	r3, #0
    a0a4:	beq.w	a240 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    a0a8:	ldrb.w	r3, [sl]
    a0ac:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    a0ae:	lsrs	r6, r3, #4
    a0b0:	bne.n	9fd0 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    a0b2:	lsrs	r4, r3, #2
    a0b4:	ldr.w	r9, [pc, #456]	; a280 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    a0b8:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    a0bc:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    a0c0:	ubfx	r2, r2, #2, #4
    a0c4:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    a0c6:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    a0c8:	cmp	r2, #12
    a0ca:	bhi.w	a1de <usb_isr+0x21e>
    a0ce:	tbb	[pc, r2]
    a0d2:	.short	0x7c7c
    a0d4:	.word	0x86868686
    a0d8:	.word	0x86478686
    a0dc:	.short	0x8686
    a0de:	.byte	0x07
    a0df:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    a0e0:	ldr	r0, [r1, #0]
    a0e2:	ldr	r5, [pc, #448]	; (a2a4 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    a0e4:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a0e6:	ldr	r7, [pc, #448]	; (a2a8 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a0e8:	ldr	r6, [pc, #448]	; (a2ac <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    a0ea:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a0ec:	uxth	r1, r0
    a0ee:	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a0f2:	ldr	r3, [pc, #412]	; (a290 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    a0f4:	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a0f6:	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a0fa:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a0fc:	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a0fe:	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a102:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    a104:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    a108:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a10c:	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    a110:	ldr	r4, [pc, #364]	; (a280 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a112:	bhi.w	a2dc <usb_isr+0x31c>
    a116:	cmp.w	r1, #1664	; 0x680
    a11a:	bcs.w	a7aa <usb_isr+0x7ea>
    a11e:	cmp.w	r1, #258	; 0x102
    a122:	beq.w	a71e <usb_isr+0x75e>
    a126:	bhi.w	a644 <usb_isr+0x684>
    a12a:	cmp	r1, #128	; 0x80
    a12c:	beq.w	a81e <usb_isr+0x85e>
    a130:	cmp	r1, #130	; 0x82
    a132:	bne.w	a72a <usb_isr+0x76a>
    a136:	ldrh	r1, [r5, #4]
    a138:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    a13c:	cmp	r1, #4
    a13e:	bhi.w	a72a <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a142:	ldr	r0, [pc, #364]	; (a2b0 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a144:	ldr	r4, [pc, #364]	; (a2b4 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a146:	lsls	r1, r1, #2
    a148:	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a14a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a14c:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a14e:	ldrb	r2, [r0, #0]
    a150:	lsls	r3, r2, #30
    a152:	bpl.w	aa00 <usb_isr+0xa40>
    a156:	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    a15a:	mov.w	lr, #2
    a15e:	b.n	a7e6 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    a160:	ldr	r7, [pc, #324]	; (a2a8 <usb_isr+0x2e8>)
    a162:	ldr	r2, [r7, #0]
		if (data) {
    a164:	cbz	r2, a1b4 <usb_isr+0x1f4>
			size = ep0_tx_len;
    a166:	ldr	r3, [pc, #336]	; (a2b8 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a168:	ldr	r6, [pc, #320]	; (a2ac <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a16a:	ldr	r1, [pc, #336]	; (a2bc <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    a16c:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a16e:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a170:	ldrb	r5, [r1, #0]
    a172:	cmp	r0, #64	; 0x40
    a174:	mov	lr, r0
    a176:	orr.w	r8, r5, #2
    a17a:	it	cs
    a17c:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a180:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    a182:	eor.w	r4, r4, #1
    a186:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a188:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a18c:	ite	eq
    a18e:	moveq	r4, #136	; 0x88
    a190:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a192:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a196:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a198:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a19c:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a1a0:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a1a2:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a1a4:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    a1a8:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a1aa:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    a1ac:	cmp	r0, #0
    a1ae:	beq.w	a43c <usb_isr+0x47c>
    a1b2:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    a1b4:	ldr	r3, [pc, #236]	; (a2a4 <usb_isr+0x2e4>)
    a1b6:	ldrh	r2, [r3, #0]
    a1b8:	cmp.w	r2, #1280	; 0x500
    a1bc:	bne.n	a1de <usb_isr+0x21e>
			setup.bRequest = 0;
    a1be:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    a1c0:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    a1c2:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    a1c4:	ldr	r3, [pc, #248]	; (a2c0 <usb_isr+0x300>)
    a1c6:	strb	r2, [r3, #0]
    a1c8:	b.n	a1de <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    a1ca:	ldr	r2, [pc, #216]	; (a2a4 <usb_isr+0x2e4>)
    a1cc:	ldrh	r0, [r2, #0]
    a1ce:	movw	r2, #8225	; 0x2021
    a1d2:	cmp	r0, r2
    a1d4:	beq.w	a446 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a1d8:	ldr	r2, [pc, #180]	; (a290 <usb_isr+0x2d0>)
    a1da:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a1de:	ldr	r2, [pc, #228]	; (a2c4 <usb_isr+0x304>)
    a1e0:	movs	r3, #1
    a1e2:	strb	r3, [r2, #0]
    a1e4:	b.n	a054 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a1e6:	ldr	r2, [pc, #168]	; (a290 <usb_isr+0x2d0>)
    a1e8:	ldr	r3, [pc, #168]	; (a294 <usb_isr+0x2d4>)
    a1ea:	tst.w	r9, #8
    a1ee:	it	ne
    a1f0:	movne	r3, r2
    a1f2:	str.w	r3, [r7, r8, lsl #3]
    a1f6:	b.n	a054 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    a1f8:	bl	9dc0 <usb_free>
				packet = tx_first[endpoint];
    a1fc:	ldr	r2, [pc, #200]	; (a2c8 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    a1fe:	ldr	r1, [pc, #204]	; (a2cc <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    a200:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    a204:	cmp	r3, #0
    a206:	beq.w	a5ac <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    a20a:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    a20c:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    a20e:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    a212:	add.w	r2, r3, #8
    a216:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    a21a:	cmp	r4, #3
    a21c:	bhi.n	a22a <usb_isr+0x26a>
    a21e:	tbb	[pc, r4]
    a222:	.short	0x022c
    a224:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    a226:	movs	r2, #2
    a228:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    a22a:	ldrh	r2, [r3, #0]
    a22c:	tst.w	r9, #8
    a230:	ite	eq
    a232:	moveq	r3, #136	; 0x88
    a234:	movne	r3, #200	; 0xc8
    a236:	orr.w	r3, r3, r2, lsl #16
    a23a:	str.w	r3, [r7, r8, lsl #3]
    a23e:	b.n	a054 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    a240:	lsls	r0, r4, #31
    a242:	bmi.w	a548 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    a246:	lsls	r1, r4, #24
    a248:	bmi.w	a630 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    a24c:	lsls	r2, r4, #30
    a24e:	bpl.n	a25e <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    a250:	ldr	r2, [pc, #124]	; (a2d0 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a252:	ldr	r1, [pc, #128]	; (a2d4 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    a254:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a256:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    a258:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    a25a:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a25c:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    a25e:	lsls	r3, r4, #27
    a260:	bpl.n	a268 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    a262:	ldr	r3, [pc, #112]	; (a2d4 <usb_isr+0x314>)
    a264:	movs	r2, #16
    a266:	strb	r2, [r3, #0]
	}

}
    a268:	add	sp, #28
    a26a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    a26e:	movs	r2, #4
    a270:	strb	r2, [r1, r6]
						break;
    a272:	b.n	a22a <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    a274:	movs	r2, #5
    a276:	strb	r2, [r1, r6]
						break;
    a278:	b.n	a22a <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    a27a:	movs	r2, #3
    a27c:	strb	r2, [r1, r6]
						break;
    a27e:	b.n	a22a <usb_isr+0x26a>
    a280:	.word	0x1fff0000
    a284:	.word	0x2002041c
    a288:	.word	0x200203c8
    a28c:	.word	0x20020538
    a290:	.word	0x004000c8
    a294:	.word	0x00400088
    a298:	.word	0x200204a4
    a29c:	.word	0x2002042d
    a2a0:	.word	0x200203ac
    a2a4:	.word	0x20020490
    a2a8:	.word	0x200203c4
    a2ac:	.word	0x2002042c
    a2b0:	.word	0x400720c0
    a2b4:	.word	0x2002049c
    a2b8:	.word	0x200203d8
    a2bc:	.word	0x20020498
    a2c0:	.word	0x40072098
    a2c4:	.word	0x40072094
    a2c8:	.word	0x20020470
    a2cc:	.word	0x200204a8
    a2d0:	.word	0x40072088
    a2d4:	.word	0x40072080
    a2d8:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a2dc:	movw	r0, #8225	; 0x2021
    a2e0:	cmp	r1, r0
    a2e2:	beq.w	a53a <usb_isr+0x57a>
    a2e6:	bhi.w	a49a <usb_isr+0x4da>
    a2ea:	cmp.w	r1, #2176	; 0x880
    a2ee:	beq.w	a7de <usb_isr+0x81e>
    a2f2:	cmp.w	r1, #2304	; 0x900
    a2f6:	bne.w	a72a <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    a2fa:	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    a2fc:	ldr	r1, [pc, #716]	; (a5cc <usb_isr+0x60c>)
    a2fe:	ldrb	r0, [r5, #2]
    a300:	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    a302:	lsls	r2, r2, #24
    a304:	bmi.w	a976 <usb_isr+0x9b6>
    a308:	ldr.w	r2, [r9, #40]	; 0x28
    a30c:	ldr	r1, [pc, #704]	; (a5d0 <usb_isr+0x610>)
    a30e:	lsls	r3, r2, #24
    a310:	bmi.w	a96c <usb_isr+0x9ac>
    a314:	ldr.w	r2, [r9, #48]	; 0x30
    a318:	ldr	r1, [pc, #692]	; (a5d0 <usb_isr+0x610>)
    a31a:	lsls	r5, r2, #24
    a31c:	bmi.w	a91e <usb_isr+0x95e>
    a320:	ldr.w	r2, [r9, #56]	; 0x38
    a324:	ldr	r1, [pc, #680]	; (a5d0 <usb_isr+0x610>)
    a326:	lsls	r4, r2, #24
    a328:	bmi.w	a914 <usb_isr+0x954>
    a32c:	ldr.w	r2, [r9, #64]	; 0x40
    a330:	ldr	r1, [pc, #668]	; (a5d0 <usb_isr+0x610>)
    a332:	lsls	r0, r2, #24
    a334:	bmi.w	a9c6 <usb_isr+0xa06>
    a338:	ldr.w	r2, [r9, #72]	; 0x48
    a33c:	ldr	r1, [pc, #656]	; (a5d0 <usb_isr+0x610>)
    a33e:	lsls	r2, r2, #24
    a340:	bmi.w	a9bc <usb_isr+0x9fc>
    a344:	ldr.w	r2, [r9, #80]	; 0x50
    a348:	ldr	r1, [pc, #644]	; (a5d0 <usb_isr+0x610>)
    a34a:	lsls	r3, r2, #24
    a34c:	bmi.w	a9b2 <usb_isr+0x9f2>
    a350:	ldr.w	r2, [r9, #88]	; 0x58
    a354:	ldr	r1, [pc, #632]	; (a5d0 <usb_isr+0x610>)
    a356:	lsls	r5, r2, #24
    a358:	bmi.w	a9a8 <usb_isr+0x9e8>
    a35c:	ldr.w	r2, [r9, #96]	; 0x60
    a360:	ldr	r1, [pc, #620]	; (a5d0 <usb_isr+0x610>)
    a362:	lsls	r4, r2, #24
    a364:	bmi.w	a99e <usb_isr+0x9de>
    a368:	ldr.w	r2, [r9, #104]	; 0x68
    a36c:	ldr	r1, [pc, #608]	; (a5d0 <usb_isr+0x610>)
    a36e:	lsls	r0, r2, #24
    a370:	bmi.w	a994 <usb_isr+0x9d4>
    a374:	ldr.w	r2, [r9, #112]	; 0x70
    a378:	ldr	r1, [pc, #596]	; (a5d0 <usb_isr+0x610>)
    a37a:	lsls	r2, r2, #24
    a37c:	bmi.w	a98a <usb_isr+0x9ca>
    a380:	ldr.w	r2, [r9, #120]	; 0x78
    a384:	ldr	r1, [pc, #584]	; (a5d0 <usb_isr+0x610>)
    a386:	lsls	r3, r2, #24
    a388:	bmi.w	a980 <usb_isr+0x9c0>
    a38c:	ldr.w	r2, [r9, #128]	; 0x80
    a390:	ldr	r1, [pc, #572]	; (a5d0 <usb_isr+0x610>)
    a392:	lsls	r5, r2, #24
    a394:	bmi.w	a9f4 <usb_isr+0xa34>
    a398:	ldr.w	r2, [r9, #136]	; 0x88
    a39c:	ldr	r1, [pc, #560]	; (a5d0 <usb_isr+0x610>)
    a39e:	lsls	r4, r2, #24
    a3a0:	bmi.w	a9e8 <usb_isr+0xa28>
    a3a4:	ldr.w	r2, [r9, #144]	; 0x90
    a3a8:	ldr	r1, [pc, #548]	; (a5d0 <usb_isr+0x610>)
    a3aa:	lsls	r0, r2, #24
    a3ac:	bmi.w	a9dc <usb_isr+0xa1c>
    a3b0:	ldr.w	r2, [r9, #152]	; 0x98
    a3b4:	ldr	r1, [pc, #536]	; (a5d0 <usb_isr+0x610>)
    a3b6:	lsls	r2, r2, #24
    a3b8:	bmi.w	a9d0 <usb_isr+0xa10>
    a3bc:	ldr	r0, [pc, #532]	; (a5d4 <usb_isr+0x614>)
    a3be:	ldr	r2, [pc, #536]	; (a5d8 <usb_isr+0x618>)
    a3c0:	ldr	r1, [pc, #536]	; (a5dc <usb_isr+0x61c>)
    a3c2:	str	r0, [sp, #4]
    a3c4:	ldr	r0, [pc, #536]	; (a5e0 <usb_isr+0x620>)
    a3c6:	ldr	r4, [pc, #540]	; (a5e4 <usb_isr+0x624>)
    a3c8:	ldr	r5, [pc, #540]	; (a5e8 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a3ca:	str	r4, [sp, #8]
}



void usb_isr(void)
{
    a3cc:	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a3ce:	str	r7, [sp, #16]
    a3d0:	str	r6, [sp, #20]
    a3d2:	mov	r8, r0
    a3d4:	mov	r4, r3
    a3d6:	mov	r7, r1
    a3d8:	mov	r6, r2
    a3da:	str	r5, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    a3dc:	ldr	r0, [r6, #0]
			while (p) {
    a3de:	cbz	r0, a3ec <usb_isr+0x42c>
				n = p->next;
    a3e0:	ldr	r5, [r0, #4]
				usb_free(p);
    a3e2:	bl	9dc0 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    a3e6:	mov	r0, r5
    a3e8:	cmp	r5, #0
    a3ea:	bne.n	a3e0 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    a3ec:	movs	r3, #0
    a3ee:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    a3f0:	ldr	r3, [sp, #12]
			p = tx_first[i];
    a3f2:	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    a3f4:	mov	r2, r3
    a3f6:	movs	r3, #0
    a3f8:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    a3fc:	cbz	r0, a40a <usb_isr+0x44a>
				n = p->next;
    a3fe:	ldr	r5, [r0, #4]
				usb_free(p);
    a400:	bl	9dc0 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    a404:	mov	r0, r5
    a406:	cmp	r5, #0
    a408:	bne.n	a3fe <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    a40a:	movs	r2, #0
    a40c:	str	r2, [r7, #0]
			tx_last[i] = NULL;
    a40e:	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    a410:	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    a414:	mov	r1, r2
    a416:	movs	r2, #0
    a418:	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    a41c:	ldr	r2, [sp, #8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    a41e:	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    a420:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    a422:	mov.w	r1, #0
    a426:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    a42a:	cmp	r3, #3
    a42c:	bhi.w	a686 <usb_isr+0x6c6>
    a430:	tbh	[pc, r3, lsl #1]
    a434:	.word	0x01250170
    a438:	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    a43c:	cmp.w	lr, #64	; 0x40
    a440:	it	ne
    a442:	movne	r2, #0
    a444:	b.n	a1b2 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    a446:	ldr	r2, [pc, #420]	; (a5ec <usb_isr+0x62c>)
    a448:	ldrb	r5, [r1, #0]
    a44a:	ldrb	r0, [r1, #1]
    a44c:	strb	r5, [r2, #0]
    a44e:	strb	r0, [r2, #1]
    a450:	ldrb	r5, [r1, #2]
    a452:	ldrb	r0, [r1, #3]
    a454:	strb	r5, [r2, #2]
    a456:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    a458:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    a45a:	ldrb	r5, [r1, #4]
    a45c:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    a45e:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    a460:	ldrb	r5, [r1, #5]
    a462:	ldrb	r1, [r1, #6]
    a464:	strb	r5, [r2, #5]
    a466:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    a468:	beq.w	a7a2 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a46c:	ldr	r1, [pc, #384]	; (a5f0 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a46e:	ldr	r6, [pc, #388]	; (a5f4 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a470:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a472:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a474:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a478:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a47a:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a47e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a480:	ite	eq
    a482:	moveq	r1, #136	; 0x88
    a484:	movne	r1, #200	; 0xc8
    a486:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a48a:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a48e:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a492:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a494:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a496:	str	r1, [r2, #4]
    a498:	b.n	a1d8 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a49a:	movw	r0, #8737	; 0x2221
    a49e:	cmp	r1, r0
    a4a0:	bne.w	a83a <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a4a4:	ldr	r3, [pc, #336]	; (a5f8 <usb_isr+0x638>)
    a4a6:	ldr	r4, [pc, #340]	; (a5fc <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    a4a8:	ldr	r1, [pc, #340]	; (a600 <usb_isr+0x640>)
    a4aa:	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a4ac:	ldr	r5, [r3, #0]
    a4ae:	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    a4b0:	str.w	lr, [sp, #4]
    a4b4:	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a4b6:	movs	r0, #0
    a4b8:	str	r0, [sp, #8]
    a4ba:	mov	r8, r0
    a4bc:	mov	ip, r0
    a4be:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a4c0:	ldr	r1, [pc, #300]	; (a5f0 <usb_isr+0x630>)
    a4c2:	ldrb	r5, [r1, #0]
    a4c4:	orr.w	lr, r5, #2
    a4c8:	add.w	r3, r9, lr, lsl #3
    a4cc:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a4ce:	ldr	r3, [sp, #4]
    a4d0:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a4d2:	ldr	r3, [sp, #12]
    a4d4:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a4d6:	ite	eq
    a4d8:	moveq	r4, #136	; 0x88
    a4da:	movne	r4, #200	; 0xc8
    a4dc:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a4e0:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a4e4:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    a4e8:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    a4ea:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a4ec:	ldr.w	lr, [pc, #224]	; a5d0 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    a4f0:	ldr	r3, [pc, #256]	; (a5f4 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    a4f2:	ldr.w	r8, [pc, #252]	; a5f0 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    a4f6:	cmp	r0, #0
    a4f8:	bne.w	a738 <usb_isr+0x778>
    a4fc:	cmp.w	ip, #64	; 0x40
    a500:	bne.n	a53a <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a502:	orr.w	ip, r4, #2
    a506:	add.w	r3, r9, ip, lsl #3
    a50a:	ldr	r4, [sp, #8]
    a50c:	ldr.w	lr, [pc, #192]	; a5d0 <usb_isr+0x610>
    a510:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a512:	cmp	r2, #0
    a514:	bne.w	a764 <usb_isr+0x7a4>
    a518:	lsls	r2, r0, #16
    a51a:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    a51e:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a522:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a526:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a528:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    a52a:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a52c:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    a52e:	cmp	r0, #64	; 0x40
    a530:	bne.n	a53a <usb_isr+0x57a>
    a532:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    a534:	ldr	r2, [pc, #204]	; (a604 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    a536:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    a538:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a53a:	ldr	r2, [pc, #204]	; (a608 <usb_isr+0x648>)
    a53c:	movs	r3, #1
    a53e:	strb	r3, [r2, #0]
    a540:	b.n	a1de <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    a542:	bl	9864 <usb_serial_flush_callback>
    a546:	b.n	a094 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    a548:	ldr	r3, [pc, #132]	; (a5d0 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    a54a:	ldr	r0, [pc, #188]	; (a608 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    a54c:	ldr	r1, [pc, #160]	; (a5f0 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    a54e:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    a550:	mov.w	lr, #2
    a554:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a558:	ldr	r7, [pc, #176]	; (a60c <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    a55a:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    a55c:	ldr	r1, [pc, #176]	; (a610 <usb_isr+0x650>)
    a55e:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    a560:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    a562:	ldr	r6, [pc, #176]	; (a614 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    a564:	ldr	r5, [pc, #176]	; (a618 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    a566:	ldr	r4, [pc, #180]	; (a61c <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    a568:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a56a:	movs	r1, #13
    a56c:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    a56e:	movs	r1, #255	; 0xff
    a570:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    a572:	ldr.w	lr, [pc, #184]	; a62c <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    a576:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    a578:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    a57a:	ldr	r5, [pc, #164]	; (a620 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    a57c:	ldr	r2, [pc, #164]	; (a624 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    a57e:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    a582:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    a584:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    a586:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    a58a:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    a58c:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    a58e:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    a590:	add	sp, #28
    a592:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    a596:	ldr	r2, [pc, #144]	; (a628 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    a598:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    a59c:	ldrb	r3, [r2, #0]
    a59e:	adds	r3, #1
    a5a0:	strb	r3, [r2, #0]
    a5a2:	b.n	a054 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    a5a4:	str.w	r0, [r3, r6, lsl #2]
    a5a8:	ldr	r5, [pc, #60]	; (a5e8 <usb_isr+0x628>)
    a5aa:	b.n	a022 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    a5ac:	ldrb	r3, [r1, r6]
    a5ae:	cmp	r3, #3
    a5b0:	bhi.w	a794 <usb_isr+0x7d4>
    a5b4:	add	r2, pc, #4	; (adr r2, a5bc <usb_isr+0x5fc>)
    a5b6:	ldr.w	pc, [r2, r3, lsl #2]
    a5ba:	nop
    a5bc:	.word	0x0000a055
    a5c0:	.word	0x0000a055
    a5c4:	.word	0x0000a679
    a5c8:	.word	0x0000a673
    a5cc:	.word	0x200204a4
    a5d0:	.word	0x1fff0000
    a5d4:	.word	0x20020480
    a5d8:	.word	0x2002041c
    a5dc:	.word	0x20020470
    a5e0:	.word	0x200204a8
    a5e4:	.word	0x20020538
    a5e8:	.word	0x200203c8
    a5ec:	.word	0x2002052c
    a5f0:	.word	0x20020498
    a5f4:	.word	0x2002042c
    a5f8:	.word	0x200203c0
    a5fc:	.word	0x20020534
    a600:	.word	0x200203bc
    a604:	.word	0x200203d8
    a608:	.word	0x40072094
    a60c:	.word	0x400720c0
    a610:	.word	0x00400088
    a614:	.word	0x40072088
    a618:	.word	0x40072080
    a61c:	.word	0x40072098
    a620:	.word	0x200203dc
    a624:	.word	0x20020430
    a628:	.word	0x20020499
    a62c:	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a630:	ldr	r1, [pc, #756]	; (a928 <usb_isr+0x968>)
		USB0_ISTAT = USB_ISTAT_STALL;
    a632:	ldr	r3, [pc, #760]	; (a92c <usb_isr+0x96c>)
    a634:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a636:	movs	r0, #13
    a638:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    a63a:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    a63c:	lsls	r2, r4, #30
    a63e:	bpl.w	a25e <usb_isr+0x29e>
    a642:	b.n	a250 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a644:	movw	r2, #770	; 0x302
    a648:	cmp	r1, r2
    a64a:	bne.w	a82a <usb_isr+0x86a>
    a64e:	ldrh	r1, [r5, #4]
    a650:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a654:	cmp	r1, #4
    a656:	bhi.n	a72a <usb_isr+0x76a>
    a658:	ldrh	r2, [r5, #2]
    a65a:	cmp	r2, #0
    a65c:	bne.n	a72a <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    a65e:	ldr	r0, [pc, #712]	; (a928 <usb_isr+0x968>)
    a660:	str.w	lr, [sp, #4]
    a664:	lsls	r1, r1, #2
    a666:	add	r0, r1
    a668:	ldrb	r1, [r0, #0]
    a66a:	orr.w	r1, r1, #2
    a66e:	strb	r1, [r0, #0]
    a670:	b.n	a4b6 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a672:	movs	r3, #1
    a674:	strb	r3, [r1, r6]
						break;
    a676:	b.n	a054 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    a678:	movs	r3, #0
    a67a:	strb	r3, [r1, r6]
						break;
    a67c:	b.n	a054 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a67e:	mov.w	r3, #1
    a682:	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    a686:	adds	r4, #1
    a688:	cmp	r4, #4
    a68a:	add.w	r6, r6, #4
    a68e:	add.w	r7, r7, #4
    a692:	add.w	r8, r8, #1
    a696:	bne.w	a3dc <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a69a:	ldr	r4, [pc, #660]	; (a930 <usb_isr+0x970>)
			*reg = epconf;
    a69c:	ldr	r3, [pc, #660]	; (a934 <usb_isr+0x974>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a69e:	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    a6a0:	ldr	r5, [pc, #660]	; (a938 <usb_isr+0x978>)
    a6a2:	ldr	r7, [sp, #16]
    a6a4:	ldr	r6, [sp, #20]
    a6a6:	movs	r1, #0
    a6a8:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a6aa:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a6ac:	lsls	r3, r2, #28
    a6ae:	bmi.w	a8bc <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a6b2:	ldrb	r2, [r4, #1]
			*reg = epconf;
    a6b4:	ldr	r1, [pc, #644]	; (a93c <usb_isr+0x97c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a6b6:	ldr.w	r8, [pc, #656]	; a948 <usb_isr+0x988>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a6ba:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a6bc:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a6be:	mov.w	r1, #0
    a6c2:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    a6c6:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a6ca:	bmi.w	a890 <usb_isr+0x8d0>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a6ce:	ldr	r1, [pc, #624]	; (a940 <usb_isr+0x980>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a6d0:	ldrb	r2, [r4, #2]
			*reg = epconf;
    a6d2:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a6d4:	movs	r1, #0
    a6d6:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    a6da:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a6de:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a6e0:	ldr.w	r8, [pc, #612]	; a948 <usb_isr+0x988>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a6e4:	bmi.w	a8e8 <usb_isr+0x928>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a6e8:	ldrb	r2, [r4, #3]
			*reg = epconf;
    a6ea:	ldr	r1, [pc, #600]	; (a944 <usb_isr+0x984>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a6ec:	ldr	r4, [pc, #600]	; (a948 <usb_isr+0x988>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a6ee:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a6f0:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a6f2:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a6f4:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    a6f8:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a6fc:	bmi.w	a860 <usb_isr+0x8a0>
    a700:	ldrb	r3, [r6, #0]
    a702:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a704:	movs	r1, #0
    a706:	eor.w	r2, r3, #1
    a70a:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    a70e:	str.w	r1, [r9, #152]	; 0x98
    a712:	b.n	a4b6 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    a714:	mov.w	r3, #0
    a718:	strb.w	r3, [r8]
    a71c:	b.n	a686 <usb_isr+0x6c6>
    a71e:	ldrh	r1, [r5, #4]
    a720:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a724:	cmp	r1, #4
    a726:	bls.w	a844 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a72a:	ldr	r2, [pc, #508]	; (a928 <usb_isr+0x968>)
    a72c:	movs	r3, #15
    a72e:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a730:	ldr	r2, [pc, #536]	; (a94c <usb_isr+0x98c>)
    a732:	movs	r3, #1
    a734:	strb	r3, [r2, #0]
    a736:	b.n	a1de <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    a738:	cmp	r0, #64	; 0x40
    a73a:	bls.w	a502 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a73e:	orr.w	r4, r4, #2
    a742:	add.w	r1, lr, r4, lsl #3
    a746:	ldr	r6, [sp, #8]
    a748:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a74a:	cbz	r2, a77c <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    a74c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a750:	ldr	r2, [pc, #508]	; (a950 <usb_isr+0x990>)
	ep0_tx_data_toggle ^= 1;
    a752:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a754:	mov	r3, r6
    a756:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a758:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a75c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a75e:	str.w	r2, [lr, r4, lsl #3]
    a762:	b.n	a534 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    a764:	ldrb.w	r3, [sp, #4]
    a768:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a76a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a76c:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a76e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a770:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a774:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a776:	str.w	r2, [lr, ip, lsl #3]
    a77a:	b.n	a52e <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    a77c:	ldrb.w	r1, [sp, #4]
    a780:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a782:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a784:	ldr	r2, [pc, #460]	; (a954 <usb_isr+0x994>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a786:	strb.w	r5, [r8]
    a78a:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a78c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a78e:	str.w	r2, [lr, r4, lsl #3]
    a792:	b.n	a534 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    a794:	tst.w	r9, #8
    a798:	ite	eq
    a79a:	moveq	r3, #2
    a79c:	movne	r3, #3
    a79e:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    a7a0:	b.n	a054 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    a7a2:	ldr	r2, [pc, #436]	; (a958 <usb_isr+0x998>)
    a7a4:	movs	r1, #15
    a7a6:	strb	r1, [r2, #0]
    a7a8:	b.n	a46c <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    a7aa:	ldr	r2, [pc, #432]	; (a95c <usb_isr+0x99c>)
    a7ac:	ldr	r4, [r2, #4]
    a7ae:	cmp	r4, #0
    a7b0:	beq.n	a72a <usb_isr+0x76a>
    a7b2:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a7b4:	ldrh.w	lr, [r5, #4]
    a7b8:	b.n	a7c2 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    a7ba:	adds	r2, #12
			if (list->addr == NULL) break;
    a7bc:	ldr	r4, [r2, #4]
    a7be:	cmp	r4, #0
    a7c0:	beq.n	a72a <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a7c2:	ldrh	r3, [r2, #0]
    a7c4:	cmp	r3, r0
    a7c6:	bne.n	a7ba <usb_isr+0x7fa>
    a7c8:	ldrh	r3, [r2, #2]
    a7ca:	cmp	r3, lr
    a7cc:	bne.n	a7ba <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    a7ce:	lsrs	r0, r0, #8
    a7d0:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    a7d2:	ite	eq
    a7d4:	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    a7d8:	ldrhne.w	lr, [r2, #8]
    a7dc:	b.n	a7e6 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a7de:	ldr	r2, [pc, #384]	; (a960 <usb_isr+0x9a0>)
    a7e0:	ldr	r4, [pc, #384]	; (a964 <usb_isr+0x9a4>)
    a7e2:	ldrb	r2, [r2, #0]
    a7e4:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a7e6:	ldrh	r0, [r5, #6]
    a7e8:	cmp	r0, lr
    a7ea:	bcs.w	aa50 <usb_isr+0xa90>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a7ee:	ldr	r1, [pc, #376]	; (a968 <usb_isr+0x9a8>)
    a7f0:	ldrb	r5, [r1, #0]
    a7f2:	cmp	r0, #64	; 0x40
    a7f4:	mov	ip, r0
    a7f6:	orr.w	lr, r5, #2
    a7fa:	it	cs
    a7fc:	movcs.w	ip, #64	; 0x40
    a800:	add.w	r3, r4, ip
    a804:	add.w	r2, r9, lr, lsl #3
    a808:	str	r3, [sp, #8]
    a80a:	movs	r3, #1
    a80c:	str	r4, [r2, #4]
    a80e:	rsb	r0, ip, r0
    a812:	mov.w	r8, ip, lsl #16
    a816:	movs	r2, #0
    a818:	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a81a:	movs	r4, #200	; 0xc8
    a81c:	b.n	a4dc <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a81e:	ldr	r4, [pc, #324]	; (a964 <usb_isr+0x9a4>)
		reply_buffer[1] = 0;
		datalen = 2;
    a820:	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a824:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a826:	strb	r2, [r4, #1]
    a828:	b.n	a7e6 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a82a:	cmp.w	r1, #1280	; 0x500
    a82e:	bne.w	a72a <usb_isr+0x76a>
    a832:	movs	r3, #1
    a834:	movs	r2, #0
    a836:	str	r3, [sp, #4]
    a838:	b.n	a4b6 <usb_isr+0x4f6>
    a83a:	movw	r2, #8993	; 0x2321
    a83e:	cmp	r1, r2
    a840:	beq.n	a832 <usb_isr+0x872>
    a842:	b.n	a72a <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a844:	ldrh	r2, [r5, #2]
    a846:	cmp	r2, #0
    a848:	bne.w	a72a <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    a84c:	ldr	r0, [pc, #216]	; (a928 <usb_isr+0x968>)
    a84e:	str.w	lr, [sp, #4]
    a852:	lsls	r1, r1, #2
    a854:	add	r0, r1
    a856:	ldrb	r1, [r0, #0]
    a858:	bic.w	r1, r1, #2
    a85c:	strb	r1, [r0, #0]
    a85e:	b.n	a4b6 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a860:	bl	9d80 <usb_malloc>
				if (p) {
    a864:	cmp	r0, #0
    a866:	beq.w	aa36 <usb_isr+0xa76>
					table[index(i, RX, EVEN)].addr = p->buf;
    a86a:	adds	r0, #8
    a86c:	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a870:	ldr	r0, [pc, #224]	; (a954 <usb_isr+0x994>)
    a872:	str.w	r0, [r9, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a876:	bl	9d80 <usb_malloc>
    a87a:	ldr	r2, [pc, #204]	; (a948 <usb_isr+0x988>)
				if (p) {
    a87c:	cmp	r0, #0
    a87e:	beq.w	aa2a <usb_isr+0xa6a>
					table[index(i, RX, ODD)].addr = p->buf;
    a882:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a884:	ldr	r1, [pc, #200]	; (a950 <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a886:	str.w	r0, [r2, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a88a:	str.w	r1, [r2, #136]	; 0x88
    a88e:	b.n	a700 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a890:	bl	9d80 <usb_malloc>
				if (p) {
    a894:	cmp	r0, #0
    a896:	beq.w	aa10 <usb_isr+0xa50>
					table[index(i, RX, EVEN)].addr = p->buf;
    a89a:	adds	r0, #8
    a89c:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a8a0:	ldr	r0, [pc, #176]	; (a954 <usb_isr+0x994>)
    a8a2:	str.w	r0, [r9, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a8a6:	bl	9d80 <usb_malloc>
    a8aa:	ldr	r2, [pc, #156]	; (a948 <usb_isr+0x988>)
				if (p) {
    a8ac:	cmp	r0, #0
    a8ae:	beq.w	aa06 <usb_isr+0xa46>
					table[index(i, RX, ODD)].addr = p->buf;
    a8b2:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a8b4:	ldr	r1, [pc, #152]	; (a950 <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a8b6:	str	r0, [r2, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a8b8:	str	r1, [r2, #72]	; 0x48
    a8ba:	b.n	a6ce <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a8bc:	bl	9d80 <usb_malloc>
				if (p) {
    a8c0:	cmp	r0, #0
    a8c2:	beq.w	aa48 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    a8c6:	adds	r0, #8
    a8c8:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a8cc:	ldr	r0, [pc, #132]	; (a954 <usb_isr+0x994>)
    a8ce:	str.w	r0, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a8d2:	bl	9d80 <usb_malloc>
    a8d6:	ldr	r2, [pc, #112]	; (a948 <usb_isr+0x988>)
				if (p) {
    a8d8:	cmp	r0, #0
    a8da:	beq.w	aa3e <usb_isr+0xa7e>
					table[index(i, RX, ODD)].addr = p->buf;
    a8de:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a8e0:	ldr	r1, [pc, #108]	; (a950 <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a8e2:	str	r0, [r2, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a8e4:	str	r1, [r2, #40]	; 0x28
    a8e6:	b.n	a6b2 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a8e8:	bl	9d80 <usb_malloc>
				if (p) {
    a8ec:	cmp	r0, #0
    a8ee:	beq.w	aa22 <usb_isr+0xa62>
					table[index(i, RX, EVEN)].addr = p->buf;
    a8f2:	adds	r0, #8
    a8f4:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a8f8:	ldr	r0, [pc, #88]	; (a954 <usb_isr+0x994>)
    a8fa:	str.w	r0, [r9, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a8fe:	bl	9d80 <usb_malloc>
    a902:	ldr	r2, [pc, #68]	; (a948 <usb_isr+0x988>)
				if (p) {
    a904:	cmp	r0, #0
    a906:	beq.w	aa18 <usb_isr+0xa58>
					table[index(i, RX, ODD)].addr = p->buf;
    a90a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a90c:	ldr	r1, [pc, #64]	; (a950 <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a90e:	str	r0, [r2, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a910:	str	r1, [r2, #104]	; 0x68
    a912:	b.n	a6e8 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    a914:	ldr	r0, [r1, #60]	; 0x3c
    a916:	subs	r0, #8
    a918:	bl	9dc0 <usb_free>
    a91c:	b.n	a32c <usb_isr+0x36c>
    a91e:	ldr	r0, [r1, #52]	; 0x34
    a920:	subs	r0, #8
    a922:	bl	9dc0 <usb_free>
    a926:	b.n	a320 <usb_isr+0x360>
    a928:	.word	0x400720c0
    a92c:	.word	0x40072080
    a930:	.word	0x00014004
    a934:	.word	0x400720c4
    a938:	.word	0x20020499
    a93c:	.word	0x400720c8
    a940:	.word	0x400720cc
    a944:	.word	0x400720d0
    a948:	.word	0x1fff0000
    a94c:	.word	0x40072094
    a950:	.word	0x004000c8
    a954:	.word	0x00400088
    a958:	.word	0x2002042d
    a95c:	.word	0x00014008
    a960:	.word	0x200204a4
    a964:	.word	0x2002049c
    a968:	.word	0x20020498
    a96c:	ldr	r0, [r1, #44]	; 0x2c
    a96e:	subs	r0, #8
    a970:	bl	9dc0 <usb_free>
    a974:	b.n	a314 <usb_isr+0x354>
    a976:	ldr	r0, [r4, #36]	; 0x24
    a978:	subs	r0, #8
    a97a:	bl	9dc0 <usb_free>
    a97e:	b.n	a308 <usb_isr+0x348>
    a980:	ldr	r0, [r1, #124]	; 0x7c
    a982:	subs	r0, #8
    a984:	bl	9dc0 <usb_free>
    a988:	b.n	a38c <usb_isr+0x3cc>
    a98a:	ldr	r0, [r1, #116]	; 0x74
    a98c:	subs	r0, #8
    a98e:	bl	9dc0 <usb_free>
    a992:	b.n	a380 <usb_isr+0x3c0>
    a994:	ldr	r0, [r1, #108]	; 0x6c
    a996:	subs	r0, #8
    a998:	bl	9dc0 <usb_free>
    a99c:	b.n	a374 <usb_isr+0x3b4>
    a99e:	ldr	r0, [r1, #100]	; 0x64
    a9a0:	subs	r0, #8
    a9a2:	bl	9dc0 <usb_free>
    a9a6:	b.n	a368 <usb_isr+0x3a8>
    a9a8:	ldr	r0, [r1, #92]	; 0x5c
    a9aa:	subs	r0, #8
    a9ac:	bl	9dc0 <usb_free>
    a9b0:	b.n	a35c <usb_isr+0x39c>
    a9b2:	ldr	r0, [r1, #84]	; 0x54
    a9b4:	subs	r0, #8
    a9b6:	bl	9dc0 <usb_free>
    a9ba:	b.n	a350 <usb_isr+0x390>
    a9bc:	ldr	r0, [r1, #76]	; 0x4c
    a9be:	subs	r0, #8
    a9c0:	bl	9dc0 <usb_free>
    a9c4:	b.n	a344 <usb_isr+0x384>
    a9c6:	ldr	r0, [r1, #68]	; 0x44
    a9c8:	subs	r0, #8
    a9ca:	bl	9dc0 <usb_free>
    a9ce:	b.n	a338 <usb_isr+0x378>
    a9d0:	ldr.w	r0, [r1, #156]	; 0x9c
    a9d4:	subs	r0, #8
    a9d6:	bl	9dc0 <usb_free>
    a9da:	b.n	a3bc <usb_isr+0x3fc>
    a9dc:	ldr.w	r0, [r1, #148]	; 0x94
    a9e0:	subs	r0, #8
    a9e2:	bl	9dc0 <usb_free>
    a9e6:	b.n	a3b0 <usb_isr+0x3f0>
    a9e8:	ldr.w	r0, [r1, #140]	; 0x8c
    a9ec:	subs	r0, #8
    a9ee:	bl	9dc0 <usb_free>
    a9f2:	b.n	a3a4 <usb_isr+0x3e4>
    a9f4:	ldr.w	r0, [r1, #132]	; 0x84
    a9f8:	subs	r0, #8
    a9fa:	bl	9dc0 <usb_free>
    a9fe:	b.n	a398 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    aa00:	mov.w	lr, #2
    aa04:	b.n	a7e6 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    aa06:	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    aa08:	str	r0, [r2, #72]	; 0x48
					usb_rx_memory_needed++;
    aa0a:	adds	r2, r1, #1
    aa0c:	strb	r2, [r5, #0]
    aa0e:	b.n	a6ce <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    aa10:	ldrb	r2, [r5, #0]
    aa12:	adds	r2, #1
    aa14:	strb	r2, [r5, #0]
    aa16:	b.n	a8a2 <usb_isr+0x8e2>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    aa18:	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    aa1a:	str	r0, [r2, #104]	; 0x68
					usb_rx_memory_needed++;
    aa1c:	adds	r2, r1, #1
    aa1e:	strb	r2, [r5, #0]
    aa20:	b.n	a6e8 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    aa22:	ldrb	r2, [r5, #0]
    aa24:	adds	r2, #1
    aa26:	strb	r2, [r5, #0]
    aa28:	b.n	a8fa <usb_isr+0x93a>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    aa2a:	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    aa2c:	str.w	r0, [r2, #136]	; 0x88
					usb_rx_memory_needed++;
    aa30:	adds	r2, r1, #1
    aa32:	strb	r2, [r5, #0]
    aa34:	b.n	a700 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    aa36:	ldrb	r2, [r5, #0]
    aa38:	adds	r2, #1
    aa3a:	strb	r2, [r5, #0]
    aa3c:	b.n	a872 <usb_isr+0x8b2>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    aa3e:	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    aa40:	str	r0, [r2, #40]	; 0x28
					usb_rx_memory_needed++;
    aa42:	adds	r2, r1, #1
    aa44:	strb	r2, [r5, #0]
    aa46:	b.n	a6b2 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    aa48:	ldrb	r2, [r5, #0]
    aa4a:	adds	r2, #1
    aa4c:	strb	r2, [r5, #0]
    aa4e:	b.n	a8ce <usb_isr+0x90e>
    aa50:	cmp.w	lr, #64	; 0x40
    aa54:	mov	ip, lr
    aa56:	it	cs
    aa58:	movcs.w	ip, #64	; 0x40
    aa5c:	add.w	r3, r4, ip
    aa60:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    aa62:	movs	r3, #1
    aa64:	rsb	r0, ip, lr
    aa68:	mov.w	r8, ip, lsl #16
    aa6c:	movs	r2, #0
    aa6e:	str	r3, [sp, #4]
    aa70:	b.n	a4c0 <usb_isr+0x500>
    aa72:	nop

0000aa74 <usb_init>:
}



void usb_init(void)
{
    aa74:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    aa78:	bl	b26c <usb_init_serialnumber>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    aa7c:	ldr	r4, [pc, #188]	; (ab3c <usb_init+0xc8>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aa7e:	ldr	r3, [pc, #192]	; (ab40 <usb_init+0xcc>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    aa80:	ldr	r0, [pc, #192]	; (ab44 <usb_init+0xd0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    aa82:	ldr.w	r8, [pc, #216]	; ab5c <usb_init+0xe8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    aa86:	ldr	r7, [pc, #192]	; (ab48 <usb_init+0xd4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    aa88:	ldr	r5, [pc, #192]	; (ab4c <usb_init+0xd8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    aa8a:	ldr	r6, [pc, #196]	; (ab50 <usb_init+0xdc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    aa8c:	ldr.w	ip, [pc, #208]	; ab60 <usb_init+0xec>
	USB0_ERRSTAT = 0xFF;
    aa90:	ldr.w	lr, [pc, #208]	; ab64 <usb_init+0xf0>
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aa94:	movs	r2, #0
    aa96:	str	r2, [r3, #0]
		table[i].addr = 0;
    aa98:	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aa9a:	str	r2, [r3, #8]
		table[i].addr = 0;
    aa9c:	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aa9e:	str	r2, [r3, #16]
		table[i].addr = 0;
    aaa0:	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aaa2:	str	r2, [r3, #24]
		table[i].addr = 0;
    aaa4:	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aaa6:	str	r2, [r3, #32]
		table[i].addr = 0;
    aaa8:	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aaaa:	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    aaac:	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aaae:	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    aab0:	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aab2:	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    aab4:	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aab6:	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    aab8:	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aaba:	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    aabc:	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aabe:	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    aac0:	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aac2:	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    aac4:	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aac6:	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    aac8:	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aaca:	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    aacc:	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aace:	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    aad0:	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aad2:	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    aad4:	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    aad6:	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    aada:	ldr	r1, [r4, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    aadc:	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    aae0:	orr.w	r1, r1, #262144	; 0x40000
    aae4:	str	r1, [r4, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    aae6:	ldr	r1, [r0, #0]
    aae8:	orr.w	r1, r1, #50331648	; 0x3000000
    aaec:	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    aaee:	ubfx	r1, r3, #8, #8
    aaf2:	strb.w	r1, [r8]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    aaf6:	add.w	r4, r4, #172032	; 0x2a000
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    aafa:	ubfx	r1, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    aafe:	lsrs	r3, r3, #24
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    ab00:	strb	r1, [r7, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    ab02:	adds	r4, #204	; 0xcc
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    ab04:	strb	r3, [r5, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    ab06:	add.w	r0, r0, #2684354560	; 0xa0000000
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    ab0a:	movs	r3, #255	; 0xff
    ab0c:	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    ab10:	ldr	r5, [pc, #64]	; (ab54 <usb_init+0xe0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    ab12:	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    ab16:	addw	r0, r0, #2308	; 0x904
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    ab1a:	strb	r3, [r6, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    ab1c:	ldr	r1, [pc, #56]	; (ab58 <usb_init+0xe4>)
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    ab1e:	movs	r3, #1
    ab20:	strb.w	r3, [r8, #-8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    ab24:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    ab26:	strb	r2, [r4, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    ab28:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    ab2c:	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    ab2e:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    ab32:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    ab34:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    ab36:	strb	r2, [r1, #0]
    ab38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab3c:	.word	0x40048034
    ab40:	.word	0x1fff0000
    ab44:	.word	0x4000d800
    ab48:	.word	0x400720b0
    ab4c:	.word	0x400720b4
    ab50:	.word	0x40072010
    ab54:	.word	0xe000e435
    ab58:	.word	0x40072108
    ab5c:	.word	0x4007209c
    ab60:	.word	0x40072080
    ab64:	.word	0x40072088

0000ab68 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    ab68:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ab6a:	mrs	r2, PRIMASK
		__disable_irq();
    ab6e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    ab70:	ldrb	r3, [r0, #29]
    ab72:	cbnz	r3, ab82 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    ab74:	ldrb	r1, [r0, #28]
    ab76:	cmp	r1, #1
    ab78:	beq.n	ab8c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    ab7a:	cmp	r1, #3
    ab7c:	beq.n	aba0 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    ab7e:	movs	r3, #1
    ab80:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ab82:	cbnz	r2, ab86 <EventResponder::triggerEventNotImmediate()+0x1e>
    ab84:	cpsie	i
	}
	enableInterrupts(irq);
}
    ab86:	ldr.w	r4, [sp], #4
    ab8a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    ab8c:	ldr	r4, [pc, #68]	; (abd4 <EventResponder::triggerEventNotImmediate()+0x6c>)
    ab8e:	ldr	r1, [r4, #0]
    ab90:	cbz	r1, abbc <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    ab92:	ldr	r1, [pc, #68]	; (abd8 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    ab94:	str	r3, [r0, #20]
				_prev = lastYield;
    ab96:	ldr	r3, [r1, #0]
    ab98:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    ab9a:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    ab9c:	str	r0, [r3, #20]
    ab9e:	b.n	ab7e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    aba0:	ldr	r4, [pc, #56]	; (abdc <EventResponder::triggerEventNotImmediate()+0x74>)
    aba2:	ldr	r1, [r4, #0]
    aba4:	cbz	r1, abc8 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    aba6:	ldr	r1, [pc, #56]	; (abe0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    aba8:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    abaa:	ldr	r3, [r1, #0]
    abac:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    abae:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    abb0:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    abb2:	ldr	r3, [pc, #48]	; (abe4 <EventResponder::triggerEventNotImmediate()+0x7c>)
    abb4:	mov.w	r1, #268435456	; 0x10000000
    abb8:	str	r1, [r3, #0]
    abba:	b.n	ab7e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    abbc:	ldr	r3, [pc, #24]	; (abd8 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    abbe:	str	r1, [r0, #20]
				_prev = nullptr;
    abc0:	str	r1, [r0, #24]
				firstYield = this;
    abc2:	str	r0, [r4, #0]
				lastYield = this;
    abc4:	str	r0, [r3, #0]
    abc6:	b.n	ab7e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    abc8:	ldr	r3, [pc, #20]	; (abe0 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    abca:	str	r1, [r0, #20]
				_prev = nullptr;
    abcc:	str	r1, [r0, #24]
				firstInterrupt = this;
    abce:	str	r0, [r4, #0]
				lastInterrupt = this;
    abd0:	str	r0, [r3, #0]
    abd2:	b.n	abb2 <EventResponder::triggerEventNotImmediate()+0x4a>
    abd4:	.word	0x200204bc
    abd8:	.word	0x200204b8
    abdc:	.word	0x200204ac
    abe0:	.word	0x200204b0
    abe4:	.word	0xe000ed04

0000abe8 <pendablesrvreq_isr>:
	}
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
    abe8:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    abea:	mrs	r2, PRIMASK
		__disable_irq();
    abee:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    abf0:	ldr	r4, [pc, #48]	; (ac24 <pendablesrvreq_isr+0x3c>)
    abf2:	ldr	r0, [r4, #0]
		if (first) {
    abf4:	cbz	r0, ac18 <pendablesrvreq_isr+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    abf6:	ldr	r6, [pc, #48]	; (ac28 <pendablesrvreq_isr+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    abf8:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    abfa:	ldr	r3, [r0, #20]
    abfc:	str	r3, [r4, #0]
			if (firstInterrupt) {
    abfe:	cbz	r3, ac1e <pendablesrvreq_isr+0x36>
				firstInterrupt->_prev = nullptr;
    ac00:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ac02:	cbnz	r2, ac06 <pendablesrvreq_isr+0x1e>
    ac04:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    ac06:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    ac08:	ldr	r3, [r0, #8]
    ac0a:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ac0c:	mrs	r2, PRIMASK
		__disable_irq();
    ac10:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    ac12:	ldr	r0, [r4, #0]
		if (first) {
    ac14:	cmp	r0, #0
    ac16:	bne.n	abfa <pendablesrvreq_isr+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ac18:	cbnz	r2, ac1c <pendablesrvreq_isr+0x34>
    ac1a:	cpsie	i
    ac1c:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    ac1e:	str	r3, [r6, #0]
    ac20:	b.n	ac02 <pendablesrvreq_isr+0x1a>
    ac22:	nop
    ac24:	.word	0x200204ac
    ac28:	.word	0x200204b0

0000ac2c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    ac2c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	MillisTimer *timer = listActive;
    ac30:	ldr	r6, [pc, #484]	; (ae18 <MillisTimer::runFromTimer()+0x1ec>)
    ac32:	ldr	r4, [r6, #0]
	while (timer) {
    ac34:	cmp	r4, #0
    ac36:	beq.n	ac9c <MillisTimer::runFromTimer()+0x70>
		if (timer->_ms > 0) {
    ac38:	ldr	r3, [r4, #0]
    ac3a:	cmp	r3, #0
    ac3c:	bne.n	ac98 <MillisTimer::runFromTimer()+0x6c>
    ac3e:	ldr.w	r9, [pc, #492]	; ae2c <MillisTimer::runFromTimer()+0x200>
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    ac42:	ldr	r7, [pc, #472]	; (ae1c <MillisTimer::runFromTimer()+0x1f0>)
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    ac44:	ldr.w	r8, [pc, #488]	; ae30 <MillisTimer::runFromTimer()+0x204>
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    ac48:	mov	r5, r3
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    ac4a:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    ac4c:	cbz	r3, ac50 <MillisTimer::runFromTimer()+0x24>
    ac4e:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    ac50:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    ac52:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    ac54:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    ac56:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    ac58:	ldr	r3, [r3, #0]
    ac5a:	cmp	r3, r9
    ac5c:	bne.n	ad34 <MillisTimer::runFromTimer()+0x108>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    ac5e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    ac60:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    ac62:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    ac64:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    ac66:	beq.n	ad3c <MillisTimer::runFromTimer()+0x110>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ac68:	mrs	r2, PRIMASK
		__disable_irq();
    ac6c:	cpsid	i
// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    ac6e:	ldrb	r3, [r0, #29]
    ac70:	cbnz	r3, ac84 <MillisTimer::runFromTimer()+0x58>
		// not already triggered
		if (_type == EventTypeYield) {
    ac72:	ldrb	r1, [r0, #28]
    ac74:	cmp	r1, #1
    ac76:	beq.w	ad9a <MillisTimer::runFromTimer()+0x16e>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    ac7a:	cmp	r1, #3
    ac7c:	beq.w	adb2 <MillisTimer::runFromTimer()+0x186>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    ac80:	movs	r3, #1
    ac82:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ac84:	cbnz	r2, ac88 <MillisTimer::runFromTimer()+0x5c>
    ac86:	cpsie	i
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
			if (timer->_reload) {
    ac88:	ldr	r3, [r4, #4]
    ac8a:	cmp	r3, #0
    ac8c:	bne.n	ad0e <MillisTimer::runFromTimer()+0xe2>
    ac8e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    ac90:	cbz	r4, ac9c <MillisTimer::runFromTimer()+0x70>
		if (timer->_ms > 0) {
    ac92:	ldr	r3, [r4, #0]
    ac94:	cmp	r3, #0
    ac96:	beq.n	ac4a <MillisTimer::runFromTimer()+0x1e>
			timer->_ms--;
    ac98:	subs	r3, #1
    ac9a:	str	r3, [r4, #0]
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ac9c:	mrs	r3, PRIMASK
		__disable_irq();
    aca0:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    aca2:	ldr	r2, [pc, #380]	; (ae20 <MillisTimer::runFromTimer()+0x1f4>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    aca4:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    aca6:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    aca8:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    acaa:	cbnz	r3, acae <MillisTimer::runFromTimer()+0x82>
    acac:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    acae:	cmp	r0, #0
    acb0:	beq.w	ae0e <MillisTimer::runFromTimer()+0x1e2>
    acb4:	mov.w	r8, #0
    acb8:	ldr	r5, [r6, #0]
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    acba:	mov	ip, r8
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    acbc:	mov.w	lr, #2
    acc0:	b.n	ace0 <MillisTimer::runFromTimer()+0xb4>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    acc2:	subs	r3, r1, r3
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    acc4:	str	r5, [r0, #8]
		_prev = nullptr;
    acc6:	str.w	ip, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    acca:	mov	r1, r0
    accc:	str	r3, [r5, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    acce:	str	r0, [r5, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    acd0:	mov.w	r8, #1
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    acd4:	strb.w	lr, [r0, #20]
    acd8:	mov	r5, r1
    acda:	mov	r0, r7
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    acdc:	cmp	r7, #0
    acde:	beq.n	ad84 <MillisTimer::runFromTimer()+0x158>
		MillisTimer *next = waiting->_next;
    ace0:	ldr	r7, [r0, #8]
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    ace2:	cmp	r5, #0
    ace4:	beq.n	ad8e <MillisTimer::runFromTimer()+0x162>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    ace6:	ldr	r3, [r0, #0]
    ace8:	ldr	r1, [r5, #0]
    acea:	cmp	r3, r1
    acec:	bcc.n	acc2 <MillisTimer::runFromTimer()+0x96>
    acee:	mov	r4, r5
    acf0:	b.n	acfa <MillisTimer::runFromTimer()+0xce>
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    acf2:	ldr	r1, [r2, #0]
    acf4:	cmp	r3, r1
    acf6:	mov	r4, r2
    acf8:	bcc.n	ad66 <MillisTimer::runFromTimer()+0x13a>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    acfa:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    acfc:	subs	r3, r3, r1
    acfe:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    ad00:	cmp	r2, #0
    ad02:	bne.n	acf2 <MillisTimer::runFromTimer()+0xc6>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    ad04:	str	r2, [r0, #8]
		_prev = timer;
    ad06:	str	r4, [r0, #12]
		timer->_next = this;
    ad08:	mov	r1, r5
    ad0a:	str	r0, [r4, #8]
    ad0c:	b.n	acd4 <MillisTimer::runFromTimer()+0xa8>
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    ad0e:	ldr	r0, [r6, #0]
    ad10:	ldr	r2, [pc, #260]	; (ae18 <MillisTimer::runFromTimer()+0x1ec>)
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
    ad12:	str	r3, [r4, #0]
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    ad14:	cmp	r0, #0
    ad16:	beq.n	adea <MillisTimer::runFromTimer()+0x1be>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    ad18:	ldr	r1, [r0, #0]
    ad1a:	cmp	r3, r1
    ad1c:	bcs.n	ad42 <MillisTimer::runFromTimer()+0x116>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    ad1e:	subs	r3, r1, r3
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    ad20:	str	r0, [r4, #8]
		_prev = nullptr;
    ad22:	str	r5, [r4, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    ad24:	str	r3, [r0, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    ad26:	str	r4, [r0, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    ad28:	str	r4, [r2, #0]
    ad2a:	mov	r0, r4
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    ad2c:	movs	r3, #2
    ad2e:	strb	r3, [r4, #20]
    ad30:	mov	r4, r0
    ad32:	b.n	ac92 <MillisTimer::runFromTimer()+0x66>
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    ad34:	mov	r2, r4
    ad36:	movs	r1, #0
    ad38:	blx	r3
    ad3a:	b.n	ac88 <MillisTimer::runFromTimer()+0x5c>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    ad3c:	ldr	r3, [r0, #8]
    ad3e:	blx	r3
    ad40:	b.n	ac88 <MillisTimer::runFromTimer()+0x5c>
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    ad42:	mov	lr, r0
    ad44:	b.n	ad4e <MillisTimer::runFromTimer()+0x122>
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    ad46:	ldr	r1, [r2, #0]
    ad48:	cmp	r3, r1
    ad4a:	mov	lr, r2
    ad4c:	bcc.n	adcc <MillisTimer::runFromTimer()+0x1a0>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    ad4e:	ldr.w	r2, [lr, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    ad52:	subs	r3, r3, r1
    ad54:	str	r3, [r4, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    ad56:	cmp	r2, #0
    ad58:	bne.n	ad46 <MillisTimer::runFromTimer()+0x11a>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    ad5a:	str	r2, [r4, #8]
		_prev = timer;
    ad5c:	str.w	lr, [r4, #12]
		timer->_next = this;
    ad60:	str.w	r4, [lr, #8]
    ad64:	b.n	ad2c <MillisTimer::runFromTimer()+0x100>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    ad66:	ldr	r2, [r2, #12]
    ad68:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    ad6a:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    ad6c:	str	r0, [r4, #12]
				_prev->_next = this;
    ad6e:	ldr	r2, [r0, #12]
				timer->_ms -= _ms;
    ad70:	subs	r3, r1, r3
				_state = TimerActive;
    ad72:	mov	r1, r5
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    ad74:	str	r0, [r2, #8]
    ad76:	mov	r5, r1
				timer->_ms -= _ms;
    ad78:	str	r3, [r4, #0]
				_state = TimerActive;
    ad7a:	strb.w	lr, [r0, #20]
    ad7e:	mov	r0, r7
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    ad80:	cmp	r7, #0
    ad82:	bne.n	ace0 <MillisTimer::runFromTimer()+0xb4>
    ad84:	cmp.w	r8, #0
    ad88:	bne.n	ae12 <MillisTimer::runFromTimer()+0x1e6>
    ad8a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    ad8e:	str	r5, [r0, #8]
		_prev = nullptr;
    ad90:	str	r5, [r0, #12]
    ad92:	mov	r1, r0
    ad94:	mov.w	r8, #1
    ad98:	b.n	acd4 <MillisTimer::runFromTimer()+0xa8>
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    ad9a:	ldr.w	lr, [pc, #152]	; ae34 <MillisTimer::runFromTimer()+0x208>
    ad9e:	ldr.w	r1, [lr]
    ada2:	cbz	r1, adf4 <MillisTimer::runFromTimer()+0x1c8>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    ada4:	ldr	r1, [pc, #124]	; (ae24 <MillisTimer::runFromTimer()+0x1f8>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    ada6:	str	r3, [r0, #20]
				_prev = lastYield;
    ada8:	ldr	r3, [r1, #0]
    adaa:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    adac:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    adae:	str	r0, [r3, #20]
    adb0:	b.n	ac80 <MillisTimer::runFromTimer()+0x54>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    adb2:	ldr	r1, [r7, #0]
    adb4:	cbz	r1, ae02 <MillisTimer::runFromTimer()+0x1d6>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    adb6:	ldr	r1, [pc, #112]	; (ae28 <MillisTimer::runFromTimer()+0x1fc>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    adb8:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    adba:	ldr	r3, [r1, #0]
    adbc:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    adbe:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    adc0:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    adc2:	mov.w	r3, #268435456	; 0x10000000
    adc6:	str.w	r3, [r8]
    adca:	b.n	ac80 <MillisTimer::runFromTimer()+0x54>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    adcc:	ldr	r2, [r2, #12]
    adce:	str	r2, [r4, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    add0:	str.w	lr, [r4, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    add4:	str.w	r4, [lr, #12]
				_prev->_next = this;
    add8:	ldr	r2, [r4, #12]
				timer->_ms -= _ms;
    adda:	subs	r3, r1, r3
				_state = TimerActive;
    addc:	movs	r1, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    adde:	str	r4, [r2, #8]
				timer->_ms -= _ms;
    ade0:	str.w	r3, [lr]
				_state = TimerActive;
    ade4:	strb	r1, [r4, #20]
    ade6:	mov	r4, r0
    ade8:	b.n	ac92 <MillisTimer::runFromTimer()+0x66>

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    adea:	str	r0, [r4, #8]
		_prev = nullptr;
    adec:	str	r0, [r4, #12]
		listActive = this;
    adee:	str	r4, [r2, #0]
    adf0:	mov	r0, r4
    adf2:	b.n	ad2c <MillisTimer::runFromTimer()+0x100>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    adf4:	ldr	r3, [pc, #44]	; (ae24 <MillisTimer::runFromTimer()+0x1f8>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    adf6:	str	r1, [r0, #20]
				_prev = nullptr;
    adf8:	str	r1, [r0, #24]
				firstYield = this;
    adfa:	str.w	r0, [lr]
				lastYield = this;
    adfe:	str	r0, [r3, #0]
    ae00:	b.n	ac80 <MillisTimer::runFromTimer()+0x54>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    ae02:	ldr	r3, [pc, #36]	; (ae28 <MillisTimer::runFromTimer()+0x1fc>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    ae04:	str	r1, [r0, #20]
				_prev = nullptr;
    ae06:	str	r1, [r0, #24]
				firstInterrupt = this;
    ae08:	str	r0, [r7, #0]
				lastInterrupt = this;
    ae0a:	str	r0, [r3, #0]
    ae0c:	b.n	adc2 <MillisTimer::runFromTimer()+0x196>
    ae0e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ae12:	str	r1, [r6, #0]
    ae14:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ae18:	.word	0x200204b4
    ae1c:	.word	0x200204ac
    ae20:	.word	0x200204c0
    ae24:	.word	0x200204b8
    ae28:	.word	0x200204b0
    ae2c:	.word	0x00002b89
    ae30:	.word	0xe000ed04
    ae34:	.word	0x200204bc

0000ae38 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    ae38:	ldr	r2, [pc, #8]	; (ae44 <systick_isr+0xc>)
    ae3a:	ldr	r3, [r2, #0]
    ae3c:	adds	r3, #1
    ae3e:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    ae40:	b.w	ac2c <MillisTimer::runFromTimer()>
    ae44:	.word	0x200203c0

0000ae48 <usb_serial_class::clear()>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    ae48:	b.w	95cc <usb_serial_flush_input>

0000ae4c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    ae4c:	b.w	9580 <usb_serial_peekchar>

0000ae50 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    ae50:	b.w	9538 <usb_serial_getchar>

0000ae54 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    ae54:	b.w	95b0 <usb_serial_available>

0000ae58 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    ae58:	b.w	980c <usb_serial_flush_output>

0000ae5c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    ae5c:	b.w	97c4 <usb_serial_write_buffer_free>

0000ae60 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ae60:	mov	r0, r1
    ae62:	mov	r1, r2
    ae64:	b.w	9604 <usb_serial_write>

0000ae68 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ae68:	mov	r0, r1
    ae6a:	b.w	97ac <usb_serial_putchar>
    ae6e:	nop

0000ae70 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    ae70:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    ae72:	mov	r6, r1
    ae74:	cbz	r1, ae94 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    ae76:	cbz	r2, ae98 <Print::write(unsigned char const*, unsigned int)+0x28>
    ae78:	mov	r7, r0
    ae7a:	mov	r4, r2
    ae7c:	movs	r5, #0
    ae7e:	ldr	r3, [r7, #0]
    ae80:	ldrb.w	r1, [r6], #1
    ae84:	ldr	r3, [r3, #0]
    ae86:	mov	r0, r7
    ae88:	blx	r3
    ae8a:	subs	r4, #1
    ae8c:	add	r5, r0
    ae8e:	bne.n	ae7e <Print::write(unsigned char const*, unsigned int)+0xe>
    ae90:	mov	r0, r5
    ae92:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    ae94:	mov	r0, r1
    ae96:	pop	{r3, r4, r5, r6, r7, pc}
    ae98:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    ae9a:	pop	{r3, r4, r5, r6, r7, pc}

0000ae9c <Print::print(long)>:
	return count;
}


size_t Print::print(long n)
{
    ae9c:	push	{r4, r5, r6, lr}
	uint8_t sign=0;

	if (n < 0) {
    ae9e:	cmp	r1, #0
	return count;
}


size_t Print::print(long n)
{
    aea0:	sub	sp, #40	; 0x28
	uint8_t sign=0;

	if (n < 0) {
    aea2:	blt.n	aebe <Print::print(long)+0x22>
	} else if (base == 1) {
		base = 10;
	}


	if (n == 0) {
    aea4:	bne.n	af18 <Print::print(long)+0x7c>
		buf[sizeof(buf) - 1] = '0';
    aea6:	movs	r3, #48	; 0x30
    aea8:	strb.w	r3, [sp, #37]	; 0x25
    aeac:	movs	r2, #1
    aeae:	movs	r1, #33	; 0x21
	}
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
    aeb0:	ldr	r3, [r0, #0]
    aeb2:	add	r4, sp, #4
    aeb4:	ldr	r3, [r3, #4]
    aeb6:	add	r1, r4
    aeb8:	blx	r3
	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
}
    aeba:	add	sp, #40	; 0x28
    aebc:	pop	{r4, r5, r6, pc}
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    aebe:	ldr	r3, [pc, #136]	; (af48 <Print::print(long)+0xac>)

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    aec0:	negs	r1, r1
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    aec2:	umull	r2, r3, r3, r1
    aec6:	lsrs	r3, r3, #3
    aec8:	add.w	r2, r3, r3, lsl #2
    aecc:	sub.w	r1, r1, r2, lsl #1
    aed0:	adds	r1, #48	; 0x30
    aed2:	strb.w	r1, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
    aed6:	cbz	r3, af3a <Print::print(long)+0x9e>
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    aed8:	movs	r6, #45	; 0x2d
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    aeda:	ldr	r5, [pc, #108]	; (af48 <Print::print(long)+0xac>)
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    aedc:	movs	r2, #33	; 0x21
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    aede:	umull	r4, r1, r5, r3
    aee2:	lsrs	r1, r1, #3
    aee4:	add.w	r4, r1, r1, lsl #2
			n /= base;
			if (n == 0) break;
			i--;
    aee8:	subs	r2, #1
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    aeea:	sub.w	r3, r3, r4, lsl #1
			n /= base;
			if (n == 0) break;
			i--;
    aeee:	uxtb	r2, r2
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    aef0:	add	r4, sp, #40	; 0x28
    aef2:	add	r4, r2
    aef4:	adds	r3, #48	; 0x30
    aef6:	strb.w	r3, [r4, #-36]
			n /= base;
			if (n == 0) break;
    aefa:	mov	r3, r1
    aefc:	cmp	r1, #0
    aefe:	bne.n	aede <Print::print(long)+0x42>
			i--;
		}
	}
	if (sign) {
    af00:	cbz	r6, af3e <Print::print(long)+0xa2>
		i--;
    af02:	subs	r2, #1
    af04:	uxtb	r2, r2
		buf[i] = '-';
    af06:	add	r3, sp, #40	; 0x28
    af08:	add	r3, r2
    af0a:	mov	r1, r2
    af0c:	movs	r2, #45	; 0x2d
    af0e:	strb.w	r2, [r3, #-36]
    af12:	rsb	r2, r1, #34	; 0x22
    af16:	b.n	aeb0 <Print::print(long)+0x14>
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    af18:	ldr	r3, [pc, #44]	; (af48 <Print::print(long)+0xac>)
    af1a:	umull	r2, r3, r3, r1
    af1e:	lsrs	r3, r3, #3
    af20:	add.w	r2, r3, r3, lsl #2
    af24:	sub.w	r1, r1, r2, lsl #1
    af28:	adds	r1, #48	; 0x30
    af2a:	strb.w	r1, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
    af2e:	cbz	r3, af34 <Print::print(long)+0x98>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    af30:	movs	r6, #0
    af32:	b.n	aeda <Print::print(long)+0x3e>
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    af34:	movs	r2, #1
    af36:	movs	r1, #33	; 0x21
    af38:	b.n	aeb0 <Print::print(long)+0x14>
    af3a:	movs	r2, #33	; 0x21
    af3c:	b.n	af02 <Print::print(long)+0x66>
    af3e:	mov	r1, r2
    af40:	rsb	r2, r2, #34	; 0x22
    af44:	b.n	aeb0 <Print::print(long)+0x14>
    af46:	nop
    af48:	.word	0xcccccccd

0000af4c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    af4c:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    af4e:	ldr	r2, [pc, #24]	; (af68 <Print::println()+0x1c>)
	return write(buf, 2);
    af50:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    af52:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    af54:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    af56:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    af58:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    af5a:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    af5e:	movs	r2, #2
    af60:	blx	r3
}
    af62:	add	sp, #12
    af64:	ldr.w	pc, [sp], #4
    af68:	.word	0x00014000

0000af6c <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    af6c:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    af6e:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    af70:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    af72:	ldr	r3, [r3, #4]
    af74:	blx	r3
	return len;
}
    af76:	mov	r0, r4
    af78:	pop	{r4, pc}
    af7a:	nop

0000af7c <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    af7c:	push	{r1, r2, r3}
    af7e:	push	{lr}
    af80:	sub	sp, #8
    af82:	add	r2, sp, #12
    af84:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    af88:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    af8a:	bl	10988 <vdprintf>
#endif
}
    af8e:	add	sp, #8
    af90:	ldr.w	lr, [sp], #4
    af94:	add	sp, #12
    af96:	bx	lr

0000af98 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    af98:	push	{r4, r5, r6, r7, lr}
    af9a:	mov	r7, r0
    af9c:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    af9e:	cmp	r2, #0
    afa0:	beq.n	b00a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    afa2:	cmp	r2, #1
    afa4:	it	eq
    afa6:	moveq	r2, #10
	}


	if (n == 0) {
    afa8:	cbz	r1, b000 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    afaa:	movs	r4, #33	; 0x21
    afac:	b.n	afb0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    afae:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    afb0:	udiv	r5, r1, r2
    afb4:	mls	r1, r2, r5, r1
    afb8:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    afba:	cmp	r1, #9
    afbc:	add.w	r1, r0, #48	; 0x30
    afc0:	it	ls
    afc2:	uxtbls	r0, r1
    afc4:	add	r1, sp, #40	; 0x28
    afc6:	it	hi
    afc8:	addhi	r0, #55	; 0x37
    afca:	add	r1, r4
    afcc:	it	hi
    afce:	uxtbhi	r0, r0
    afd0:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    afd4:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    afd6:	mov	r1, r5
    afd8:	cmp	r5, #0
    afda:	bne.n	afae <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    afdc:	cbz	r3, afec <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    afde:	subs	r4, #1
    afe0:	uxtb	r4, r4
		buf[i] = '-';
    afe2:	add	r3, sp, #40	; 0x28
    afe4:	add	r3, r4
    afe6:	movs	r2, #45	; 0x2d
    afe8:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    afec:	ldr	r3, [r7, #0]
    afee:	add	r2, sp, #4
    aff0:	adds	r1, r2, r4
    aff2:	ldr	r3, [r3, #4]
    aff4:	mov	r0, r7
    aff6:	rsb	r2, r4, #34	; 0x22
    affa:	blx	r3
}
    affc:	add	sp, #44	; 0x2c
    affe:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    b000:	movs	r2, #48	; 0x30
    b002:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    b006:	movs	r4, #33	; 0x21
    b008:	b.n	afdc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    b00a:	ldr	r3, [r0, #0]
    b00c:	uxtb	r1, r1
    b00e:	ldr	r3, [r3, #0]
    b010:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    b012:	add	sp, #44	; 0x2c
    b014:	pop	{r4, r5, r6, r7, pc}
    b016:	nop

0000b018 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    b018:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    b01a:	bl	20d8 <setup>
	while (1) {
		loop();
    b01e:	bl	2650 <loop>
		yield();
    b022:	bl	1724 <yield>
    b026:	b.n	b01e <main+0x6>

0000b028 <software_isr>:

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    b028:	ldr	r1, [pc, #104]	; (b094 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    b02a:	ldr	r2, [pc, #108]	; (b098 <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    b02c:	ldr	r0, [pc, #108]	; (b09c <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    b02e:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    b030:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    b032:	ldr	r5, [pc, #108]	; (b0a0 <software_isr+0x78>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    b034:	ldr	r4, [r0, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    b036:	orr.w	r3, r3, #16777216	; 0x1000000
    b03a:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    b03c:	ldr	r3, [r2, #0]
    b03e:	orr.w	r3, r3, #1
    b042:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    b044:	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    b046:	cbnz	r4, b04e <software_isr+0x26>
    b048:	b.n	b076 <software_isr+0x4e>
    b04a:	ldr	r4, [r4, #20]
    b04c:	cbz	r4, b076 <software_isr+0x4e>
		if (p->active) {
    b04e:	ldrb	r3, [r4, #8]
    b050:	cmp	r3, #0
    b052:	beq.n	b04a <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    b054:	ldr	r3, [r4, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    b056:	ldr	r7, [r5, #0]
			p->update();
    b058:	ldr	r3, [r3, #0]
    b05a:	mov	r0, r4
    b05c:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    b05e:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    b060:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    b062:	subs	r3, r3, r7
    b064:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    b066:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    b068:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    b06a:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    b06c:	it	hi
    b06e:	strhhi	r2, [r4, #6]

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    b070:	ldr	r4, [r4, #20]
    b072:	cmp	r4, #0
    b074:	bne.n	b04e <software_isr+0x26>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    b076:	ldr	r3, [pc, #40]	; (b0a0 <software_isr+0x78>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    b078:	ldr	r2, [pc, #40]	; (b0a4 <software_isr+0x7c>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    b07a:	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    b07c:	ldrh	r0, [r2, #0]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    b07e:	ldr	r4, [pc, #40]	; (b0a8 <software_isr+0x80>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    b080:	subs	r3, r3, r6
    b082:	lsrs	r3, r3, #4
	AudioStream::cpu_cycles_total = totalcycles;
    b084:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    b086:	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    b088:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    b08a:	bls.n	b090 <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    b08c:	strh	r1, [r2, #0]
    b08e:	pop	{r3, r4, r5, r6, r7, pc}
    b090:	pop	{r3, r4, r5, r6, r7, pc}
    b092:	nop
    b094:	.word	0xe000edfc
    b098:	.word	0xe0001000
    b09c:	.word	0x200204c4
    b0a0:	.word	0xe0001004
    b0a4:	.word	0x200204c8
    b0a8:	.word	0x200204ca

0000b0ac <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    b0ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b0b0:	ldr	r5, [pc, #200]	; (b17c <Stream::parseInt(char)+0xd0>)
    b0b2:	sub	sp, #20
    b0b4:	mov	r4, r0
    b0b6:	mov	r7, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b0b8:	ldr	r3, [r5, #0]
    b0ba:	str	r3, [sp, #4]
	return ret;
    b0bc:	ldr	r6, [sp, #4]
    b0be:	b.n	b0d2 <Stream::parseInt(char)+0x26>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    b0c0:	bl	1724 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b0c4:	ldr	r3, [r5, #0]
    b0c6:	str	r3, [sp, #0]
	return ret;
    b0c8:	ldr	r3, [sp, #0]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    b0ca:	ldr	r2, [r4, #8]
    b0cc:	subs	r3, r3, r6
    b0ce:	cmp	r3, r2
    b0d0:	bcs.n	b0f4 <Stream::parseInt(char)+0x48>
    c = peek();
    b0d2:	ldr	r3, [r4, #0]
    b0d4:	mov	r0, r4
    b0d6:	ldr	r3, [r3, #24]
    b0d8:	blx	r3
    if (c >= 0) return c;
    b0da:	cmp	r0, #0
    b0dc:	blt.n	b0c0 <Stream::parseInt(char)+0x14>
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    b0de:	cmp	r0, #45	; 0x2d
    b0e0:	beq.n	b0fc <Stream::parseInt(char)+0x50>
    if (c >= '0' && c <= '9') return c;
    b0e2:	sub.w	r3, r0, #48	; 0x30
    b0e6:	cmp	r3, #9
    b0e8:	bls.n	b0fc <Stream::parseInt(char)+0x50>
    read();  // discard non-numeric
    b0ea:	ldr	r3, [r4, #0]
    b0ec:	mov	r0, r4
    b0ee:	ldr	r3, [r3, #20]
    b0f0:	blx	r3
    b0f2:	b.n	b0b8 <Stream::parseInt(char)+0xc>
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    b0f4:	movs	r0, #0
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    b0f6:	add	sp, #20
    b0f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b0fc:	mov.w	r8, #0
    b100:	mov	r9, r8
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    b102:	cmp	r0, r7
    b104:	beq.n	b11e <Stream::parseInt(char)+0x72>
      ; // ignore this charactor
    else if(c == '-')
    b106:	cmp	r0, #45	; 0x2d
    b108:	beq.n	b15c <Stream::parseInt(char)+0xb0>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    b10a:	sub.w	r3, r0, #48	; 0x30
    b10e:	cmp	r3, #9
    b110:	bhi.n	b11e <Stream::parseInt(char)+0x72>
      value = value * 10 + c - '0';
    b112:	add.w	r8, r8, r8, lsl #2
    b116:	add.w	r8, r0, r8, lsl #1
    b11a:	sub.w	r8, r8, #48	; 0x30
    read();  // consume the character we got with peek
    b11e:	ldr	r3, [r4, #0]
    b120:	mov	r0, r4
    b122:	ldr	r3, [r3, #20]
    b124:	blx	r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b126:	ldr	r3, [r5, #0]
    b128:	str	r3, [sp, #12]
	return ret;
    b12a:	ldr	r6, [sp, #12]
    b12c:	b.n	b140 <Stream::parseInt(char)+0x94>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    b12e:	bl	1724 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b132:	ldr	r3, [r5, #0]
    b134:	str	r3, [sp, #8]
	return ret;
    b136:	ldr	r3, [sp, #8]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    b138:	ldr	r2, [r4, #8]
    b13a:	subs	r3, r3, r6
    b13c:	cmp	r3, r2
    b13e:	bcs.n	b162 <Stream::parseInt(char)+0xb6>
    c = peek();
    b140:	ldr	r3, [r4, #0]
    b142:	mov	r0, r4
    b144:	ldr	r3, [r3, #24]
    b146:	blx	r3
    if (c >= 0) return c;
    b148:	cmp	r0, #0
    b14a:	blt.n	b12e <Stream::parseInt(char)+0x82>
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    b14c:	sub.w	r3, r0, #48	; 0x30
    b150:	cmp	r3, #9
    b152:	bls.n	b102 <Stream::parseInt(char)+0x56>
    b154:	cmp	r0, r7
    b156:	bne.n	b162 <Stream::parseInt(char)+0xb6>
    b158:	mov	r0, r7
    b15a:	b.n	b102 <Stream::parseInt(char)+0x56>

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    b15c:	mov.w	r9, #1
    b160:	b.n	b11e <Stream::parseInt(char)+0x72>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    b162:	cmp.w	r9, #0
    b166:	beq.n	b172 <Stream::parseInt(char)+0xc6>
    value = -value;
    b168:	rsb	r0, r8, #0
  return value;
}
    b16c:	add	sp, #20
    b16e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b172:	mov	r0, r8
    b174:	add	sp, #20
    b176:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b17a:	nop
    b17c:	.word	0x200203c0

0000b180 <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    b180:	movs	r1, #1
    b182:	b.w	b0ac <Stream::parseInt(char)>
    b186:	nop

0000b188 <operator delete(void*, unsigned int)>:
    b188:	b.w	c4b0 <free>

0000b18c <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    b18c:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b18e:	ldr	r0, [pc, #164]	; (b234 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b190:	ldr	r2, [pc, #164]	; (b238 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    b192:	ldr	r3, [pc, #168]	; (b23c <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b194:	ldr	r5, [pc, #168]	; (b240 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b196:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b198:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b19a:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b19c:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    b19e:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b1a0:	ldr	r4, [pc, #160]	; (b244 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    b1a2:	cmp	r3, #8
    b1a4:	beq.n	b208 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    b1a6:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b1a8:	ldr	r0, [pc, #156]	; (b248 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b1aa:	ldr	r1, [pc, #160]	; (b24c <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    b1ac:	beq.n	b21e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    b1ae:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    b1b0:	ite	eq
    b1b2:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b1b4:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b1b6:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b1b8:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b1ba:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b1bc:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b1be:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b1c0:	ldr	r3, [pc, #140]	; (b250 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b1c2:	ldr	r1, [pc, #144]	; (b254 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b1c4:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b1c6:	ldr	r2, [pc, #144]	; (b258 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b1c8:	cbz	r3, b1fa <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b1ca:	movs	r3, #1
    b1cc:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b1ce:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    b1d0:	ldr	r3, [pc, #136]	; (b25c <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    b1d2:	ldr	r1, [pc, #140]	; (b260 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    b1d4:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    b1d6:	ldr	r2, [pc, #140]	; (b264 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    b1d8:	cmp	r3, #1
    b1da:	bls.n	b22a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    b1dc:	cmp	r3, #4
    b1de:	bls.n	b200 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    b1e0:	cmp	r3, #8
    b1e2:	bls.n	b222 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    b1e4:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    b1e6:	ite	ls
    b1e8:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    b1ea:	movhi	r3, #135	; 0x87
    b1ec:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    b1ee:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    b1f0:	ldr	r3, [pc, #116]	; (b268 <analog_init+0xdc>)
    b1f2:	movs	r2, #1
    b1f4:	strb	r2, [r3, #0]
}
    b1f6:	pop	{r4, r5}
    b1f8:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    b1fa:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    b1fc:	str	r3, [r2, #0]
    b1fe:	b.n	b1d0 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    b200:	movs	r3, #132	; 0x84
    b202:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    b204:	str	r3, [r2, #0]
    b206:	b.n	b1f0 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b208:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b20c:	ldr	r1, [pc, #60]	; (b24c <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b20e:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b210:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b212:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b214:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b216:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b218:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b21a:	str	r3, [r1, #0]
    b21c:	b.n	b1c0 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b21e:	movs	r2, #57	; 0x39
    b220:	b.n	b212 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    b222:	movs	r3, #133	; 0x85
    b224:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    b226:	str	r3, [r2, #0]
    b228:	b.n	b1f0 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    b22a:	movs	r3, #128	; 0x80
    b22c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    b22e:	str	r3, [r2, #0]
    b230:	b.n	b1f0 <analog_init+0x64>
    b232:	nop
    b234:	.word	0x40074000
    b238:	.word	0x40074001
    b23c:	.word	0x1fff08a8
    b240:	.word	0x4003b008
    b244:	.word	0x4003b00c
    b248:	.word	0x400bb008
    b24c:	.word	0x400bb00c
    b250:	.word	0x200204cd
    b254:	.word	0x4003b020
    b258:	.word	0x400bb020
    b25c:	.word	0x1fff08a9
    b260:	.word	0x4003b024
    b264:	.word	0x400bb024
    b268:	.word	0x200204cc

0000b26c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    b26c:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    b26e:	ldr	r2, [pc, #196]	; (b334 <usb_init_serialnumber+0xc8>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b270:	ldr	r3, [pc, #196]	; (b338 <usb_init_serialnumber+0xcc>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    b272:	ldr	r1, [pc, #200]	; (b33c <usb_init_serialnumber+0xd0>)
    b274:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b276:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    b278:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b27a:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    b27c:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    b27e:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    b280:	ldrb	r3, [r2, #0]
    b282:	lsls	r3, r3, #24
    b284:	bpl.n	b280 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b286:	push	{lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    b288:	ldr	r3, [pc, #180]	; (b340 <usb_init_serialnumber+0xd4>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b28a:	sub	sp, #20
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    b28c:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    b28e:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b290:	ldr	r3, [pc, #176]	; (b344 <usb_init_serialnumber+0xd8>)
    b292:	cmp	r0, r3
    b294:	it	ls
    b296:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    b29a:	mov.w	r2, #10
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b29e:	it	ls
    b2a0:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    b2a2:	add	r1, sp, #4
    b2a4:	bl	b34c <ultoa>
	for (i=0; i<10; i++) {
		char c = buf[i];
    b2a8:	ldrb.w	r2, [sp, #4]
    b2ac:	ldr	r3, [pc, #152]	; (b348 <usb_init_serialnumber+0xdc>)
		if (!c) break;
    b2ae:	cbz	r2, b308 <usb_init_serialnumber+0x9c>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b2b0:	ldrb.w	r1, [sp, #5]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b2b4:	strh	r2, [r3, #2]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b2b6:	cbz	r1, b316 <usb_init_serialnumber+0xaa>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b2b8:	ldrb.w	r2, [sp, #6]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b2bc:	strh	r1, [r3, #4]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b2be:	cbz	r2, b31a <usb_init_serialnumber+0xae>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b2c0:	ldrb.w	r1, [sp, #7]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b2c4:	strh	r2, [r3, #6]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b2c6:	cbz	r1, b31e <usb_init_serialnumber+0xb2>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b2c8:	ldrb.w	r2, [sp, #8]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b2cc:	strh	r1, [r3, #8]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b2ce:	cbz	r2, b322 <usb_init_serialnumber+0xb6>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b2d0:	ldrb.w	r1, [sp, #9]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b2d4:	strh	r2, [r3, #10]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b2d6:	cbz	r1, b326 <usb_init_serialnumber+0xba>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b2d8:	ldrb.w	r2, [sp, #10]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b2dc:	strh	r1, [r3, #12]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b2de:	cbz	r2, b32a <usb_init_serialnumber+0xbe>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b2e0:	ldrb.w	r1, [sp, #11]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b2e4:	strh	r2, [r3, #14]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b2e6:	cbz	r1, b32e <usb_init_serialnumber+0xc2>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b2e8:	ldrb.w	r2, [sp, #12]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b2ec:	strh	r1, [r3, #16]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b2ee:	cbz	r2, b306 <usb_init_serialnumber+0x9a>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b2f0:	ldrb.w	r1, [sp, #13]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b2f4:	strh	r2, [r3, #18]
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b2f6:	movs	r2, #9
		char c = buf[i];
		if (!c) break;
    b2f8:	cbz	r1, b308 <usb_init_serialnumber+0x9c>
    b2fa:	movs	r2, #22
		usb_string_serial_number_default.wString[i] = c;
    b2fc:	strh	r1, [r3, #20]
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b2fe:	strb	r2, [r3, #0]
}
    b300:	add	sp, #20
    b302:	ldr.w	pc, [sp], #4
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b306:	movs	r2, #8
    b308:	adds	r2, #1
    b30a:	lsls	r2, r2, #1
    b30c:	uxtb	r2, r2
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b30e:	strb	r2, [r3, #0]
}
    b310:	add	sp, #20
    b312:	ldr.w	pc, [sp], #4
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b316:	movs	r2, #1
    b318:	b.n	b308 <usb_init_serialnumber+0x9c>
    b31a:	movs	r2, #2
    b31c:	b.n	b308 <usb_init_serialnumber+0x9c>
    b31e:	movs	r2, #3
    b320:	b.n	b308 <usb_init_serialnumber+0x9c>
    b322:	movs	r2, #4
    b324:	b.n	b308 <usb_init_serialnumber+0x9c>
    b326:	movs	r2, #5
    b328:	b.n	b308 <usb_init_serialnumber+0x9c>
    b32a:	movs	r2, #6
    b32c:	b.n	b308 <usb_init_serialnumber+0x9c>
    b32e:	movs	r2, #7
    b330:	b.n	b308 <usb_init_serialnumber+0x9c>
    b332:	nop
    b334:	.word	0x40020004
    b338:	.word	0x40020000
    b33c:	.word	0x41070000
    b340:	.word	0x4002000c
    b344:	.word	0x0098967f
    b348:	.word	0x1fff0938

0000b34c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    b34c:	push	{r4, r5, r6, r7}
    b34e:	subs	r5, r1, #1
    b350:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    b352:	movs	r4, #0
    b354:	b.n	b358 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    b356:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    b358:	udiv	r3, r0, r2
    b35c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b360:	cmp	r0, #9
    b362:	add.w	r7, r0, #48	; 0x30
    b366:	itet	hi
    b368:	addhi	r0, #55	; 0x37
    b36a:	uxtbls	r0, r7
    b36c:	uxtbhi	r0, r0
    b36e:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    b372:	mov	r0, r3
    b374:	cmp	r3, #0
    b376:	bne.n	b356 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    b378:	adds	r2, r1, r4
    b37a:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    b37c:	cbz	r4, b392 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    b37e:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    b380:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    b384:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b386:	adds	r3, #1
    b388:	subs	r0, r4, r3
    b38a:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    b38c:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b390:	blt.n	b37e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    b392:	mov	r0, r1
    b394:	pop	{r4, r5, r6, r7}
    b396:	bx	lr

0000b398 <__aeabi_drsub>:
    b398:	eor.w	r1, r1, #2147483648	; 0x80000000
    b39c:	b.n	b3a4 <__adddf3>
    b39e:	nop

0000b3a0 <__aeabi_dsub>:
    b3a0:	eor.w	r3, r3, #2147483648	; 0x80000000

0000b3a4 <__adddf3>:
    b3a4:	push	{r4, r5, lr}
    b3a6:	mov.w	r4, r1, lsl #1
    b3aa:	mov.w	r5, r3, lsl #1
    b3ae:	teq	r4, r5
    b3b2:	it	eq
    b3b4:	teqeq	r0, r2
    b3b8:	itttt	ne
    b3ba:	orrsne.w	ip, r4, r0
    b3be:	orrsne.w	ip, r5, r2
    b3c2:	mvnsne.w	ip, r4, asr #21
    b3c6:	mvnsne.w	ip, r5, asr #21
    b3ca:	beq.w	b592 <__adddf3+0x1ee>
    b3ce:	mov.w	r4, r4, lsr #21
    b3d2:	rsbs	r5, r4, r5, lsr #21
    b3d6:	it	lt
    b3d8:	neglt	r5, r5
    b3da:	ble.n	b3f6 <__adddf3+0x52>
    b3dc:	add	r4, r5
    b3de:	eor.w	r2, r0, r2
    b3e2:	eor.w	r3, r1, r3
    b3e6:	eor.w	r0, r2, r0
    b3ea:	eor.w	r1, r3, r1
    b3ee:	eor.w	r2, r0, r2
    b3f2:	eor.w	r3, r1, r3
    b3f6:	cmp	r5, #54	; 0x36
    b3f8:	it	hi
    b3fa:	pophi	{r4, r5, pc}
    b3fc:	tst.w	r1, #2147483648	; 0x80000000
    b400:	mov.w	r1, r1, lsl #12
    b404:	mov.w	ip, #1048576	; 0x100000
    b408:	orr.w	r1, ip, r1, lsr #12
    b40c:	beq.n	b414 <__adddf3+0x70>
    b40e:	negs	r0, r0
    b410:	sbc.w	r1, r1, r1, lsl #1
    b414:	tst.w	r3, #2147483648	; 0x80000000
    b418:	mov.w	r3, r3, lsl #12
    b41c:	orr.w	r3, ip, r3, lsr #12
    b420:	beq.n	b428 <__adddf3+0x84>
    b422:	negs	r2, r2
    b424:	sbc.w	r3, r3, r3, lsl #1
    b428:	teq	r4, r5
    b42c:	beq.w	b57e <__adddf3+0x1da>
    b430:	sub.w	r4, r4, #1
    b434:	rsbs	lr, r5, #32
    b438:	blt.n	b456 <__adddf3+0xb2>
    b43a:	lsl.w	ip, r2, lr
    b43e:	lsr.w	r2, r2, r5
    b442:	adds	r0, r0, r2
    b444:	adc.w	r1, r1, #0
    b448:	lsl.w	r2, r3, lr
    b44c:	adds	r0, r0, r2
    b44e:	asr.w	r3, r3, r5
    b452:	adcs	r1, r3
    b454:	b.n	b474 <__adddf3+0xd0>
    b456:	sub.w	r5, r5, #32
    b45a:	add.w	lr, lr, #32
    b45e:	cmp	r2, #1
    b460:	lsl.w	ip, r3, lr
    b464:	it	cs
    b466:	orrcs.w	ip, ip, #2
    b46a:	asr.w	r3, r3, r5
    b46e:	adds	r0, r0, r3
    b470:	adcs.w	r1, r1, r3, asr #31
    b474:	and.w	r5, r1, #2147483648	; 0x80000000
    b478:	bpl.n	b48a <__adddf3+0xe6>
    b47a:	mov.w	lr, #0
    b47e:	rsbs	ip, ip, #0
    b482:	sbcs.w	r0, lr, r0
    b486:	sbc.w	r1, lr, r1
    b48a:	cmp.w	r1, #1048576	; 0x100000
    b48e:	bcc.n	b4c8 <__adddf3+0x124>
    b490:	cmp.w	r1, #2097152	; 0x200000
    b494:	bcc.n	b4b0 <__adddf3+0x10c>
    b496:	lsrs	r1, r1, #1
    b498:	movs.w	r0, r0, rrx
    b49c:	mov.w	ip, ip, rrx
    b4a0:	add.w	r4, r4, #1
    b4a4:	mov.w	r2, r4, lsl #21
    b4a8:	cmn.w	r2, #4194304	; 0x400000
    b4ac:	bcs.w	b5e4 <__adddf3+0x240>
    b4b0:	cmp.w	ip, #2147483648	; 0x80000000
    b4b4:	it	eq
    b4b6:	movseq.w	ip, r0, lsr #1
    b4ba:	adcs.w	r0, r0, #0
    b4be:	adc.w	r1, r1, r4, lsl #20
    b4c2:	orr.w	r1, r1, r5
    b4c6:	pop	{r4, r5, pc}
    b4c8:	movs.w	ip, ip, lsl #1
    b4cc:	adcs	r0, r0
    b4ce:	adc.w	r1, r1, r1
    b4d2:	tst.w	r1, #1048576	; 0x100000
    b4d6:	sub.w	r4, r4, #1
    b4da:	bne.n	b4b0 <__adddf3+0x10c>
    b4dc:	teq	r1, #0
    b4e0:	itt	eq
    b4e2:	moveq	r1, r0
    b4e4:	moveq	r0, #0
    b4e6:	clz	r3, r1
    b4ea:	it	eq
    b4ec:	addeq	r3, #32
    b4ee:	sub.w	r3, r3, #11
    b4f2:	subs.w	r2, r3, #32
    b4f6:	bge.n	b512 <__adddf3+0x16e>
    b4f8:	adds	r2, #12
    b4fa:	ble.n	b50e <__adddf3+0x16a>
    b4fc:	add.w	ip, r2, #20
    b500:	rsb	r2, r2, #12
    b504:	lsl.w	r0, r1, ip
    b508:	lsr.w	r1, r1, r2
    b50c:	b.n	b528 <__adddf3+0x184>
    b50e:	add.w	r2, r2, #20
    b512:	it	le
    b514:	rsble	ip, r2, #32
    b518:	lsl.w	r1, r1, r2
    b51c:	lsr.w	ip, r0, ip
    b520:	itt	le
    b522:	orrle.w	r1, r1, ip
    b526:	lslle	r0, r2
    b528:	subs	r4, r4, r3
    b52a:	ittt	ge
    b52c:	addge.w	r1, r1, r4, lsl #20
    b530:	orrge	r1, r5
    b532:	popge	{r4, r5, pc}
    b534:	mvn.w	r4, r4
    b538:	subs	r4, #31
    b53a:	bge.n	b576 <__adddf3+0x1d2>
    b53c:	adds	r4, #12
    b53e:	bgt.n	b55e <__adddf3+0x1ba>
    b540:	add.w	r4, r4, #20
    b544:	rsb	r2, r4, #32
    b548:	lsr.w	r0, r0, r4
    b54c:	lsl.w	r3, r1, r2
    b550:	orr.w	r0, r0, r3
    b554:	lsr.w	r3, r1, r4
    b558:	orr.w	r1, r5, r3
    b55c:	pop	{r4, r5, pc}
    b55e:	rsb	r4, r4, #12
    b562:	rsb	r2, r4, #32
    b566:	lsr.w	r0, r0, r2
    b56a:	lsl.w	r3, r1, r4
    b56e:	orr.w	r0, r0, r3
    b572:	mov	r1, r5
    b574:	pop	{r4, r5, pc}
    b576:	lsr.w	r0, r1, r4
    b57a:	mov	r1, r5
    b57c:	pop	{r4, r5, pc}
    b57e:	teq	r4, #0
    b582:	eor.w	r3, r3, #1048576	; 0x100000
    b586:	itte	eq
    b588:	eoreq.w	r1, r1, #1048576	; 0x100000
    b58c:	addeq	r4, #1
    b58e:	subne	r5, #1
    b590:	b.n	b430 <__adddf3+0x8c>
    b592:	mvns.w	ip, r4, asr #21
    b596:	it	ne
    b598:	mvnsne.w	ip, r5, asr #21
    b59c:	beq.n	b5f2 <__adddf3+0x24e>
    b59e:	teq	r4, r5
    b5a2:	it	eq
    b5a4:	teqeq	r0, r2
    b5a8:	beq.n	b5b6 <__adddf3+0x212>
    b5aa:	orrs.w	ip, r4, r0
    b5ae:	itt	eq
    b5b0:	moveq	r1, r3
    b5b2:	moveq	r0, r2
    b5b4:	pop	{r4, r5, pc}
    b5b6:	teq	r1, r3
    b5ba:	ittt	ne
    b5bc:	movne	r1, #0
    b5be:	movne	r0, #0
    b5c0:	popne	{r4, r5, pc}
    b5c2:	movs.w	ip, r4, lsr #21
    b5c6:	bne.n	b5d4 <__adddf3+0x230>
    b5c8:	lsls	r0, r0, #1
    b5ca:	adcs	r1, r1
    b5cc:	it	cs
    b5ce:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b5d2:	pop	{r4, r5, pc}
    b5d4:	adds.w	r4, r4, #4194304	; 0x400000
    b5d8:	itt	cc
    b5da:	addcc.w	r1, r1, #1048576	; 0x100000
    b5de:	popcc	{r4, r5, pc}
    b5e0:	and.w	r5, r1, #2147483648	; 0x80000000
    b5e4:	orr.w	r1, r5, #2130706432	; 0x7f000000
    b5e8:	orr.w	r1, r1, #15728640	; 0xf00000
    b5ec:	mov.w	r0, #0
    b5f0:	pop	{r4, r5, pc}
    b5f2:	mvns.w	ip, r4, asr #21
    b5f6:	itte	ne
    b5f8:	movne	r1, r3
    b5fa:	movne	r0, r2
    b5fc:	mvnseq.w	ip, r5, asr #21
    b600:	itt	ne
    b602:	movne	r3, r1
    b604:	movne	r2, r0
    b606:	orrs.w	r4, r0, r1, lsl #12
    b60a:	itte	eq
    b60c:	orrseq.w	r5, r2, r3, lsl #12
    b610:	teqeq	r1, r3
    b614:	orrne.w	r1, r1, #524288	; 0x80000
    b618:	pop	{r4, r5, pc}
    b61a:	nop

0000b61c <__aeabi_ui2d>:
    b61c:	teq	r0, #0
    b620:	itt	eq
    b622:	moveq	r1, #0
    b624:	bxeq	lr
    b626:	push	{r4, r5, lr}
    b628:	mov.w	r4, #1024	; 0x400
    b62c:	add.w	r4, r4, #50	; 0x32
    b630:	mov.w	r5, #0
    b634:	mov.w	r1, #0
    b638:	b.n	b4dc <__adddf3+0x138>
    b63a:	nop

0000b63c <__aeabi_i2d>:
    b63c:	teq	r0, #0
    b640:	itt	eq
    b642:	moveq	r1, #0
    b644:	bxeq	lr
    b646:	push	{r4, r5, lr}
    b648:	mov.w	r4, #1024	; 0x400
    b64c:	add.w	r4, r4, #50	; 0x32
    b650:	ands.w	r5, r0, #2147483648	; 0x80000000
    b654:	it	mi
    b656:	negmi	r0, r0
    b658:	mov.w	r1, #0
    b65c:	b.n	b4dc <__adddf3+0x138>
    b65e:	nop

0000b660 <__aeabi_f2d>:
    b660:	lsls	r2, r0, #1
    b662:	mov.w	r1, r2, asr #3
    b666:	mov.w	r1, r1, rrx
    b66a:	mov.w	r0, r2, lsl #28
    b66e:	itttt	ne
    b670:	andsne.w	r3, r2, #4278190080	; 0xff000000
    b674:	teqne	r3, #4278190080	; 0xff000000
    b678:	eorne.w	r1, r1, #939524096	; 0x38000000
    b67c:	bxne	lr
    b67e:	teq	r2, #0
    b682:	ite	ne
    b684:	teqne	r3, #4278190080	; 0xff000000
    b688:	bxeq	lr
    b68a:	push	{r4, r5, lr}
    b68c:	mov.w	r4, #896	; 0x380
    b690:	and.w	r5, r1, #2147483648	; 0x80000000
    b694:	bic.w	r1, r1, #2147483648	; 0x80000000
    b698:	b.n	b4dc <__adddf3+0x138>
    b69a:	nop

0000b69c <__aeabi_ul2d>:
    b69c:	orrs.w	r2, r0, r1
    b6a0:	it	eq
    b6a2:	bxeq	lr
    b6a4:	push	{r4, r5, lr}
    b6a6:	mov.w	r5, #0
    b6aa:	b.n	b6c2 <__aeabi_l2d+0x16>

0000b6ac <__aeabi_l2d>:
    b6ac:	orrs.w	r2, r0, r1
    b6b0:	it	eq
    b6b2:	bxeq	lr
    b6b4:	push	{r4, r5, lr}
    b6b6:	ands.w	r5, r1, #2147483648	; 0x80000000
    b6ba:	bpl.n	b6c2 <__aeabi_l2d+0x16>
    b6bc:	negs	r0, r0
    b6be:	sbc.w	r1, r1, r1, lsl #1
    b6c2:	mov.w	r4, #1024	; 0x400
    b6c6:	add.w	r4, r4, #50	; 0x32
    b6ca:	movs.w	ip, r1, lsr #22
    b6ce:	beq.w	b48a <__adddf3+0xe6>
    b6d2:	mov.w	r2, #3
    b6d6:	movs.w	ip, ip, lsr #3
    b6da:	it	ne
    b6dc:	addne	r2, #3
    b6de:	movs.w	ip, ip, lsr #3
    b6e2:	it	ne
    b6e4:	addne	r2, #3
    b6e6:	add.w	r2, r2, ip, lsr #3
    b6ea:	rsb	r3, r2, #32
    b6ee:	lsl.w	ip, r0, r3
    b6f2:	lsr.w	r0, r0, r2
    b6f6:	lsl.w	lr, r1, r3
    b6fa:	orr.w	r0, r0, lr
    b6fe:	lsr.w	r1, r1, r2
    b702:	add	r4, r2
    b704:	b.n	b48a <__adddf3+0xe6>
    b706:	nop

0000b708 <__aeabi_dmul>:
    b708:	push	{r4, r5, r6, lr}
    b70a:	mov.w	ip, #255	; 0xff
    b70e:	orr.w	ip, ip, #1792	; 0x700
    b712:	ands.w	r4, ip, r1, lsr #20
    b716:	ittte	ne
    b718:	andsne.w	r5, ip, r3, lsr #20
    b71c:	teqne	r4, ip
    b720:	teqne	r5, ip
    b724:	bleq	b8e4 <__aeabi_dmul+0x1dc>
    b728:	add	r4, r5
    b72a:	eor.w	r6, r1, r3
    b72e:	bic.w	r1, r1, ip, lsl #21
    b732:	bic.w	r3, r3, ip, lsl #21
    b736:	orrs.w	r5, r0, r1, lsl #12
    b73a:	it	ne
    b73c:	orrsne.w	r5, r2, r3, lsl #12
    b740:	orr.w	r1, r1, #1048576	; 0x100000
    b744:	orr.w	r3, r3, #1048576	; 0x100000
    b748:	beq.n	b7bc <__aeabi_dmul+0xb4>
    b74a:	umull	ip, lr, r0, r2
    b74e:	mov.w	r5, #0
    b752:	umlal	lr, r5, r1, r2
    b756:	and.w	r2, r6, #2147483648	; 0x80000000
    b75a:	umlal	lr, r5, r0, r3
    b75e:	mov.w	r6, #0
    b762:	umlal	r5, r6, r1, r3
    b766:	teq	ip, #0
    b76a:	it	ne
    b76c:	orrne.w	lr, lr, #1
    b770:	sub.w	r4, r4, #255	; 0xff
    b774:	cmp.w	r6, #512	; 0x200
    b778:	sbc.w	r4, r4, #768	; 0x300
    b77c:	bcs.n	b788 <__aeabi_dmul+0x80>
    b77e:	movs.w	lr, lr, lsl #1
    b782:	adcs	r5, r5
    b784:	adc.w	r6, r6, r6
    b788:	orr.w	r1, r2, r6, lsl #11
    b78c:	orr.w	r1, r1, r5, lsr #21
    b790:	mov.w	r0, r5, lsl #11
    b794:	orr.w	r0, r0, lr, lsr #21
    b798:	mov.w	lr, lr, lsl #11
    b79c:	subs.w	ip, r4, #253	; 0xfd
    b7a0:	it	hi
    b7a2:	cmphi.w	ip, #1792	; 0x700
    b7a6:	bhi.n	b7e6 <__aeabi_dmul+0xde>
    b7a8:	cmp.w	lr, #2147483648	; 0x80000000
    b7ac:	it	eq
    b7ae:	movseq.w	lr, r0, lsr #1
    b7b2:	adcs.w	r0, r0, #0
    b7b6:	adc.w	r1, r1, r4, lsl #20
    b7ba:	pop	{r4, r5, r6, pc}
    b7bc:	and.w	r6, r6, #2147483648	; 0x80000000
    b7c0:	orr.w	r1, r6, r1
    b7c4:	orr.w	r0, r0, r2
    b7c8:	eor.w	r1, r1, r3
    b7cc:	subs.w	r4, r4, ip, lsr #1
    b7d0:	ittt	gt
    b7d2:	rsbsgt	r5, r4, ip
    b7d6:	orrgt.w	r1, r1, r4, lsl #20
    b7da:	popgt	{r4, r5, r6, pc}
    b7dc:	orr.w	r1, r1, #1048576	; 0x100000
    b7e0:	mov.w	lr, #0
    b7e4:	subs	r4, #1
    b7e6:	bgt.w	b940 <__aeabi_dmul+0x238>
    b7ea:	cmn.w	r4, #54	; 0x36
    b7ee:	ittt	le
    b7f0:	movle	r0, #0
    b7f2:	andle.w	r1, r1, #2147483648	; 0x80000000
    b7f6:	pople	{r4, r5, r6, pc}
    b7f8:	rsb	r4, r4, #0
    b7fc:	subs	r4, #32
    b7fe:	bge.n	b86c <__aeabi_dmul+0x164>
    b800:	adds	r4, #12
    b802:	bgt.n	b83c <__aeabi_dmul+0x134>
    b804:	add.w	r4, r4, #20
    b808:	rsb	r5, r4, #32
    b80c:	lsl.w	r3, r0, r5
    b810:	lsr.w	r0, r0, r4
    b814:	lsl.w	r2, r1, r5
    b818:	orr.w	r0, r0, r2
    b81c:	and.w	r2, r1, #2147483648	; 0x80000000
    b820:	bic.w	r1, r1, #2147483648	; 0x80000000
    b824:	adds.w	r0, r0, r3, lsr #31
    b828:	lsr.w	r6, r1, r4
    b82c:	adc.w	r1, r2, r6
    b830:	orrs.w	lr, lr, r3, lsl #1
    b834:	it	eq
    b836:	biceq.w	r0, r0, r3, lsr #31
    b83a:	pop	{r4, r5, r6, pc}
    b83c:	rsb	r4, r4, #12
    b840:	rsb	r5, r4, #32
    b844:	lsl.w	r3, r0, r4
    b848:	lsr.w	r0, r0, r5
    b84c:	lsl.w	r2, r1, r4
    b850:	orr.w	r0, r0, r2
    b854:	and.w	r1, r1, #2147483648	; 0x80000000
    b858:	adds.w	r0, r0, r3, lsr #31
    b85c:	adc.w	r1, r1, #0
    b860:	orrs.w	lr, lr, r3, lsl #1
    b864:	it	eq
    b866:	biceq.w	r0, r0, r3, lsr #31
    b86a:	pop	{r4, r5, r6, pc}
    b86c:	rsb	r5, r4, #32
    b870:	lsl.w	r2, r0, r5
    b874:	orr.w	lr, lr, r2
    b878:	lsr.w	r3, r0, r4
    b87c:	lsl.w	r2, r1, r5
    b880:	orr.w	r3, r3, r2
    b884:	lsr.w	r0, r1, r4
    b888:	and.w	r1, r1, #2147483648	; 0x80000000
    b88c:	lsr.w	r2, r1, r4
    b890:	bic.w	r0, r0, r2
    b894:	add.w	r0, r0, r3, lsr #31
    b898:	orrs.w	lr, lr, r3, lsl #1
    b89c:	it	eq
    b89e:	biceq.w	r0, r0, r3, lsr #31
    b8a2:	pop	{r4, r5, r6, pc}
    b8a4:	teq	r4, #0
    b8a8:	bne.n	b8ca <__aeabi_dmul+0x1c2>
    b8aa:	and.w	r6, r1, #2147483648	; 0x80000000
    b8ae:	lsls	r0, r0, #1
    b8b0:	adc.w	r1, r1, r1
    b8b4:	tst.w	r1, #1048576	; 0x100000
    b8b8:	it	eq
    b8ba:	subeq	r4, #1
    b8bc:	beq.n	b8ae <__aeabi_dmul+0x1a6>
    b8be:	orr.w	r1, r1, r6
    b8c2:	teq	r5, #0
    b8c6:	it	ne
    b8c8:	bxne	lr
    b8ca:	and.w	r6, r3, #2147483648	; 0x80000000
    b8ce:	lsls	r2, r2, #1
    b8d0:	adc.w	r3, r3, r3
    b8d4:	tst.w	r3, #1048576	; 0x100000
    b8d8:	it	eq
    b8da:	subeq	r5, #1
    b8dc:	beq.n	b8ce <__aeabi_dmul+0x1c6>
    b8de:	orr.w	r3, r3, r6
    b8e2:	bx	lr
    b8e4:	teq	r4, ip
    b8e8:	and.w	r5, ip, r3, lsr #20
    b8ec:	it	ne
    b8ee:	teqne	r5, ip
    b8f2:	beq.n	b90e <__aeabi_dmul+0x206>
    b8f4:	orrs.w	r6, r0, r1, lsl #1
    b8f8:	it	ne
    b8fa:	orrsne.w	r6, r2, r3, lsl #1
    b8fe:	bne.n	b8a4 <__aeabi_dmul+0x19c>
    b900:	eor.w	r1, r1, r3
    b904:	and.w	r1, r1, #2147483648	; 0x80000000
    b908:	mov.w	r0, #0
    b90c:	pop	{r4, r5, r6, pc}
    b90e:	orrs.w	r6, r0, r1, lsl #1
    b912:	itte	eq
    b914:	moveq	r0, r2
    b916:	moveq	r1, r3
    b918:	orrsne.w	r6, r2, r3, lsl #1
    b91c:	beq.n	b952 <__aeabi_dmul+0x24a>
    b91e:	teq	r4, ip
    b922:	bne.n	b92a <__aeabi_dmul+0x222>
    b924:	orrs.w	r6, r0, r1, lsl #12
    b928:	bne.n	b952 <__aeabi_dmul+0x24a>
    b92a:	teq	r5, ip
    b92e:	bne.n	b93c <__aeabi_dmul+0x234>
    b930:	orrs.w	r6, r2, r3, lsl #12
    b934:	itt	ne
    b936:	movne	r0, r2
    b938:	movne	r1, r3
    b93a:	bne.n	b952 <__aeabi_dmul+0x24a>
    b93c:	eor.w	r1, r1, r3
    b940:	and.w	r1, r1, #2147483648	; 0x80000000
    b944:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b948:	orr.w	r1, r1, #15728640	; 0xf00000
    b94c:	mov.w	r0, #0
    b950:	pop	{r4, r5, r6, pc}
    b952:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b956:	orr.w	r1, r1, #16252928	; 0xf80000
    b95a:	pop	{r4, r5, r6, pc}

0000b95c <__aeabi_ddiv>:
    b95c:	push	{r4, r5, r6, lr}
    b95e:	mov.w	ip, #255	; 0xff
    b962:	orr.w	ip, ip, #1792	; 0x700
    b966:	ands.w	r4, ip, r1, lsr #20
    b96a:	ittte	ne
    b96c:	andsne.w	r5, ip, r3, lsr #20
    b970:	teqne	r4, ip
    b974:	teqne	r5, ip
    b978:	bleq	baca <__aeabi_ddiv+0x16e>
    b97c:	sub.w	r4, r4, r5
    b980:	eor.w	lr, r1, r3
    b984:	orrs.w	r5, r2, r3, lsl #12
    b988:	mov.w	r1, r1, lsl #12
    b98c:	beq.w	baa0 <__aeabi_ddiv+0x144>
    b990:	mov.w	r3, r3, lsl #12
    b994:	mov.w	r5, #268435456	; 0x10000000
    b998:	orr.w	r3, r5, r3, lsr #4
    b99c:	orr.w	r3, r3, r2, lsr #24
    b9a0:	mov.w	r2, r2, lsl #8
    b9a4:	orr.w	r5, r5, r1, lsr #4
    b9a8:	orr.w	r5, r5, r0, lsr #24
    b9ac:	mov.w	r6, r0, lsl #8
    b9b0:	and.w	r1, lr, #2147483648	; 0x80000000
    b9b4:	cmp	r5, r3
    b9b6:	it	eq
    b9b8:	cmpeq	r6, r2
    b9ba:	adc.w	r4, r4, #253	; 0xfd
    b9be:	add.w	r4, r4, #768	; 0x300
    b9c2:	bcs.n	b9ca <__aeabi_ddiv+0x6e>
    b9c4:	lsrs	r3, r3, #1
    b9c6:	mov.w	r2, r2, rrx
    b9ca:	subs	r6, r6, r2
    b9cc:	sbc.w	r5, r5, r3
    b9d0:	lsrs	r3, r3, #1
    b9d2:	mov.w	r2, r2, rrx
    b9d6:	mov.w	r0, #1048576	; 0x100000
    b9da:	mov.w	ip, #524288	; 0x80000
    b9de:	subs.w	lr, r6, r2
    b9e2:	sbcs.w	lr, r5, r3
    b9e6:	ittt	cs
    b9e8:	subcs	r6, r6, r2
    b9ea:	movcs	r5, lr
    b9ec:	orrcs.w	r0, r0, ip
    b9f0:	lsrs	r3, r3, #1
    b9f2:	mov.w	r2, r2, rrx
    b9f6:	subs.w	lr, r6, r2
    b9fa:	sbcs.w	lr, r5, r3
    b9fe:	ittt	cs
    ba00:	subcs	r6, r6, r2
    ba02:	movcs	r5, lr
    ba04:	orrcs.w	r0, r0, ip, lsr #1
    ba08:	lsrs	r3, r3, #1
    ba0a:	mov.w	r2, r2, rrx
    ba0e:	subs.w	lr, r6, r2
    ba12:	sbcs.w	lr, r5, r3
    ba16:	ittt	cs
    ba18:	subcs	r6, r6, r2
    ba1a:	movcs	r5, lr
    ba1c:	orrcs.w	r0, r0, ip, lsr #2
    ba20:	lsrs	r3, r3, #1
    ba22:	mov.w	r2, r2, rrx
    ba26:	subs.w	lr, r6, r2
    ba2a:	sbcs.w	lr, r5, r3
    ba2e:	ittt	cs
    ba30:	subcs	r6, r6, r2
    ba32:	movcs	r5, lr
    ba34:	orrcs.w	r0, r0, ip, lsr #3
    ba38:	orrs.w	lr, r5, r6
    ba3c:	beq.n	ba70 <__aeabi_ddiv+0x114>
    ba3e:	mov.w	r5, r5, lsl #4
    ba42:	orr.w	r5, r5, r6, lsr #28
    ba46:	mov.w	r6, r6, lsl #4
    ba4a:	mov.w	r3, r3, lsl #3
    ba4e:	orr.w	r3, r3, r2, lsr #29
    ba52:	mov.w	r2, r2, lsl #3
    ba56:	movs.w	ip, ip, lsr #4
    ba5a:	bne.n	b9de <__aeabi_ddiv+0x82>
    ba5c:	tst.w	r1, #1048576	; 0x100000
    ba60:	bne.n	ba7a <__aeabi_ddiv+0x11e>
    ba62:	orr.w	r1, r1, r0
    ba66:	mov.w	r0, #0
    ba6a:	mov.w	ip, #2147483648	; 0x80000000
    ba6e:	b.n	b9de <__aeabi_ddiv+0x82>
    ba70:	tst.w	r1, #1048576	; 0x100000
    ba74:	itt	eq
    ba76:	orreq	r1, r0
    ba78:	moveq	r0, #0
    ba7a:	subs.w	ip, r4, #253	; 0xfd
    ba7e:	it	hi
    ba80:	cmphi.w	ip, #1792	; 0x700
    ba84:	bhi.w	b7e6 <__aeabi_dmul+0xde>
    ba88:	subs.w	ip, r5, r3
    ba8c:	itt	eq
    ba8e:	subseq.w	ip, r6, r2
    ba92:	movseq.w	ip, r0, lsr #1
    ba96:	adcs.w	r0, r0, #0
    ba9a:	adc.w	r1, r1, r4, lsl #20
    ba9e:	pop	{r4, r5, r6, pc}
    baa0:	and.w	lr, lr, #2147483648	; 0x80000000
    baa4:	orr.w	r1, lr, r1, lsr #12
    baa8:	adds.w	r4, r4, ip, lsr #1
    baac:	ittt	gt
    baae:	rsbsgt	r5, r4, ip
    bab2:	orrgt.w	r1, r1, r4, lsl #20
    bab6:	popgt	{r4, r5, r6, pc}
    bab8:	orr.w	r1, r1, #1048576	; 0x100000
    babc:	mov.w	lr, #0
    bac0:	subs	r4, #1
    bac2:	b.n	b7e6 <__aeabi_dmul+0xde>
    bac4:	orr.w	lr, r5, r6
    bac8:	b.n	b7e6 <__aeabi_dmul+0xde>
    baca:	and.w	r5, ip, r3, lsr #20
    bace:	teq	r4, ip
    bad2:	it	eq
    bad4:	teqeq	r5, ip
    bad8:	beq.w	b952 <__aeabi_dmul+0x24a>
    badc:	teq	r4, ip
    bae0:	bne.n	baf8 <__aeabi_ddiv+0x19c>
    bae2:	orrs.w	r4, r0, r1, lsl #12
    bae6:	bne.w	b952 <__aeabi_dmul+0x24a>
    baea:	teq	r5, ip
    baee:	bne.w	b93c <__aeabi_dmul+0x234>
    baf2:	mov	r0, r2
    baf4:	mov	r1, r3
    baf6:	b.n	b952 <__aeabi_dmul+0x24a>
    baf8:	teq	r5, ip
    bafc:	bne.n	bb0c <__aeabi_ddiv+0x1b0>
    bafe:	orrs.w	r5, r2, r3, lsl #12
    bb02:	beq.w	b900 <__aeabi_dmul+0x1f8>
    bb06:	mov	r0, r2
    bb08:	mov	r1, r3
    bb0a:	b.n	b952 <__aeabi_dmul+0x24a>
    bb0c:	orrs.w	r6, r0, r1, lsl #1
    bb10:	it	ne
    bb12:	orrsne.w	r6, r2, r3, lsl #1
    bb16:	bne.w	b8a4 <__aeabi_dmul+0x19c>
    bb1a:	orrs.w	r4, r0, r1, lsl #1
    bb1e:	bne.w	b93c <__aeabi_dmul+0x234>
    bb22:	orrs.w	r5, r2, r3, lsl #1
    bb26:	bne.w	b900 <__aeabi_dmul+0x1f8>
    bb2a:	b.n	b952 <__aeabi_dmul+0x24a>

0000bb2c <__gedf2>:
    bb2c:	mov.w	ip, #4294967295
    bb30:	b.n	bb40 <__cmpdf2+0x4>
    bb32:	nop

0000bb34 <__ledf2>:
    bb34:	mov.w	ip, #1
    bb38:	b.n	bb40 <__cmpdf2+0x4>
    bb3a:	nop

0000bb3c <__cmpdf2>:
    bb3c:	mov.w	ip, #1
    bb40:	str.w	ip, [sp, #-4]!
    bb44:	mov.w	ip, r1, lsl #1
    bb48:	mvns.w	ip, ip, asr #21
    bb4c:	mov.w	ip, r3, lsl #1
    bb50:	it	ne
    bb52:	mvnsne.w	ip, ip, asr #21
    bb56:	beq.n	bb90 <__cmpdf2+0x54>
    bb58:	add	sp, #4
    bb5a:	orrs.w	ip, r0, r1, lsl #1
    bb5e:	ite	eq
    bb60:	orrseq.w	ip, r2, r3, lsl #1
    bb64:	teqne	r1, r3
    bb68:	ittt	eq
    bb6a:	teqeq	r0, r2
    bb6e:	moveq	r0, #0
    bb70:	bxeq	lr
    bb72:	cmn.w	r0, #0
    bb76:	teq	r1, r3
    bb7a:	it	pl
    bb7c:	cmppl	r1, r3
    bb7e:	it	eq
    bb80:	cmpeq	r0, r2
    bb82:	ite	cs
    bb84:	asrcs	r0, r3, #31
    bb86:	mvncc.w	r0, r3, asr #31
    bb8a:	orr.w	r0, r0, #1
    bb8e:	bx	lr
    bb90:	mov.w	ip, r1, lsl #1
    bb94:	mvns.w	ip, ip, asr #21
    bb98:	bne.n	bba0 <__cmpdf2+0x64>
    bb9a:	orrs.w	ip, r0, r1, lsl #12
    bb9e:	bne.n	bbb0 <__cmpdf2+0x74>
    bba0:	mov.w	ip, r3, lsl #1
    bba4:	mvns.w	ip, ip, asr #21
    bba8:	bne.n	bb58 <__cmpdf2+0x1c>
    bbaa:	orrs.w	ip, r2, r3, lsl #12
    bbae:	beq.n	bb58 <__cmpdf2+0x1c>
    bbb0:	ldr.w	r0, [sp], #4
    bbb4:	bx	lr
    bbb6:	nop

0000bbb8 <__aeabi_cdrcmple>:
    bbb8:	mov	ip, r0
    bbba:	mov	r0, r2
    bbbc:	mov	r2, ip
    bbbe:	mov	ip, r1
    bbc0:	mov	r1, r3
    bbc2:	mov	r3, ip
    bbc4:	b.n	bbc8 <__aeabi_cdcmpeq>
    bbc6:	nop

0000bbc8 <__aeabi_cdcmpeq>:
    bbc8:	push	{r0, lr}
    bbca:	bl	bb3c <__cmpdf2>
    bbce:	cmp	r0, #0
    bbd0:	it	mi
    bbd2:	cmnmi.w	r0, #0
    bbd6:	pop	{r0, pc}

0000bbd8 <__aeabi_dcmpeq>:
    bbd8:	str.w	lr, [sp, #-8]!
    bbdc:	bl	bbc8 <__aeabi_cdcmpeq>
    bbe0:	ite	eq
    bbe2:	moveq	r0, #1
    bbe4:	movne	r0, #0
    bbe6:	ldr.w	pc, [sp], #8
    bbea:	nop

0000bbec <__aeabi_dcmplt>:
    bbec:	str.w	lr, [sp, #-8]!
    bbf0:	bl	bbc8 <__aeabi_cdcmpeq>
    bbf4:	ite	cc
    bbf6:	movcc	r0, #1
    bbf8:	movcs	r0, #0
    bbfa:	ldr.w	pc, [sp], #8
    bbfe:	nop

0000bc00 <__aeabi_dcmple>:
    bc00:	str.w	lr, [sp, #-8]!
    bc04:	bl	bbc8 <__aeabi_cdcmpeq>
    bc08:	ite	ls
    bc0a:	movls	r0, #1
    bc0c:	movhi	r0, #0
    bc0e:	ldr.w	pc, [sp], #8
    bc12:	nop

0000bc14 <__aeabi_dcmpge>:
    bc14:	str.w	lr, [sp, #-8]!
    bc18:	bl	bbb8 <__aeabi_cdrcmple>
    bc1c:	ite	ls
    bc1e:	movls	r0, #1
    bc20:	movhi	r0, #0
    bc22:	ldr.w	pc, [sp], #8
    bc26:	nop

0000bc28 <__aeabi_dcmpgt>:
    bc28:	str.w	lr, [sp, #-8]!
    bc2c:	bl	bbb8 <__aeabi_cdrcmple>
    bc30:	ite	cc
    bc32:	movcc	r0, #1
    bc34:	movcs	r0, #0
    bc36:	ldr.w	pc, [sp], #8
    bc3a:	nop

0000bc3c <__aeabi_dcmpun>:
    bc3c:	mov.w	ip, r1, lsl #1
    bc40:	mvns.w	ip, ip, asr #21
    bc44:	bne.n	bc4c <__aeabi_dcmpun+0x10>
    bc46:	orrs.w	ip, r0, r1, lsl #12
    bc4a:	bne.n	bc62 <__aeabi_dcmpun+0x26>
    bc4c:	mov.w	ip, r3, lsl #1
    bc50:	mvns.w	ip, ip, asr #21
    bc54:	bne.n	bc5c <__aeabi_dcmpun+0x20>
    bc56:	orrs.w	ip, r2, r3, lsl #12
    bc5a:	bne.n	bc62 <__aeabi_dcmpun+0x26>
    bc5c:	mov.w	r0, #0
    bc60:	bx	lr
    bc62:	mov.w	r0, #1
    bc66:	bx	lr

0000bc68 <__aeabi_d2iz>:
    bc68:	mov.w	r2, r1, lsl #1
    bc6c:	adds.w	r2, r2, #2097152	; 0x200000
    bc70:	bcs.n	bc9e <__aeabi_d2iz+0x36>
    bc72:	bpl.n	bc98 <__aeabi_d2iz+0x30>
    bc74:	mvn.w	r3, #992	; 0x3e0
    bc78:	subs.w	r2, r3, r2, asr #21
    bc7c:	bls.n	bca4 <__aeabi_d2iz+0x3c>
    bc7e:	mov.w	r3, r1, lsl #11
    bc82:	orr.w	r3, r3, #2147483648	; 0x80000000
    bc86:	orr.w	r3, r3, r0, lsr #21
    bc8a:	tst.w	r1, #2147483648	; 0x80000000
    bc8e:	lsr.w	r0, r3, r2
    bc92:	it	ne
    bc94:	negne	r0, r0
    bc96:	bx	lr
    bc98:	mov.w	r0, #0
    bc9c:	bx	lr
    bc9e:	orrs.w	r0, r0, r1, lsl #12
    bca2:	bne.n	bcb0 <__aeabi_d2iz+0x48>
    bca4:	ands.w	r0, r1, #2147483648	; 0x80000000
    bca8:	it	eq
    bcaa:	mvneq.w	r0, #2147483648	; 0x80000000
    bcae:	bx	lr
    bcb0:	mov.w	r0, #0
    bcb4:	bx	lr
    bcb6:	nop

0000bcb8 <__aeabi_d2uiz>:
    bcb8:	lsls	r2, r1, #1
    bcba:	bcs.n	bce0 <__aeabi_d2uiz+0x28>
    bcbc:	adds.w	r2, r2, #2097152	; 0x200000
    bcc0:	bcs.n	bce6 <__aeabi_d2uiz+0x2e>
    bcc2:	bpl.n	bce0 <__aeabi_d2uiz+0x28>
    bcc4:	mvn.w	r3, #992	; 0x3e0
    bcc8:	subs.w	r2, r3, r2, asr #21
    bccc:	bmi.n	bcec <__aeabi_d2uiz+0x34>
    bcce:	mov.w	r3, r1, lsl #11
    bcd2:	orr.w	r3, r3, #2147483648	; 0x80000000
    bcd6:	orr.w	r3, r3, r0, lsr #21
    bcda:	lsr.w	r0, r3, r2
    bcde:	bx	lr
    bce0:	mov.w	r0, #0
    bce4:	bx	lr
    bce6:	orrs.w	r0, r0, r1, lsl #12
    bcea:	bne.n	bcf2 <__aeabi_d2uiz+0x3a>
    bcec:	mov.w	r0, #4294967295
    bcf0:	bx	lr
    bcf2:	mov.w	r0, #0
    bcf6:	bx	lr

0000bcf8 <__aeabi_d2f>:
    bcf8:	mov.w	r2, r1, lsl #1
    bcfc:	subs.w	r3, r2, #1879048192	; 0x70000000
    bd00:	itt	cs
    bd02:	subscs.w	ip, r3, #2097152	; 0x200000
    bd06:	rsbscs	ip, ip, #532676608	; 0x1fc00000
    bd0a:	bls.n	bd28 <__aeabi_d2f+0x30>
    bd0c:	and.w	ip, r1, #2147483648	; 0x80000000
    bd10:	mov.w	r2, r0, lsl #3
    bd14:	orr.w	r0, ip, r0, lsr #29
    bd18:	cmp.w	r2, #2147483648	; 0x80000000
    bd1c:	adc.w	r0, r0, r3, lsl #2
    bd20:	it	eq
    bd22:	biceq.w	r0, r0, #1
    bd26:	bx	lr
    bd28:	tst.w	r1, #1073741824	; 0x40000000
    bd2c:	bne.n	bd72 <__aeabi_d2f+0x7a>
    bd2e:	adds.w	r2, r3, #48234496	; 0x2e00000
    bd32:	itt	lt
    bd34:	andlt.w	r0, r1, #2147483648	; 0x80000000
    bd38:	bxlt	lr
    bd3a:	orr.w	r1, r1, #1048576	; 0x100000
    bd3e:	mov.w	r2, r2, lsr #21
    bd42:	rsb	r2, r2, #24
    bd46:	rsb	ip, r2, #32
    bd4a:	lsls.w	r3, r0, ip
    bd4e:	lsr.w	r0, r0, r2
    bd52:	it	ne
    bd54:	orrne.w	r0, r0, #1
    bd58:	mov.w	r3, r1, lsl #11
    bd5c:	mov.w	r3, r3, lsr #11
    bd60:	lsl.w	ip, r3, ip
    bd64:	orr.w	r0, r0, ip
    bd68:	lsr.w	r3, r3, r2
    bd6c:	mov.w	r3, r3, lsl #1
    bd70:	b.n	bd0c <__aeabi_d2f+0x14>
    bd72:	mvns.w	r3, r2, asr #21
    bd76:	bne.n	bd88 <__aeabi_d2f+0x90>
    bd78:	orrs.w	r3, r0, r1, lsl #12
    bd7c:	ittt	ne
    bd7e:	movne.w	r0, #2130706432	; 0x7f000000
    bd82:	orrne.w	r0, r0, #12582912	; 0xc00000
    bd86:	bxne	lr
    bd88:	and.w	r0, r1, #2147483648	; 0x80000000
    bd8c:	orr.w	r0, r0, #2130706432	; 0x7f000000
    bd90:	orr.w	r0, r0, #8388608	; 0x800000
    bd94:	bx	lr
    bd96:	nop

0000bd98 <__aeabi_frsub>:
    bd98:	eor.w	r0, r0, #2147483648	; 0x80000000
    bd9c:	b.n	bda4 <__addsf3>
    bd9e:	nop

0000bda0 <__aeabi_fsub>:
    bda0:	eor.w	r1, r1, #2147483648	; 0x80000000

0000bda4 <__addsf3>:
    bda4:	lsls	r2, r0, #1
    bda6:	itttt	ne
    bda8:	movsne.w	r3, r1, lsl #1
    bdac:	teqne	r2, r3
    bdb0:	mvnsne.w	ip, r2, asr #24
    bdb4:	mvnsne.w	ip, r3, asr #24
    bdb8:	beq.n	be90 <__addsf3+0xec>
    bdba:	mov.w	r2, r2, lsr #24
    bdbe:	rsbs	r3, r2, r3, lsr #24
    bdc2:	itttt	gt
    bdc4:	addgt	r2, r2, r3
    bdc6:	eorgt	r1, r0
    bdc8:	eorgt	r0, r1
    bdca:	eorgt	r1, r0
    bdcc:	it	lt
    bdce:	neglt	r3, r3
    bdd0:	cmp	r3, #25
    bdd2:	it	hi
    bdd4:	bxhi	lr
    bdd6:	tst.w	r0, #2147483648	; 0x80000000
    bdda:	orr.w	r0, r0, #8388608	; 0x800000
    bdde:	bic.w	r0, r0, #4278190080	; 0xff000000
    bde2:	it	ne
    bde4:	negne	r0, r0
    bde6:	tst.w	r1, #2147483648	; 0x80000000
    bdea:	orr.w	r1, r1, #8388608	; 0x800000
    bdee:	bic.w	r1, r1, #4278190080	; 0xff000000
    bdf2:	it	ne
    bdf4:	negne	r1, r1
    bdf6:	teq	r2, r3
    bdfa:	beq.n	be7c <__addsf3+0xd8>
    bdfc:	sub.w	r2, r2, #1
    be00:	asr.w	ip, r1, r3
    be04:	adds.w	r0, r0, ip
    be08:	rsb	r3, r3, #32
    be0c:	lsl.w	r1, r1, r3
    be10:	and.w	r3, r0, #2147483648	; 0x80000000
    be14:	bpl.n	be1c <__addsf3+0x78>
    be16:	negs	r1, r1
    be18:	sbc.w	r0, r0, r0, lsl #1
    be1c:	cmp.w	r0, #8388608	; 0x800000
    be20:	bcc.n	be4a <__addsf3+0xa6>
    be22:	cmp.w	r0, #16777216	; 0x1000000
    be26:	bcc.n	be36 <__addsf3+0x92>
    be28:	lsrs	r0, r0, #1
    be2a:	mov.w	r1, r1, rrx
    be2e:	add.w	r2, r2, #1
    be32:	cmp	r2, #254	; 0xfe
    be34:	bcs.n	beda <__addsf3+0x136>
    be36:	cmp.w	r1, #2147483648	; 0x80000000
    be3a:	adc.w	r0, r0, r2, lsl #23
    be3e:	it	eq
    be40:	biceq.w	r0, r0, #1
    be44:	orr.w	r0, r0, r3
    be48:	bx	lr
    be4a:	lsls	r1, r1, #1
    be4c:	adc.w	r0, r0, r0
    be50:	tst.w	r0, #8388608	; 0x800000
    be54:	sub.w	r2, r2, #1
    be58:	bne.n	be36 <__addsf3+0x92>
    be5a:	clz	ip, r0
    be5e:	sub.w	ip, ip, #8
    be62:	subs.w	r2, r2, ip
    be66:	lsl.w	r0, r0, ip
    be6a:	itet	ge
    be6c:	addge.w	r0, r0, r2, lsl #23
    be70:	neglt	r2, r2
    be72:	orrge	r0, r3
    be74:	itt	lt
    be76:	lsrlt	r0, r2
    be78:	orrlt	r0, r3
    be7a:	bx	lr
    be7c:	teq	r2, #0
    be80:	eor.w	r1, r1, #8388608	; 0x800000
    be84:	itte	eq
    be86:	eoreq.w	r0, r0, #8388608	; 0x800000
    be8a:	addeq	r2, #1
    be8c:	subne	r3, #1
    be8e:	b.n	bdfc <__addsf3+0x58>
    be90:	mov.w	r3, r1, lsl #1
    be94:	mvns.w	ip, r2, asr #24
    be98:	it	ne
    be9a:	mvnsne.w	ip, r3, asr #24
    be9e:	beq.n	bee4 <__addsf3+0x140>
    bea0:	teq	r2, r3
    bea4:	beq.n	beb0 <__addsf3+0x10c>
    bea6:	teq	r2, #0
    beaa:	it	eq
    beac:	moveq	r0, r1
    beae:	bx	lr
    beb0:	teq	r0, r1
    beb4:	itt	ne
    beb6:	movne	r0, #0
    beb8:	bxne	lr
    beba:	tst.w	r2, #4278190080	; 0xff000000
    bebe:	bne.n	beca <__addsf3+0x126>
    bec0:	lsls	r0, r0, #1
    bec2:	it	cs
    bec4:	orrcs.w	r0, r0, #2147483648	; 0x80000000
    bec8:	bx	lr
    beca:	adds.w	r2, r2, #33554432	; 0x2000000
    bece:	itt	cc
    bed0:	addcc.w	r0, r0, #8388608	; 0x800000
    bed4:	bxcc	lr
    bed6:	and.w	r3, r0, #2147483648	; 0x80000000
    beda:	orr.w	r0, r3, #2130706432	; 0x7f000000
    bede:	orr.w	r0, r0, #8388608	; 0x800000
    bee2:	bx	lr
    bee4:	mvns.w	r2, r2, asr #24
    bee8:	itet	ne
    beea:	movne	r0, r1
    beec:	mvnseq.w	r3, r3, asr #24
    bef0:	movne	r1, r0
    bef2:	lsls	r2, r0, #9
    bef4:	itte	eq
    bef6:	movseq.w	r3, r1, lsl #9
    befa:	teqeq	r0, r1
    befe:	orrne.w	r0, r0, #4194304	; 0x400000
    bf02:	bx	lr

0000bf04 <__aeabi_ui2f>:
    bf04:	mov.w	r3, #0
    bf08:	b.n	bf14 <__aeabi_i2f+0x8>
    bf0a:	nop

0000bf0c <__aeabi_i2f>:
    bf0c:	ands.w	r3, r0, #2147483648	; 0x80000000
    bf10:	it	mi
    bf12:	negmi	r0, r0
    bf14:	movs.w	ip, r0
    bf18:	it	eq
    bf1a:	bxeq	lr
    bf1c:	orr.w	r3, r3, #1258291200	; 0x4b000000
    bf20:	mov	r1, r0
    bf22:	mov.w	r0, #0
    bf26:	b.n	bf62 <__aeabi_l2f+0x2a>

0000bf28 <__aeabi_ul2f>:
    bf28:	orrs.w	r2, r0, r1
    bf2c:	it	eq
    bf2e:	bxeq	lr
    bf30:	mov.w	r3, #0
    bf34:	b.n	bf4c <__aeabi_l2f+0x14>
    bf36:	nop

0000bf38 <__aeabi_l2f>:
    bf38:	orrs.w	r2, r0, r1
    bf3c:	it	eq
    bf3e:	bxeq	lr
    bf40:	ands.w	r3, r1, #2147483648	; 0x80000000
    bf44:	bpl.n	bf4c <__aeabi_l2f+0x14>
    bf46:	negs	r0, r0
    bf48:	sbc.w	r1, r1, r1, lsl #1
    bf4c:	movs.w	ip, r1
    bf50:	ittt	eq
    bf52:	moveq	ip, r0
    bf54:	moveq	r1, r0
    bf56:	moveq	r0, #0
    bf58:	orr.w	r3, r3, #1526726656	; 0x5b000000
    bf5c:	it	eq
    bf5e:	subeq.w	r3, r3, #268435456	; 0x10000000
    bf62:	sub.w	r3, r3, #8388608	; 0x800000
    bf66:	clz	r2, ip
    bf6a:	subs	r2, #8
    bf6c:	sub.w	r3, r3, r2, lsl #23
    bf70:	blt.n	bf94 <__aeabi_l2f+0x5c>
    bf72:	lsl.w	ip, r1, r2
    bf76:	add	r3, ip
    bf78:	lsl.w	ip, r0, r2
    bf7c:	rsb	r2, r2, #32
    bf80:	cmp.w	ip, #2147483648	; 0x80000000
    bf84:	lsr.w	r2, r0, r2
    bf88:	adc.w	r0, r3, r2
    bf8c:	it	eq
    bf8e:	biceq.w	r0, r0, #1
    bf92:	bx	lr
    bf94:	add.w	r2, r2, #32
    bf98:	lsl.w	ip, r1, r2
    bf9c:	rsb	r2, r2, #32
    bfa0:	orrs.w	r0, r0, ip, lsl #1
    bfa4:	lsr.w	r2, r1, r2
    bfa8:	adc.w	r0, r3, r2
    bfac:	it	eq
    bfae:	biceq.w	r0, r0, ip, lsr #31
    bfb2:	bx	lr

0000bfb4 <__aeabi_ldivmod>:
    bfb4:	cbnz	r3, bfd6 <__aeabi_ldivmod+0x22>
    bfb6:	cbnz	r2, bfd6 <__aeabi_ldivmod+0x22>
    bfb8:	cmp	r1, #0
    bfba:	ittt	lt
    bfbc:	movlt	r0, #0
    bfbe:	movlt.w	r1, #2147483648	; 0x80000000
    bfc2:	blt.n	bfd2 <__aeabi_ldivmod+0x1e>
    bfc4:	it	eq
    bfc6:	cmpeq	r0, #0
    bfc8:	itt	ne
    bfca:	mvnne.w	r1, #2147483648	; 0x80000000
    bfce:	movne.w	r0, #4294967295
    bfd2:	b.w	c3d8 <__aeabi_idiv0>
    bfd6:	sub.w	ip, sp, #8
    bfda:	strd	ip, lr, [sp, #-16]!
    bfde:	cmp	r1, #0
    bfe0:	blt.n	bff6 <__aeabi_ldivmod+0x42>
    bfe2:	cmp	r3, #0
    bfe4:	blt.n	c01c <__aeabi_ldivmod+0x68>
    bfe6:	bl	c0f4 <__udivmoddi4>
    bfea:	ldr.w	lr, [sp, #4]
    bfee:	ldrd	r2, r3, [sp, #8]
    bff2:	add	sp, #16
    bff4:	bx	lr
    bff6:	negs	r0, r0
    bff8:	sbc.w	r1, r1, r1, lsl #1
    bffc:	cmp	r3, #0
    bffe:	blt.n	c038 <__aeabi_ldivmod+0x84>
    c000:	bl	c0f4 <__udivmoddi4>
    c004:	ldr.w	lr, [sp, #4]
    c008:	ldrd	r2, r3, [sp, #8]
    c00c:	add	sp, #16
    c00e:	negs	r0, r0
    c010:	sbc.w	r1, r1, r1, lsl #1
    c014:	negs	r2, r2
    c016:	sbc.w	r3, r3, r3, lsl #1
    c01a:	bx	lr
    c01c:	negs	r2, r2
    c01e:	sbc.w	r3, r3, r3, lsl #1
    c022:	bl	c0f4 <__udivmoddi4>
    c026:	ldr.w	lr, [sp, #4]
    c02a:	ldrd	r2, r3, [sp, #8]
    c02e:	add	sp, #16
    c030:	negs	r0, r0
    c032:	sbc.w	r1, r1, r1, lsl #1
    c036:	bx	lr
    c038:	negs	r2, r2
    c03a:	sbc.w	r3, r3, r3, lsl #1
    c03e:	bl	c0f4 <__udivmoddi4>
    c042:	ldr.w	lr, [sp, #4]
    c046:	ldrd	r2, r3, [sp, #8]
    c04a:	add	sp, #16
    c04c:	negs	r2, r2
    c04e:	sbc.w	r3, r3, r3, lsl #1
    c052:	bx	lr

0000c054 <__aeabi_uldivmod>:
    c054:	cbnz	r3, c06c <__aeabi_uldivmod+0x18>
    c056:	cbnz	r2, c06c <__aeabi_uldivmod+0x18>
    c058:	cmp	r1, #0
    c05a:	it	eq
    c05c:	cmpeq	r0, #0
    c05e:	itt	ne
    c060:	movne.w	r1, #4294967295
    c064:	movne.w	r0, #4294967295
    c068:	b.w	c3d8 <__aeabi_idiv0>
    c06c:	sub.w	ip, sp, #8
    c070:	strd	ip, lr, [sp, #-16]!
    c074:	bl	c0f4 <__udivmoddi4>
    c078:	ldr.w	lr, [sp, #4]
    c07c:	ldrd	r2, r3, [sp, #8]
    c080:	add	sp, #16
    c082:	bx	lr

0000c084 <__aeabi_f2lz>:
    c084:	vmov	s15, r0
    c088:	vcmpe.f32	s15, #0.0
    c08c:	vmrs	APSR_nzcv, fpscr
    c090:	bmi.n	c096 <__aeabi_f2lz+0x12>
    c092:	b.w	c0a8 <__aeabi_f2ulz>
    c096:	push	{r3, lr}
    c098:	eor.w	r0, r0, #2147483648	; 0x80000000
    c09c:	bl	c0a8 <__aeabi_f2ulz>
    c0a0:	negs	r0, r0
    c0a2:	sbc.w	r1, r1, r1, lsl #1
    c0a6:	pop	{r3, pc}

0000c0a8 <__aeabi_f2ulz>:
    c0a8:	push	{r4, r6, r7, lr}
    c0aa:	bl	b660 <__aeabi_f2d>
    c0ae:	movs	r2, #0
    c0b0:	ldr	r3, [pc, #56]	; (c0ec <__aeabi_f2ulz+0x44>)
    c0b2:	mov	r6, r0
    c0b4:	mov	r7, r1
    c0b6:	bl	b708 <__aeabi_dmul>
    c0ba:	bl	bcb8 <__aeabi_d2uiz>
    c0be:	mov	r4, r0
    c0c0:	bl	b61c <__aeabi_ui2d>
    c0c4:	movs	r2, #0
    c0c6:	ldr	r3, [pc, #40]	; (c0f0 <__aeabi_f2ulz+0x48>)
    c0c8:	bl	b708 <__aeabi_dmul>
    c0cc:	mov	r2, r0
    c0ce:	mov	r3, r1
    c0d0:	mov	r0, r6
    c0d2:	mov	r1, r7
    c0d4:	bl	b3a0 <__aeabi_dsub>
    c0d8:	bl	bcb8 <__aeabi_d2uiz>
    c0dc:	mov	r3, r4
    c0de:	movs	r2, #0
    c0e0:	orr.w	r2, r2, r0
    c0e4:	mov	r0, r2
    c0e6:	mov	r1, r3
    c0e8:	pop	{r4, r6, r7, pc}
    c0ea:	nop
    c0ec:	.word	0x3df00000
    c0f0:	.word	0x41f00000

0000c0f4 <__udivmoddi4>:
    c0f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c0f8:	mov	ip, r1
    c0fa:	mov	r6, r1
    c0fc:	mov	r4, r0
    c0fe:	ldr	r5, [sp, #32]
    c100:	cmp	r3, #0
    c102:	bne.n	c1a6 <__udivmoddi4+0xb2>
    c104:	cmp	r2, r1
    c106:	mov	r7, r2
    c108:	bls.n	c1e4 <__udivmoddi4+0xf0>
    c10a:	clz	lr, r2
    c10e:	cmp.w	lr, #0
    c112:	beq.n	c12c <__udivmoddi4+0x38>
    c114:	rsb	r4, lr, #32
    c118:	lsr.w	r4, r0, r4
    c11c:	lsl.w	r6, r1, lr
    c120:	orr.w	ip, r4, r6
    c124:	lsl.w	r7, r2, lr
    c128:	lsl.w	r4, r0, lr
    c12c:	mov.w	r9, r7, lsr #16
    c130:	lsrs	r2, r4, #16
    c132:	udiv	r0, ip, r9
    c136:	uxth.w	r8, r7
    c13a:	mls	r6, r9, r0, ip
    c13e:	orr.w	r6, r2, r6, lsl #16
    c142:	mul.w	r3, r0, r8
    c146:	cmp	r3, r6
    c148:	bls.n	c15e <__udivmoddi4+0x6a>
    c14a:	adds	r6, r6, r7
    c14c:	add.w	r2, r0, #4294967295
    c150:	bcs.w	c398 <__udivmoddi4+0x2a4>
    c154:	cmp	r3, r6
    c156:	bls.w	c398 <__udivmoddi4+0x2a4>
    c15a:	subs	r0, #2
    c15c:	add	r6, r7
    c15e:	subs	r6, r6, r3
    c160:	uxth	r2, r4
    c162:	udiv	r3, r6, r9
    c166:	mls	r6, r9, r3, r6
    c16a:	orr.w	r4, r2, r6, lsl #16
    c16e:	mul.w	r8, r3, r8
    c172:	cmp	r8, r4
    c174:	bls.n	c18a <__udivmoddi4+0x96>
    c176:	adds	r4, r4, r7
    c178:	add.w	r2, r3, #4294967295
    c17c:	bcs.w	c394 <__udivmoddi4+0x2a0>
    c180:	cmp	r8, r4
    c182:	bls.w	c394 <__udivmoddi4+0x2a0>
    c186:	subs	r3, #2
    c188:	add	r4, r7
    c18a:	rsb	r4, r8, r4
    c18e:	orr.w	r0, r3, r0, lsl #16
    c192:	movs	r1, #0
    c194:	cmp	r5, #0
    c196:	beq.n	c25e <__udivmoddi4+0x16a>
    c198:	lsr.w	r4, r4, lr
    c19c:	movs	r3, #0
    c19e:	str	r4, [r5, #0]
    c1a0:	str	r3, [r5, #4]
    c1a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c1a6:	cmp	r3, r1
    c1a8:	bls.n	c1ba <__udivmoddi4+0xc6>
    c1aa:	cmp	r5, #0
    c1ac:	beq.n	c25a <__udivmoddi4+0x166>
    c1ae:	movs	r1, #0
    c1b0:	stmia.w	r5, {r0, r6}
    c1b4:	mov	r0, r1
    c1b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c1ba:	clz	r1, r3
    c1be:	cmp	r1, #0
    c1c0:	bne.w	c2e4 <__udivmoddi4+0x1f0>
    c1c4:	cmp	r3, r6
    c1c6:	bcc.n	c1ce <__udivmoddi4+0xda>
    c1c8:	cmp	r2, r0
    c1ca:	bhi.w	c3be <__udivmoddi4+0x2ca>
    c1ce:	subs	r4, r0, r2
    c1d0:	sbc.w	r6, r6, r3
    c1d4:	movs	r0, #1
    c1d6:	mov	ip, r6
    c1d8:	cmp	r5, #0
    c1da:	beq.n	c25e <__udivmoddi4+0x16a>
    c1dc:	stmia.w	r5, {r4, ip}
    c1e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c1e4:	cbnz	r2, c1ec <__udivmoddi4+0xf8>
    c1e6:	movs	r7, #1
    c1e8:	udiv	r7, r7, r2
    c1ec:	clz	lr, r7
    c1f0:	cmp.w	lr, #0
    c1f4:	bne.n	c262 <__udivmoddi4+0x16e>
    c1f6:	subs	r3, r6, r7
    c1f8:	mov.w	r8, r7, lsr #16
    c1fc:	uxth.w	ip, r7
    c200:	movs	r1, #1
    c202:	udiv	r0, r3, r8
    c206:	lsrs	r2, r4, #16
    c208:	mls	r6, r8, r0, r3
    c20c:	orr.w	r6, r2, r6, lsl #16
    c210:	mul.w	r3, ip, r0
    c214:	cmp	r3, r6
    c216:	bls.n	c228 <__udivmoddi4+0x134>
    c218:	adds	r6, r6, r7
    c21a:	add.w	r2, r0, #4294967295
    c21e:	bcs.n	c226 <__udivmoddi4+0x132>
    c220:	cmp	r3, r6
    c222:	bhi.w	c3c2 <__udivmoddi4+0x2ce>
    c226:	mov	r0, r2
    c228:	subs	r6, r6, r3
    c22a:	uxth	r2, r4
    c22c:	udiv	r3, r6, r8
    c230:	mls	r6, r8, r3, r6
    c234:	orr.w	r4, r2, r6, lsl #16
    c238:	mul.w	ip, ip, r3
    c23c:	cmp	ip, r4
    c23e:	bls.n	c250 <__udivmoddi4+0x15c>
    c240:	adds	r4, r4, r7
    c242:	add.w	r2, r3, #4294967295
    c246:	bcs.n	c24e <__udivmoddi4+0x15a>
    c248:	cmp	ip, r4
    c24a:	bhi.w	c3b8 <__udivmoddi4+0x2c4>
    c24e:	mov	r3, r2
    c250:	rsb	r4, ip, r4
    c254:	orr.w	r0, r3, r0, lsl #16
    c258:	b.n	c194 <__udivmoddi4+0xa0>
    c25a:	mov	r1, r5
    c25c:	mov	r0, r5
    c25e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c262:	rsb	r1, lr, #32
    c266:	lsl.w	r3, r6, lr
    c26a:	lsl.w	r7, r7, lr
    c26e:	lsr.w	r9, r0, r1
    c272:	mov.w	r8, r7, lsr #16
    c276:	lsrs	r6, r1
    c278:	orr.w	r9, r9, r3
    c27c:	udiv	sl, r6, r8
    c280:	mov.w	r4, r9, lsr #16
    c284:	mls	r6, r8, sl, r6
    c288:	uxth.w	ip, r7
    c28c:	orr.w	r3, r4, r6, lsl #16
    c290:	mul.w	r2, sl, ip
    c294:	cmp	r2, r3
    c296:	lsl.w	r4, r0, lr
    c29a:	bls.n	c2b2 <__udivmoddi4+0x1be>
    c29c:	adds	r3, r3, r7
    c29e:	add.w	r1, sl, #4294967295
    c2a2:	bcs.w	c3b4 <__udivmoddi4+0x2c0>
    c2a6:	cmp	r2, r3
    c2a8:	bls.w	c3b4 <__udivmoddi4+0x2c0>
    c2ac:	sub.w	sl, sl, #2
    c2b0:	add	r3, r7
    c2b2:	subs	r3, r3, r2
    c2b4:	uxth.w	r9, r9
    c2b8:	udiv	r1, r3, r8
    c2bc:	mls	r3, r8, r1, r3
    c2c0:	orr.w	r3, r9, r3, lsl #16
    c2c4:	mul.w	r6, r1, ip
    c2c8:	cmp	r6, r3
    c2ca:	bls.n	c2dc <__udivmoddi4+0x1e8>
    c2cc:	adds	r3, r3, r7
    c2ce:	add.w	r2, r1, #4294967295
    c2d2:	bcs.n	c3ac <__udivmoddi4+0x2b8>
    c2d4:	cmp	r6, r3
    c2d6:	bls.n	c3ac <__udivmoddi4+0x2b8>
    c2d8:	subs	r1, #2
    c2da:	add	r3, r7
    c2dc:	subs	r3, r3, r6
    c2de:	orr.w	r1, r1, sl, lsl #16
    c2e2:	b.n	c202 <__udivmoddi4+0x10e>
    c2e4:	rsb	lr, r1, #32
    c2e8:	lsr.w	r4, r2, lr
    c2ec:	lsls	r3, r1
    c2ee:	orrs	r3, r4
    c2f0:	lsr.w	r7, r0, lr
    c2f4:	lsl.w	r4, r6, r1
    c2f8:	mov.w	ip, r3, lsr #16
    c2fc:	lsr.w	r6, r6, lr
    c300:	orrs	r4, r7
    c302:	udiv	r9, r6, ip
    c306:	lsrs	r7, r4, #16
    c308:	mls	r6, ip, r9, r6
    c30c:	uxth.w	r8, r3
    c310:	orr.w	r6, r7, r6, lsl #16
    c314:	mul.w	r7, r9, r8
    c318:	cmp	r7, r6
    c31a:	lsl.w	r2, r2, r1
    c31e:	lsl.w	sl, r0, r1
    c322:	bls.n	c336 <__udivmoddi4+0x242>
    c324:	adds	r6, r6, r3
    c326:	add.w	r0, r9, #4294967295
    c32a:	bcs.n	c3b0 <__udivmoddi4+0x2bc>
    c32c:	cmp	r7, r6
    c32e:	bls.n	c3b0 <__udivmoddi4+0x2bc>
    c330:	sub.w	r9, r9, #2
    c334:	add	r6, r3
    c336:	subs	r6, r6, r7
    c338:	uxth	r0, r4
    c33a:	udiv	r4, r6, ip
    c33e:	mls	r6, ip, r4, r6
    c342:	orr.w	r7, r0, r6, lsl #16
    c346:	mul.w	r8, r4, r8
    c34a:	cmp	r8, r7
    c34c:	bls.n	c35e <__udivmoddi4+0x26a>
    c34e:	adds	r7, r7, r3
    c350:	add.w	r0, r4, #4294967295
    c354:	bcs.n	c3a8 <__udivmoddi4+0x2b4>
    c356:	cmp	r8, r7
    c358:	bls.n	c3a8 <__udivmoddi4+0x2b4>
    c35a:	subs	r4, #2
    c35c:	add	r7, r3
    c35e:	orr.w	r0, r4, r9, lsl #16
    c362:	rsb	r7, r8, r7
    c366:	umull	r8, r9, r0, r2
    c36a:	cmp	r7, r9
    c36c:	mov	r4, r8
    c36e:	mov	r6, r9
    c370:	bcc.n	c39c <__udivmoddi4+0x2a8>
    c372:	beq.n	c3c8 <__udivmoddi4+0x2d4>
    c374:	cbz	r5, c3d0 <__udivmoddi4+0x2dc>
    c376:	subs.w	r3, sl, r4
    c37a:	sbc.w	r7, r7, r6
    c37e:	lsl.w	lr, r7, lr
    c382:	lsrs	r3, r1
    c384:	lsrs	r7, r1
    c386:	orr.w	r3, lr, r3
    c38a:	stmia.w	r5, {r3, r7}
    c38e:	movs	r1, #0
    c390:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c394:	mov	r3, r2
    c396:	b.n	c18a <__udivmoddi4+0x96>
    c398:	mov	r0, r2
    c39a:	b.n	c15e <__udivmoddi4+0x6a>
    c39c:	subs.w	r4, r8, r2
    c3a0:	sbc.w	r6, r9, r3
    c3a4:	subs	r0, #1
    c3a6:	b.n	c374 <__udivmoddi4+0x280>
    c3a8:	mov	r4, r0
    c3aa:	b.n	c35e <__udivmoddi4+0x26a>
    c3ac:	mov	r1, r2
    c3ae:	b.n	c2dc <__udivmoddi4+0x1e8>
    c3b0:	mov	r9, r0
    c3b2:	b.n	c336 <__udivmoddi4+0x242>
    c3b4:	mov	sl, r1
    c3b6:	b.n	c2b2 <__udivmoddi4+0x1be>
    c3b8:	subs	r3, #2
    c3ba:	add	r4, r7
    c3bc:	b.n	c250 <__udivmoddi4+0x15c>
    c3be:	mov	r0, r1
    c3c0:	b.n	c1d8 <__udivmoddi4+0xe4>
    c3c2:	subs	r0, #2
    c3c4:	add	r6, r7
    c3c6:	b.n	c228 <__udivmoddi4+0x134>
    c3c8:	cmp	sl, r8
    c3ca:	bcc.n	c39c <__udivmoddi4+0x2a8>
    c3cc:	mov	r6, r7
    c3ce:	b.n	c374 <__udivmoddi4+0x280>
    c3d0:	mov	r1, r5
    c3d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c3d6:	nop

0000c3d8 <__aeabi_idiv0>:
    c3d8:	bx	lr
    c3da:	nop

0000c3dc <__aeabi_atexit>:
    c3dc:	mov	r3, r1
    c3de:	mov	r1, r0
    c3e0:	mov	r0, r3
    c3e2:	b.w	c3e8 <__cxa_atexit>
    c3e6:	nop

0000c3e8 <__cxa_atexit>:
    c3e8:	mov	r3, r2
    c3ea:	mov	r2, r1
    c3ec:	mov	r1, r0
    c3ee:	movs	r0, #2
    c3f0:	b.w	109e8 <__register_exitproc>

0000c3f4 <__errno>:
    c3f4:	ldr	r3, [pc, #4]	; (c3fc <__errno+0x8>)
    c3f6:	ldr	r0, [r3, #0]
    c3f8:	bx	lr
    c3fa:	nop
    c3fc:	.word	0x1fff0d78

0000c400 <__libc_init_array>:
    c400:	push	{r4, r5, r6, lr}
    c402:	ldr	r6, [pc, #60]	; (c440 <__libc_init_array+0x40>)
    c404:	ldr	r5, [pc, #60]	; (c444 <__libc_init_array+0x44>)
    c406:	subs	r6, r6, r5
    c408:	asrs	r6, r6, #2
    c40a:	it	ne
    c40c:	movne	r4, #0
    c40e:	beq.n	c41c <__libc_init_array+0x1c>
    c410:	adds	r4, #1
    c412:	ldr.w	r3, [r5], #4
    c416:	blx	r3
    c418:	cmp	r6, r4
    c41a:	bne.n	c410 <__libc_init_array+0x10>
    c41c:	ldr	r6, [pc, #40]	; (c448 <__libc_init_array+0x48>)
    c41e:	ldr	r5, [pc, #44]	; (c44c <__libc_init_array+0x4c>)
    c420:	subs	r6, r6, r5
    c422:	bl	14474 <_init>
    c426:	asrs	r6, r6, #2
    c428:	it	ne
    c42a:	movne	r4, #0
    c42c:	beq.n	c43c <__libc_init_array+0x3c>
    c42e:	adds	r4, #1
    c430:	ldr.w	r3, [r5], #4
    c434:	blx	r3
    c436:	cmp	r6, r4
    c438:	bne.n	c42e <__libc_init_array+0x2e>
    c43a:	pop	{r4, r5, r6, pc}
    c43c:	pop	{r4, r5, r6, pc}
    c43e:	nop
    c440:	.word	0x00014480
    c444:	.word	0x00014480
    c448:	.word	0x0001448c
    c44c:	.word	0x00014480

0000c450 <__get_current_locale>:
    c450:	ldr	r2, [pc, #12]	; (c460 <__get_current_locale+0x10>)
    c452:	ldr	r3, [pc, #16]	; (c464 <__get_current_locale+0x14>)
    c454:	ldr	r2, [r2, #0]
    c456:	ldr	r0, [r2, #52]	; 0x34
    c458:	cmp	r0, #0
    c45a:	it	eq
    c45c:	moveq	r0, r3
    c45e:	bx	lr
    c460:	.word	0x1fff0d78
    c464:	.word	0x1fff0d7c

0000c468 <__locale_mb_cur_max>:
    c468:	ldr	r3, [pc, #16]	; (c47c <__locale_mb_cur_max+0x14>)
    c46a:	ldr	r2, [pc, #20]	; (c480 <__locale_mb_cur_max+0x18>)
    c46c:	ldr	r3, [r3, #0]
    c46e:	ldr	r3, [r3, #52]	; 0x34
    c470:	cmp	r3, #0
    c472:	it	eq
    c474:	moveq	r3, r2
    c476:	ldrb.w	r0, [r3, #296]	; 0x128
    c47a:	bx	lr
    c47c:	.word	0x1fff0d78
    c480:	.word	0x1fff0d7c

0000c484 <__locale_ctype_ptr_l>:
    c484:	ldr.w	r0, [r0, #236]	; 0xec
    c488:	bx	lr
    c48a:	nop

0000c48c <__locale_ctype_ptr>:
    c48c:	push	{r3, lr}
    c48e:	ldr	r3, [pc, #12]	; (c49c <__locale_ctype_ptr+0x10>)
    c490:	ldr	r0, [r3, #0]
    c492:	bl	c450 <__get_current_locale>
    c496:	ldr.w	r0, [r0, #236]	; 0xec
    c49a:	pop	{r3, pc}
    c49c:	.word	0x1fff0d78

0000c4a0 <malloc>:
    c4a0:	ldr	r3, [pc, #8]	; (c4ac <malloc+0xc>)
    c4a2:	mov	r1, r0
    c4a4:	ldr	r0, [r3, #0]
    c4a6:	b.w	c4c0 <_malloc_r>
    c4aa:	nop
    c4ac:	.word	0x1fff0d78

0000c4b0 <free>:
    c4b0:	ldr	r3, [pc, #8]	; (c4bc <free+0xc>)
    c4b2:	mov	r1, r0
    c4b4:	ldr	r0, [r3, #0]
    c4b6:	b.w	11ad0 <_free_r>
    c4ba:	nop
    c4bc:	.word	0x1fff0d78

0000c4c0 <_malloc_r>:
    c4c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4c4:	add.w	r5, r1, #11
    c4c8:	cmp	r5, #22
    c4ca:	sub	sp, #12
    c4cc:	mov	r6, r0
    c4ce:	bls.w	c610 <_malloc_r+0x150>
    c4d2:	bics.w	r5, r5, #7
    c4d6:	bmi.w	c658 <_malloc_r+0x198>
    c4da:	cmp	r1, r5
    c4dc:	bhi.w	c658 <_malloc_r+0x198>
    c4e0:	bl	cc24 <__malloc_lock>
    c4e4:	cmp.w	r5, #504	; 0x1f8
    c4e8:	bcc.w	ca24 <_malloc_r+0x564>
    c4ec:	lsrs	r3, r5, #9
    c4ee:	beq.w	c666 <_malloc_r+0x1a6>
    c4f2:	cmp	r3, #4
    c4f4:	bhi.w	c7fe <_malloc_r+0x33e>
    c4f8:	lsrs	r0, r5, #6
    c4fa:	add.w	lr, r0, #57	; 0x39
    c4fe:	mov.w	r3, lr, lsl #1
    c502:	adds	r0, #56	; 0x38
    c504:	ldr	r7, [pc, #784]	; (c818 <_malloc_r+0x358>)
    c506:	add.w	r3, r7, r3, lsl #2
    c50a:	sub.w	r1, r3, #8
    c50e:	ldr	r4, [r3, #4]
    c510:	cmp	r1, r4
    c512:	bne.n	c524 <_malloc_r+0x64>
    c514:	b.n	c670 <_malloc_r+0x1b0>
    c516:	cmp	r2, #0
    c518:	bge.w	c674 <_malloc_r+0x1b4>
    c51c:	ldr	r4, [r4, #12]
    c51e:	cmp	r1, r4
    c520:	beq.w	c670 <_malloc_r+0x1b0>
    c524:	ldr	r3, [r4, #4]
    c526:	bic.w	r3, r3, #3
    c52a:	subs	r2, r3, r5
    c52c:	cmp	r2, #15
    c52e:	ble.n	c516 <_malloc_r+0x56>
    c530:	ldr	r1, [pc, #740]	; (c818 <_malloc_r+0x358>)
    c532:	ldr	r4, [r7, #16]
    c534:	add.w	lr, r1, #8
    c538:	cmp	r4, lr
    c53a:	beq.w	c8a4 <_malloc_r+0x3e4>
    c53e:	ldr	r3, [r4, #4]
    c540:	bic.w	r3, r3, #3
    c544:	subs	r2, r3, r5
    c546:	cmp	r2, #15
    c548:	bgt.w	c87e <_malloc_r+0x3be>
    c54c:	cmp	r2, #0
    c54e:	str.w	lr, [r1, #20]
    c552:	str.w	lr, [r1, #16]
    c556:	bge.w	c696 <_malloc_r+0x1d6>
    c55a:	cmp.w	r3, #512	; 0x200
    c55e:	bcs.w	c830 <_malloc_r+0x370>
    c562:	lsrs	r3, r3, #3
    c564:	add.w	ip, r3, #1
    c568:	movs	r2, #1
    c56a:	asrs	r3, r3, #2
    c56c:	lsl.w	r3, r2, r3
    c570:	ldr	r2, [r1, #4]
    c572:	ldr.w	r8, [r1, ip, lsl #3]
    c576:	str.w	r8, [r4, #8]
    c57a:	add.w	r9, r1, ip, lsl #3
    c57e:	orrs	r2, r3
    c580:	sub.w	r3, r9, #8
    c584:	str	r3, [r4, #12]
    c586:	str	r2, [r1, #4]
    c588:	str.w	r4, [r1, ip, lsl #3]
    c58c:	str.w	r4, [r8, #12]
    c590:	asrs	r3, r0, #2
    c592:	movs	r4, #1
    c594:	lsls	r4, r3
    c596:	cmp	r4, r2
    c598:	bhi.w	c6b0 <_malloc_r+0x1f0>
    c59c:	tst	r4, r2
    c59e:	bne.n	c5ae <_malloc_r+0xee>
    c5a0:	bic.w	r0, r0, #3
    c5a4:	lsls	r4, r4, #1
    c5a6:	tst	r4, r2
    c5a8:	add.w	r0, r0, #4
    c5ac:	beq.n	c5a4 <_malloc_r+0xe4>
    c5ae:	add.w	r9, r7, r0, lsl #3
    c5b2:	mov	ip, r9
    c5b4:	mov	r8, r0
    c5b6:	ldr.w	r1, [ip, #12]
    c5ba:	cmp	ip, r1
    c5bc:	bne.n	c5ce <_malloc_r+0x10e>
    c5be:	b.n	c8a8 <_malloc_r+0x3e8>
    c5c0:	cmp	r2, #0
    c5c2:	bge.w	c8c8 <_malloc_r+0x408>
    c5c6:	ldr	r1, [r1, #12]
    c5c8:	cmp	ip, r1
    c5ca:	beq.w	c8a8 <_malloc_r+0x3e8>
    c5ce:	ldr	r3, [r1, #4]
    c5d0:	bic.w	r3, r3, #3
    c5d4:	subs	r2, r3, r5
    c5d6:	cmp	r2, #15
    c5d8:	ble.n	c5c0 <_malloc_r+0x100>
    c5da:	mov	r4, r1
    c5dc:	ldr.w	ip, [r1, #12]
    c5e0:	ldr.w	r8, [r4, #8]!
    c5e4:	adds	r3, r1, r5
    c5e6:	orr.w	r5, r5, #1
    c5ea:	str	r5, [r1, #4]
    c5ec:	orr.w	r1, r2, #1
    c5f0:	str.w	ip, [r8, #12]
    c5f4:	mov	r0, r6
    c5f6:	str.w	r8, [ip, #8]
    c5fa:	str	r3, [r7, #20]
    c5fc:	str	r3, [r7, #16]
    c5fe:	str.w	lr, [r3, #12]
    c602:	str.w	lr, [r3, #8]
    c606:	str	r1, [r3, #4]
    c608:	str	r2, [r3, r2]
    c60a:	bl	cc28 <__malloc_unlock>
    c60e:	b.n	c650 <_malloc_r+0x190>
    c610:	cmp	r1, #16
    c612:	bhi.n	c658 <_malloc_r+0x198>
    c614:	bl	cc24 <__malloc_lock>
    c618:	movs	r5, #16
    c61a:	movs	r3, #6
    c61c:	movs	r0, #2
    c61e:	ldr	r7, [pc, #504]	; (c818 <_malloc_r+0x358>)
    c620:	add.w	r3, r7, r3, lsl #2
    c624:	sub.w	r2, r3, #8
    c628:	ldr	r4, [r3, #4]
    c62a:	cmp	r4, r2
    c62c:	beq.w	c8ba <_malloc_r+0x3fa>
    c630:	ldr	r3, [r4, #4]
    c632:	ldr	r1, [r4, #12]
    c634:	ldr	r5, [r4, #8]
    c636:	bic.w	r3, r3, #3
    c63a:	add	r3, r4
    c63c:	mov	r0, r6
    c63e:	ldr	r2, [r3, #4]
    c640:	str	r1, [r5, #12]
    c642:	orr.w	r2, r2, #1
    c646:	str	r5, [r1, #8]
    c648:	str	r2, [r3, #4]
    c64a:	bl	cc28 <__malloc_unlock>
    c64e:	adds	r4, #8
    c650:	mov	r0, r4
    c652:	add	sp, #12
    c654:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c658:	movs	r4, #0
    c65a:	movs	r3, #12
    c65c:	mov	r0, r4
    c65e:	str	r3, [r6, #0]
    c660:	add	sp, #12
    c662:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c666:	movs	r3, #128	; 0x80
    c668:	mov.w	lr, #64	; 0x40
    c66c:	movs	r0, #63	; 0x3f
    c66e:	b.n	c504 <_malloc_r+0x44>
    c670:	mov	r0, lr
    c672:	b.n	c530 <_malloc_r+0x70>
    c674:	add	r3, r4
    c676:	ldr	r1, [r4, #12]
    c678:	ldr	r2, [r3, #4]
    c67a:	ldr	r5, [r4, #8]
    c67c:	orr.w	r2, r2, #1
    c680:	str	r1, [r5, #12]
    c682:	mov	r0, r6
    c684:	str	r5, [r1, #8]
    c686:	str	r2, [r3, #4]
    c688:	bl	cc28 <__malloc_unlock>
    c68c:	adds	r4, #8
    c68e:	mov	r0, r4
    c690:	add	sp, #12
    c692:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c696:	add	r3, r4
    c698:	mov	r0, r6
    c69a:	ldr	r2, [r3, #4]
    c69c:	orr.w	r2, r2, #1
    c6a0:	str	r2, [r3, #4]
    c6a2:	bl	cc28 <__malloc_unlock>
    c6a6:	adds	r4, #8
    c6a8:	mov	r0, r4
    c6aa:	add	sp, #12
    c6ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6b0:	ldr	r4, [r7, #8]
    c6b2:	ldr	r3, [r4, #4]
    c6b4:	bic.w	r8, r3, #3
    c6b8:	cmp	r8, r5
    c6ba:	bcc.n	c6c6 <_malloc_r+0x206>
    c6bc:	rsb	r3, r5, r8
    c6c0:	cmp	r3, #15
    c6c2:	bgt.w	c7de <_malloc_r+0x31e>
    c6c6:	ldr	r3, [pc, #340]	; (c81c <_malloc_r+0x35c>)
    c6c8:	ldr.w	r9, [pc, #352]	; c82c <_malloc_r+0x36c>
    c6cc:	ldr	r2, [r3, #0]
    c6ce:	ldr.w	r3, [r9]
    c6d2:	adds	r3, #1
    c6d4:	add	r2, r5
    c6d6:	add.w	sl, r4, r8
    c6da:	beq.w	c99e <_malloc_r+0x4de>
    c6de:	add.w	r2, r2, #4096	; 0x1000
    c6e2:	adds	r2, #15
    c6e4:	bic.w	r2, r2, #4080	; 0xff0
    c6e8:	bic.w	r2, r2, #15
    c6ec:	mov	r1, r2
    c6ee:	mov	r0, r6
    c6f0:	str	r2, [sp, #4]
    c6f2:	bl	d00c <_sbrk_r>
    c6f6:	cmp.w	r0, #4294967295
    c6fa:	mov	fp, r0
    c6fc:	ldr	r2, [sp, #4]
    c6fe:	beq.w	c9b2 <_malloc_r+0x4f2>
    c702:	cmp	sl, r0
    c704:	bhi.w	c900 <_malloc_r+0x440>
    c708:	ldr	r3, [pc, #276]	; (c820 <_malloc_r+0x360>)
    c70a:	ldr	r1, [r3, #0]
    c70c:	cmp	sl, fp
    c70e:	add	r1, r2
    c710:	str	r1, [r3, #0]
    c712:	beq.w	c9bc <_malloc_r+0x4fc>
    c716:	ldr.w	r0, [r9]
    c71a:	ldr.w	lr, [pc, #272]	; c82c <_malloc_r+0x36c>
    c71e:	adds	r0, #1
    c720:	ittet	ne
    c722:	rsbne	sl, sl, fp
    c726:	addne	r1, sl
    c728:	streq.w	fp, [lr]
    c72c:	strne	r1, [r3, #0]
    c72e:	ands.w	r1, fp, #7
    c732:	beq.w	c964 <_malloc_r+0x4a4>
    c736:	rsb	r0, r1, #8
    c73a:	rsb	r1, r1, #4096	; 0x1000
    c73e:	add	fp, r0
    c740:	adds	r1, #8
    c742:	add	r2, fp
    c744:	ubfx	r2, r2, #0, #12
    c748:	rsb	r9, r2, r1
    c74c:	mov	r1, r9
    c74e:	mov	r0, r6
    c750:	str	r3, [sp, #4]
    c752:	bl	d00c <_sbrk_r>
    c756:	adds	r3, r0, #1
    c758:	ldr	r3, [sp, #4]
    c75a:	beq.w	c9dc <_malloc_r+0x51c>
    c75e:	rsb	r2, fp, r0
    c762:	add	r2, r9
    c764:	orr.w	r2, r2, #1
    c768:	ldr	r1, [r3, #0]
    c76a:	str.w	fp, [r7, #8]
    c76e:	add	r1, r9
    c770:	cmp	r4, r7
    c772:	str.w	r2, [fp, #4]
    c776:	str	r1, [r3, #0]
    c778:	ldr.w	r9, [pc, #164]	; c820 <_malloc_r+0x360>
    c77c:	beq.n	c7ac <_malloc_r+0x2ec>
    c77e:	cmp.w	r8, #15
    c782:	bls.w	c980 <_malloc_r+0x4c0>
    c786:	ldr	r2, [r4, #4]
    c788:	sub.w	r3, r8, #12
    c78c:	bic.w	r3, r3, #7
    c790:	adds	r0, r4, r3
    c792:	and.w	r2, r2, #1
    c796:	mov.w	lr, #5
    c79a:	orrs	r2, r3
    c79c:	cmp	r3, #15
    c79e:	str	r2, [r4, #4]
    c7a0:	str.w	lr, [r0, #4]
    c7a4:	str.w	lr, [r0, #8]
    c7a8:	bhi.w	c9e4 <_malloc_r+0x524>
    c7ac:	ldr	r3, [pc, #116]	; (c824 <_malloc_r+0x364>)
    c7ae:	ldr	r4, [r7, #8]
    c7b0:	ldr	r2, [r3, #0]
    c7b2:	cmp	r1, r2
    c7b4:	it	hi
    c7b6:	strhi	r1, [r3, #0]
    c7b8:	ldr	r3, [pc, #108]	; (c828 <_malloc_r+0x368>)
    c7ba:	ldr	r2, [r3, #0]
    c7bc:	cmp	r1, r2
    c7be:	ldr	r2, [r4, #4]
    c7c0:	it	hi
    c7c2:	strhi	r1, [r3, #0]
    c7c4:	bic.w	r2, r2, #3
    c7c8:	cmp	r5, r2
    c7ca:	sub.w	r3, r2, r5
    c7ce:	bhi.n	c7d4 <_malloc_r+0x314>
    c7d0:	cmp	r3, #15
    c7d2:	bgt.n	c7de <_malloc_r+0x31e>
    c7d4:	mov	r0, r6
    c7d6:	bl	cc28 <__malloc_unlock>
    c7da:	movs	r4, #0
    c7dc:	b.n	c650 <_malloc_r+0x190>
    c7de:	adds	r2, r4, r5
    c7e0:	orr.w	r3, r3, #1
    c7e4:	orr.w	r5, r5, #1
    c7e8:	str	r5, [r4, #4]
    c7ea:	mov	r0, r6
    c7ec:	str	r2, [r7, #8]
    c7ee:	str	r3, [r2, #4]
    c7f0:	bl	cc28 <__malloc_unlock>
    c7f4:	adds	r4, #8
    c7f6:	mov	r0, r4
    c7f8:	add	sp, #12
    c7fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c7fe:	cmp	r3, #20
    c800:	bls.n	c8e6 <_malloc_r+0x426>
    c802:	cmp	r3, #84	; 0x54
    c804:	bhi.w	c950 <_malloc_r+0x490>
    c808:	lsrs	r0, r5, #12
    c80a:	add.w	lr, r0, #111	; 0x6f
    c80e:	mov.w	r3, lr, lsl #1
    c812:	adds	r0, #110	; 0x6e
    c814:	b.n	c504 <_malloc_r+0x44>
    c816:	nop
    c818:	.word	0x1fff0ee8
    c81c:	.word	0x200204d8
    c820:	.word	0x200204dc
    c824:	.word	0x200204d4
    c828:	.word	0x200204d0
    c82c:	.word	0x1fff12f4
    c830:	lsrs	r2, r3, #9
    c832:	cmp	r2, #4
    c834:	bls.n	c8f4 <_malloc_r+0x434>
    c836:	cmp	r2, #20
    c838:	bhi.w	c9a2 <_malloc_r+0x4e2>
    c83c:	add.w	r1, r2, #92	; 0x5c
    c840:	lsls	r1, r1, #1
    c842:	adds	r2, #91	; 0x5b
    c844:	add.w	ip, r7, r1, lsl #2
    c848:	ldr.w	r1, [r7, r1, lsl #2]
    c84c:	ldr.w	r8, [pc, #476]	; ca2c <_malloc_r+0x56c>
    c850:	sub.w	ip, ip, #8
    c854:	cmp	ip, r1
    c856:	beq.w	c96a <_malloc_r+0x4aa>
    c85a:	ldr	r2, [r1, #4]
    c85c:	bic.w	r2, r2, #3
    c860:	cmp	r3, r2
    c862:	bcs.n	c86a <_malloc_r+0x3aa>
    c864:	ldr	r1, [r1, #8]
    c866:	cmp	ip, r1
    c868:	bne.n	c85a <_malloc_r+0x39a>
    c86a:	ldr.w	ip, [r1, #12]
    c86e:	ldr	r2, [r7, #4]
    c870:	str.w	ip, [r4, #12]
    c874:	str	r1, [r4, #8]
    c876:	str.w	r4, [ip, #8]
    c87a:	str	r4, [r1, #12]
    c87c:	b.n	c590 <_malloc_r+0xd0>
    c87e:	adds	r3, r4, r5
    c880:	orr.w	r7, r2, #1
    c884:	orr.w	r5, r5, #1
    c888:	str	r5, [r4, #4]
    c88a:	mov	r0, r6
    c88c:	str	r3, [r1, #20]
    c88e:	str	r3, [r1, #16]
    c890:	str.w	lr, [r3, #12]
    c894:	str.w	lr, [r3, #8]
    c898:	str	r7, [r3, #4]
    c89a:	str	r2, [r3, r2]
    c89c:	adds	r4, #8
    c89e:	bl	cc28 <__malloc_unlock>
    c8a2:	b.n	c650 <_malloc_r+0x190>
    c8a4:	ldr	r2, [r1, #4]
    c8a6:	b.n	c590 <_malloc_r+0xd0>
    c8a8:	add.w	r8, r8, #1
    c8ac:	tst.w	r8, #3
    c8b0:	add.w	ip, ip, #8
    c8b4:	bne.w	c5b6 <_malloc_r+0xf6>
    c8b8:	b.n	c91c <_malloc_r+0x45c>
    c8ba:	ldr	r4, [r3, #12]
    c8bc:	cmp	r3, r4
    c8be:	it	eq
    c8c0:	addeq	r0, #2
    c8c2:	beq.w	c530 <_malloc_r+0x70>
    c8c6:	b.n	c630 <_malloc_r+0x170>
    c8c8:	add	r3, r1
    c8ca:	mov	r4, r1
    c8cc:	ldr	r2, [r3, #4]
    c8ce:	ldr	r1, [r1, #12]
    c8d0:	ldr.w	r5, [r4, #8]!
    c8d4:	orr.w	r2, r2, #1
    c8d8:	str	r2, [r3, #4]
    c8da:	mov	r0, r6
    c8dc:	str	r1, [r5, #12]
    c8de:	str	r5, [r1, #8]
    c8e0:	bl	cc28 <__malloc_unlock>
    c8e4:	b.n	c650 <_malloc_r+0x190>
    c8e6:	add.w	lr, r3, #92	; 0x5c
    c8ea:	add.w	r0, r3, #91	; 0x5b
    c8ee:	mov.w	r3, lr, lsl #1
    c8f2:	b.n	c504 <_malloc_r+0x44>
    c8f4:	lsrs	r2, r3, #6
    c8f6:	add.w	r1, r2, #57	; 0x39
    c8fa:	lsls	r1, r1, #1
    c8fc:	adds	r2, #56	; 0x38
    c8fe:	b.n	c844 <_malloc_r+0x384>
    c900:	cmp	r4, r7
    c902:	ldr	r3, [pc, #296]	; (ca2c <_malloc_r+0x56c>)
    c904:	beq.w	c708 <_malloc_r+0x248>
    c908:	ldr	r4, [r3, #8]
    c90a:	ldr	r2, [r4, #4]
    c90c:	bic.w	r2, r2, #3
    c910:	b.n	c7c8 <_malloc_r+0x308>
    c912:	ldr.w	r3, [r9], #-8
    c916:	cmp	r9, r3
    c918:	bne.w	ca20 <_malloc_r+0x560>
    c91c:	tst.w	r0, #3
    c920:	add.w	r0, r0, #4294967295
    c924:	bne.n	c912 <_malloc_r+0x452>
    c926:	ldr	r3, [r7, #4]
    c928:	bic.w	r3, r3, r4
    c92c:	str	r3, [r7, #4]
    c92e:	lsls	r4, r4, #1
    c930:	cmp	r4, r3
    c932:	bhi.w	c6b0 <_malloc_r+0x1f0>
    c936:	cmp	r4, #0
    c938:	beq.w	c6b0 <_malloc_r+0x1f0>
    c93c:	tst	r4, r3
    c93e:	mov	r0, r8
    c940:	bne.w	c5ae <_malloc_r+0xee>
    c944:	lsls	r4, r4, #1
    c946:	tst	r4, r3
    c948:	add.w	r0, r0, #4
    c94c:	beq.n	c944 <_malloc_r+0x484>
    c94e:	b.n	c5ae <_malloc_r+0xee>
    c950:	cmp.w	r3, #340	; 0x154
    c954:	bhi.n	c988 <_malloc_r+0x4c8>
    c956:	lsrs	r0, r5, #15
    c958:	add.w	lr, r0, #120	; 0x78
    c95c:	mov.w	r3, lr, lsl #1
    c960:	adds	r0, #119	; 0x77
    c962:	b.n	c504 <_malloc_r+0x44>
    c964:	mov.w	r1, #4096	; 0x1000
    c968:	b.n	c742 <_malloc_r+0x282>
    c96a:	movs	r1, #1
    c96c:	ldr.w	r3, [r8, #4]
    c970:	asrs	r2, r2, #2
    c972:	lsl.w	r2, r1, r2
    c976:	orrs	r2, r3
    c978:	str.w	r2, [r8, #4]
    c97c:	mov	r1, ip
    c97e:	b.n	c870 <_malloc_r+0x3b0>
    c980:	movs	r3, #1
    c982:	str.w	r3, [fp, #4]
    c986:	b.n	c7d4 <_malloc_r+0x314>
    c988:	movw	r2, #1364	; 0x554
    c98c:	cmp	r3, r2
    c98e:	bhi.n	c9d2 <_malloc_r+0x512>
    c990:	lsrs	r0, r5, #18
    c992:	add.w	lr, r0, #125	; 0x7d
    c996:	mov.w	r3, lr, lsl #1
    c99a:	adds	r0, #124	; 0x7c
    c99c:	b.n	c504 <_malloc_r+0x44>
    c99e:	adds	r2, #16
    c9a0:	b.n	c6ec <_malloc_r+0x22c>
    c9a2:	cmp	r2, #84	; 0x54
    c9a4:	bhi.n	c9f4 <_malloc_r+0x534>
    c9a6:	lsrs	r2, r3, #12
    c9a8:	add.w	r1, r2, #111	; 0x6f
    c9ac:	lsls	r1, r1, #1
    c9ae:	adds	r2, #110	; 0x6e
    c9b0:	b.n	c844 <_malloc_r+0x384>
    c9b2:	ldr	r4, [r7, #8]
    c9b4:	ldr	r2, [r4, #4]
    c9b6:	bic.w	r2, r2, #3
    c9ba:	b.n	c7c8 <_malloc_r+0x308>
    c9bc:	ubfx	r0, sl, #0, #12
    c9c0:	cmp	r0, #0
    c9c2:	bne.w	c716 <_malloc_r+0x256>
    c9c6:	add	r2, r8
    c9c8:	ldr	r3, [r7, #8]
    c9ca:	orr.w	r2, r2, #1
    c9ce:	str	r2, [r3, #4]
    c9d0:	b.n	c7ac <_malloc_r+0x2ec>
    c9d2:	movs	r3, #254	; 0xfe
    c9d4:	mov.w	lr, #127	; 0x7f
    c9d8:	movs	r0, #126	; 0x7e
    c9da:	b.n	c504 <_malloc_r+0x44>
    c9dc:	movs	r2, #1
    c9de:	mov.w	r9, #0
    c9e2:	b.n	c768 <_malloc_r+0x2a8>
    c9e4:	add.w	r1, r4, #8
    c9e8:	mov	r0, r6
    c9ea:	bl	11ad0 <_free_r>
    c9ee:	ldr.w	r1, [r9]
    c9f2:	b.n	c7ac <_malloc_r+0x2ec>
    c9f4:	cmp.w	r2, #340	; 0x154
    c9f8:	bhi.n	ca06 <_malloc_r+0x546>
    c9fa:	lsrs	r2, r3, #15
    c9fc:	add.w	r1, r2, #120	; 0x78
    ca00:	lsls	r1, r1, #1
    ca02:	adds	r2, #119	; 0x77
    ca04:	b.n	c844 <_malloc_r+0x384>
    ca06:	movw	r1, #1364	; 0x554
    ca0a:	cmp	r2, r1
    ca0c:	bhi.n	ca1a <_malloc_r+0x55a>
    ca0e:	lsrs	r2, r3, #18
    ca10:	add.w	r1, r2, #125	; 0x7d
    ca14:	lsls	r1, r1, #1
    ca16:	adds	r2, #124	; 0x7c
    ca18:	b.n	c844 <_malloc_r+0x384>
    ca1a:	movs	r1, #254	; 0xfe
    ca1c:	movs	r2, #126	; 0x7e
    ca1e:	b.n	c844 <_malloc_r+0x384>
    ca20:	ldr	r3, [r7, #4]
    ca22:	b.n	c92e <_malloc_r+0x46e>
    ca24:	lsrs	r0, r5, #3
    ca26:	adds	r3, r0, #1
    ca28:	lsls	r3, r3, #1
    ca2a:	b.n	c61e <_malloc_r+0x15e>
    ca2c:	.word	0x1fff0ee8

0000ca30 <__ascii_mbtowc>:
    ca30:	sub	sp, #8
    ca32:	cbz	r1, ca48 <__ascii_mbtowc+0x18>
    ca34:	cbz	r2, ca4e <__ascii_mbtowc+0x1e>
    ca36:	cbz	r3, ca54 <__ascii_mbtowc+0x24>
    ca38:	ldrb	r3, [r2, #0]
    ca3a:	str	r3, [r1, #0]
    ca3c:	ldrb	r2, [r2, #0]
    ca3e:	adds	r0, r2, #0
    ca40:	it	ne
    ca42:	movne	r0, #1
    ca44:	add	sp, #8
    ca46:	bx	lr
    ca48:	add	r1, sp, #4
    ca4a:	cmp	r2, #0
    ca4c:	bne.n	ca36 <__ascii_mbtowc+0x6>
    ca4e:	mov	r0, r2
    ca50:	add	sp, #8
    ca52:	bx	lr
    ca54:	mvn.w	r0, #1
    ca58:	b.n	ca44 <__ascii_mbtowc+0x14>
    ca5a:	nop

0000ca5c <memcmp>:
    ca5c:	cmp	r2, #3
    ca5e:	push	{r4, r5, r6}
    ca60:	bls.n	cab0 <memcmp+0x54>
    ca62:	orr.w	r3, r0, r1
    ca66:	lsls	r3, r3, #30
    ca68:	beq.n	ca8e <memcmp+0x32>
    ca6a:	ldrb	r4, [r0, #0]
    ca6c:	ldrb	r5, [r1, #0]
    ca6e:	cmp	r4, r5
    ca70:	bne.n	cab8 <memcmp+0x5c>
    ca72:	add	r2, r0
    ca74:	adds	r3, r0, #1
    ca76:	b.n	ca84 <memcmp+0x28>
    ca78:	ldrb.w	r4, [r3], #1
    ca7c:	ldrb.w	r5, [r1, #1]!
    ca80:	cmp	r4, r5
    ca82:	bne.n	cab8 <memcmp+0x5c>
    ca84:	cmp	r3, r2
    ca86:	bne.n	ca78 <memcmp+0x1c>
    ca88:	movs	r0, #0
    ca8a:	pop	{r4, r5, r6}
    ca8c:	bx	lr
    ca8e:	mov	r4, r1
    ca90:	mov	r3, r0
    ca92:	ldr	r6, [r3, #0]
    ca94:	ldr	r5, [r4, #0]
    ca96:	cmp	r6, r5
    ca98:	mov	r0, r3
    ca9a:	mov	r1, r4
    ca9c:	add.w	r3, r3, #4
    caa0:	add.w	r4, r4, #4
    caa4:	bne.n	ca6a <memcmp+0xe>
    caa6:	subs	r2, #4
    caa8:	cmp	r2, #3
    caaa:	mov	r0, r3
    caac:	mov	r1, r4
    caae:	bhi.n	ca92 <memcmp+0x36>
    cab0:	cmp	r2, #0
    cab2:	bne.n	ca6a <memcmp+0xe>
    cab4:	mov	r0, r2
    cab6:	b.n	ca8a <memcmp+0x2e>
    cab8:	subs	r0, r4, r5
    caba:	pop	{r4, r5, r6}
    cabc:	bx	lr
    cabe:	nop

0000cac0 <memmove>:
    cac0:	cmp	r0, r1
    cac2:	push	{r4, r5, r6, r7, lr}
    cac4:	bls.n	cae2 <memmove+0x22>
    cac6:	adds	r3, r1, r2
    cac8:	cmp	r0, r3
    caca:	bcs.n	cae2 <memmove+0x22>
    cacc:	adds	r1, r0, r2
    cace:	cmp	r2, #0
    cad0:	beq.n	cb76 <memmove+0xb6>
    cad2:	subs	r2, r3, r2
    cad4:	ldrb.w	r4, [r3, #-1]!
    cad8:	strb.w	r4, [r1, #-1]!
    cadc:	cmp	r3, r2
    cade:	bne.n	cad4 <memmove+0x14>
    cae0:	pop	{r4, r5, r6, r7, pc}
    cae2:	cmp	r2, #15
    cae4:	bls.n	cb78 <memmove+0xb8>
    cae6:	orr.w	r3, r1, r0
    caea:	lsls	r3, r3, #30
    caec:	bne.n	cb7c <memmove+0xbc>
    caee:	add.w	r4, r0, #16
    caf2:	add.w	r3, r1, #16
    caf6:	mov	r5, r2
    caf8:	ldr.w	r6, [r3, #-16]
    cafc:	str.w	r6, [r4, #-16]
    cb00:	ldr.w	r6, [r3, #-12]
    cb04:	str.w	r6, [r4, #-12]
    cb08:	ldr.w	r6, [r3, #-8]
    cb0c:	str.w	r6, [r4, #-8]
    cb10:	subs	r5, #16
    cb12:	ldr.w	r6, [r3, #-4]
    cb16:	str.w	r6, [r4, #-4]
    cb1a:	cmp	r5, #15
    cb1c:	add.w	r3, r3, #16
    cb20:	add.w	r4, r4, #16
    cb24:	bhi.n	caf8 <memmove+0x38>
    cb26:	sub.w	r3, r2, #16
    cb2a:	bic.w	r3, r3, #15
    cb2e:	and.w	lr, r2, #15
    cb32:	adds	r3, #16
    cb34:	cmp.w	lr, #3
    cb38:	add	r1, r3
    cb3a:	add	r3, r0
    cb3c:	bls.n	cb82 <memmove+0xc2>
    cb3e:	subs	r6, r3, #4
    cb40:	mov	r5, r1
    cb42:	mov	r4, lr
    cb44:	subs	r4, #4
    cb46:	ldr.w	r7, [r5], #4
    cb4a:	str.w	r7, [r6, #4]!
    cb4e:	cmp	r4, #3
    cb50:	bhi.n	cb44 <memmove+0x84>
    cb52:	sub.w	r4, lr, #4
    cb56:	bic.w	r4, r4, #3
    cb5a:	adds	r4, #4
    cb5c:	add	r3, r4
    cb5e:	add	r1, r4
    cb60:	and.w	r2, r2, #3
    cb64:	cbz	r2, cb80 <memmove+0xc0>
    cb66:	subs	r3, #1
    cb68:	add	r2, r1
    cb6a:	ldrb.w	r4, [r1], #1
    cb6e:	strb.w	r4, [r3, #1]!
    cb72:	cmp	r2, r1
    cb74:	bne.n	cb6a <memmove+0xaa>
    cb76:	pop	{r4, r5, r6, r7, pc}
    cb78:	mov	r3, r0
    cb7a:	b.n	cb64 <memmove+0xa4>
    cb7c:	mov	r3, r0
    cb7e:	b.n	cb66 <memmove+0xa6>
    cb80:	pop	{r4, r5, r6, r7, pc}
    cb82:	mov	r2, lr
    cb84:	b.n	cb64 <memmove+0xa4>
    cb86:	nop

0000cb88 <memset>:
    cb88:	push	{r4, r5, r6}
    cb8a:	lsls	r4, r0, #30
    cb8c:	beq.n	cc1c <memset+0x94>
    cb8e:	subs	r4, r2, #1
    cb90:	cmp	r2, #0
    cb92:	beq.n	cc18 <memset+0x90>
    cb94:	uxtb	r5, r1
    cb96:	mov	r3, r0
    cb98:	b.n	cba0 <memset+0x18>
    cb9a:	subs	r2, r4, #1
    cb9c:	cbz	r4, cc18 <memset+0x90>
    cb9e:	mov	r4, r2
    cba0:	strb.w	r5, [r3], #1
    cba4:	lsls	r2, r3, #30
    cba6:	bne.n	cb9a <memset+0x12>
    cba8:	cmp	r4, #3
    cbaa:	bls.n	cc0a <memset+0x82>
    cbac:	uxtb	r5, r1
    cbae:	orr.w	r5, r5, r5, lsl #8
    cbb2:	cmp	r4, #15
    cbb4:	orr.w	r5, r5, r5, lsl #16
    cbb8:	bls.n	cbee <memset+0x66>
    cbba:	add.w	r2, r3, #16
    cbbe:	mov	r6, r4
    cbc0:	subs	r6, #16
    cbc2:	cmp	r6, #15
    cbc4:	str.w	r5, [r2, #-16]
    cbc8:	str.w	r5, [r2, #-12]
    cbcc:	str.w	r5, [r2, #-8]
    cbd0:	str.w	r5, [r2, #-4]
    cbd4:	add.w	r2, r2, #16
    cbd8:	bhi.n	cbc0 <memset+0x38>
    cbda:	sub.w	r2, r4, #16
    cbde:	bic.w	r2, r2, #15
    cbe2:	and.w	r4, r4, #15
    cbe6:	adds	r2, #16
    cbe8:	cmp	r4, #3
    cbea:	add	r3, r2
    cbec:	bls.n	cc0a <memset+0x82>
    cbee:	mov	r6, r3
    cbf0:	mov	r2, r4
    cbf2:	subs	r2, #4
    cbf4:	cmp	r2, #3
    cbf6:	str.w	r5, [r6], #4
    cbfa:	bhi.n	cbf2 <memset+0x6a>
    cbfc:	subs	r2, r4, #4
    cbfe:	bic.w	r2, r2, #3
    cc02:	adds	r2, #4
    cc04:	add	r3, r2
    cc06:	and.w	r4, r4, #3
    cc0a:	cbz	r4, cc18 <memset+0x90>
    cc0c:	uxtb	r1, r1
    cc0e:	add	r4, r3
    cc10:	strb.w	r1, [r3], #1
    cc14:	cmp	r3, r4
    cc16:	bne.n	cc10 <memset+0x88>
    cc18:	pop	{r4, r5, r6}
    cc1a:	bx	lr
    cc1c:	mov	r4, r2
    cc1e:	mov	r3, r0
    cc20:	b.n	cba8 <memset+0x20>
    cc22:	nop

0000cc24 <__malloc_lock>:
    cc24:	bx	lr
    cc26:	nop

0000cc28 <__malloc_unlock>:
    cc28:	bx	lr
    cc2a:	nop

0000cc2c <_realloc_r>:
    cc2c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc30:	mov	r7, r2
    cc32:	sub	sp, #12
    cc34:	cmp	r1, #0
    cc36:	beq.w	cdbc <_realloc_r+0x190>
    cc3a:	mov	r6, r1
    cc3c:	mov	r9, r0
    cc3e:	add.w	r5, r7, #11
    cc42:	bl	cc24 <__malloc_lock>
    cc46:	ldr.w	lr, [r6, #-4]
    cc4a:	cmp	r5, #22
    cc4c:	bic.w	r4, lr, #3
    cc50:	sub.w	r8, r6, #8
    cc54:	bhi.n	ccd8 <_realloc_r+0xac>
    cc56:	movs	r2, #16
    cc58:	mov	r5, r2
    cc5a:	cmp	r7, r5
    cc5c:	bhi.n	cce2 <_realloc_r+0xb6>
    cc5e:	cmp	r4, r2
    cc60:	bge.n	cd4e <_realloc_r+0x122>
    cc62:	ldr	r3, [pc, #804]	; (cf88 <_realloc_r+0x35c>)
    cc64:	ldr	r1, [r3, #8]
    cc66:	add.w	r0, r8, r4
    cc6a:	cmp	r0, r1
    cc6c:	ldr	r1, [r0, #4]
    cc6e:	beq.w	ce24 <_realloc_r+0x1f8>
    cc72:	bic.w	r3, r1, #1
    cc76:	add	r3, r0
    cc78:	ldr	r3, [r3, #4]
    cc7a:	lsls	r3, r3, #31
    cc7c:	bpl.n	cd7a <_realloc_r+0x14e>
    cc7e:	tst.w	lr, #1
    cc82:	beq.n	ccf0 <_realloc_r+0xc4>
    cc84:	mov	r1, r7
    cc86:	mov	r0, r9
    cc88:	bl	c4c0 <_malloc_r>
    cc8c:	mov	r7, r0
    cc8e:	cbz	r0, ccca <_realloc_r+0x9e>
    cc90:	ldr.w	r3, [r6, #-4]
    cc94:	bic.w	r3, r3, #1
    cc98:	add	r3, r8
    cc9a:	sub.w	r2, r0, #8
    cc9e:	cmp	r2, r3
    cca0:	beq.w	cf2c <_realloc_r+0x300>
    cca4:	subs	r2, r4, #4
    cca6:	cmp	r2, #36	; 0x24
    cca8:	bhi.w	cf0e <_realloc_r+0x2e2>
    ccac:	cmp	r2, #19
    ccae:	bhi.w	ceba <_realloc_r+0x28e>
    ccb2:	mov	r3, r0
    ccb4:	mov	r2, r6
    ccb6:	ldr	r1, [r2, #0]
    ccb8:	str	r1, [r3, #0]
    ccba:	ldr	r1, [r2, #4]
    ccbc:	str	r1, [r3, #4]
    ccbe:	ldr	r2, [r2, #8]
    ccc0:	str	r2, [r3, #8]
    ccc2:	mov	r1, r6
    ccc4:	mov	r0, r9
    ccc6:	bl	11ad0 <_free_r>
    ccca:	mov	r0, r9
    cccc:	bl	cc28 <__malloc_unlock>
    ccd0:	mov	r0, r7
    ccd2:	add	sp, #12
    ccd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ccd8:	bic.w	r5, r5, #7
    ccdc:	cmp	r5, #0
    ccde:	mov	r2, r5
    cce0:	bge.n	cc5a <_realloc_r+0x2e>
    cce2:	movs	r3, #12
    cce4:	movs	r0, #0
    cce6:	str.w	r3, [r9]
    ccea:	add	sp, #12
    ccec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ccf0:	ldr.w	r3, [r6, #-8]
    ccf4:	rsb	sl, r3, r8
    ccf8:	ldr.w	r3, [sl, #4]
    ccfc:	bic.w	ip, r3, #3
    cd00:	add.w	r3, r4, ip
    cd04:	cmp	r3, r2
    cd06:	blt.n	cc84 <_realloc_r+0x58>
    cd08:	mov	r7, sl
    cd0a:	ldr.w	r1, [sl, #12]
    cd0e:	ldr.w	r0, [r7, #8]!
    cd12:	subs	r2, r4, #4
    cd14:	cmp	r2, #36	; 0x24
    cd16:	str	r1, [r0, #12]
    cd18:	str	r0, [r1, #8]
    cd1a:	bhi.w	cf4c <_realloc_r+0x320>
    cd1e:	cmp	r2, #19
    cd20:	bls.w	cf48 <_realloc_r+0x31c>
    cd24:	ldr	r1, [r6, #0]
    cd26:	str.w	r1, [sl, #8]
    cd2a:	ldr	r1, [r6, #4]
    cd2c:	str.w	r1, [sl, #12]
    cd30:	cmp	r2, #27
    cd32:	bhi.w	cf8c <_realloc_r+0x360>
    cd36:	adds	r6, #8
    cd38:	add.w	r2, sl, #16
    cd3c:	ldr	r1, [r6, #0]
    cd3e:	str	r1, [r2, #0]
    cd40:	ldr	r1, [r6, #4]
    cd42:	str	r1, [r2, #4]
    cd44:	ldr	r1, [r6, #8]
    cd46:	str	r1, [r2, #8]
    cd48:	mov	r6, r7
    cd4a:	mov	r4, r3
    cd4c:	mov	r8, sl
    cd4e:	subs	r3, r4, r5
    cd50:	cmp	r3, #15
    cd52:	bhi.n	cd90 <_realloc_r+0x164>
    cd54:	ldr.w	r3, [r8, #4]
    cd58:	and.w	r3, r3, #1
    cd5c:	orrs	r3, r4
    cd5e:	add	r4, r8
    cd60:	str.w	r3, [r8, #4]
    cd64:	ldr	r3, [r4, #4]
    cd66:	orr.w	r3, r3, #1
    cd6a:	str	r3, [r4, #4]
    cd6c:	mov	r0, r9
    cd6e:	bl	cc28 <__malloc_unlock>
    cd72:	mov	r0, r6
    cd74:	add	sp, #12
    cd76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd7a:	bic.w	r1, r1, #3
    cd7e:	add	r1, r4
    cd80:	cmp	r1, r2
    cd82:	blt.n	cdc8 <_realloc_r+0x19c>
    cd84:	ldr	r3, [r0, #12]
    cd86:	ldr	r2, [r0, #8]
    cd88:	mov	r4, r1
    cd8a:	str	r3, [r2, #12]
    cd8c:	str	r2, [r3, #8]
    cd8e:	b.n	cd4e <_realloc_r+0x122>
    cd90:	ldr.w	r2, [r8, #4]
    cd94:	add.w	r1, r8, r5
    cd98:	and.w	r2, r2, #1
    cd9c:	orrs	r5, r2
    cd9e:	orr.w	r2, r3, #1
    cda2:	add	r3, r1
    cda4:	str.w	r5, [r8, #4]
    cda8:	str	r2, [r1, #4]
    cdaa:	ldr	r2, [r3, #4]
    cdac:	orr.w	r2, r2, #1
    cdb0:	adds	r1, #8
    cdb2:	str	r2, [r3, #4]
    cdb4:	mov	r0, r9
    cdb6:	bl	11ad0 <_free_r>
    cdba:	b.n	cd6c <_realloc_r+0x140>
    cdbc:	mov	r1, r2
    cdbe:	add	sp, #12
    cdc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdc4:	b.w	c4c0 <_malloc_r>
    cdc8:	tst.w	lr, #1
    cdcc:	bne.w	cc84 <_realloc_r+0x58>
    cdd0:	ldr.w	r3, [r6, #-8]
    cdd4:	rsb	sl, r3, r8
    cdd8:	ldr.w	r3, [sl, #4]
    cddc:	bic.w	ip, r3, #3
    cde0:	add.w	lr, r1, ip
    cde4:	cmp	lr, r2
    cde6:	blt.n	cd00 <_realloc_r+0xd4>
    cde8:	ldr	r3, [r0, #12]
    cdea:	ldr	r2, [r0, #8]
    cdec:	mov	r7, sl
    cdee:	str	r3, [r2, #12]
    cdf0:	str	r2, [r3, #8]
    cdf2:	ldr.w	r1, [r7, #8]!
    cdf6:	ldr.w	r3, [sl, #12]
    cdfa:	str	r3, [r1, #12]
    cdfc:	subs	r2, r4, #4
    cdfe:	cmp	r2, #36	; 0x24
    ce00:	str	r1, [r3, #8]
    ce02:	bhi.w	cf38 <_realloc_r+0x30c>
    ce06:	cmp	r2, #19
    ce08:	bls.n	ced0 <_realloc_r+0x2a4>
    ce0a:	ldr	r3, [r6, #0]
    ce0c:	str.w	r3, [sl, #8]
    ce10:	ldr	r3, [r6, #4]
    ce12:	str.w	r3, [sl, #12]
    ce16:	cmp	r2, #27
    ce18:	bhi.w	cf5c <_realloc_r+0x330>
    ce1c:	adds	r6, #8
    ce1e:	add.w	r3, sl, #16
    ce22:	b.n	ced2 <_realloc_r+0x2a6>
    ce24:	bic.w	fp, r1, #3
    ce28:	add	fp, r4
    ce2a:	add.w	r0, r5, #16
    ce2e:	cmp	fp, r0
    ce30:	bge.n	cee6 <_realloc_r+0x2ba>
    ce32:	tst.w	lr, #1
    ce36:	bne.w	cc84 <_realloc_r+0x58>
    ce3a:	ldr.w	r1, [r6, #-8]
    ce3e:	rsb	sl, r1, r8
    ce42:	ldr.w	r1, [sl, #4]
    ce46:	bic.w	ip, r1, #3
    ce4a:	add	fp, ip
    ce4c:	cmp	r0, fp
    ce4e:	bgt.w	cd00 <_realloc_r+0xd4>
    ce52:	mov	r7, sl
    ce54:	ldr.w	r1, [sl, #12]
    ce58:	ldr.w	r0, [r7, #8]!
    ce5c:	subs	r2, r4, #4
    ce5e:	cmp	r2, #36	; 0x24
    ce60:	str	r1, [r0, #12]
    ce62:	str	r0, [r1, #8]
    ce64:	bhi.w	cfd0 <_realloc_r+0x3a4>
    ce68:	cmp	r2, #19
    ce6a:	bls.w	cfb8 <_realloc_r+0x38c>
    ce6e:	ldr	r1, [r6, #0]
    ce70:	str.w	r1, [sl, #8]
    ce74:	ldr	r1, [r6, #4]
    ce76:	str.w	r1, [sl, #12]
    ce7a:	cmp	r2, #27
    ce7c:	bhi.w	cfde <_realloc_r+0x3b2>
    ce80:	adds	r6, #8
    ce82:	add.w	r2, sl, #16
    ce86:	ldr	r1, [r6, #0]
    ce88:	str	r1, [r2, #0]
    ce8a:	ldr	r1, [r6, #4]
    ce8c:	str	r1, [r2, #4]
    ce8e:	ldr	r1, [r6, #8]
    ce90:	str	r1, [r2, #8]
    ce92:	add.w	r1, sl, r5
    ce96:	rsb	r2, r5, fp
    ce9a:	orr.w	r2, r2, #1
    ce9e:	str	r1, [r3, #8]
    cea0:	str	r2, [r1, #4]
    cea2:	ldr.w	r3, [sl, #4]
    cea6:	and.w	r3, r3, #1
    ceaa:	orrs	r5, r3
    ceac:	mov	r0, r9
    ceae:	str.w	r5, [sl, #4]
    ceb2:	bl	cc28 <__malloc_unlock>
    ceb6:	mov	r0, r7
    ceb8:	b.n	cd74 <_realloc_r+0x148>
    ceba:	ldr	r3, [r6, #0]
    cebc:	str	r3, [r0, #0]
    cebe:	ldr	r3, [r6, #4]
    cec0:	str	r3, [r0, #4]
    cec2:	cmp	r2, #27
    cec4:	bhi.n	cf16 <_realloc_r+0x2ea>
    cec6:	add.w	r3, r0, #8
    ceca:	add.w	r2, r6, #8
    cece:	b.n	ccb6 <_realloc_r+0x8a>
    ced0:	mov	r3, r7
    ced2:	ldr	r2, [r6, #0]
    ced4:	str	r2, [r3, #0]
    ced6:	ldr	r2, [r6, #4]
    ced8:	str	r2, [r3, #4]
    ceda:	ldr	r2, [r6, #8]
    cedc:	str	r2, [r3, #8]
    cede:	mov	r6, r7
    cee0:	mov	r4, lr
    cee2:	mov	r8, sl
    cee4:	b.n	cd4e <_realloc_r+0x122>
    cee6:	add.w	r1, r8, r5
    ceea:	rsb	fp, r5, fp
    ceee:	orr.w	r2, fp, #1
    cef2:	str	r1, [r3, #8]
    cef4:	str	r2, [r1, #4]
    cef6:	ldr.w	r3, [r6, #-4]
    cefa:	and.w	r3, r3, #1
    cefe:	orrs	r5, r3
    cf00:	mov	r0, r9
    cf02:	str.w	r5, [r6, #-4]
    cf06:	bl	cc28 <__malloc_unlock>
    cf0a:	mov	r0, r6
    cf0c:	b.n	cd74 <_realloc_r+0x148>
    cf0e:	mov	r1, r6
    cf10:	bl	cac0 <memmove>
    cf14:	b.n	ccc2 <_realloc_r+0x96>
    cf16:	ldr	r3, [r6, #8]
    cf18:	str	r3, [r0, #8]
    cf1a:	ldr	r3, [r6, #12]
    cf1c:	str	r3, [r0, #12]
    cf1e:	cmp	r2, #36	; 0x24
    cf20:	beq.n	cf74 <_realloc_r+0x348>
    cf22:	add.w	r3, r0, #16
    cf26:	add.w	r2, r6, #16
    cf2a:	b.n	ccb6 <_realloc_r+0x8a>
    cf2c:	ldr.w	r3, [r0, #-4]
    cf30:	bic.w	r3, r3, #3
    cf34:	add	r4, r3
    cf36:	b.n	cd4e <_realloc_r+0x122>
    cf38:	mov	r1, r6
    cf3a:	mov	r0, r7
    cf3c:	mov	r4, lr
    cf3e:	mov	r8, sl
    cf40:	bl	cac0 <memmove>
    cf44:	mov	r6, r7
    cf46:	b.n	cd4e <_realloc_r+0x122>
    cf48:	mov	r2, r7
    cf4a:	b.n	cd3c <_realloc_r+0x110>
    cf4c:	mov	r1, r6
    cf4e:	mov	r0, r7
    cf50:	mov	r4, r3
    cf52:	mov	r8, sl
    cf54:	bl	cac0 <memmove>
    cf58:	mov	r6, r7
    cf5a:	b.n	cd4e <_realloc_r+0x122>
    cf5c:	ldr	r3, [r6, #8]
    cf5e:	str.w	r3, [sl, #16]
    cf62:	ldr	r3, [r6, #12]
    cf64:	str.w	r3, [sl, #20]
    cf68:	cmp	r2, #36	; 0x24
    cf6a:	beq.n	cfa4 <_realloc_r+0x378>
    cf6c:	adds	r6, #16
    cf6e:	add.w	r3, sl, #24
    cf72:	b.n	ced2 <_realloc_r+0x2a6>
    cf74:	ldr	r3, [r6, #16]
    cf76:	str	r3, [r0, #16]
    cf78:	ldr	r3, [r6, #20]
    cf7a:	str	r3, [r0, #20]
    cf7c:	add.w	r2, r6, #24
    cf80:	add.w	r3, r0, #24
    cf84:	b.n	ccb6 <_realloc_r+0x8a>
    cf86:	nop
    cf88:	.word	0x1fff0ee8
    cf8c:	ldr	r1, [r6, #8]
    cf8e:	str.w	r1, [sl, #16]
    cf92:	ldr	r1, [r6, #12]
    cf94:	str.w	r1, [sl, #20]
    cf98:	cmp	r2, #36	; 0x24
    cf9a:	beq.n	cfbc <_realloc_r+0x390>
    cf9c:	adds	r6, #16
    cf9e:	add.w	r2, sl, #24
    cfa2:	b.n	cd3c <_realloc_r+0x110>
    cfa4:	ldr	r3, [r6, #16]
    cfa6:	str.w	r3, [sl, #24]
    cfaa:	ldr	r3, [r6, #20]
    cfac:	str.w	r3, [sl, #28]
    cfb0:	adds	r6, #24
    cfb2:	add.w	r3, sl, #32
    cfb6:	b.n	ced2 <_realloc_r+0x2a6>
    cfb8:	mov	r2, r7
    cfba:	b.n	ce86 <_realloc_r+0x25a>
    cfbc:	ldr	r2, [r6, #16]
    cfbe:	str.w	r2, [sl, #24]
    cfc2:	ldr	r2, [r6, #20]
    cfc4:	str.w	r2, [sl, #28]
    cfc8:	adds	r6, #24
    cfca:	add.w	r2, sl, #32
    cfce:	b.n	cd3c <_realloc_r+0x110>
    cfd0:	mov	r1, r6
    cfd2:	mov	r0, r7
    cfd4:	str	r3, [sp, #4]
    cfd6:	bl	cac0 <memmove>
    cfda:	ldr	r3, [sp, #4]
    cfdc:	b.n	ce92 <_realloc_r+0x266>
    cfde:	ldr	r1, [r6, #8]
    cfe0:	str.w	r1, [sl, #16]
    cfe4:	ldr	r1, [r6, #12]
    cfe6:	str.w	r1, [sl, #20]
    cfea:	cmp	r2, #36	; 0x24
    cfec:	beq.n	cff6 <_realloc_r+0x3ca>
    cfee:	adds	r6, #16
    cff0:	add.w	r2, sl, #24
    cff4:	b.n	ce86 <_realloc_r+0x25a>
    cff6:	ldr	r2, [r6, #16]
    cff8:	str.w	r2, [sl, #24]
    cffc:	ldr	r2, [r6, #20]
    cffe:	str.w	r2, [sl, #28]
    d002:	adds	r6, #24
    d004:	add.w	r2, sl, #32
    d008:	b.n	ce86 <_realloc_r+0x25a>
    d00a:	nop

0000d00c <_sbrk_r>:
    d00c:	push	{r3, r4, r5, lr}
    d00e:	ldr	r4, [pc, #28]	; (d02c <_sbrk_r+0x20>)
    d010:	movs	r3, #0
    d012:	mov	r5, r0
    d014:	mov	r0, r1
    d016:	str	r3, [r4, #0]
    d018:	bl	990c <_sbrk>
    d01c:	adds	r3, r0, #1
    d01e:	beq.n	d022 <_sbrk_r+0x16>
    d020:	pop	{r3, r4, r5, pc}
    d022:	ldr	r3, [r4, #0]
    d024:	cmp	r3, #0
    d026:	beq.n	d020 <_sbrk_r+0x14>
    d028:	str	r3, [r5, #0]
    d02a:	pop	{r3, r4, r5, pc}
    d02c:	.word	0x20020540

0000d030 <sprintf>:
    d030:	push	{r1, r2, r3}
    d032:	push	{r4, r5, r6, r7, lr}
    d034:	sub	sp, #112	; 0x70
    d036:	add	r3, sp, #132	; 0x84
    d038:	ldr	r1, [pc, #60]	; (d078 <sprintf+0x48>)
    d03a:	ldr.w	r2, [r3], #4
    d03e:	str	r3, [sp, #4]
    d040:	mov	r5, r0
    d042:	mvn.w	r4, #2147483648	; 0x80000000
    d046:	ldr	r0, [r1, #0]
    d048:	str	r5, [sp, #8]
    d04a:	mov.w	r7, #520	; 0x208
    d04e:	movw	r6, #65535	; 0xffff
    d052:	add	r1, sp, #8
    d054:	str	r5, [sp, #24]
    d056:	strh.w	r7, [sp, #20]
    d05a:	str	r4, [sp, #16]
    d05c:	str	r4, [sp, #28]
    d05e:	strh.w	r6, [sp, #22]
    d062:	bl	e3d0 <_svfprintf_r>
    d066:	ldr	r3, [sp, #8]
    d068:	movs	r2, #0
    d06a:	strb	r2, [r3, #0]
    d06c:	add	sp, #112	; 0x70
    d06e:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    d072:	add	sp, #12
    d074:	bx	lr
    d076:	nop
    d078:	.word	0x1fff0d78

0000d07c <sscanf>:
    d07c:	push	{r1, r2, r3}
    d07e:	push	{r4, r5, r6, r7, lr}
    d080:	sub	sp, #112	; 0x70
    d082:	add	r4, sp, #132	; 0x84
    d084:	mov.w	r2, #516	; 0x204
    d088:	ldr.w	r6, [r4], #4
    d08c:	strh.w	r2, [sp, #20]
    d090:	str	r0, [sp, #8]
    d092:	str	r0, [sp, #24]
    d094:	bl	d1c0 <strlen>
    d098:	ldr	r3, [pc, #48]	; (d0cc <sscanf+0x50>)
    d09a:	str	r4, [sp, #4]
    d09c:	mov	r5, r0
    d09e:	mov	r2, r6
    d0a0:	ldr	r7, [pc, #44]	; (d0d0 <sscanf+0x54>)
    d0a2:	ldr	r0, [r3, #0]
    d0a4:	str	r5, [sp, #12]
    d0a6:	mov	r3, r4
    d0a8:	movw	r6, #65535	; 0xffff
    d0ac:	movs	r4, #0
    d0ae:	add	r1, sp, #8
    d0b0:	str	r5, [sp, #28]
    d0b2:	str	r7, [sp, #40]	; 0x28
    d0b4:	str	r4, [sp, #56]	; 0x38
    d0b6:	str	r4, [sp, #76]	; 0x4c
    d0b8:	strh.w	r6, [sp, #22]
    d0bc:	bl	fab4 <__ssvfscanf_r>
    d0c0:	add	sp, #112	; 0x70
    d0c2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    d0c6:	add	sp, #12
    d0c8:	bx	lr
    d0ca:	nop
    d0cc:	.word	0x1fff0d78
    d0d0:	.word	0x0000d0d5

0000d0d4 <__seofread>:
    d0d4:	movs	r0, #0
    d0d6:	bx	lr

0000d0d8 <strchr>:
    d0d8:	push	{r4, r5, r6}
    d0da:	ands.w	r4, r1, #255	; 0xff
    d0de:	beq.n	d14a <strchr+0x72>
    d0e0:	lsls	r5, r0, #30
    d0e2:	beq.n	d104 <strchr+0x2c>
    d0e4:	ldrb	r3, [r0, #0]
    d0e6:	cmp	r3, #0
    d0e8:	beq.n	d1a0 <strchr+0xc8>
    d0ea:	cmp	r4, r3
    d0ec:	beq.n	d146 <strchr+0x6e>
    d0ee:	adds	r3, r0, #1
    d0f0:	b.n	d0fe <strchr+0x26>
    d0f2:	ldrb.w	r2, [r3], #1
    d0f6:	cmp	r2, #0
    d0f8:	beq.n	d19a <strchr+0xc2>
    d0fa:	cmp	r4, r2
    d0fc:	beq.n	d146 <strchr+0x6e>
    d0fe:	lsls	r2, r3, #30
    d100:	mov	r0, r3
    d102:	bne.n	d0f2 <strchr+0x1a>
    d104:	lsls	r6, r1, #8
    d106:	and.w	r6, r6, #65280	; 0xff00
    d10a:	orrs	r6, r4
    d10c:	ldr	r3, [r0, #0]
    d10e:	orr.w	r6, r6, r6, lsl #16
    d112:	b.n	d118 <strchr+0x40>
    d114:	ldr.w	r3, [r0, #4]!
    d118:	eor.w	r5, r6, r3
    d11c:	sub.w	r2, r5, #16843009	; 0x1010101
    d120:	sub.w	r1, r3, #16843009	; 0x1010101
    d124:	bic.w	r2, r2, r5
    d128:	bic.w	r3, r1, r3
    d12c:	orrs	r3, r2
    d12e:	tst.w	r3, #2155905152	; 0x80808080
    d132:	beq.n	d114 <strchr+0x3c>
    d134:	ldrb	r3, [r0, #0]
    d136:	cbnz	r3, d142 <strchr+0x6a>
    d138:	b.n	d1a0 <strchr+0xc8>
    d13a:	ldrb.w	r3, [r0, #1]!
    d13e:	cmp	r3, #0
    d140:	beq.n	d1a0 <strchr+0xc8>
    d142:	cmp	r4, r3
    d144:	bne.n	d13a <strchr+0x62>
    d146:	pop	{r4, r5, r6}
    d148:	bx	lr
    d14a:	lsls	r4, r0, #30
    d14c:	beq.n	d166 <strchr+0x8e>
    d14e:	ldrb	r3, [r0, #0]
    d150:	cmp	r3, #0
    d152:	beq.n	d146 <strchr+0x6e>
    d154:	adds	r3, r0, #1
    d156:	b.n	d160 <strchr+0x88>
    d158:	ldrb	r2, [r0, #0]
    d15a:	adds	r3, #1
    d15c:	cmp	r2, #0
    d15e:	beq.n	d146 <strchr+0x6e>
    d160:	lsls	r1, r3, #30
    d162:	mov	r0, r3
    d164:	bne.n	d158 <strchr+0x80>
    d166:	ldr	r2, [r0, #0]
    d168:	sub.w	r3, r2, #16843009	; 0x1010101
    d16c:	bic.w	r3, r3, r2
    d170:	tst.w	r3, #2155905152	; 0x80808080
    d174:	bne.n	d188 <strchr+0xb0>
    d176:	ldr.w	r2, [r0, #4]!
    d17a:	sub.w	r3, r2, #16843009	; 0x1010101
    d17e:	bic.w	r3, r3, r2
    d182:	tst.w	r3, #2155905152	; 0x80808080
    d186:	beq.n	d176 <strchr+0x9e>
    d188:	ldrb	r3, [r0, #0]
    d18a:	cmp	r3, #0
    d18c:	beq.n	d146 <strchr+0x6e>
    d18e:	ldrb.w	r3, [r0, #1]!
    d192:	cmp	r3, #0
    d194:	bne.n	d18e <strchr+0xb6>
    d196:	pop	{r4, r5, r6}
    d198:	bx	lr
    d19a:	mov	r0, r2
    d19c:	pop	{r4, r5, r6}
    d19e:	bx	lr
    d1a0:	mov	r0, r3
    d1a2:	pop	{r4, r5, r6}
    d1a4:	bx	lr
    d1a6:	nop
    d1a8:			; <UNDEFINED> instruction: 0xffffffff
    d1ac:			; <UNDEFINED> instruction: 0xffffffff
    d1b0:			; <UNDEFINED> instruction: 0xffffffff
    d1b4:			; <UNDEFINED> instruction: 0xffffffff
    d1b8:			; <UNDEFINED> instruction: 0xffffffff
    d1bc:			; <UNDEFINED> instruction: 0xffffffff

0000d1c0 <strlen>:
    d1c0:	pld	[r0]
    d1c4:	strd	r4, r5, [sp, #-8]!
    d1c8:	bic.w	r1, r0, #7
    d1cc:	mvn.w	ip, #0
    d1d0:	ands.w	r4, r0, #7
    d1d4:	pld	[r1, #32]
    d1d8:	bne.w	d26e <strlen+0xae>
    d1dc:	mov.w	r4, #0
    d1e0:	mvn.w	r0, #7
    d1e4:	ldrd	r2, r3, [r1]
    d1e8:	pld	[r1, #64]	; 0x40
    d1ec:	add.w	r0, r0, #8
    d1f0:	uadd8	r2, r2, ip
    d1f4:	sel	r2, r4, ip
    d1f8:	uadd8	r3, r3, ip
    d1fc:	sel	r3, r2, ip
    d200:	cbnz	r3, d256 <strlen+0x96>
    d202:	ldrd	r2, r3, [r1, #8]
    d206:	uadd8	r2, r2, ip
    d20a:	add.w	r0, r0, #8
    d20e:	sel	r2, r4, ip
    d212:	uadd8	r3, r3, ip
    d216:	sel	r3, r2, ip
    d21a:	cbnz	r3, d256 <strlen+0x96>
    d21c:	ldrd	r2, r3, [r1, #16]
    d220:	uadd8	r2, r2, ip
    d224:	add.w	r0, r0, #8
    d228:	sel	r2, r4, ip
    d22c:	uadd8	r3, r3, ip
    d230:	sel	r3, r2, ip
    d234:	cbnz	r3, d256 <strlen+0x96>
    d236:	ldrd	r2, r3, [r1, #24]
    d23a:	add.w	r1, r1, #32
    d23e:	uadd8	r2, r2, ip
    d242:	add.w	r0, r0, #8
    d246:	sel	r2, r4, ip
    d24a:	uadd8	r3, r3, ip
    d24e:	sel	r3, r2, ip
    d252:	cmp	r3, #0
    d254:	beq.n	d1e4 <strlen+0x24>
    d256:	cmp	r2, #0
    d258:	itt	eq
    d25a:	addeq	r0, #4
    d25c:	moveq	r2, r3
    d25e:	rev	r2, r2
    d260:	clz	r2, r2
    d264:	ldrd	r4, r5, [sp], #8
    d268:	add.w	r0, r0, r2, lsr #3
    d26c:	bx	lr
    d26e:	ldrd	r2, r3, [r1]
    d272:	and.w	r5, r4, #3
    d276:	rsb	r0, r4, #0
    d27a:	mov.w	r5, r5, lsl #3
    d27e:	tst.w	r4, #4
    d282:	pld	[r1, #64]	; 0x40
    d286:	lsl.w	r5, ip, r5
    d28a:	orn	r2, r2, r5
    d28e:	itt	ne
    d290:	ornne	r3, r3, r5
    d294:	movne	r2, ip
    d296:	mov.w	r4, #0
    d29a:	b.n	d1f0 <strlen+0x30>

0000d29c <strncmp>:
    d29c:	cmp	r2, #0
    d29e:	beq.n	d324 <strncmp+0x88>
    d2a0:	orr.w	r3, r0, r1
    d2a4:	ands.w	r3, r3, #3
    d2a8:	push	{r4, r5, r6, r7}
    d2aa:	bne.n	d2f8 <strncmp+0x5c>
    d2ac:	cmp	r2, #3
    d2ae:	bls.n	d2f8 <strncmp+0x5c>
    d2b0:	ldr	r4, [r0, #0]
    d2b2:	ldr	r5, [r1, #0]
    d2b4:	cmp	r4, r5
    d2b6:	bne.n	d2f8 <strncmp+0x5c>
    d2b8:	subs	r2, #4
    d2ba:	beq.n	d328 <strncmp+0x8c>
    d2bc:	sub.w	r5, r4, #16843009	; 0x1010101
    d2c0:	bic.w	r4, r5, r4
    d2c4:	tst.w	r4, #2155905152	; 0x80808080
    d2c8:	bne.n	d32e <strncmp+0x92>
    d2ca:	adds	r7, r0, #4
    d2cc:	adds	r5, r1, #4
    d2ce:	b.n	d2ec <strncmp+0x50>
    d2d0:	ldr.w	r3, [r7], #4
    d2d4:	ldr	r6, [r1, #0]
    d2d6:	sub.w	r4, r3, #16843009	; 0x1010101
    d2da:	cmp	r3, r6
    d2dc:	bic.w	r4, r4, r3
    d2e0:	bne.n	d2f8 <strncmp+0x5c>
    d2e2:	subs	r2, #4
    d2e4:	beq.n	d328 <strncmp+0x8c>
    d2e6:	tst.w	r4, #2155905152	; 0x80808080
    d2ea:	bne.n	d334 <strncmp+0x98>
    d2ec:	cmp	r2, #3
    d2ee:	mov	r1, r5
    d2f0:	mov	r0, r7
    d2f2:	add.w	r5, r5, #4
    d2f6:	bhi.n	d2d0 <strncmp+0x34>
    d2f8:	ldrb	r3, [r0, #0]
    d2fa:	ldrb	r4, [r1, #0]
    d2fc:	cmp	r4, r3
    d2fe:	add.w	r2, r2, #4294967295
    d302:	bne.n	d31e <strncmp+0x82>
    d304:	cbz	r2, d328 <strncmp+0x8c>
    d306:	cbnz	r4, d30e <strncmp+0x72>
    d308:	b.n	d338 <strncmp+0x9c>
    d30a:	cbz	r2, d328 <strncmp+0x8c>
    d30c:	cbz	r3, d32e <strncmp+0x92>
    d30e:	ldrb.w	r3, [r0, #1]!
    d312:	ldrb.w	r4, [r1, #1]!
    d316:	cmp	r3, r4
    d318:	add.w	r2, r2, #4294967295
    d31c:	beq.n	d30a <strncmp+0x6e>
    d31e:	subs	r0, r3, r4
    d320:	pop	{r4, r5, r6, r7}
    d322:	bx	lr
    d324:	mov	r0, r2
    d326:	bx	lr
    d328:	mov	r0, r2
    d32a:	pop	{r4, r5, r6, r7}
    d32c:	bx	lr
    d32e:	mov	r0, r3
    d330:	pop	{r4, r5, r6, r7}
    d332:	bx	lr
    d334:	movs	r0, #0
    d336:	b.n	d320 <strncmp+0x84>
    d338:	mov	r0, r4
    d33a:	b.n	d320 <strncmp+0x84>

0000d33c <sulp>:
    d33c:	push	{r4, r5, r6, lr}
    d33e:	mov	r4, r0
    d340:	mov	r5, r1
    d342:	vmov	d0, r4, r5
    d346:	mov	r6, r2
    d348:	bl	12b40 <__ulp>
    d34c:	vmov	r0, r1, d0
    d350:	cbz	r6, d372 <sulp+0x36>
    d352:	ubfx	r3, r5, #20, #11
    d356:	rsb	r3, r3, #107	; 0x6b
    d35a:	cmp	r3, #0
    d35c:	ble.n	d372 <sulp+0x36>
    d35e:	lsls	r3, r3, #20
    d360:	add.w	r5, r3, #1069547520	; 0x3fc00000
    d364:	movs	r4, #0
    d366:	add.w	r5, r5, #3145728	; 0x300000
    d36a:	mov	r2, r4
    d36c:	mov	r3, r5
    d36e:	bl	b708 <__aeabi_dmul>
    d372:	pop	{r4, r5, r6, pc}
    d374:			; <UNDEFINED> instruction: 0xffffffff

0000d378 <_strtod_l>:
    d378:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d37c:	mov	r5, r3
    d37e:	sub	sp, #132	; 0x84
    d380:	movs	r3, #0
    d382:	mov	fp, r0
    d384:	mov	r0, r5
    d386:	mov	r6, r1
    d388:	str	r2, [sp, #24]
    d38a:	str	r3, [sp, #112]	; 0x70
    d38c:	bl	12424 <__localeconv_l>
    d390:	movs	r4, #0
    d392:	movs	r3, #0
    d394:	mov	sl, r0
    d396:	ldr	r0, [r0, #0]
    d398:	strd	r3, r4, [sp, #16]
    d39c:	bl	d1c0 <strlen>
    d3a0:	str	r6, [sp, #108]	; 0x6c
    d3a2:	mov	r9, r0
    d3a4:	mov	r2, r6
    d3a6:	mov	r4, r2
    d3a8:	ldrb.w	r7, [r2], #1
    d3ac:	cmp	r7, #45	; 0x2d
    d3ae:	bhi.w	d510 <_strtod_l+0x198>
    d3b2:	tbb	[pc, r7]
    d3b6:	.short	0xad17
    d3b8:	.word	0xadadadad
    d3bc:	.word	0x81adadad
    d3c0:	.word	0x81818181
    d3c4:	.word	0xadadadad
    d3c8:	.word	0xadadadad
    d3cc:	.word	0xadadadad
    d3d0:	.word	0xadadadad
    d3d4:	.word	0xad81adad
    d3d8:	.word	0xadadadad
    d3dc:	.word	0xadadadad
    d3e0:	.word	0x7ead2bad
    d3e4:	ldr	r3, [sp, #24]
    d3e6:	mov.w	r8, #0
    d3ea:	mov.w	r9, #0
    d3ee:	cbz	r3, d402 <_strtod_l+0x8a>
    d3f0:	movs	r3, #0
    d3f2:	str	r3, [sp, #28]
    d3f4:	ldr	r3, [sp, #24]
    d3f6:	str	r6, [r3, #0]
    d3f8:	ldr	r3, [sp, #28]
    d3fa:	cbz	r3, d402 <_strtod_l+0x8a>
    d3fc:	add.w	r3, r9, #2147483648	; 0x80000000
    d400:	mov	r9, r3
    d402:	vmov	d0, r8, r9
    d406:	add	sp, #132	; 0x84
    d408:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d40c:	movs	r3, #0
    d40e:	str	r3, [sp, #28]
    d410:	adds	r2, r4, #1
    d412:	str	r2, [sp, #108]	; 0x6c
    d414:	ldrb	r7, [r4, #1]
    d416:	cmp	r7, #0
    d418:	beq.n	d3e4 <_strtod_l+0x6c>
    d41a:	cmp	r7, #48	; 0x30
    d41c:	mov	r4, r2
    d41e:	beq.n	d518 <_strtod_l+0x1a0>
    d420:	movs	r3, #0
    d422:	str	r4, [sp, #32]
    d424:	str	r3, [sp, #40]	; 0x28
    d426:	sub.w	r3, r7, #48	; 0x30
    d42a:	cmp	r3, #9
    d42c:	bhi.w	dc3e <_strtod_l+0x8c6>
    d430:	mov.w	r8, #0
    d434:	mov	r0, r4
    d436:	mov	r5, r8
    d438:	mov	r4, r8
    d43a:	cmp	r4, #8
    d43c:	it	gt
    d43e:	addgt.w	r8, r8, r8, lsl #2
    d442:	add.w	r3, r5, r5, lsl #2
    d446:	add.w	r0, r0, #1
    d44a:	add.w	r3, r7, r3, lsl #1
    d44e:	str	r0, [sp, #108]	; 0x6c
    d450:	itt	gt
    d452:	addgt.w	r7, r7, r8, lsl #1
    d456:	subgt.w	r8, r7, #48	; 0x30
    d45a:	ldrb	r7, [r0, #0]
    d45c:	it	le
    d45e:	suble.w	r5, r3, #48	; 0x30
    d462:	sub.w	r3, r7, #48	; 0x30
    d466:	cmp	r3, #9
    d468:	add.w	r4, r4, #1
    d46c:	bls.n	d43a <_strtod_l+0xc2>
    d46e:	ldr.w	r1, [sl]
    d472:	mov	r2, r9
    d474:	bl	d29c <strncmp>
    d478:	cbz	r0, d4bc <_strtod_l+0x144>
    d47a:	movs	r0, #0
    d47c:	mov	r3, r7
    d47e:	mov	r9, r0
    d480:	mov	r7, r0
    d482:	mov	sl, r4
    d484:	cmp	r3, #101	; 0x65
    d486:	beq.w	d5ee <_strtod_l+0x276>
    d48a:	cmp	r3, #69	; 0x45
    d48c:	beq.w	d5ee <_strtod_l+0x276>
    d490:	movs	r2, #0
    d492:	cmp	r4, #0
    d494:	bne.n	d53c <_strtod_l+0x1c4>
    d496:	cbnz	r0, d4a0 <_strtod_l+0x128>
    d498:	ldr	r2, [sp, #40]	; 0x28
    d49a:	cmp	r2, #0
    d49c:	beq.w	da42 <_strtod_l+0x6ca>
    d4a0:	mov.w	r8, #0
    d4a4:	mov.w	r9, #0
    d4a8:	ldr	r3, [sp, #24]
    d4aa:	cmp	r3, #0
    d4ac:	beq.n	d3f8 <_strtod_l+0x80>
    d4ae:	ldr	r6, [sp, #108]	; 0x6c
    d4b0:	b.n	d3f4 <_strtod_l+0x7c>
    d4b2:	movs	r3, #1
    d4b4:	str	r3, [sp, #28]
    d4b6:	b.n	d410 <_strtod_l+0x98>
    d4b8:	str	r2, [sp, #108]	; 0x6c
    d4ba:	b.n	d3a6 <_strtod_l+0x2e>
    d4bc:	ldr	r3, [sp, #108]	; 0x6c
    d4be:	add.w	r2, r3, r9
    d4c2:	str	r2, [sp, #108]	; 0x6c
    d4c4:	ldrb.w	r3, [r3, r9]
    d4c8:	mov	r7, r0
    d4ca:	mov	sl, r4
    d4cc:	sub.w	r2, r3, #48	; 0x30
    d4d0:	cmp	r2, #9
    d4d2:	bhi.w	d9c8 <_strtod_l+0x650>
    d4d6:	adds	r1, r0, #1
    d4d8:	mov	r3, r2
    d4da:	cmp	r2, #0
    d4dc:	beq.w	e21e <_strtod_l+0xea6>
    d4e0:	cmp	r1, #1
    d4e2:	add	r7, r1
    d4e4:	it	ne
    d4e6:	addne	r0, r0, r4
    d4e8:	bne.n	d4f6 <_strtod_l+0x17e>
    d4ea:	b.w	e216 <_strtod_l+0xe9e>
    d4ee:	lsls	r5, r1, #1
    d4f0:	cmp	r4, r0
    d4f2:	beq.w	de6c <_strtod_l+0xaf4>
    d4f6:	adds	r4, #1
    d4f8:	subs	r1, r4, #1
    d4fa:	cmp	r1, #8
    d4fc:	add.w	r1, r5, r5, lsl #2
    d500:	ble.n	d4ee <_strtod_l+0x176>
    d502:	cmp	r4, #16
    d504:	itt	le
    d506:	addle.w	r8, r8, r8, lsl #2
    d50a:	movle.w	r8, r8, lsl #1
    d50e:	b.n	d4f0 <_strtod_l+0x178>
    d510:	movs	r3, #0
    d512:	cmp	r7, #48	; 0x30
    d514:	str	r3, [sp, #28]
    d516:	bne.n	d420 <_strtod_l+0xa8>
    d518:	ldrb	r3, [r4, #1]
    d51a:	cmp	r3, #88	; 0x58
    d51c:	beq.w	dc06 <_strtod_l+0x88e>
    d520:	cmp	r3, #120	; 0x78
    d522:	beq.w	dc06 <_strtod_l+0x88e>
    d526:	adds	r4, #1
    d528:	str	r4, [sp, #108]	; 0x6c
    d52a:	ldrb	r7, [r4, #0]
    d52c:	cmp	r7, #48	; 0x30
    d52e:	beq.n	d526 <_strtod_l+0x1ae>
    d530:	cmp	r7, #0
    d532:	beq.n	d4a0 <_strtod_l+0x128>
    d534:	movs	r3, #1
    d536:	str	r4, [sp, #32]
    d538:	str	r3, [sp, #40]	; 0x28
    d53a:	b.n	d426 <_strtod_l+0xae>
    d53c:	cmp	r4, #16
    d53e:	sub.w	r3, r2, r7
    d542:	mov	r0, r5
    d544:	mov	r9, r4
    d546:	str	r3, [sp, #44]	; 0x2c
    d548:	it	ge
    d54a:	movge.w	r9, #16
    d54e:	bl	b61c <__aeabi_ui2d>
    d552:	cmp.w	sl, #0
    d556:	it	eq
    d558:	moveq	sl, r4
    d55a:	cmp.w	r9, #9
    d55e:	strd	r0, r1, [sp, #16]
    d562:	ble.n	d58c <_strtod_l+0x214>
    d564:	ldr	r3, [pc, #292]	; (d68c <_strtod_l+0x314>)
    d566:	add.w	r3, r3, r9, lsl #3
    d56a:	ldrd	r2, r3, [r3, #-72]	; 0x48
    d56e:	bl	b708 <__aeabi_dmul>
    d572:	mov	r6, r0
    d574:	mov	r0, r8
    d576:	mov	r7, r1
    d578:	bl	b61c <__aeabi_ui2d>
    d57c:	mov	r2, r0
    d57e:	mov	r3, r1
    d580:	mov	r0, r6
    d582:	mov	r1, r7
    d584:	bl	b3a4 <__adddf3>
    d588:	strd	r0, r1, [sp, #16]
    d58c:	cmp	r4, #15
    d58e:	bgt.w	d69c <_strtod_l+0x324>
    d592:	ldr	r3, [sp, #44]	; 0x2c
    d594:	cmp	r3, #0
    d596:	beq.n	d5e8 <_strtod_l+0x270>
    d598:	ble.w	dfd4 <_strtod_l+0xc5c>
    d59c:	ldr	r3, [sp, #44]	; 0x2c
    d59e:	cmp	r3, #22
    d5a0:	bgt.w	dea0 <_strtod_l+0xb28>
    d5a4:	ldr	r7, [pc, #228]	; (d68c <_strtod_l+0x314>)
    d5a6:	add.w	r7, r7, r3, lsl #3
    d5aa:	ldrd	r0, r1, [r7]
    d5ae:	ldrd	r2, r3, [sp, #16]
    d5b2:	bl	b708 <__aeabi_dmul>
    d5b6:	mov	r8, r0
    d5b8:	mov	r9, r1
    d5ba:	b.n	d4a8 <_strtod_l+0x130>
    d5bc:	add	r0, sp, #108	; 0x6c
    d5be:	ldr	r1, [pc, #208]	; (d690 <_strtod_l+0x318>)
    d5c0:	bl	12258 <__match>
    d5c4:	cmp	r0, #0
    d5c6:	beq.w	d3e4 <_strtod_l+0x6c>
    d5ca:	ldr	r3, [sp, #108]	; 0x6c
    d5cc:	ldr	r1, [pc, #196]	; (d694 <_strtod_l+0x31c>)
    d5ce:	subs	r3, #1
    d5d0:	add	r0, sp, #108	; 0x6c
    d5d2:	str	r3, [sp, #108]	; 0x6c
    d5d4:	bl	12258 <__match>
    d5d8:	cbnz	r0, d5e0 <_strtod_l+0x268>
    d5da:	ldr	r3, [sp, #108]	; 0x6c
    d5dc:	adds	r3, #1
    d5de:	str	r3, [sp, #108]	; 0x6c
    d5e0:	ldr	r3, [pc, #180]	; (d698 <_strtod_l+0x320>)
    d5e2:	str	r3, [sp, #20]
    d5e4:	movs	r3, #0
    d5e6:	str	r3, [sp, #16]
    d5e8:	ldrd	r8, r9, [sp, #16]
    d5ec:	b.n	d4a8 <_strtod_l+0x130>
    d5ee:	cmp	r4, #0
    d5f0:	beq.w	d988 <_strtod_l+0x610>
    d5f4:	ldr	r6, [sp, #108]	; 0x6c
    d5f6:	adds	r3, r6, #1
    d5f8:	str	r3, [sp, #108]	; 0x6c
    d5fa:	ldrb	r3, [r6, #1]
    d5fc:	cmp	r3, #43	; 0x2b
    d5fe:	beq.w	dbbc <_strtod_l+0x844>
    d602:	cmp	r3, #45	; 0x2d
    d604:	beq.w	da32 <_strtod_l+0x6ba>
    d608:	mov.w	ip, #0
    d60c:	sub.w	r2, r3, #48	; 0x30
    d610:	cmp	r2, #9
    d612:	bhi.w	dbb6 <_strtod_l+0x83e>
    d616:	cmp	r3, #48	; 0x30
    d618:	bne.n	d626 <_strtod_l+0x2ae>
    d61a:	ldr	r2, [sp, #108]	; 0x6c
    d61c:	adds	r2, #1
    d61e:	str	r2, [sp, #108]	; 0x6c
    d620:	ldrb	r3, [r2, #0]
    d622:	cmp	r3, #48	; 0x30
    d624:	beq.n	d61c <_strtod_l+0x2a4>
    d626:	sub.w	r2, r3, #49	; 0x31
    d62a:	cmp	r2, #8
    d62c:	bhi.w	d490 <_strtod_l+0x118>
    d630:	ldr	r2, [sp, #108]	; 0x6c
    d632:	str	r2, [sp, #48]	; 0x30
    d634:	adds	r1, r2, #1
    d636:	subs	r3, #48	; 0x30
    d638:	str	r1, [sp, #108]	; 0x6c
    d63a:	str	r3, [sp, #44]	; 0x2c
    d63c:	ldrb	r3, [r2, #1]
    d63e:	sub.w	lr, r3, #48	; 0x30
    d642:	cmp.w	lr, #9
    d646:	bhi.n	d668 <_strtod_l+0x2f0>
    d648:	ldr	r2, [sp, #44]	; 0x2c
    d64a:	adds	r1, #1
    d64c:	str	r1, [sp, #108]	; 0x6c
    d64e:	add.w	r2, r2, r2, lsl #2
    d652:	add.w	r2, r3, r2, lsl #1
    d656:	ldrb	r3, [r1, #0]
    d658:	sub.w	lr, r3, #48	; 0x30
    d65c:	cmp.w	lr, #9
    d660:	sub.w	r2, r2, #48	; 0x30
    d664:	bls.n	d64a <_strtod_l+0x2d2>
    d666:	str	r2, [sp, #44]	; 0x2c
    d668:	ldr	r2, [sp, #48]	; 0x30
    d66a:	subs	r1, r1, r2
    d66c:	cmp	r1, #8
    d66e:	bgt.w	de8e <_strtod_l+0xb16>
    d672:	ldr	r2, [sp, #44]	; 0x2c
    d674:	movw	r1, #19999	; 0x4e1f
    d678:	cmp	r2, r1
    d67a:	it	ge
    d67c:	movge	r2, r1
    d67e:	cmp.w	ip, #0
    d682:	beq.w	d492 <_strtod_l+0x11a>
    d686:	negs	r2, r2
    d688:	b.n	d492 <_strtod_l+0x11a>
    d68a:	nop
    d68c:	.word	0x00014378
    d690:	.word	0x00014080
    d694:	.word	0x00014084
    d698:	.word	0x7ff00000
    d69c:	ldr	r3, [sp, #44]	; 0x2c
    d69e:	rsb	r9, r9, r4
    d6a2:	add	r9, r3
    d6a4:	cmp.w	r9, #0
    d6a8:	ble.w	ddba <_strtod_l+0xa42>
    d6ac:	ands.w	r1, r9, #15
    d6b0:	beq.n	d6c8 <_strtod_l+0x350>
    d6b2:	ldr	r3, [pc, #756]	; (d9a8 <_strtod_l+0x630>)
    d6b4:	add.w	r1, r3, r1, lsl #3
    d6b8:	ldrd	r0, r1, [r1]
    d6bc:	ldrd	r2, r3, [sp, #16]
    d6c0:	bl	b708 <__aeabi_dmul>
    d6c4:	strd	r0, r1, [sp, #16]
    d6c8:	bics.w	r6, r9, #15
    d6cc:	bne.w	daf0 <_strtod_l+0x778>
    d6d0:	movs	r3, #0
    d6d2:	str	r3, [sp, #40]	; 0x28
    d6d4:	str	r5, [sp, #0]
    d6d6:	mov	r3, r4
    d6d8:	mov	r2, sl
    d6da:	ldr	r1, [sp, #32]
    d6dc:	mov	r0, fp
    d6de:	bl	12620 <__s2b>
    d6e2:	str	r0, [sp, #72]	; 0x48
    d6e4:	cmp	r0, #0
    d6e6:	beq.w	dd36 <_strtod_l+0x9be>
    d6ea:	ldr	r2, [sp, #44]	; 0x2c
    d6ec:	movs	r7, #0
    d6ee:	cmp	r2, #0
    d6f0:	rsb	r3, r2, #0
    d6f4:	it	ge
    d6f6:	movge	r3, r7
    d6f8:	str	r3, [sp, #48]	; 0x30
    d6fa:	bic.w	r3, r2, r2, asr #31
    d6fe:	str	r3, [sp, #44]	; 0x2c
    d700:	mov	sl, r7
    d702:	ldr	r4, [sp, #72]	; 0x48
    d704:	mov	r0, fp
    d706:	ldr	r1, [r4, #4]
    d708:	bl	12540 <_Balloc>
    d70c:	mov	r6, r0
    d70e:	cmp	r0, #0
    d710:	beq.w	dbc8 <_strtod_l+0x850>
    d714:	ldr	r2, [r4, #16]
    d716:	vldr	d7, [sp, #16]
    d71a:	adds	r2, #2
    d71c:	lsls	r2, r2, #2
    d71e:	add.w	r1, r4, #12
    d722:	adds	r0, #12
    d724:	vstr	d7, [sp, #32]
    d728:	bl	9404 <memcpy>
    d72c:	vldr	d0, [sp, #32]
    d730:	add	r2, sp, #120	; 0x78
    d732:	add	r1, sp, #116	; 0x74
    d734:	mov	r0, fp
    d736:	bl	12c64 <__d2b>
    d73a:	str	r0, [sp, #112]	; 0x70
    d73c:	cmp	r0, #0
    d73e:	beq.w	dbca <_strtod_l+0x852>
    d742:	movs	r1, #1
    d744:	mov	r0, fp
    d746:	bl	12754 <__i2b>
    d74a:	mov	sl, r0
    d74c:	cmp	r0, #0
    d74e:	beq.w	dbc8 <_strtod_l+0x850>
    d752:	ldr	r2, [sp, #116]	; 0x74
    d754:	cmp	r2, #0
    d756:	blt.w	d9c0 <_strtod_l+0x648>
    d75a:	ldr	r3, [sp, #48]	; 0x30
    d75c:	ldr	r4, [sp, #44]	; 0x2c
    d75e:	adds	r5, r3, r2
    d760:	ldr	r0, [sp, #40]	; 0x28
    d762:	ldr	r3, [sp, #120]	; 0x78
    d764:	ldr	r1, [pc, #580]	; (d9ac <_strtod_l+0x634>)
    d766:	subs	r2, r2, r0
    d768:	add	r2, r3
    d76a:	subs	r2, #1
    d76c:	cmp	r2, r1
    d76e:	rsb	r3, r3, #54	; 0x36
    d772:	bge.w	d952 <_strtod_l+0x5da>
    d776:	subs	r1, r1, r2
    d778:	cmp	r1, #31
    d77a:	sub.w	r3, r3, r1
    d77e:	bgt.w	d9ce <_strtod_l+0x656>
    d782:	movs	r2, #1
    d784:	lsls	r2, r1
    d786:	str	r2, [sp, #56]	; 0x38
    d788:	movs	r2, #0
    d78a:	str	r2, [sp, #76]	; 0x4c
    d78c:	add.w	r9, r5, r3
    d790:	add	r4, r3
    d792:	ldr	r3, [sp, #40]	; 0x28
    d794:	cmp	r5, r9
    d796:	mov	r2, r5
    d798:	add	r4, r3
    d79a:	it	ge
    d79c:	movge	r2, r9
    d79e:	cmp	r2, r4
    d7a0:	it	ge
    d7a2:	movge	r2, r4
    d7a4:	cmp	r2, #0
    d7a6:	ble.n	d7b0 <_strtod_l+0x438>
    d7a8:	rsb	r9, r2, r9
    d7ac:	subs	r4, r4, r2
    d7ae:	subs	r5, r5, r2
    d7b0:	ldr	r3, [sp, #48]	; 0x30
    d7b2:	cbz	r3, d7e4 <_strtod_l+0x46c>
    d7b4:	mov	r1, sl
    d7b6:	mov	r2, r3
    d7b8:	mov	r0, fp
    d7ba:	bl	12898 <__pow5mult>
    d7be:	mov	sl, r0
    d7c0:	cmp	r0, #0
    d7c2:	beq.w	dbc8 <_strtod_l+0x850>
    d7c6:	mov	r1, r0
    d7c8:	ldr	r2, [sp, #112]	; 0x70
    d7ca:	mov	r0, fp
    d7cc:	bl	12768 <__multiply>
    d7d0:	cmp	r0, #0
    d7d2:	beq.w	dbc8 <_strtod_l+0x850>
    d7d6:	str	r0, [sp, #52]	; 0x34
    d7d8:	ldr	r1, [sp, #112]	; 0x70
    d7da:	mov	r0, fp
    d7dc:	bl	1258c <_Bfree>
    d7e0:	ldr	r2, [sp, #52]	; 0x34
    d7e2:	str	r2, [sp, #112]	; 0x70
    d7e4:	cmp.w	r9, #0
    d7e8:	ble.n	d7fc <_strtod_l+0x484>
    d7ea:	mov	r2, r9
    d7ec:	ldr	r1, [sp, #112]	; 0x70
    d7ee:	mov	r0, fp
    d7f0:	bl	12938 <__lshift>
    d7f4:	str	r0, [sp, #112]	; 0x70
    d7f6:	cmp	r0, #0
    d7f8:	beq.w	dbca <_strtod_l+0x852>
    d7fc:	ldr	r3, [sp, #44]	; 0x2c
    d7fe:	cbz	r3, d812 <_strtod_l+0x49a>
    d800:	mov	r1, r6
    d802:	ldr	r2, [sp, #44]	; 0x2c
    d804:	mov	r0, fp
    d806:	bl	12898 <__pow5mult>
    d80a:	mov	r6, r0
    d80c:	cmp	r0, #0
    d80e:	beq.w	dbc8 <_strtod_l+0x850>
    d812:	cmp	r4, #0
    d814:	ble.n	d828 <_strtod_l+0x4b0>
    d816:	mov	r1, r6
    d818:	mov	r2, r4
    d81a:	mov	r0, fp
    d81c:	bl	12938 <__lshift>
    d820:	mov	r6, r0
    d822:	cmp	r0, #0
    d824:	beq.w	dbc8 <_strtod_l+0x850>
    d828:	cmp	r5, #0
    d82a:	ble.n	d83e <_strtod_l+0x4c6>
    d82c:	mov	r1, sl
    d82e:	mov	r2, r5
    d830:	mov	r0, fp
    d832:	bl	12938 <__lshift>
    d836:	mov	sl, r0
    d838:	cmp	r0, #0
    d83a:	beq.w	dbc8 <_strtod_l+0x850>
    d83e:	mov	r2, r6
    d840:	ldr	r1, [sp, #112]	; 0x70
    d842:	mov	r0, fp
    d844:	bl	12a2c <__mdiff>
    d848:	mov	r7, r0
    d84a:	cmp	r0, #0
    d84c:	beq.w	dbc8 <_strtod_l+0x850>
    d850:	movs	r3, #0
    d852:	ldr	r2, [r0, #12]
    d854:	str	r3, [r0, #12]
    d856:	mov	r1, sl
    d858:	str	r2, [sp, #52]	; 0x34
    d85a:	bl	129e8 <__mcmp>
    d85e:	cmp	r0, #0
    d860:	blt.w	e07e <_strtod_l+0xd06>
    d864:	beq.w	dff8 <_strtod_l+0xc80>
    d868:	mov	r1, sl
    d86a:	mov	r0, r7
    d86c:	bl	12d20 <__ratio>
    d870:	vmov	r4, r5, d0
    d874:	movs	r2, #0
    d876:	mov.w	r3, #1073741824	; 0x40000000
    d87a:	vmov	r0, s0
    d87e:	mov	r1, r5
    d880:	bl	bc00 <__aeabi_dcmple>
    d884:	cmp	r0, #0
    d886:	beq.n	d95c <_strtod_l+0x5e4>
    d888:	ldr	r3, [sp, #52]	; 0x34
    d88a:	cmp	r3, #0
    d88c:	beq.w	d9de <_strtod_l+0x666>
    d890:	vldr	d7, [pc, #260]	; d998 <_strtod_l+0x620>
    d894:	ldr	r3, [sp, #20]
    d896:	ldr	r5, [pc, #280]	; (d9b0 <_strtod_l+0x638>)
    d898:	vstr	d7, [sp, #56]	; 0x38
    d89c:	movs	r4, #0
    d89e:	mov	r8, r3
    d8a0:	ldr.w	r9, [pc, #276]	; d9b8 <_strtod_l+0x640>
    d8a4:	ldr	r3, [pc, #268]	; (d9b4 <_strtod_l+0x63c>)
    d8a6:	and.w	r9, r8, r9
    d8aa:	cmp	r9, r3
    d8ac:	beq.w	dcdc <_strtod_l+0x964>
    d8b0:	ldr	r3, [sp, #40]	; 0x28
    d8b2:	cbz	r3, d900 <_strtod_l+0x588>
    d8b4:	cmp.w	r9, #111149056	; 0x6a00000
    d8b8:	bhi.n	d900 <_strtod_l+0x588>
    d8ba:	add	r3, pc, #228	; (adr r3, d9a0 <_strtod_l+0x628>)
    d8bc:	ldrd	r2, r3, [r3]
    d8c0:	ldrd	r0, r1, [sp, #56]	; 0x38
    d8c4:	bl	bc00 <__aeabi_dcmple>
    d8c8:	cbz	r0, d8f8 <_strtod_l+0x580>
    d8ca:	ldrd	r0, r1, [sp, #56]	; 0x38
    d8ce:	bl	bcb8 <__aeabi_d2uiz>
    d8d2:	cmp	r0, #0
    d8d4:	beq.w	df58 <_strtod_l+0xbe0>
    d8d8:	bl	b61c <__aeabi_ui2d>
    d8dc:	strd	r0, r1, [sp, #56]	; 0x38
    d8e0:	ldr	r3, [sp, #52]	; 0x34
    d8e2:	cmp	r3, #0
    d8e4:	bne.w	df4e <_strtod_l+0xbd6>
    d8e8:	ldrd	r1, r2, [sp, #56]	; 0x38
    d8ec:	add.w	r3, r2, #2147483648	; 0x80000000
    d8f0:	str	r1, [sp, #80]	; 0x50
    d8f2:	str	r3, [sp, #84]	; 0x54
    d8f4:	ldrd	r4, r5, [sp, #80]	; 0x50
    d8f8:	add.w	r3, r5, #112197632	; 0x6b00000
    d8fc:	rsb	r5, r9, r3
    d900:	vldr	d0, [sp, #32]
    d904:	bl	12b40 <__ulp>
    d908:	mov	r0, r4
    d90a:	vmov	r2, r3, d0
    d90e:	mov	r1, r5
    d910:	bl	b708 <__aeabi_dmul>
    d914:	ldrd	r2, r3, [sp, #32]
    d918:	bl	b3a4 <__adddf3>
    d91c:	strd	r0, r1, [sp, #16]
    d920:	mov	r4, r1
    d922:	ldr	r3, [sp, #40]	; 0x28
    d924:	cbnz	r3, d930 <_strtod_l+0x5b8>
    d926:	ldr	r3, [pc, #144]	; (d9b8 <_strtod_l+0x640>)
    d928:	ands	r3, r4
    d92a:	cmp	r9, r3
    d92c:	beq.w	dd4c <_strtod_l+0x9d4>
    d930:	ldr	r1, [sp, #112]	; 0x70
    d932:	mov	r0, fp
    d934:	bl	1258c <_Bfree>
    d938:	mov	r1, r6
    d93a:	mov	r0, fp
    d93c:	bl	1258c <_Bfree>
    d940:	mov	r1, sl
    d942:	mov	r0, fp
    d944:	bl	1258c <_Bfree>
    d948:	mov	r1, r7
    d94a:	mov	r0, fp
    d94c:	bl	1258c <_Bfree>
    d950:	b.n	d702 <_strtod_l+0x38a>
    d952:	movs	r2, #0
    d954:	str	r2, [sp, #76]	; 0x4c
    d956:	movs	r2, #1
    d958:	str	r2, [sp, #56]	; 0x38
    d95a:	b.n	d78c <_strtod_l+0x414>
    d95c:	ldr	r3, [pc, #92]	; (d9bc <_strtod_l+0x644>)
    d95e:	mov	r0, r4
    d960:	mov	r1, r5
    d962:	movs	r2, #0
    d964:	bl	b708 <__aeabi_dmul>
    d968:	ldr	r3, [sp, #52]	; 0x34
    d96a:	strd	r0, r1, [sp, #56]	; 0x38
    d96e:	cmp	r3, #0
    d970:	bne.n	da28 <_strtod_l+0x6b0>
    d972:	add.w	r3, r1, #2147483648	; 0x80000000
    d976:	str	r0, [sp, #64]	; 0x40
    d978:	str	r3, [sp, #68]	; 0x44
    d97a:	ldr	r3, [sp, #20]
    d97c:	ldrd	r4, r5, [sp, #64]	; 0x40
    d980:	mov	r8, r3
    d982:	b.n	d8a0 <_strtod_l+0x528>
    d984:	mov.w	r9, #1
    d988:	cmp	r0, #0
    d98a:	bne.n	da3e <_strtod_l+0x6c6>
    d98c:	ldr	r3, [sp, #40]	; 0x28
    d98e:	cmp	r3, #0
    d990:	beq.w	d3e4 <_strtod_l+0x6c>
    d994:	mov	r4, r0
    d996:	b.n	d5f4 <_strtod_l+0x27c>
    d998:	.word	0x00000000
    d99c:	.word	0x3ff00000
    d9a0:	.word	0xffc00000
    d9a4:	.word	0x41dfffff
    d9a8:	.word	0x00014378
    d9ac:	.word	0xfffffc02
    d9b0:	.word	0x3ff00000
    d9b4:	.word	0x7fe00000
    d9b8:	.word	0x7ff00000
    d9bc:	.word	0x3fe00000
    d9c0:	ldr	r3, [sp, #44]	; 0x2c
    d9c2:	ldr	r5, [sp, #48]	; 0x30
    d9c4:	subs	r4, r3, r2
    d9c6:	b.n	d760 <_strtod_l+0x3e8>
    d9c8:	mov.w	r9, #1
    d9cc:	b.n	d484 <_strtod_l+0x10c>
    d9ce:	ldr	r1, [pc, #736]	; (dcb0 <_strtod_l+0x938>)
    d9d0:	subs	r1, r1, r2
    d9d2:	movs	r2, #1
    d9d4:	lsl.w	r1, r2, r1
    d9d8:	str	r1, [sp, #76]	; 0x4c
    d9da:	str	r2, [sp, #56]	; 0x38
    d9dc:	b.n	d78c <_strtod_l+0x414>
    d9de:	ldrd	r1, r2, [sp, #16]
    d9e2:	cmp	r1, #0
    d9e4:	bne.w	db7a <_strtod_l+0x802>
    d9e8:	ubfx	r3, r2, #0, #20
    d9ec:	mov	r8, r2
    d9ee:	cmp	r3, #0
    d9f0:	bne.w	db86 <_strtod_l+0x80e>
    d9f4:	movs	r2, #0
    d9f6:	ldr	r3, [pc, #700]	; (dcb4 <_strtod_l+0x93c>)
    d9f8:	mov	r0, r4
    d9fa:	mov	r1, r5
    d9fc:	bl	bbec <__aeabi_dcmplt>
    da00:	cmp	r0, #0
    da02:	bne.w	e102 <_strtod_l+0xd8a>
    da06:	movs	r2, #0
    da08:	ldr	r3, [pc, #684]	; (dcb8 <_strtod_l+0x940>)
    da0a:	mov	r0, r4
    da0c:	mov	r1, r5
    da0e:	bl	b708 <__aeabi_dmul>
    da12:	mov	r2, r1
    da14:	mov	r1, r0
    da16:	strd	r1, r2, [sp, #56]	; 0x38
    da1a:	add.w	r3, r2, #2147483648	; 0x80000000
    da1e:	str	r0, [sp, #96]	; 0x60
    da20:	str	r3, [sp, #100]	; 0x64
    da22:	ldrd	r4, r5, [sp, #96]	; 0x60
    da26:	b.n	d8a0 <_strtod_l+0x528>
    da28:	vldr	d7, [sp, #56]	; 0x38
    da2c:	vstr	d7, [sp, #64]	; 0x40
    da30:	b.n	d97a <_strtod_l+0x602>
    da32:	mov.w	ip, #1
    da36:	adds	r3, r6, #2
    da38:	str	r3, [sp, #108]	; 0x6c
    da3a:	ldrb	r3, [r6, #2]
    da3c:	b.n	d60c <_strtod_l+0x294>
    da3e:	movs	r4, #0
    da40:	b.n	d5f4 <_strtod_l+0x27c>
    da42:	cmp.w	r9, #0
    da46:	bne.w	d3e4 <_strtod_l+0x6c>
    da4a:	subs	r3, #73	; 0x49
    da4c:	cmp	r3, #37	; 0x25
    da4e:	bhi.w	d3e4 <_strtod_l+0x6c>
    da52:	add	r2, pc, #4	; (adr r2, da58 <_strtod_l+0x6e0>)
    da54:	ldr.w	pc, [r2, r3, lsl #2]
    da58:	.word	0x0000d5bd
    da5c:	.word	0x0000d3e5
    da60:	.word	0x0000d3e5
    da64:	.word	0x0000d3e5
    da68:	.word	0x0000d3e5
    da6c:	.word	0x0000db95
    da70:	.word	0x0000d3e5
    da74:	.word	0x0000d3e5
    da78:	.word	0x0000d3e5
    da7c:	.word	0x0000d3e5
    da80:	.word	0x0000d3e5
    da84:	.word	0x0000d3e5
    da88:	.word	0x0000d3e5
    da8c:	.word	0x0000d3e5
    da90:	.word	0x0000d3e5
    da94:	.word	0x0000d3e5
    da98:	.word	0x0000d3e5
    da9c:	.word	0x0000d3e5
    daa0:	.word	0x0000d3e5
    daa4:	.word	0x0000d3e5
    daa8:	.word	0x0000d3e5
    daac:	.word	0x0000d3e5
    dab0:	.word	0x0000d3e5
    dab4:	.word	0x0000d3e5
    dab8:	.word	0x0000d3e5
    dabc:	.word	0x0000d3e5
    dac0:	.word	0x0000d3e5
    dac4:	.word	0x0000d3e5
    dac8:	.word	0x0000d3e5
    dacc:	.word	0x0000d3e5
    dad0:	.word	0x0000d3e5
    dad4:	.word	0x0000d3e5
    dad8:	.word	0x0000d5bd
    dadc:	.word	0x0000d3e5
    dae0:	.word	0x0000d3e5
    dae4:	.word	0x0000d3e5
    dae8:	.word	0x0000d3e5
    daec:	.word	0x0000db95
    daf0:	cmp.w	r6, #308	; 0x134
    daf4:	bgt.w	dd36 <_strtod_l+0x9be>
    daf8:	asrs	r6, r6, #4
    dafa:	cmp	r6, #1
    dafc:	ldr.w	r9, [pc, #472]	; dcd8 <_strtod_l+0x960>
    db00:	ble.w	e136 <_strtod_l+0xdbe>
    db04:	ldrd	r0, r1, [sp, #16]
    db08:	movs	r3, #0
    db0a:	mov	r7, r9
    db0c:	mov	r8, r3
    db0e:	tst.w	r6, #1
    db12:	add.w	r8, r8, #1
    db16:	mov.w	r6, r6, asr #1
    db1a:	beq.n	db26 <_strtod_l+0x7ae>
    db1c:	ldrd	r2, r3, [r7]
    db20:	bl	b708 <__aeabi_dmul>
    db24:	movs	r3, #1
    db26:	cmp	r6, #1
    db28:	add.w	r7, r7, #8
    db2c:	bne.n	db0e <_strtod_l+0x796>
    db2e:	cmp	r3, #0
    db30:	bne.w	e1fa <_strtod_l+0xe82>
    db34:	ldr	r3, [sp, #20]
    db36:	sub.w	r3, r3, #55574528	; 0x3500000
    db3a:	str	r3, [sp, #20]
    db3c:	add.w	r8, r9, r8, lsl #3
    db40:	ldrd	r2, r3, [sp, #16]
    db44:	ldrd	r0, r1, [r8]
    db48:	bl	b708 <__aeabi_dmul>
    db4c:	bic.w	r3, r1, #2147483648	; 0x80000000
    db50:	lsrs	r3, r3, #20
    db52:	ldr	r2, [pc, #360]	; (dcbc <_strtod_l+0x944>)
    db54:	lsls	r3, r3, #20
    db56:	cmp	r3, r2
    db58:	strd	r0, r1, [sp, #16]
    db5c:	bhi.w	dd36 <_strtod_l+0x9be>
    db60:	sub.w	r2, r2, #1048576	; 0x100000
    db64:	cmp	r3, r2
    db66:	bls.w	e0f8 <_strtod_l+0xd80>
    db6a:	ldr	r3, [pc, #340]	; (dcc0 <_strtod_l+0x948>)
    db6c:	str	r3, [sp, #20]
    db6e:	movs	r3, #0
    db70:	str	r3, [sp, #40]	; 0x28
    db72:	mov.w	r3, #4294967295
    db76:	str	r3, [sp, #16]
    db78:	b.n	d6d4 <_strtod_l+0x35c>
    db7a:	ldrd	r1, r2, [sp, #16]
    db7e:	cmp	r1, #1
    db80:	beq.w	df62 <_strtod_l+0xbea>
    db84:	mov	r8, r2
    db86:	vldr	d7, [pc, #288]	; dca8 <_strtod_l+0x930>
    db8a:	movs	r4, #0
    db8c:	ldr	r5, [pc, #308]	; (dcc4 <_strtod_l+0x94c>)
    db8e:	vstr	d7, [sp, #56]	; 0x38
    db92:	b.n	d8a0 <_strtod_l+0x528>
    db94:	add	r0, sp, #108	; 0x6c
    db96:	ldr	r1, [pc, #304]	; (dcc8 <_strtod_l+0x950>)
    db98:	bl	12258 <__match>
    db9c:	cmp	r0, #0
    db9e:	beq.w	d3e4 <_strtod_l+0x6c>
    dba2:	ldr	r3, [sp, #108]	; 0x6c
    dba4:	ldrb	r3, [r3, #0]
    dba6:	cmp	r3, #40	; 0x28
    dba8:	beq.w	e1b0 <_strtod_l+0xe38>
    dbac:	ldr	r3, [pc, #284]	; (dccc <_strtod_l+0x954>)
    dbae:	str	r3, [sp, #20]
    dbb0:	movs	r3, #0
    dbb2:	str	r3, [sp, #16]
    dbb4:	b.n	d5e8 <_strtod_l+0x270>
    dbb6:	str	r6, [sp, #108]	; 0x6c
    dbb8:	movs	r2, #0
    dbba:	b.n	d492 <_strtod_l+0x11a>
    dbbc:	mov.w	ip, #0
    dbc0:	b.n	da36 <_strtod_l+0x6be>
    dbc2:	adds	r3, #1
    dbc4:	bne.w	e196 <_strtod_l+0xe1e>
    dbc8:	ldr	r0, [sp, #112]	; 0x70
    dbca:	ldr	r3, [pc, #260]	; (dcd0 <_strtod_l+0x958>)
    dbcc:	str	r3, [sp, #20]
    dbce:	movs	r2, #0
    dbd0:	str	r2, [sp, #16]
    dbd2:	ldrd	r8, r9, [sp, #16]
    dbd6:	movs	r3, #34	; 0x22
    dbd8:	str.w	r3, [fp]
    dbdc:	mov	r1, r0
    dbde:	mov	r0, fp
    dbe0:	bl	1258c <_Bfree>
    dbe4:	mov	r1, r6
    dbe6:	mov	r0, fp
    dbe8:	bl	1258c <_Bfree>
    dbec:	mov	r1, sl
    dbee:	mov	r0, fp
    dbf0:	bl	1258c <_Bfree>
    dbf4:	ldr	r1, [sp, #72]	; 0x48
    dbf6:	mov	r0, fp
    dbf8:	bl	1258c <_Bfree>
    dbfc:	mov	r1, r7
    dbfe:	mov	r0, fp
    dc00:	bl	1258c <_Bfree>
    dc04:	b.n	d4a8 <_strtod_l+0x130>
    dc06:	ldr	r2, [sp, #28]
    dc08:	str	r5, [sp, #8]
    dc0a:	add	r3, sp, #112	; 0x70
    dc0c:	str	r2, [sp, #4]
    dc0e:	str	r3, [sp, #0]
    dc10:	ldr	r2, [pc, #192]	; (dcd4 <_strtod_l+0x95c>)
    dc12:	add	r3, sp, #116	; 0x74
    dc14:	add	r1, sp, #108	; 0x6c
    dc16:	mov	r0, fp
    dc18:	bl	11d48 <__gethex>
    dc1c:	ands.w	r6, r0, #7
    dc20:	mov	r5, r0
    dc22:	beq.w	d4a0 <_strtod_l+0x128>
    dc26:	cmp	r6, #6
    dc28:	bne.w	ded8 <_strtod_l+0xb60>
    dc2c:	adds	r4, #1
    dc2e:	movs	r3, #0
    dc30:	str	r4, [sp, #108]	; 0x6c
    dc32:	mov.w	r8, #0
    dc36:	mov.w	r9, #0
    dc3a:	str	r3, [sp, #28]
    dc3c:	b.n	d4a8 <_strtod_l+0x130>
    dc3e:	ldr.w	r1, [sl]
    dc42:	mov	r0, r4
    dc44:	mov	r2, r9
    dc46:	bl	d29c <strncmp>
    dc4a:	cbz	r0, dc60 <_strtod_l+0x8e8>
    dc4c:	mov.w	sl, #0
    dc50:	mov	r3, r7
    dc52:	mov	r8, sl
    dc54:	mov	r5, sl
    dc56:	mov	r0, sl
    dc58:	mov	r7, sl
    dc5a:	mov	r4, sl
    dc5c:	mov	r9, sl
    dc5e:	b.n	d484 <_strtod_l+0x10c>
    dc60:	ldr	r3, [sp, #108]	; 0x6c
    dc62:	add.w	r2, r3, r9
    dc66:	str	r2, [sp, #108]	; 0x6c
    dc68:	ldrb.w	r3, [r3, r9]
    dc6c:	cmp	r3, #48	; 0x30
    dc6e:	bne.n	dc7e <_strtod_l+0x906>
    dc70:	adds	r2, #1
    dc72:	str	r2, [sp, #108]	; 0x6c
    dc74:	ldrb	r3, [r2, #0]
    dc76:	cmp	r3, #48	; 0x30
    dc78:	add.w	r0, r0, #1
    dc7c:	beq.n	dc70 <_strtod_l+0x8f8>
    dc7e:	sub.w	r2, r3, #49	; 0x31
    dc82:	cmp	r2, #8
    dc84:	bls.w	df80 <_strtod_l+0xc08>
    dc88:	mov.w	sl, #0
    dc8c:	cmp	r3, #101	; 0x65
    dc8e:	mov	r8, sl
    dc90:	mov	r5, sl
    dc92:	mov	r7, sl
    dc94:	beq.w	d984 <_strtod_l+0x60c>
    dc98:	mov	r4, sl
    dc9a:	mov.w	r9, #1
    dc9e:	b.w	d48a <_strtod_l+0x112>
    dca2:	nop
    dca4:	nop.w
    dca8:	.word	0x00000000
    dcac:	.word	0x3ff00000
    dcb0:	.word	0xfffffbe2
    dcb4:	.word	0x3ff00000
    dcb8:	.word	0x3fe00000
    dcbc:	.word	0x7ca00000
    dcc0:	.word	0x7fefffff
    dcc4:	.word	0xbff00000
    dcc8:	.word	0x0001408c
    dccc:	.word	0xfff80000
    dcd0:	.word	0x7ff00000
    dcd4:	.word	0x0001406c
    dcd8:	.word	0x00014440
    dcdc:	sub.w	r3, r8, #55574528	; 0x3500000
    dce0:	str	r3, [sp, #20]
    dce2:	vldr	d7, [sp, #16]
    dce6:	vmov.f32	s0, s14
    dcea:	vmov.f32	s1, s15
    dcee:	bl	12b40 <__ulp>
    dcf2:	mov	r0, r4
    dcf4:	vmov	r2, r3, d0
    dcf8:	mov	r1, r5
    dcfa:	bl	b708 <__aeabi_dmul>
    dcfe:	ldrd	r2, r3, [sp, #16]
    dd02:	bl	b3a4 <__adddf3>
    dd06:	bic.w	r3, r1, #2147483648	; 0x80000000
    dd0a:	strd	r0, r1, [sp, #16]
    dd0e:	lsrs	r3, r3, #20
    dd10:	ldr	r2, [pc, #684]	; (dfc0 <_strtod_l+0xc48>)
    dd12:	ldrd	r0, r1, [sp, #32]
    dd16:	lsls	r3, r3, #20
    dd18:	cmp	r3, r2
    dd1a:	strd	r0, r1, [sp, #88]	; 0x58
    dd1e:	bls.w	de96 <_strtod_l+0xb1e>
    dd22:	ldr	r3, [pc, #672]	; (dfc4 <_strtod_l+0xc4c>)
    dd24:	cmp	r1, r3
    dd26:	beq.w	e0ee <_strtod_l+0xd76>
    dd2a:	ldr	r3, [pc, #664]	; (dfc4 <_strtod_l+0xc4c>)
    dd2c:	str	r3, [sp, #20]
    dd2e:	mov.w	r3, #4294967295
    dd32:	str	r3, [sp, #16]
    dd34:	b.n	d930 <_strtod_l+0x5b8>
    dd36:	ldr	r3, [pc, #656]	; (dfc8 <_strtod_l+0xc50>)
    dd38:	str	r3, [sp, #20]
    dd3a:	movs	r2, #0
    dd3c:	movs	r3, #34	; 0x22
    dd3e:	str	r2, [sp, #16]
    dd40:	ldrd	r8, r9, [sp, #16]
    dd44:	str.w	r3, [fp]
    dd48:	b.w	d4a8 <_strtod_l+0x130>
    dd4c:	ldrd	r8, r9, [sp, #56]	; 0x38
    dd50:	mov	r1, r9
    dd52:	mov	r0, r8
    dd54:	bl	bc68 <__aeabi_d2iz>
    dd58:	bl	b63c <__aeabi_i2d>
    dd5c:	mov	r3, r1
    dd5e:	mov	r2, r0
    dd60:	mov	r1, r9
    dd62:	mov	r0, r8
    dd64:	bl	b3a0 <__aeabi_dsub>
    dd68:	ldr	r3, [sp, #52]	; 0x34
    dd6a:	mov	r8, r0
    dd6c:	mov	r9, r1
    dd6e:	cbnz	r3, dd92 <_strtod_l+0xa1a>
    dd70:	ldr	r3, [sp, #16]
    dd72:	cbnz	r3, dd92 <_strtod_l+0xa1a>
    dd74:	ubfx	r4, r4, #0, #20
    dd78:	cbnz	r4, dd92 <_strtod_l+0xa1a>
    dd7a:	add	r3, pc, #548	; (adr r3, dfa0 <_strtod_l+0xc28>)
    dd7c:	ldrd	r2, r3, [r3]
    dd80:	bl	bbec <__aeabi_dcmplt>
    dd84:	cmp	r0, #0
    dd86:	beq.w	d930 <_strtod_l+0x5b8>
    dd8a:	ldrd	r8, r9, [sp, #16]
    dd8e:	ldr	r0, [sp, #112]	; 0x70
    dd90:	b.n	dbdc <_strtod_l+0x864>
    dd92:	add	r3, pc, #532	; (adr r3, dfa8 <_strtod_l+0xc30>)
    dd94:	ldrd	r2, r3, [r3]
    dd98:	mov	r0, r8
    dd9a:	mov	r1, r9
    dd9c:	bl	bbec <__aeabi_dcmplt>
    dda0:	cmp	r0, #0
    dda2:	bne.n	dd8a <_strtod_l+0xa12>
    dda4:	mov	r0, r8
    dda6:	mov	r1, r9
    dda8:	add	r3, pc, #516	; (adr r3, dfb0 <_strtod_l+0xc38>)
    ddaa:	ldrd	r2, r3, [r3]
    ddae:	bl	bc28 <__aeabi_dcmpgt>
    ddb2:	cmp	r0, #0
    ddb4:	beq.w	d930 <_strtod_l+0x5b8>
    ddb8:	b.n	dd8a <_strtod_l+0xa12>
    ddba:	beq.w	d6d0 <_strtod_l+0x358>
    ddbe:	rsb	r6, r9, #0
    ddc2:	ands.w	r2, r6, #15
    ddc6:	beq.n	ddde <_strtod_l+0xa66>
    ddc8:	ldr	r3, [pc, #512]	; (dfcc <_strtod_l+0xc54>)
    ddca:	add.w	r3, r3, r2, lsl #3
    ddce:	ldrd	r0, r1, [sp, #16]
    ddd2:	ldrd	r2, r3, [r3]
    ddd6:	bl	b95c <__aeabi_ddiv>
    ddda:	strd	r0, r1, [sp, #16]
    ddde:	asrs	r6, r6, #4
    dde0:	beq.w	d6d0 <_strtod_l+0x358>
    dde4:	cmp	r6, #31
    dde6:	bgt.n	de5a <_strtod_l+0xae2>
    dde8:	ands.w	r3, r6, #16
    ddec:	beq.w	e160 <_strtod_l+0xde8>
    ddf0:	movs	r3, #106	; 0x6a
    ddf2:	cmp	r6, #0
    ddf4:	str	r3, [sp, #40]	; 0x28
    ddf6:	ble.n	de20 <_strtod_l+0xaa8>
    ddf8:	ldrd	r0, r1, [sp, #16]
    ddfc:	ldr	r7, [pc, #464]	; (dfd0 <_strtod_l+0xc58>)
    ddfe:	movs	r3, #0
    de00:	lsls	r2, r6, #31
    de02:	bpl.n	de0e <_strtod_l+0xa96>
    de04:	ldrd	r2, r3, [r7]
    de08:	bl	b708 <__aeabi_dmul>
    de0c:	movs	r3, #1
    de0e:	asrs	r6, r6, #1
    de10:	add.w	r7, r7, #8
    de14:	bne.n	de00 <_strtod_l+0xa88>
    de16:	cmp	r3, #0
    de18:	bne.w	e200 <_strtod_l+0xe88>
    de1c:	ldr	r3, [sp, #40]	; 0x28
    de1e:	cbz	r3, de48 <_strtod_l+0xad0>
    de20:	ldrd	r1, r2, [sp, #16]
    de24:	ubfx	r3, r2, #20, #11
    de28:	rsb	r3, r3, #107	; 0x6b
    de2c:	cmp	r3, #0
    de2e:	mov	r1, r2
    de30:	ble.n	de48 <_strtod_l+0xad0>
    de32:	cmp	r3, #31
    de34:	ble.w	e1ea <_strtod_l+0xe72>
    de38:	movs	r2, #0
    de3a:	cmp	r3, #52	; 0x34
    de3c:	str	r2, [sp, #16]
    de3e:	ble.w	e206 <_strtod_l+0xe8e>
    de42:	mov.w	r3, #57671680	; 0x3700000
    de46:	str	r3, [sp, #20]
    de48:	movs	r2, #0
    de4a:	movs	r3, #0
    de4c:	ldrd	r0, r1, [sp, #16]
    de50:	bl	bbd8 <__aeabi_dcmpeq>
    de54:	cmp	r0, #0
    de56:	beq.w	d6d4 <_strtod_l+0x35c>
    de5a:	movs	r3, #34	; 0x22
    de5c:	str.w	r3, [fp]
    de60:	mov.w	r8, #0
    de64:	mov.w	r9, #0
    de68:	b.w	d4a8 <_strtod_l+0x130>
    de6c:	ldr	r1, [sp, #108]	; 0x6c
    de6e:	adds	r4, #1
    de70:	cmp	r0, #8
    de72:	ble.w	df92 <_strtod_l+0xc1a>
    de76:	cmp	r4, #16
    de78:	itt	le
    de7a:	addle.w	r8, r8, r8, lsl #2
    de7e:	addle.w	r8, r2, r8, lsl #1
    de82:	movs	r0, #0
    de84:	adds	r3, r1, #1
    de86:	str	r3, [sp, #108]	; 0x6c
    de88:	ldrb	r3, [r1, #1]
    de8a:	b.w	d4cc <_strtod_l+0x154>
    de8e:	movw	r2, #19999	; 0x4e1f
    de92:	b.w	d67e <_strtod_l+0x306>
    de96:	ldr	r3, [sp, #20]
    de98:	add.w	r4, r3, #55574528	; 0x3500000
    de9c:	str	r4, [sp, #20]
    de9e:	b.n	d922 <_strtod_l+0x5aa>
    dea0:	ldr	r6, [sp, #44]	; 0x2c
    dea2:	rsb	r3, r4, #37	; 0x25
    dea6:	cmp	r6, r3
    dea8:	bgt.w	d69c <_strtod_l+0x324>
    deac:	ldr	r5, [pc, #284]	; (dfcc <_strtod_l+0xc54>)
    deae:	rsb	r4, r4, #15
    deb2:	add.w	r1, r5, r4, lsl #3
    deb6:	subs	r4, r6, r4
    deb8:	ldrd	r2, r3, [sp, #16]
    debc:	ldrd	r0, r1, [r1]
    dec0:	add.w	r5, r5, r4, lsl #3
    dec4:	bl	b708 <__aeabi_dmul>
    dec8:	ldrd	r2, r3, [r5]
    decc:	bl	b708 <__aeabi_dmul>
    ded0:	mov	r8, r0
    ded2:	mov	r9, r1
    ded4:	b.w	d4a8 <_strtod_l+0x130>
    ded8:	ldr	r2, [sp, #112]	; 0x70
    deda:	cbz	r2, deec <_strtod_l+0xb74>
    dedc:	movs	r1, #53	; 0x35
    dede:	add	r0, sp, #120	; 0x78
    dee0:	bl	12d80 <__copybits>
    dee4:	mov	r0, fp
    dee6:	ldr	r1, [sp, #112]	; 0x70
    dee8:	bl	1258c <_Bfree>
    deec:	cmp	r6, #6
    deee:	bhi.n	df08 <_strtod_l+0xb90>
    def0:	tbb	[pc, r6]
    def4:	.word	0x1318211d
    def8:	.short	0x2104
    defa:	.byte	0x1d
    defb:	.byte	0x00
    defc:	mvn.w	r3, #2147483648	; 0x80000000
    df00:	str	r3, [sp, #20]
    df02:	mov.w	r3, #4294967295
    df06:	str	r3, [sp, #16]
    df08:	lsls	r1, r5, #28
    df0a:	bpl.w	d5e8 <_strtod_l+0x270>
    df0e:	ldr	r3, [sp, #20]
    df10:	orr.w	r3, r3, #2147483648	; 0x80000000
    df14:	str	r3, [sp, #20]
    df16:	b.w	d5e8 <_strtod_l+0x270>
    df1a:	ldr	r3, [pc, #172]	; (dfc8 <_strtod_l+0xc50>)
    df1c:	str	r3, [sp, #20]
    df1e:	movs	r3, #0
    df20:	str	r3, [sp, #16]
    df22:	b.n	df08 <_strtod_l+0xb90>
    df24:	ldr	r3, [sp, #120]	; 0x78
    df26:	str	r3, [sp, #16]
    df28:	ldr	r3, [sp, #124]	; 0x7c
    df2a:	str	r3, [sp, #20]
    df2c:	b.n	df08 <_strtod_l+0xb90>
    df2e:	movs	r3, #0
    df30:	str	r3, [sp, #20]
    df32:	str	r3, [sp, #16]
    df34:	b.n	df08 <_strtod_l+0xb90>
    df36:	ldr	r2, [sp, #116]	; 0x74
    df38:	ldr	r3, [sp, #124]	; 0x7c
    df3a:	ldr	r1, [sp, #120]	; 0x78
    df3c:	str	r1, [sp, #16]
    df3e:	addw	r2, r2, #1075	; 0x433
    df42:	bic.w	r3, r3, #1048576	; 0x100000
    df46:	orr.w	r3, r3, r2, lsl #20
    df4a:	str	r3, [sp, #20]
    df4c:	b.n	df08 <_strtod_l+0xb90>
    df4e:	vldr	d7, [sp, #56]	; 0x38
    df52:	vstr	d7, [sp, #80]	; 0x50
    df56:	b.n	d8f4 <_strtod_l+0x57c>
    df58:	vldr	d7, [pc, #92]	; dfb8 <_strtod_l+0xc40>
    df5c:	vstr	d7, [sp, #56]	; 0x38
    df60:	b.n	d8e0 <_strtod_l+0x568>
    df62:	ldrd	r1, r2, [sp, #16]
    df66:	mov	r8, r2
    df68:	cmp	r2, #0
    df6a:	bne.w	db86 <_strtod_l+0x80e>
    df6e:	movs	r3, #34	; 0x22
    df70:	str.w	r3, [fp]
    df74:	ldr	r0, [sp, #112]	; 0x70
    df76:	mov.w	r8, #0
    df7a:	mov.w	r9, #0
    df7e:	b.n	dbdc <_strtod_l+0x864>
    df80:	ldr	r2, [sp, #108]	; 0x6c
    df82:	str	r2, [sp, #32]
    df84:	movs	r5, #0
    df86:	subs	r3, #48	; 0x30
    df88:	adds	r7, r0, #1
    df8a:	mov	r1, r2
    df8c:	mov	sl, r5
    df8e:	mov	r8, r5
    df90:	movs	r4, #1
    df92:	add.w	r5, r5, r5, lsl #2
    df96:	add.w	r5, r3, r5, lsl #1
    df9a:	movs	r0, #0
    df9c:	b.n	de84 <_strtod_l+0xb0c>
    df9e:	nop
    dfa0:	.word	0x94a03595
    dfa4:	.word	0x3fcfffff
    dfa8:	.word	0x94a03595
    dfac:	.word	0x3fdfffff
    dfb0:	.word	0x35afe535
    dfb4:	.word	0x3fe00000
    dfb8:	.word	0x00000000
    dfbc:	.word	0x3ff00000
    dfc0:	.word	0x7c9fffff
    dfc4:	.word	0x7fefffff
    dfc8:	.word	0x7ff00000
    dfcc:	.word	0x00014378
    dfd0:	.word	0x000140a8
    dfd4:	ldr	r1, [sp, #44]	; 0x2c
    dfd6:	cmn.w	r1, #22
    dfda:	blt.w	d69c <_strtod_l+0x324>
    dfde:	ldr	r2, [pc, #600]	; (e238 <_strtod_l+0xec0>)
    dfe0:	sub.w	r2, r2, r1, lsl #3
    dfe4:	ldrd	r2, r3, [r2]
    dfe8:	ldrd	r0, r1, [sp, #16]
    dfec:	bl	b95c <__aeabi_ddiv>
    dff0:	mov	r8, r0
    dff2:	mov	r9, r1
    dff4:	b.w	d4a8 <_strtod_l+0x130>
    dff8:	ldr	r3, [sp, #52]	; 0x34
    dffa:	ldrd	r8, r9, [sp, #32]
    dffe:	cmp	r3, #0
    e000:	beq.w	e114 <_strtod_l+0xd9c>
    e004:	ldrd	r4, r5, [sp, #16]
    e008:	ldr	r3, [pc, #560]	; (e23c <_strtod_l+0xec4>)
    e00a:	ubfx	r1, r5, #0, #20
    e00e:	cmp	r1, r3
    e010:	mov	r2, r5
    e012:	beq.w	e16a <_strtod_l+0xdf2>
    e016:	ldr	r3, [sp, #76]	; 0x4c
    e018:	cmp	r3, #0
    e01a:	beq.w	e12c <_strtod_l+0xdb4>
    e01e:	ldr	r2, [sp, #20]
    e020:	tst	r3, r2
    e022:	beq.n	e046 <_strtod_l+0xcce>
    e024:	ldr	r3, [sp, #52]	; 0x34
    e026:	ldr	r2, [sp, #40]	; 0x28
    e028:	ldrd	r0, r1, [sp, #16]
    e02c:	cmp	r3, #0
    e02e:	beq.w	e13c <_strtod_l+0xdc4>
    e032:	bl	d33c <sulp>
    e036:	mov	r2, r0
    e038:	mov	r3, r1
    e03a:	mov	r0, r8
    e03c:	mov	r1, r9
    e03e:	bl	b3a4 <__adddf3>
    e042:	mov	r8, r0
    e044:	mov	r9, r1
    e046:	ldr	r3, [sp, #40]	; 0x28
    e048:	cbz	r3, e07a <_strtod_l+0xd02>
    e04a:	ldr	r3, [pc, #500]	; (e240 <_strtod_l+0xec8>)
    e04c:	str	r3, [sp, #92]	; 0x5c
    e04e:	movs	r3, #0
    e050:	str	r3, [sp, #88]	; 0x58
    e052:	ldrd	r2, r3, [sp, #88]	; 0x58
    e056:	mov	r0, r8
    e058:	mov	r1, r9
    e05a:	bl	b708 <__aeabi_dmul>
    e05e:	mov	r3, r0
    e060:	mov	r4, r1
    e062:	mov	r8, r0
    e064:	mov	r9, r1
    e066:	strd	r3, r4, [sp, #16]
    e06a:	cbnz	r1, e07a <_strtod_l+0xd02>
    e06c:	ldr	r3, [sp, #16]
    e06e:	cbnz	r3, e07a <_strtod_l+0xd02>
    e070:	movs	r3, #34	; 0x22
    e072:	ldr	r0, [sp, #112]	; 0x70
    e074:	str.w	r3, [fp]
    e078:	b.n	dbdc <_strtod_l+0x864>
    e07a:	ldr	r0, [sp, #112]	; 0x70
    e07c:	b.n	dbdc <_strtod_l+0x864>
    e07e:	ldr	r3, [sp, #52]	; 0x34
    e080:	ldrd	r8, r9, [sp, #32]
    e084:	cmp	r3, #0
    e086:	bne.n	e046 <_strtod_l+0xcce>
    e088:	ldrd	r1, r2, [sp, #16]
    e08c:	cmp	r1, #0
    e08e:	bne.n	e046 <_strtod_l+0xcce>
    e090:	ubfx	r3, r2, #0, #20
    e094:	mov	r4, r2
    e096:	cmp	r3, #0
    e098:	bne.n	e046 <_strtod_l+0xcce>
    e09a:	bic.w	r3, r2, #2147483648	; 0x80000000
    e09e:	lsrs	r3, r3, #20
    e0a0:	lsls	r3, r3, #20
    e0a2:	cmp.w	r3, #112197632	; 0x6b00000
    e0a6:	bls.n	e046 <_strtod_l+0xcce>
    e0a8:	ldr	r3, [r7, #20]
    e0aa:	cbnz	r3, e0b2 <_strtod_l+0xd3a>
    e0ac:	ldr	r3, [r7, #16]
    e0ae:	cmp	r3, #1
    e0b0:	ble.n	e046 <_strtod_l+0xcce>
    e0b2:	mov	r1, r7
    e0b4:	movs	r2, #1
    e0b6:	mov	r0, fp
    e0b8:	bl	12938 <__lshift>
    e0bc:	mov	r1, sl
    e0be:	mov	r7, r0
    e0c0:	bl	129e8 <__mcmp>
    e0c4:	cmp	r0, #0
    e0c6:	ble.n	e046 <_strtod_l+0xcce>
    e0c8:	ldr	r3, [sp, #40]	; 0x28
    e0ca:	cmp	r3, #0
    e0cc:	bne.w	e1d4 <_strtod_l+0xe5c>
    e0d0:	ldr	r3, [pc, #368]	; (e244 <_strtod_l+0xecc>)
    e0d2:	ands	r3, r4
    e0d4:	sub.w	r3, r3, #1048576	; 0x100000
    e0d8:	mvn.w	r3, r3, lsr #20
    e0dc:	mvn.w	r3, r3, lsl #20
    e0e0:	str	r3, [sp, #20]
    e0e2:	mov.w	r3, #4294967295
    e0e6:	str	r3, [sp, #16]
    e0e8:	ldrd	r8, r9, [sp, #16]
    e0ec:	b.n	e046 <_strtod_l+0xcce>
    e0ee:	ldr	r3, [sp, #88]	; 0x58
    e0f0:	adds	r3, #1
    e0f2:	bne.w	dd2a <_strtod_l+0x9b2>
    e0f6:	b.n	dbc8 <_strtod_l+0x850>
    e0f8:	add.w	r3, r1, #55574528	; 0x3500000
    e0fc:	str	r3, [sp, #20]
    e0fe:	b.w	d6d0 <_strtod_l+0x358>
    e102:	vldr	d7, [pc, #292]	; e228 <_strtod_l+0xeb0>
    e106:	vstr	d7, [sp, #96]	; 0x60
    e10a:	vldr	d7, [pc, #292]	; e230 <_strtod_l+0xeb8>
    e10e:	vstr	d7, [sp, #56]	; 0x38
    e112:	b.n	da22 <_strtod_l+0x6aa>
    e114:	ldrd	r1, r2, [sp, #16]
    e118:	ubfx	r3, r2, #0, #20
    e11c:	mov	r4, r2
    e11e:	cmp	r3, #0
    e120:	bne.w	e016 <_strtod_l+0xc9e>
    e124:	cmp	r1, #0
    e126:	bne.w	e016 <_strtod_l+0xc9e>
    e12a:	b.n	e0c8 <_strtod_l+0xd50>
    e12c:	ldr	r3, [sp, #56]	; 0x38
    e12e:	ldr	r2, [sp, #16]
    e130:	tst	r3, r2
    e132:	beq.n	e046 <_strtod_l+0xcce>
    e134:	b.n	e024 <_strtod_l+0xcac>
    e136:	mov.w	r8, #0
    e13a:	b.n	db34 <_strtod_l+0x7bc>
    e13c:	bl	d33c <sulp>
    e140:	mov	r2, r0
    e142:	mov	r3, r1
    e144:	mov	r0, r8
    e146:	mov	r1, r9
    e148:	bl	b3a0 <__aeabi_dsub>
    e14c:	movs	r2, #0
    e14e:	movs	r3, #0
    e150:	mov	r8, r0
    e152:	mov	r9, r1
    e154:	bl	bbd8 <__aeabi_dcmpeq>
    e158:	cmp	r0, #0
    e15a:	bne.w	df6e <_strtod_l+0xbf6>
    e15e:	b.n	e046 <_strtod_l+0xcce>
    e160:	cmp	r6, #0
    e162:	str	r3, [sp, #40]	; 0x28
    e164:	bgt.w	ddf8 <_strtod_l+0xa80>
    e168:	b.n	de48 <_strtod_l+0xad0>
    e16a:	ldr	r3, [sp, #40]	; 0x28
    e16c:	ldr	r1, [sp, #16]
    e16e:	cbz	r3, e1aa <_strtod_l+0xe32>
    e170:	ldr	r3, [pc, #208]	; (e244 <_strtod_l+0xecc>)
    e172:	ands	r3, r5
    e174:	cmp.w	r3, #111149056	; 0x6a00000
    e178:	bhi.n	e1aa <_strtod_l+0xe32>
    e17a:	lsrs	r3, r3, #20
    e17c:	rsb	r3, r3, #107	; 0x6b
    e180:	mov.w	r0, #4294967295
    e184:	lsl.w	r3, r0, r3
    e188:	cmp	r3, r1
    e18a:	bne.w	e016 <_strtod_l+0xc9e>
    e18e:	ldr	r1, [pc, #184]	; (e248 <_strtod_l+0xed0>)
    e190:	cmp	r2, r1
    e192:	beq.w	dbc2 <_strtod_l+0x84a>
    e196:	ldr	r3, [pc, #172]	; (e244 <_strtod_l+0xecc>)
    e198:	ands	r3, r2
    e19a:	add.w	r3, r3, #1048576	; 0x100000
    e19e:	str	r3, [sp, #20]
    e1a0:	movs	r3, #0
    e1a2:	str	r3, [sp, #16]
    e1a4:	ldrd	r8, r9, [sp, #16]
    e1a8:	b.n	e046 <_strtod_l+0xcce>
    e1aa:	mov.w	r3, #4294967295
    e1ae:	b.n	e188 <_strtod_l+0xe10>
    e1b0:	add	r0, sp, #108	; 0x6c
    e1b2:	add	r2, sp, #120	; 0x78
    e1b4:	ldr	r1, [pc, #148]	; (e24c <_strtod_l+0xed4>)
    e1b6:	bl	12288 <__hexnan>
    e1ba:	cmp	r0, #5
    e1bc:	bne.w	dbac <_strtod_l+0x834>
    e1c0:	ldr	r3, [sp, #124]	; 0x7c
    e1c2:	orr.w	r3, r3, #2139095040	; 0x7f800000
    e1c6:	orr.w	r3, r3, #7340032	; 0x700000
    e1ca:	str	r3, [sp, #20]
    e1cc:	ldr	r3, [sp, #120]	; 0x78
    e1ce:	str	r3, [sp, #16]
    e1d0:	b.w	d5e8 <_strtod_l+0x270>
    e1d4:	ldr	r3, [pc, #108]	; (e244 <_strtod_l+0xecc>)
    e1d6:	ands	r3, r4
    e1d8:	cmp.w	r3, #112197632	; 0x6b00000
    e1dc:	bgt.w	e0d4 <_strtod_l+0xd5c>
    e1e0:	cmp.w	r3, #57671680	; 0x3700000
    e1e4:	bgt.w	e04a <_strtod_l+0xcd2>
    e1e8:	b.n	df6e <_strtod_l+0xbf6>
    e1ea:	mov.w	r2, #4294967295
    e1ee:	lsl.w	r3, r2, r3
    e1f2:	ldr	r2, [sp, #16]
    e1f4:	ands	r2, r3
    e1f6:	str	r2, [sp, #16]
    e1f8:	b.n	de48 <_strtod_l+0xad0>
    e1fa:	strd	r0, r1, [sp, #16]
    e1fe:	b.n	db34 <_strtod_l+0x7bc>
    e200:	strd	r0, r1, [sp, #16]
    e204:	b.n	de1c <_strtod_l+0xaa4>
    e206:	subs	r3, #32
    e208:	mov.w	r2, #4294967295
    e20c:	lsl.w	r3, r2, r3
    e210:	ands	r3, r1
    e212:	str	r3, [sp, #20]
    e214:	b.n	de48 <_strtod_l+0xad0>
    e216:	mov	r0, r4
    e218:	ldr	r1, [sp, #108]	; 0x6c
    e21a:	adds	r4, #1
    e21c:	b.n	de70 <_strtod_l+0xaf8>
    e21e:	mov	r0, r1
    e220:	ldr	r1, [sp, #108]	; 0x6c
    e222:	b.n	de84 <_strtod_l+0xb0c>
    e224:	nop.w
    e228:	.word	0x00000000
    e22c:	.word	0xbfe00000
    e230:	.word	0x00000000
    e234:	.word	0x3fe00000
    e238:	.word	0x00014378
    e23c:	.word	0x000fffff
    e240:	.word	0x39500000
    e244:	.word	0x7ff00000
    e248:	.word	0x7fefffff
    e24c:	.word	0x00014090

0000e250 <_strtod_r>:
    e250:	ldr	r3, [pc, #20]	; (e268 <_strtod_r+0x18>)
    e252:	ldr	r3, [r3, #0]
    e254:	push	{r4}
    e256:	ldr	r3, [r3, #52]	; 0x34
    e258:	ldr	r4, [pc, #16]	; (e26c <_strtod_r+0x1c>)
    e25a:	cmp	r3, #0
    e25c:	it	eq
    e25e:	moveq	r3, r4
    e260:	ldr.w	r4, [sp], #4
    e264:	b.w	d378 <_strtod_l>
    e268:	.word	0x1fff0d78
    e26c:	.word	0x1fff0d7c

0000e270 <_strtol_l.isra.0>:
    e270:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e274:	ldr.w	r9, [sp, #40]	; 0x28
    e278:	mov	r7, r1
    e27a:	mov	r8, r0
    e27c:	mov	r6, r2
    e27e:	mov	r5, r3
    e280:	mov	fp, r1
    e282:	b.n	e286 <_strtol_l.isra.0+0x16>
    e284:	mov	fp, r4
    e286:	mov	r4, fp
    e288:	mov	r0, r9
    e28a:	ldrb.w	sl, [r4], #1
    e28e:	bl	c484 <__locale_ctype_ptr_l>
    e292:	add	r0, sl
    e294:	ldrb	r1, [r0, #1]
    e296:	and.w	r1, r1, #8
    e29a:	and.w	ip, r1, #255	; 0xff
    e29e:	cmp	r1, #0
    e2a0:	bne.n	e284 <_strtol_l.isra.0+0x14>
    e2a2:	mov	r2, sl
    e2a4:	cmp	r2, #45	; 0x2d
    e2a6:	beq.n	e36c <_strtol_l.isra.0+0xfc>
    e2a8:	cmp	r2, #43	; 0x2b
    e2aa:	itt	eq
    e2ac:	ldrbeq.w	r2, [fp, #1]
    e2b0:	addeq.w	r4, fp, #2
    e2b4:	cmp	r5, #0
    e2b6:	beq.n	e340 <_strtol_l.isra.0+0xd0>
    e2b8:	cmp	r5, #16
    e2ba:	beq.n	e388 <_strtol_l.isra.0+0x118>
    e2bc:	mov	r9, r5
    e2be:	cmp.w	ip, #0
    e2c2:	ite	eq
    e2c4:	mvneq.w	sl, #2147483648	; 0x80000000
    e2c8:	movne.w	sl, #2147483648	; 0x80000000
    e2cc:	movs	r1, #0
    e2ce:	udiv	lr, sl, r9
    e2d2:	mov	r0, r1
    e2d4:	mls	sl, r9, lr, sl
    e2d8:	b.n	e2e6 <_strtol_l.isra.0+0x76>
    e2da:	beq.n	e330 <_strtol_l.isra.0+0xc0>
    e2dc:	mla	r0, r9, r0, r3
    e2e0:	movs	r1, #1
    e2e2:	ldrb.w	r2, [r4], #1
    e2e6:	sub.w	r3, r2, #48	; 0x30
    e2ea:	cmp	r3, #9
    e2ec:	bls.n	e2fa <_strtol_l.isra.0+0x8a>
    e2ee:	sub.w	r3, r2, #65	; 0x41
    e2f2:	cmp	r3, #25
    e2f4:	bhi.n	e30c <_strtol_l.isra.0+0x9c>
    e2f6:	sub.w	r3, r2, #55	; 0x37
    e2fa:	cmp	r5, r3
    e2fc:	ble.n	e31c <_strtol_l.isra.0+0xac>
    e2fe:	adds	r2, r1, #1
    e300:	beq.n	e2e2 <_strtol_l.isra.0+0x72>
    e302:	cmp	lr, r0
    e304:	bcs.n	e2da <_strtol_l.isra.0+0x6a>
    e306:	mov.w	r1, #4294967295
    e30a:	b.n	e2e2 <_strtol_l.isra.0+0x72>
    e30c:	sub.w	r3, r2, #97	; 0x61
    e310:	cmp	r3, #25
    e312:	bhi.n	e31c <_strtol_l.isra.0+0xac>
    e314:	sub.w	r3, r2, #87	; 0x57
    e318:	cmp	r5, r3
    e31a:	bgt.n	e2fe <_strtol_l.isra.0+0x8e>
    e31c:	adds	r3, r1, #1
    e31e:	beq.n	e34c <_strtol_l.isra.0+0xdc>
    e320:	cmp.w	ip, #0
    e324:	bne.n	e348 <_strtol_l.isra.0+0xd8>
    e326:	cbz	r6, e33c <_strtol_l.isra.0+0xcc>
    e328:	cbnz	r1, e364 <_strtol_l.isra.0+0xf4>
    e32a:	str	r7, [r6, #0]
    e32c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e330:	cmp	sl, r3
    e332:	bge.n	e2dc <_strtol_l.isra.0+0x6c>
    e334:	mov	r0, lr
    e336:	mov.w	r1, #4294967295
    e33a:	b.n	e2e2 <_strtol_l.isra.0+0x72>
    e33c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e340:	cmp	r2, #48	; 0x30
    e342:	beq.n	e37a <_strtol_l.isra.0+0x10a>
    e344:	movs	r5, #10
    e346:	b.n	e2bc <_strtol_l.isra.0+0x4c>
    e348:	negs	r0, r0
    e34a:	b.n	e326 <_strtol_l.isra.0+0xb6>
    e34c:	cmp.w	ip, #0
    e350:	mov.w	r3, #34	; 0x22
    e354:	ite	eq
    e356:	mvneq.w	r0, #2147483648	; 0x80000000
    e35a:	movne.w	r0, #2147483648	; 0x80000000
    e35e:	str.w	r3, [r8]
    e362:	cbz	r6, e3a2 <_strtol_l.isra.0+0x132>
    e364:	subs	r7, r4, #1
    e366:	str	r7, [r6, #0]
    e368:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e36c:	add.w	r4, fp, #2
    e370:	ldrb.w	r2, [fp, #1]
    e374:	mov.w	ip, #1
    e378:	b.n	e2b4 <_strtol_l.isra.0+0x44>
    e37a:	ldrb	r3, [r4, #0]
    e37c:	and.w	r3, r3, #223	; 0xdf
    e380:	cmp	r3, #88	; 0x58
    e382:	beq.n	e396 <_strtol_l.isra.0+0x126>
    e384:	movs	r5, #8
    e386:	b.n	e2bc <_strtol_l.isra.0+0x4c>
    e388:	cmp	r2, #48	; 0x30
    e38a:	bne.n	e2bc <_strtol_l.isra.0+0x4c>
    e38c:	ldrb	r3, [r4, #0]
    e38e:	and.w	r3, r3, #223	; 0xdf
    e392:	cmp	r3, #88	; 0x58
    e394:	bne.n	e2bc <_strtol_l.isra.0+0x4c>
    e396:	mov.w	r9, #16
    e39a:	ldrb	r2, [r4, #1]
    e39c:	mov	r5, r9
    e39e:	adds	r4, #2
    e3a0:	b.n	e2be <_strtol_l.isra.0+0x4e>
    e3a2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3a6:	nop

0000e3a8 <_strtol_r>:
    e3a8:	push	{r4, r5, lr}
    e3aa:	ldr	r4, [pc, #24]	; (e3c4 <_strtol_r+0x1c>)
    e3ac:	ldr	r5, [pc, #24]	; (e3c8 <_strtol_r+0x20>)
    e3ae:	ldr	r4, [r4, #0]
    e3b0:	ldr	r4, [r4, #52]	; 0x34
    e3b2:	sub	sp, #12
    e3b4:	cmp	r4, #0
    e3b6:	it	eq
    e3b8:	moveq	r4, r5
    e3ba:	str	r4, [sp, #0]
    e3bc:	bl	e270 <_strtol_l.isra.0>
    e3c0:	add	sp, #12
    e3c2:	pop	{r4, r5, pc}
    e3c4:	.word	0x1fff0d78
    e3c8:	.word	0x1fff0d7c
    e3cc:	.word	0xffffffff

0000e3d0 <_svfprintf_r>:
    e3d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3d4:	sub	sp, #260	; 0x104
    e3d6:	mov	r4, r1
    e3d8:	str	r1, [sp, #20]
    e3da:	mov	r5, r2
    e3dc:	str	r3, [sp, #40]	; 0x28
    e3de:	str	r0, [sp, #24]
    e3e0:	bl	12428 <_localeconv_r>
    e3e4:	ldr	r3, [r0, #0]
    e3e6:	str	r3, [sp, #76]	; 0x4c
    e3e8:	mov	r0, r3
    e3ea:	bl	d1c0 <strlen>
    e3ee:	ldrh	r3, [r4, #12]
    e3f0:	str	r0, [sp, #72]	; 0x48
    e3f2:	lsls	r6, r3, #24
    e3f4:	bpl.n	e3fe <_svfprintf_r+0x2e>
    e3f6:	ldr	r3, [r4, #16]
    e3f8:	cmp	r3, #0
    e3fa:	beq.w	f660 <_svfprintf_r+0x1290>
    e3fe:	vldr	d7, [pc, #664]	; e698 <_svfprintf_r+0x2c8>
    e402:	movs	r3, #0
    e404:	vstr	d7, [sp, #64]	; 0x40
    e408:	str	r3, [sp, #56]	; 0x38
    e40a:	str	r3, [sp, #148]	; 0x94
    e40c:	str	r3, [sp, #144]	; 0x90
    e40e:	str	r3, [sp, #84]	; 0x54
    e410:	str	r3, [sp, #28]
    e412:	ldr.w	sl, [pc, #656]	; e6a4 <_svfprintf_r+0x2d4>
    e416:	add	r3, sp, #192	; 0xc0
    e418:	str	r3, [sp, #140]	; 0x8c
    e41a:	mov	r9, r3
    e41c:	mov	r8, r5
    e41e:	ldrb.w	r3, [r8]
    e422:	mov	r4, r8
    e424:	cbz	r3, e462 <_svfprintf_r+0x92>
    e426:	cmp	r3, #37	; 0x25
    e428:	bne.n	e430 <_svfprintf_r+0x60>
    e42a:	b.n	e462 <_svfprintf_r+0x92>
    e42c:	cmp	r3, #37	; 0x25
    e42e:	beq.n	e438 <_svfprintf_r+0x68>
    e430:	ldrb.w	r3, [r4, #1]!
    e434:	cmp	r3, #0
    e436:	bne.n	e42c <_svfprintf_r+0x5c>
    e438:	rsb	r5, r8, r4
    e43c:	cbz	r5, e462 <_svfprintf_r+0x92>
    e43e:	ldr	r3, [sp, #144]	; 0x90
    e440:	ldr	r2, [sp, #148]	; 0x94
    e442:	str.w	r8, [r9]
    e446:	adds	r3, #1
    e448:	add	r2, r5
    e44a:	cmp	r3, #7
    e44c:	str.w	r5, [r9, #4]
    e450:	str	r2, [sp, #148]	; 0x94
    e452:	str	r3, [sp, #144]	; 0x90
    e454:	bgt.w	e5a4 <_svfprintf_r+0x1d4>
    e458:	add.w	r9, r9, #8
    e45c:	ldr	r3, [sp, #28]
    e45e:	add	r3, r5
    e460:	str	r3, [sp, #28]
    e462:	ldrb	r3, [r4, #0]
    e464:	cmp	r3, #0
    e466:	beq.w	e5b6 <_svfprintf_r+0x1e6>
    e46a:	movs	r3, #0
    e46c:	mov	r2, r3
    e46e:	strb.w	r3, [sp, #111]	; 0x6f
    e472:	mov	r1, r3
    e474:	str	r3, [sp, #32]
    e476:	str	r3, [sp, #12]
    e478:	mov.w	fp, #4294967295
    e47c:	ldrb	r3, [r4, #1]
    e47e:	add.w	r8, r4, #1
    e482:	mov	r5, fp
    e484:	add.w	r8, r8, #1
    e488:	sub.w	r0, r3, #32
    e48c:	cmp	r0, #88	; 0x58
    e48e:	bhi.w	ecfa <_svfprintf_r+0x92a>
    e492:	tbh	[pc, r0, lsl #1]
    e496:	.short	0x03a0
    e498:	.word	0x04320432
    e49c:	.word	0x043203a8
    e4a0:	.word	0x04320432
    e4a4:	.word	0x04320432
    e4a8:	.word	0x03af0432
    e4ac:	.word	0x043203bd
    e4b0:	.word	0x00e2005d
    e4b4:	.word	0x01090432
    e4b8:	.word	0x01100110
    e4bc:	.word	0x01100110
    e4c0:	.word	0x01100110
    e4c4:	.word	0x01100110
    e4c8:	.word	0x04320110
    e4cc:	.word	0x04320432
    e4d0:	.word	0x04320432
    e4d4:	.word	0x04320432
    e4d8:	.word	0x04320432
    e4dc:	.word	0x01200432
    e4e0:	.word	0x04320286
    e4e4:	.word	0x04320286
    e4e8:	.word	0x04320432
    e4ec:	.word	0x02d40432
    e4f0:	.word	0x04320432
    e4f4:	.word	0x043202e5
    e4f8:	.word	0x04320432
    e4fc:	.word	0x04320432
    e500:	.word	0x0432030f
    e504:	.word	0x033d0432
    e508:	.word	0x04320432
    e50c:	.word	0x04320432
    e510:	.word	0x04320432
    e514:	.word	0x04320432
    e518:	.word	0x04320432
    e51c:	.word	0x0391037e
    e520:	.word	0x02860286
    e524:	.word	0x03990286
    e528:	.word	0x04320391
    e52c:	.word	0x04070432
    e530:	.word	0x04120432
    e534:	.word	0x006400a3
    e538:	.word	0x043203c2
    e53c:	.word	0x043203c9
    e540:	.word	0x043203ea
    e544:	.word	0x03f20432
    e548:	ldr	r0, [sp, #32]
    e54a:	str	r3, [sp, #40]	; 0x28
    e54c:	negs	r0, r0
    e54e:	str	r0, [sp, #32]
    e550:	ldr	r3, [sp, #12]
    e552:	orr.w	r3, r3, #4
    e556:	str	r3, [sp, #12]
    e558:	ldrb.w	r3, [r8]
    e55c:	b.n	e484 <_svfprintf_r+0xb4>
    e55e:	ldr	r0, [sp, #40]	; 0x28
    e560:	mov	fp, r5
    e562:	movs	r1, #0
    e564:	ldr	r4, [r0, #0]
    e566:	strb.w	r1, [sp, #111]	; 0x6f
    e56a:	adds	r7, r0, #4
    e56c:	ldr	r0, [sp, #12]
    e56e:	movs	r3, #48	; 0x30
    e570:	movs	r2, #120	; 0x78
    e572:	cmp	fp, r1
    e574:	strb.w	r3, [sp, #112]	; 0x70
    e578:	mov.w	r5, #0
    e57c:	strb.w	r2, [sp, #113]	; 0x71
    e580:	orr.w	r3, r0, #2
    e584:	blt.w	ed34 <_svfprintf_r+0x964>
    e588:	bic.w	r3, r0, #128	; 0x80
    e58c:	orr.w	r3, r3, #2
    e590:	str	r3, [sp, #12]
    e592:	orrs.w	r3, r4, r5
    e596:	str	r7, [sp, #40]	; 0x28
    e598:	beq.w	ece0 <_svfprintf_r+0x910>
    e59c:	mov	r7, r1
    e59e:	str	r2, [sp, #52]	; 0x34
    e5a0:	ldr	r0, [pc, #252]	; (e6a0 <_svfprintf_r+0x2d0>)
    e5a2:	b.n	eb72 <_svfprintf_r+0x7a2>
    e5a4:	add	r2, sp, #140	; 0x8c
    e5a6:	ldr	r1, [sp, #20]
    e5a8:	ldr	r0, [sp, #24]
    e5aa:	bl	13414 <__ssprint_r>
    e5ae:	cbnz	r0, e5c4 <_svfprintf_r+0x1f4>
    e5b0:	add.w	r9, sp, #192	; 0xc0
    e5b4:	b.n	e45c <_svfprintf_r+0x8c>
    e5b6:	ldr	r3, [sp, #148]	; 0x94
    e5b8:	cbz	r3, e5c4 <_svfprintf_r+0x1f4>
    e5ba:	ldr	r0, [sp, #24]
    e5bc:	ldr	r1, [sp, #20]
    e5be:	add	r2, sp, #140	; 0x8c
    e5c0:	bl	13414 <__ssprint_r>
    e5c4:	ldr	r3, [sp, #20]
    e5c6:	ldrh	r3, [r3, #12]
    e5c8:	tst.w	r3, #64	; 0x40
    e5cc:	ldr	r3, [sp, #28]
    e5ce:	it	ne
    e5d0:	movne.w	r3, #4294967295
    e5d4:	mov	r0, r3
    e5d6:	add	sp, #260	; 0x104
    e5d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5dc:	str	r3, [sp, #52]	; 0x34
    e5de:	mov	fp, r5
    e5e0:	cmp	r2, #0
    e5e2:	bne.w	fa4c <_svfprintf_r+0x167c>
    e5e6:	ldr	r2, [sp, #12]
    e5e8:	ands.w	r3, r2, #32
    e5ec:	beq.w	ea7c <_svfprintf_r+0x6ac>
    e5f0:	ldr	r7, [sp, #40]	; 0x28
    e5f2:	adds	r7, #7
    e5f4:	bic.w	r3, r7, #7
    e5f8:	movs	r7, #0
    e5fa:	add.w	r1, r3, #8
    e5fe:	cmp	fp, r7
    e600:	str	r1, [sp, #40]	; 0x28
    e602:	ldrd	r4, r5, [r3]
    e606:	strb.w	r7, [sp, #111]	; 0x6f
    e60a:	blt.w	f4d2 <_svfprintf_r+0x1102>
    e60e:	bic.w	r3, r2, #128	; 0x80
    e612:	str	r3, [sp, #12]
    e614:	orrs.w	r3, r4, r5
    e618:	beq.w	ed24 <_svfprintf_r+0x954>
    e61c:	add	r6, sp, #192	; 0xc0
    e61e:	lsrs	r2, r4, #3
    e620:	orr.w	r2, r2, r5, lsl #29
    e624:	lsrs	r1, r5, #3
    e626:	and.w	r3, r4, #7
    e62a:	mov	r5, r1
    e62c:	mov	r4, r2
    e62e:	adds	r3, #48	; 0x30
    e630:	orrs.w	r2, r4, r5
    e634:	strb.w	r3, [r6, #-1]!
    e638:	bne.n	e61e <_svfprintf_r+0x24e>
    e63a:	ldr	r2, [sp, #12]
    e63c:	lsls	r1, r2, #31
    e63e:	bpl.w	e760 <_svfprintf_r+0x390>
    e642:	cmp	r3, #48	; 0x30
    e644:	beq.w	e760 <_svfprintf_r+0x390>
    e648:	movs	r2, #48	; 0x30
    e64a:	subs	r3, r6, #1
    e64c:	strb.w	r2, [r6, #-1]
    e650:	add	r2, sp, #192	; 0xc0
    e652:	subs	r2, r2, r3
    e654:	str	r2, [sp, #36]	; 0x24
    e656:	mov	r6, r3
    e658:	b.n	e766 <_svfprintf_r+0x396>
    e65a:	ldrb.w	r3, [r8]
    e65e:	cmp	r3, #42	; 0x2a
    e660:	add.w	r4, r8, #1
    e664:	beq.w	fa30 <_svfprintf_r+0x1660>
    e668:	sub.w	r0, r3, #48	; 0x30
    e66c:	cmp	r0, #9
    e66e:	it	ls
    e670:	movls	r5, #0
    e672:	bhi.w	f982 <_svfprintf_r+0x15b2>
    e676:	ldrb.w	r3, [r4], #1
    e67a:	add.w	r5, r5, r5, lsl #2
    e67e:	add.w	r5, r0, r5, lsl #1
    e682:	sub.w	r0, r3, #48	; 0x30
    e686:	cmp	r0, #9
    e688:	bls.n	e676 <_svfprintf_r+0x2a6>
    e68a:	orr.w	r5, r5, r5, asr #31
    e68e:	mov	r8, r4
    e690:	b.n	e488 <_svfprintf_r+0xb8>
    e692:	nop
    e694:	nop.w
	...
    e6a0:	.word	0x00014104
    e6a4:	.word	0x000140d0
    e6a8:	ldr	r3, [sp, #12]
    e6aa:	orr.w	r3, r3, #128	; 0x80
    e6ae:	str	r3, [sp, #12]
    e6b0:	ldrb.w	r3, [r8]
    e6b4:	b.n	e484 <_svfprintf_r+0xb4>
    e6b6:	sub.w	r0, r3, #48	; 0x30
    e6ba:	movs	r3, #0
    e6bc:	mov	r4, r3
    e6be:	ldrb.w	r3, [r8], #1
    e6c2:	add.w	r4, r4, r4, lsl #2
    e6c6:	add.w	r4, r0, r4, lsl #1
    e6ca:	sub.w	r0, r3, #48	; 0x30
    e6ce:	cmp	r0, #9
    e6d0:	bls.n	e6be <_svfprintf_r+0x2ee>
    e6d2:	str	r4, [sp, #32]
    e6d4:	b.n	e488 <_svfprintf_r+0xb8>
    e6d6:	str	r3, [sp, #52]	; 0x34
    e6d8:	mov	fp, r5
    e6da:	cmp	r2, #0
    e6dc:	bne.w	fa68 <_svfprintf_r+0x1698>
    e6e0:	ldr	r3, [sp, #12]
    e6e2:	orr.w	r3, r3, #16
    e6e6:	str	r3, [sp, #12]
    e6e8:	ldr	r3, [sp, #12]
    e6ea:	lsls	r4, r3, #26
    e6ec:	bpl.w	f15e <_svfprintf_r+0xd8e>
    e6f0:	ldr	r7, [sp, #40]	; 0x28
    e6f2:	adds	r7, #7
    e6f4:	bic.w	r7, r7, #7
    e6f8:	ldrd	r2, r3, [r7]
    e6fc:	add.w	r1, r7, #8
    e700:	str	r1, [sp, #40]	; 0x28
    e702:	mov	r4, r2
    e704:	mov	r5, r3
    e706:	cmp	r2, #0
    e708:	sbcs.w	r3, r3, #0
    e70c:	blt.w	f1d4 <_svfprintf_r+0xe04>
    e710:	cmp.w	fp, #0
    e714:	ldrb.w	r7, [sp, #111]	; 0x6f
    e718:	blt.w	f19a <_svfprintf_r+0xdca>
    e71c:	ldr	r3, [sp, #12]
    e71e:	bic.w	r3, r3, #128	; 0x80
    e722:	str	r3, [sp, #12]
    e724:	orrs.w	r3, r4, r5
    e728:	beq.w	eafc <_svfprintf_r+0x72c>
    e72c:	cmp	r5, #0
    e72e:	it	eq
    e730:	cmpeq	r4, #10
    e732:	bcc.w	eb06 <_svfprintf_r+0x736>
    e736:	add	r6, sp, #192	; 0xc0
    e738:	mov	r0, r4
    e73a:	mov	r1, r5
    e73c:	movs	r2, #10
    e73e:	movs	r3, #0
    e740:	bl	c054 <__aeabi_uldivmod>
    e744:	adds	r2, #48	; 0x30
    e746:	strb.w	r2, [r6, #-1]!
    e74a:	mov	r0, r4
    e74c:	mov	r1, r5
    e74e:	movs	r3, #0
    e750:	movs	r2, #10
    e752:	bl	c054 <__aeabi_uldivmod>
    e756:	mov	r4, r0
    e758:	mov	r5, r1
    e75a:	orrs.w	r3, r4, r5
    e75e:	bne.n	e738 <_svfprintf_r+0x368>
    e760:	add	r3, sp, #192	; 0xc0
    e762:	subs	r3, r3, r6
    e764:	str	r3, [sp, #36]	; 0x24
    e766:	ldr	r3, [sp, #36]	; 0x24
    e768:	cmp	r3, fp
    e76a:	it	lt
    e76c:	movlt	r3, fp
    e76e:	str	r3, [sp, #16]
    e770:	movs	r3, #0
    e772:	str	r3, [sp, #60]	; 0x3c
    e774:	cbz	r7, e77c <_svfprintf_r+0x3ac>
    e776:	ldr	r3, [sp, #16]
    e778:	adds	r3, #1
    e77a:	str	r3, [sp, #16]
    e77c:	ldr	r3, [sp, #12]
    e77e:	ands.w	r3, r3, #2
    e782:	str	r3, [sp, #44]	; 0x2c
    e784:	beq.n	e78c <_svfprintf_r+0x3bc>
    e786:	ldr	r3, [sp, #16]
    e788:	adds	r3, #2
    e78a:	str	r3, [sp, #16]
    e78c:	ldr	r3, [sp, #12]
    e78e:	ands.w	r3, r3, #132	; 0x84
    e792:	str	r3, [sp, #48]	; 0x30
    e794:	bne.w	ed4e <_svfprintf_r+0x97e>
    e798:	ldr	r3, [sp, #32]
    e79a:	ldr	r2, [sp, #16]
    e79c:	subs	r5, r3, r2
    e79e:	cmp	r5, #0
    e7a0:	ble.w	ed4e <_svfprintf_r+0x97e>
    e7a4:	cmp	r5, #16
    e7a6:	ldr	r1, [sp, #148]	; 0x94
    e7a8:	ldr	r2, [sp, #144]	; 0x90
    e7aa:	ldr	r7, [pc, #672]	; (ea4c <_svfprintf_r+0x67c>)
    e7ac:	ble.n	e7fe <_svfprintf_r+0x42e>
    e7ae:	str	r6, [sp, #80]	; 0x50
    e7b0:	mov	r0, r9
    e7b2:	movs	r4, #16
    e7b4:	mov	r9, r7
    e7b6:	ldr	r6, [sp, #20]
    e7b8:	mov	r7, r5
    e7ba:	ldr	r5, [sp, #24]
    e7bc:	b.n	e7c8 <_svfprintf_r+0x3f8>
    e7be:	subs	r7, #16
    e7c0:	cmp	r7, #16
    e7c2:	add.w	r0, r0, #8
    e7c6:	ble.n	e7f6 <_svfprintf_r+0x426>
    e7c8:	adds	r2, #1
    e7ca:	ldr	r3, [pc, #640]	; (ea4c <_svfprintf_r+0x67c>)
    e7cc:	str	r2, [sp, #144]	; 0x90
    e7ce:	adds	r1, #16
    e7d0:	cmp	r2, #7
    e7d2:	str	r1, [sp, #148]	; 0x94
    e7d4:	stmia.w	r0, {r3, r4}
    e7d8:	ble.n	e7be <_svfprintf_r+0x3ee>
    e7da:	add	r2, sp, #140	; 0x8c
    e7dc:	mov	r1, r6
    e7de:	mov	r0, r5
    e7e0:	bl	13414 <__ssprint_r>
    e7e4:	cmp	r0, #0
    e7e6:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    e7ea:	subs	r7, #16
    e7ec:	cmp	r7, #16
    e7ee:	ldr	r1, [sp, #148]	; 0x94
    e7f0:	ldr	r2, [sp, #144]	; 0x90
    e7f2:	add	r0, sp, #192	; 0xc0
    e7f4:	bgt.n	e7c8 <_svfprintf_r+0x3f8>
    e7f6:	ldr	r6, [sp, #80]	; 0x50
    e7f8:	mov	r5, r7
    e7fa:	mov	r7, r9
    e7fc:	mov	r9, r0
    e7fe:	adds	r2, #1
    e800:	adds	r4, r5, r1
    e802:	cmp	r2, #7
    e804:	str	r4, [sp, #148]	; 0x94
    e806:	str	r2, [sp, #144]	; 0x90
    e808:	str.w	r7, [r9]
    e80c:	str.w	r5, [r9, #4]
    e810:	bgt.w	f06e <_svfprintf_r+0xc9e>
    e814:	ldrb.w	r7, [sp, #111]	; 0x6f
    e818:	add.w	r9, r9, #8
    e81c:	cbz	r7, e83c <_svfprintf_r+0x46c>
    e81e:	ldr	r3, [sp, #144]	; 0x90
    e820:	adds	r3, #1
    e822:	adds	r4, #1
    e824:	add.w	r1, sp, #111	; 0x6f
    e828:	movs	r2, #1
    e82a:	cmp	r3, #7
    e82c:	str	r4, [sp, #148]	; 0x94
    e82e:	str	r3, [sp, #144]	; 0x90
    e830:	stmia.w	r9, {r1, r2}
    e834:	bgt.w	ef82 <_svfprintf_r+0xbb2>
    e838:	add.w	r9, r9, #8
    e83c:	ldr	r3, [sp, #44]	; 0x2c
    e83e:	cbz	r3, e85c <_svfprintf_r+0x48c>
    e840:	ldr	r3, [sp, #144]	; 0x90
    e842:	adds	r3, #1
    e844:	adds	r4, #2
    e846:	add	r1, sp, #112	; 0x70
    e848:	movs	r2, #2
    e84a:	cmp	r3, #7
    e84c:	str	r4, [sp, #148]	; 0x94
    e84e:	str	r3, [sp, #144]	; 0x90
    e850:	stmia.w	r9, {r1, r2}
    e854:	bgt.w	ef9a <_svfprintf_r+0xbca>
    e858:	add.w	r9, r9, #8
    e85c:	ldr	r3, [sp, #48]	; 0x30
    e85e:	cmp	r3, #128	; 0x80
    e860:	beq.w	ee26 <_svfprintf_r+0xa56>
    e864:	ldr	r3, [sp, #36]	; 0x24
    e866:	rsb	r7, r3, fp
    e86a:	cmp	r7, #0
    e86c:	ble.n	e8d6 <_svfprintf_r+0x506>
    e86e:	ldr	r2, [pc, #480]	; (ea50 <_svfprintf_r+0x680>)
    e870:	ldr	r3, [sp, #144]	; 0x90
    e872:	str	r2, [sp, #44]	; 0x2c
    e874:	cmp	r7, #16
    e876:	ble.n	e8be <_svfprintf_r+0x4ee>
    e878:	mov	r2, r4
    e87a:	mov.w	fp, #16
    e87e:	ldr	r5, [sp, #24]
    e880:	ldr	r4, [sp, #20]
    e882:	b.n	e88e <_svfprintf_r+0x4be>
    e884:	subs	r7, #16
    e886:	cmp	r7, #16
    e888:	add.w	r9, r9, #8
    e88c:	ble.n	e8bc <_svfprintf_r+0x4ec>
    e88e:	adds	r3, #1
    e890:	adds	r2, #16
    e892:	cmp	r3, #7
    e894:	str	r2, [sp, #148]	; 0x94
    e896:	str	r3, [sp, #144]	; 0x90
    e898:	stmia.w	r9, {sl, fp}
    e89c:	ble.n	e884 <_svfprintf_r+0x4b4>
    e89e:	add	r2, sp, #140	; 0x8c
    e8a0:	mov	r1, r4
    e8a2:	mov	r0, r5
    e8a4:	bl	13414 <__ssprint_r>
    e8a8:	cmp	r0, #0
    e8aa:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    e8ae:	subs	r7, #16
    e8b0:	cmp	r7, #16
    e8b2:	ldr	r2, [sp, #148]	; 0x94
    e8b4:	ldr	r3, [sp, #144]	; 0x90
    e8b6:	add.w	r9, sp, #192	; 0xc0
    e8ba:	bgt.n	e88e <_svfprintf_r+0x4be>
    e8bc:	mov	r4, r2
    e8be:	adds	r3, #1
    e8c0:	ldr	r2, [sp, #44]	; 0x2c
    e8c2:	str	r3, [sp, #144]	; 0x90
    e8c4:	add	r4, r7
    e8c6:	cmp	r3, #7
    e8c8:	str	r4, [sp, #148]	; 0x94
    e8ca:	stmia.w	r9, {r2, r7}
    e8ce:	bgt.w	ef6a <_svfprintf_r+0xb9a>
    e8d2:	add.w	r9, r9, #8
    e8d6:	ldr	r3, [sp, #12]
    e8d8:	lsls	r2, r3, #23
    e8da:	bmi.w	ed52 <_svfprintf_r+0x982>
    e8de:	ldr	r3, [sp, #144]	; 0x90
    e8e0:	ldr	r1, [sp, #36]	; 0x24
    e8e2:	str.w	r6, [r9]
    e8e6:	adds	r3, #1
    e8e8:	add	r4, r1
    e8ea:	cmp	r3, #7
    e8ec:	str	r4, [sp, #148]	; 0x94
    e8ee:	str.w	r1, [r9, #4]
    e8f2:	str	r3, [sp, #144]	; 0x90
    e8f4:	bgt.w	ef3e <_svfprintf_r+0xb6e>
    e8f8:	add.w	r9, r9, #8
    e8fc:	ldr	r3, [sp, #12]
    e8fe:	lsls	r1, r3, #29
    e900:	bpl.n	e982 <_svfprintf_r+0x5b2>
    e902:	ldr	r3, [sp, #32]
    e904:	ldr	r2, [sp, #16]
    e906:	subs	r5, r3, r2
    e908:	cmp	r5, #0
    e90a:	ble.n	e982 <_svfprintf_r+0x5b2>
    e90c:	cmp	r5, #16
    e90e:	ldr	r3, [sp, #144]	; 0x90
    e910:	ldr	r7, [pc, #312]	; (ea4c <_svfprintf_r+0x67c>)
    e912:	ble.n	e95c <_svfprintf_r+0x58c>
    e914:	mov	r2, r4
    e916:	movs	r6, #16
    e918:	ldr.w	fp, [sp, #24]
    e91c:	ldr	r4, [sp, #20]
    e91e:	b.n	e92a <_svfprintf_r+0x55a>
    e920:	subs	r5, #16
    e922:	cmp	r5, #16
    e924:	add.w	r9, r9, #8
    e928:	ble.n	e95a <_svfprintf_r+0x58a>
    e92a:	adds	r3, #1
    e92c:	ldr	r1, [pc, #284]	; (ea4c <_svfprintf_r+0x67c>)
    e92e:	str	r3, [sp, #144]	; 0x90
    e930:	adds	r2, #16
    e932:	cmp	r3, #7
    e934:	str	r2, [sp, #148]	; 0x94
    e936:	stmia.w	r9, {r1, r6}
    e93a:	ble.n	e920 <_svfprintf_r+0x550>
    e93c:	add	r2, sp, #140	; 0x8c
    e93e:	mov	r1, r4
    e940:	mov	r0, fp
    e942:	bl	13414 <__ssprint_r>
    e946:	cmp	r0, #0
    e948:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    e94c:	subs	r5, #16
    e94e:	cmp	r5, #16
    e950:	ldr	r2, [sp, #148]	; 0x94
    e952:	ldr	r3, [sp, #144]	; 0x90
    e954:	add.w	r9, sp, #192	; 0xc0
    e958:	bgt.n	e92a <_svfprintf_r+0x55a>
    e95a:	mov	r4, r2
    e95c:	adds	r3, #1
    e95e:	add	r4, r5
    e960:	cmp	r3, #7
    e962:	str	r4, [sp, #148]	; 0x94
    e964:	str	r3, [sp, #144]	; 0x90
    e966:	str.w	r7, [r9]
    e96a:	str.w	r5, [r9, #4]
    e96e:	ble.n	e982 <_svfprintf_r+0x5b2>
    e970:	add	r2, sp, #140	; 0x8c
    e972:	ldr	r1, [sp, #20]
    e974:	ldr	r0, [sp, #24]
    e976:	bl	13414 <__ssprint_r>
    e97a:	cmp	r0, #0
    e97c:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    e980:	ldr	r4, [sp, #148]	; 0x94
    e982:	ldr	r3, [sp, #28]
    e984:	ldr	r2, [sp, #32]
    e986:	ldr	r1, [sp, #16]
    e988:	cmp	r2, r1
    e98a:	ite	ge
    e98c:	addge	r3, r3, r2
    e98e:	addlt	r3, r3, r1
    e990:	str	r3, [sp, #28]
    e992:	cmp	r4, #0
    e994:	bne.w	ef56 <_svfprintf_r+0xb86>
    e998:	movs	r3, #0
    e99a:	str	r3, [sp, #144]	; 0x90
    e99c:	add.w	r9, sp, #192	; 0xc0
    e9a0:	b.n	e41e <_svfprintf_r+0x4e>
    e9a2:	str	r3, [sp, #52]	; 0x34
    e9a4:	mov	fp, r5
    e9a6:	cmp	r2, #0
    e9a8:	bne.w	fa70 <_svfprintf_r+0x16a0>
    e9ac:	ldr	r3, [sp, #12]
    e9ae:	ldr	r7, [sp, #40]	; 0x28
    e9b0:	lsls	r2, r3, #28
    e9b2:	add.w	r7, r7, #7
    e9b6:	bpl.w	f4a2 <_svfprintf_r+0x10d2>
    e9ba:	bic.w	r3, r7, #7
    e9be:	vldr	d7, [r3]
    e9c2:	vstr	d7, [sp, #64]	; 0x40
    e9c6:	add.w	r2, r3, #8
    e9ca:	str	r2, [sp, #40]	; 0x28
    e9cc:	ldrd	r1, r2, [sp, #64]	; 0x40
    e9d0:	bic.w	r3, r2, #2147483648	; 0x80000000
    e9d4:	str	r1, [sp, #88]	; 0x58
    e9d6:	str	r3, [sp, #92]	; 0x5c
    e9d8:	ldrd	r4, r5, [sp, #88]	; 0x58
    e9dc:	mov.w	r2, #4294967295
    e9e0:	mov	r0, r4
    e9e2:	mov	r1, r5
    e9e4:	ldr	r3, [pc, #108]	; (ea54 <_svfprintf_r+0x684>)
    e9e6:	bl	bc3c <__aeabi_dcmpun>
    e9ea:	cmp	r0, #0
    e9ec:	bne.w	f3a4 <_svfprintf_r+0xfd4>
    e9f0:	mov.w	r2, #4294967295
    e9f4:	ldr	r3, [pc, #92]	; (ea54 <_svfprintf_r+0x684>)
    e9f6:	mov	r0, r4
    e9f8:	mov	r1, r5
    e9fa:	bl	bc00 <__aeabi_dcmple>
    e9fe:	cmp	r0, #0
    ea00:	bne.w	f3a4 <_svfprintf_r+0xfd4>
    ea04:	movs	r2, #0
    ea06:	movs	r3, #0
    ea08:	ldrd	r0, r1, [sp, #64]	; 0x40
    ea0c:	bl	bbec <__aeabi_dcmplt>
    ea10:	cmp	r0, #0
    ea12:	bne.w	f8ba <_svfprintf_r+0x14ea>
    ea16:	ldrb.w	r7, [sp, #111]	; 0x6f
    ea1a:	ldr	r6, [pc, #60]	; (ea58 <_svfprintf_r+0x688>)
    ea1c:	ldr	r3, [pc, #60]	; (ea5c <_svfprintf_r+0x68c>)
    ea1e:	ldr	r1, [sp, #12]
    ea20:	bic.w	r1, r1, #128	; 0x80
    ea24:	str	r1, [sp, #12]
    ea26:	ldr	r1, [sp, #52]	; 0x34
    ea28:	movs	r2, #3
    ea2a:	mov.w	fp, #0
    ea2e:	str	r2, [sp, #16]
    ea30:	cmp	r1, #71	; 0x47
    ea32:	it	le
    ea34:	movle	r6, r3
    ea36:	str	r2, [sp, #36]	; 0x24
    ea38:	str.w	fp, [sp, #60]	; 0x3c
    ea3c:	b.n	e774 <_svfprintf_r+0x3a4>
    ea3e:	ldr	r3, [sp, #12]
    ea40:	orr.w	r3, r3, #8
    ea44:	str	r3, [sp, #12]
    ea46:	ldrb.w	r3, [r8]
    ea4a:	b.n	e484 <_svfprintf_r+0xb4>
    ea4c:	.word	0x00014124
    ea50:	.word	0x000140d0
    ea54:	.word	0x7fefffff
    ea58:	.word	0x000140e4
    ea5c:	.word	0x000140e0
    ea60:	str	r3, [sp, #52]	; 0x34
    ea62:	mov	fp, r5
    ea64:	cmp	r2, #0
    ea66:	bne.w	fa88 <_svfprintf_r+0x16b8>
    ea6a:	ldr	r3, [sp, #12]
    ea6c:	orr.w	r3, r3, #16
    ea70:	str	r3, [sp, #12]
    ea72:	ldr	r2, [sp, #12]
    ea74:	ands.w	r3, r2, #32
    ea78:	bne.w	e5f0 <_svfprintf_r+0x220>
    ea7c:	ldr	r1, [sp, #12]
    ea7e:	ands.w	r2, r1, #16
    ea82:	beq.w	f33c <_svfprintf_r+0xf6c>
    ea86:	ldr	r0, [sp, #40]	; 0x28
    ea88:	strb.w	r3, [sp, #111]	; 0x6f
    ea8c:	cmp.w	fp, #0
    ea90:	ldr	r4, [r0, #0]
    ea92:	add.w	r7, r0, #4
    ea96:	mov.w	r5, #0
    ea9a:	blt.w	f4d0 <_svfprintf_r+0x1100>
    ea9e:	mov	r2, r1
    eaa0:	bic.w	r2, r2, #128	; 0x80
    eaa4:	str	r2, [sp, #12]
    eaa6:	orrs.w	r2, r4, r5
    eaaa:	str	r7, [sp, #40]	; 0x28
    eaac:	beq.w	ed24 <_svfprintf_r+0x954>
    eab0:	mov	r7, r3
    eab2:	b.n	e61c <_svfprintf_r+0x24c>
    eab4:	str	r3, [sp, #52]	; 0x34
    eab6:	mov	fp, r5
    eab8:	cmp	r2, #0
    eaba:	bne.w	fa80 <_svfprintf_r+0x16b0>
    eabe:	ldr	r3, [sp, #12]
    eac0:	orr.w	r3, r3, #16
    eac4:	str	r3, [sp, #12]
    eac6:	ldr	r2, [sp, #12]
    eac8:	ands.w	r3, r2, #32
    eacc:	beq.w	f128 <_svfprintf_r+0xd58>
    ead0:	ldr	r7, [sp, #40]	; 0x28
    ead2:	adds	r7, #7
    ead4:	bic.w	r3, r7, #7
    ead8:	movs	r7, #0
    eada:	add.w	r1, r3, #8
    eade:	cmp	fp, r7
    eae0:	str	r1, [sp, #40]	; 0x28
    eae2:	ldrd	r4, r5, [r3]
    eae6:	strb.w	r7, [sp, #111]	; 0x6f
    eaea:	blt.w	f19a <_svfprintf_r+0xdca>
    eaee:	bic.w	r3, r2, #128	; 0x80
    eaf2:	str	r3, [sp, #12]
    eaf4:	orrs.w	r3, r4, r5
    eaf8:	bne.w	e72c <_svfprintf_r+0x35c>
    eafc:	cmp.w	fp, #0
    eb00:	beq.w	ecee <_svfprintf_r+0x91e>
    eb04:	movs	r4, #0
    eb06:	add	r6, sp, #256	; 0x100
    eb08:	adds	r4, #48	; 0x30
    eb0a:	strb.w	r4, [r6, #-65]!
    eb0e:	b.n	e760 <_svfprintf_r+0x390>
    eb10:	str	r3, [sp, #52]	; 0x34
    eb12:	mov	fp, r5
    eb14:	cmp	r2, #0
    eb16:	bne.w	fa78 <_svfprintf_r+0x16a8>
    eb1a:	ldr	r3, [sp, #12]
    eb1c:	ldr	r0, [pc, #700]	; (eddc <_svfprintf_r+0xa0c>)
    eb1e:	lsls	r5, r3, #26
    eb20:	bpl.w	ec8e <_svfprintf_r+0x8be>
    eb24:	ldr	r7, [sp, #40]	; 0x28
    eb26:	adds	r7, #7
    eb28:	bic.w	r3, r7, #7
    eb2c:	ldrd	r4, r5, [r3]
    eb30:	add.w	r2, r3, #8
    eb34:	str	r2, [sp, #40]	; 0x28
    eb36:	ldr	r2, [sp, #12]
    eb38:	ands.w	r7, r2, #1
    eb3c:	beq.w	efb2 <_svfprintf_r+0xbe2>
    eb40:	orrs.w	r3, r4, r5
    eb44:	beq.w	f54c <_svfprintf_r+0x117c>
    eb48:	ldrb.w	r2, [sp, #52]	; 0x34
    eb4c:	strb.w	r2, [sp, #113]	; 0x71
    eb50:	movs	r7, #0
    eb52:	ldr	r2, [sp, #12]
    eb54:	strb.w	r7, [sp, #111]	; 0x6f
    eb58:	movs	r3, #48	; 0x30
    eb5a:	cmp	fp, r7
    eb5c:	strb.w	r3, [sp, #112]	; 0x70
    eb60:	orr.w	r3, r2, #2
    eb64:	blt.w	f8c4 <_svfprintf_r+0x14f4>
    eb68:	bic.w	r3, r2, #128	; 0x80
    eb6c:	orr.w	r3, r3, #2
    eb70:	str	r3, [sp, #12]
    eb72:	add	r6, sp, #192	; 0xc0
    eb74:	lsrs	r3, r4, #4
    eb76:	and.w	r1, r4, #15
    eb7a:	orr.w	r3, r3, r5, lsl #28
    eb7e:	lsrs	r2, r5, #4
    eb80:	mov	r4, r3
    eb82:	mov	r5, r2
    eb84:	ldrb	r3, [r0, r1]
    eb86:	strb.w	r3, [r6, #-1]!
    eb8a:	orrs.w	r3, r4, r5
    eb8e:	bne.n	eb74 <_svfprintf_r+0x7a4>
    eb90:	b.n	e760 <_svfprintf_r+0x390>
    eb92:	ldr	r1, [sp, #40]	; 0x28
    eb94:	str	r3, [sp, #52]	; 0x34
    eb96:	ldr	r2, [r1, #0]
    eb98:	strb.w	r2, [sp, #152]	; 0x98
    eb9c:	movs	r3, #0
    eb9e:	mov	r2, r1
    eba0:	mov	r7, r3
    eba2:	strb.w	r3, [sp, #111]	; 0x6f
    eba6:	adds	r2, #4
    eba8:	movs	r3, #1
    ebaa:	str	r3, [sp, #16]
    ebac:	mov	fp, r7
    ebae:	str	r7, [sp, #60]	; 0x3c
    ebb0:	str	r2, [sp, #40]	; 0x28
    ebb2:	str	r3, [sp, #36]	; 0x24
    ebb4:	add	r6, sp, #152	; 0x98
    ebb6:	b.n	e77c <_svfprintf_r+0x3ac>
    ebb8:	str	r3, [sp, #52]	; 0x34
    ebba:	mov	fp, r5
    ebbc:	cmp	r2, #0
    ebbe:	beq.w	e6e8 <_svfprintf_r+0x318>
    ebc2:	strb.w	r1, [sp, #111]	; 0x6f
    ebc6:	b.n	e6e8 <_svfprintf_r+0x318>
    ebc8:	ldr	r3, [sp, #12]
    ebca:	orr.w	r3, r3, #64	; 0x40
    ebce:	str	r3, [sp, #12]
    ebd0:	ldrb.w	r3, [r8]
    ebd4:	b.n	e484 <_svfprintf_r+0xb4>
    ebd6:	ldrb.w	r3, [r8]
    ebda:	cmp	r1, #0
    ebdc:	bne.w	e484 <_svfprintf_r+0xb4>
    ebe0:	movs	r2, #1
    ebe2:	movs	r1, #32
    ebe4:	b.n	e484 <_svfprintf_r+0xb4>
    ebe6:	ldr	r3, [sp, #12]
    ebe8:	orr.w	r3, r3, #1
    ebec:	str	r3, [sp, #12]
    ebee:	ldrb.w	r3, [r8]
    ebf2:	b.n	e484 <_svfprintf_r+0xb4>
    ebf4:	ldr	r4, [sp, #40]	; 0x28
    ebf6:	ldr	r3, [r4, #0]
    ebf8:	str	r3, [sp, #32]
    ebfa:	mov	r0, r3
    ebfc:	cmp	r0, #0
    ebfe:	mov	r3, r4
    ec00:	add.w	r3, r3, #4
    ec04:	blt.w	e548 <_svfprintf_r+0x178>
    ec08:	str	r3, [sp, #40]	; 0x28
    ec0a:	ldrb.w	r3, [r8]
    ec0e:	b.n	e484 <_svfprintf_r+0xb4>
    ec10:	ldrb.w	r3, [r8]
    ec14:	movs	r2, #1
    ec16:	movs	r1, #43	; 0x2b
    ec18:	b.n	e484 <_svfprintf_r+0xb4>
    ec1a:	ldr	r3, [sp, #12]
    ec1c:	orr.w	r3, r3, #32
    ec20:	str	r3, [sp, #12]
    ec22:	ldrb.w	r3, [r8]
    ec26:	b.n	e484 <_svfprintf_r+0xb4>
    ec28:	ldr	r2, [sp, #40]	; 0x28
    ec2a:	str	r3, [sp, #52]	; 0x34
    ec2c:	ldr	r6, [r2, #0]
    ec2e:	movs	r4, #0
    ec30:	strb.w	r4, [sp, #111]	; 0x6f
    ec34:	adds	r7, r2, #4
    ec36:	cmp	r6, #0
    ec38:	beq.w	f874 <_svfprintf_r+0x14a4>
    ec3c:	cmp	r5, #0
    ec3e:	blt.w	f704 <_svfprintf_r+0x1334>
    ec42:	mov	r2, r5
    ec44:	mov	r1, r4
    ec46:	mov	r0, r6
    ec48:	bl	124a0 <memchr>
    ec4c:	cmp	r0, #0
    ec4e:	beq.w	f918 <_svfprintf_r+0x1548>
    ec52:	subs	r3, r0, r6
    ec54:	str	r3, [sp, #36]	; 0x24
    ec56:	mov	fp, r4
    ec58:	bic.w	r3, r3, r3, asr #31
    ec5c:	str	r7, [sp, #40]	; 0x28
    ec5e:	str	r3, [sp, #16]
    ec60:	str.w	fp, [sp, #60]	; 0x3c
    ec64:	ldrb.w	r7, [sp, #111]	; 0x6f
    ec68:	b.n	e774 <_svfprintf_r+0x3a4>
    ec6a:	str	r3, [sp, #52]	; 0x34
    ec6c:	mov	fp, r5
    ec6e:	cmp	r2, #0
    ec70:	beq.w	eac6 <_svfprintf_r+0x6f6>
    ec74:	strb.w	r1, [sp, #111]	; 0x6f
    ec78:	b.n	eac6 <_svfprintf_r+0x6f6>
    ec7a:	str	r3, [sp, #52]	; 0x34
    ec7c:	mov	fp, r5
    ec7e:	cmp	r2, #0
    ec80:	bne.w	faa0 <_svfprintf_r+0x16d0>
    ec84:	ldr	r3, [sp, #12]
    ec86:	ldr	r0, [pc, #344]	; (ede0 <_svfprintf_r+0xa10>)
    ec88:	lsls	r5, r3, #26
    ec8a:	bmi.w	eb24 <_svfprintf_r+0x754>
    ec8e:	ldr	r3, [sp, #12]
    ec90:	lsls	r4, r3, #27
    ec92:	bpl.w	f512 <_svfprintf_r+0x1142>
    ec96:	ldr	r2, [sp, #40]	; 0x28
    ec98:	mov	r3, r2
    ec9a:	adds	r3, #4
    ec9c:	ldr	r4, [r2, #0]
    ec9e:	str	r3, [sp, #40]	; 0x28
    eca0:	movs	r5, #0
    eca2:	b.n	eb36 <_svfprintf_r+0x766>
    eca4:	ldrb.w	r3, [r8]
    eca8:	cmp	r3, #108	; 0x6c
    ecaa:	beq.w	f632 <_svfprintf_r+0x1262>
    ecae:	ldr	r0, [sp, #12]
    ecb0:	orr.w	r0, r0, #16
    ecb4:	str	r0, [sp, #12]
    ecb6:	b.w	e484 <_svfprintf_r+0xb4>
    ecba:	cmp	r2, #0
    ecbc:	bne.w	fa98 <_svfprintf_r+0x16c8>
    ecc0:	ldr	r3, [sp, #12]
    ecc2:	lsls	r3, r3, #26
    ecc4:	bpl.w	f376 <_svfprintf_r+0xfa6>
    ecc8:	ldr	r2, [sp, #40]	; 0x28
    ecca:	ldr	r1, [sp, #28]
    eccc:	ldr	r3, [r2, #0]
    ecce:	asrs	r5, r1, #31
    ecd0:	mov	r0, r1
    ecd2:	adds	r2, #4
    ecd4:	mov	r1, r5
    ecd6:	str	r2, [sp, #40]	; 0x28
    ecd8:	strd	r0, r1, [r3]
    ecdc:	b.w	e41e <_svfprintf_r+0x4e>
    ece0:	ldr	r0, [pc, #252]	; (ede0 <_svfprintf_r+0xa10>)
    ece2:	str	r2, [sp, #52]	; 0x34
    ece4:	cmp.w	fp, #0
    ece8:	bne.w	efd4 <_svfprintf_r+0xc04>
    ecec:	mov	r7, fp
    ecee:	mov.w	fp, #0
    ecf2:	str.w	fp, [sp, #36]	; 0x24
    ecf6:	add	r6, sp, #192	; 0xc0
    ecf8:	b.n	e766 <_svfprintf_r+0x396>
    ecfa:	str	r3, [sp, #52]	; 0x34
    ecfc:	cmp	r2, #0
    ecfe:	bne.w	fa90 <_svfprintf_r+0x16c0>
    ed02:	ldr	r2, [sp, #52]	; 0x34
    ed04:	cmp	r2, #0
    ed06:	beq.w	e5b6 <_svfprintf_r+0x1e6>
    ed0a:	movs	r3, #0
    ed0c:	movs	r1, #1
    ed0e:	mov	r7, r3
    ed10:	str	r1, [sp, #16]
    ed12:	strb.w	r2, [sp, #152]	; 0x98
    ed16:	strb.w	r3, [sp, #111]	; 0x6f
    ed1a:	mov	fp, r3
    ed1c:	str	r3, [sp, #60]	; 0x3c
    ed1e:	str	r1, [sp, #36]	; 0x24
    ed20:	add	r6, sp, #152	; 0x98
    ed22:	b.n	e77c <_svfprintf_r+0x3ac>
    ed24:	cmp.w	fp, #0
    ed28:	beq.w	f948 <_svfprintf_r+0x1578>
    ed2c:	movs	r7, #0
    ed2e:	movs	r4, #0
    ed30:	movs	r5, #0
    ed32:	b.n	e61c <_svfprintf_r+0x24c>
    ed34:	ldr	r0, [pc, #168]	; (ede0 <_svfprintf_r+0xa10>)
    ed36:	str	r3, [sp, #12]
    ed38:	str	r2, [sp, #52]	; 0x34
    ed3a:	orrs.w	r3, r4, r5
    ed3e:	str	r7, [sp, #40]	; 0x28
    ed40:	mov.w	r7, #0
    ed44:	bne.w	eb72 <_svfprintf_r+0x7a2>
    ed48:	movs	r4, #0
    ed4a:	movs	r5, #0
    ed4c:	b.n	eb72 <_svfprintf_r+0x7a2>
    ed4e:	ldr	r4, [sp, #148]	; 0x94
    ed50:	b.n	e81c <_svfprintf_r+0x44c>
    ed52:	ldr	r3, [sp, #52]	; 0x34
    ed54:	cmp	r3, #101	; 0x65
    ed56:	ble.w	eeae <_svfprintf_r+0xade>
    ed5a:	movs	r2, #0
    ed5c:	movs	r3, #0
    ed5e:	ldrd	r0, r1, [sp, #64]	; 0x40
    ed62:	bl	bbd8 <__aeabi_dcmpeq>
    ed66:	cmp	r0, #0
    ed68:	beq.w	efd8 <_svfprintf_r+0xc08>
    ed6c:	ldr	r3, [sp, #144]	; 0x90
    ed6e:	ldr	r2, [pc, #116]	; (ede4 <_svfprintf_r+0xa14>)
    ed70:	str.w	r2, [r9]
    ed74:	adds	r3, #1
    ed76:	adds	r4, #1
    ed78:	movs	r2, #1
    ed7a:	cmp	r3, #7
    ed7c:	str	r4, [sp, #148]	; 0x94
    ed7e:	str	r3, [sp, #144]	; 0x90
    ed80:	str.w	r2, [r9, #4]
    ed84:	bgt.w	f564 <_svfprintf_r+0x1194>
    ed88:	add.w	r9, r9, #8
    ed8c:	ldr	r3, [sp, #116]	; 0x74
    ed8e:	ldr	r2, [sp, #56]	; 0x38
    ed90:	cmp	r3, r2
    ed92:	blt.n	ed9c <_svfprintf_r+0x9cc>
    ed94:	ldr	r3, [sp, #12]
    ed96:	lsls	r3, r3, #31
    ed98:	bpl.w	e8fc <_svfprintf_r+0x52c>
    ed9c:	ldr	r3, [sp, #144]	; 0x90
    ed9e:	ldr	r1, [sp, #72]	; 0x48
    eda0:	ldr	r2, [sp, #76]	; 0x4c
    eda2:	str.w	r2, [r9]
    eda6:	adds	r3, #1
    eda8:	add	r4, r1
    edaa:	cmp	r3, #7
    edac:	str	r4, [sp, #148]	; 0x94
    edae:	str.w	r1, [r9, #4]
    edb2:	str	r3, [sp, #144]	; 0x90
    edb4:	bgt.w	f646 <_svfprintf_r+0x1276>
    edb8:	add.w	r9, r9, #8
    edbc:	ldr	r3, [sp, #56]	; 0x38
    edbe:	subs	r5, r3, #1
    edc0:	cmp	r5, #0
    edc2:	ble.w	e8fc <_svfprintf_r+0x52c>
    edc6:	ldr	r2, [pc, #32]	; (ede8 <_svfprintf_r+0xa18>)
    edc8:	ldr	r3, [sp, #144]	; 0x90
    edca:	str	r2, [sp, #44]	; 0x2c
    edcc:	cmp	r5, #16
    edce:	ble.w	f1a4 <_svfprintf_r+0xdd4>
    edd2:	movs	r6, #16
    edd4:	ldr	r7, [sp, #24]
    edd6:	ldr.w	fp, [sp, #20]
    edda:	b.n	edf8 <_svfprintf_r+0xa28>
    eddc:	.word	0x000140f0
    ede0:	.word	0x00014104
    ede4:	.word	0x00014120
    ede8:	.word	0x000140d0
    edec:	add.w	r9, r9, #8
    edf0:	subs	r5, #16
    edf2:	cmp	r5, #16
    edf4:	ble.w	f1a4 <_svfprintf_r+0xdd4>
    edf8:	adds	r3, #1
    edfa:	adds	r4, #16
    edfc:	cmp	r3, #7
    edfe:	str	r4, [sp, #148]	; 0x94
    ee00:	str	r3, [sp, #144]	; 0x90
    ee02:	str.w	sl, [r9]
    ee06:	str.w	r6, [r9, #4]
    ee0a:	ble.n	edec <_svfprintf_r+0xa1c>
    ee0c:	add	r2, sp, #140	; 0x8c
    ee0e:	mov	r1, fp
    ee10:	mov	r0, r7
    ee12:	bl	13414 <__ssprint_r>
    ee16:	cmp	r0, #0
    ee18:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    ee1c:	ldr	r4, [sp, #148]	; 0x94
    ee1e:	ldr	r3, [sp, #144]	; 0x90
    ee20:	add.w	r9, sp, #192	; 0xc0
    ee24:	b.n	edf0 <_svfprintf_r+0xa20>
    ee26:	ldr	r3, [sp, #32]
    ee28:	ldr	r2, [sp, #16]
    ee2a:	subs	r7, r3, r2
    ee2c:	cmp	r7, #0
    ee2e:	ble.w	e864 <_svfprintf_r+0x494>
    ee32:	ldr	r2, [pc, #752]	; (f124 <_svfprintf_r+0xd54>)
    ee34:	ldr	r3, [sp, #144]	; 0x90
    ee36:	str	r2, [sp, #44]	; 0x2c
    ee38:	cmp	r7, #16
    ee3a:	ble.n	ee94 <_svfprintf_r+0xac4>
    ee3c:	mov	r2, r9
    ee3e:	mov	r1, r4
    ee40:	mov	r9, r7
    ee42:	movs	r5, #16
    ee44:	mov	r7, r6
    ee46:	ldr	r4, [sp, #24]
    ee48:	ldr	r6, [sp, #20]
    ee4a:	b.n	ee5a <_svfprintf_r+0xa8a>
    ee4c:	sub.w	r9, r9, #16
    ee50:	cmp.w	r9, #16
    ee54:	add.w	r2, r2, #8
    ee58:	ble.n	ee8c <_svfprintf_r+0xabc>
    ee5a:	adds	r3, #1
    ee5c:	adds	r1, #16
    ee5e:	cmp	r3, #7
    ee60:	str	r1, [sp, #148]	; 0x94
    ee62:	str	r3, [sp, #144]	; 0x90
    ee64:	str.w	sl, [r2]
    ee68:	str	r5, [r2, #4]
    ee6a:	ble.n	ee4c <_svfprintf_r+0xa7c>
    ee6c:	add	r2, sp, #140	; 0x8c
    ee6e:	mov	r1, r6
    ee70:	mov	r0, r4
    ee72:	bl	13414 <__ssprint_r>
    ee76:	cmp	r0, #0
    ee78:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    ee7c:	sub.w	r9, r9, #16
    ee80:	cmp.w	r9, #16
    ee84:	ldr	r1, [sp, #148]	; 0x94
    ee86:	ldr	r3, [sp, #144]	; 0x90
    ee88:	add	r2, sp, #192	; 0xc0
    ee8a:	bgt.n	ee5a <_svfprintf_r+0xa8a>
    ee8c:	mov	r6, r7
    ee8e:	mov	r4, r1
    ee90:	mov	r7, r9
    ee92:	mov	r9, r2
    ee94:	adds	r3, #1
    ee96:	ldr	r2, [sp, #44]	; 0x2c
    ee98:	str	r3, [sp, #144]	; 0x90
    ee9a:	add	r4, r7
    ee9c:	cmp	r3, #7
    ee9e:	str	r4, [sp, #148]	; 0x94
    eea0:	stmia.w	r9, {r2, r7}
    eea4:	bgt.w	f322 <_svfprintf_r+0xf52>
    eea8:	add.w	r9, r9, #8
    eeac:	b.n	e864 <_svfprintf_r+0x494>
    eeae:	ldr	r3, [sp, #56]	; 0x38
    eeb0:	ldr	r5, [sp, #144]	; 0x90
    eeb2:	cmp	r3, #1
    eeb4:	ble.w	f2cc <_svfprintf_r+0xefc>
    eeb8:	adds	r5, #1
    eeba:	adds	r4, #1
    eebc:	movs	r3, #1
    eebe:	cmp	r5, #7
    eec0:	str	r4, [sp, #148]	; 0x94
    eec2:	str	r5, [sp, #144]	; 0x90
    eec4:	str.w	r6, [r9]
    eec8:	str.w	r3, [r9, #4]
    eecc:	bgt.w	f2ee <_svfprintf_r+0xf1e>
    eed0:	add.w	r9, r9, #8
    eed4:	ldr	r2, [sp, #72]	; 0x48
    eed6:	ldr	r3, [sp, #76]	; 0x4c
    eed8:	str.w	r3, [r9]
    eedc:	adds	r5, #1
    eede:	add	r4, r2
    eee0:	cmp	r5, #7
    eee2:	str	r4, [sp, #148]	; 0x94
    eee4:	str	r5, [sp, #144]	; 0x90
    eee6:	str.w	r2, [r9, #4]
    eeea:	bgt.w	f308 <_svfprintf_r+0xf38>
    eeee:	add.w	r9, r9, #8
    eef2:	movs	r3, #0
    eef4:	movs	r2, #0
    eef6:	ldrd	r0, r1, [sp, #64]	; 0x40
    eefa:	bl	bbd8 <__aeabi_dcmpeq>
    eefe:	ldr	r3, [sp, #56]	; 0x38
    ef00:	cmp	r0, #0
    ef02:	bne.w	f08c <_svfprintf_r+0xcbc>
    ef06:	subs	r3, #1
    ef08:	adds	r5, #1
    ef0a:	adds	r6, #1
    ef0c:	add	r4, r3
    ef0e:	cmp	r5, #7
    ef10:	str	r5, [sp, #144]	; 0x90
    ef12:	str	r4, [sp, #148]	; 0x94
    ef14:	str.w	r6, [r9]
    ef18:	str.w	r3, [r9, #4]
    ef1c:	bgt.w	f10a <_svfprintf_r+0xd3a>
    ef20:	add.w	r9, r9, #8
    ef24:	ldr	r2, [sp, #84]	; 0x54
    ef26:	str.w	r2, [r9, #4]
    ef2a:	adds	r5, #1
    ef2c:	add	r4, r2
    ef2e:	add	r3, sp, #124	; 0x7c
    ef30:	cmp	r5, #7
    ef32:	str	r4, [sp, #148]	; 0x94
    ef34:	str	r5, [sp, #144]	; 0x90
    ef36:	str.w	r3, [r9]
    ef3a:	ble.w	e8f8 <_svfprintf_r+0x528>
    ef3e:	add	r2, sp, #140	; 0x8c
    ef40:	ldr	r1, [sp, #20]
    ef42:	ldr	r0, [sp, #24]
    ef44:	bl	13414 <__ssprint_r>
    ef48:	cmp	r0, #0
    ef4a:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    ef4e:	ldr	r4, [sp, #148]	; 0x94
    ef50:	add.w	r9, sp, #192	; 0xc0
    ef54:	b.n	e8fc <_svfprintf_r+0x52c>
    ef56:	add	r2, sp, #140	; 0x8c
    ef58:	ldr	r1, [sp, #20]
    ef5a:	ldr	r0, [sp, #24]
    ef5c:	bl	13414 <__ssprint_r>
    ef60:	cmp	r0, #0
    ef62:	beq.w	e998 <_svfprintf_r+0x5c8>
    ef66:	b.w	e5c4 <_svfprintf_r+0x1f4>
    ef6a:	add	r2, sp, #140	; 0x8c
    ef6c:	ldr	r1, [sp, #20]
    ef6e:	ldr	r0, [sp, #24]
    ef70:	bl	13414 <__ssprint_r>
    ef74:	cmp	r0, #0
    ef76:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    ef7a:	ldr	r4, [sp, #148]	; 0x94
    ef7c:	add.w	r9, sp, #192	; 0xc0
    ef80:	b.n	e8d6 <_svfprintf_r+0x506>
    ef82:	add	r2, sp, #140	; 0x8c
    ef84:	ldr	r1, [sp, #20]
    ef86:	ldr	r0, [sp, #24]
    ef88:	bl	13414 <__ssprint_r>
    ef8c:	cmp	r0, #0
    ef8e:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    ef92:	ldr	r4, [sp, #148]	; 0x94
    ef94:	add.w	r9, sp, #192	; 0xc0
    ef98:	b.n	e83c <_svfprintf_r+0x46c>
    ef9a:	add	r2, sp, #140	; 0x8c
    ef9c:	ldr	r1, [sp, #20]
    ef9e:	ldr	r0, [sp, #24]
    efa0:	bl	13414 <__ssprint_r>
    efa4:	cmp	r0, #0
    efa6:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    efaa:	ldr	r4, [sp, #148]	; 0x94
    efac:	add.w	r9, sp, #192	; 0xc0
    efb0:	b.n	e85c <_svfprintf_r+0x48c>
    efb2:	cmp.w	fp, #0
    efb6:	strb.w	r7, [sp, #111]	; 0x6f
    efba:	blt.w	f57c <_svfprintf_r+0x11ac>
    efbe:	bic.w	r3, r2, #128	; 0x80
    efc2:	str	r3, [sp, #12]
    efc4:	orrs.w	r3, r4, r5
    efc8:	bne.w	eb72 <_svfprintf_r+0x7a2>
    efcc:	cmp.w	fp, #0
    efd0:	beq.w	ecec <_svfprintf_r+0x91c>
    efd4:	movs	r7, #0
    efd6:	b.n	ed48 <_svfprintf_r+0x978>
    efd8:	ldr	r5, [sp, #116]	; 0x74
    efda:	cmp	r5, #0
    efdc:	ble.w	f582 <_svfprintf_r+0x11b2>
    efe0:	ldr	r3, [sp, #60]	; 0x3c
    efe2:	ldr	r2, [sp, #56]	; 0x38
    efe4:	cmp	r3, r2
    efe6:	it	ge
    efe8:	movge	r3, r2
    efea:	cmp	r3, #0
    efec:	mov	r5, r3
    efee:	ble.n	f00c <_svfprintf_r+0xc3c>
    eff0:	ldr	r3, [sp, #144]	; 0x90
    eff2:	str.w	r6, [r9]
    eff6:	adds	r3, #1
    eff8:	add	r4, r5
    effa:	cmp	r3, #7
    effc:	str	r4, [sp, #148]	; 0x94
    effe:	str.w	r5, [r9, #4]
    f002:	str	r3, [sp, #144]	; 0x90
    f004:	bgt.w	f75a <_svfprintf_r+0x138a>
    f008:	add.w	r9, r9, #8
    f00c:	ldr	r3, [sp, #60]	; 0x3c
    f00e:	cmp	r5, #0
    f010:	it	ge
    f012:	subge	r3, r3, r5
    f014:	cmp	r3, #0
    f016:	mov	r5, r3
    f018:	ble.w	f20c <_svfprintf_r+0xe3c>
    f01c:	ldr	r2, [pc, #260]	; (f124 <_svfprintf_r+0xd54>)
    f01e:	ldr	r3, [sp, #144]	; 0x90
    f020:	str	r2, [sp, #44]	; 0x2c
    f022:	cmp	r5, #16
    f024:	ble.w	f52e <_svfprintf_r+0x115e>
    f028:	mov	r2, r4
    f02a:	movs	r7, #16
    f02c:	ldr.w	fp, [sp, #24]
    f030:	ldr	r4, [sp, #20]
    f032:	b.n	f040 <_svfprintf_r+0xc70>
    f034:	add.w	r9, r9, #8
    f038:	subs	r5, #16
    f03a:	cmp	r5, #16
    f03c:	ble.w	f52c <_svfprintf_r+0x115c>
    f040:	adds	r3, #1
    f042:	adds	r2, #16
    f044:	cmp	r3, #7
    f046:	str	r2, [sp, #148]	; 0x94
    f048:	str	r3, [sp, #144]	; 0x90
    f04a:	str.w	sl, [r9]
    f04e:	str.w	r7, [r9, #4]
    f052:	ble.n	f034 <_svfprintf_r+0xc64>
    f054:	add	r2, sp, #140	; 0x8c
    f056:	mov	r1, r4
    f058:	mov	r0, fp
    f05a:	bl	13414 <__ssprint_r>
    f05e:	cmp	r0, #0
    f060:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f064:	ldr	r2, [sp, #148]	; 0x94
    f066:	ldr	r3, [sp, #144]	; 0x90
    f068:	add.w	r9, sp, #192	; 0xc0
    f06c:	b.n	f038 <_svfprintf_r+0xc68>
    f06e:	add	r2, sp, #140	; 0x8c
    f070:	ldr	r1, [sp, #20]
    f072:	ldr	r0, [sp, #24]
    f074:	bl	13414 <__ssprint_r>
    f078:	cmp	r0, #0
    f07a:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f07e:	ldrb.w	r7, [sp, #111]	; 0x6f
    f082:	ldr	r4, [sp, #148]	; 0x94
    f084:	add.w	r9, sp, #192	; 0xc0
    f088:	b.w	e81c <_svfprintf_r+0x44c>
    f08c:	subs	r6, r3, #1
    f08e:	cmp	r6, #0
    f090:	ble.w	ef24 <_svfprintf_r+0xb54>
    f094:	ldr	r3, [pc, #140]	; (f124 <_svfprintf_r+0xd54>)
    f096:	str	r3, [sp, #44]	; 0x2c
    f098:	cmp	r6, #16
    f09a:	ble.n	f0f6 <_svfprintf_r+0xd26>
    f09c:	str.w	r8, [sp, #36]	; 0x24
    f0a0:	movs	r7, #16
    f0a2:	mov	r8, r6
    f0a4:	ldr.w	fp, [sp, #24]
    f0a8:	ldr	r6, [sp, #20]
    f0aa:	b.n	f0ba <_svfprintf_r+0xcea>
    f0ac:	sub.w	r8, r8, #16
    f0b0:	cmp.w	r8, #16
    f0b4:	add.w	r9, r9, #8
    f0b8:	ble.n	f0f0 <_svfprintf_r+0xd20>
    f0ba:	adds	r5, #1
    f0bc:	adds	r4, #16
    f0be:	cmp	r5, #7
    f0c0:	str	r4, [sp, #148]	; 0x94
    f0c2:	str	r5, [sp, #144]	; 0x90
    f0c4:	str.w	sl, [r9]
    f0c8:	str.w	r7, [r9, #4]
    f0cc:	ble.n	f0ac <_svfprintf_r+0xcdc>
    f0ce:	add	r2, sp, #140	; 0x8c
    f0d0:	mov	r1, r6
    f0d2:	mov	r0, fp
    f0d4:	bl	13414 <__ssprint_r>
    f0d8:	cmp	r0, #0
    f0da:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f0de:	sub.w	r8, r8, #16
    f0e2:	cmp.w	r8, #16
    f0e6:	ldr	r4, [sp, #148]	; 0x94
    f0e8:	ldr	r5, [sp, #144]	; 0x90
    f0ea:	add.w	r9, sp, #192	; 0xc0
    f0ee:	bgt.n	f0ba <_svfprintf_r+0xcea>
    f0f0:	mov	r6, r8
    f0f2:	ldr.w	r8, [sp, #36]	; 0x24
    f0f6:	ldr	r3, [sp, #44]	; 0x2c
    f0f8:	adds	r5, #1
    f0fa:	add	r4, r6
    f0fc:	cmp	r5, #7
    f0fe:	str	r4, [sp, #148]	; 0x94
    f100:	str	r5, [sp, #144]	; 0x90
    f102:	stmia.w	r9, {r3, r6}
    f106:	ble.w	ef20 <_svfprintf_r+0xb50>
    f10a:	add	r2, sp, #140	; 0x8c
    f10c:	ldr	r1, [sp, #20]
    f10e:	ldr	r0, [sp, #24]
    f110:	bl	13414 <__ssprint_r>
    f114:	cmp	r0, #0
    f116:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f11a:	ldr	r4, [sp, #148]	; 0x94
    f11c:	ldr	r5, [sp, #144]	; 0x90
    f11e:	add.w	r9, sp, #192	; 0xc0
    f122:	b.n	ef24 <_svfprintf_r+0xb54>
    f124:	.word	0x000140d0
    f128:	ldr	r1, [sp, #12]
    f12a:	ands.w	r2, r1, #16
    f12e:	beq.w	f4d8 <_svfprintf_r+0x1108>
    f132:	ldr	r0, [sp, #40]	; 0x28
    f134:	strb.w	r3, [sp, #111]	; 0x6f
    f138:	cmp.w	fp, #0
    f13c:	ldr	r4, [r0, #0]
    f13e:	add.w	r7, r0, #4
    f142:	mov.w	r5, #0
    f146:	blt.n	f196 <_svfprintf_r+0xdc6>
    f148:	mov	r2, r1
    f14a:	bic.w	r2, r2, #128	; 0x80
    f14e:	str	r2, [sp, #12]
    f150:	orrs.w	r2, r4, r5
    f154:	str	r7, [sp, #40]	; 0x28
    f156:	mov	r7, r3
    f158:	bne.w	e72c <_svfprintf_r+0x35c>
    f15c:	b.n	eafc <_svfprintf_r+0x72c>
    f15e:	ldr	r3, [sp, #12]
    f160:	lsls	r0, r3, #27
    f162:	bmi.n	f1ba <_svfprintf_r+0xdea>
    f164:	ldr	r3, [sp, #12]
    f166:	lsls	r1, r3, #25
    f168:	bpl.n	f1ba <_svfprintf_r+0xdea>
    f16a:	ldr	r1, [sp, #40]	; 0x28
    f16c:	ldrsh.w	r4, [r1]
    f170:	adds	r1, #4
    f172:	asrs	r5, r4, #31
    f174:	mov	r2, r4
    f176:	mov	r3, r5
    f178:	str	r1, [sp, #40]	; 0x28
    f17a:	b.w	e706 <_svfprintf_r+0x336>
    f17e:	ldr	r1, [sp, #40]	; 0x28
    f180:	strb.w	r3, [sp, #111]	; 0x6f
    f184:	cmp.w	fp, #0
    f188:	ldr	r4, [r1, #0]
    f18a:	add.w	r7, r1, #4
    f18e:	mov.w	r5, #0
    f192:	bge.w	f62e <_svfprintf_r+0x125e>
    f196:	str	r7, [sp, #40]	; 0x28
    f198:	mov	r7, r3
    f19a:	orrs.w	r3, r4, r5
    f19e:	bne.w	e72c <_svfprintf_r+0x35c>
    f1a2:	b.n	eb06 <_svfprintf_r+0x736>
    f1a4:	adds	r3, #1
    f1a6:	ldr	r2, [sp, #44]	; 0x2c
    f1a8:	str	r3, [sp, #144]	; 0x90
    f1aa:	add	r4, r5
    f1ac:	cmp	r3, #7
    f1ae:	str	r4, [sp, #148]	; 0x94
    f1b0:	stmia.w	r9, {r2, r5}
    f1b4:	ble.w	e8f8 <_svfprintf_r+0x528>
    f1b8:	b.n	ef3e <_svfprintf_r+0xb6e>
    f1ba:	ldr	r2, [sp, #40]	; 0x28
    f1bc:	ldr	r4, [r2, #0]
    f1be:	mov	r3, r2
    f1c0:	adds	r3, #4
    f1c2:	asrs	r5, r4, #31
    f1c4:	mov	r2, r4
    f1c6:	str	r3, [sp, #40]	; 0x28
    f1c8:	cmp	r2, #0
    f1ca:	mov	r3, r5
    f1cc:	sbcs.w	r3, r3, #0
    f1d0:	bge.w	e710 <_svfprintf_r+0x340>
    f1d4:	negs	r4, r4
    f1d6:	mov.w	r7, #45	; 0x2d
    f1da:	sbc.w	r5, r5, r5, lsl #1
    f1de:	cmp.w	fp, #0
    f1e2:	strb.w	r7, [sp, #111]	; 0x6f
    f1e6:	blt.w	e72c <_svfprintf_r+0x35c>
    f1ea:	ldr	r3, [sp, #12]
    f1ec:	bic.w	r3, r3, #128	; 0x80
    f1f0:	str	r3, [sp, #12]
    f1f2:	b.w	e72c <_svfprintf_r+0x35c>
    f1f6:	add	r2, sp, #140	; 0x8c
    f1f8:	ldr	r1, [sp, #20]
    f1fa:	ldr	r0, [sp, #24]
    f1fc:	bl	13414 <__ssprint_r>
    f200:	cmp	r0, #0
    f202:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f206:	ldr	r4, [sp, #148]	; 0x94
    f208:	add.w	r9, sp, #192	; 0xc0
    f20c:	ldr	r2, [sp, #60]	; 0x3c
    f20e:	ldr	r3, [sp, #116]	; 0x74
    f210:	add	r2, r6
    f212:	mov	r7, r2
    f214:	ldr	r2, [sp, #56]	; 0x38
    f216:	cmp	r3, r2
    f218:	blt.n	f2aa <_svfprintf_r+0xeda>
    f21a:	ldr	r2, [sp, #12]
    f21c:	lsls	r5, r2, #31
    f21e:	bmi.n	f2aa <_svfprintf_r+0xeda>
    f220:	ldr	r1, [sp, #56]	; 0x38
    f222:	add	r6, r1
    f224:	subs	r5, r6, r7
    f226:	subs	r3, r1, r3
    f228:	cmp	r5, r3
    f22a:	it	ge
    f22c:	movge	r5, r3
    f22e:	cmp	r5, #0
    f230:	mov	r6, r5
    f232:	ble.n	f250 <_svfprintf_r+0xe80>
    f234:	ldr	r2, [sp, #144]	; 0x90
    f236:	str.w	r7, [r9]
    f23a:	adds	r2, #1
    f23c:	add	r4, r5
    f23e:	cmp	r2, #7
    f240:	str	r4, [sp, #148]	; 0x94
    f242:	str.w	r5, [r9, #4]
    f246:	str	r2, [sp, #144]	; 0x90
    f248:	bgt.w	f848 <_svfprintf_r+0x1478>
    f24c:	add.w	r9, r9, #8
    f250:	cmp	r6, #0
    f252:	ite	ge
    f254:	subge	r5, r3, r6
    f256:	movlt	r5, r3
    f258:	cmp	r5, #0
    f25a:	ble.w	e8fc <_svfprintf_r+0x52c>
    f25e:	ldr	r2, [pc, #744]	; (f548 <_svfprintf_r+0x1178>)
    f260:	ldr	r3, [sp, #144]	; 0x90
    f262:	str	r2, [sp, #44]	; 0x2c
    f264:	cmp	r5, #16
    f266:	ble.n	f1a4 <_svfprintf_r+0xdd4>
    f268:	movs	r6, #16
    f26a:	ldr	r7, [sp, #24]
    f26c:	ldr.w	fp, [sp, #20]
    f270:	b.n	f27c <_svfprintf_r+0xeac>
    f272:	add.w	r9, r9, #8
    f276:	subs	r5, #16
    f278:	cmp	r5, #16
    f27a:	ble.n	f1a4 <_svfprintf_r+0xdd4>
    f27c:	adds	r3, #1
    f27e:	adds	r4, #16
    f280:	cmp	r3, #7
    f282:	str	r4, [sp, #148]	; 0x94
    f284:	str	r3, [sp, #144]	; 0x90
    f286:	str.w	sl, [r9]
    f28a:	str.w	r6, [r9, #4]
    f28e:	ble.n	f272 <_svfprintf_r+0xea2>
    f290:	add	r2, sp, #140	; 0x8c
    f292:	mov	r1, fp
    f294:	mov	r0, r7
    f296:	bl	13414 <__ssprint_r>
    f29a:	cmp	r0, #0
    f29c:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f2a0:	ldr	r4, [sp, #148]	; 0x94
    f2a2:	ldr	r3, [sp, #144]	; 0x90
    f2a4:	add.w	r9, sp, #192	; 0xc0
    f2a8:	b.n	f276 <_svfprintf_r+0xea6>
    f2aa:	ldr	r2, [sp, #144]	; 0x90
    f2ac:	ldr	r0, [sp, #72]	; 0x48
    f2ae:	ldr	r1, [sp, #76]	; 0x4c
    f2b0:	str.w	r1, [r9]
    f2b4:	adds	r2, #1
    f2b6:	add	r4, r0
    f2b8:	cmp	r2, #7
    f2ba:	str	r4, [sp, #148]	; 0x94
    f2bc:	str.w	r0, [r9, #4]
    f2c0:	str	r2, [sp, #144]	; 0x90
    f2c2:	bgt.w	f82e <_svfprintf_r+0x145e>
    f2c6:	add.w	r9, r9, #8
    f2ca:	b.n	f220 <_svfprintf_r+0xe50>
    f2cc:	ldr	r3, [sp, #12]
    f2ce:	lsls	r0, r3, #31
    f2d0:	bmi.w	eeb8 <_svfprintf_r+0xae8>
    f2d4:	adds	r5, #1
    f2d6:	adds	r4, #1
    f2d8:	movs	r3, #1
    f2da:	cmp	r5, #7
    f2dc:	str	r4, [sp, #148]	; 0x94
    f2de:	str	r5, [sp, #144]	; 0x90
    f2e0:	str.w	r6, [r9]
    f2e4:	str.w	r3, [r9, #4]
    f2e8:	ble.w	ef20 <_svfprintf_r+0xb50>
    f2ec:	b.n	f10a <_svfprintf_r+0xd3a>
    f2ee:	add	r2, sp, #140	; 0x8c
    f2f0:	ldr	r1, [sp, #20]
    f2f2:	ldr	r0, [sp, #24]
    f2f4:	bl	13414 <__ssprint_r>
    f2f8:	cmp	r0, #0
    f2fa:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f2fe:	ldr	r4, [sp, #148]	; 0x94
    f300:	ldr	r5, [sp, #144]	; 0x90
    f302:	add.w	r9, sp, #192	; 0xc0
    f306:	b.n	eed4 <_svfprintf_r+0xb04>
    f308:	add	r2, sp, #140	; 0x8c
    f30a:	ldr	r1, [sp, #20]
    f30c:	ldr	r0, [sp, #24]
    f30e:	bl	13414 <__ssprint_r>
    f312:	cmp	r0, #0
    f314:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f318:	ldr	r4, [sp, #148]	; 0x94
    f31a:	ldr	r5, [sp, #144]	; 0x90
    f31c:	add.w	r9, sp, #192	; 0xc0
    f320:	b.n	eef2 <_svfprintf_r+0xb22>
    f322:	add	r2, sp, #140	; 0x8c
    f324:	ldr	r1, [sp, #20]
    f326:	ldr	r0, [sp, #24]
    f328:	bl	13414 <__ssprint_r>
    f32c:	cmp	r0, #0
    f32e:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f332:	ldr	r4, [sp, #148]	; 0x94
    f334:	add.w	r9, sp, #192	; 0xc0
    f338:	b.w	e864 <_svfprintf_r+0x494>
    f33c:	ldr	r1, [sp, #12]
    f33e:	ands.w	r3, r1, #64	; 0x40
    f342:	beq.w	f4b8 <_svfprintf_r+0x10e8>
    f346:	ldr	r0, [sp, #40]	; 0x28
    f348:	strb.w	r2, [sp, #111]	; 0x6f
    f34c:	mov	r3, r0
    f34e:	cmp.w	fp, #0
    f352:	add.w	r3, r3, #4
    f356:	ldrh	r4, [r0, #0]
    f358:	mov.w	r5, #0
    f35c:	blt.w	f6e0 <_svfprintf_r+0x1310>
    f360:	bic.w	r1, r1, #128	; 0x80
    f364:	str	r1, [sp, #12]
    f366:	orrs.w	r1, r4, r5
    f36a:	str	r3, [sp, #40]	; 0x28
    f36c:	beq.w	ed24 <_svfprintf_r+0x954>
    f370:	mov	r7, r2
    f372:	b.w	e61c <_svfprintf_r+0x24c>
    f376:	ldr	r3, [sp, #12]
    f378:	lsls	r7, r3, #27
    f37a:	bmi.n	f394 <_svfprintf_r+0xfc4>
    f37c:	ldr	r3, [sp, #12]
    f37e:	lsls	r6, r3, #25
    f380:	bpl.n	f394 <_svfprintf_r+0xfc4>
    f382:	ldr	r2, [sp, #40]	; 0x28
    f384:	ldr	r3, [r2, #0]
    f386:	adds	r2, #4
    f388:	str	r2, [sp, #40]	; 0x28
    f38a:	ldrh.w	r2, [sp, #28]
    f38e:	strh	r2, [r3, #0]
    f390:	b.w	e41e <_svfprintf_r+0x4e>
    f394:	ldr	r2, [sp, #40]	; 0x28
    f396:	ldr	r3, [r2, #0]
    f398:	adds	r2, #4
    f39a:	str	r2, [sp, #40]	; 0x28
    f39c:	ldr	r2, [sp, #28]
    f39e:	str	r2, [r3, #0]
    f3a0:	b.w	e41e <_svfprintf_r+0x4e>
    f3a4:	ldrd	r0, r1, [sp, #64]	; 0x40
    f3a8:	mov	r2, r0
    f3aa:	mov	r3, r1
    f3ac:	bl	bc3c <__aeabi_dcmpun>
    f3b0:	cmp	r0, #0
    f3b2:	bne.w	f9b0 <_svfprintf_r+0x15e0>
    f3b6:	ldr	r3, [sp, #52]	; 0x34
    f3b8:	cmp.w	fp, #4294967295
    f3bc:	bic.w	r7, r3, #32
    f3c0:	beq.w	f892 <_svfprintf_r+0x14c2>
    f3c4:	cmp	r7, #71	; 0x47
    f3c6:	beq.w	f6ce <_svfprintf_r+0x12fe>
    f3ca:	ldr	r3, [sp, #68]	; 0x44
    f3cc:	ldr	r2, [sp, #12]
    f3ce:	cmp	r3, #0
    f3d0:	orr.w	r2, r2, #256	; 0x100
    f3d4:	str	r2, [sp, #44]	; 0x2c
    f3d6:	blt.w	f8ca <_svfprintf_r+0x14fa>
    f3da:	vldr	d7, [sp, #64]	; 0x40
    f3de:	vstr	d7, [sp, #96]	; 0x60
    f3e2:	movs	r3, #0
    f3e4:	str	r3, [sp, #16]
    f3e6:	ldr	r3, [sp, #52]	; 0x34
    f3e8:	cmp	r3, #102	; 0x66
    f3ea:	beq.w	f898 <_svfprintf_r+0x14c8>
    f3ee:	cmp	r3, #70	; 0x46
    f3f0:	beq.w	f67e <_svfprintf_r+0x12ae>
    f3f4:	cmp	r7, #69	; 0x45
    f3f6:	ite	eq
    f3f8:	addeq.w	r5, fp, #1
    f3fc:	movne	r5, fp
    f3fe:	add	r2, sp, #132	; 0x84
    f400:	add	r3, sp, #120	; 0x78
    f402:	str	r2, [sp, #4]
    f404:	str	r3, [sp, #0]
    f406:	mov	r2, r5
    f408:	add	r3, sp, #116	; 0x74
    f40a:	movs	r1, #2
    f40c:	vldr	d0, [sp, #96]	; 0x60
    f410:	ldr	r0, [sp, #24]
    f412:	bl	10bd8 <_dtoa_r>
    f416:	ldr	r3, [sp, #52]	; 0x34
    f418:	cmp	r3, #103	; 0x67
    f41a:	mov	r6, r0
    f41c:	bne.w	f8f6 <_svfprintf_r+0x1526>
    f420:	ldr	r3, [sp, #12]
    f422:	lsls	r2, r3, #31
    f424:	bpl.w	f99a <_svfprintf_r+0x15ca>
    f428:	adds	r4, r6, r5
    f42a:	movs	r2, #0
    f42c:	movs	r3, #0
    f42e:	ldrd	r0, r1, [sp, #96]	; 0x60
    f432:	bl	bbd8 <__aeabi_dcmpeq>
    f436:	cmp	r0, #0
    f438:	bne.w	f756 <_svfprintf_r+0x1386>
    f43c:	ldr	r3, [sp, #132]	; 0x84
    f43e:	cmp	r4, r3
    f440:	bls.n	f450 <_svfprintf_r+0x1080>
    f442:	movs	r1, #48	; 0x30
    f444:	adds	r2, r3, #1
    f446:	str	r2, [sp, #132]	; 0x84
    f448:	strb	r1, [r3, #0]
    f44a:	ldr	r3, [sp, #132]	; 0x84
    f44c:	cmp	r4, r3
    f44e:	bhi.n	f444 <_svfprintf_r+0x1074>
    f450:	subs	r3, r3, r6
    f452:	cmp	r7, #71	; 0x47
    f454:	str	r3, [sp, #56]	; 0x38
    f456:	beq.w	f748 <_svfprintf_r+0x1378>
    f45a:	ldr	r3, [sp, #52]	; 0x34
    f45c:	cmp	r3, #101	; 0x65
    f45e:	ble.w	f914 <_svfprintf_r+0x1544>
    f462:	ldr	r3, [sp, #52]	; 0x34
    f464:	cmp	r3, #102	; 0x66
    f466:	ldr	r3, [sp, #116]	; 0x74
    f468:	str	r3, [sp, #60]	; 0x3c
    f46a:	beq.w	f92e <_svfprintf_r+0x155e>
    f46e:	ldr	r2, [sp, #60]	; 0x3c
    f470:	ldr	r1, [sp, #56]	; 0x38
    f472:	cmp	r2, r1
    f474:	blt.w	f8dc <_svfprintf_r+0x150c>
    f478:	ldr	r3, [sp, #12]
    f47a:	lsls	r1, r3, #31
    f47c:	bmi.w	f99e <_svfprintf_r+0x15ce>
    f480:	bic.w	r3, r2, r2, asr #31
    f484:	str	r2, [sp, #36]	; 0x24
    f486:	movs	r2, #103	; 0x67
    f488:	str	r2, [sp, #52]	; 0x34
    f48a:	ldr	r2, [sp, #16]
    f48c:	cmp	r2, #0
    f48e:	bne.w	f6f0 <_svfprintf_r+0x1320>
    f492:	str	r3, [sp, #16]
    f494:	ldr	r3, [sp, #44]	; 0x2c
    f496:	str	r3, [sp, #12]
    f498:	mov	fp, r2
    f49a:	ldrb.w	r7, [sp, #111]	; 0x6f
    f49e:	b.w	e774 <_svfprintf_r+0x3a4>
    f4a2:	bic.w	r7, r7, #7
    f4a6:	vldr	d7, [r7]
    f4aa:	add.w	r3, r7, #8
    f4ae:	vstr	d7, [sp, #64]	; 0x40
    f4b2:	str	r3, [sp, #40]	; 0x28
    f4b4:	b.w	e9cc <_svfprintf_r+0x5fc>
    f4b8:	ldr	r1, [sp, #40]	; 0x28
    f4ba:	strb.w	r3, [sp, #111]	; 0x6f
    f4be:	cmp.w	fp, #0
    f4c2:	ldr	r4, [r1, #0]
    f4c4:	add.w	r7, r1, #4
    f4c8:	mov.w	r5, #0
    f4cc:	bge.w	f628 <_svfprintf_r+0x1258>
    f4d0:	str	r7, [sp, #40]	; 0x28
    f4d2:	movs	r7, #0
    f4d4:	b.w	e61c <_svfprintf_r+0x24c>
    f4d8:	ldr	r1, [sp, #12]
    f4da:	ands.w	r3, r1, #64	; 0x40
    f4de:	beq.w	f17e <_svfprintf_r+0xdae>
    f4e2:	ldr	r0, [sp, #40]	; 0x28
    f4e4:	strb.w	r2, [sp, #111]	; 0x6f
    f4e8:	mov	r3, r0
    f4ea:	cmp.w	fp, #0
    f4ee:	add.w	r3, r3, #4
    f4f2:	ldrh	r4, [r0, #0]
    f4f4:	mov.w	r5, #0
    f4f8:	blt.w	f6da <_svfprintf_r+0x130a>
    f4fc:	bic.w	r1, r1, #128	; 0x80
    f500:	str	r1, [sp, #12]
    f502:	orrs.w	r1, r4, r5
    f506:	str	r3, [sp, #40]	; 0x28
    f508:	mov	r7, r2
    f50a:	bne.w	e72c <_svfprintf_r+0x35c>
    f50e:	b.w	eafc <_svfprintf_r+0x72c>
    f512:	ldr	r3, [sp, #12]
    f514:	ldr	r2, [sp, #40]	; 0x28
    f516:	tst.w	r3, #64	; 0x40
    f51a:	mov	r3, r2
    f51c:	beq.w	f6e4 <_svfprintf_r+0x1314>
    f520:	adds	r3, #4
    f522:	ldrh	r4, [r2, #0]
    f524:	str	r3, [sp, #40]	; 0x28
    f526:	movs	r5, #0
    f528:	b.w	eb36 <_svfprintf_r+0x766>
    f52c:	mov	r4, r2
    f52e:	adds	r3, #1
    f530:	ldr	r2, [sp, #44]	; 0x2c
    f532:	str	r3, [sp, #144]	; 0x90
    f534:	add	r4, r5
    f536:	cmp	r3, #7
    f538:	str	r4, [sp, #148]	; 0x94
    f53a:	stmia.w	r9, {r2, r5}
    f53e:	bgt.w	f1f6 <_svfprintf_r+0xe26>
    f542:	add.w	r9, r9, #8
    f546:	b.n	f20c <_svfprintf_r+0xe3c>
    f548:	.word	0x000140d0
    f54c:	movs	r7, #0
    f54e:	cmp	fp, r7
    f550:	strb.w	r7, [sp, #111]	; 0x6f
    f554:	blt.w	ed48 <_svfprintf_r+0x978>
    f558:	ldr	r3, [sp, #12]
    f55a:	bic.w	r3, r3, #128	; 0x80
    f55e:	str	r3, [sp, #12]
    f560:	b.w	ece4 <_svfprintf_r+0x914>
    f564:	add	r2, sp, #140	; 0x8c
    f566:	ldr	r1, [sp, #20]
    f568:	ldr	r0, [sp, #24]
    f56a:	bl	13414 <__ssprint_r>
    f56e:	cmp	r0, #0
    f570:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f574:	ldr	r4, [sp, #148]	; 0x94
    f576:	add.w	r9, sp, #192	; 0xc0
    f57a:	b.n	ed8c <_svfprintf_r+0x9bc>
    f57c:	ldr	r7, [sp, #40]	; 0x28
    f57e:	b.w	ed3a <_svfprintf_r+0x96a>
    f582:	ldr	r3, [sp, #144]	; 0x90
    f584:	ldr	r2, [pc, #736]	; (f868 <_svfprintf_r+0x1498>)
    f586:	str.w	r2, [r9]
    f58a:	adds	r3, #1
    f58c:	adds	r4, #1
    f58e:	movs	r2, #1
    f590:	cmp	r3, #7
    f592:	str	r4, [sp, #148]	; 0x94
    f594:	str	r3, [sp, #144]	; 0x90
    f596:	str.w	r2, [r9, #4]
    f59a:	bgt.w	f6b4 <_svfprintf_r+0x12e4>
    f59e:	add.w	r9, r9, #8
    f5a2:	cbnz	r5, f5b0 <_svfprintf_r+0x11e0>
    f5a4:	ldr	r3, [sp, #56]	; 0x38
    f5a6:	cbnz	r3, f5b0 <_svfprintf_r+0x11e0>
    f5a8:	ldr	r3, [sp, #12]
    f5aa:	lsls	r7, r3, #31
    f5ac:	bpl.w	e8fc <_svfprintf_r+0x52c>
    f5b0:	ldr	r3, [sp, #144]	; 0x90
    f5b2:	ldr	r1, [sp, #72]	; 0x48
    f5b4:	ldr	r2, [sp, #76]	; 0x4c
    f5b6:	str.w	r2, [r9]
    f5ba:	adds	r3, #1
    f5bc:	add	r4, r1
    f5be:	cmp	r3, #7
    f5c0:	str	r4, [sp, #148]	; 0x94
    f5c2:	str.w	r1, [r9, #4]
    f5c6:	str	r3, [sp, #144]	; 0x90
    f5c8:	bgt.w	f966 <_svfprintf_r+0x1596>
    f5cc:	add.w	r9, r9, #8
    f5d0:	negs	r5, r5
    f5d2:	cmp	r5, #0
    f5d4:	ble.w	f72c <_svfprintf_r+0x135c>
    f5d8:	ldr	r2, [pc, #656]	; (f86c <_svfprintf_r+0x149c>)
    f5da:	str	r2, [sp, #44]	; 0x2c
    f5dc:	cmp	r5, #16
    f5de:	ble.w	f774 <_svfprintf_r+0x13a4>
    f5e2:	mov	r2, r4
    f5e4:	movs	r7, #16
    f5e6:	ldr.w	fp, [sp, #24]
    f5ea:	ldr	r4, [sp, #20]
    f5ec:	b.n	f5fa <_svfprintf_r+0x122a>
    f5ee:	add.w	r9, r9, #8
    f5f2:	subs	r5, #16
    f5f4:	cmp	r5, #16
    f5f6:	ble.w	f772 <_svfprintf_r+0x13a2>
    f5fa:	adds	r3, #1
    f5fc:	adds	r2, #16
    f5fe:	cmp	r3, #7
    f600:	str	r2, [sp, #148]	; 0x94
    f602:	str	r3, [sp, #144]	; 0x90
    f604:	str.w	sl, [r9]
    f608:	str.w	r7, [r9, #4]
    f60c:	ble.n	f5ee <_svfprintf_r+0x121e>
    f60e:	add	r2, sp, #140	; 0x8c
    f610:	mov	r1, r4
    f612:	mov	r0, fp
    f614:	bl	13414 <__ssprint_r>
    f618:	cmp	r0, #0
    f61a:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f61e:	ldr	r2, [sp, #148]	; 0x94
    f620:	ldr	r3, [sp, #144]	; 0x90
    f622:	add.w	r9, sp, #192	; 0xc0
    f626:	b.n	f5f2 <_svfprintf_r+0x1222>
    f628:	ldr	r2, [sp, #12]
    f62a:	b.w	eaa0 <_svfprintf_r+0x6d0>
    f62e:	ldr	r2, [sp, #12]
    f630:	b.n	f14a <_svfprintf_r+0xd7a>
    f632:	ldr	r3, [sp, #12]
    f634:	orr.w	r3, r3, #32
    f638:	str	r3, [sp, #12]
    f63a:	add.w	r8, r8, #1
    f63e:	ldrb.w	r3, [r8]
    f642:	b.w	e484 <_svfprintf_r+0xb4>
    f646:	add	r2, sp, #140	; 0x8c
    f648:	ldr	r1, [sp, #20]
    f64a:	ldr	r0, [sp, #24]
    f64c:	bl	13414 <__ssprint_r>
    f650:	cmp	r0, #0
    f652:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f656:	ldr	r4, [sp, #148]	; 0x94
    f658:	add.w	r9, sp, #192	; 0xc0
    f65c:	b.w	edbc <_svfprintf_r+0x9ec>
    f660:	movs	r1, #64	; 0x40
    f662:	ldr	r0, [sp, #24]
    f664:	bl	c4c0 <_malloc_r>
    f668:	ldr	r2, [sp, #20]
    f66a:	str	r0, [r2, #0]
    f66c:	str	r0, [r2, #16]
    f66e:	cmp	r0, #0
    f670:	beq.w	fa5a <_svfprintf_r+0x168a>
    f674:	ldr	r2, [sp, #20]
    f676:	movs	r3, #64	; 0x40
    f678:	str	r3, [r2, #20]
    f67a:	b.w	e3fe <_svfprintf_r+0x2e>
    f67e:	add	r2, sp, #132	; 0x84
    f680:	add	r3, sp, #120	; 0x78
    f682:	str	r2, [sp, #4]
    f684:	str	r3, [sp, #0]
    f686:	mov	r2, fp
    f688:	add	r3, sp, #116	; 0x74
    f68a:	movs	r1, #3
    f68c:	vldr	d0, [sp, #96]	; 0x60
    f690:	ldr	r0, [sp, #24]
    f692:	bl	10bd8 <_dtoa_r>
    f696:	mov	r5, fp
    f698:	mov	r6, r0
    f69a:	ldr	r3, [sp, #52]	; 0x34
    f69c:	cmp	r3, #70	; 0x46
    f69e:	add.w	r4, r6, r5
    f6a2:	bne.w	f42a <_svfprintf_r+0x105a>
    f6a6:	ldrb	r3, [r6, #0]
    f6a8:	cmp	r3, #48	; 0x30
    f6aa:	beq.w	f9bc <_svfprintf_r+0x15ec>
    f6ae:	ldr	r5, [sp, #116]	; 0x74
    f6b0:	add	r4, r5
    f6b2:	b.n	f42a <_svfprintf_r+0x105a>
    f6b4:	add	r2, sp, #140	; 0x8c
    f6b6:	ldr	r1, [sp, #20]
    f6b8:	ldr	r0, [sp, #24]
    f6ba:	bl	13414 <__ssprint_r>
    f6be:	cmp	r0, #0
    f6c0:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f6c4:	ldr	r5, [sp, #116]	; 0x74
    f6c6:	ldr	r4, [sp, #148]	; 0x94
    f6c8:	add.w	r9, sp, #192	; 0xc0
    f6cc:	b.n	f5a2 <_svfprintf_r+0x11d2>
    f6ce:	cmp.w	fp, #0
    f6d2:	it	eq
    f6d4:	moveq.w	fp, #1
    f6d8:	b.n	f3ca <_svfprintf_r+0xffa>
    f6da:	str	r3, [sp, #40]	; 0x28
    f6dc:	mov	r7, r2
    f6de:	b.n	f19a <_svfprintf_r+0xdca>
    f6e0:	str	r3, [sp, #40]	; 0x28
    f6e2:	b.n	f4d2 <_svfprintf_r+0x1102>
    f6e4:	adds	r3, #4
    f6e6:	ldr	r4, [r2, #0]
    f6e8:	str	r3, [sp, #40]	; 0x28
    f6ea:	movs	r5, #0
    f6ec:	b.w	eb36 <_svfprintf_r+0x766>
    f6f0:	movs	r7, #45	; 0x2d
    f6f2:	str	r3, [sp, #16]
    f6f4:	ldr	r3, [sp, #44]	; 0x2c
    f6f6:	str	r3, [sp, #12]
    f6f8:	strb.w	r7, [sp, #111]	; 0x6f
    f6fc:	mov.w	fp, #0
    f700:	b.w	e776 <_svfprintf_r+0x3a6>
    f704:	mov	r0, r6
    f706:	bl	d1c0 <strlen>
    f70a:	mov	fp, r4
    f70c:	mov	r3, r0
    f70e:	str	r0, [sp, #36]	; 0x24
    f710:	b.w	ec58 <_svfprintf_r+0x888>
    f714:	add	r2, sp, #140	; 0x8c
    f716:	ldr	r1, [sp, #20]
    f718:	ldr	r0, [sp, #24]
    f71a:	bl	13414 <__ssprint_r>
    f71e:	cmp	r0, #0
    f720:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f724:	ldr	r4, [sp, #148]	; 0x94
    f726:	ldr	r3, [sp, #144]	; 0x90
    f728:	add.w	r9, sp, #192	; 0xc0
    f72c:	ldr	r1, [sp, #56]	; 0x38
    f72e:	str.w	r6, [r9]
    f732:	adds	r3, #1
    f734:	add	r4, r1
    f736:	cmp	r3, #7
    f738:	str	r4, [sp, #148]	; 0x94
    f73a:	str	r3, [sp, #144]	; 0x90
    f73c:	str.w	r1, [r9, #4]
    f740:	ble.w	e8f8 <_svfprintf_r+0x528>
    f744:	b.w	ef3e <_svfprintf_r+0xb6e>
    f748:	ldr	r3, [sp, #116]	; 0x74
    f74a:	adds	r5, r3, #3
    f74c:	blt.n	f78c <_svfprintf_r+0x13bc>
    f74e:	cmp	fp, r3
    f750:	blt.n	f78c <_svfprintf_r+0x13bc>
    f752:	str	r3, [sp, #60]	; 0x3c
    f754:	b.n	f46e <_svfprintf_r+0x109e>
    f756:	mov	r3, r4
    f758:	b.n	f450 <_svfprintf_r+0x1080>
    f75a:	add	r2, sp, #140	; 0x8c
    f75c:	ldr	r1, [sp, #20]
    f75e:	ldr	r0, [sp, #24]
    f760:	bl	13414 <__ssprint_r>
    f764:	cmp	r0, #0
    f766:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f76a:	ldr	r4, [sp, #148]	; 0x94
    f76c:	add.w	r9, sp, #192	; 0xc0
    f770:	b.n	f00c <_svfprintf_r+0xc3c>
    f772:	mov	r4, r2
    f774:	adds	r3, #1
    f776:	ldr	r2, [sp, #44]	; 0x2c
    f778:	str	r3, [sp, #144]	; 0x90
    f77a:	add	r4, r5
    f77c:	cmp	r3, #7
    f77e:	str	r4, [sp, #148]	; 0x94
    f780:	stmia.w	r9, {r2, r5}
    f784:	bgt.n	f714 <_svfprintf_r+0x1344>
    f786:	add.w	r9, r9, #8
    f78a:	b.n	f72c <_svfprintf_r+0x135c>
    f78c:	ldr	r2, [sp, #52]	; 0x34
    f78e:	subs	r2, #2
    f790:	str	r2, [sp, #52]	; 0x34
    f792:	subs	r3, #1
    f794:	cmp	r3, #0
    f796:	ldrb.w	r2, [sp, #52]	; 0x34
    f79a:	str	r3, [sp, #116]	; 0x74
    f79c:	it	lt
    f79e:	neglt	r3, r3
    f7a0:	strb.w	r2, [sp, #124]	; 0x7c
    f7a4:	ite	lt
    f7a6:	movlt	r2, #45	; 0x2d
    f7a8:	movge	r2, #43	; 0x2b
    f7aa:	cmp	r3, #9
    f7ac:	strb.w	r2, [sp, #125]	; 0x7d
    f7b0:	ble.w	f98a <_svfprintf_r+0x15ba>
    f7b4:	add.w	r0, sp, #139	; 0x8b
    f7b8:	mov	r4, r0
    f7ba:	ldr	r2, [pc, #180]	; (f870 <_svfprintf_r+0x14a0>)
    f7bc:	smull	r2, r1, r2, r3
    f7c0:	asrs	r2, r3, #31
    f7c2:	rsb	r2, r2, r1, asr #2
    f7c6:	add.w	r1, r2, r2, lsl #2
    f7ca:	sub.w	r3, r3, r1, lsl #1
    f7ce:	add.w	r1, r3, #48	; 0x30
    f7d2:	cmp	r2, #9
    f7d4:	mov	r3, r2
    f7d6:	strb.w	r1, [r4, #-1]!
    f7da:	bgt.n	f7ba <_svfprintf_r+0x13ea>
    f7dc:	mov	r1, r4
    f7de:	adds	r3, #48	; 0x30
    f7e0:	uxtb	r2, r3
    f7e2:	strb.w	r2, [r1, #-1]!
    f7e6:	cmp	r0, r1
    f7e8:	bls.w	fa54 <_svfprintf_r+0x1684>
    f7ec:	add.w	r1, sp, #126	; 0x7e
    f7f0:	mov	r3, r4
    f7f2:	b.n	f7f8 <_svfprintf_r+0x1428>
    f7f4:	ldrb.w	r2, [r3], #1
    f7f8:	strb.w	r2, [r1], #1
    f7fc:	cmp	r0, r3
    f7fe:	bne.n	f7f4 <_svfprintf_r+0x1424>
    f800:	adds	r3, r0, #1
    f802:	subs	r3, r3, r4
    f804:	add.w	r2, sp, #126	; 0x7e
    f808:	add	r3, r2
    f80a:	add	r2, sp, #124	; 0x7c
    f80c:	subs	r3, r3, r2
    f80e:	ldr	r2, [sp, #56]	; 0x38
    f810:	str	r3, [sp, #84]	; 0x54
    f812:	cmp	r2, #1
    f814:	add	r3, r2
    f816:	str	r3, [sp, #36]	; 0x24
    f818:	ble.w	f9ea <_svfprintf_r+0x161a>
    f81c:	ldr	r3, [sp, #36]	; 0x24
    f81e:	ldr	r2, [sp, #72]	; 0x48
    f820:	add	r3, r2
    f822:	movs	r2, #0
    f824:	str	r3, [sp, #36]	; 0x24
    f826:	str	r2, [sp, #60]	; 0x3c
    f828:	bic.w	r3, r3, r3, asr #31
    f82c:	b.n	f48a <_svfprintf_r+0x10ba>
    f82e:	add	r2, sp, #140	; 0x8c
    f830:	ldr	r1, [sp, #20]
    f832:	ldr	r0, [sp, #24]
    f834:	bl	13414 <__ssprint_r>
    f838:	cmp	r0, #0
    f83a:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f83e:	ldr	r3, [sp, #116]	; 0x74
    f840:	ldr	r4, [sp, #148]	; 0x94
    f842:	add.w	r9, sp, #192	; 0xc0
    f846:	b.n	f220 <_svfprintf_r+0xe50>
    f848:	add	r2, sp, #140	; 0x8c
    f84a:	ldr	r1, [sp, #20]
    f84c:	ldr	r0, [sp, #24]
    f84e:	bl	13414 <__ssprint_r>
    f852:	cmp	r0, #0
    f854:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f858:	ldr	r3, [sp, #116]	; 0x74
    f85a:	ldr	r2, [sp, #56]	; 0x38
    f85c:	ldr	r4, [sp, #148]	; 0x94
    f85e:	subs	r3, r2, r3
    f860:	add.w	r9, sp, #192	; 0xc0
    f864:	b.n	f250 <_svfprintf_r+0xe80>
    f866:	nop
    f868:	.word	0x00014120
    f86c:	.word	0x000140d0
    f870:	.word	0x66666667
    f874:	cmp	r5, #6
    f876:	mov	r3, r5
    f878:	it	cs
    f87a:	movcs	r3, #6
    f87c:	str	r3, [sp, #36]	; 0x24
    f87e:	bic.w	r3, r3, r3, asr #31
    f882:	mov	fp, r6
    f884:	str	r7, [sp, #40]	; 0x28
    f886:	str	r6, [sp, #60]	; 0x3c
    f888:	mov	r7, r6
    f88a:	str	r3, [sp, #16]
    f88c:	ldr	r6, [pc, #536]	; (faa8 <_svfprintf_r+0x16d8>)
    f88e:	b.w	e774 <_svfprintf_r+0x3a4>
    f892:	mov.w	fp, #6
    f896:	b.n	f3ca <_svfprintf_r+0xffa>
    f898:	add	r2, sp, #132	; 0x84
    f89a:	add	r3, sp, #120	; 0x78
    f89c:	str	r2, [sp, #4]
    f89e:	str	r3, [sp, #0]
    f8a0:	mov	r2, fp
    f8a2:	add	r3, sp, #116	; 0x74
    f8a4:	movs	r1, #3
    f8a6:	vldr	d0, [sp, #96]	; 0x60
    f8aa:	ldr	r0, [sp, #24]
    f8ac:	bl	10bd8 <_dtoa_r>
    f8b0:	mov	r5, fp
    f8b2:	mov	r6, r0
    f8b4:	add.w	r4, r0, fp
    f8b8:	b.n	f6a6 <_svfprintf_r+0x12d6>
    f8ba:	movs	r7, #45	; 0x2d
    f8bc:	strb.w	r7, [sp, #111]	; 0x6f
    f8c0:	b.w	ea1a <_svfprintf_r+0x64a>
    f8c4:	str	r3, [sp, #12]
    f8c6:	b.w	eb72 <_svfprintf_r+0x7a2>
    f8ca:	ldrd	r1, r2, [sp, #64]	; 0x40
    f8ce:	add.w	r3, r2, #2147483648	; 0x80000000
    f8d2:	str	r3, [sp, #100]	; 0x64
    f8d4:	movs	r3, #45	; 0x2d
    f8d6:	str	r1, [sp, #96]	; 0x60
    f8d8:	str	r3, [sp, #16]
    f8da:	b.n	f3e6 <_svfprintf_r+0x1016>
    f8dc:	ldr	r2, [sp, #72]	; 0x48
    f8de:	ldr	r3, [sp, #56]	; 0x38
    f8e0:	add	r3, r2
    f8e2:	ldr	r2, [sp, #60]	; 0x3c
    f8e4:	str	r3, [sp, #36]	; 0x24
    f8e6:	cmp	r2, #0
    f8e8:	ble.w	f9fe <_svfprintf_r+0x162e>
    f8ec:	movs	r2, #103	; 0x67
    f8ee:	bic.w	r3, r3, r3, asr #31
    f8f2:	str	r2, [sp, #52]	; 0x34
    f8f4:	b.n	f48a <_svfprintf_r+0x10ba>
    f8f6:	ldr	r3, [sp, #52]	; 0x34
    f8f8:	cmp	r3, #71	; 0x47
    f8fa:	bne.w	f428 <_svfprintf_r+0x1058>
    f8fe:	ldr	r3, [sp, #12]
    f900:	lsls	r3, r3, #31
    f902:	bmi.w	f69a <_svfprintf_r+0x12ca>
    f906:	ldr	r3, [sp, #132]	; 0x84
    f908:	cmp	r7, #71	; 0x47
    f90a:	sub.w	r3, r3, r6
    f90e:	str	r3, [sp, #56]	; 0x38
    f910:	beq.w	f748 <_svfprintf_r+0x1378>
    f914:	ldr	r3, [sp, #116]	; 0x74
    f916:	b.n	f792 <_svfprintf_r+0x13c2>
    f918:	bic.w	r3, r5, r5, asr #31
    f91c:	str	r7, [sp, #40]	; 0x28
    f91e:	str	r3, [sp, #16]
    f920:	str	r5, [sp, #36]	; 0x24
    f922:	mov	fp, r0
    f924:	str	r0, [sp, #60]	; 0x3c
    f926:	ldrb.w	r7, [sp, #111]	; 0x6f
    f92a:	b.w	e774 <_svfprintf_r+0x3a4>
    f92e:	cmp	r3, #0
    f930:	ble.n	fa0e <_svfprintf_r+0x163e>
    f932:	cmp.w	fp, #0
    f936:	bne.n	f9d8 <_svfprintf_r+0x1608>
    f938:	ldr	r2, [sp, #12]
    f93a:	lsls	r4, r2, #31
    f93c:	bmi.n	f9d8 <_svfprintf_r+0x1608>
    f93e:	mov	r2, r3
    f940:	str	r2, [sp, #36]	; 0x24
    f942:	bic.w	r3, r3, r3, asr #31
    f946:	b.n	f48a <_svfprintf_r+0x10ba>
    f948:	ldr	r3, [sp, #12]
    f94a:	lsls	r3, r3, #31
    f94c:	mov	r7, fp
    f94e:	bpl.n	f95c <_svfprintf_r+0x158c>
    f950:	add	r6, sp, #256	; 0x100
    f952:	movs	r3, #48	; 0x30
    f954:	strb.w	r3, [r6, #-65]!
    f958:	b.w	e760 <_svfprintf_r+0x390>
    f95c:	str.w	fp, [sp, #36]	; 0x24
    f960:	add	r6, sp, #192	; 0xc0
    f962:	b.w	e766 <_svfprintf_r+0x396>
    f966:	add	r2, sp, #140	; 0x8c
    f968:	ldr	r1, [sp, #20]
    f96a:	ldr	r0, [sp, #24]
    f96c:	bl	13414 <__ssprint_r>
    f970:	cmp	r0, #0
    f972:	bne.w	e5c4 <_svfprintf_r+0x1f4>
    f976:	ldr	r5, [sp, #116]	; 0x74
    f978:	ldr	r4, [sp, #148]	; 0x94
    f97a:	ldr	r3, [sp, #144]	; 0x90
    f97c:	add.w	r9, sp, #192	; 0xc0
    f980:	b.n	f5d0 <_svfprintf_r+0x1200>
    f982:	mov	r8, r4
    f984:	movs	r5, #0
    f986:	b.w	e488 <_svfprintf_r+0xb8>
    f98a:	adds	r3, #48	; 0x30
    f98c:	movs	r2, #48	; 0x30
    f98e:	strb.w	r3, [sp, #127]	; 0x7f
    f992:	strb.w	r2, [sp, #126]	; 0x7e
    f996:	add	r3, sp, #128	; 0x80
    f998:	b.n	f80a <_svfprintf_r+0x143a>
    f99a:	ldr	r3, [sp, #132]	; 0x84
    f99c:	b.n	f450 <_svfprintf_r+0x1080>
    f99e:	ldr	r2, [sp, #72]	; 0x48
    f9a0:	ldr	r3, [sp, #60]	; 0x3c
    f9a2:	add	r3, r2
    f9a4:	movs	r2, #103	; 0x67
    f9a6:	str	r3, [sp, #36]	; 0x24
    f9a8:	str	r2, [sp, #52]	; 0x34
    f9aa:	bic.w	r3, r3, r3, asr #31
    f9ae:	b.n	f48a <_svfprintf_r+0x10ba>
    f9b0:	ldr	r6, [pc, #248]	; (faac <_svfprintf_r+0x16dc>)
    f9b2:	ldr	r3, [pc, #252]	; (fab0 <_svfprintf_r+0x16e0>)
    f9b4:	ldrb.w	r7, [sp, #111]	; 0x6f
    f9b8:	b.w	ea1e <_svfprintf_r+0x64e>
    f9bc:	movs	r2, #0
    f9be:	movs	r3, #0
    f9c0:	ldrd	r0, r1, [sp, #96]	; 0x60
    f9c4:	bl	bbd8 <__aeabi_dcmpeq>
    f9c8:	cmp	r0, #0
    f9ca:	bne.w	f6ae <_svfprintf_r+0x12de>
    f9ce:	rsb	r5, r5, #1
    f9d2:	str	r5, [sp, #116]	; 0x74
    f9d4:	add	r4, r5
    f9d6:	b.n	f42a <_svfprintf_r+0x105a>
    f9d8:	ldr	r3, [sp, #60]	; 0x3c
    f9da:	ldr	r2, [sp, #72]	; 0x48
    f9dc:	adds	r5, r3, r2
    f9de:	add.w	r3, r5, fp
    f9e2:	str	r3, [sp, #36]	; 0x24
    f9e4:	bic.w	r3, r3, r3, asr #31
    f9e8:	b.n	f48a <_svfprintf_r+0x10ba>
    f9ea:	ldr	r3, [sp, #12]
    f9ec:	ands.w	r3, r3, #1
    f9f0:	bne.w	f81c <_svfprintf_r+0x144c>
    f9f4:	str	r3, [sp, #60]	; 0x3c
    f9f6:	ldr	r3, [sp, #36]	; 0x24
    f9f8:	bic.w	r3, r3, r3, asr #31
    f9fc:	b.n	f48a <_svfprintf_r+0x10ba>
    f9fe:	ldr	r3, [sp, #60]	; 0x3c
    fa00:	ldr	r2, [sp, #36]	; 0x24
    fa02:	rsb	r3, r3, #1
    fa06:	add	r2, r3
    fa08:	mov	r3, r2
    fa0a:	str	r2, [sp, #36]	; 0x24
    fa0c:	b.n	f8ec <_svfprintf_r+0x151c>
    fa0e:	cmp.w	fp, #0
    fa12:	bne.n	fa1a <_svfprintf_r+0x164a>
    fa14:	ldr	r3, [sp, #12]
    fa16:	lsls	r0, r3, #31
    fa18:	bpl.n	fa2a <_svfprintf_r+0x165a>
    fa1a:	ldr	r3, [sp, #72]	; 0x48
    fa1c:	adds	r5, r3, #1
    fa1e:	add.w	r3, r5, fp
    fa22:	str	r3, [sp, #36]	; 0x24
    fa24:	bic.w	r3, r3, r3, asr #31
    fa28:	b.n	f48a <_svfprintf_r+0x10ba>
    fa2a:	movs	r3, #1
    fa2c:	str	r3, [sp, #36]	; 0x24
    fa2e:	b.n	f48a <_svfprintf_r+0x10ba>
    fa30:	ldr	r0, [sp, #40]	; 0x28
    fa32:	ldrb.w	r3, [r8, #1]
    fa36:	ldr	r5, [r0, #0]
    fa38:	adds	r0, #4
    fa3a:	cmp	r5, #0
    fa3c:	str	r0, [sp, #40]	; 0x28
    fa3e:	mov	r8, r4
    fa40:	bge.w	e484 <_svfprintf_r+0xb4>
    fa44:	mov.w	r5, #4294967295
    fa48:	b.w	e484 <_svfprintf_r+0xb4>
    fa4c:	strb.w	r1, [sp, #111]	; 0x6f
    fa50:	b.w	e5e6 <_svfprintf_r+0x216>
    fa54:	add.w	r3, sp, #126	; 0x7e
    fa58:	b.n	f80a <_svfprintf_r+0x143a>
    fa5a:	ldr	r2, [sp, #24]
    fa5c:	movs	r3, #12
    fa5e:	str	r3, [r2, #0]
    fa60:	mov.w	r0, #4294967295
    fa64:	b.w	e5d6 <_svfprintf_r+0x206>
    fa68:	strb.w	r1, [sp, #111]	; 0x6f
    fa6c:	b.w	e6e0 <_svfprintf_r+0x310>
    fa70:	strb.w	r1, [sp, #111]	; 0x6f
    fa74:	b.w	e9ac <_svfprintf_r+0x5dc>
    fa78:	strb.w	r1, [sp, #111]	; 0x6f
    fa7c:	b.w	eb1a <_svfprintf_r+0x74a>
    fa80:	strb.w	r1, [sp, #111]	; 0x6f
    fa84:	b.w	eabe <_svfprintf_r+0x6ee>
    fa88:	strb.w	r1, [sp, #111]	; 0x6f
    fa8c:	b.w	ea6a <_svfprintf_r+0x69a>
    fa90:	strb.w	r1, [sp, #111]	; 0x6f
    fa94:	b.w	ed02 <_svfprintf_r+0x932>
    fa98:	strb.w	r1, [sp, #111]	; 0x6f
    fa9c:	b.w	ecc0 <_svfprintf_r+0x8f0>
    faa0:	strb.w	r1, [sp, #111]	; 0x6f
    faa4:	b.w	ec84 <_svfprintf_r+0x8b4>
    faa8:	.word	0x00014118
    faac:	.word	0x000140ec
    fab0:	.word	0x000140e8

0000fab4 <__ssvfscanf_r>:
    fab4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fab8:	mov	fp, r1
    faba:	ldrsh.w	r1, [r1, #12]
    fabe:	sub.w	sp, sp, #692	; 0x2b4
    fac2:	mov	sl, r0
    fac4:	lsls	r0, r1, #18
    fac6:	mov	r4, r2
    fac8:	str	r3, [sp, #20]
    faca:	bmi.n	fae0 <__ssvfscanf_r+0x2c>
    facc:	ldr.w	r3, [fp, #100]	; 0x64
    fad0:	orr.w	r1, r1, #8192	; 0x2000
    fad4:	bic.w	r3, r3, #8192	; 0x2000
    fad8:	strh.w	r1, [fp, #12]
    fadc:	str.w	r3, [fp, #100]	; 0x64
    fae0:	mov	r6, r4
    fae2:	movs	r3, #0
    fae4:	str	r3, [sp, #28]
    fae6:	str	r3, [sp, #16]
    fae8:	mov	r7, r3
    faea:	str	r3, [sp, #24]
    faec:	ldrb.w	r3, [r6], #1
    faf0:	str	r3, [sp, #68]	; 0x44
    faf2:	cbz	r3, fb50 <__ssvfscanf_r+0x9c>
    faf4:	bl	c48c <__locale_ctype_ptr>
    faf8:	ldr	r2, [sp, #68]	; 0x44
    fafa:	add	r0, r2
    fafc:	ldrb	r3, [r0, #1]
    fafe:	and.w	r3, r3, #8
    fb02:	and.w	r5, r3, #255	; 0xff
    fb06:	cbz	r3, fb5a <__ssvfscanf_r+0xa6>
    fb08:	ldr.w	r3, [fp, #4]
    fb0c:	b.n	fb32 <__ssvfscanf_r+0x7e>
    fb0e:	bl	c48c <__locale_ctype_ptr>
    fb12:	ldr.w	r3, [fp]
    fb16:	ldrb	r2, [r3, #0]
    fb18:	add	r0, r2
    fb1a:	adds	r3, #1
    fb1c:	ldrb	r2, [r0, #1]
    fb1e:	lsls	r1, r2, #28
    fb20:	bpl.n	fb42 <__ssvfscanf_r+0x8e>
    fb22:	ldr.w	r2, [fp, #4]
    fb26:	str.w	r3, [fp]
    fb2a:	subs	r3, r2, #1
    fb2c:	adds	r7, #1
    fb2e:	str.w	r3, [fp, #4]
    fb32:	cmp	r3, #0
    fb34:	bgt.n	fb0e <__ssvfscanf_r+0x5a>
    fb36:	mov	r1, fp
    fb38:	mov	r0, sl
    fb3a:	bl	13598 <__ssrefill_r>
    fb3e:	cmp	r0, #0
    fb40:	beq.n	fb0e <__ssvfscanf_r+0x5a>
    fb42:	mov	r4, r6
    fb44:	mov	r6, r4
    fb46:	ldrb.w	r3, [r6], #1
    fb4a:	str	r3, [sp, #68]	; 0x44
    fb4c:	cmp	r3, #0
    fb4e:	bne.n	faf4 <__ssvfscanf_r+0x40>
    fb50:	ldr	r0, [sp, #24]
    fb52:	add.w	sp, sp, #692	; 0x2b4
    fb56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb5a:	cmp	r2, #37	; 0x25
    fb5c:	bne.w	fc68 <__ssvfscanf_r+0x1b4>
    fb60:	ldrb.w	r8, [r4, #1]
    fb64:	mov	r4, r5
    fb66:	adds	r3, r6, #1
    fb68:	cmp.w	r8, #120	; 0x78
    fb6c:	bhi.w	fff6 <__ssvfscanf_r+0x542>
    fb70:	tbh	[pc, r8, lsl #1]
    fb74:	.word	0x02410092
    fb78:	.word	0x02410241
    fb7c:	.word	0x02410241
    fb80:	.word	0x02410241
    fb84:	.word	0x02410241
    fb88:	.word	0x02410241
    fb8c:	.word	0x02410241
    fb90:	.word	0x02410241
    fb94:	.word	0x02410241
    fb98:	.word	0x02410241
    fb9c:	.word	0x02410241
    fba0:	.word	0x02410241
    fba4:	.word	0x02410241
    fba8:	.word	0x02410241
    fbac:	.word	0x02410241
    fbb0:	.word	0x02410241
    fbb4:	.word	0x02410241
    fbb8:	.word	0x02410241
    fbbc:	.word	0x00790241
    fbc0:	.word	0x02410241
    fbc4:	.word	0x02410241
    fbc8:	.word	0x024101d8
    fbcc:	.word	0x02410241
    fbd0:	.word	0x02410241
    fbd4:	.word	0x01cf01cf
    fbd8:	.word	0x01cf01cf
    fbdc:	.word	0x01cf01cf
    fbe0:	.word	0x01cf01cf
    fbe4:	.word	0x01cf01cf
    fbe8:	.word	0x02410241
    fbec:	.word	0x02410241
    fbf0:	.word	0x02410241
    fbf4:	.word	0x02410241
    fbf8:	.word	0x02410241
    fbfc:	.word	0x01b901c1
    fc00:	.word	0x01b90241
    fc04:	.word	0x02410241
    fc08:	.word	0x02410241
    fc0c:	.word	0x024101b3
    fc10:	.word	0x01a30241
    fc14:	.word	0x02410241
    fc18:	.word	0x02410241
    fc1c:	.word	0x02410241
    fc20:	.word	0x02410241
    fc24:	.word	0x02410193
    fc28:	.word	0x01510241
    fc2c:	.word	0x02410241
    fc30:	.word	0x02410241
    fc34:	.word	0x02410241
    fc38:	.word	0x01220241
    fc3c:	.word	0x01b90188
    fc40:	.word	0x01b901b9
    fc44:	.word	0x0098011c
    fc48:	.word	0x02410241
    fc4c:	.word	0x024100d5
    fc50:	.word	0x0101010d
    fc54:	.word	0x024100f3
    fc58:	.word	0x00eb0241
    fc5c:	.word	0x00df0241
    fc60:	.word	0x02410241
    fc64:	.short	0x0193
    fc66:	mov	r6, r3
    fc68:	ldr.w	r3, [fp, #4]
    fc6c:	cmp	r3, #0
    fc6e:	ble.w	10118 <__ssvfscanf_r+0x664>
    fc72:	ldr.w	r3, [fp]
    fc76:	ldrb.w	r2, [r6, #-1]
    fc7a:	ldrb	r1, [r3, #0]
    fc7c:	cmp	r1, r2
    fc7e:	bne.w	fb50 <__ssvfscanf_r+0x9c>
    fc82:	ldr.w	r2, [fp, #4]
    fc86:	adds	r3, #1
    fc88:	subs	r2, #1
    fc8a:	str.w	r3, [fp]
    fc8e:	adds	r7, #1
    fc90:	str.w	r2, [fp, #4]
    fc94:	mov	r4, r6
    fc96:	b.n	fb44 <__ssvfscanf_r+0x90>
    fc98:	mov.w	r0, #4294967295
    fc9c:	add.w	sp, sp, #692	; 0x2b4
    fca0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fca4:	str	r3, [sp, #12]
    fca6:	ldr.w	r3, [fp, #4]
    fcaa:	cmp	r3, #0
    fcac:	ble.w	10176 <__ssvfscanf_r+0x6c2>
    fcb0:	ldr	r3, [pc, #736]	; (ff94 <__ssvfscanf_r+0x4e0>)
    fcb2:	str	r3, [sp, #28]
    fcb4:	movs	r3, #0
    fcb6:	str	r3, [sp, #16]
    fcb8:	movs	r6, #3
    fcba:	b.n	fcc0 <__ssvfscanf_r+0x20c>
    fcbc:	str.w	lr, [fp]
    fcc0:	bl	c48c <__locale_ctype_ptr>
    fcc4:	ldr.w	r2, [fp]
    fcc8:	ldrb	r1, [r2, #0]
    fcca:	add	r0, r1
    fccc:	add.w	lr, r2, #1
    fcd0:	ldrb	r3, [r0, #1]
    fcd2:	and.w	r3, r3, #8
    fcd6:	and.w	r8, r3, #255	; 0xff
    fcda:	cmp	r3, #0
    fcdc:	beq.w	101de <__ssvfscanf_r+0x72a>
    fce0:	ldr.w	r3, [fp, #4]
    fce4:	subs	r3, #1
    fce6:	cmp	r3, #0
    fce8:	add.w	r7, r7, #1
    fcec:	str.w	r3, [fp, #4]
    fcf0:	bgt.n	fcbc <__ssvfscanf_r+0x208>
    fcf2:	mov	r1, fp
    fcf4:	mov	r0, sl
    fcf6:	bl	13598 <__ssrefill_r>
    fcfa:	cmp	r0, #0
    fcfc:	beq.n	fcc0 <__ssvfscanf_r+0x20c>
    fcfe:	ldr	r2, [sp, #24]
    fd00:	cmp	r2, #0
    fd02:	beq.n	fc98 <__ssvfscanf_r+0x1e4>
    fd04:	ldrh.w	r3, [fp, #12]
    fd08:	tst.w	r3, #64	; 0x40
    fd0c:	mov	r3, r2
    fd0e:	it	ne
    fd10:	movne.w	r3, #4294967295
    fd14:	mov	r0, r3
    fd16:	add.w	sp, sp, #692	; 0x2b4
    fd1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd1e:	ldrb.w	r8, [r6, #1]
    fd22:	cmp.w	r8, #108	; 0x6c
    fd26:	beq.w	1012e <__ssvfscanf_r+0x67a>
    fd2a:	orr.w	r5, r5, #1
    fd2e:	mov	r6, r3
    fd30:	b.n	fb66 <__ssvfscanf_r+0xb2>
    fd32:	str	r3, [sp, #12]
    fd34:	ldr.w	r3, [fp, #4]
    fd38:	cmp	r3, #0
    fd3a:	ble.w	101ce <__ssvfscanf_r+0x71a>
    fd3e:	ldr	r3, [pc, #600]	; (ff98 <__ssvfscanf_r+0x4e4>)
    fd40:	str	r3, [sp, #28]
    fd42:	movs	r3, #10
    fd44:	str	r3, [sp, #16]
    fd46:	movs	r6, #3
    fd48:	b.n	fcc0 <__ssvfscanf_r+0x20c>
    fd4a:	str	r3, [sp, #12]
    fd4c:	ldr.w	r3, [fp, #4]
    fd50:	cmp	r3, #0
    fd52:	ble.w	101be <__ssvfscanf_r+0x70a>
    fd56:	movs	r6, #2
    fd58:	b.n	fcc0 <__ssvfscanf_r+0x20c>
    fd5a:	str	r3, [sp, #12]
    fd5c:	ldr.w	r3, [fp, #4]
    fd60:	cmp	r3, #0
    fd62:	orr.w	r5, r5, #544	; 0x220
    fd66:	ble.w	feaa <__ssvfscanf_r+0x3f6>
    fd6a:	ldr	r3, [pc, #556]	; (ff98 <__ssvfscanf_r+0x4e4>)
    fd6c:	str	r3, [sp, #28]
    fd6e:	movs	r3, #16
    fd70:	str	r3, [sp, #16]
    fd72:	movs	r6, #3
    fd74:	b.n	fcc0 <__ssvfscanf_r+0x20c>
    fd76:	str	r3, [sp, #12]
    fd78:	ldr.w	r3, [fp, #4]
    fd7c:	cmp	r3, #0
    fd7e:	ble.w	feca <__ssvfscanf_r+0x416>
    fd82:	ldr	r3, [pc, #532]	; (ff98 <__ssvfscanf_r+0x4e4>)
    fd84:	str	r3, [sp, #28]
    fd86:	movs	r3, #8
    fd88:	str	r3, [sp, #16]
    fd8a:	movs	r6, #3
    fd8c:	b.n	fcc0 <__ssvfscanf_r+0x20c>
    fd8e:	lsls	r2, r5, #27
    fd90:	mov	r6, r3
    fd92:	str	r3, [sp, #12]
    fd94:	bmi.w	ff7c <__ssvfscanf_r+0x4c8>
    fd98:	lsls	r3, r5, #29
    fd9a:	bpl.w	10146 <__ssvfscanf_r+0x692>
    fd9e:	ldr	r1, [sp, #20]
    fda0:	ldr	r3, [r1, #0]
    fda2:	strh	r7, [r3, #0]
    fda4:	adds	r3, r1, #4
    fda6:	str	r3, [sp, #20]
    fda8:	mov	r4, r6
    fdaa:	b.n	fb44 <__ssvfscanf_r+0x90>
    fdac:	ldrb.w	r8, [r6, #1]
    fdb0:	orr.w	r5, r5, #4
    fdb4:	mov	r6, r3
    fdb6:	b.n	fb66 <__ssvfscanf_r+0xb2>
    fdb8:	str	r3, [sp, #12]
    fdba:	ldr.w	r3, [fp, #4]
    fdbe:	cmp	r3, #0
    fdc0:	ble.w	1019e <__ssvfscanf_r+0x6ea>
    fdc4:	cmp	r4, #0
    fdc6:	it	eq
    fdc8:	moveq	r4, #1
    fdca:	ands.w	r3, r5, #1
    fdce:	bne.w	10016 <__ssvfscanf_r+0x562>
    fdd2:	lsls	r2, r5, #27
    fdd4:	bpl.w	100ee <__ssvfscanf_r+0x63a>
    fdd8:	mov	r5, r3
    fdda:	b.n	fdf0 <__ssvfscanf_r+0x33c>
    fddc:	add	r3, r2
    fdde:	str.w	r3, [fp]
    fde2:	add	r5, r2
    fde4:	subs	r4, r4, r2
    fde6:	bl	13598 <__ssrefill_r>
    fdea:	cmp	r0, #0
    fdec:	bne.w	100e6 <__ssvfscanf_r+0x632>
    fdf0:	ldr.w	r2, [fp, #4]
    fdf4:	ldr.w	r3, [fp]
    fdf8:	cmp	r2, r4
    fdfa:	mov	r1, fp
    fdfc:	mov	r0, sl
    fdfe:	blt.n	fddc <__ssvfscanf_r+0x328>
    fe00:	subs	r2, r2, r4
    fe02:	add	r3, r4
    fe04:	str.w	r2, [fp, #4]
    fe08:	add	r5, r4
    fe0a:	str.w	r3, [fp]
    fe0e:	ldr	r6, [sp, #12]
    fe10:	add	r7, r5
    fe12:	mov	r4, r6
    fe14:	b.n	fb44 <__ssvfscanf_r+0x90>
    fe16:	add.w	r9, sp, #80	; 0x50
    fe1a:	mov	r1, r3
    fe1c:	mov	r0, r9
    fe1e:	bl	12e28 <__sccl>
    fe22:	ldr.w	r3, [fp, #4]
    fe26:	cmp	r3, #0
    fe28:	mov	r6, r0
    fe2a:	ble.w	1018e <__ssvfscanf_r+0x6da>
    fe2e:	cmp	r4, #0
    fe30:	ldr.w	r2, [fp]
    fe34:	it	eq
    fe36:	moveq.w	r4, #4294967295
    fe3a:	lsls	r3, r5, #27
    fe3c:	ldrb	r1, [r2, #0]
    fe3e:	bpl.w	ff82 <__ssvfscanf_r+0x4ce>
    fe42:	mov	r8, r4
    fe44:	movs	r5, #0
    fe46:	b.n	fe4a <__ssvfscanf_r+0x396>
    fe48:	ldrb	r1, [r2, #0]
    fe4a:	ldrb.w	r3, [r9, r1]
    fe4e:	adds	r2, #1
    fe50:	cmp	r3, #0
    fe52:	beq.w	100dc <__ssvfscanf_r+0x628>
    fe56:	ldr.w	r3, [fp, #4]
    fe5a:	str.w	r2, [fp]
    fe5e:	adds	r5, #1
    fe60:	subs	r3, #1
    fe62:	cmp	r5, r4
    fe64:	str.w	r3, [fp, #4]
    fe68:	beq.w	100d6 <__ssvfscanf_r+0x622>
    fe6c:	cmp	r3, #0
    fe6e:	bgt.n	fe48 <__ssvfscanf_r+0x394>
    fe70:	mov	r1, fp
    fe72:	mov	r0, sl
    fe74:	bl	13598 <__ssrefill_r>
    fe78:	cmp	r0, #0
    fe7a:	bne.w	100d4 <__ssvfscanf_r+0x620>
    fe7e:	ldr.w	r2, [fp]
    fe82:	b.n	fe48 <__ssvfscanf_r+0x394>
    fe84:	str	r3, [sp, #12]
    fe86:	ldr.w	r3, [fp, #4]
    fe8a:	cmp	r3, #0
    fe8c:	ble.n	ff04 <__ssvfscanf_r+0x450>
    fe8e:	ldr	r3, [pc, #260]	; (ff94 <__ssvfscanf_r+0x4e0>)
    fe90:	str	r3, [sp, #28]
    fe92:	movs	r3, #10
    fe94:	str	r3, [sp, #16]
    fe96:	movs	r6, #3
    fe98:	b.n	fcc0 <__ssvfscanf_r+0x20c>
    fe9a:	str	r3, [sp, #12]
    fe9c:	ldr.w	r3, [fp, #4]
    fea0:	cmp	r3, #0
    fea2:	orr.w	r5, r5, #512	; 0x200
    fea6:	bgt.w	fd6a <__ssvfscanf_r+0x2b6>
    feaa:	mov	r1, fp
    feac:	mov	r0, sl
    feae:	bl	13598 <__ssrefill_r>
    feb2:	cmp	r0, #0
    feb4:	beq.w	fd6a <__ssvfscanf_r+0x2b6>
    feb8:	b.n	fcfe <__ssvfscanf_r+0x24a>
    feba:	str	r3, [sp, #12]
    febc:	ldr.w	r3, [fp, #4]
    fec0:	cmp	r3, #0
    fec2:	orr.w	r5, r5, #1
    fec6:	bgt.w	fd82 <__ssvfscanf_r+0x2ce>
    feca:	mov	r1, fp
    fecc:	mov	r0, sl
    fece:	bl	13598 <__ssrefill_r>
    fed2:	cmp	r0, #0
    fed4:	beq.w	fd82 <__ssvfscanf_r+0x2ce>
    fed8:	b.n	fcfe <__ssvfscanf_r+0x24a>
    feda:	ldrb.w	r8, [r6, #1]
    fede:	orr.w	r5, r5, #2
    fee2:	mov	r6, r3
    fee4:	b.n	fb66 <__ssvfscanf_r+0xb2>
    fee6:	str	r3, [sp, #12]
    fee8:	ldr.w	r3, [fp, #4]
    feec:	cmp	r3, #0
    feee:	ble.w	101ae <__ssvfscanf_r+0x6fa>
    fef2:	movs	r6, #4
    fef4:	b.n	fcc0 <__ssvfscanf_r+0x20c>
    fef6:	str	r3, [sp, #12]
    fef8:	ldr.w	r3, [fp, #4]
    fefc:	cmp	r3, #0
    fefe:	orr.w	r5, r5, #1
    ff02:	bgt.n	fe8e <__ssvfscanf_r+0x3da>
    ff04:	mov	r1, fp
    ff06:	mov	r0, sl
    ff08:	bl	13598 <__ssrefill_r>
    ff0c:	cmp	r0, #0
    ff0e:	beq.n	fe8e <__ssvfscanf_r+0x3da>
    ff10:	b.n	fcfe <__ssvfscanf_r+0x24a>
    ff12:	add.w	r4, r4, r4, lsl #2
    ff16:	add.w	r4, r8, r4, lsl #1
    ff1a:	subs	r4, #48	; 0x30
    ff1c:	ldrb.w	r8, [r6, #1]
    ff20:	mov	r6, r3
    ff22:	b.n	fb66 <__ssvfscanf_r+0xb2>
    ff24:	ldrb.w	r8, [r6, #1]
    ff28:	orr.w	r5, r5, #16
    ff2c:	mov	r6, r3
    ff2e:	b.n	fb66 <__ssvfscanf_r+0xb2>
    ff30:	add	r3, sp, #72	; 0x48
    ff32:	mov	r1, r8
    ff34:	mov	r0, r3
    ff36:	movs	r2, #8
    ff38:	str	r3, [sp, #32]
    ff3a:	bl	cb88 <memset>
    ff3e:	ands.w	r9, r5, #16
    ff42:	bne.w	10808 <__ssvfscanf_r+0xd54>
    ff46:	ldr	r2, [sp, #20]
    ff48:	mov	r3, r2
    ff4a:	adds	r3, #4
    ff4c:	ldr.w	r8, [r2]
    ff50:	str	r3, [sp, #20]
    ff52:	movs	r6, #0
    ff54:	bl	c48c <__locale_ctype_ptr>
    ff58:	ldr.w	r3, [fp]
    ff5c:	ldrb	r3, [r3, #0]
    ff5e:	add	r0, r3
    ff60:	ldrb	r3, [r0, #1]
    ff62:	lsls	r0, r3, #28
    ff64:	bmi.n	ff6c <__ssvfscanf_r+0x4b8>
    ff66:	cmp	r4, #0
    ff68:	bne.w	1076c <__ssvfscanf_r+0xcb8>
    ff6c:	cmp.w	r9, #0
    ff70:	bne.n	ff7c <__ssvfscanf_r+0x4c8>
    ff72:	str.w	r9, [r8]
    ff76:	ldr	r3, [sp, #24]
    ff78:	adds	r3, #1
    ff7a:	str	r3, [sp, #24]
    ff7c:	ldr	r6, [sp, #12]
    ff7e:	mov	r4, r6
    ff80:	b.n	fb44 <__ssvfscanf_r+0x90>
    ff82:	ldr	r0, [sp, #20]
    ff84:	ldr	r5, [r0, #0]
    ff86:	mov	r3, r0
    ff88:	adds	r3, #4
    ff8a:	add.w	r8, r5, r4
    ff8e:	str	r3, [sp, #12]
    ff90:	mov	r4, r5
    ff92:	b.n	ffa2 <__ssvfscanf_r+0x4ee>
    ff94:	.word	0x0000e3a9
    ff98:	.word	0x000131e1
    ff9c:	ldr.w	r2, [fp]
    ffa0:	ldrb	r1, [r2, #0]
    ffa2:	ldrb.w	r3, [r9, r1]
    ffa6:	adds	r0, r2, #1
    ffa8:	cbz	r3, ffdc <__ssvfscanf_r+0x528>
    ffaa:	ldr.w	r3, [fp, #4]
    ffae:	str.w	r0, [fp]
    ffb2:	subs	r3, #1
    ffb4:	str.w	r3, [fp, #4]
    ffb8:	ldrb	r3, [r2, #0]
    ffba:	strb.w	r3, [r4], #1
    ffbe:	cmp	r8, r4
    ffc0:	beq.n	ffdc <__ssvfscanf_r+0x528>
    ffc2:	ldr.w	r3, [fp, #4]
    ffc6:	cmp	r3, #0
    ffc8:	bgt.n	ff9c <__ssvfscanf_r+0x4e8>
    ffca:	mov	r1, fp
    ffcc:	mov	r0, sl
    ffce:	bl	13598 <__ssrefill_r>
    ffd2:	cmp	r0, #0
    ffd4:	beq.n	ff9c <__ssvfscanf_r+0x4e8>
    ffd6:	cmp	r5, r4
    ffd8:	beq.w	fcfe <__ssvfscanf_r+0x24a>
    ffdc:	subs	r5, r4, r5
    ffde:	beq.w	fb50 <__ssvfscanf_r+0x9c>
    ffe2:	ldr	r2, [sp, #24]
    ffe4:	adds	r2, #1
    ffe6:	movs	r3, #0
    ffe8:	str	r2, [sp, #24]
    ffea:	ldr	r2, [sp, #12]
    ffec:	str	r2, [sp, #20]
    ffee:	strb	r3, [r4, #0]
    fff0:	add	r7, r5
    fff2:	mov	r4, r6
    fff4:	b.n	fb44 <__ssvfscanf_r+0x90>
    fff6:	str	r3, [sp, #12]
    fff8:	bl	c48c <__locale_ctype_ptr>
    fffc:	add	r0, r8
    fffe:	ldrb	r3, [r0, #1]
   10000:	and.w	r3, r3, #3
   10004:	cmp	r3, #1
   10006:	ldr.w	r3, [fp, #4]
   1000a:	beq.w	1013a <__ssvfscanf_r+0x686>
   1000e:	cmp	r3, #0
   10010:	bgt.w	fe8e <__ssvfscanf_r+0x3da>
   10014:	b.n	ff04 <__ssvfscanf_r+0x450>
   10016:	add	r3, sp, #72	; 0x48
   10018:	mov	r0, r3
   1001a:	movs	r2, #8
   1001c:	movs	r1, #0
   1001e:	str	r3, [sp, #32]
   10020:	bl	cb88 <memset>
   10024:	ands.w	r3, r5, #16
   10028:	str	r3, [sp, #40]	; 0x28
   1002a:	bne.n	10128 <__ssvfscanf_r+0x674>
   1002c:	ldr	r2, [sp, #20]
   1002e:	mov	r3, r2
   10030:	adds	r3, #4
   10032:	ldr.w	r9, [r2]
   10036:	str	r3, [sp, #20]
   10038:	movs	r5, #0
   1003a:	add.w	r8, sp, #336	; 0x150
   1003e:	bl	c468 <__locale_mb_cur_max>
   10042:	cmp	r0, r5
   10044:	beq.w	fcfe <__ssvfscanf_r+0x24a>
   10048:	ldmia.w	fp, {r2, r3}
   1004c:	ldrb.w	r0, [r2], #1
   10050:	str.w	r2, [fp]
   10054:	subs	r3, #1
   10056:	ldr	r2, [sp, #32]
   10058:	str	r2, [sp, #0]
   1005a:	adds	r6, r5, #1
   1005c:	str.w	r3, [fp, #4]
   10060:	mov	r1, r9
   10062:	strb.w	r0, [r8, r5]
   10066:	mov	r3, r6
   10068:	mov	r2, r8
   1006a:	mov	r0, sl
   1006c:	bl	12444 <_mbrtowc_r>
   10070:	adds	r1, r0, #1
   10072:	beq.w	fcfe <__ssvfscanf_r+0x24a>
   10076:	cbnz	r0, 100a2 <__ssvfscanf_r+0x5ee>
   10078:	ldr	r3, [sp, #40]	; 0x28
   1007a:	cbnz	r3, 100c2 <__ssvfscanf_r+0x60e>
   1007c:	str.w	r3, [r9]
   10080:	add	r7, r6
   10082:	subs	r4, #1
   10084:	add.w	r9, r9, #4
   10088:	ldr.w	r3, [fp, #4]
   1008c:	cmp	r3, #0
   1008e:	mov.w	r5, #0
   10092:	ble.n	100b0 <__ssvfscanf_r+0x5fc>
   10094:	cmp	r4, #0
   10096:	bne.n	1003e <__ssvfscanf_r+0x58a>
   10098:	ldr	r3, [sp, #40]	; 0x28
   1009a:	cmp	r3, #0
   1009c:	beq.w	ff76 <__ssvfscanf_r+0x4c2>
   100a0:	b.n	ff7c <__ssvfscanf_r+0x4c8>
   100a2:	adds	r0, #2
   100a4:	bne.n	100c8 <__ssvfscanf_r+0x614>
   100a6:	ldr.w	r3, [fp, #4]
   100aa:	cmp	r3, #0
   100ac:	mov	r5, r6
   100ae:	bgt.n	1003e <__ssvfscanf_r+0x58a>
   100b0:	mov	r1, fp
   100b2:	mov	r0, sl
   100b4:	bl	13598 <__ssrefill_r>
   100b8:	cmp	r0, #0
   100ba:	beq.n	10094 <__ssvfscanf_r+0x5e0>
   100bc:	cmp	r5, #0
   100be:	beq.n	10098 <__ssvfscanf_r+0x5e4>
   100c0:	b.n	fcfe <__ssvfscanf_r+0x24a>
   100c2:	add	r7, r6
   100c4:	subs	r4, #1
   100c6:	b.n	10088 <__ssvfscanf_r+0x5d4>
   100c8:	ldr	r3, [sp, #40]	; 0x28
   100ca:	add	r7, r6
   100cc:	subs	r4, #1
   100ce:	cmp	r3, #0
   100d0:	bne.n	10088 <__ssvfscanf_r+0x5d4>
   100d2:	b.n	10084 <__ssvfscanf_r+0x5d0>
   100d4:	mov	r8, r5
   100d6:	mov	r5, r8
   100d8:	add	r7, r5
   100da:	b.n	fff2 <__ssvfscanf_r+0x53e>
   100dc:	cmp	r5, #0
   100de:	beq.w	fb50 <__ssvfscanf_r+0x9c>
   100e2:	add	r7, r5
   100e4:	b.n	fff2 <__ssvfscanf_r+0x53e>
   100e6:	cmp	r5, #0
   100e8:	bne.w	fe0e <__ssvfscanf_r+0x35a>
   100ec:	b.n	fcfe <__ssvfscanf_r+0x24a>
   100ee:	ldr	r5, [sp, #20]
   100f0:	mov	r3, r4
   100f2:	ldr	r1, [r5, #0]
   100f4:	str.w	fp, [sp]
   100f8:	movs	r2, #1
   100fa:	mov	r0, sl
   100fc:	bl	135d4 <_sfread_r>
   10100:	adds	r6, r5, #4
   10102:	cmp	r0, #0
   10104:	beq.w	fcfe <__ssvfscanf_r+0x24a>
   10108:	ldr	r3, [sp, #24]
   1010a:	str	r6, [sp, #20]
   1010c:	ldr	r6, [sp, #12]
   1010e:	adds	r3, #1
   10110:	add	r7, r0
   10112:	str	r3, [sp, #24]
   10114:	mov	r4, r6
   10116:	b.n	fb44 <__ssvfscanf_r+0x90>
   10118:	mov	r1, fp
   1011a:	mov	r0, sl
   1011c:	bl	13598 <__ssrefill_r>
   10120:	cmp	r0, #0
   10122:	beq.w	fc72 <__ssvfscanf_r+0x1be>
   10126:	b.n	fcfe <__ssvfscanf_r+0x24a>
   10128:	mov.w	r9, #0
   1012c:	b.n	10038 <__ssvfscanf_r+0x584>
   1012e:	ldrb.w	r8, [r6, #2]
   10132:	orr.w	r5, r5, #2
   10136:	adds	r6, #2
   10138:	b.n	fb66 <__ssvfscanf_r+0xb2>
   1013a:	cmp	r3, #0
   1013c:	orr.w	r5, r5, #1
   10140:	bgt.w	fe8e <__ssvfscanf_r+0x3da>
   10144:	b.n	ff04 <__ssvfscanf_r+0x450>
   10146:	lsls	r4, r5, #31
   10148:	bmi.n	10164 <__ssvfscanf_r+0x6b0>
   1014a:	lsls	r0, r5, #30
   1014c:	bpl.n	10164 <__ssvfscanf_r+0x6b0>
   1014e:	ldr	r2, [sp, #20]
   10150:	ldr	r6, [sp, #12]
   10152:	ldr	r3, [r2, #0]
   10154:	mov	r0, r7
   10156:	asrs	r1, r7, #31
   10158:	adds	r2, #4
   1015a:	str	r2, [sp, #20]
   1015c:	strd	r0, r1, [r3]
   10160:	mov	r4, r6
   10162:	b.n	fb44 <__ssvfscanf_r+0x90>
   10164:	ldr	r2, [sp, #20]
   10166:	ldr	r6, [sp, #12]
   10168:	ldr	r3, [r2, #0]
   1016a:	str	r7, [r3, #0]
   1016c:	mov	r3, r2
   1016e:	adds	r3, #4
   10170:	str	r3, [sp, #20]
   10172:	mov	r4, r6
   10174:	b.n	fb44 <__ssvfscanf_r+0x90>
   10176:	mov	r1, fp
   10178:	mov	r0, sl
   1017a:	bl	13598 <__ssrefill_r>
   1017e:	cmp	r0, #0
   10180:	bne.w	fcfe <__ssvfscanf_r+0x24a>
   10184:	ldr	r3, [pc, #504]	; (10380 <__ssvfscanf_r+0x8cc>)
   10186:	str	r0, [sp, #16]
   10188:	str	r3, [sp, #28]
   1018a:	movs	r6, #3
   1018c:	b.n	fcc0 <__ssvfscanf_r+0x20c>
   1018e:	mov	r1, fp
   10190:	mov	r0, sl
   10192:	bl	13598 <__ssrefill_r>
   10196:	cmp	r0, #0
   10198:	beq.w	fe2e <__ssvfscanf_r+0x37a>
   1019c:	b.n	fcfe <__ssvfscanf_r+0x24a>
   1019e:	mov	r1, fp
   101a0:	mov	r0, sl
   101a2:	bl	13598 <__ssrefill_r>
   101a6:	cmp	r0, #0
   101a8:	beq.w	fdc4 <__ssvfscanf_r+0x310>
   101ac:	b.n	fcfe <__ssvfscanf_r+0x24a>
   101ae:	mov	r1, fp
   101b0:	mov	r0, sl
   101b2:	bl	13598 <__ssrefill_r>
   101b6:	cmp	r0, #0
   101b8:	beq.w	fef2 <__ssvfscanf_r+0x43e>
   101bc:	b.n	fcfe <__ssvfscanf_r+0x24a>
   101be:	mov	r1, fp
   101c0:	mov	r0, sl
   101c2:	bl	13598 <__ssrefill_r>
   101c6:	cmp	r0, #0
   101c8:	beq.w	fd56 <__ssvfscanf_r+0x2a2>
   101cc:	b.n	fcfe <__ssvfscanf_r+0x24a>
   101ce:	mov	r1, fp
   101d0:	mov	r0, sl
   101d2:	bl	13598 <__ssrefill_r>
   101d6:	cmp	r0, #0
   101d8:	beq.w	fd3e <__ssvfscanf_r+0x28a>
   101dc:	b.n	fcfe <__ssvfscanf_r+0x24a>
   101de:	cmp	r6, #3
   101e0:	beq.w	10522 <__ssvfscanf_r+0xa6e>
   101e4:	cmp	r6, #4
   101e6:	bne.w	10664 <__ssvfscanf_r+0xbb0>
   101ea:	mov	r0, sl
   101ec:	bl	12428 <_localeconv_r>
   101f0:	subs	r3, r4, #1
   101f2:	ldr	r2, [r0, #0]
   101f4:	str	r2, [sp, #48]	; 0x30
   101f6:	cmp.w	r3, #348	; 0x15c
   101fa:	bls.w	106cc <__ssvfscanf_r+0xc18>
   101fe:	mvn.w	r1, #348	; 0x15c
   10202:	adds	r3, r4, r1
   10204:	str	r3, [sp, #56]	; 0x38
   10206:	movw	r4, #349	; 0x15d
   1020a:	add	r3, sp, #336	; 0x150
   1020c:	mov.w	r8, #0
   10210:	mov	r2, r3
   10212:	str	r3, [sp, #40]	; 0x28
   10214:	orr.w	r5, r5, #1920	; 0x780
   10218:	mov	r3, r8
   1021a:	str.w	r8, [sp, #60]	; 0x3c
   1021e:	str.w	r8, [sp, #52]	; 0x34
   10222:	mov	r6, r8
   10224:	str.w	r8, [sp, #44]	; 0x2c
   10228:	mov	r9, r2
   1022a:	ldr.w	r0, [fp]
   1022e:	ldrb	r1, [r0, #0]
   10230:	sub.w	lr, r1, #43	; 0x2b
   10234:	cmp.w	lr, #78	; 0x4e
   10238:	bhi.w	104d2 <__ssvfscanf_r+0xa1e>
   1023c:	tbh	[pc, lr, lsl #1]
   10240:	.word	0x0149007a
   10244:	.word	0x0149007a
   10248:	.word	0x006e0149
   1024c:	.word	0x004f004f
   10250:	.word	0x004f004f
   10254:	.word	0x004f004f
   10258:	.word	0x004f004f
   1025c:	.word	0x0149004f
   10260:	.word	0x01490149
   10264:	.word	0x01490149
   10268:	.word	0x01490149
   1026c:	.word	0x01490144
   10270:	.word	0x01490149
   10274:	.word	0x0125012c
   10278:	.word	0x01490149
   1027c:	.word	0x014900a2
   10280:	.word	0x01490149
   10284:	.word	0x008b0149
   10288:	.word	0x01490149
   1028c:	.word	0x01490149
   10290:	.word	0x00850149
   10294:	.word	0x01490149
   10298:	.word	0x01490149
   1029c:	.word	0x0149007f
   102a0:	.word	0x01490149
   102a4:	.word	0x01490149
   102a8:	.word	0x01490149
   102ac:	.word	0x01490144
   102b0:	.word	0x01490149
   102b4:	.word	0x0125012c
   102b8:	.word	0x01490149
   102bc:	.word	0x014900a2
   102c0:	.word	0x01490149
   102c4:	.word	0x008b0149
   102c8:	.word	0x01490149
   102cc:	.word	0x01490149
   102d0:	.word	0x00850149
   102d4:	.word	0x01490149
   102d8:	.word	0x01490149
   102dc:	.short	0x007f
   102de:	cmn.w	r3, r8
   102e2:	bne.n	10312 <__ssvfscanf_r+0x85e>
   102e4:	bic.w	r5, r5, #384	; 0x180
   102e8:	strb.w	r1, [r9]
   102ec:	add.w	r9, r9, #1
   102f0:	ldr.w	r1, [fp, #4]
   102f4:	subs	r1, #1
   102f6:	cmp	r1, #0
   102f8:	add.w	r4, r4, #4294967295
   102fc:	add.w	r7, r7, #1
   10300:	str.w	r1, [fp, #4]
   10304:	ble.w	104ec <__ssvfscanf_r+0xa38>
   10308:	adds	r0, #1
   1030a:	str.w	r0, [fp]
   1030e:	cmp	r4, #0
   10310:	bne.n	1022a <__ssvfscanf_r+0x776>
   10312:	cmp	r6, #0
   10314:	beq.n	1039c <__ssvfscanf_r+0x8e8>
   10316:	bic.w	r5, r5, #256	; 0x100
   1031a:	b.n	1039c <__ssvfscanf_r+0x8e8>
   1031c:	lsls	r2, r5, #23
   1031e:	bpl.n	102de <__ssvfscanf_r+0x82a>
   10320:	ldr	r2, [sp, #56]	; 0x38
   10322:	bic.w	r5, r5, #128	; 0x80
   10326:	adds	r6, #1
   10328:	cmp	r2, #0
   1032a:	beq.n	102f0 <__ssvfscanf_r+0x83c>
   1032c:	subs	r2, #1
   1032e:	str	r2, [sp, #56]	; 0x38
   10330:	adds	r4, #1
   10332:	b.n	102f0 <__ssvfscanf_r+0x83c>
   10334:	lsls	r2, r5, #24
   10336:	bpl.n	10312 <__ssvfscanf_r+0x85e>
   10338:	bic.w	r5, r5, #128	; 0x80
   1033c:	b.n	102e8 <__ssvfscanf_r+0x834>
   1033e:	cmp.w	r8, #7
   10342:	bne.n	10312 <__ssvfscanf_r+0x85e>
   10344:	mov.w	r8, #8
   10348:	b.n	102e8 <__ssvfscanf_r+0x834>
   1034a:	cmp.w	r8, #6
   1034e:	bne.n	10312 <__ssvfscanf_r+0x85e>
   10350:	mov.w	r8, #7
   10354:	b.n	102e8 <__ssvfscanf_r+0x834>
   10356:	cmp	r3, #0
   10358:	bne.w	10518 <__ssvfscanf_r+0xa64>
   1035c:	cbnz	r6, 1036a <__ssvfscanf_r+0x8b6>
   1035e:	and.w	lr, r5, #1792	; 0x700
   10362:	cmp.w	lr, #1792	; 0x700
   10366:	beq.w	107f0 <__ssvfscanf_r+0xd3c>
   1036a:	cmp.w	r8, #1
   1036e:	beq.n	10376 <__ssvfscanf_r+0x8c2>
   10370:	cmp.w	r8, #4
   10374:	bne.n	10312 <__ssvfscanf_r+0x85e>
   10376:	add.w	r8, r8, #1
   1037a:	uxtb.w	r8, r8
   1037e:	b.n	102e8 <__ssvfscanf_r+0x834>
   10380:	.word	0x0000e3a9
   10384:	cmp.w	r8, #0
   10388:	bne.w	10506 <__ssvfscanf_r+0xa52>
   1038c:	cmp	r6, #0
   1038e:	bne.n	10316 <__ssvfscanf_r+0x862>
   10390:	and.w	lr, r5, #1792	; 0x700
   10394:	cmp.w	lr, #1792	; 0x700
   10398:	beq.w	10810 <__ssvfscanf_r+0xd5c>
   1039c:	subs	r3, #1
   1039e:	cmp	r3, #1
   103a0:	bls.w	108a6 <__ssvfscanf_r+0xdf2>
   103a4:	add.w	r3, r8, #4294967295
   103a8:	cmp	r3, #6
   103aa:	bhi.n	103da <__ssvfscanf_r+0x926>
   103ac:	cmp.w	r8, #2
   103b0:	bls.w	108f4 <__ssvfscanf_r+0xe40>
   103b4:	cmp.w	r8, #3
   103b8:	beq.n	103da <__ssvfscanf_r+0x926>
   103ba:	sub.w	r4, r8, #4
   103be:	uxtb	r4, r4
   103c0:	mvn.w	r8, r4
   103c4:	add	r8, r9
   103c6:	ldrb.w	r1, [r9, #-1]!
   103ca:	mov	r2, fp
   103cc:	mov	r0, sl
   103ce:	bl	13514 <_sungetc_r>
   103d2:	cmp	r8, r9
   103d4:	bne.n	103c6 <__ssvfscanf_r+0x912>
   103d6:	subs	r7, #1
   103d8:	subs	r7, r7, r4
   103da:	lsls	r1, r5, #23
   103dc:	bpl.n	10418 <__ssvfscanf_r+0x964>
   103de:	lsls	r2, r5, #21
   103e0:	bmi.w	108ca <__ssvfscanf_r+0xe16>
   103e4:	ldrb.w	r1, [r9, #-1]
   103e8:	cmp	r1, #101	; 0x65
   103ea:	add.w	r4, r9, #4294967295
   103ee:	add.w	r8, r7, #4294967295
   103f2:	beq.n	1040c <__ssvfscanf_r+0x958>
   103f4:	cmp	r1, #69	; 0x45
   103f6:	beq.n	1040c <__ssvfscanf_r+0x958>
   103f8:	mov	r2, fp
   103fa:	mov	r0, sl
   103fc:	bl	13514 <_sungetc_r>
   10400:	ldrb.w	r1, [r9, #-2]
   10404:	sub.w	r8, r7, #2
   10408:	sub.w	r4, r9, #2
   1040c:	mov	r2, fp
   1040e:	mov	r0, sl
   10410:	bl	13514 <_sungetc_r>
   10414:	mov	r7, r8
   10416:	mov	r9, r4
   10418:	ands.w	r2, r5, #16
   1041c:	bne.w	ff7c <__ssvfscanf_r+0x4c8>
   10420:	and.w	r3, r5, #1536	; 0x600
   10424:	cmp.w	r3, #1024	; 0x400
   10428:	strb.w	r2, [r9]
   1042c:	beq.w	1081a <__ssvfscanf_r+0xd66>
   10430:	ldr	r3, [sp, #52]	; 0x34
   10432:	cmp	r3, #0
   10434:	bne.w	1083c <__ssvfscanf_r+0xd88>
   10438:	ldr	r1, [sp, #40]	; 0x28
   1043a:	movs	r2, #0
   1043c:	mov	r0, sl
   1043e:	bl	e250 <_strtod_r>
   10442:	lsls	r3, r5, #31
   10444:	bmi.w	106d2 <__ssvfscanf_r+0xc1e>
   10448:	ands.w	r5, r5, #2
   1044c:	bne.w	106d2 <__ssvfscanf_r+0xc1e>
   10450:	vmov	r2, r3, d0
   10454:	vmov	r0, r1, d0
   10458:	vstr	d0, [sp, #32]
   1045c:	bl	bc3c <__aeabi_dcmpun>
   10460:	ldr	r4, [sp, #20]
   10462:	vldr	d0, [sp, #32]
   10466:	adds	r6, r4, #4
   10468:	ldr	r4, [r4, #0]
   1046a:	cmp	r0, #0
   1046c:	bne.w	10928 <__ssvfscanf_r+0xe74>
   10470:	vmov	r0, r1, d0
   10474:	bl	bcf8 <__aeabi_d2f>
   10478:	str	r6, [sp, #20]
   1047a:	str	r0, [r4, #0]
   1047c:	ldr	r3, [sp, #24]
   1047e:	ldr	r6, [sp, #12]
   10480:	adds	r3, #1
   10482:	str	r3, [sp, #24]
   10484:	mov	r4, r6
   10486:	b.w	fb44 <__ssvfscanf_r+0x90>
   1048a:	cmp.w	r8, #2
   1048e:	bne.w	10312 <__ssvfscanf_r+0x85e>
   10492:	mov.w	r8, #3
   10496:	b.n	102e8 <__ssvfscanf_r+0x834>
   10498:	and.w	lr, r5, #1280	; 0x500
   1049c:	cmp.w	lr, #1024	; 0x400
   104a0:	beq.n	104ae <__ssvfscanf_r+0x9fa>
   104a2:	lsls	r2, r5, #21
   104a4:	bpl.w	10312 <__ssvfscanf_r+0x85e>
   104a8:	cmp	r6, #0
   104aa:	beq.w	1039c <__ssvfscanf_r+0x8e8>
   104ae:	lsls	r2, r5, #22
   104b0:	bmi.n	104bc <__ssvfscanf_r+0xa08>
   104b2:	ldr	r2, [sp, #44]	; 0x2c
   104b4:	str.w	r9, [sp, #60]	; 0x3c
   104b8:	subs	r2, r6, r2
   104ba:	str	r2, [sp, #52]	; 0x34
   104bc:	bic.w	r5, r5, #1920	; 0x780
   104c0:	orr.w	r5, r5, #384	; 0x180
   104c4:	movs	r6, #0
   104c6:	b.n	102e8 <__ssvfscanf_r+0x834>
   104c8:	cmp	r3, #1
   104ca:	bne.w	10312 <__ssvfscanf_r+0x85e>
   104ce:	movs	r3, #2
   104d0:	b.n	102e8 <__ssvfscanf_r+0x834>
   104d2:	ldr	r2, [sp, #48]	; 0x30
   104d4:	ldrb.w	lr, [r2]
   104d8:	cmp	lr, r1
   104da:	bne.w	10312 <__ssvfscanf_r+0x85e>
   104de:	lsls	r2, r5, #22
   104e0:	bpl.w	10312 <__ssvfscanf_r+0x85e>
   104e4:	bic.w	r5, r5, #640	; 0x280
   104e8:	str	r6, [sp, #44]	; 0x2c
   104ea:	b.n	102e8 <__ssvfscanf_r+0x834>
   104ec:	mov	r1, fp
   104ee:	mov	r0, sl
   104f0:	str	r3, [sp, #32]
   104f2:	bl	13598 <__ssrefill_r>
   104f6:	ldr	r3, [sp, #32]
   104f8:	cmp	r0, #0
   104fa:	bne.w	10312 <__ssvfscanf_r+0x85e>
   104fe:	cmp	r4, #0
   10500:	bne.w	1022a <__ssvfscanf_r+0x776>
   10504:	b.n	10312 <__ssvfscanf_r+0x85e>
   10506:	cmp.w	r8, #3
   1050a:	beq.w	10376 <__ssvfscanf_r+0x8c2>
   1050e:	cmp.w	r8, #5
   10512:	beq.w	10376 <__ssvfscanf_r+0x8c2>
   10516:	b.n	10312 <__ssvfscanf_r+0x85e>
   10518:	cmp	r3, #2
   1051a:	bne.w	1036a <__ssvfscanf_r+0x8b6>
   1051e:	movs	r3, #3
   10520:	b.n	102e8 <__ssvfscanf_r+0x834>
   10522:	subs	r3, r4, #1
   10524:	cmp.w	r3, #348	; 0x15c
   10528:	itte	hi
   1052a:	mvnhi.w	r0, #348	; 0x15c
   1052e:	addhi.w	r9, r4, r0
   10532:	movls	r9, r8
   10534:	add	r3, sp, #336	; 0x150
   10536:	mov	r0, r2
   10538:	mov	r2, r7
   1053a:	mov	r7, r9
   1053c:	ldr.w	r9, [sp, #16]
   10540:	str	r3, [sp, #40]	; 0x28
   10542:	it	hi
   10544:	movwhi	r4, #349	; 0x15d
   10548:	orr.w	r5, r5, #3456	; 0xd80
   1054c:	mov	r6, r3
   1054e:	mov.w	r8, #0
   10552:	sub.w	r3, r1, #43	; 0x2b
   10556:	cmp	r3, #77	; 0x4d
   10558:	bhi.n	105fe <__ssvfscanf_r+0xb4a>
   1055a:	tbb	[pc, r3]
   1055e:	.short	0x507e
   10560:	.word	0x6f50507e
   10564:	.word	0x69696969
   10568:	.word	0x4a696969
   1056c:	.word	0x5050504a
   10570:	.word	0x50505050
   10574:	.word	0x44444444
   10578:	.word	0x50504444
   1057c:	.word	0x50505050
   10580:	.word	0x50505050
   10584:	.word	0x50505050
   10588:	.word	0x27505050
   1058c:	.word	0x50505050
   10590:	.word	0x50505050
   10594:	.word	0x44444444
   10598:	.word	0x50504444
   1059c:	.word	0x50505050
   105a0:	.word	0x50505050
   105a4:	.word	0x50505050
   105a8:	.word	0x27505050
   105ac:	and.w	r3, r5, #1536	; 0x600
   105b0:	cmp.w	r3, #512	; 0x200
   105b4:	bne.n	105fe <__ssvfscanf_r+0xb4a>
   105b6:	bic.w	r5, r5, #512	; 0x200
   105ba:	orr.w	r5, r5, #1280	; 0x500
   105be:	mov.w	r9, #16
   105c2:	strb	r1, [r6, #0]
   105c4:	adds	r6, #1
   105c6:	ldr.w	r3, [fp, #4]
   105ca:	subs	r3, #1
   105cc:	cmp	r3, #0
   105ce:	str.w	r3, [fp, #4]
   105d2:	ble.n	106ba <__ssvfscanf_r+0xc06>
   105d4:	adds	r0, #1
   105d6:	str.w	r0, [fp]
   105da:	subs	r4, #1
   105dc:	beq.n	105fe <__ssvfscanf_r+0xb4a>
   105de:	ldr.w	r0, [fp]
   105e2:	ldrb	r1, [r0, #0]
   105e4:	b.n	10552 <__ssvfscanf_r+0xa9e>
   105e6:	cmp.w	r9, #10
   105ea:	ble.n	105fe <__ssvfscanf_r+0xb4a>
   105ec:	bic.w	r5, r5, #2944	; 0xb80
   105f0:	b.n	105c2 <__ssvfscanf_r+0xb0e>
   105f2:	ldr	r3, [pc, #756]	; (108e8 <__ssvfscanf_r+0xe34>)
   105f4:	ldrsh.w	r9, [r3, r9, lsl #1]
   105f8:	cmp.w	r9, #8
   105fc:	bgt.n	105ec <__ssvfscanf_r+0xb38>
   105fe:	lsls	r1, r5, #23
   10600:	mov	r7, r2
   10602:	str.w	r9, [sp, #16]
   10606:	bpl.n	10618 <__ssvfscanf_r+0xb64>
   10608:	ldr	r3, [sp, #40]	; 0x28
   1060a:	cmp	r6, r3
   1060c:	bhi.w	107f8 <__ssvfscanf_r+0xd44>
   10610:	ldr	r3, [sp, #40]	; 0x28
   10612:	cmp	r6, r3
   10614:	beq.w	fb50 <__ssvfscanf_r+0x9c>
   10618:	ands.w	r4, r5, #16
   1061c:	beq.w	10744 <__ssvfscanf_r+0xc90>
   10620:	ldr	r3, [sp, #40]	; 0x28
   10622:	subs	r6, r6, r3
   10624:	add	r6, r8
   10626:	add	r7, r6
   10628:	ldr	r6, [sp, #12]
   1062a:	mov	r4, r6
   1062c:	b.w	fb44 <__ssvfscanf_r+0x90>
   10630:	ldr	r3, [pc, #692]	; (108e8 <__ssvfscanf_r+0xe34>)
   10632:	bic.w	r5, r5, #2944	; 0xb80
   10636:	ldrsh.w	r9, [r3, r9, lsl #1]
   1063a:	b.n	105c2 <__ssvfscanf_r+0xb0e>
   1063c:	lsls	r3, r5, #20
   1063e:	bpl.n	105c2 <__ssvfscanf_r+0xb0e>
   10640:	cmp.w	r9, #0
   10644:	bne.n	1064e <__ssvfscanf_r+0xb9a>
   10646:	orr.w	r5, r5, #512	; 0x200
   1064a:	mov.w	r9, #8
   1064e:	lsls	r3, r5, #21
   10650:	bpl.w	107d4 <__ssvfscanf_r+0xd20>
   10654:	bic.w	r5, r5, #1408	; 0x580
   10658:	b.n	105c2 <__ssvfscanf_r+0xb0e>
   1065a:	lsls	r3, r5, #24
   1065c:	bpl.n	105fe <__ssvfscanf_r+0xb4a>
   1065e:	bic.w	r5, r5, #128	; 0x80
   10662:	b.n	105c2 <__ssvfscanf_r+0xb0e>
   10664:	cmp	r4, #0
   10666:	it	eq
   10668:	moveq.w	r4, #4294967295
   1066c:	ands.w	r3, r5, #1
   10670:	bne.w	ff30 <__ssvfscanf_r+0x47c>
   10674:	lsls	r1, r5, #27
   10676:	bpl.n	106e0 <__ssvfscanf_r+0xc2c>
   10678:	mov	r5, r3
   1067a:	bl	c48c <__locale_ctype_ptr>
   1067e:	ldr.w	r3, [fp]
   10682:	ldrb	r2, [r3, #0]
   10684:	add	r0, r2
   10686:	adds	r3, #1
   10688:	ldrb	r2, [r0, #1]
   1068a:	lsls	r2, r2, #28
   1068c:	bmi.w	fe0e <__ssvfscanf_r+0x35a>
   10690:	ldr.w	r2, [fp, #4]
   10694:	str.w	r3, [fp]
   10698:	adds	r5, #1
   1069a:	subs	r3, r2, #1
   1069c:	cmp	r4, r5
   1069e:	str.w	r3, [fp, #4]
   106a2:	beq.w	fe0e <__ssvfscanf_r+0x35a>
   106a6:	cmp	r3, #0
   106a8:	bgt.n	1067a <__ssvfscanf_r+0xbc6>
   106aa:	mov	r1, fp
   106ac:	mov	r0, sl
   106ae:	bl	13598 <__ssrefill_r>
   106b2:	cmp	r0, #0
   106b4:	beq.n	1067a <__ssvfscanf_r+0xbc6>
   106b6:	b.w	fe0e <__ssvfscanf_r+0x35a>
   106ba:	mov	r1, fp
   106bc:	mov	r0, sl
   106be:	str	r2, [sp, #16]
   106c0:	bl	13598 <__ssrefill_r>
   106c4:	ldr	r2, [sp, #16]
   106c6:	cmp	r0, #0
   106c8:	beq.n	105da <__ssvfscanf_r+0xb26>
   106ca:	b.n	105fe <__ssvfscanf_r+0xb4a>
   106cc:	str.w	r8, [sp, #56]	; 0x38
   106d0:	b.n	1020a <__ssvfscanf_r+0x756>
   106d2:	ldr	r2, [sp, #20]
   106d4:	ldr	r3, [r2, #0]
   106d6:	adds	r2, #4
   106d8:	str	r2, [sp, #20]
   106da:	vstr	d0, [r3]
   106de:	b.n	1047c <__ssvfscanf_r+0x9c8>
   106e0:	ldr	r2, [sp, #20]
   106e2:	ldr	r5, [r2, #0]
   106e4:	adds	r6, r2, #4
   106e6:	add	r4, r5
   106e8:	mov	r8, r5
   106ea:	bl	c48c <__locale_ctype_ptr>
   106ee:	ldr.w	r2, [fp]
   106f2:	ldrb	r3, [r2, #0]
   106f4:	add	r0, r3
   106f6:	adds	r1, r2, #1
   106f8:	ldrb	r3, [r0, #1]
   106fa:	lsls	r3, r3, #28
   106fc:	bmi.n	1072a <__ssvfscanf_r+0xc76>
   106fe:	ldr.w	r3, [fp, #4]
   10702:	str.w	r1, [fp]
   10706:	subs	r3, #1
   10708:	str.w	r3, [fp, #4]
   1070c:	ldrb	r3, [r2, #0]
   1070e:	strb.w	r3, [r8], #1
   10712:	cmp	r4, r8
   10714:	beq.n	1072c <__ssvfscanf_r+0xc78>
   10716:	ldr.w	r3, [fp, #4]
   1071a:	cmp	r3, #0
   1071c:	bgt.n	106ea <__ssvfscanf_r+0xc36>
   1071e:	mov	r1, fp
   10720:	mov	r0, sl
   10722:	bl	13598 <__ssrefill_r>
   10726:	cmp	r0, #0
   10728:	beq.n	106ea <__ssvfscanf_r+0xc36>
   1072a:	mov	r4, r8
   1072c:	ldr	r2, [sp, #24]
   1072e:	str	r6, [sp, #20]
   10730:	ldr	r6, [sp, #12]
   10732:	subs	r5, r4, r5
   10734:	movs	r3, #0
   10736:	adds	r2, #1
   10738:	strb	r3, [r4, #0]
   1073a:	add	r7, r5
   1073c:	str	r2, [sp, #24]
   1073e:	mov	r4, r6
   10740:	b.w	fb44 <__ssvfscanf_r+0x90>
   10744:	mov	r2, r4
   10746:	strb	r4, [r6, #0]
   10748:	ldr	r3, [sp, #16]
   1074a:	ldr	r1, [sp, #40]	; 0x28
   1074c:	ldr	r4, [sp, #28]
   1074e:	mov	r0, sl
   10750:	blx	r4
   10752:	lsls	r2, r5, #26
   10754:	bmi.n	107e4 <__ssvfscanf_r+0xd30>
   10756:	lsls	r3, r5, #29
   10758:	bpl.n	10852 <__ssvfscanf_r+0xd9e>
   1075a:	ldr	r2, [sp, #20]
   1075c:	ldr	r3, [r2, #0]
   1075e:	adds	r2, #4
   10760:	str	r2, [sp, #20]
   10762:	strh	r0, [r3, #0]
   10764:	ldr	r3, [sp, #24]
   10766:	adds	r3, #1
   10768:	str	r3, [sp, #24]
   1076a:	b.n	10620 <__ssvfscanf_r+0xb6c>
   1076c:	bl	c468 <__locale_mb_cur_max>
   10770:	cmp	r6, r0
   10772:	beq.w	fcfe <__ssvfscanf_r+0x24a>
   10776:	ldmia.w	fp, {r2, r3}
   1077a:	ldrb.w	r0, [r2], #1
   1077e:	str.w	r2, [fp]
   10782:	ldr	r2, [sp, #32]
   10784:	str	r2, [sp, #0]
   10786:	add	r2, sp, #336	; 0x150
   10788:	adds	r5, r6, #1
   1078a:	subs	r3, #1
   1078c:	strb	r0, [r2, r6]
   1078e:	str.w	r3, [fp, #4]
   10792:	mov	r1, r8
   10794:	mov	r3, r5
   10796:	mov	r0, sl
   10798:	bl	12444 <_mbrtowc_r>
   1079c:	adds	r6, r0, #1
   1079e:	beq.w	fcfe <__ssvfscanf_r+0x24a>
   107a2:	cmp	r0, #0
   107a4:	bne.n	1087e <__ssvfscanf_r+0xdca>
   107a6:	str.w	r0, [r8]
   107aa:	bl	12408 <iswspace>
   107ae:	cmp	r0, #0
   107b0:	beq.w	10912 <__ssvfscanf_r+0xe5e>
   107b4:	cmp	r5, #0
   107b6:	beq.w	ff6c <__ssvfscanf_r+0x4b8>
   107ba:	add	r3, sp, #336	; 0x150
   107bc:	adds	r4, r3, r5
   107be:	subs	r5, #1
   107c0:	mov	r2, fp
   107c2:	ldrb.w	r1, [r4, #-1]!
   107c6:	mov	r0, sl
   107c8:	bl	13514 <_sungetc_r>
   107cc:	cmp	r5, #0
   107ce:	bne.n	107be <__ssvfscanf_r+0xd0a>
   107d0:	b.w	ff6c <__ssvfscanf_r+0x4b8>
   107d4:	bic.w	r5, r5, #896	; 0x380
   107d8:	cbz	r7, 107de <__ssvfscanf_r+0xd2a>
   107da:	subs	r7, #1
   107dc:	adds	r4, #1
   107de:	add.w	r8, r8, #1
   107e2:	b.n	105c6 <__ssvfscanf_r+0xb12>
   107e4:	ldr	r2, [sp, #20]
   107e6:	ldr	r3, [r2, #0]
   107e8:	adds	r2, #4
   107ea:	str	r2, [sp, #20]
   107ec:	str	r0, [r3, #0]
   107ee:	b.n	10764 <__ssvfscanf_r+0xcb0>
   107f0:	bic.w	r5, r5, #1920	; 0x780
   107f4:	movs	r3, #1
   107f6:	b.n	102e8 <__ssvfscanf_r+0x834>
   107f8:	ldrb.w	r1, [r6, #-1]
   107fc:	mov	r2, fp
   107fe:	mov	r0, sl
   10800:	bl	13514 <_sungetc_r>
   10804:	subs	r6, #1
   10806:	b.n	10610 <__ssvfscanf_r+0xb5c>
   10808:	add.w	r8, sp, #68	; 0x44
   1080c:	b.w	ff52 <__ssvfscanf_r+0x49e>
   10810:	bic.w	r5, r5, #1920	; 0x780
   10814:	mov.w	r8, #1
   10818:	b.n	102e8 <__ssvfscanf_r+0x834>
   1081a:	ldr	r3, [sp, #44]	; 0x2c
   1081c:	subs	r6, r6, r3
   1081e:	negs	r2, r6
   10820:	cmp	r6, #0
   10822:	beq.w	10438 <__ssvfscanf_r+0x984>
   10826:	addw	r3, sp, #675	; 0x2a3
   1082a:	cmp	r9, r3
   1082c:	it	cs
   1082e:	addwcs	r9, sp, #674	; 0x2a2
   10832:	mov	r0, r9
   10834:	ldr	r1, [pc, #180]	; (108ec <__ssvfscanf_r+0xe38>)
   10836:	bl	d030 <sprintf>
   1083a:	b.n	10438 <__ssvfscanf_r+0x984>
   1083c:	ldr	r4, [sp, #60]	; 0x3c
   1083e:	mov	r1, r4
   10840:	movs	r3, #10
   10842:	adds	r1, #1
   10844:	mov	r0, sl
   10846:	bl	e3a8 <_strtol_r>
   1084a:	ldr	r3, [sp, #52]	; 0x34
   1084c:	mov	r9, r4
   1084e:	subs	r2, r0, r3
   10850:	b.n	10826 <__ssvfscanf_r+0xd72>
   10852:	ands.w	r2, r5, #1
   10856:	bne.n	107e4 <__ssvfscanf_r+0xd30>
   10858:	lsls	r4, r5, #30
   1085a:	bpl.n	107e4 <__ssvfscanf_r+0xd30>
   1085c:	ldr	r3, [sp, #28]
   1085e:	mov	r1, r3
   10860:	ldr	r3, [pc, #140]	; (108f0 <__ssvfscanf_r+0xe3c>)
   10862:	cmp	r1, r3
   10864:	mov	r0, sl
   10866:	ldr	r3, [sp, #16]
   10868:	ldr	r1, [sp, #40]	; 0x28
   1086a:	beq.n	10936 <__ssvfscanf_r+0xe82>
   1086c:	bl	13054 <_strtoll_r>
   10870:	ldr	r2, [sp, #20]
   10872:	ldr	r3, [r2, #0]
   10874:	adds	r2, #4
   10876:	str	r2, [sp, #20]
   10878:	strd	r0, r1, [r3]
   1087c:	b.n	10764 <__ssvfscanf_r+0xcb0>
   1087e:	adds	r0, #2
   10880:	bne.n	108c4 <__ssvfscanf_r+0xe10>
   10882:	mov	r6, r5
   10884:	ldr.w	r3, [fp, #4]
   10888:	cmp	r3, #0
   1088a:	bgt.w	ff54 <__ssvfscanf_r+0x4a0>
   1088e:	mov	r1, fp
   10890:	mov	r0, sl
   10892:	bl	13598 <__ssrefill_r>
   10896:	cmp	r0, #0
   10898:	beq.w	ff54 <__ssvfscanf_r+0x4a0>
   1089c:	cmp	r6, #0
   1089e:	bne.w	fcfe <__ssvfscanf_r+0x24a>
   108a2:	b.w	ff6c <__ssvfscanf_r+0x4b8>
   108a6:	ldr	r3, [sp, #40]	; 0x28
   108a8:	cmp	r9, r3
   108aa:	bls.w	fb50 <__ssvfscanf_r+0x9c>
   108ae:	ldrb.w	r1, [r9, #-1]!
   108b2:	mov	r2, fp
   108b4:	mov	r0, sl
   108b6:	bl	13514 <_sungetc_r>
   108ba:	ldr	r3, [sp, #40]	; 0x28
   108bc:	cmp	r9, r3
   108be:	bne.n	108ae <__ssvfscanf_r+0xdfa>
   108c0:	b.w	fb50 <__ssvfscanf_r+0x9c>
   108c4:	ldr.w	r0, [r8]
   108c8:	b.n	107aa <__ssvfscanf_r+0xcf6>
   108ca:	ldr	r3, [sp, #40]	; 0x28
   108cc:	cmp	r9, r3
   108ce:	bls.w	fb50 <__ssvfscanf_r+0x9c>
   108d2:	ldrb.w	r1, [r9, #-1]!
   108d6:	mov	r2, fp
   108d8:	mov	r0, sl
   108da:	bl	13514 <_sungetc_r>
   108de:	ldr	r3, [sp, #40]	; 0x28
   108e0:	cmp	r9, r3
   108e2:	bne.n	108d2 <__ssvfscanf_r+0xe1e>
   108e4:	b.w	fb50 <__ssvfscanf_r+0x9c>
   108e8:	.word	0x00014134
   108ec:	.word	0x00014158
   108f0:	.word	0x000131e1
   108f4:	ldr	r3, [sp, #40]	; 0x28
   108f6:	cmp	r9, r3
   108f8:	bls.w	fb50 <__ssvfscanf_r+0x9c>
   108fc:	ldrb.w	r1, [r9, #-1]!
   10900:	mov	r2, fp
   10902:	mov	r0, sl
   10904:	bl	13514 <_sungetc_r>
   10908:	ldr	r3, [sp, #40]	; 0x28
   1090a:	cmp	r9, r3
   1090c:	bne.n	108fc <__ssvfscanf_r+0xe48>
   1090e:	b.w	fb50 <__ssvfscanf_r+0x9c>
   10912:	add	r7, r5
   10914:	subs	r4, #1
   10916:	cmp.w	r9, #0
   1091a:	bne.n	10924 <__ssvfscanf_r+0xe70>
   1091c:	add.w	r8, r8, #4
   10920:	mov	r6, r9
   10922:	b.n	10884 <__ssvfscanf_r+0xdd0>
   10924:	mov	r6, r0
   10926:	b.n	10884 <__ssvfscanf_r+0xdd0>
   10928:	mov	r0, r5
   1092a:	bl	12e9c <nanf>
   1092e:	str	r6, [sp, #20]
   10930:	vstr	s0, [r4]
   10934:	b.n	1047c <__ssvfscanf_r+0x9c8>
   10936:	bl	133f0 <_strtoull_r>
   1093a:	b.n	10870 <__ssvfscanf_r+0xdbc>

0001093c <_vdprintf_r>:
   1093c:	push	{r4, r5, r6, r7, lr}
   1093e:	sub.w	sp, sp, #532	; 0x214
   10942:	add	r5, sp, #16
   10944:	str	r3, [sp, #0]
   10946:	mov	r7, r1
   10948:	mov	r3, r2
   1094a:	mov.w	r4, #512	; 0x200
   1094e:	add	r2, sp, #12
   10950:	mov	r1, r5
   10952:	str	r4, [sp, #12]
   10954:	mov	r6, r0
   10956:	bl	136d0 <_vasnprintf_r>
   1095a:	cbz	r0, 10980 <_vdprintf_r+0x44>
   1095c:	mov	r4, r0
   1095e:	mov	r2, r0
   10960:	mov	r1, r7
   10962:	ldr	r3, [sp, #12]
   10964:	mov	r0, r6
   10966:	bl	109bc <_write_r>
   1096a:	cmp	r4, r5
   1096c:	str	r0, [sp, #12]
   1096e:	beq.n	1097a <_vdprintf_r+0x3e>
   10970:	mov	r0, r6
   10972:	mov	r1, r4
   10974:	bl	11ad0 <_free_r>
   10978:	ldr	r0, [sp, #12]
   1097a:	add.w	sp, sp, #532	; 0x214
   1097e:	pop	{r4, r5, r6, r7, pc}
   10980:	mov.w	r0, #4294967295
   10984:	b.n	1097a <_vdprintf_r+0x3e>
   10986:	nop

00010988 <vdprintf>:
   10988:	push	{r4}
   1098a:	ldr	r4, [pc, #16]	; (1099c <vdprintf+0x14>)
   1098c:	mov	r3, r2
   1098e:	mov	r2, r1
   10990:	mov	r1, r0
   10992:	ldr	r0, [r4, #0]
   10994:	ldr.w	r4, [sp], #4
   10998:	b.w	1093c <_vdprintf_r>
   1099c:	.word	0x1fff0d78

000109a0 <__ascii_wctomb>:
   109a0:	cbz	r1, 109ac <__ascii_wctomb+0xc>
   109a2:	cmp	r2, #255	; 0xff
   109a4:	bhi.n	109b0 <__ascii_wctomb+0x10>
   109a6:	strb	r2, [r1, #0]
   109a8:	movs	r0, #1
   109aa:	bx	lr
   109ac:	mov	r0, r1
   109ae:	bx	lr
   109b0:	movs	r3, #138	; 0x8a
   109b2:	str	r3, [r0, #0]
   109b4:	mov.w	r0, #4294967295
   109b8:	bx	lr
   109ba:	nop

000109bc <_write_r>:
   109bc:	push	{r4, r5, r6, lr}
   109be:	mov	r5, r1
   109c0:	ldr	r4, [pc, #32]	; (109e4 <_write_r+0x28>)
   109c2:	mov	r1, r2
   109c4:	mov	r6, r0
   109c6:	mov	r2, r3
   109c8:	mov	r0, r5
   109ca:	movs	r3, #0
   109cc:	str	r3, [r4, #0]
   109ce:	bl	af6c <_write>
   109d2:	adds	r3, r0, #1
   109d4:	beq.n	109d8 <_write_r+0x1c>
   109d6:	pop	{r4, r5, r6, pc}
   109d8:	ldr	r3, [r4, #0]
   109da:	cmp	r3, #0
   109dc:	beq.n	109d6 <_write_r+0x1a>
   109de:	str	r3, [r6, #0]
   109e0:	pop	{r4, r5, r6, pc}
   109e2:	nop
   109e4:	.word	0x20020540

000109e8 <__register_exitproc>:
   109e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   109ec:	ldr	r4, [pc, #148]	; (10a84 <__register_exitproc+0x9c>)
   109ee:	ldr	r5, [r4, #0]
   109f0:	ldr.w	r4, [r5, #328]	; 0x148
   109f4:	mov	r6, r0
   109f6:	mov	r8, r1
   109f8:	mov	sl, r2
   109fa:	mov	r9, r3
   109fc:	cbz	r4, 10a70 <__register_exitproc+0x88>
   109fe:	ldr	r0, [r4, #4]
   10a00:	cmp	r0, #31
   10a02:	bgt.n	10a34 <__register_exitproc+0x4c>
   10a04:	adds	r3, r0, #1
   10a06:	cbz	r6, 10a26 <__register_exitproc+0x3e>
   10a08:	add.w	r5, r4, r0, lsl #2
   10a0c:	movs	r2, #1
   10a0e:	str.w	sl, [r5, #136]	; 0x88
   10a12:	ldr.w	r1, [r4, #392]	; 0x188
   10a16:	lsls	r2, r0
   10a18:	orrs	r1, r2
   10a1a:	cmp	r6, #2
   10a1c:	str.w	r1, [r4, #392]	; 0x188
   10a20:	str.w	r9, [r5, #264]	; 0x108
   10a24:	beq.n	10a64 <__register_exitproc+0x7c>
   10a26:	adds	r0, #2
   10a28:	str	r3, [r4, #4]
   10a2a:	str.w	r8, [r4, r0, lsl #2]
   10a2e:	movs	r0, #0
   10a30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10a34:	ldr	r3, [pc, #80]	; (10a88 <__register_exitproc+0xa0>)
   10a36:	cbz	r3, 10a7a <__register_exitproc+0x92>
   10a38:	mov.w	r0, #400	; 0x190
   10a3c:	bl	c4a0 <malloc>
   10a40:	mov	r4, r0
   10a42:	cbz	r0, 10a7a <__register_exitproc+0x92>
   10a44:	ldr.w	r3, [r5, #328]	; 0x148
   10a48:	movs	r7, #0
   10a4a:	stmia.w	r0, {r3, r7}
   10a4e:	str.w	r4, [r5, #328]	; 0x148
   10a52:	mov	r0, r7
   10a54:	movs	r3, #1
   10a56:	str.w	r7, [r4, #392]	; 0x188
   10a5a:	str.w	r7, [r4, #396]	; 0x18c
   10a5e:	cmp	r6, #0
   10a60:	beq.n	10a26 <__register_exitproc+0x3e>
   10a62:	b.n	10a08 <__register_exitproc+0x20>
   10a64:	ldr.w	r1, [r4, #396]	; 0x18c
   10a68:	orrs	r2, r1
   10a6a:	str.w	r2, [r4, #396]	; 0x18c
   10a6e:	b.n	10a26 <__register_exitproc+0x3e>
   10a70:	add.w	r4, r5, #332	; 0x14c
   10a74:	str.w	r4, [r5, #328]	; 0x148
   10a78:	b.n	109fe <__register_exitproc+0x16>
   10a7a:	mov.w	r0, #4294967295
   10a7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10a82:	nop
   10a84:	.word	0x0001405c
   10a88:	.word	0x0000c4a1

00010a8c <register_fini>:
   10a8c:	ldr	r3, [pc, #8]	; (10a98 <register_fini+0xc>)
   10a8e:	cbz	r3, 10a96 <register_fini+0xa>
   10a90:	ldr	r0, [pc, #8]	; (10a9c <register_fini+0x10>)
   10a92:	b.w	10aa0 <atexit>
   10a96:	bx	lr
   10a98:	.word	0x00000000
   10a9c:	.word	0x00011a0d

00010aa0 <atexit>:
   10aa0:	movs	r3, #0
   10aa2:	mov	r1, r0
   10aa4:	mov	r2, r3
   10aa6:	mov	r0, r3
   10aa8:	b.w	109e8 <__register_exitproc>

00010aac <quorem>:
   10aac:	ldr	r2, [r0, #16]
   10aae:	ldr	r3, [r1, #16]
   10ab0:	cmp	r3, r2
   10ab2:	bgt.w	10bd0 <quorem+0x124>
   10ab6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10aba:	add.w	r8, r3, #4294967295
   10abe:	add.w	r7, r1, #20
   10ac2:	add.w	fp, r0, #20
   10ac6:	ldr.w	r2, [r7, r8, lsl #2]
   10aca:	ldr.w	r3, [fp, r8, lsl #2]
   10ace:	mov.w	r4, r8, lsl #2
   10ad2:	sub	sp, #12
   10ad4:	adds	r2, #1
   10ad6:	udiv	r9, r3, r2
   10ada:	add.w	r3, fp, r4
   10ade:	str	r4, [sp, #0]
   10ae0:	add.w	sl, r7, r4
   10ae4:	str	r3, [sp, #4]
   10ae6:	cmp.w	r9, #0
   10aea:	beq.n	10b60 <quorem+0xb4>
   10aec:	movs	r5, #0
   10aee:	mov	ip, r7
   10af0:	mov	lr, fp
   10af2:	mov	r3, r5
   10af4:	ldr.w	r6, [ip], #4
   10af8:	ldr.w	r2, [lr]
   10afc:	uxth	r4, r6
   10afe:	mla	r5, r9, r4, r5
   10b02:	lsrs	r6, r6, #16
   10b04:	lsrs	r4, r5, #16
   10b06:	mla	r4, r9, r6, r4
   10b0a:	uxth	r5, r5
   10b0c:	subs	r3, r3, r5
   10b0e:	uxth	r6, r4
   10b10:	uxtah	r3, r3, r2
   10b14:	rsb	r6, r6, r2, lsr #16
   10b18:	add.w	r6, r6, r3, asr #16
   10b1c:	uxth	r3, r3
   10b1e:	orr.w	r3, r3, r6, lsl #16
   10b22:	cmp	sl, ip
   10b24:	str.w	r3, [lr], #4
   10b28:	mov.w	r5, r4, lsr #16
   10b2c:	mov.w	r3, r6, asr #16
   10b30:	bcs.n	10af4 <quorem+0x48>
   10b32:	ldr	r3, [sp, #0]
   10b34:	ldr.w	r3, [fp, r3]
   10b38:	cbnz	r3, 10b60 <quorem+0xb4>
   10b3a:	ldr	r4, [sp, #4]
   10b3c:	subs	r3, r4, #4
   10b3e:	cmp	fp, r3
   10b40:	bcs.n	10b5c <quorem+0xb0>
   10b42:	ldr.w	r3, [r4, #-4]
   10b46:	cbnz	r3, 10b5c <quorem+0xb0>
   10b48:	sub.w	r3, r4, #8
   10b4c:	b.n	10b54 <quorem+0xa8>
   10b4e:	ldr	r2, [r3, #0]
   10b50:	subs	r3, #4
   10b52:	cbnz	r2, 10b5c <quorem+0xb0>
   10b54:	cmp	fp, r3
   10b56:	add.w	r8, r8, #4294967295
   10b5a:	bcc.n	10b4e <quorem+0xa2>
   10b5c:	str.w	r8, [r0, #16]
   10b60:	mov	r4, r0
   10b62:	bl	129e8 <__mcmp>
   10b66:	cmp	r0, #0
   10b68:	blt.n	10bc8 <quorem+0x11c>
   10b6a:	add.w	r9, r9, #1
   10b6e:	mov	r5, fp
   10b70:	movs	r3, #0
   10b72:	ldr.w	r1, [r7], #4
   10b76:	ldr	r0, [r5, #0]
   10b78:	uxth	r2, r1
   10b7a:	subs	r2, r3, r2
   10b7c:	lsrs	r1, r1, #16
   10b7e:	uxtah	r2, r2, r0
   10b82:	rsb	r3, r1, r0, lsr #16
   10b86:	add.w	r3, r3, r2, asr #16
   10b8a:	uxth	r1, r2
   10b8c:	orr.w	r1, r1, r3, lsl #16
   10b90:	cmp	sl, r7
   10b92:	str.w	r1, [r5], #4
   10b96:	mov.w	r3, r3, asr #16
   10b9a:	bcs.n	10b72 <quorem+0xc6>
   10b9c:	ldr.w	r2, [fp, r8, lsl #2]
   10ba0:	add.w	r3, fp, r8, lsl #2
   10ba4:	cbnz	r2, 10bc8 <quorem+0x11c>
   10ba6:	subs	r2, r3, #4
   10ba8:	cmp	fp, r2
   10baa:	bcs.n	10bc4 <quorem+0x118>
   10bac:	ldr.w	r2, [r3, #-4]
   10bb0:	cbnz	r2, 10bc4 <quorem+0x118>
   10bb2:	subs	r3, #8
   10bb4:	b.n	10bbc <quorem+0x110>
   10bb6:	ldr	r2, [r3, #0]
   10bb8:	subs	r3, #4
   10bba:	cbnz	r2, 10bc4 <quorem+0x118>
   10bbc:	cmp	fp, r3
   10bbe:	add.w	r8, r8, #4294967295
   10bc2:	bcc.n	10bb6 <quorem+0x10a>
   10bc4:	str.w	r8, [r4, #16]
   10bc8:	mov	r0, r9
   10bca:	add	sp, #12
   10bcc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bd0:	movs	r0, #0
   10bd2:	bx	lr
   10bd4:			; <UNDEFINED> instruction: 0xffffffff

00010bd8 <_dtoa_r>:
   10bd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bdc:	vmov	r6, r7, d0
   10be0:	sub	sp, #108	; 0x6c
   10be2:	ldr	r4, [r0, #64]	; 0x40
   10be4:	ldr	r5, [sp, #144]	; 0x90
   10be6:	str	r1, [sp, #0]
   10be8:	mov	r9, r0
   10bea:	str	r2, [sp, #20]
   10bec:	str	r3, [sp, #12]
   10bee:	vmov	sl, s0
   10bf2:	mov	fp, r7
   10bf4:	cbz	r4, 10c0c <_dtoa_r+0x34>
   10bf6:	ldr	r2, [r0, #68]	; 0x44
   10bf8:	str	r2, [r4, #4]
   10bfa:	movs	r3, #1
   10bfc:	lsls	r3, r2
   10bfe:	str	r3, [r4, #8]
   10c00:	mov	r1, r4
   10c02:	bl	1258c <_Bfree>
   10c06:	movs	r3, #0
   10c08:	str.w	r3, [r9, #64]	; 0x40
   10c0c:	cmp.w	fp, #0
   10c10:	mov	r4, fp
   10c12:	blt.n	10c7e <_dtoa_r+0xa6>
   10c14:	movs	r3, #0
   10c16:	str	r3, [r5, #0]
   10c18:	ldr	r3, [pc, #644]	; (10ea0 <_dtoa_r+0x2c8>)
   10c1a:	mov	r2, r3
   10c1c:	ands	r3, r4
   10c1e:	cmp	r3, r2
   10c20:	beq.n	10c50 <_dtoa_r+0x78>
   10c22:	movs	r2, #0
   10c24:	movs	r3, #0
   10c26:	mov	r0, sl
   10c28:	mov	r1, fp
   10c2a:	bl	bbd8 <__aeabi_dcmpeq>
   10c2e:	mov	r6, sl
   10c30:	mov	r7, fp
   10c32:	mov	r8, r0
   10c34:	cbz	r0, 10c8a <_dtoa_r+0xb2>
   10c36:	ldr	r2, [sp, #12]
   10c38:	movs	r3, #1
   10c3a:	str	r3, [r2, #0]
   10c3c:	ldr	r3, [sp, #148]	; 0x94
   10c3e:	cmp	r3, #0
   10c40:	beq.w	10dc0 <_dtoa_r+0x1e8>
   10c44:	ldr	r0, [pc, #604]	; (10ea4 <_dtoa_r+0x2cc>)
   10c46:	str	r0, [r3, #0]
   10c48:	subs	r0, #1
   10c4a:	add	sp, #108	; 0x6c
   10c4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c50:	ldr	r2, [sp, #12]
   10c52:	movw	r3, #9999	; 0x270f
   10c56:	str	r3, [r2, #0]
   10c58:	cmp.w	sl, #0
   10c5c:	beq.w	10d94 <_dtoa_r+0x1bc>
   10c60:	ldr	r0, [pc, #580]	; (10ea8 <_dtoa_r+0x2d0>)
   10c62:	ldr	r3, [sp, #148]	; 0x94
   10c64:	cmp	r3, #0
   10c66:	beq.n	10c4a <_dtoa_r+0x72>
   10c68:	ldrb	r3, [r0, #3]
   10c6a:	cmp	r3, #0
   10c6c:	beq.w	10dc4 <_dtoa_r+0x1ec>
   10c70:	add.w	r3, r0, #8
   10c74:	ldr	r2, [sp, #148]	; 0x94
   10c76:	str	r3, [r2, #0]
   10c78:	add	sp, #108	; 0x6c
   10c7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c7e:	movs	r3, #1
   10c80:	bic.w	r4, fp, #2147483648	; 0x80000000
   10c84:	str	r3, [r5, #0]
   10c86:	mov	fp, r4
   10c88:	b.n	10c18 <_dtoa_r+0x40>
   10c8a:	add	r2, sp, #96	; 0x60
   10c8c:	add	r1, sp, #100	; 0x64
   10c8e:	vmov	d0, r6, r7
   10c92:	mov	r0, r9
   10c94:	bl	12c64 <__d2b>
   10c98:	lsrs	r5, r4, #20
   10c9a:	str	r0, [sp, #40]	; 0x28
   10c9c:	bne.w	10da6 <_dtoa_r+0x1ce>
   10ca0:	ldr	r5, [sp, #96]	; 0x60
   10ca2:	ldr	r6, [sp, #100]	; 0x64
   10ca4:	add	r6, r5
   10ca6:	addw	r3, r6, #1074	; 0x432
   10caa:	cmp	r3, #32
   10cac:	ble.w	111c0 <_dtoa_r+0x5e8>
   10cb0:	rsb	r3, r3, #64	; 0x40
   10cb4:	addw	r0, r6, #1042	; 0x412
   10cb8:	lsls	r4, r3
   10cba:	lsr.w	r0, sl, r0
   10cbe:	orrs	r0, r4
   10cc0:	bl	b61c <__aeabi_ui2d>
   10cc4:	movs	r3, #1
   10cc6:	subs	r4, r6, #1
   10cc8:	sub.w	r1, r1, #32505856	; 0x1f00000
   10ccc:	str	r3, [sp, #60]	; 0x3c
   10cce:	movs	r2, #0
   10cd0:	ldr	r3, [pc, #472]	; (10eac <_dtoa_r+0x2d4>)
   10cd2:	bl	b3a0 <__aeabi_dsub>
   10cd6:	add	r3, pc, #432	; (adr r3, 10e88 <_dtoa_r+0x2b0>)
   10cd8:	ldrd	r2, r3, [r3]
   10cdc:	bl	b708 <__aeabi_dmul>
   10ce0:	add	r3, pc, #428	; (adr r3, 10e90 <_dtoa_r+0x2b8>)
   10ce2:	ldrd	r2, r3, [r3]
   10ce6:	bl	b3a4 <__adddf3>
   10cea:	mov	r6, r0
   10cec:	mov	r0, r4
   10cee:	mov	r7, r1
   10cf0:	bl	b63c <__aeabi_i2d>
   10cf4:	add	r3, pc, #416	; (adr r3, 10e98 <_dtoa_r+0x2c0>)
   10cf6:	ldrd	r2, r3, [r3]
   10cfa:	bl	b708 <__aeabi_dmul>
   10cfe:	mov	r2, r0
   10d00:	mov	r3, r1
   10d02:	mov	r0, r6
   10d04:	mov	r1, r7
   10d06:	bl	b3a4 <__adddf3>
   10d0a:	mov	r6, r0
   10d0c:	mov	r7, r1
   10d0e:	bl	bc68 <__aeabi_d2iz>
   10d12:	movs	r2, #0
   10d14:	str	r0, [sp, #16]
   10d16:	movs	r3, #0
   10d18:	mov	r0, r6
   10d1a:	mov	r1, r7
   10d1c:	bl	bbec <__aeabi_dcmplt>
   10d20:	cmp	r0, #0
   10d22:	bne.w	11176 <_dtoa_r+0x59e>
   10d26:	ldr	r6, [sp, #16]
   10d28:	cmp	r6, #22
   10d2a:	bhi.w	11170 <_dtoa_r+0x598>
   10d2e:	ldr	r3, [pc, #384]	; (10eb0 <_dtoa_r+0x2d8>)
   10d30:	add.w	r3, r3, r6, lsl #3
   10d34:	ldrd	r0, r1, [r3]
   10d38:	mov	r2, sl
   10d3a:	mov	r3, fp
   10d3c:	bl	bc28 <__aeabi_dcmpgt>
   10d40:	cmp	r0, #0
   10d42:	beq.w	111ca <_dtoa_r+0x5f2>
   10d46:	subs	r3, r6, #1
   10d48:	str	r3, [sp, #16]
   10d4a:	movs	r3, #0
   10d4c:	str	r3, [sp, #52]	; 0x34
   10d4e:	subs	r5, r5, r4
   10d50:	subs.w	r8, r5, #1
   10d54:	bmi.w	111ac <_dtoa_r+0x5d4>
   10d58:	movs	r3, #0
   10d5a:	str	r3, [sp, #28]
   10d5c:	ldr	r3, [sp, #16]
   10d5e:	cmp	r3, #0
   10d60:	blt.w	1119a <_dtoa_r+0x5c2>
   10d64:	add	r8, r3
   10d66:	str	r3, [sp, #48]	; 0x30
   10d68:	movs	r3, #0
   10d6a:	str	r3, [sp, #24]
   10d6c:	ldr	r3, [sp, #0]
   10d6e:	cmp	r3, #9
   10d70:	bhi.n	10dc8 <_dtoa_r+0x1f0>
   10d72:	cmp	r3, #5
   10d74:	ble.w	11a00 <_dtoa_r+0xe28>
   10d78:	subs	r3, #4
   10d7a:	str	r3, [sp, #0]
   10d7c:	movs	r6, #0
   10d7e:	ldr	r3, [sp, #0]
   10d80:	subs	r3, #2
   10d82:	cmp	r3, #3
   10d84:	bhi.w	119ce <_dtoa_r+0xdf6>
   10d88:	tbh	[pc, r3, lsl #1]
   10d8c:	.word	0x0224032b
   10d90:	.word	0x04500336
   10d94:	ldr	r3, [pc, #272]	; (10ea8 <_dtoa_r+0x2d0>)
   10d96:	ldr	r2, [pc, #284]	; (10eb4 <_dtoa_r+0x2dc>)
   10d98:	ubfx	r0, r4, #0, #20
   10d9c:	cmp	r0, #0
   10d9e:	ite	ne
   10da0:	movne	r0, r3
   10da2:	moveq	r0, r2
   10da4:	b.n	10c62 <_dtoa_r+0x8a>
   10da6:	ubfx	r3, fp, #0, #20
   10daa:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   10dae:	subw	r4, r5, #1023	; 0x3ff
   10db2:	mov	r0, sl
   10db4:	str.w	r8, [sp, #60]	; 0x3c
   10db8:	orr.w	r1, r1, #3145728	; 0x300000
   10dbc:	ldr	r5, [sp, #96]	; 0x60
   10dbe:	b.n	10cce <_dtoa_r+0xf6>
   10dc0:	ldr	r0, [pc, #244]	; (10eb8 <_dtoa_r+0x2e0>)
   10dc2:	b.n	10c4a <_dtoa_r+0x72>
   10dc4:	adds	r3, r0, #3
   10dc6:	b.n	10c74 <_dtoa_r+0x9c>
   10dc8:	movs	r1, #0
   10dca:	str.w	r1, [r9, #68]	; 0x44
   10dce:	mov	r0, r9
   10dd0:	mov	r4, r1
   10dd2:	str	r1, [sp, #0]
   10dd4:	bl	12540 <_Balloc>
   10dd8:	mov.w	r3, #4294967295
   10ddc:	str	r3, [sp, #32]
   10dde:	str	r3, [sp, #56]	; 0x38
   10de0:	movs	r3, #1
   10de2:	str	r0, [sp, #36]	; 0x24
   10de4:	str.w	r0, [r9, #64]	; 0x40
   10de8:	str	r4, [sp, #20]
   10dea:	str	r3, [sp, #44]	; 0x2c
   10dec:	ldr	r3, [sp, #100]	; 0x64
   10dee:	cmp	r3, #0
   10df0:	blt.w	10f94 <_dtoa_r+0x3bc>
   10df4:	ldr	r2, [sp, #16]
   10df6:	cmp	r2, #14
   10df8:	bgt.w	10f94 <_dtoa_r+0x3bc>
   10dfc:	ldr	r3, [pc, #176]	; (10eb0 <_dtoa_r+0x2d8>)
   10dfe:	add.w	r3, r3, r2, lsl #3
   10e02:	vldr	d7, [r3]
   10e06:	ldr	r3, [sp, #20]
   10e08:	cmp	r3, #0
   10e0a:	vstr	d7, [sp]
   10e0e:	blt.w	1140e <_dtoa_r+0x836>
   10e12:	mov	r6, sl
   10e14:	mov	r7, fp
   10e16:	ldrd	sl, fp, [sp]
   10e1a:	mov	r0, r6
   10e1c:	mov	r2, sl
   10e1e:	mov	r3, fp
   10e20:	mov	r1, r7
   10e22:	bl	b95c <__aeabi_ddiv>
   10e26:	bl	bc68 <__aeabi_d2iz>
   10e2a:	mov	r4, r0
   10e2c:	bl	b63c <__aeabi_i2d>
   10e30:	mov	r2, sl
   10e32:	mov	r3, fp
   10e34:	bl	b708 <__aeabi_dmul>
   10e38:	mov	r3, r1
   10e3a:	mov	r2, r0
   10e3c:	mov	r1, r7
   10e3e:	mov	r0, r6
   10e40:	bl	b3a0 <__aeabi_dsub>
   10e44:	ldr	r5, [sp, #36]	; 0x24
   10e46:	add.w	r3, r4, #48	; 0x30
   10e4a:	strb	r3, [r5, #0]
   10e4c:	ldr	r3, [sp, #32]
   10e4e:	cmp	r3, #1
   10e50:	mov	r6, r0
   10e52:	mov	r7, r1
   10e54:	add.w	r5, r5, #1
   10e58:	beq.n	10f1e <_dtoa_r+0x346>
   10e5a:	movs	r2, #0
   10e5c:	ldr	r3, [pc, #92]	; (10ebc <_dtoa_r+0x2e4>)
   10e5e:	bl	b708 <__aeabi_dmul>
   10e62:	movs	r2, #0
   10e64:	movs	r3, #0
   10e66:	mov	r6, r0
   10e68:	mov	r7, r1
   10e6a:	bl	bbd8 <__aeabi_dcmpeq>
   10e6e:	cmp	r0, #0
   10e70:	bne.n	10f6e <_dtoa_r+0x396>
   10e72:	str.w	r9, [sp, #20]
   10e76:	ldr.w	sl, [sp, #32]
   10e7a:	ldr.w	fp, [sp, #36]	; 0x24
   10e7e:	ldrd	r8, r9, [sp]
   10e82:	b.n	10ed6 <_dtoa_r+0x2fe>
   10e84:	nop.w
   10e88:	.word	0x636f4361
   10e8c:	.word	0x3fd287a7
   10e90:	.word	0x8b60c8b3
   10e94:	.word	0x3fc68a28
   10e98:	.word	0x509f79fb
   10e9c:	.word	0x3fd34413
   10ea0:	.word	0x7ff00000
   10ea4:	.word	0x00014121
   10ea8:	.word	0x00014270
   10eac:	.word	0x3ff80000
   10eb0:	.word	0x00014378
   10eb4:	.word	0x00014264
   10eb8:	.word	0x00014120
   10ebc:	.word	0x40240000
   10ec0:	bl	b708 <__aeabi_dmul>
   10ec4:	movs	r2, #0
   10ec6:	movs	r3, #0
   10ec8:	mov	r6, r0
   10eca:	mov	r7, r1
   10ecc:	bl	bbd8 <__aeabi_dcmpeq>
   10ed0:	cmp	r0, #0
   10ed2:	bne.w	11632 <_dtoa_r+0xa5a>
   10ed6:	mov	r2, r8
   10ed8:	mov	r3, r9
   10eda:	mov	r0, r6
   10edc:	mov	r1, r7
   10ede:	bl	b95c <__aeabi_ddiv>
   10ee2:	bl	bc68 <__aeabi_d2iz>
   10ee6:	mov	r4, r0
   10ee8:	bl	b63c <__aeabi_i2d>
   10eec:	mov	r2, r8
   10eee:	mov	r3, r9
   10ef0:	bl	b708 <__aeabi_dmul>
   10ef4:	mov	r2, r0
   10ef6:	mov	r3, r1
   10ef8:	mov	r0, r6
   10efa:	mov	r1, r7
   10efc:	bl	b3a0 <__aeabi_dsub>
   10f00:	add.w	lr, r4, #48	; 0x30
   10f04:	strb.w	lr, [r5], #1
   10f08:	rsb	lr, fp, r5
   10f0c:	cmp	lr, sl
   10f0e:	mov	r6, r0
   10f10:	mov	r7, r1
   10f12:	mov.w	r2, #0
   10f16:	ldr	r3, [pc, #696]	; (111d0 <_dtoa_r+0x5f8>)
   10f18:	bne.n	10ec0 <_dtoa_r+0x2e8>
   10f1a:	ldr.w	r9, [sp, #20]
   10f1e:	mov	r2, r6
   10f20:	mov	r3, r7
   10f22:	mov	r0, r6
   10f24:	mov	r1, r7
   10f26:	bl	b3a4 <__adddf3>
   10f2a:	mov	r6, r0
   10f2c:	mov	r7, r1
   10f2e:	mov	r2, r0
   10f30:	mov	r3, r1
   10f32:	ldrd	r0, r1, [sp]
   10f36:	bl	bbec <__aeabi_dcmplt>
   10f3a:	cbnz	r0, 10f4e <_dtoa_r+0x376>
   10f3c:	mov	r2, r6
   10f3e:	mov	r3, r7
   10f40:	ldrd	r0, r1, [sp]
   10f44:	bl	bbd8 <__aeabi_dcmpeq>
   10f48:	cbz	r0, 10f6e <_dtoa_r+0x396>
   10f4a:	lsls	r3, r4, #31
   10f4c:	bpl.n	10f6e <_dtoa_r+0x396>
   10f4e:	ldrb.w	r4, [r5, #-1]
   10f52:	ldr	r2, [sp, #36]	; 0x24
   10f54:	subs	r3, r5, #1
   10f56:	b.n	10f62 <_dtoa_r+0x38a>
   10f58:	cmp	r2, r3
   10f5a:	beq.w	11756 <_dtoa_r+0xb7e>
   10f5e:	ldrb.w	r4, [r3, #-1]!
   10f62:	cmp	r4, #57	; 0x39
   10f64:	add.w	r5, r3, #1
   10f68:	beq.n	10f58 <_dtoa_r+0x380>
   10f6a:	adds	r4, #1
   10f6c:	strb	r4, [r3, #0]
   10f6e:	ldr	r1, [sp, #40]	; 0x28
   10f70:	mov	r0, r9
   10f72:	bl	1258c <_Bfree>
   10f76:	movs	r2, #0
   10f78:	ldr	r3, [sp, #16]
   10f7a:	strb	r2, [r5, #0]
   10f7c:	ldr	r2, [sp, #12]
   10f7e:	adds	r3, #1
   10f80:	str	r3, [r2, #0]
   10f82:	ldr	r3, [sp, #148]	; 0x94
   10f84:	cmp	r3, #0
   10f86:	beq.w	116c0 <_dtoa_r+0xae8>
   10f8a:	ldr	r0, [sp, #36]	; 0x24
   10f8c:	str	r5, [r3, #0]
   10f8e:	add	sp, #108	; 0x6c
   10f90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f94:	ldr	r2, [sp, #44]	; 0x2c
   10f96:	cmp	r2, #0
   10f98:	beq.w	111b8 <_dtoa_r+0x5e0>
   10f9c:	ldr	r2, [sp, #0]
   10f9e:	cmp	r2, #1
   10fa0:	ble.w	11452 <_dtoa_r+0x87a>
   10fa4:	ldr	r3, [sp, #32]
   10fa6:	ldr	r2, [sp, #24]
   10fa8:	subs	r7, r3, #1
   10faa:	cmp	r2, r7
   10fac:	blt.w	116c6 <_dtoa_r+0xaee>
   10fb0:	subs	r7, r2, r7
   10fb2:	ldr	r3, [sp, #32]
   10fb4:	cmp	r3, #0
   10fb6:	blt.w	118ba <_dtoa_r+0xce2>
   10fba:	ldr	r5, [sp, #28]
   10fbc:	ldr	r3, [sp, #32]
   10fbe:	ldr	r2, [sp, #28]
   10fc0:	movs	r1, #1
   10fc2:	add	r2, r3
   10fc4:	mov	r0, r9
   10fc6:	str	r2, [sp, #28]
   10fc8:	add	r8, r3
   10fca:	bl	12754 <__i2b>
   10fce:	mov	r6, r0
   10fd0:	cbz	r5, 10fec <_dtoa_r+0x414>
   10fd2:	cmp.w	r8, #0
   10fd6:	ble.n	10fec <_dtoa_r+0x414>
   10fd8:	cmp	r5, r8
   10fda:	ldr	r2, [sp, #28]
   10fdc:	mov	r3, r5
   10fde:	it	ge
   10fe0:	movge	r3, r8
   10fe2:	subs	r2, r2, r3
   10fe4:	str	r2, [sp, #28]
   10fe6:	subs	r5, r5, r3
   10fe8:	rsb	r8, r3, r8
   10fec:	ldr	r3, [sp, #24]
   10fee:	cmp	r3, #0
   10ff0:	ble.w	115de <_dtoa_r+0xa06>
   10ff4:	ldr	r2, [sp, #44]	; 0x2c
   10ff6:	cmp	r2, #0
   10ff8:	beq.w	11400 <_dtoa_r+0x828>
   10ffc:	cmp	r7, #0
   10ffe:	beq.w	11400 <_dtoa_r+0x828>
   11002:	mov	r1, r6
   11004:	mov	r2, r7
   11006:	mov	r0, r9
   11008:	bl	12898 <__pow5mult>
   1100c:	ldr	r2, [sp, #40]	; 0x28
   1100e:	mov	r1, r0
   11010:	mov	r6, r0
   11012:	mov	r0, r9
   11014:	bl	12768 <__multiply>
   11018:	ldr	r1, [sp, #40]	; 0x28
   1101a:	mov	r4, r0
   1101c:	mov	r0, r9
   1101e:	bl	1258c <_Bfree>
   11022:	ldr	r3, [sp, #24]
   11024:	subs	r3, r3, r7
   11026:	str	r3, [sp, #24]
   11028:	bne.w	113fe <_dtoa_r+0x826>
   1102c:	movs	r1, #1
   1102e:	mov	r0, r9
   11030:	bl	12754 <__i2b>
   11034:	ldr	r3, [sp, #48]	; 0x30
   11036:	str	r0, [sp, #24]
   11038:	cmp	r3, #0
   1103a:	beq.w	11468 <_dtoa_r+0x890>
   1103e:	mov	r1, r0
   11040:	mov	r2, r3
   11042:	mov	r0, r9
   11044:	bl	12898 <__pow5mult>
   11048:	ldr	r3, [sp, #0]
   1104a:	str	r0, [sp, #24]
   1104c:	cmp	r3, #1
   1104e:	ble.w	11638 <_dtoa_r+0xa60>
   11052:	movs	r7, #0
   11054:	ldr	r2, [sp, #24]
   11056:	ldr	r3, [r2, #16]
   11058:	add.w	r3, r2, r3, lsl #2
   1105c:	ldr	r0, [r3, #16]
   1105e:	bl	126b8 <__hi0bits>
   11062:	rsb	r0, r0, #32
   11066:	add	r0, r8
   11068:	ands.w	r0, r0, #31
   1106c:	beq.w	11464 <_dtoa_r+0x88c>
   11070:	rsb	r3, r0, #32
   11074:	cmp	r3, #4
   11076:	ble.w	119f4 <_dtoa_r+0xe1c>
   1107a:	rsb	r0, r0, #28
   1107e:	ldr	r3, [sp, #28]
   11080:	add	r3, r0
   11082:	str	r3, [sp, #28]
   11084:	add	r5, r0
   11086:	add	r8, r0
   11088:	ldr	r3, [sp, #28]
   1108a:	cmp	r3, #0
   1108c:	ble.n	1109a <_dtoa_r+0x4c2>
   1108e:	mov	r1, r4
   11090:	mov	r2, r3
   11092:	mov	r0, r9
   11094:	bl	12938 <__lshift>
   11098:	mov	r4, r0
   1109a:	cmp.w	r8, #0
   1109e:	ble.n	110ac <_dtoa_r+0x4d4>
   110a0:	mov	r2, r8
   110a2:	ldr	r1, [sp, #24]
   110a4:	mov	r0, r9
   110a6:	bl	12938 <__lshift>
   110aa:	str	r0, [sp, #24]
   110ac:	ldr	r3, [sp, #52]	; 0x34
   110ae:	cmp	r3, #0
   110b0:	bne.w	115a8 <_dtoa_r+0x9d0>
   110b4:	ldr	r3, [sp, #32]
   110b6:	cmp	r3, #0
   110b8:	ble.w	115e2 <_dtoa_r+0xa0a>
   110bc:	ldr	r3, [sp, #44]	; 0x2c
   110be:	cmp	r3, #0
   110c0:	bne.w	114ac <_dtoa_r+0x8d4>
   110c4:	ldr.w	fp, [sp, #36]	; 0x24
   110c8:	ldr	r7, [sp, #32]
   110ca:	ldr.w	r8, [sp, #24]
   110ce:	mov	r5, fp
   110d0:	b.n	110d8 <_dtoa_r+0x500>
   110d2:	bl	125a0 <__multadd>
   110d6:	mov	r4, r0
   110d8:	mov	r1, r8
   110da:	mov	r0, r4
   110dc:	bl	10aac <quorem>
   110e0:	add.w	sl, r0, #48	; 0x30
   110e4:	strb.w	sl, [r5], #1
   110e8:	rsb	r3, fp, r5
   110ec:	cmp	r3, r7
   110ee:	mov.w	r2, #10
   110f2:	mov.w	r3, #0
   110f6:	mov	r1, r4
   110f8:	mov	r0, r9
   110fa:	blt.n	110d2 <_dtoa_r+0x4fa>
   110fc:	ldr	r3, [sp, #36]	; 0x24
   110fe:	ldr	r2, [sp, #32]
   11100:	cmp	r2, #1
   11102:	ite	ge
   11104:	addge	r3, r3, r2
   11106:	addlt	r3, #1
   11108:	mov	r5, r3
   1110a:	mov.w	fp, #0
   1110e:	mov	r1, r4
   11110:	movs	r2, #1
   11112:	mov	r0, r9
   11114:	bl	12938 <__lshift>
   11118:	ldr	r1, [sp, #24]
   1111a:	str	r0, [sp, #40]	; 0x28
   1111c:	bl	129e8 <__mcmp>
   11120:	cmp	r0, #0
   11122:	ble.w	11730 <_dtoa_r+0xb58>
   11126:	ldrb.w	r2, [r5, #-1]
   1112a:	ldr	r1, [sp, #36]	; 0x24
   1112c:	subs	r3, r5, #1
   1112e:	b.n	1113a <_dtoa_r+0x562>
   11130:	cmp	r3, r1
   11132:	beq.w	1161e <_dtoa_r+0xa46>
   11136:	ldrb.w	r2, [r3, #-1]!
   1113a:	cmp	r2, #57	; 0x39
   1113c:	add.w	r5, r3, #1
   11140:	beq.n	11130 <_dtoa_r+0x558>
   11142:	adds	r2, #1
   11144:	strb	r2, [r3, #0]
   11146:	ldr	r1, [sp, #24]
   11148:	mov	r0, r9
   1114a:	bl	1258c <_Bfree>
   1114e:	cmp	r6, #0
   11150:	beq.w	10f6e <_dtoa_r+0x396>
   11154:	cmp.w	fp, #0
   11158:	beq.n	11166 <_dtoa_r+0x58e>
   1115a:	cmp	fp, r6
   1115c:	beq.n	11166 <_dtoa_r+0x58e>
   1115e:	mov	r1, fp
   11160:	mov	r0, r9
   11162:	bl	1258c <_Bfree>
   11166:	mov	r1, r6
   11168:	mov	r0, r9
   1116a:	bl	1258c <_Bfree>
   1116e:	b.n	10f6e <_dtoa_r+0x396>
   11170:	movs	r3, #1
   11172:	str	r3, [sp, #52]	; 0x34
   11174:	b.n	10d4e <_dtoa_r+0x176>
   11176:	ldr.w	r8, [sp, #16]
   1117a:	mov	r0, r8
   1117c:	bl	b63c <__aeabi_i2d>
   11180:	mov	r2, r0
   11182:	mov	r3, r1
   11184:	mov	r0, r6
   11186:	mov	r1, r7
   11188:	bl	bbd8 <__aeabi_dcmpeq>
   1118c:	cmp	r0, #0
   1118e:	bne.w	10d26 <_dtoa_r+0x14e>
   11192:	add.w	r3, r8, #4294967295
   11196:	str	r3, [sp, #16]
   11198:	b.n	10d26 <_dtoa_r+0x14e>
   1119a:	ldr	r2, [sp, #28]
   1119c:	ldr	r3, [sp, #16]
   1119e:	subs	r2, r2, r3
   111a0:	negs	r3, r3
   111a2:	str	r3, [sp, #24]
   111a4:	movs	r3, #0
   111a6:	str	r2, [sp, #28]
   111a8:	str	r3, [sp, #48]	; 0x30
   111aa:	b.n	10d6c <_dtoa_r+0x194>
   111ac:	rsb	r3, r8, #0
   111b0:	str	r3, [sp, #28]
   111b2:	mov.w	r8, #0
   111b6:	b.n	10d5c <_dtoa_r+0x184>
   111b8:	ldr	r7, [sp, #24]
   111ba:	ldr	r5, [sp, #28]
   111bc:	ldr	r6, [sp, #44]	; 0x2c
   111be:	b.n	10fd0 <_dtoa_r+0x3f8>
   111c0:	rsb	r4, r3, #32
   111c4:	lsl.w	r0, sl, r4
   111c8:	b.n	10cc0 <_dtoa_r+0xe8>
   111ca:	str	r0, [sp, #52]	; 0x34
   111cc:	b.n	10d4e <_dtoa_r+0x176>
   111ce:	nop
   111d0:	.word	0x40240000
   111d4:	movs	r3, #0
   111d6:	str	r3, [sp, #44]	; 0x2c
   111d8:	ldr	r3, [sp, #16]
   111da:	ldr	r2, [sp, #20]
   111dc:	add	r3, r2
   111de:	str	r3, [sp, #56]	; 0x38
   111e0:	adds	r3, #1
   111e2:	cmp	r3, #0
   111e4:	str	r3, [sp, #32]
   111e6:	ble.w	116e4 <_dtoa_r+0xb0c>
   111ea:	ldr	r4, [sp, #32]
   111ec:	mov	r5, r4
   111ee:	movs	r1, #0
   111f0:	cmp	r5, #23
   111f2:	str.w	r1, [r9, #68]	; 0x44
   111f6:	bls.n	11210 <_dtoa_r+0x638>
   111f8:	movs	r2, #1
   111fa:	movs	r3, #4
   111fc:	lsls	r3, r3, #1
   111fe:	add.w	r0, r3, #20
   11202:	cmp	r0, r5
   11204:	mov	r1, r2
   11206:	add.w	r2, r2, #1
   1120a:	bls.n	111fc <_dtoa_r+0x624>
   1120c:	str.w	r1, [r9, #68]	; 0x44
   11210:	mov	r0, r9
   11212:	bl	12540 <_Balloc>
   11216:	cmp	r4, #14
   11218:	str	r0, [sp, #36]	; 0x24
   1121a:	str.w	r0, [r9, #64]	; 0x40
   1121e:	bhi.w	10dec <_dtoa_r+0x214>
   11222:	cmp	r6, #0
   11224:	beq.w	10dec <_dtoa_r+0x214>
   11228:	ldr	r1, [sp, #16]
   1122a:	cmp	r1, #0
   1122c:	strd	sl, fp, [sp, #64]	; 0x40
   11230:	ble.w	11768 <_dtoa_r+0xb90>
   11234:	ldr	r3, [pc, #576]	; (11478 <_dtoa_r+0x8a0>)
   11236:	and.w	r2, r1, #15
   1123a:	asrs	r6, r1, #4
   1123c:	add.w	r3, r3, r2, lsl #3
   11240:	lsls	r0, r6, #27
   11242:	ldrd	r4, r5, [r3]
   11246:	bpl.w	116d6 <_dtoa_r+0xafe>
   1124a:	ldr	r3, [pc, #560]	; (1147c <_dtoa_r+0x8a4>)
   1124c:	mov	r0, sl
   1124e:	mov	r1, fp
   11250:	ldrd	r2, r3, [r3, #32]
   11254:	bl	b95c <__aeabi_ddiv>
   11258:	strd	r0, r1, [sp, #72]	; 0x48
   1125c:	and.w	r6, r6, #15
   11260:	mov.w	sl, #3
   11264:	cbz	r6, 11288 <_dtoa_r+0x6b0>
   11266:	ldr	r7, [pc, #532]	; (1147c <_dtoa_r+0x8a4>)
   11268:	lsls	r1, r6, #31
   1126a:	bpl.n	11280 <_dtoa_r+0x6a8>
   1126c:	mov	r0, r4
   1126e:	mov	r1, r5
   11270:	ldrd	r2, r3, [r7]
   11274:	bl	b708 <__aeabi_dmul>
   11278:	add.w	sl, sl, #1
   1127c:	mov	r4, r0
   1127e:	mov	r5, r1
   11280:	asrs	r6, r6, #1
   11282:	add.w	r7, r7, #8
   11286:	bne.n	11268 <_dtoa_r+0x690>
   11288:	mov	r2, r4
   1128a:	mov	r3, r5
   1128c:	ldrd	r0, r1, [sp, #72]	; 0x48
   11290:	bl	b95c <__aeabi_ddiv>
   11294:	mov	r6, r0
   11296:	mov	r7, r1
   11298:	ldr	r3, [sp, #52]	; 0x34
   1129a:	cbz	r3, 112ae <_dtoa_r+0x6d6>
   1129c:	movs	r2, #0
   1129e:	ldr	r3, [pc, #480]	; (11480 <_dtoa_r+0x8a8>)
   112a0:	mov	r0, r6
   112a2:	mov	r1, r7
   112a4:	bl	bbec <__aeabi_dcmplt>
   112a8:	cmp	r0, #0
   112aa:	bne.w	118e2 <_dtoa_r+0xd0a>
   112ae:	mov	r0, sl
   112b0:	bl	b63c <__aeabi_i2d>
   112b4:	mov	r2, r6
   112b6:	mov	r3, r7
   112b8:	bl	b708 <__aeabi_dmul>
   112bc:	ldr	r3, [pc, #452]	; (11484 <_dtoa_r+0x8ac>)
   112be:	movs	r2, #0
   112c0:	bl	b3a4 <__adddf3>
   112c4:	ldr	r3, [sp, #32]
   112c6:	mov	r4, r0
   112c8:	sub.w	r5, r1, #54525952	; 0x3400000
   112cc:	cmp	r3, #0
   112ce:	beq.w	11688 <_dtoa_r+0xab0>
   112d2:	ldr	r3, [sp, #16]
   112d4:	str	r3, [sp, #88]	; 0x58
   112d6:	ldr	r3, [sp, #32]
   112d8:	str	r3, [sp, #72]	; 0x48
   112da:	ldr	r3, [sp, #44]	; 0x2c
   112dc:	cmp	r3, #0
   112de:	beq.w	1180a <_dtoa_r+0xc32>
   112e2:	ldr	r2, [sp, #72]	; 0x48
   112e4:	ldr	r3, [pc, #400]	; (11478 <_dtoa_r+0x8a0>)
   112e6:	ldr	r1, [pc, #416]	; (11488 <_dtoa_r+0x8b0>)
   112e8:	add.w	r3, r3, r2, lsl #3
   112ec:	ldrd	r2, r3, [r3, #-8]
   112f0:	movs	r0, #0
   112f2:	bl	b95c <__aeabi_ddiv>
   112f6:	mov	r2, r4
   112f8:	mov	r3, r5
   112fa:	bl	b3a0 <__aeabi_dsub>
   112fe:	mov	sl, r0
   11300:	mov	fp, r1
   11302:	mov	r0, r6
   11304:	mov	r1, r7
   11306:	bl	bc68 <__aeabi_d2iz>
   1130a:	mov	r4, r0
   1130c:	bl	b63c <__aeabi_i2d>
   11310:	mov	r2, r0
   11312:	mov	r3, r1
   11314:	mov	r0, r6
   11316:	mov	r1, r7
   11318:	bl	b3a0 <__aeabi_dsub>
   1131c:	adds	r4, #48	; 0x30
   1131e:	ldr	r5, [sp, #36]	; 0x24
   11320:	uxtb	r4, r4
   11322:	mov	r6, r0
   11324:	mov	r7, r1
   11326:	strb	r4, [r5, #0]
   11328:	mov	r2, r0
   1132a:	mov	r3, r1
   1132c:	mov	r0, sl
   1132e:	mov	r1, fp
   11330:	adds	r5, #1
   11332:	bl	bc28 <__aeabi_dcmpgt>
   11336:	cmp	r0, #0
   11338:	bne.n	113dc <_dtoa_r+0x804>
   1133a:	mov	r2, r6
   1133c:	mov	r3, r7
   1133e:	movs	r0, #0
   11340:	ldr	r1, [pc, #316]	; (11480 <_dtoa_r+0x8a8>)
   11342:	bl	b3a0 <__aeabi_dsub>
   11346:	mov	r2, r0
   11348:	mov	r3, r1
   1134a:	mov	r0, sl
   1134c:	mov	r1, fp
   1134e:	bl	bc28 <__aeabi_dcmpgt>
   11352:	cmp	r0, #0
   11354:	bne.w	11968 <_dtoa_r+0xd90>
   11358:	ldr	r2, [sp, #72]	; 0x48
   1135a:	cmp	r2, #1
   1135c:	ble.w	1174e <_dtoa_r+0xb76>
   11360:	ldr	r3, [sp, #72]	; 0x48
   11362:	ldr	r2, [sp, #36]	; 0x24
   11364:	str.w	r8, [sp, #72]	; 0x48
   11368:	add	r3, r2
   1136a:	mov	r8, r3
   1136c:	b.n	1138a <_dtoa_r+0x7b2>
   1136e:	movs	r0, #0
   11370:	ldr	r1, [pc, #268]	; (11480 <_dtoa_r+0x8a8>)
   11372:	bl	b3a0 <__aeabi_dsub>
   11376:	mov	r2, sl
   11378:	mov	r3, fp
   1137a:	bl	bbec <__aeabi_dcmplt>
   1137e:	cmp	r0, #0
   11380:	bne.w	11968 <_dtoa_r+0xd90>
   11384:	cmp	r5, r8
   11386:	beq.w	1174a <_dtoa_r+0xb72>
   1138a:	mov	r0, sl
   1138c:	mov	r1, fp
   1138e:	movs	r2, #0
   11390:	ldr	r3, [pc, #248]	; (1148c <_dtoa_r+0x8b4>)
   11392:	bl	b708 <__aeabi_dmul>
   11396:	movs	r2, #0
   11398:	ldr	r3, [pc, #240]	; (1148c <_dtoa_r+0x8b4>)
   1139a:	mov	sl, r0
   1139c:	mov	fp, r1
   1139e:	mov	r0, r6
   113a0:	mov	r1, r7
   113a2:	bl	b708 <__aeabi_dmul>
   113a6:	mov	r7, r1
   113a8:	mov	r6, r0
   113aa:	bl	bc68 <__aeabi_d2iz>
   113ae:	mov	r4, r0
   113b0:	bl	b63c <__aeabi_i2d>
   113b4:	mov	r2, r0
   113b6:	mov	r3, r1
   113b8:	mov	r0, r6
   113ba:	mov	r1, r7
   113bc:	bl	b3a0 <__aeabi_dsub>
   113c0:	adds	r4, #48	; 0x30
   113c2:	uxtb	r4, r4
   113c4:	mov	r2, sl
   113c6:	mov	r3, fp
   113c8:	strb.w	r4, [r5], #1
   113cc:	mov	r6, r0
   113ce:	mov	r7, r1
   113d0:	bl	bbec <__aeabi_dcmplt>
   113d4:	mov	r2, r6
   113d6:	mov	r3, r7
   113d8:	cmp	r0, #0
   113da:	beq.n	1136e <_dtoa_r+0x796>
   113dc:	ldr	r3, [sp, #88]	; 0x58
   113de:	str	r3, [sp, #16]
   113e0:	b.n	10f6e <_dtoa_r+0x396>
   113e2:	movs	r3, #0
   113e4:	str	r3, [sp, #44]	; 0x2c
   113e6:	ldr	r3, [sp, #20]
   113e8:	cmp	r3, #0
   113ea:	ble.w	116ee <_dtoa_r+0xb16>
   113ee:	mov	r5, r3
   113f0:	mov	r4, r3
   113f2:	str	r3, [sp, #56]	; 0x38
   113f4:	str	r3, [sp, #32]
   113f6:	b.n	111ee <_dtoa_r+0x616>
   113f8:	movs	r3, #1
   113fa:	str	r3, [sp, #44]	; 0x2c
   113fc:	b.n	113e6 <_dtoa_r+0x80e>
   113fe:	str	r4, [sp, #40]	; 0x28
   11400:	ldr	r2, [sp, #24]
   11402:	ldr	r1, [sp, #40]	; 0x28
   11404:	mov	r0, r9
   11406:	bl	12898 <__pow5mult>
   1140a:	mov	r4, r0
   1140c:	b.n	1102c <_dtoa_r+0x454>
   1140e:	ldr	r3, [sp, #32]
   11410:	cmp	r3, #0
   11412:	bgt.w	10e12 <_dtoa_r+0x23a>
   11416:	bne.w	116b8 <_dtoa_r+0xae0>
   1141a:	movs	r2, #0
   1141c:	ldr	r3, [pc, #112]	; (11490 <_dtoa_r+0x8b8>)
   1141e:	ldrd	r0, r1, [sp]
   11422:	bl	b708 <__aeabi_dmul>
   11426:	mov	r3, fp
   11428:	mov	r2, sl
   1142a:	bl	bc14 <__aeabi_dcmpge>
   1142e:	ldr	r3, [sp, #32]
   11430:	str	r3, [sp, #24]
   11432:	mov	r6, r3
   11434:	cmp	r0, #0
   11436:	beq.w	1160e <_dtoa_r+0xa36>
   1143a:	ldr	r3, [sp, #20]
   1143c:	ldr	r5, [sp, #36]	; 0x24
   1143e:	mvns	r3, r3
   11440:	str	r3, [sp, #16]
   11442:	ldr	r1, [sp, #24]
   11444:	mov	r0, r9
   11446:	bl	1258c <_Bfree>
   1144a:	cmp	r6, #0
   1144c:	beq.w	10f6e <_dtoa_r+0x396>
   11450:	b.n	11166 <_dtoa_r+0x58e>
   11452:	ldr	r2, [sp, #60]	; 0x3c
   11454:	cmp	r2, #0
   11456:	beq.w	118ca <_dtoa_r+0xcf2>
   1145a:	addw	r3, r3, #1075	; 0x433
   1145e:	ldr	r7, [sp, #24]
   11460:	ldr	r5, [sp, #28]
   11462:	b.n	10fbe <_dtoa_r+0x3e6>
   11464:	movs	r0, #28
   11466:	b.n	1107e <_dtoa_r+0x4a6>
   11468:	ldr	r3, [sp, #0]
   1146a:	cmp	r3, #1
   1146c:	ble.w	11970 <_dtoa_r+0xd98>
   11470:	ldr	r7, [sp, #48]	; 0x30
   11472:	movs	r0, #1
   11474:	b.n	11066 <_dtoa_r+0x48e>
   11476:	nop
   11478:	.word	0x00014378
   1147c:	.word	0x00014440
   11480:	.word	0x3ff00000
   11484:	.word	0x401c0000
   11488:	.word	0x3fe00000
   1148c:	.word	0x40240000
   11490:	.word	0x40140000
   11494:	mov	r1, r6
   11496:	movs	r3, #0
   11498:	movs	r2, #10
   1149a:	mov	r0, r9
   1149c:	bl	125a0 <__multadd>
   114a0:	ldr	r3, [sp, #56]	; 0x38
   114a2:	cmp	r3, #0
   114a4:	mov	r6, r0
   114a6:	ble.w	119c4 <_dtoa_r+0xdec>
   114aa:	str	r3, [sp, #32]
   114ac:	cmp	r5, #0
   114ae:	ble.n	114bc <_dtoa_r+0x8e4>
   114b0:	mov	r1, r6
   114b2:	mov	r2, r5
   114b4:	mov	r0, r9
   114b6:	bl	12938 <__lshift>
   114ba:	mov	r6, r0
   114bc:	cmp	r7, #0
   114be:	bne.w	117ba <_dtoa_r+0xbe2>
   114c2:	mov	r8, r6
   114c4:	ldr	r3, [sp, #32]
   114c6:	ldr	r2, [sp, #36]	; 0x24
   114c8:	subs	r3, #1
   114ca:	adds	r3, r2, r3
   114cc:	str	r3, [sp, #32]
   114ce:	and.w	r3, sl, #1
   114d2:	str	r3, [sp, #40]	; 0x28
   114d4:	mov	r7, r2
   114d6:	ldr.w	fp, [sp, #24]
   114da:	mov	r0, r4
   114dc:	mov	r1, fp
   114de:	bl	10aac <quorem>
   114e2:	mov	r1, r6
   114e4:	mov	r5, r0
   114e6:	mov	r0, r4
   114e8:	bl	129e8 <__mcmp>
   114ec:	mov	r2, r8
   114ee:	mov	r1, fp
   114f0:	mov	sl, r0
   114f2:	mov	r0, r9
   114f4:	bl	12a2c <__mdiff>
   114f8:	ldr	r2, [r0, #12]
   114fa:	mov	fp, r0
   114fc:	add.w	r3, r5, #48	; 0x30
   11500:	cmp	r2, #0
   11502:	bne.n	11598 <_dtoa_r+0x9c0>
   11504:	mov	r1, r0
   11506:	mov	r0, r4
   11508:	str	r3, [sp, #28]
   1150a:	bl	129e8 <__mcmp>
   1150e:	mov	r1, fp
   11510:	str	r0, [sp, #20]
   11512:	mov	r0, r9
   11514:	bl	1258c <_Bfree>
   11518:	ldr	r2, [sp, #20]
   1151a:	ldr	r3, [sp, #28]
   1151c:	cbnz	r2, 1152a <_dtoa_r+0x952>
   1151e:	ldr	r1, [sp, #0]
   11520:	cbnz	r1, 1152a <_dtoa_r+0x952>
   11522:	ldr	r1, [sp, #40]	; 0x28
   11524:	cmp	r1, #0
   11526:	beq.w	11994 <_dtoa_r+0xdbc>
   1152a:	cmp.w	sl, #0
   1152e:	blt.w	116f8 <_dtoa_r+0xb20>
   11532:	bne.n	11540 <_dtoa_r+0x968>
   11534:	ldr	r1, [sp, #0]
   11536:	cbnz	r1, 11540 <_dtoa_r+0x968>
   11538:	ldr	r1, [sp, #40]	; 0x28
   1153a:	cmp	r1, #0
   1153c:	beq.w	116f8 <_dtoa_r+0xb20>
   11540:	cmp	r2, #0
   11542:	bgt.w	117e2 <_dtoa_r+0xc0a>
   11546:	ldr	r2, [sp, #32]
   11548:	strb	r3, [r7, #0]
   1154a:	add.w	sl, r7, #1
   1154e:	cmp	r7, r2
   11550:	mov	r5, sl
   11552:	beq.w	117fa <_dtoa_r+0xc22>
   11556:	mov	r1, r4
   11558:	movs	r3, #0
   1155a:	movs	r2, #10
   1155c:	mov	r0, r9
   1155e:	bl	125a0 <__multadd>
   11562:	cmp	r6, r8
   11564:	mov	r4, r0
   11566:	mov	r1, r6
   11568:	mov.w	r3, #0
   1156c:	mov.w	r2, #10
   11570:	mov	r0, r9
   11572:	beq.n	1158c <_dtoa_r+0x9b4>
   11574:	bl	125a0 <__multadd>
   11578:	mov	r1, r8
   1157a:	mov	r6, r0
   1157c:	movs	r3, #0
   1157e:	movs	r2, #10
   11580:	mov	r0, r9
   11582:	bl	125a0 <__multadd>
   11586:	mov	r7, sl
   11588:	mov	r8, r0
   1158a:	b.n	114d6 <_dtoa_r+0x8fe>
   1158c:	bl	125a0 <__multadd>
   11590:	mov	r7, sl
   11592:	mov	r6, r0
   11594:	mov	r8, r0
   11596:	b.n	114d6 <_dtoa_r+0x8fe>
   11598:	mov	r1, r0
   1159a:	mov	r0, r9
   1159c:	str	r3, [sp, #20]
   1159e:	bl	1258c <_Bfree>
   115a2:	movs	r2, #1
   115a4:	ldr	r3, [sp, #20]
   115a6:	b.n	1152a <_dtoa_r+0x952>
   115a8:	ldr	r1, [sp, #24]
   115aa:	mov	r0, r4
   115ac:	bl	129e8 <__mcmp>
   115b0:	cmp	r0, #0
   115b2:	bge.w	110b4 <_dtoa_r+0x4dc>
   115b6:	mov	r1, r4
   115b8:	ldr	r4, [sp, #16]
   115ba:	movs	r3, #0
   115bc:	subs	r4, #1
   115be:	movs	r2, #10
   115c0:	mov	r0, r9
   115c2:	str	r4, [sp, #16]
   115c4:	bl	125a0 <__multadd>
   115c8:	ldr	r3, [sp, #44]	; 0x2c
   115ca:	mov	r4, r0
   115cc:	cmp	r3, #0
   115ce:	bne.w	11494 <_dtoa_r+0x8bc>
   115d2:	ldr	r3, [sp, #56]	; 0x38
   115d4:	cmp	r3, #0
   115d6:	ble.w	119b4 <_dtoa_r+0xddc>
   115da:	str	r3, [sp, #32]
   115dc:	b.n	110c4 <_dtoa_r+0x4ec>
   115de:	ldr	r4, [sp, #40]	; 0x28
   115e0:	b.n	1102c <_dtoa_r+0x454>
   115e2:	ldr	r3, [sp, #0]
   115e4:	cmp	r3, #2
   115e6:	ble.w	110bc <_dtoa_r+0x4e4>
   115ea:	ldr	r3, [sp, #32]
   115ec:	cmp	r3, #0
   115ee:	bne.w	1192c <_dtoa_r+0xd54>
   115f2:	ldr	r1, [sp, #24]
   115f4:	movs	r2, #5
   115f6:	mov	r0, r9
   115f8:	bl	125a0 <__multadd>
   115fc:	mov	r1, r0
   115fe:	str	r0, [sp, #24]
   11600:	mov	r0, r4
   11602:	bl	129e8 <__mcmp>
   11606:	cmp	r0, #0
   11608:	str	r4, [sp, #40]	; 0x28
   1160a:	ble.w	1143a <_dtoa_r+0x862>
   1160e:	ldr	r2, [sp, #16]
   11610:	ldr	r1, [sp, #36]	; 0x24
   11612:	movs	r3, #49	; 0x31
   11614:	adds	r2, #1
   11616:	str	r2, [sp, #16]
   11618:	strb	r3, [r1, #0]
   1161a:	adds	r5, r1, #1
   1161c:	b.n	11442 <_dtoa_r+0x86a>
   1161e:	ldr	r2, [sp, #16]
   11620:	adds	r2, #1
   11622:	str	r2, [sp, #16]
   11624:	ldr	r2, [sp, #36]	; 0x24
   11626:	movs	r3, #49	; 0x31
   11628:	strb	r3, [r2, #0]
   1162a:	b.n	11146 <_dtoa_r+0x56e>
   1162c:	movs	r3, #1
   1162e:	str	r3, [sp, #44]	; 0x2c
   11630:	b.n	111d8 <_dtoa_r+0x600>
   11632:	ldr.w	r9, [sp, #20]
   11636:	b.n	10f6e <_dtoa_r+0x396>
   11638:	cmp.w	sl, #0
   1163c:	bne.w	11052 <_dtoa_r+0x47a>
   11640:	ubfx	r3, fp, #0, #20
   11644:	cmp	r3, #0
   11646:	bne.w	118c6 <_dtoa_r+0xcee>
   1164a:	bic.w	r7, fp, #2147483648	; 0x80000000
   1164e:	lsrs	r7, r7, #20
   11650:	lsls	r7, r7, #20
   11652:	cbz	r7, 11660 <_dtoa_r+0xa88>
   11654:	ldr	r3, [sp, #28]
   11656:	adds	r3, #1
   11658:	str	r3, [sp, #28]
   1165a:	add.w	r8, r8, #1
   1165e:	movs	r7, #1
   11660:	ldr	r3, [sp, #48]	; 0x30
   11662:	movs	r0, #1
   11664:	cmp	r3, #0
   11666:	beq.w	11066 <_dtoa_r+0x48e>
   1166a:	b.n	11054 <_dtoa_r+0x47c>
   1166c:	mov	r0, sl
   1166e:	bl	b63c <__aeabi_i2d>
   11672:	mov	r2, r6
   11674:	mov	r3, r7
   11676:	bl	b708 <__aeabi_dmul>
   1167a:	movs	r2, #0
   1167c:	ldr	r3, [pc, #764]	; (1197c <_dtoa_r+0xda4>)
   1167e:	bl	b3a4 <__adddf3>
   11682:	mov	r4, r0
   11684:	sub.w	r5, r1, #54525952	; 0x3400000
   11688:	mov	r0, r6
   1168a:	mov	r1, r7
   1168c:	movs	r2, #0
   1168e:	ldr	r3, [pc, #752]	; (11980 <_dtoa_r+0xda8>)
   11690:	bl	b3a0 <__aeabi_dsub>
   11694:	mov	r2, r4
   11696:	mov	r3, r5
   11698:	mov	r6, r0
   1169a:	mov	r7, r1
   1169c:	bl	bc28 <__aeabi_dcmpgt>
   116a0:	cmp	r0, #0
   116a2:	bne.w	11802 <_dtoa_r+0xc2a>
   116a6:	mov	r2, r4
   116a8:	add.w	r3, r5, #2147483648	; 0x80000000
   116ac:	mov	r0, r6
   116ae:	mov	r1, r7
   116b0:	bl	bbec <__aeabi_dcmplt>
   116b4:	cmp	r0, #0
   116b6:	beq.n	1174e <_dtoa_r+0xb76>
   116b8:	movs	r3, #0
   116ba:	str	r3, [sp, #24]
   116bc:	mov	r6, r3
   116be:	b.n	1143a <_dtoa_r+0x862>
   116c0:	ldr	r0, [sp, #36]	; 0x24
   116c2:	b.w	10c4a <_dtoa_r+0x72>
   116c6:	ldr	r3, [sp, #24]
   116c8:	ldr	r2, [sp, #48]	; 0x30
   116ca:	str	r7, [sp, #24]
   116cc:	subs	r3, r7, r3
   116ce:	add	r2, r3
   116d0:	str	r2, [sp, #48]	; 0x30
   116d2:	movs	r7, #0
   116d4:	b.n	10fb2 <_dtoa_r+0x3da>
   116d6:	vldr	d7, [sp, #64]	; 0x40
   116da:	mov.w	sl, #2
   116de:	vstr	d7, [sp, #72]	; 0x48
   116e2:	b.n	11264 <_dtoa_r+0x68c>
   116e4:	mov	r4, r3
   116e6:	movs	r1, #0
   116e8:	str.w	r1, [r9, #68]	; 0x44
   116ec:	b.n	11210 <_dtoa_r+0x638>
   116ee:	movs	r4, #1
   116f0:	str	r4, [sp, #56]	; 0x38
   116f2:	str	r4, [sp, #32]
   116f4:	str	r4, [sp, #20]
   116f6:	b.n	116e6 <_dtoa_r+0xb0e>
   116f8:	cmp	r2, #0
   116fa:	mov	sl, r3
   116fc:	ble.n	11722 <_dtoa_r+0xb4a>
   116fe:	mov	r1, r4
   11700:	movs	r2, #1
   11702:	mov	r0, r9
   11704:	bl	12938 <__lshift>
   11708:	ldr	r1, [sp, #24]
   1170a:	mov	r4, r0
   1170c:	bl	129e8 <__mcmp>
   11710:	cmp	r0, #0
   11712:	ble.w	119a6 <_dtoa_r+0xdce>
   11716:	cmp.w	sl, #57	; 0x39
   1171a:	beq.w	11930 <_dtoa_r+0xd58>
   1171e:	add.w	sl, r5, #49	; 0x31
   11722:	mov	fp, r6
   11724:	strb.w	sl, [r7]
   11728:	adds	r5, r7, #1
   1172a:	mov	r6, r8
   1172c:	str	r4, [sp, #40]	; 0x28
   1172e:	b.n	11146 <_dtoa_r+0x56e>
   11730:	bne.n	1173c <_dtoa_r+0xb64>
   11732:	tst.w	sl, #1
   11736:	beq.n	1173c <_dtoa_r+0xb64>
   11738:	b.n	11126 <_dtoa_r+0x54e>
   1173a:	mov	r5, r2
   1173c:	ldrb.w	r3, [r5, #-1]
   11740:	cmp	r3, #48	; 0x30
   11742:	add.w	r2, r5, #4294967295
   11746:	beq.n	1173a <_dtoa_r+0xb62>
   11748:	b.n	11146 <_dtoa_r+0x56e>
   1174a:	ldr.w	r8, [sp, #72]	; 0x48
   1174e:	ldrd	sl, fp, [sp, #64]	; 0x40
   11752:	b.w	10dec <_dtoa_r+0x214>
   11756:	ldr	r1, [sp, #36]	; 0x24
   11758:	movs	r2, #48	; 0x30
   1175a:	strb	r2, [r1, #0]
   1175c:	ldr	r2, [sp, #16]
   1175e:	ldrb.w	r4, [r5, #-1]
   11762:	adds	r2, #1
   11764:	str	r2, [sp, #16]
   11766:	b.n	10f6a <_dtoa_r+0x392>
   11768:	ldr	r3, [sp, #16]
   1176a:	negs	r4, r3
   1176c:	cmp	r4, #0
   1176e:	beq.w	118d8 <_dtoa_r+0xd00>
   11772:	ldr	r3, [pc, #528]	; (11984 <_dtoa_r+0xdac>)
   11774:	and.w	r2, r4, #15
   11778:	add.w	r3, r3, r2, lsl #3
   1177c:	ldrd	r2, r3, [r3]
   11780:	ldrd	r0, r1, [sp, #64]	; 0x40
   11784:	bl	b708 <__aeabi_dmul>
   11788:	asrs	r4, r4, #4
   1178a:	mov	r6, r0
   1178c:	mov	r7, r1
   1178e:	beq.w	119be <_dtoa_r+0xde6>
   11792:	ldr	r5, [pc, #500]	; (11988 <_dtoa_r+0xdb0>)
   11794:	mov.w	sl, #2
   11798:	lsls	r2, r4, #31
   1179a:	bpl.n	117b0 <_dtoa_r+0xbd8>
   1179c:	mov	r0, r6
   1179e:	mov	r1, r7
   117a0:	ldrd	r2, r3, [r5]
   117a4:	bl	b708 <__aeabi_dmul>
   117a8:	add.w	sl, sl, #1
   117ac:	mov	r6, r0
   117ae:	mov	r7, r1
   117b0:	asrs	r4, r4, #1
   117b2:	add.w	r5, r5, #8
   117b6:	bne.n	11798 <_dtoa_r+0xbc0>
   117b8:	b.n	11298 <_dtoa_r+0x6c0>
   117ba:	ldr	r1, [r6, #4]
   117bc:	mov	r0, r9
   117be:	bl	12540 <_Balloc>
   117c2:	ldr	r3, [r6, #16]
   117c4:	adds	r2, r3, #2
   117c6:	mov	r5, r0
   117c8:	lsls	r2, r2, #2
   117ca:	add.w	r1, r6, #12
   117ce:	adds	r0, #12
   117d0:	bl	9404 <memcpy>
   117d4:	mov	r1, r5
   117d6:	movs	r2, #1
   117d8:	mov	r0, r9
   117da:	bl	12938 <__lshift>
   117de:	mov	r8, r0
   117e0:	b.n	114c4 <_dtoa_r+0x8ec>
   117e2:	cmp	r3, #57	; 0x39
   117e4:	beq.w	11930 <_dtoa_r+0xd58>
   117e8:	add.w	sl, r3, #1
   117ec:	mov	fp, r6
   117ee:	strb.w	sl, [r7]
   117f2:	adds	r5, r7, #1
   117f4:	mov	r6, r8
   117f6:	str	r4, [sp, #40]	; 0x28
   117f8:	b.n	11146 <_dtoa_r+0x56e>
   117fa:	mov	fp, r6
   117fc:	mov	sl, r3
   117fe:	mov	r6, r8
   11800:	b.n	1110e <_dtoa_r+0x536>
   11802:	movs	r3, #0
   11804:	str	r3, [sp, #24]
   11806:	mov	r6, r3
   11808:	b.n	1160e <_dtoa_r+0xa36>
   1180a:	ldr	r3, [sp, #72]	; 0x48
   1180c:	ldr	r1, [pc, #372]	; (11984 <_dtoa_r+0xdac>)
   1180e:	subs	r2, r3, #1
   11810:	add.w	r1, r1, r2, lsl #3
   11814:	mov	r3, r5
   11816:	str	r2, [sp, #92]	; 0x5c
   11818:	ldrd	r0, r1, [r1]
   1181c:	mov	r2, r4
   1181e:	bl	b708 <__aeabi_dmul>
   11822:	strd	r0, r1, [sp, #80]	; 0x50
   11826:	mov	r1, r7
   11828:	mov	r0, r6
   1182a:	bl	bc68 <__aeabi_d2iz>
   1182e:	mov	r4, r0
   11830:	bl	b63c <__aeabi_i2d>
   11834:	mov	r3, r1
   11836:	mov	r2, r0
   11838:	mov	r1, r7
   1183a:	mov	r0, r6
   1183c:	bl	b3a0 <__aeabi_dsub>
   11840:	ldr	r3, [sp, #72]	; 0x48
   11842:	mov	r7, r1
   11844:	ldr	r1, [sp, #36]	; 0x24
   11846:	adds	r4, #48	; 0x30
   11848:	cmp	r3, #1
   1184a:	mov	r6, r0
   1184c:	strb	r4, [r1, #0]
   1184e:	add.w	r5, r1, #1
   11852:	beq.n	11896 <_dtoa_r+0xcbe>
   11854:	ldr	r3, [sp, #72]	; 0x48
   11856:	ldr	r2, [sp, #36]	; 0x24
   11858:	add	r3, r2
   1185a:	mov	sl, r3
   1185c:	mov	fp, r5
   1185e:	movs	r2, #0
   11860:	ldr	r3, [pc, #296]	; (1198c <_dtoa_r+0xdb4>)
   11862:	mov	r0, r6
   11864:	mov	r1, r7
   11866:	bl	b708 <__aeabi_dmul>
   1186a:	mov	r7, r1
   1186c:	mov	r6, r0
   1186e:	bl	bc68 <__aeabi_d2iz>
   11872:	mov	r4, r0
   11874:	bl	b63c <__aeabi_i2d>
   11878:	adds	r4, #48	; 0x30
   1187a:	mov	r2, r0
   1187c:	mov	r3, r1
   1187e:	mov	r0, r6
   11880:	mov	r1, r7
   11882:	bl	b3a0 <__aeabi_dsub>
   11886:	strb.w	r4, [fp], #1
   1188a:	cmp	sl, fp
   1188c:	mov	r6, r0
   1188e:	mov	r7, r1
   11890:	bne.n	1185e <_dtoa_r+0xc86>
   11892:	ldr	r3, [sp, #92]	; 0x5c
   11894:	add	r5, r3
   11896:	movs	r2, #0
   11898:	ldr	r3, [pc, #244]	; (11990 <_dtoa_r+0xdb8>)
   1189a:	ldrd	r0, r1, [sp, #80]	; 0x50
   1189e:	bl	b3a4 <__adddf3>
   118a2:	mov	r2, r6
   118a4:	mov	r3, r7
   118a6:	bl	bbec <__aeabi_dcmplt>
   118aa:	cmp	r0, #0
   118ac:	beq.n	11940 <_dtoa_r+0xd68>
   118ae:	ldr	r3, [sp, #88]	; 0x58
   118b0:	str	r3, [sp, #16]
   118b2:	ldrb.w	r4, [r5, #-1]
   118b6:	b.w	10f52 <_dtoa_r+0x37a>
   118ba:	ldr	r3, [sp, #28]
   118bc:	ldr	r2, [sp, #32]
   118be:	subs	r5, r3, r2
   118c0:	movs	r3, #0
   118c2:	b.w	10fbe <_dtoa_r+0x3e6>
   118c6:	movs	r7, #0
   118c8:	b.n	11660 <_dtoa_r+0xa88>
   118ca:	ldr	r3, [sp, #96]	; 0x60
   118cc:	ldr	r7, [sp, #24]
   118ce:	ldr	r5, [sp, #28]
   118d0:	rsb	r3, r3, #54	; 0x36
   118d4:	b.w	10fbe <_dtoa_r+0x3e6>
   118d8:	ldrd	r6, r7, [sp, #64]	; 0x40
   118dc:	mov.w	sl, #2
   118e0:	b.n	11298 <_dtoa_r+0x6c0>
   118e2:	ldr	r3, [sp, #32]
   118e4:	cmp	r3, #0
   118e6:	beq.w	1166c <_dtoa_r+0xa94>
   118ea:	ldr	r3, [sp, #56]	; 0x38
   118ec:	cmp	r3, #0
   118ee:	ble.w	1174e <_dtoa_r+0xb76>
   118f2:	movs	r2, #0
   118f4:	ldr	r3, [pc, #148]	; (1198c <_dtoa_r+0xdb4>)
   118f6:	mov	r0, r6
   118f8:	mov	r1, r7
   118fa:	bl	b708 <__aeabi_dmul>
   118fe:	mov	r6, r0
   11900:	mov	r7, r1
   11902:	add.w	r0, sl, #1
   11906:	bl	b63c <__aeabi_i2d>
   1190a:	mov	r2, r6
   1190c:	mov	r3, r7
   1190e:	bl	b708 <__aeabi_dmul>
   11912:	movs	r2, #0
   11914:	ldr	r3, [pc, #100]	; (1197c <_dtoa_r+0xda4>)
   11916:	bl	b3a4 <__adddf3>
   1191a:	ldr	r2, [sp, #16]
   1191c:	ldr	r3, [sp, #56]	; 0x38
   1191e:	str	r3, [sp, #72]	; 0x48
   11920:	subs	r2, #1
   11922:	mov	r4, r0
   11924:	sub.w	r5, r1, #54525952	; 0x3400000
   11928:	str	r2, [sp, #88]	; 0x58
   1192a:	b.n	112da <_dtoa_r+0x702>
   1192c:	str	r4, [sp, #40]	; 0x28
   1192e:	b.n	1143a <_dtoa_r+0x862>
   11930:	movs	r2, #57	; 0x39
   11932:	mov	fp, r6
   11934:	str	r4, [sp, #40]	; 0x28
   11936:	mov	r6, r8
   11938:	strb	r2, [r7, #0]
   1193a:	adds	r5, r7, #1
   1193c:	b.w	1112a <_dtoa_r+0x552>
   11940:	ldrd	r2, r3, [sp, #80]	; 0x50
   11944:	movs	r0, #0
   11946:	ldr	r1, [pc, #72]	; (11990 <_dtoa_r+0xdb8>)
   11948:	bl	b3a0 <__aeabi_dsub>
   1194c:	mov	r2, r6
   1194e:	mov	r3, r7
   11950:	bl	bc28 <__aeabi_dcmpgt>
   11954:	cbnz	r0, 1195a <_dtoa_r+0xd82>
   11956:	b.n	1174e <_dtoa_r+0xb76>
   11958:	mov	r5, r2
   1195a:	ldrb.w	r3, [r5, #-1]
   1195e:	cmp	r3, #48	; 0x30
   11960:	add.w	r2, r5, #4294967295
   11964:	beq.n	11958 <_dtoa_r+0xd80>
   11966:	b.n	113dc <_dtoa_r+0x804>
   11968:	ldr	r3, [sp, #88]	; 0x58
   1196a:	str	r3, [sp, #16]
   1196c:	b.w	10f52 <_dtoa_r+0x37a>
   11970:	cmp.w	sl, #0
   11974:	bne.w	11470 <_dtoa_r+0x898>
   11978:	b.n	11640 <_dtoa_r+0xa68>
   1197a:	nop
   1197c:	.word	0x401c0000
   11980:	.word	0x40140000
   11984:	.word	0x00014378
   11988:	.word	0x00014440
   1198c:	.word	0x40240000
   11990:	.word	0x3fe00000
   11994:	cmp	r3, #57	; 0x39
   11996:	mov	fp, sl
   11998:	mov	sl, r3
   1199a:	beq.n	11930 <_dtoa_r+0xd58>
   1199c:	cmp.w	fp, #0
   119a0:	bgt.w	1171e <_dtoa_r+0xb46>
   119a4:	b.n	11722 <_dtoa_r+0xb4a>
   119a6:	bne.w	11722 <_dtoa_r+0xb4a>
   119aa:	tst.w	sl, #1
   119ae:	beq.w	11722 <_dtoa_r+0xb4a>
   119b2:	b.n	11716 <_dtoa_r+0xb3e>
   119b4:	ldr	r3, [sp, #0]
   119b6:	cmp	r3, #2
   119b8:	bgt.n	11a06 <_dtoa_r+0xe2e>
   119ba:	ldr	r3, [sp, #56]	; 0x38
   119bc:	b.n	115da <_dtoa_r+0xa02>
   119be:	mov.w	sl, #2
   119c2:	b.n	11298 <_dtoa_r+0x6c0>
   119c4:	ldr	r3, [sp, #0]
   119c6:	cmp	r3, #2
   119c8:	bgt.n	11a06 <_dtoa_r+0xe2e>
   119ca:	ldr	r3, [sp, #56]	; 0x38
   119cc:	b.n	114aa <_dtoa_r+0x8d2>
   119ce:	movs	r4, #0
   119d0:	str.w	r4, [r9, #68]	; 0x44
   119d4:	mov	r1, r4
   119d6:	mov	r0, r9
   119d8:	bl	12540 <_Balloc>
   119dc:	mov.w	r3, #4294967295
   119e0:	str	r3, [sp, #32]
   119e2:	str	r3, [sp, #56]	; 0x38
   119e4:	movs	r3, #1
   119e6:	str	r0, [sp, #36]	; 0x24
   119e8:	str	r4, [sp, #20]
   119ea:	str.w	r0, [r9, #64]	; 0x40
   119ee:	str	r3, [sp, #44]	; 0x2c
   119f0:	b.w	10dec <_dtoa_r+0x214>
   119f4:	beq.w	11088 <_dtoa_r+0x4b0>
   119f8:	rsb	r0, r0, #60	; 0x3c
   119fc:	b.w	1107e <_dtoa_r+0x4a6>
   11a00:	movs	r6, #1
   11a02:	b.w	10d7e <_dtoa_r+0x1a6>
   11a06:	ldr	r3, [sp, #56]	; 0x38
   11a08:	str	r3, [sp, #32]
   11a0a:	b.n	115ea <_dtoa_r+0xa12>

00011a0c <__libc_fini_array>:
   11a0c:	push	{r3, r4, r5, lr}
   11a0e:	ldr	r5, [pc, #28]	; (11a2c <__libc_fini_array+0x20>)
   11a10:	ldr	r4, [pc, #28]	; (11a30 <__libc_fini_array+0x24>)
   11a12:	subs	r4, r5, r4
   11a14:	asrs	r4, r4, #2
   11a16:	beq.n	11a24 <__libc_fini_array+0x18>
   11a18:	subs	r4, #1
   11a1a:	ldr.w	r3, [r5, #-4]!
   11a1e:	blx	r3
   11a20:	cmp	r4, #0
   11a22:	bne.n	11a18 <__libc_fini_array+0xc>
   11a24:	ldmia.w	sp!, {r3, r4, r5, lr}
   11a28:	b.w	1448c <__init_array_end>
	...

00011a34 <_malloc_trim_r>:
   11a34:	push	{r3, r4, r5, r6, r7, lr}
   11a36:	ldr	r7, [pc, #140]	; (11ac4 <_malloc_trim_r+0x90>)
   11a38:	mov	r4, r1
   11a3a:	mov	r6, r0
   11a3c:	bl	cc24 <__malloc_lock>
   11a40:	ldr	r3, [r7, #8]
   11a42:	ldr	r5, [r3, #4]
   11a44:	bic.w	r5, r5, #3
   11a48:	subs	r1, r5, r4
   11a4a:	addw	r1, r1, #4079	; 0xfef
   11a4e:	bic.w	r1, r1, #4080	; 0xff0
   11a52:	bic.w	r1, r1, #15
   11a56:	sub.w	r4, r1, #4096	; 0x1000
   11a5a:	cmp.w	r4, #4096	; 0x1000
   11a5e:	blt.n	11a70 <_malloc_trim_r+0x3c>
   11a60:	movs	r1, #0
   11a62:	mov	r0, r6
   11a64:	bl	d00c <_sbrk_r>
   11a68:	ldr	r3, [r7, #8]
   11a6a:	add	r3, r5
   11a6c:	cmp	r0, r3
   11a6e:	beq.n	11a7a <_malloc_trim_r+0x46>
   11a70:	mov	r0, r6
   11a72:	bl	cc28 <__malloc_unlock>
   11a76:	movs	r0, #0
   11a78:	pop	{r3, r4, r5, r6, r7, pc}
   11a7a:	negs	r1, r4
   11a7c:	mov	r0, r6
   11a7e:	bl	d00c <_sbrk_r>
   11a82:	adds	r0, #1
   11a84:	beq.n	11aa2 <_malloc_trim_r+0x6e>
   11a86:	ldr	r3, [pc, #64]	; (11ac8 <_malloc_trim_r+0x94>)
   11a88:	ldr	r2, [r7, #8]
   11a8a:	ldr	r1, [r3, #0]
   11a8c:	subs	r5, r5, r4
   11a8e:	orr.w	r5, r5, #1
   11a92:	mov	r0, r6
   11a94:	subs	r1, r1, r4
   11a96:	str	r5, [r2, #4]
   11a98:	str	r1, [r3, #0]
   11a9a:	bl	cc28 <__malloc_unlock>
   11a9e:	movs	r0, #1
   11aa0:	pop	{r3, r4, r5, r6, r7, pc}
   11aa2:	movs	r1, #0
   11aa4:	mov	r0, r6
   11aa6:	bl	d00c <_sbrk_r>
   11aaa:	ldr	r2, [r7, #8]
   11aac:	subs	r3, r0, r2
   11aae:	cmp	r3, #15
   11ab0:	ble.n	11a70 <_malloc_trim_r+0x3c>
   11ab2:	ldr	r4, [pc, #24]	; (11acc <_malloc_trim_r+0x98>)
   11ab4:	ldr	r1, [pc, #16]	; (11ac8 <_malloc_trim_r+0x94>)
   11ab6:	ldr	r4, [r4, #0]
   11ab8:	orr.w	r3, r3, #1
   11abc:	subs	r0, r0, r4
   11abe:	str	r3, [r2, #4]
   11ac0:	str	r0, [r1, #0]
   11ac2:	b.n	11a70 <_malloc_trim_r+0x3c>
   11ac4:	.word	0x1fff0ee8
   11ac8:	.word	0x200204dc
   11acc:	.word	0x1fff12f4

00011ad0 <_free_r>:
   11ad0:	cmp	r1, #0
   11ad2:	beq.n	11b60 <_free_r+0x90>
   11ad4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ad8:	mov	r5, r1
   11ada:	mov	r8, r0
   11adc:	bl	cc24 <__malloc_lock>
   11ae0:	ldr.w	r7, [r5, #-4]
   11ae4:	ldr	r1, [pc, #424]	; (11c90 <_free_r+0x1c0>)
   11ae6:	bic.w	r3, r7, #1
   11aea:	sub.w	r4, r5, #8
   11aee:	adds	r2, r4, r3
   11af0:	ldr	r6, [r1, #8]
   11af2:	ldr	r0, [r2, #4]
   11af4:	cmp	r2, r6
   11af6:	bic.w	r0, r0, #3
   11afa:	beq.n	11bc2 <_free_r+0xf2>
   11afc:	lsls	r6, r7, #31
   11afe:	str	r0, [r2, #4]
   11b00:	bmi.n	11b1a <_free_r+0x4a>
   11b02:	ldr.w	r7, [r5, #-8]
   11b06:	subs	r4, r4, r7
   11b08:	add.w	lr, r1, #8
   11b0c:	ldr	r5, [r4, #8]
   11b0e:	cmp	r5, lr
   11b10:	add	r3, r7
   11b12:	beq.n	11bf4 <_free_r+0x124>
   11b14:	ldr	r7, [r4, #12]
   11b16:	str	r7, [r5, #12]
   11b18:	str	r5, [r7, #8]
   11b1a:	adds	r5, r2, r0
   11b1c:	ldr	r5, [r5, #4]
   11b1e:	lsls	r5, r5, #31
   11b20:	bpl.n	11ba8 <_free_r+0xd8>
   11b22:	orr.w	r2, r3, #1
   11b26:	str	r2, [r4, #4]
   11b28:	str	r3, [r4, r3]
   11b2a:	cmp.w	r3, #512	; 0x200
   11b2e:	bcs.n	11b62 <_free_r+0x92>
   11b30:	lsrs	r3, r3, #3
   11b32:	adds	r2, r3, #1
   11b34:	ldr	r5, [r1, #4]
   11b36:	ldr.w	r7, [r1, r2, lsl #3]
   11b3a:	str	r7, [r4, #8]
   11b3c:	movs	r0, #1
   11b3e:	asrs	r3, r3, #2
   11b40:	lsl.w	r3, r0, r3
   11b44:	add.w	r0, r1, r2, lsl #3
   11b48:	orrs	r5, r3
   11b4a:	subs	r0, #8
   11b4c:	str	r0, [r4, #12]
   11b4e:	str	r5, [r1, #4]
   11b50:	str.w	r4, [r1, r2, lsl #3]
   11b54:	str	r4, [r7, #12]
   11b56:	mov	r0, r8
   11b58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11b5c:	b.w	cc28 <__malloc_unlock>
   11b60:	bx	lr
   11b62:	lsrs	r2, r3, #9
   11b64:	cmp	r2, #4
   11b66:	bhi.n	11c10 <_free_r+0x140>
   11b68:	lsrs	r2, r3, #6
   11b6a:	add.w	r7, r2, #57	; 0x39
   11b6e:	lsls	r7, r7, #1
   11b70:	add.w	r5, r2, #56	; 0x38
   11b74:	add.w	r0, r1, r7, lsl #2
   11b78:	ldr.w	r2, [r1, r7, lsl #2]
   11b7c:	ldr	r1, [pc, #272]	; (11c90 <_free_r+0x1c0>)
   11b7e:	subs	r0, #8
   11b80:	cmp	r0, r2
   11b82:	beq.n	11c20 <_free_r+0x150>
   11b84:	ldr	r1, [r2, #4]
   11b86:	bic.w	r1, r1, #3
   11b8a:	cmp	r3, r1
   11b8c:	bcs.n	11b94 <_free_r+0xc4>
   11b8e:	ldr	r2, [r2, #8]
   11b90:	cmp	r0, r2
   11b92:	bne.n	11b84 <_free_r+0xb4>
   11b94:	ldr	r0, [r2, #12]
   11b96:	str	r0, [r4, #12]
   11b98:	str	r2, [r4, #8]
   11b9a:	str	r4, [r0, #8]
   11b9c:	str	r4, [r2, #12]
   11b9e:	mov	r0, r8
   11ba0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11ba4:	b.w	cc28 <__malloc_unlock>
   11ba8:	ldr	r5, [r2, #8]
   11baa:	ldr	r7, [pc, #232]	; (11c94 <_free_r+0x1c4>)
   11bac:	cmp	r5, r7
   11bae:	add	r3, r0
   11bb0:	beq.n	11c32 <_free_r+0x162>
   11bb2:	ldr	r0, [r2, #12]
   11bb4:	str	r0, [r5, #12]
   11bb6:	orr.w	r2, r3, #1
   11bba:	str	r5, [r0, #8]
   11bbc:	str	r2, [r4, #4]
   11bbe:	str	r3, [r4, r3]
   11bc0:	b.n	11b2a <_free_r+0x5a>
   11bc2:	lsls	r7, r7, #31
   11bc4:	add	r3, r0
   11bc6:	bmi.n	11bd8 <_free_r+0x108>
   11bc8:	ldr.w	r2, [r5, #-8]
   11bcc:	subs	r4, r4, r2
   11bce:	add	r3, r2
   11bd0:	ldr	r0, [r4, #8]
   11bd2:	ldr	r2, [r4, #12]
   11bd4:	str	r2, [r0, #12]
   11bd6:	str	r0, [r2, #8]
   11bd8:	ldr	r2, [pc, #188]	; (11c98 <_free_r+0x1c8>)
   11bda:	ldr	r2, [r2, #0]
   11bdc:	orr.w	r0, r3, #1
   11be0:	cmp	r3, r2
   11be2:	str	r0, [r4, #4]
   11be4:	str	r4, [r1, #8]
   11be6:	bcc.n	11b56 <_free_r+0x86>
   11be8:	ldr	r3, [pc, #176]	; (11c9c <_free_r+0x1cc>)
   11bea:	mov	r0, r8
   11bec:	ldr	r1, [r3, #0]
   11bee:	bl	11a34 <_malloc_trim_r>
   11bf2:	b.n	11b56 <_free_r+0x86>
   11bf4:	adds	r1, r2, r0
   11bf6:	ldr	r1, [r1, #4]
   11bf8:	lsls	r1, r1, #31
   11bfa:	bmi.n	11c86 <_free_r+0x1b6>
   11bfc:	ldr	r1, [r2, #8]
   11bfe:	ldr	r2, [r2, #12]
   11c00:	str	r2, [r1, #12]
   11c02:	add	r3, r0
   11c04:	orr.w	r0, r3, #1
   11c08:	str	r1, [r2, #8]
   11c0a:	str	r0, [r4, #4]
   11c0c:	str	r3, [r4, r3]
   11c0e:	b.n	11b56 <_free_r+0x86>
   11c10:	cmp	r2, #20
   11c12:	bhi.n	11c44 <_free_r+0x174>
   11c14:	add.w	r7, r2, #92	; 0x5c
   11c18:	lsls	r7, r7, #1
   11c1a:	add.w	r5, r2, #91	; 0x5b
   11c1e:	b.n	11b74 <_free_r+0xa4>
   11c20:	asrs	r2, r5, #2
   11c22:	ldr	r3, [r1, #4]
   11c24:	movs	r5, #1
   11c26:	lsl.w	r2, r5, r2
   11c2a:	orrs	r3, r2
   11c2c:	str	r3, [r1, #4]
   11c2e:	mov	r2, r0
   11c30:	b.n	11b96 <_free_r+0xc6>
   11c32:	orr.w	r2, r3, #1
   11c36:	str	r4, [r1, #20]
   11c38:	str	r4, [r1, #16]
   11c3a:	str	r5, [r4, #12]
   11c3c:	str	r5, [r4, #8]
   11c3e:	str	r2, [r4, #4]
   11c40:	str	r3, [r4, r3]
   11c42:	b.n	11b56 <_free_r+0x86>
   11c44:	cmp	r2, #84	; 0x54
   11c46:	bhi.n	11c56 <_free_r+0x186>
   11c48:	lsrs	r2, r3, #12
   11c4a:	add.w	r7, r2, #111	; 0x6f
   11c4e:	lsls	r7, r7, #1
   11c50:	add.w	r5, r2, #110	; 0x6e
   11c54:	b.n	11b74 <_free_r+0xa4>
   11c56:	cmp.w	r2, #340	; 0x154
   11c5a:	bhi.n	11c6a <_free_r+0x19a>
   11c5c:	lsrs	r2, r3, #15
   11c5e:	add.w	r7, r2, #120	; 0x78
   11c62:	lsls	r7, r7, #1
   11c64:	add.w	r5, r2, #119	; 0x77
   11c68:	b.n	11b74 <_free_r+0xa4>
   11c6a:	movw	r0, #1364	; 0x554
   11c6e:	cmp	r2, r0
   11c70:	bhi.n	11c80 <_free_r+0x1b0>
   11c72:	lsrs	r2, r3, #18
   11c74:	add.w	r7, r2, #125	; 0x7d
   11c78:	lsls	r7, r7, #1
   11c7a:	add.w	r5, r2, #124	; 0x7c
   11c7e:	b.n	11b74 <_free_r+0xa4>
   11c80:	movs	r7, #254	; 0xfe
   11c82:	movs	r5, #126	; 0x7e
   11c84:	b.n	11b74 <_free_r+0xa4>
   11c86:	orr.w	r2, r3, #1
   11c8a:	str	r2, [r4, #4]
   11c8c:	str	r3, [r4, r3]
   11c8e:	b.n	11b56 <_free_r+0x86>
   11c90:	.word	0x1fff0ee8
   11c94:	.word	0x1fff0ef0
   11c98:	.word	0x1fff12f0
   11c9c:	.word	0x200204d8

00011ca0 <rshift>:
   11ca0:	ldr	r2, [r0, #16]
   11ca2:	asrs	r3, r1, #5
   11ca4:	cmp	r3, r2
   11ca6:	bge.n	11d06 <rshift+0x66>
   11ca8:	push	{r4, r5, r6, r7, lr}
   11caa:	ands.w	r1, r1, #31
   11cae:	add.w	r6, r0, #20
   11cb2:	add.w	r2, r6, r2, lsl #2
   11cb6:	add.w	lr, r6, r3, lsl #2
   11cba:	beq.n	11d10 <rshift+0x70>
   11cbc:	ldr.w	r3, [r6, r3, lsl #2]
   11cc0:	add.w	r5, lr, #4
   11cc4:	cmp	r2, r5
   11cc6:	lsr.w	r4, r3, r1
   11cca:	rsb	ip, r1, #32
   11cce:	bls.n	11d44 <rshift+0xa4>
   11cd0:	add.w	r7, r0, #16
   11cd4:	ldr	r3, [r5, #0]
   11cd6:	lsl.w	r3, r3, ip
   11cda:	orrs	r3, r4
   11cdc:	str.w	r3, [r7, #4]!
   11ce0:	ldr.w	r3, [r5], #4
   11ce4:	cmp	r2, r5
   11ce6:	lsr.w	r4, r3, r1
   11cea:	bhi.n	11cd4 <rshift+0x34>
   11cec:	rsb	r2, lr, r2
   11cf0:	subs	r2, #5
   11cf2:	bic.w	r2, r2, #3
   11cf6:	adds	r2, #4
   11cf8:	add	r2, r6
   11cfa:	str	r4, [r2, #0]
   11cfc:	cbz	r4, 11d00 <rshift+0x60>
   11cfe:	adds	r2, #4
   11d00:	subs	r3, r2, r6
   11d02:	asrs	r3, r3, #2
   11d04:	b.n	11d34 <rshift+0x94>
   11d06:	movs	r3, #0
   11d08:	str	r3, [r0, #16]
   11d0a:	movs	r3, #0
   11d0c:	str	r3, [r0, #20]
   11d0e:	bx	lr
   11d10:	cmp	r2, lr
   11d12:	bls.n	11d3a <rshift+0x9a>
   11d14:	add.w	r4, r0, #16
   11d18:	mov	r1, lr
   11d1a:	ldr.w	r5, [r1], #4
   11d1e:	str.w	r5, [r4, #4]!
   11d22:	cmp	r2, r1
   11d24:	bhi.n	11d1a <rshift+0x7a>
   11d26:	mvn.w	r3, lr
   11d2a:	add	r3, r2
   11d2c:	bic.w	r3, r3, #3
   11d30:	adds	r3, #4
   11d32:	asrs	r3, r3, #2
   11d34:	str	r3, [r0, #16]
   11d36:	cbz	r3, 11d3e <rshift+0x9e>
   11d38:	pop	{r4, r5, r6, r7, pc}
   11d3a:	movs	r3, #0
   11d3c:	str	r3, [r0, #16]
   11d3e:	movs	r3, #0
   11d40:	str	r3, [r0, #20]
   11d42:	pop	{r4, r5, r6, r7, pc}
   11d44:	mov	r2, r6
   11d46:	b.n	11cfa <rshift+0x5a>

00011d48 <__gethex>:
   11d48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d4c:	sub	sp, #44	; 0x2c
   11d4e:	mov	r9, r1
   11d50:	str	r0, [sp, #20]
   11d52:	ldr	r0, [sp, #88]	; 0x58
   11d54:	str	r2, [sp, #12]
   11d56:	str	r3, [sp, #32]
   11d58:	bl	12424 <__localeconv_l>
   11d5c:	ldr	r3, [r0, #0]
   11d5e:	str	r3, [sp, #8]
   11d60:	mov	r0, r3
   11d62:	mov	r4, r3
   11d64:	bl	d1c0 <strlen>
   11d68:	ldr.w	r3, [r9]
   11d6c:	str	r0, [sp, #0]
   11d6e:	ldrb	r2, [r3, #2]
   11d70:	adds	r1, r4, r0
   11d72:	cmp	r2, #48	; 0x30
   11d74:	ldrb.w	fp, [r1, #-1]
   11d78:	bne.w	120ce <__gethex+0x386>
   11d7c:	adds	r3, #3
   11d7e:	mov.w	r8, #0
   11d82:	mov	r4, r3
   11d84:	ldrb.w	r2, [r3], #1
   11d88:	cmp	r2, #48	; 0x30
   11d8a:	add.w	r8, r8, #1
   11d8e:	beq.n	11d82 <__gethex+0x3a>
   11d90:	ldr	r6, [pc, #712]	; (1205c <__gethex+0x314>)
   11d92:	ldrb	r3, [r6, r2]
   11d94:	cmp	r3, #0
   11d96:	beq.w	11f7a <__gethex+0x232>
   11d9a:	ldrb	r3, [r4, #0]
   11d9c:	mov.w	sl, #0
   11da0:	ldrb	r3, [r6, r3]
   11da2:	mov	r5, sl
   11da4:	mov	r7, r4
   11da6:	cbz	r3, 11db2 <__gethex+0x6a>
   11da8:	ldrb.w	r3, [r7, #1]!
   11dac:	ldrb	r3, [r6, r3]
   11dae:	cmp	r3, #0
   11db0:	bne.n	11da8 <__gethex+0x60>
   11db2:	ldr	r2, [sp, #0]
   11db4:	ldr	r1, [sp, #8]
   11db6:	mov	r0, r7
   11db8:	bl	d29c <strncmp>
   11dbc:	cmp	r0, #0
   11dbe:	beq.w	11ee6 <__gethex+0x19e>
   11dc2:	ldrb	r3, [r7, #0]
   11dc4:	cmp	r5, #0
   11dc6:	beq.w	120ac <__gethex+0x364>
   11dca:	subs	r5, r5, r7
   11dcc:	lsls	r2, r5, #2
   11dce:	str	r2, [sp, #4]
   11dd0:	cmp	r3, #80	; 0x50
   11dd2:	beq.w	11ef8 <__gethex+0x1b0>
   11dd6:	cmp	r3, #112	; 0x70
   11dd8:	beq.w	11ef8 <__gethex+0x1b0>
   11ddc:	mov	r5, r7
   11dde:	str.w	r7, [r9]
   11de2:	cmp.w	sl, #0
   11de6:	bne.w	11f58 <__gethex+0x210>
   11dea:	subs	r3, r5, r4
   11dec:	subs	r3, #1
   11dee:	cmp	r3, #7
   11df0:	mov	r1, sl
   11df2:	ble.n	11dfe <__gethex+0xb6>
   11df4:	asrs	r3, r3, #1
   11df6:	cmp	r3, #7
   11df8:	add.w	r1, r1, #1
   11dfc:	bgt.n	11df4 <__gethex+0xac>
   11dfe:	ldr	r0, [sp, #20]
   11e00:	bl	12540 <_Balloc>
   11e04:	mov	r3, r0
   11e06:	adds	r3, #20
   11e08:	cmp	r5, r4
   11e0a:	str	r0, [sp, #16]
   11e0c:	str	r3, [sp, #28]
   11e0e:	bls.w	121b8 <__gethex+0x470>
   11e12:	mov	r9, r3
   11e14:	ldr	r3, [sp, #0]
   11e16:	mov.w	r8, #0
   11e1a:	rsb	r3, r3, #1
   11e1e:	mov	r7, r8
   11e20:	str	r3, [sp, #24]
   11e22:	b.n	11e44 <__gethex+0xfc>
   11e24:	cmp	r7, #32
   11e26:	beq.w	11f68 <__gethex+0x220>
   11e2a:	mov	r2, r7
   11e2c:	adds	r7, #4
   11e2e:	ldrb.w	r3, [r5, #-1]
   11e32:	ldrb	r3, [r6, r3]
   11e34:	mov	r5, sl
   11e36:	and.w	r3, r3, #15
   11e3a:	lsls	r3, r2
   11e3c:	cmp	r5, r4
   11e3e:	orr.w	r8, r8, r3
   11e42:	bls.n	11e70 <__gethex+0x128>
   11e44:	ldrb.w	r3, [r5, #-1]
   11e48:	cmp	r3, fp
   11e4a:	add.w	sl, r5, #4294967295
   11e4e:	bne.n	11e24 <__gethex+0xdc>
   11e50:	ldr	r3, [sp, #24]
   11e52:	add	r3, sl
   11e54:	cmp	r3, r4
   11e56:	bcc.n	11e24 <__gethex+0xdc>
   11e58:	mov	r0, r3
   11e5a:	ldr	r2, [sp, #0]
   11e5c:	ldr	r1, [sp, #8]
   11e5e:	str	r3, [sp, #36]	; 0x24
   11e60:	bl	d29c <strncmp>
   11e64:	ldr	r3, [sp, #36]	; 0x24
   11e66:	cmp	r0, #0
   11e68:	bne.n	11e24 <__gethex+0xdc>
   11e6a:	mov	r5, r3
   11e6c:	cmp	r5, r4
   11e6e:	bhi.n	11e44 <__gethex+0xfc>
   11e70:	str.w	r8, [r9], #4
   11e74:	ldr	r3, [sp, #28]
   11e76:	ldr	r2, [sp, #16]
   11e78:	rsb	r9, r3, r9
   11e7c:	mov.w	r3, r9, asr #2
   11e80:	str	r3, [r2, #16]
   11e82:	mov	r0, r8
   11e84:	mov.w	r9, r3, lsl #5
   11e88:	bl	126b8 <__hi0bits>
   11e8c:	ldr	r3, [sp, #12]
   11e8e:	ldr	r6, [r3, #0]
   11e90:	rsb	r0, r0, r9
   11e94:	cmp	r0, r6
   11e96:	bgt.w	12060 <__gethex+0x318>
   11e9a:	blt.w	120b0 <__gethex+0x368>
   11e9e:	movs	r7, #0
   11ea0:	ldr	r3, [sp, #12]
   11ea2:	ldr	r2, [sp, #4]
   11ea4:	ldr	r3, [r3, #8]
   11ea6:	cmp	r2, r3
   11ea8:	bgt.w	11fda <__gethex+0x292>
   11eac:	ldr	r0, [sp, #12]
   11eae:	ldr	r1, [sp, #4]
   11eb0:	ldr	r3, [r0, #4]
   11eb2:	cmp	r1, r3
   11eb4:	bge.w	12022 <__gethex+0x2da>
   11eb8:	subs	r5, r3, r1
   11eba:	cmp	r6, r5
   11ebc:	bgt.w	120de <__gethex+0x396>
   11ec0:	ldr	r2, [r0, #12]
   11ec2:	cmp	r2, #2
   11ec4:	beq.w	121c6 <__gethex+0x47e>
   11ec8:	cmp	r2, #3
   11eca:	beq.w	12186 <__gethex+0x43e>
   11ece:	cmp	r2, #1
   11ed0:	beq.w	121ce <__gethex+0x486>
   11ed4:	ldr	r0, [sp, #20]
   11ed6:	ldr	r1, [sp, #16]
   11ed8:	bl	1258c <_Bfree>
   11edc:	ldr	r2, [sp, #80]	; 0x50
   11ede:	movs	r3, #0
   11ee0:	str	r3, [r2, #0]
   11ee2:	movs	r0, #80	; 0x50
   11ee4:	b.n	11f62 <__gethex+0x21a>
   11ee6:	cmp	r5, #0
   11ee8:	beq.w	1211e <__gethex+0x3d6>
   11eec:	ldrb	r3, [r7, #0]
   11eee:	b.n	11dca <__gethex+0x82>
   11ef0:	movs	r3, #0
   11ef2:	str	r3, [sp, #4]
   11ef4:	mov.w	sl, #1
   11ef8:	ldrb	r3, [r7, #1]
   11efa:	cmp	r3, #43	; 0x2b
   11efc:	beq.w	12058 <__gethex+0x310>
   11f00:	cmp	r3, #45	; 0x2d
   11f02:	beq.n	11ff0 <__gethex+0x2a8>
   11f04:	adds	r1, r7, #1
   11f06:	movs	r5, #0
   11f08:	ldrb	r3, [r6, r3]
   11f0a:	ldr	r0, [pc, #336]	; (1205c <__gethex+0x314>)
   11f0c:	subs	r2, r3, #1
   11f0e:	cmp	r2, #24
   11f10:	bhi.w	11ddc <__gethex+0x94>
   11f14:	ldrb	r2, [r1, #1]
   11f16:	ldrb	r2, [r0, r2]
   11f18:	subs	r0, r2, #1
   11f1a:	cmp	r0, #24
   11f1c:	sub.w	r3, r3, #16
   11f20:	add.w	r1, r1, #1
   11f24:	bhi.n	11f3e <__gethex+0x1f6>
   11f26:	ldrb.w	r0, [r1, #1]!
   11f2a:	add.w	r3, r3, r3, lsl #2
   11f2e:	add.w	r3, r2, r3, lsl #1
   11f32:	ldrb	r2, [r6, r0]
   11f34:	subs	r0, r2, #1
   11f36:	cmp	r0, #24
   11f38:	sub.w	r3, r3, #16
   11f3c:	bls.n	11f26 <__gethex+0x1de>
   11f3e:	cbz	r5, 11f42 <__gethex+0x1fa>
   11f40:	negs	r3, r3
   11f42:	ldr	r2, [sp, #4]
   11f44:	mov	r5, r7
   11f46:	add	r2, r3
   11f48:	mov	r7, r1
   11f4a:	str	r2, [sp, #4]
   11f4c:	str.w	r7, [r9]
   11f50:	cmp.w	sl, #0
   11f54:	beq.w	11dea <__gethex+0xa2>
   11f58:	cmp.w	r8, #0
   11f5c:	ite	eq
   11f5e:	moveq	r0, #6
   11f60:	movne	r0, #0
   11f62:	add	sp, #44	; 0x2c
   11f64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f68:	str.w	r8, [r9]
   11f6c:	mov.w	r8, #0
   11f70:	add.w	r9, r9, #4
   11f74:	mov	r2, r8
   11f76:	movs	r7, #4
   11f78:	b.n	11e2e <__gethex+0xe6>
   11f7a:	ldr	r5, [sp, #0]
   11f7c:	ldr	r1, [sp, #8]
   11f7e:	mov	r2, r5
   11f80:	mov	r0, r4
   11f82:	bl	d29c <strncmp>
   11f86:	cmp	r0, #0
   11f88:	beq.n	11ff8 <__gethex+0x2b0>
   11f8a:	ldrb	r3, [r4, #0]
   11f8c:	mov	r7, r4
   11f8e:	cmp	r3, #80	; 0x50
   11f90:	beq.n	11ef0 <__gethex+0x1a8>
   11f92:	cmp	r3, #112	; 0x70
   11f94:	beq.n	11ef0 <__gethex+0x1a8>
   11f96:	str.w	r7, [r9]
   11f9a:	b.n	11f58 <__gethex+0x210>
   11f9c:	ldr	r3, [sp, #16]
   11f9e:	ldr	r3, [r3, #8]
   11fa0:	cmp	r7, r3
   11fa2:	bge.w	1220e <__gethex+0x4c6>
   11fa6:	mov	r3, r7
   11fa8:	ldr	r0, [sp, #16]
   11faa:	add.w	r2, r0, r3, lsl #2
   11fae:	movs	r1, #1
   11fb0:	adds	r3, #1
   11fb2:	cmp	r4, #2
   11fb4:	str	r3, [r0, #16]
   11fb6:	str	r1, [r2, #20]
   11fb8:	beq.w	121ec <__gethex+0x4a4>
   11fbc:	cmp	r7, r3
   11fbe:	bge.w	12178 <__gethex+0x430>
   11fc2:	movs	r1, #1
   11fc4:	ldr	r0, [sp, #16]
   11fc6:	bl	11ca0 <rshift>
   11fca:	ldr	r3, [sp, #12]
   11fcc:	ldr	r2, [sp, #4]
   11fce:	ldr	r3, [r3, #8]
   11fd0:	adds	r2, #1
   11fd2:	cmp	r2, r3
   11fd4:	str	r2, [sp, #4]
   11fd6:	ble.w	1217e <__gethex+0x436>
   11fda:	ldr	r0, [sp, #20]
   11fdc:	ldr	r1, [sp, #16]
   11fde:	bl	1258c <_Bfree>
   11fe2:	ldr	r2, [sp, #80]	; 0x50
   11fe4:	movs	r3, #0
   11fe6:	movs	r0, #163	; 0xa3
   11fe8:	str	r3, [r2, #0]
   11fea:	add	sp, #44	; 0x2c
   11fec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ff0:	movs	r5, #1
   11ff2:	ldrb	r3, [r7, #2]
   11ff4:	adds	r1, r7, #2
   11ff6:	b.n	11f08 <__gethex+0x1c0>
   11ff8:	ldrb	r2, [r4, r5]
   11ffa:	ldrb	r3, [r6, r2]
   11ffc:	adds	r7, r4, r5
   11ffe:	cmp	r3, #0
   12000:	beq.n	120d6 <__gethex+0x38e>
   12002:	cmp	r2, #48	; 0x30
   12004:	mov	r4, r7
   12006:	bne.n	12012 <__gethex+0x2ca>
   12008:	ldrb.w	r3, [r4, #1]!
   1200c:	cmp	r3, #48	; 0x30
   1200e:	beq.n	12008 <__gethex+0x2c0>
   12010:	ldrb	r3, [r6, r3]
   12012:	clz	sl, r3
   12016:	mov	r5, r7
   12018:	mov.w	sl, sl, lsr #5
   1201c:	mov.w	r8, #1
   12020:	b.n	11da4 <__gethex+0x5c>
   12022:	movs	r4, #1
   12024:	cbz	r7, 12040 <__gethex+0x2f8>
   12026:	ldr	r3, [sp, #12]
   12028:	ldr	r3, [r3, #12]
   1202a:	cmp	r3, #2
   1202c:	beq.w	1213a <__gethex+0x3f2>
   12030:	cmp	r3, #3
   12032:	beq.w	12142 <__gethex+0x3fa>
   12036:	cmp	r3, #1
   12038:	beq.w	121a6 <__gethex+0x45e>
   1203c:	orr.w	r4, r4, #16
   12040:	ldr	r3, [sp, #80]	; 0x50
   12042:	mov	r2, r3
   12044:	ldr	r3, [sp, #16]
   12046:	str	r3, [r2, #0]
   12048:	ldr	r3, [sp, #32]
   1204a:	mov	r2, r3
   1204c:	ldr	r3, [sp, #4]
   1204e:	str	r3, [r2, #0]
   12050:	mov	r0, r4
   12052:	add	sp, #44	; 0x2c
   12054:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12058:	movs	r5, #0
   1205a:	b.n	11ff2 <__gethex+0x2aa>
   1205c:	.word	0x00014274
   12060:	subs	r4, r0, r6
   12062:	mov	r1, r4
   12064:	ldr	r0, [sp, #16]
   12066:	bl	12dc8 <__any_on>
   1206a:	cmp	r0, #0
   1206c:	beq.n	120da <__gethex+0x392>
   1206e:	subs	r2, r4, #1
   12070:	asrs	r1, r2, #5
   12072:	ldr	r0, [sp, #28]
   12074:	and.w	r3, r2, #31
   12078:	ldr.w	r1, [r0, r1, lsl #2]
   1207c:	movs	r7, #1
   1207e:	lsl.w	r3, r7, r3
   12082:	tst	r3, r1
   12084:	beq.n	1209c <__gethex+0x354>
   12086:	cmp	r2, r7
   12088:	ble.w	121c2 <__gethex+0x47a>
   1208c:	subs	r1, r4, #2
   1208e:	ldr	r0, [sp, #16]
   12090:	bl	12dc8 <__any_on>
   12094:	cmp	r0, #0
   12096:	beq.w	121c2 <__gethex+0x47a>
   1209a:	movs	r7, #3
   1209c:	ldr	r3, [sp, #4]
   1209e:	ldr	r0, [sp, #16]
   120a0:	add	r3, r4
   120a2:	mov	r1, r4
   120a4:	str	r3, [sp, #4]
   120a6:	bl	11ca0 <rshift>
   120aa:	b.n	11ea0 <__gethex+0x158>
   120ac:	str	r5, [sp, #4]
   120ae:	b.n	11dd0 <__gethex+0x88>
   120b0:	subs	r4, r6, r0
   120b2:	ldr	r1, [sp, #16]
   120b4:	ldr	r0, [sp, #20]
   120b6:	mov	r2, r4
   120b8:	bl	12938 <__lshift>
   120bc:	ldr	r3, [sp, #4]
   120be:	str	r0, [sp, #16]
   120c0:	subs	r3, r3, r4
   120c2:	str	r3, [sp, #4]
   120c4:	mov	r3, r0
   120c6:	adds	r3, #20
   120c8:	str	r3, [sp, #28]
   120ca:	movs	r7, #0
   120cc:	b.n	11ea0 <__gethex+0x158>
   120ce:	adds	r4, r3, #2
   120d0:	mov.w	r8, #0
   120d4:	b.n	11d90 <__gethex+0x48>
   120d6:	mov	r3, r2
   120d8:	b.n	11f8e <__gethex+0x246>
   120da:	mov	r7, r0
   120dc:	b.n	1209c <__gethex+0x354>
   120de:	subs	r4, r5, #1
   120e0:	cmp	r7, #0
   120e2:	bne.n	12182 <__gethex+0x43a>
   120e4:	cbz	r4, 120f0 <__gethex+0x3a8>
   120e6:	mov	r1, r4
   120e8:	ldr	r0, [sp, #16]
   120ea:	bl	12dc8 <__any_on>
   120ee:	mov	r7, r0
   120f0:	asrs	r3, r4, #5
   120f2:	ldr	r2, [sp, #28]
   120f4:	ldr	r0, [sp, #16]
   120f6:	ldr.w	r2, [r2, r3, lsl #2]
   120fa:	and.w	r4, r4, #31
   120fe:	movs	r3, #1
   12100:	lsl.w	r4, r3, r4
   12104:	tst	r4, r2
   12106:	mov	r1, r5
   12108:	it	ne
   1210a:	orrne.w	r7, r7, #2
   1210e:	bl	11ca0 <rshift>
   12112:	ldr	r3, [sp, #12]
   12114:	ldr	r3, [r3, #4]
   12116:	str	r3, [sp, #4]
   12118:	subs	r6, r6, r5
   1211a:	movs	r4, #2
   1211c:	b.n	12024 <__gethex+0x2dc>
   1211e:	ldr	r1, [sp, #0]
   12120:	ldrb	r3, [r7, r1]
   12122:	ldrb	r2, [r6, r3]
   12124:	adds	r5, r7, r1
   12126:	mov	r7, r5
   12128:	cmp	r2, #0
   1212a:	beq.w	11dca <__gethex+0x82>
   1212e:	ldrb.w	r3, [r7, #1]!
   12132:	ldrb	r2, [r6, r3]
   12134:	cmp	r2, #0
   12136:	bne.n	1212e <__gethex+0x3e6>
   12138:	b.n	11dca <__gethex+0x82>
   1213a:	ldr	r3, [sp, #84]	; 0x54
   1213c:	rsb	r3, r3, #1
   12140:	str	r3, [sp, #84]	; 0x54
   12142:	ldr	r3, [sp, #84]	; 0x54
   12144:	cmp	r3, #0
   12146:	beq.w	1203c <__gethex+0x2f4>
   1214a:	ldr	r3, [sp, #16]
   1214c:	ldr	r5, [sp, #28]
   1214e:	ldr	r7, [r3, #16]
   12150:	mov.w	r8, r7, lsl #2
   12154:	add.w	r0, r5, r8
   12158:	mov	r3, r5
   1215a:	movs	r1, #0
   1215c:	b.n	12168 <__gethex+0x420>
   1215e:	str.w	r1, [r3], #4
   12162:	cmp	r0, r3
   12164:	bls.w	11f9c <__gethex+0x254>
   12168:	ldr	r2, [r3, #0]
   1216a:	cmp.w	r2, #4294967295
   1216e:	beq.n	1215e <__gethex+0x416>
   12170:	adds	r2, #1
   12172:	cmp	r4, #2
   12174:	str	r2, [r3, #0]
   12176:	beq.n	121ec <__gethex+0x4a4>
   12178:	ands.w	r6, r6, #31
   1217c:	bne.n	121fa <__gethex+0x4b2>
   1217e:	movs	r4, #33	; 0x21
   12180:	b.n	12040 <__gethex+0x2f8>
   12182:	movs	r7, #1
   12184:	b.n	120f0 <__gethex+0x3a8>
   12186:	ldr	r2, [sp, #84]	; 0x54
   12188:	cmp	r2, #0
   1218a:	beq.w	11ed4 <__gethex+0x18c>
   1218e:	ldr	r1, [sp, #32]
   12190:	str	r3, [r1, #0]
   12192:	ldr	r3, [sp, #28]
   12194:	ldr	r1, [sp, #16]
   12196:	movs	r2, #1
   12198:	str	r2, [r1, #16]
   1219a:	str	r2, [r3, #0]
   1219c:	ldr	r3, [sp, #80]	; 0x50
   1219e:	mov	r2, r3
   121a0:	movs	r0, #98	; 0x62
   121a2:	str	r1, [r2, #0]
   121a4:	b.n	11f62 <__gethex+0x21a>
   121a6:	lsls	r2, r7, #30
   121a8:	bpl.w	1203c <__gethex+0x2f4>
   121ac:	ldr	r3, [sp, #28]
   121ae:	ldr	r3, [r3, #0]
   121b0:	orrs	r3, r7
   121b2:	lsls	r3, r3, #31
   121b4:	bmi.n	1214a <__gethex+0x402>
   121b6:	b.n	1203c <__gethex+0x2f4>
   121b8:	ldr.w	r9, [sp, #28]
   121bc:	mov.w	r8, #0
   121c0:	b.n	11e70 <__gethex+0x128>
   121c2:	movs	r7, #2
   121c4:	b.n	1209c <__gethex+0x354>
   121c6:	ldr	r2, [sp, #84]	; 0x54
   121c8:	cmp	r2, #0
   121ca:	beq.n	1218e <__gethex+0x446>
   121cc:	b.n	11ed4 <__gethex+0x18c>
   121ce:	cmp	r6, r5
   121d0:	bne.w	11ed4 <__gethex+0x18c>
   121d4:	cmp	r6, #1
   121d6:	ble.n	1218e <__gethex+0x446>
   121d8:	subs	r1, r6, #1
   121da:	ldr	r0, [sp, #16]
   121dc:	bl	12dc8 <__any_on>
   121e0:	cmp	r0, #0
   121e2:	beq.w	11ed4 <__gethex+0x18c>
   121e6:	ldr	r3, [sp, #12]
   121e8:	ldr	r3, [r3, #4]
   121ea:	b.n	1218e <__gethex+0x446>
   121ec:	ldr	r3, [sp, #12]
   121ee:	ldr	r3, [r3, #0]
   121f0:	subs	r3, #1
   121f2:	cmp	r6, r3
   121f4:	beq.n	12240 <__gethex+0x4f8>
   121f6:	movs	r4, #34	; 0x22
   121f8:	b.n	12040 <__gethex+0x2f8>
   121fa:	add	r5, r8
   121fc:	rsb	r6, r6, #32
   12200:	ldr.w	r0, [r5, #-4]
   12204:	bl	126b8 <__hi0bits>
   12208:	cmp	r0, r6
   1220a:	bge.n	1217e <__gethex+0x436>
   1220c:	b.n	11fc2 <__gethex+0x27a>
   1220e:	ldr	r3, [sp, #16]
   12210:	ldr.w	r9, [sp, #20]
   12214:	ldr	r1, [r3, #4]
   12216:	mov	r0, r9
   12218:	adds	r1, #1
   1221a:	bl	12540 <_Balloc>
   1221e:	ldr	r1, [sp, #16]
   12220:	ldr	r3, [r1, #16]
   12222:	adds	r2, r3, #2
   12224:	mov	r5, r0
   12226:	lsls	r2, r2, #2
   12228:	adds	r1, #12
   1222a:	adds	r0, #12
   1222c:	bl	9404 <memcpy>
   12230:	ldr	r1, [sp, #16]
   12232:	mov	r0, r9
   12234:	bl	1258c <_Bfree>
   12238:	str	r5, [sp, #16]
   1223a:	ldr	r3, [r5, #16]
   1223c:	adds	r5, #20
   1223e:	b.n	11fa8 <__gethex+0x260>
   12240:	asrs	r3, r6, #5
   12242:	and.w	r6, r6, #31
   12246:	ldr.w	r2, [r5, r3, lsl #2]
   1224a:	movs	r3, #1
   1224c:	lsls	r3, r6
   1224e:	tst	r3, r2
   12250:	ite	ne
   12252:	movne	r4, #33	; 0x21
   12254:	moveq	r4, #34	; 0x22
   12256:	b.n	12040 <__gethex+0x2f8>

00012258 <__match>:
   12258:	push	{r4, r5}
   1225a:	ldr	r4, [r0, #0]
   1225c:	b.n	12270 <__match+0x18>
   1225e:	ldrb.w	r3, [r4, #1]!
   12262:	sub.w	r5, r3, #65	; 0x41
   12266:	cmp	r5, #25
   12268:	it	ls
   1226a:	addls	r3, #32
   1226c:	cmp	r3, r2
   1226e:	bne.n	12282 <__match+0x2a>
   12270:	ldrb.w	r2, [r1], #1
   12274:	cmp	r2, #0
   12276:	bne.n	1225e <__match+0x6>
   12278:	adds	r4, #1
   1227a:	str	r4, [r0, #0]
   1227c:	movs	r0, #1
   1227e:	pop	{r4, r5}
   12280:	bx	lr
   12282:	movs	r0, #0
   12284:	pop	{r4, r5}
   12286:	bx	lr

00012288 <__hexnan>:
   12288:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1228c:	ldr	r3, [r1, #0]
   1228e:	ldr.w	r9, [pc, #372]	; 12404 <__hexnan+0x17c>
   12292:	sub	sp, #20
   12294:	asrs	r1, r3, #5
   12296:	add.w	r1, r2, r1, lsl #2
   1229a:	ands.w	r3, r3, #31
   1229e:	str	r1, [sp, #4]
   122a0:	itt	ne
   122a2:	addne	r1, #4
   122a4:	strne	r1, [sp, #4]
   122a6:	ldr	r4, [sp, #4]
   122a8:	str	r0, [sp, #8]
   122aa:	str	r3, [sp, #12]
   122ac:	movs	r3, #0
   122ae:	mov	r1, r3
   122b0:	str.w	r3, [r4, #-4]
   122b4:	mov	sl, r3
   122b6:	mov	lr, r3
   122b8:	ldr	r3, [sp, #8]
   122ba:	sub.w	ip, r4, #4
   122be:	ldr	r5, [r3, #0]
   122c0:	mov	r8, ip
   122c2:	mov	r0, ip
   122c4:	ldrb.w	r3, [r5, #1]!
   122c8:	cbz	r3, 12314 <__hexnan+0x8c>
   122ca:	ldrb.w	r4, [r9, r3]
   122ce:	cmp	r4, #0
   122d0:	bne.n	1235a <__hexnan+0xd2>
   122d2:	cmp	r3, #32
   122d4:	bhi.n	12392 <__hexnan+0x10a>
   122d6:	cmp	lr, sl
   122d8:	ble.n	122c4 <__hexnan+0x3c>
   122da:	cmp	r0, r8
   122dc:	bcs.n	12306 <__hexnan+0x7e>
   122de:	cmp	r1, #7
   122e0:	bgt.n	12306 <__hexnan+0x7e>
   122e2:	rsb	r1, r1, #8
   122e6:	lsls	r1, r1, #2
   122e8:	ldr	r6, [r0, #0]
   122ea:	rsb	fp, r1, #32
   122ee:	mov	r3, r0
   122f0:	ldr	r7, [r3, #4]
   122f2:	lsl.w	r4, r7, fp
   122f6:	orrs	r4, r6
   122f8:	lsr.w	r6, r7, r1
   122fc:	str	r4, [r3, #0]
   122fe:	str.w	r6, [r3, #4]!
   12302:	cmp	r8, r3
   12304:	bhi.n	122f0 <__hexnan+0x68>
   12306:	cmp	r0, r2
   12308:	bhi.n	12380 <__hexnan+0xf8>
   1230a:	ldrb.w	r3, [r5, #1]!
   1230e:	movs	r1, #8
   12310:	cmp	r3, #0
   12312:	bne.n	122ca <__hexnan+0x42>
   12314:	cmp.w	lr, #0
   12318:	beq.n	12396 <__hexnan+0x10e>
   1231a:	cmp	r0, r8
   1231c:	bcs.n	12322 <__hexnan+0x9a>
   1231e:	cmp	r1, #7
   12320:	ble.n	123dc <__hexnan+0x154>
   12322:	cmp	r0, r2
   12324:	bls.n	1239e <__hexnan+0x116>
   12326:	mov	r3, r2
   12328:	ldr.w	r1, [r0], #4
   1232c:	str.w	r1, [r3], #4
   12330:	cmp	ip, r0
   12332:	bcs.n	12328 <__hexnan+0xa0>
   12334:	movs	r1, #0
   12336:	str.w	r1, [r3], #4
   1233a:	cmp	ip, r3
   1233c:	bcs.n	12336 <__hexnan+0xae>
   1233e:	ldr	r3, [sp, #4]
   12340:	ldr.w	r3, [r3, #-4]
   12344:	cbnz	r3, 12352 <__hexnan+0xca>
   12346:	cmp	r2, ip
   12348:	beq.n	123c0 <__hexnan+0x138>
   1234a:	ldr.w	r3, [ip, #-4]!
   1234e:	cmp	r3, #0
   12350:	beq.n	12346 <__hexnan+0xbe>
   12352:	movs	r0, #5
   12354:	add	sp, #20
   12356:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1235a:	adds	r1, #1
   1235c:	cmp	r1, #8
   1235e:	add.w	lr, lr, #1
   12362:	ble.n	12372 <__hexnan+0xea>
   12364:	cmp	r0, r2
   12366:	bls.n	122c4 <__hexnan+0x3c>
   12368:	movs	r3, #0
   1236a:	str.w	r3, [r0, #-4]
   1236e:	movs	r1, #1
   12370:	subs	r0, #4
   12372:	ldr	r3, [r0, #0]
   12374:	and.w	r4, r4, #15
   12378:	orr.w	r4, r4, r3, lsl #4
   1237c:	str	r4, [r0, #0]
   1237e:	b.n	122c4 <__hexnan+0x3c>
   12380:	movs	r3, #0
   12382:	sub.w	r8, r0, #4
   12386:	str.w	r3, [r0, #-4]
   1238a:	mov	sl, lr
   1238c:	mov	r0, r8
   1238e:	mov	r1, r3
   12390:	b.n	122c4 <__hexnan+0x3c>
   12392:	cmp	r3, #41	; 0x29
   12394:	beq.n	123ce <__hexnan+0x146>
   12396:	movs	r0, #4
   12398:	add	sp, #20
   1239a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1239e:	ldr	r3, [sp, #12]
   123a0:	cmp	r3, #0
   123a2:	beq.n	1233e <__hexnan+0xb6>
   123a4:	ldr	r4, [sp, #4]
   123a6:	ldr	r3, [sp, #12]
   123a8:	ldr.w	r1, [r4, #-4]
   123ac:	rsb	r3, r3, #32
   123b0:	mov.w	r0, #4294967295
   123b4:	lsr.w	r3, r0, r3
   123b8:	ands	r3, r1
   123ba:	str.w	r3, [r4, #-4]
   123be:	b.n	12344 <__hexnan+0xbc>
   123c0:	movs	r3, #1
   123c2:	movs	r0, #5
   123c4:	str.w	r3, [ip]
   123c8:	add	sp, #20
   123ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123ce:	ldr	r3, [sp, #8]
   123d0:	adds	r5, #1
   123d2:	str	r5, [r3, #0]
   123d4:	cmp.w	lr, #0
   123d8:	bne.n	1231a <__hexnan+0x92>
   123da:	b.n	12396 <__hexnan+0x10e>
   123dc:	rsb	r3, r1, #8
   123e0:	lsls	r3, r3, #2
   123e2:	ldr	r5, [r0, #0]
   123e4:	rsb	r7, r3, #32
   123e8:	mov	r1, r0
   123ea:	ldr	r6, [r1, #4]
   123ec:	lsl.w	r4, r6, r7
   123f0:	orrs	r4, r5
   123f2:	lsr.w	r5, r6, r3
   123f6:	str	r4, [r1, #0]
   123f8:	str.w	r5, [r1, #4]!
   123fc:	cmp	r8, r1
   123fe:	bhi.n	123ea <__hexnan+0x162>
   12400:	b.n	12322 <__hexnan+0x9a>
   12402:	nop
   12404:	.word	0x00014274

00012408 <iswspace>:
   12408:	cmp	r0, #255	; 0xff
   1240a:	bls.n	12410 <iswspace+0x8>
   1240c:	movs	r0, #0
   1240e:	bx	lr
   12410:	push	{r4, lr}
   12412:	mov	r4, r0
   12414:	bl	c48c <__locale_ctype_ptr>
   12418:	add	r0, r4
   1241a:	ldrb	r0, [r0, #1]
   1241c:	and.w	r0, r0, #8
   12420:	uxtb	r0, r0
   12422:	pop	{r4, pc}

00012424 <__localeconv_l>:
   12424:	adds	r0, #240	; 0xf0
   12426:	bx	lr

00012428 <_localeconv_r>:
   12428:	ldr	r2, [pc, #16]	; (1243c <_localeconv_r+0x14>)
   1242a:	ldr	r3, [pc, #20]	; (12440 <_localeconv_r+0x18>)
   1242c:	ldr	r2, [r2, #0]
   1242e:	ldr	r0, [r2, #52]	; 0x34
   12430:	cmp	r0, #0
   12432:	it	eq
   12434:	moveq	r0, r3
   12436:	adds	r0, #240	; 0xf0
   12438:	bx	lr
   1243a:	nop
   1243c:	.word	0x1fff0d78
   12440:	.word	0x1fff0d7c

00012444 <_mbrtowc_r>:
   12444:	push	{r4, r5, r6, r7, lr}
   12446:	sub	sp, #12
   12448:	mov	r7, r0
   1244a:	ldr	r5, [sp, #32]
   1244c:	cbz	r2, 12474 <_mbrtowc_r+0x30>
   1244e:	ldr	r4, [pc, #68]	; (12494 <_mbrtowc_r+0x50>)
   12450:	ldr	r6, [pc, #68]	; (12498 <_mbrtowc_r+0x54>)
   12452:	ldr	r4, [r4, #0]
   12454:	ldr	r4, [r4, #52]	; 0x34
   12456:	str	r5, [sp, #0]
   12458:	cmp	r4, #0
   1245a:	it	eq
   1245c:	moveq	r4, r6
   1245e:	ldr.w	r4, [r4, #228]	; 0xe4
   12462:	blx	r4
   12464:	adds	r3, r0, #1
   12466:	bne.n	12470 <_mbrtowc_r+0x2c>
   12468:	movs	r2, #0
   1246a:	movs	r3, #138	; 0x8a
   1246c:	str	r2, [r5, #0]
   1246e:	str	r3, [r7, #0]
   12470:	add	sp, #12
   12472:	pop	{r4, r5, r6, r7, pc}
   12474:	ldr	r3, [pc, #28]	; (12494 <_mbrtowc_r+0x50>)
   12476:	ldr	r1, [pc, #32]	; (12498 <_mbrtowc_r+0x54>)
   12478:	ldr	r3, [r3, #0]
   1247a:	ldr	r3, [r3, #52]	; 0x34
   1247c:	str	r5, [sp, #0]
   1247e:	cmp	r3, #0
   12480:	it	eq
   12482:	moveq	r3, r1
   12484:	mov	r4, r2
   12486:	mov	r1, r4
   12488:	ldr	r2, [pc, #16]	; (1249c <_mbrtowc_r+0x58>)
   1248a:	ldr.w	r4, [r3, #228]	; 0xe4
   1248e:	movs	r3, #1
   12490:	blx	r4
   12492:	b.n	12464 <_mbrtowc_r+0x20>
   12494:	.word	0x1fff0d78
   12498:	.word	0x1fff0d7c
   1249c:	.word	0x00013b04

000124a0 <memchr>:
   124a0:	and.w	r1, r1, #255	; 0xff
   124a4:	cmp	r2, #16
   124a6:	blt.n	12500 <memchr+0x60>
   124a8:	tst.w	r0, #7
   124ac:	beq.n	124c0 <memchr+0x20>
   124ae:	ldrb.w	r3, [r0], #1
   124b2:	subs	r2, #1
   124b4:	cmp	r3, r1
   124b6:	beq.n	12514 <memchr+0x74>
   124b8:	tst.w	r0, #7
   124bc:	cbz	r2, 12510 <memchr+0x70>
   124be:	bne.n	124ae <memchr+0xe>
   124c0:	push	{r4, r5, r6, r7}
   124c2:	orr.w	r1, r1, r1, lsl #8
   124c6:	orr.w	r1, r1, r1, lsl #16
   124ca:	bic.w	r4, r2, #7
   124ce:	mvns.w	r7, #0
   124d2:	movs	r3, #0
   124d4:	ldrd	r5, r6, [r0], #8
   124d8:	subs	r4, #8
   124da:	eor.w	r5, r5, r1
   124de:	eor.w	r6, r6, r1
   124e2:	uadd8	r5, r5, r7
   124e6:	sel	r5, r3, r7
   124ea:	uadd8	r6, r6, r7
   124ee:	sel	r6, r5, r7
   124f2:	cbnz	r6, 12518 <memchr+0x78>
   124f4:	bne.n	124d4 <memchr+0x34>
   124f6:	pop	{r4, r5, r6, r7}
   124f8:	and.w	r1, r1, #255	; 0xff
   124fc:	and.w	r2, r2, #7
   12500:	cbz	r2, 12510 <memchr+0x70>
   12502:	ldrb.w	r3, [r0], #1
   12506:	subs	r2, #1
   12508:	eor.w	r3, r3, r1
   1250c:	cbz	r3, 12514 <memchr+0x74>
   1250e:	bne.n	12502 <memchr+0x62>
   12510:	movs	r0, #0
   12512:	bx	lr
   12514:	subs	r0, #1
   12516:	bx	lr
   12518:	cmp	r5, #0
   1251a:	itte	eq
   1251c:	moveq	r5, r6
   1251e:	subeq	r0, #3
   12520:	subne	r0, #7
   12522:	tst.w	r5, #1
   12526:	bne.n	12538 <memchr+0x98>
   12528:	adds	r0, #1
   1252a:	tst.w	r5, #256	; 0x100
   1252e:	ittt	eq
   12530:	addeq	r0, #1
   12532:	tsteq.w	r5, #98304	; 0x18000
   12536:	addeq	r0, #1
   12538:	pop	{r4, r5, r6, r7}
   1253a:	subs	r0, #1
   1253c:	bx	lr
   1253e:	nop

00012540 <_Balloc>:
   12540:	ldr	r3, [r0, #76]	; 0x4c
   12542:	push	{r4, r5, r6, lr}
   12544:	mov	r5, r0
   12546:	mov	r4, r1
   12548:	cbz	r3, 1255e <_Balloc+0x1e>
   1254a:	ldr.w	r0, [r3, r4, lsl #2]
   1254e:	cbz	r0, 12572 <_Balloc+0x32>
   12550:	ldr	r2, [r0, #0]
   12552:	str.w	r2, [r3, r4, lsl #2]
   12556:	movs	r3, #0
   12558:	str	r3, [r0, #16]
   1255a:	str	r3, [r0, #12]
   1255c:	pop	{r4, r5, r6, pc}
   1255e:	movs	r2, #33	; 0x21
   12560:	movs	r1, #4
   12562:	bl	13730 <_calloc_r>
   12566:	str	r0, [r5, #76]	; 0x4c
   12568:	mov	r3, r0
   1256a:	cmp	r0, #0
   1256c:	bne.n	1254a <_Balloc+0xa>
   1256e:	movs	r0, #0
   12570:	pop	{r4, r5, r6, pc}
   12572:	movs	r1, #1
   12574:	lsl.w	r6, r1, r4
   12578:	adds	r2, r6, #5
   1257a:	mov	r0, r5
   1257c:	lsls	r2, r2, #2
   1257e:	bl	13730 <_calloc_r>
   12582:	cmp	r0, #0
   12584:	beq.n	1256e <_Balloc+0x2e>
   12586:	str	r4, [r0, #4]
   12588:	str	r6, [r0, #8]
   1258a:	b.n	12556 <_Balloc+0x16>

0001258c <_Bfree>:
   1258c:	cbz	r1, 1259c <_Bfree+0x10>
   1258e:	ldr	r3, [r0, #76]	; 0x4c
   12590:	ldr	r2, [r1, #4]
   12592:	ldr.w	r0, [r3, r2, lsl #2]
   12596:	str	r0, [r1, #0]
   12598:	str.w	r1, [r3, r2, lsl #2]
   1259c:	bx	lr
   1259e:	nop

000125a0 <__multadd>:
   125a0:	push	{r4, r5, r6, r7, lr}
   125a2:	ldr	r4, [r1, #16]
   125a4:	sub	sp, #12
   125a6:	mov	r5, r1
   125a8:	mov	r6, r0
   125aa:	add.w	lr, r1, #20
   125ae:	movs	r7, #0
   125b0:	ldr.w	r0, [lr]
   125b4:	uxth	r1, r0
   125b6:	mla	r1, r2, r1, r3
   125ba:	lsrs	r3, r1, #16
   125bc:	lsrs	r0, r0, #16
   125be:	mla	r3, r2, r0, r3
   125c2:	uxth	r1, r1
   125c4:	adds	r7, #1
   125c6:	add.w	r1, r1, r3, lsl #16
   125ca:	cmp	r4, r7
   125cc:	str.w	r1, [lr], #4
   125d0:	mov.w	r3, r3, lsr #16
   125d4:	bgt.n	125b0 <__multadd+0x10>
   125d6:	cbz	r3, 125e8 <__multadd+0x48>
   125d8:	ldr	r2, [r5, #8]
   125da:	cmp	r4, r2
   125dc:	bge.n	125ee <__multadd+0x4e>
   125de:	add.w	r2, r5, r4, lsl #2
   125e2:	adds	r4, #1
   125e4:	str	r3, [r2, #20]
   125e6:	str	r4, [r5, #16]
   125e8:	mov	r0, r5
   125ea:	add	sp, #12
   125ec:	pop	{r4, r5, r6, r7, pc}
   125ee:	ldr	r1, [r5, #4]
   125f0:	str	r3, [sp, #4]
   125f2:	adds	r1, #1
   125f4:	mov	r0, r6
   125f6:	bl	12540 <_Balloc>
   125fa:	ldr	r2, [r5, #16]
   125fc:	adds	r2, #2
   125fe:	add.w	r1, r5, #12
   12602:	mov	r7, r0
   12604:	lsls	r2, r2, #2
   12606:	adds	r0, #12
   12608:	bl	9404 <memcpy>
   1260c:	ldr	r2, [r6, #76]	; 0x4c
   1260e:	ldr	r1, [r5, #4]
   12610:	ldr	r3, [sp, #4]
   12612:	ldr.w	r0, [r2, r1, lsl #2]
   12616:	str	r0, [r5, #0]
   12618:	str.w	r5, [r2, r1, lsl #2]
   1261c:	mov	r5, r7
   1261e:	b.n	125de <__multadd+0x3e>

00012620 <__s2b>:
   12620:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12624:	ldr	r4, [pc, #140]	; (126b4 <__s2b+0x94>)
   12626:	ldr	r5, [sp, #32]
   12628:	mov	r7, r3
   1262a:	adds	r3, #8
   1262c:	smull	r4, lr, r4, r3
   12630:	asrs	r3, r3, #31
   12632:	rsb	lr, r3, lr, asr #1
   12636:	cmp.w	lr, #1
   1263a:	mov	r6, r0
   1263c:	mov	r4, r1
   1263e:	mov	r8, r2
   12640:	ble.n	126ae <__s2b+0x8e>
   12642:	movs	r3, #1
   12644:	movs	r1, #0
   12646:	lsls	r3, r3, #1
   12648:	cmp	lr, r3
   1264a:	add.w	r1, r1, #1
   1264e:	bgt.n	12646 <__s2b+0x26>
   12650:	mov	r0, r6
   12652:	bl	12540 <_Balloc>
   12656:	movs	r3, #1
   12658:	cmp.w	r8, #9
   1265c:	str	r5, [r0, #20]
   1265e:	str	r3, [r0, #16]
   12660:	ble.n	126a6 <__s2b+0x86>
   12662:	add.w	r9, r4, #9
   12666:	mov	r5, r9
   12668:	add	r4, r8
   1266a:	ldrb.w	r3, [r5], #1
   1266e:	mov	r1, r0
   12670:	subs	r3, #48	; 0x30
   12672:	movs	r2, #10
   12674:	mov	r0, r6
   12676:	bl	125a0 <__multadd>
   1267a:	cmp	r5, r4
   1267c:	bne.n	1266a <__s2b+0x4a>
   1267e:	add.w	r4, r9, r8
   12682:	subs	r4, #8
   12684:	cmp	r7, r8
   12686:	ble.n	126a2 <__s2b+0x82>
   12688:	rsb	r7, r8, r7
   1268c:	add	r7, r4
   1268e:	ldrb.w	r3, [r4], #1
   12692:	mov	r1, r0
   12694:	subs	r3, #48	; 0x30
   12696:	movs	r2, #10
   12698:	mov	r0, r6
   1269a:	bl	125a0 <__multadd>
   1269e:	cmp	r7, r4
   126a0:	bne.n	1268e <__s2b+0x6e>
   126a2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   126a6:	adds	r4, #10
   126a8:	mov.w	r8, #9
   126ac:	b.n	12684 <__s2b+0x64>
   126ae:	movs	r1, #0
   126b0:	b.n	12650 <__s2b+0x30>
   126b2:	nop
   126b4:	.word	0x38e38e39

000126b8 <__hi0bits>:
   126b8:	lsrs	r3, r0, #16
   126ba:	lsls	r3, r3, #16
   126bc:	cbnz	r3, 126ec <__hi0bits+0x34>
   126be:	lsls	r0, r0, #16
   126c0:	movs	r3, #16
   126c2:	tst.w	r0, #4278190080	; 0xff000000
   126c6:	itt	eq
   126c8:	lsleq	r0, r0, #8
   126ca:	addeq	r3, #8
   126cc:	tst.w	r0, #4026531840	; 0xf0000000
   126d0:	itt	eq
   126d2:	lsleq	r0, r0, #4
   126d4:	addeq	r3, #4
   126d6:	tst.w	r0, #3221225472	; 0xc0000000
   126da:	itt	eq
   126dc:	lsleq	r0, r0, #2
   126de:	addeq	r3, #2
   126e0:	cmp	r0, #0
   126e2:	blt.n	126f4 <__hi0bits+0x3c>
   126e4:	lsls	r2, r0, #1
   126e6:	bmi.n	126f0 <__hi0bits+0x38>
   126e8:	movs	r0, #32
   126ea:	bx	lr
   126ec:	movs	r3, #0
   126ee:	b.n	126c2 <__hi0bits+0xa>
   126f0:	adds	r0, r3, #1
   126f2:	bx	lr
   126f4:	mov	r0, r3
   126f6:	bx	lr

000126f8 <__lo0bits>:
   126f8:	ldr	r3, [r0, #0]
   126fa:	ands.w	r2, r3, #7
   126fe:	beq.n	12710 <__lo0bits+0x18>
   12700:	lsls	r1, r3, #31
   12702:	bmi.n	12746 <__lo0bits+0x4e>
   12704:	lsls	r2, r3, #30
   12706:	bmi.n	1274a <__lo0bits+0x52>
   12708:	lsrs	r3, r3, #2
   1270a:	str	r3, [r0, #0]
   1270c:	movs	r0, #2
   1270e:	bx	lr
   12710:	uxth	r1, r3
   12712:	cbnz	r1, 12718 <__lo0bits+0x20>
   12714:	lsrs	r3, r3, #16
   12716:	movs	r2, #16
   12718:	tst.w	r3, #255	; 0xff
   1271c:	itt	eq
   1271e:	lsreq	r3, r3, #8
   12720:	addeq	r2, #8
   12722:	lsls	r1, r3, #28
   12724:	itt	eq
   12726:	lsreq	r3, r3, #4
   12728:	addeq	r2, #4
   1272a:	lsls	r1, r3, #30
   1272c:	itt	eq
   1272e:	lsreq	r3, r3, #2
   12730:	addeq	r2, #2
   12732:	lsls	r1, r3, #31
   12734:	bmi.n	12740 <__lo0bits+0x48>
   12736:	lsrs	r3, r3, #1
   12738:	bne.n	1273e <__lo0bits+0x46>
   1273a:	movs	r0, #32
   1273c:	bx	lr
   1273e:	adds	r2, #1
   12740:	str	r3, [r0, #0]
   12742:	mov	r0, r2
   12744:	bx	lr
   12746:	movs	r0, #0
   12748:	bx	lr
   1274a:	lsrs	r3, r3, #1
   1274c:	str	r3, [r0, #0]
   1274e:	movs	r0, #1
   12750:	bx	lr
   12752:	nop

00012754 <__i2b>:
   12754:	push	{r4, lr}
   12756:	mov	r4, r1
   12758:	movs	r1, #1
   1275a:	bl	12540 <_Balloc>
   1275e:	movs	r2, #1
   12760:	str	r4, [r0, #20]
   12762:	str	r2, [r0, #16]
   12764:	pop	{r4, pc}
   12766:	nop

00012768 <__multiply>:
   12768:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1276c:	ldr	r5, [r1, #16]
   1276e:	ldr	r7, [r2, #16]
   12770:	cmp	r5, r7
   12772:	sub	sp, #12
   12774:	mov	r4, r1
   12776:	mov	r6, r2
   12778:	bge.n	12784 <__multiply+0x1c>
   1277a:	mov	r2, r5
   1277c:	mov	r4, r6
   1277e:	mov	r5, r7
   12780:	mov	r6, r1
   12782:	mov	r7, r2
   12784:	ldr	r3, [r4, #8]
   12786:	ldr	r1, [r4, #4]
   12788:	add.w	r8, r5, r7
   1278c:	cmp	r8, r3
   1278e:	it	gt
   12790:	addgt	r1, #1
   12792:	bl	12540 <_Balloc>
   12796:	add.w	ip, r0, #20
   1279a:	add.w	r9, ip, r8, lsl #2
   1279e:	cmp	ip, r9
   127a0:	str	r0, [sp, #0]
   127a2:	bcs.n	127b0 <__multiply+0x48>
   127a4:	mov	r3, ip
   127a6:	movs	r1, #0
   127a8:	str.w	r1, [r3], #4
   127ac:	cmp	r9, r3
   127ae:	bhi.n	127a8 <__multiply+0x40>
   127b0:	add.w	r2, r6, #20
   127b4:	add.w	sl, r2, r7, lsl #2
   127b8:	add.w	r3, r4, #20
   127bc:	cmp	r2, sl
   127be:	add.w	lr, r3, r5, lsl #2
   127c2:	bcs.n	1286e <__multiply+0x106>
   127c4:	str.w	r9, [sp, #4]
   127c8:	mov	r9, r3
   127ca:	ldr.w	r3, [r2], #4
   127ce:	uxth.w	fp, r3
   127d2:	cmp.w	fp, #0
   127d6:	beq.n	1281a <__multiply+0xb2>
   127d8:	movs	r0, #0
   127da:	mov	r7, r9
   127dc:	mov	r6, ip
   127de:	mov	r5, r0
   127e0:	b.n	127e4 <__multiply+0x7c>
   127e2:	mov	r6, r3
   127e4:	ldr.w	r4, [r7], #4
   127e8:	ldr	r0, [r6, #0]
   127ea:	uxth	r1, r4
   127ec:	uxth	r3, r0
   127ee:	mla	r1, fp, r1, r3
   127f2:	lsrs	r4, r4, #16
   127f4:	lsrs	r0, r0, #16
   127f6:	adds	r3, r1, r5
   127f8:	mla	r0, fp, r4, r0
   127fc:	add.w	r0, r0, r3, lsr #16
   12800:	uxth	r1, r3
   12802:	mov	r3, r6
   12804:	orr.w	r1, r1, r0, lsl #16
   12808:	cmp	lr, r7
   1280a:	mov.w	r5, r0, lsr #16
   1280e:	str.w	r1, [r3], #4
   12812:	bhi.n	127e2 <__multiply+0x7a>
   12814:	str	r5, [r6, #4]
   12816:	ldr.w	r3, [r2, #-4]
   1281a:	movs.w	fp, r3, lsr #16
   1281e:	beq.n	12862 <__multiply+0xfa>
   12820:	ldr.w	r3, [ip]
   12824:	mov	r7, ip
   12826:	mov	r0, r3
   12828:	mov	r5, r9
   1282a:	movs	r1, #0
   1282c:	b.n	12830 <__multiply+0xc8>
   1282e:	mov	r7, r6
   12830:	ldrh	r4, [r5, #0]
   12832:	lsrs	r0, r0, #16
   12834:	mla	r0, fp, r4, r0
   12838:	add	r1, r0
   1283a:	uxth	r4, r3
   1283c:	mov	r6, r7
   1283e:	orr.w	r3, r4, r1, lsl #16
   12842:	str.w	r3, [r6], #4
   12846:	ldr	r0, [r7, #4]
   12848:	ldr.w	r4, [r5], #4
   1284c:	uxth	r3, r0
   1284e:	lsrs	r4, r4, #16
   12850:	mla	r4, fp, r4, r3
   12854:	add.w	r3, r4, r1, lsr #16
   12858:	cmp	lr, r5
   1285a:	mov.w	r1, r3, lsr #16
   1285e:	bhi.n	1282e <__multiply+0xc6>
   12860:	str	r3, [r7, #4]
   12862:	cmp	sl, r2
   12864:	add.w	ip, ip, #4
   12868:	bhi.n	127ca <__multiply+0x62>
   1286a:	ldr.w	r9, [sp, #4]
   1286e:	cmp.w	r8, #0
   12872:	ble.n	1288c <__multiply+0x124>
   12874:	ldr.w	r3, [r9, #-4]
   12878:	sub.w	r9, r9, #4
   1287c:	cbz	r3, 12886 <__multiply+0x11e>
   1287e:	b.n	1288c <__multiply+0x124>
   12880:	ldr.w	r3, [r9, #-4]!
   12884:	cbnz	r3, 1288c <__multiply+0x124>
   12886:	subs.w	r8, r8, #1
   1288a:	bne.n	12880 <__multiply+0x118>
   1288c:	ldr	r0, [sp, #0]
   1288e:	str.w	r8, [r0, #16]
   12892:	add	sp, #12
   12894:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012898 <__pow5mult>:
   12898:	ands.w	r3, r2, #3
   1289c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128a0:	mov	r4, r2
   128a2:	mov	r7, r0
   128a4:	bne.n	12904 <__pow5mult+0x6c>
   128a6:	mov	r6, r1
   128a8:	asrs	r4, r4, #2
   128aa:	beq.n	128e6 <__pow5mult+0x4e>
   128ac:	ldr	r5, [r7, #72]	; 0x48
   128ae:	cbz	r5, 12916 <__pow5mult+0x7e>
   128b0:	lsls	r3, r4, #31
   128b2:	mov.w	r8, #0
   128b6:	bmi.n	128c6 <__pow5mult+0x2e>
   128b8:	asrs	r4, r4, #1
   128ba:	beq.n	128e6 <__pow5mult+0x4e>
   128bc:	ldr	r0, [r5, #0]
   128be:	cbz	r0, 128ec <__pow5mult+0x54>
   128c0:	mov	r5, r0
   128c2:	lsls	r3, r4, #31
   128c4:	bpl.n	128b8 <__pow5mult+0x20>
   128c6:	mov	r2, r5
   128c8:	mov	r1, r6
   128ca:	mov	r0, r7
   128cc:	bl	12768 <__multiply>
   128d0:	cbz	r6, 12900 <__pow5mult+0x68>
   128d2:	ldr	r2, [r6, #4]
   128d4:	ldr	r3, [r7, #76]	; 0x4c
   128d6:	asrs	r4, r4, #1
   128d8:	ldr.w	r1, [r3, r2, lsl #2]
   128dc:	str	r1, [r6, #0]
   128de:	str.w	r6, [r3, r2, lsl #2]
   128e2:	mov	r6, r0
   128e4:	bne.n	128bc <__pow5mult+0x24>
   128e6:	mov	r0, r6
   128e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   128ec:	mov	r2, r5
   128ee:	mov	r1, r5
   128f0:	mov	r0, r7
   128f2:	bl	12768 <__multiply>
   128f6:	str	r0, [r5, #0]
   128f8:	str.w	r8, [r0]
   128fc:	mov	r5, r0
   128fe:	b.n	128c2 <__pow5mult+0x2a>
   12900:	mov	r6, r0
   12902:	b.n	128b8 <__pow5mult+0x20>
   12904:	subs	r2, r3, #1
   12906:	ldr	r5, [pc, #44]	; (12934 <__pow5mult+0x9c>)
   12908:	movs	r3, #0
   1290a:	ldr.w	r2, [r5, r2, lsl #2]
   1290e:	bl	125a0 <__multadd>
   12912:	mov	r6, r0
   12914:	b.n	128a8 <__pow5mult+0x10>
   12916:	movs	r1, #1
   12918:	mov	r0, r7
   1291a:	bl	12540 <_Balloc>
   1291e:	movw	r1, #625	; 0x271
   12922:	movs	r2, #1
   12924:	movs	r3, #0
   12926:	str	r1, [r0, #20]
   12928:	str	r2, [r0, #16]
   1292a:	mov	r5, r0
   1292c:	str	r0, [r7, #72]	; 0x48
   1292e:	str	r3, [r0, #0]
   12930:	b.n	128b0 <__pow5mult+0x18>
   12932:	nop
   12934:	.word	0x00014468

00012938 <__lshift>:
   12938:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1293c:	mov	r9, r2
   1293e:	ldr	r2, [r1, #16]
   12940:	ldr	r3, [r1, #8]
   12942:	mov.w	r4, r9, asr #5
   12946:	add.w	r8, r4, r2
   1294a:	add.w	r5, r8, #1
   1294e:	cmp	r5, r3
   12950:	mov	r6, r1
   12952:	mov	sl, r0
   12954:	ldr	r1, [r1, #4]
   12956:	ble.n	12962 <__lshift+0x2a>
   12958:	lsls	r3, r3, #1
   1295a:	cmp	r5, r3
   1295c:	add.w	r1, r1, #1
   12960:	bgt.n	12958 <__lshift+0x20>
   12962:	mov	r0, sl
   12964:	bl	12540 <_Balloc>
   12968:	cmp	r4, #0
   1296a:	add.w	r2, r0, #20
   1296e:	ble.n	129e2 <__lshift+0xaa>
   12970:	add.w	r3, r2, r4, lsl #2
   12974:	movs	r1, #0
   12976:	str.w	r1, [r2], #4
   1297a:	cmp	r3, r2
   1297c:	bne.n	12976 <__lshift+0x3e>
   1297e:	ldr	r4, [r6, #16]
   12980:	add.w	r1, r6, #20
   12984:	ands.w	r9, r9, #31
   12988:	add.w	lr, r1, r4, lsl #2
   1298c:	beq.n	129d2 <__lshift+0x9a>
   1298e:	rsb	r2, r9, #32
   12992:	movs	r4, #0
   12994:	ldr	r7, [r1, #0]
   12996:	lsl.w	ip, r7, r9
   1299a:	orr.w	r4, ip, r4
   1299e:	mov	ip, r3
   129a0:	str.w	r4, [r3], #4
   129a4:	ldr.w	r4, [r1], #4
   129a8:	cmp	lr, r1
   129aa:	lsr.w	r4, r4, r2
   129ae:	bhi.n	12994 <__lshift+0x5c>
   129b0:	str.w	r4, [ip, #4]
   129b4:	cbz	r4, 129ba <__lshift+0x82>
   129b6:	add.w	r5, r8, #2
   129ba:	ldr.w	r3, [sl, #76]	; 0x4c
   129be:	ldr	r2, [r6, #4]
   129c0:	subs	r5, #1
   129c2:	ldr.w	r1, [r3, r2, lsl #2]
   129c6:	str	r5, [r0, #16]
   129c8:	str	r1, [r6, #0]
   129ca:	str.w	r6, [r3, r2, lsl #2]
   129ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   129d2:	subs	r3, #4
   129d4:	ldr.w	r2, [r1], #4
   129d8:	str.w	r2, [r3, #4]!
   129dc:	cmp	lr, r1
   129de:	bhi.n	129d4 <__lshift+0x9c>
   129e0:	b.n	129ba <__lshift+0x82>
   129e2:	mov	r3, r2
   129e4:	b.n	1297e <__lshift+0x46>
   129e6:	nop

000129e8 <__mcmp>:
   129e8:	ldr	r2, [r0, #16]
   129ea:	ldr	r3, [r1, #16]
   129ec:	subs	r2, r2, r3
   129ee:	bne.n	12a18 <__mcmp+0x30>
   129f0:	lsls	r3, r3, #2
   129f2:	adds	r0, #20
   129f4:	adds	r1, #20
   129f6:	add	r1, r3
   129f8:	push	{r4}
   129fa:	add	r3, r0
   129fc:	b.n	12a02 <__mcmp+0x1a>
   129fe:	cmp	r0, r3
   12a00:	bcs.n	12a1c <__mcmp+0x34>
   12a02:	ldr.w	r4, [r3, #-4]!
   12a06:	ldr.w	r2, [r1, #-4]!
   12a0a:	cmp	r4, r2
   12a0c:	beq.n	129fe <__mcmp+0x16>
   12a0e:	bcc.n	12a24 <__mcmp+0x3c>
   12a10:	movs	r0, #1
   12a12:	ldr.w	r4, [sp], #4
   12a16:	bx	lr
   12a18:	mov	r0, r2
   12a1a:	bx	lr
   12a1c:	movs	r0, #0
   12a1e:	ldr.w	r4, [sp], #4
   12a22:	bx	lr
   12a24:	mov.w	r0, #4294967295
   12a28:	b.n	12a12 <__mcmp+0x2a>
   12a2a:	nop

00012a2c <__mdiff>:
   12a2c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12a30:	ldr	r3, [r1, #16]
   12a32:	mov	r7, r1
   12a34:	ldr	r1, [r2, #16]
   12a36:	subs	r3, r3, r1
   12a38:	cmp	r3, #0
   12a3a:	mov	r8, r2
   12a3c:	bne.n	12a6e <__mdiff+0x42>
   12a3e:	lsls	r1, r1, #2
   12a40:	add.w	r2, r7, #20
   12a44:	add.w	r5, r8, #20
   12a48:	adds	r3, r2, r1
   12a4a:	add	r1, r5
   12a4c:	b.n	12a52 <__mdiff+0x26>
   12a4e:	cmp	r2, r3
   12a50:	bcs.n	12b10 <__mdiff+0xe4>
   12a52:	ldr.w	r6, [r3, #-4]!
   12a56:	ldr.w	r4, [r1, #-4]!
   12a5a:	cmp	r6, r4
   12a5c:	beq.n	12a4e <__mdiff+0x22>
   12a5e:	bcs.n	12b22 <__mdiff+0xf6>
   12a60:	mov	r3, r7
   12a62:	mov	r4, r2
   12a64:	mov	r7, r8
   12a66:	mov.w	r9, #1
   12a6a:	mov	r8, r3
   12a6c:	b.n	12a7c <__mdiff+0x50>
   12a6e:	blt.n	12b2c <__mdiff+0x100>
   12a70:	add.w	r5, r7, #20
   12a74:	add.w	r4, r2, #20
   12a78:	mov.w	r9, #0
   12a7c:	ldr	r1, [r7, #4]
   12a7e:	bl	12540 <_Balloc>
   12a82:	ldr.w	r3, [r8, #16]
   12a86:	ldr	r6, [r7, #16]
   12a88:	str.w	r9, [r0, #12]
   12a8c:	add.w	ip, r4, r3, lsl #2
   12a90:	mov	lr, r4
   12a92:	add.w	r7, r5, r6, lsl #2
   12a96:	add.w	r4, r0, #20
   12a9a:	movs	r3, #0
   12a9c:	ldr.w	r1, [lr], #4
   12aa0:	ldr.w	r8, [r5], #4
   12aa4:	uxth	r2, r1
   12aa6:	uxtah	r3, r3, r8
   12aaa:	lsrs	r1, r1, #16
   12aac:	subs	r2, r3, r2
   12aae:	rsb	r3, r1, r8, lsr #16
   12ab2:	add.w	r3, r3, r2, asr #16
   12ab6:	uxth	r2, r2
   12ab8:	orr.w	r2, r2, r3, lsl #16
   12abc:	cmp	ip, lr
   12abe:	str.w	r2, [r4], #4
   12ac2:	mov.w	r3, r3, asr #16
   12ac6:	bhi.n	12a9c <__mdiff+0x70>
   12ac8:	cmp	r7, r5
   12aca:	bls.n	12afc <__mdiff+0xd0>
   12acc:	mov	ip, r4
   12ace:	mov	r1, r5
   12ad0:	ldr.w	lr, [r1], #4
   12ad4:	uxtah	r2, r3, lr
   12ad8:	asrs	r3, r2, #16
   12ada:	add.w	r3, r3, lr, lsr #16
   12ade:	uxth	r2, r2
   12ae0:	orr.w	r2, r2, r3, lsl #16
   12ae4:	cmp	r7, r1
   12ae6:	str.w	r2, [ip], #4
   12aea:	mov.w	r3, r3, asr #16
   12aee:	bhi.n	12ad0 <__mdiff+0xa4>
   12af0:	mvns	r5, r5
   12af2:	add	r5, r7
   12af4:	bic.w	r5, r5, #3
   12af8:	adds	r5, #4
   12afa:	add	r4, r5
   12afc:	subs	r4, #4
   12afe:	cbnz	r2, 12b0a <__mdiff+0xde>
   12b00:	ldr.w	r3, [r4, #-4]!
   12b04:	subs	r6, #1
   12b06:	cmp	r3, #0
   12b08:	beq.n	12b00 <__mdiff+0xd4>
   12b0a:	str	r6, [r0, #16]
   12b0c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12b10:	movs	r1, #0
   12b12:	bl	12540 <_Balloc>
   12b16:	movs	r2, #1
   12b18:	movs	r3, #0
   12b1a:	str	r2, [r0, #16]
   12b1c:	str	r3, [r0, #20]
   12b1e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12b22:	mov	r4, r5
   12b24:	mov.w	r9, #0
   12b28:	mov	r5, r2
   12b2a:	b.n	12a7c <__mdiff+0x50>
   12b2c:	mov	r3, r7
   12b2e:	add.w	r4, r7, #20
   12b32:	add.w	r5, r8, #20
   12b36:	mov	r7, r8
   12b38:	mov.w	r9, #1
   12b3c:	mov	r8, r3
   12b3e:	b.n	12a7c <__mdiff+0x50>

00012b40 <__ulp>:
   12b40:	ldr	r3, [pc, #76]	; (12b90 <__ulp+0x50>)
   12b42:	vmov	r2, s1
   12b46:	ands	r2, r3
   12b48:	sub.w	r3, r2, #54525952	; 0x3400000
   12b4c:	cmp	r3, #0
   12b4e:	ble.n	12b5a <__ulp+0x1a>
   12b50:	movs	r0, #0
   12b52:	mov	r1, r3
   12b54:	vmov	d0, r0, r1
   12b58:	bx	lr
   12b5a:	negs	r3, r3
   12b5c:	asrs	r3, r3, #20
   12b5e:	cmp	r3, #19
   12b60:	ble.n	12b7e <__ulp+0x3e>
   12b62:	subs	r3, #20
   12b64:	cmp	r3, #30
   12b66:	ittte	le
   12b68:	rsble	r3, r3, #31
   12b6c:	movle	r2, #1
   12b6e:	lslle.w	r3, r2, r3
   12b72:	movgt	r3, #1
   12b74:	movs	r1, #0
   12b76:	mov	r0, r3
   12b78:	vmov	d0, r0, r1
   12b7c:	bx	lr
   12b7e:	mov.w	r2, #524288	; 0x80000
   12b82:	movs	r0, #0
   12b84:	asr.w	r1, r2, r3
   12b88:	vmov	d0, r0, r1
   12b8c:	bx	lr
   12b8e:	nop
   12b90:	.word	0x7ff00000

00012b94 <__b2d>:
   12b94:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12b98:	ldr	r6, [r0, #16]
   12b9a:	add.w	r8, r0, #20
   12b9e:	add.w	r6, r8, r6, lsl #2
   12ba2:	ldr.w	r7, [r6, #-4]
   12ba6:	mov	r0, r7
   12ba8:	bl	126b8 <__hi0bits>
   12bac:	rsb	r3, r0, #32
   12bb0:	cmp	r0, #10
   12bb2:	str	r3, [r1, #0]
   12bb4:	sub.w	r3, r6, #4
   12bb8:	bgt.n	12bec <__b2d+0x58>
   12bba:	cmp	r8, r3
   12bbc:	rsb	r2, r0, #11
   12bc0:	it	cc
   12bc2:	ldrcc.w	r3, [r6, #-8]
   12bc6:	lsr.w	r1, r7, r2
   12bca:	add.w	r0, r0, #21
   12bce:	orr.w	r5, r1, #1069547520	; 0x3fc00000
   12bd2:	ite	cc
   12bd4:	lsrcc	r3, r2
   12bd6:	movcs	r3, #0
   12bd8:	lsl.w	r0, r7, r0
   12bdc:	orr.w	r5, r5, #3145728	; 0x300000
   12be0:	orr.w	r4, r0, r3
   12be4:	vmov	d0, r4, r5
   12be8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12bec:	cmp	r8, r3
   12bee:	bcs.n	12c32 <__b2d+0x9e>
   12bf0:	subs.w	r3, r0, #11
   12bf4:	ldr.w	r2, [r6, #-8]
   12bf8:	beq.n	12c38 <__b2d+0xa4>
   12bfa:	lsl.w	r0, r7, r3
   12bfe:	orr.w	r7, r0, #1069547520	; 0x3fc00000
   12c02:	rsb	lr, r3, #32
   12c06:	sub.w	r1, r6, #8
   12c0a:	orr.w	r7, r7, #3145728	; 0x300000
   12c0e:	lsr.w	r0, r2, lr
   12c12:	cmp	r8, r1
   12c14:	orr.w	r5, r7, r0
   12c18:	bcs.n	12c5c <__b2d+0xc8>
   12c1a:	ldr.w	r1, [r6, #-12]
   12c1e:	lsl.w	r0, r2, r3
   12c22:	lsr.w	r3, r1, lr
   12c26:	orrs	r0, r3
   12c28:	mov	r4, r0
   12c2a:	vmov	d0, r4, r5
   12c2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c32:	subs	r0, #11
   12c34:	bne.n	12c4a <__b2d+0xb6>
   12c36:	mov	r2, r0
   12c38:	orr.w	r5, r7, #1069547520	; 0x3fc00000
   12c3c:	orr.w	r5, r5, #3145728	; 0x300000
   12c40:	mov	r4, r2
   12c42:	vmov	d0, r4, r5
   12c46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c4a:	lsl.w	r0, r7, r0
   12c4e:	orr.w	r5, r0, #1069547520	; 0x3fc00000
   12c52:	movs	r0, #0
   12c54:	orr.w	r5, r5, #3145728	; 0x300000
   12c58:	mov	r4, r0
   12c5a:	b.n	12c2a <__b2d+0x96>
   12c5c:	lsl.w	r0, r2, r3
   12c60:	mov	r4, r0
   12c62:	b.n	12c2a <__b2d+0x96>

00012c64 <__d2b>:
   12c64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12c68:	vmov	r6, r7, d0
   12c6c:	sub	sp, #12
   12c6e:	mov	r8, r1
   12c70:	movs	r1, #1
   12c72:	mov	r4, r7
   12c74:	ubfx	r5, r7, #20, #11
   12c78:	mov	r7, r2
   12c7a:	bl	12540 <_Balloc>
   12c7e:	ubfx	r4, r4, #0, #20
   12c82:	mov	r9, r0
   12c84:	cbz	r5, 12c8a <__d2b+0x26>
   12c86:	orr.w	r4, r4, #1048576	; 0x100000
   12c8a:	str	r4, [sp, #4]
   12c8c:	cbz	r6, 12cd6 <__d2b+0x72>
   12c8e:	add	r0, sp, #8
   12c90:	str.w	r6, [r0, #-8]!
   12c94:	bl	126f8 <__lo0bits>
   12c98:	cmp	r0, #0
   12c9a:	bne.n	12d06 <__d2b+0xa2>
   12c9c:	ldmia.w	sp, {r2, r3}
   12ca0:	str.w	r2, [r9, #20]
   12ca4:	cmp	r3, #0
   12ca6:	ite	eq
   12ca8:	moveq	r1, #1
   12caa:	movne	r1, #2
   12cac:	str.w	r3, [r9, #24]
   12cb0:	str.w	r1, [r9, #16]
   12cb4:	cbnz	r5, 12cee <__d2b+0x8a>
   12cb6:	add.w	r3, r9, r1, lsl #2
   12cba:	subw	r0, r0, #1074	; 0x432
   12cbe:	str.w	r0, [r8]
   12cc2:	ldr	r0, [r3, #16]
   12cc4:	bl	126b8 <__hi0bits>
   12cc8:	rsb	r0, r0, r1, lsl #5
   12ccc:	str	r0, [r7, #0]
   12cce:	mov	r0, r9
   12cd0:	add	sp, #12
   12cd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12cd6:	add	r0, sp, #4
   12cd8:	bl	126f8 <__lo0bits>
   12cdc:	ldr	r3, [sp, #4]
   12cde:	str.w	r3, [r9, #20]
   12ce2:	movs	r1, #1
   12ce4:	adds	r0, #32
   12ce6:	str.w	r1, [r9, #16]
   12cea:	cmp	r5, #0
   12cec:	beq.n	12cb6 <__d2b+0x52>
   12cee:	subw	r5, r5, #1075	; 0x433
   12cf2:	add	r5, r0
   12cf4:	rsb	r0, r0, #53	; 0x35
   12cf8:	str.w	r5, [r8]
   12cfc:	str	r0, [r7, #0]
   12cfe:	mov	r0, r9
   12d00:	add	sp, #12
   12d02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12d06:	ldmia.w	sp, {r2, r3}
   12d0a:	rsb	r1, r0, #32
   12d0e:	lsl.w	r1, r3, r1
   12d12:	orrs	r2, r1
   12d14:	lsrs	r3, r0
   12d16:	str	r3, [sp, #4]
   12d18:	str.w	r2, [r9, #20]
   12d1c:	b.n	12ca4 <__d2b+0x40>
   12d1e:	nop

00012d20 <__ratio>:
   12d20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12d24:	sub	sp, #12
   12d26:	mov	r8, r1
   12d28:	mov	r1, sp
   12d2a:	mov	r9, r0
   12d2c:	bl	12b94 <__b2d>
   12d30:	mov	r0, r8
   12d32:	add	r1, sp, #4
   12d34:	vmov	r4, r5, d0
   12d38:	bl	12b94 <__b2d>
   12d3c:	ldmia.w	sp, {r1, r3}
   12d40:	ldr.w	r2, [r9, #16]
   12d44:	ldr.w	r0, [r8, #16]
   12d48:	subs	r1, r1, r3
   12d4a:	subs	r0, r2, r0
   12d4c:	add.w	r3, r1, r0, lsl #5
   12d50:	cmp	r3, #0
   12d52:	vmov	r6, r7, d0
   12d56:	ble.n	12d74 <__ratio+0x54>
   12d58:	add.w	r1, r5, r3, lsl #20
   12d5c:	mov	r5, r1
   12d5e:	mov	r2, r6
   12d60:	mov	r3, r7
   12d62:	mov	r0, r4
   12d64:	mov	r1, r5
   12d66:	bl	b95c <__aeabi_ddiv>
   12d6a:	vmov	d0, r0, r1
   12d6e:	add	sp, #12
   12d70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12d74:	sub.w	r9, r7, r3, lsl #20
   12d78:	vmov	r6, s0
   12d7c:	mov	r7, r9
   12d7e:	b.n	12d5e <__ratio+0x3e>

00012d80 <__copybits>:
   12d80:	push	{r4, r5, r6}
   12d82:	ldr	r4, [r2, #16]
   12d84:	add.w	r3, r2, #20
   12d88:	subs	r1, #1
   12d8a:	asrs	r6, r1, #5
   12d8c:	add.w	r4, r3, r4, lsl #2
   12d90:	adds	r6, #1
   12d92:	cmp	r3, r4
   12d94:	add.w	r6, r0, r6, lsl #2
   12d98:	bcs.n	12db4 <__copybits+0x34>
   12d9a:	subs	r1, r0, #4
   12d9c:	ldr.w	r5, [r3], #4
   12da0:	str.w	r5, [r1, #4]!
   12da4:	cmp	r4, r3
   12da6:	bhi.n	12d9c <__copybits+0x1c>
   12da8:	subs	r3, r4, r2
   12daa:	subs	r3, #21
   12dac:	bic.w	r3, r3, #3
   12db0:	adds	r3, #4
   12db2:	add	r0, r3
   12db4:	cmp	r6, r0
   12db6:	bls.n	12dc2 <__copybits+0x42>
   12db8:	movs	r3, #0
   12dba:	str.w	r3, [r0], #4
   12dbe:	cmp	r6, r0
   12dc0:	bhi.n	12dba <__copybits+0x3a>
   12dc2:	pop	{r4, r5, r6}
   12dc4:	bx	lr
   12dc6:	nop

00012dc8 <__any_on>:
   12dc8:	ldr	r3, [r0, #16]
   12dca:	asrs	r2, r1, #5
   12dcc:	cmp	r3, r2
   12dce:	push	{r4}
   12dd0:	add.w	r4, r0, #20
   12dd4:	bge.n	12df8 <__any_on+0x30>
   12dd6:	add.w	r3, r4, r3, lsl #2
   12dda:	cmp	r4, r3
   12ddc:	bcs.n	12e22 <__any_on+0x5a>
   12dde:	ldr.w	r0, [r3, #-4]
   12de2:	subs	r3, #4
   12de4:	cbz	r0, 12dee <__any_on+0x26>
   12de6:	b.n	12e14 <__any_on+0x4c>
   12de8:	ldr.w	r2, [r3, #-4]!
   12dec:	cbnz	r2, 12e14 <__any_on+0x4c>
   12dee:	cmp	r4, r3
   12df0:	bcc.n	12de8 <__any_on+0x20>
   12df2:	ldr.w	r4, [sp], #4
   12df6:	bx	lr
   12df8:	ble.n	12e1c <__any_on+0x54>
   12dfa:	ands.w	r1, r1, #31
   12dfe:	beq.n	12e1c <__any_on+0x54>
   12e00:	ldr.w	r0, [r4, r2, lsl #2]
   12e04:	lsr.w	r3, r0, r1
   12e08:	lsl.w	r1, r3, r1
   12e0c:	cmp	r0, r1
   12e0e:	add.w	r3, r4, r2, lsl #2
   12e12:	beq.n	12dda <__any_on+0x12>
   12e14:	movs	r0, #1
   12e16:	ldr.w	r4, [sp], #4
   12e1a:	bx	lr
   12e1c:	add.w	r3, r4, r2, lsl #2
   12e20:	b.n	12dda <__any_on+0x12>
   12e22:	movs	r0, #0
   12e24:	b.n	12df2 <__any_on+0x2a>
   12e26:	nop

00012e28 <__sccl>:
   12e28:	push	{r4, r5, r6}
   12e2a:	ldrb	r5, [r1, #0]
   12e2c:	cmp	r5, #94	; 0x5e
   12e2e:	beq.n	12e90 <__sccl+0x68>
   12e30:	movs	r2, #0
   12e32:	adds	r1, #1
   12e34:	mov	r6, r2
   12e36:	subs	r3, r0, #1
   12e38:	add.w	r4, r0, #255	; 0xff
   12e3c:	strb.w	r2, [r3, #1]!
   12e40:	cmp	r3, r4
   12e42:	bne.n	12e3c <__sccl+0x14>
   12e44:	cbz	r5, 12e68 <__sccl+0x40>
   12e46:	eor.w	r2, r6, #1
   12e4a:	strb	r2, [r0, r5]
   12e4c:	adds	r4, r1, #1
   12e4e:	ldrb.w	r3, [r4, #-1]
   12e52:	cmp	r3, #45	; 0x2d
   12e54:	beq.n	12e74 <__sccl+0x4c>
   12e56:	cmp	r3, #93	; 0x5d
   12e58:	beq.n	12e6e <__sccl+0x46>
   12e5a:	cbz	r3, 12e62 <__sccl+0x3a>
   12e5c:	mov	r5, r3
   12e5e:	mov	r1, r4
   12e60:	b.n	12e4a <__sccl+0x22>
   12e62:	mov	r0, r1
   12e64:	pop	{r4, r5, r6}
   12e66:	bx	lr
   12e68:	subs	r0, r1, #1
   12e6a:	pop	{r4, r5, r6}
   12e6c:	bx	lr
   12e6e:	mov	r0, r4
   12e70:	pop	{r4, r5, r6}
   12e72:	bx	lr
   12e74:	ldrb	r6, [r1, #1]
   12e76:	cmp	r6, #93	; 0x5d
   12e78:	beq.n	12e5c <__sccl+0x34>
   12e7a:	cmp	r5, r6
   12e7c:	bgt.n	12e5c <__sccl+0x34>
   12e7e:	adds	r1, #2
   12e80:	adds	r3, r0, r5
   12e82:	adds	r5, #1
   12e84:	cmp	r6, r5
   12e86:	strb.w	r2, [r3, #1]!
   12e8a:	bgt.n	12e82 <__sccl+0x5a>
   12e8c:	adds	r4, #2
   12e8e:	b.n	12e4e <__sccl+0x26>
   12e90:	movs	r2, #1
   12e92:	ldrb	r5, [r1, #1]
   12e94:	mov	r6, r2
   12e96:	adds	r1, #2
   12e98:	b.n	12e36 <__sccl+0xe>
   12e9a:	nop

00012e9c <nanf>:
   12e9c:	vldr	s0, [pc, #4]	; 12ea4 <nanf+0x8>
   12ea0:	bx	lr
   12ea2:	nop
   12ea4:	.word	0x7fc00000

00012ea8 <_strtoll_l.isra.0>:
   12ea8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eac:	sub	sp, #20
   12eae:	mov	sl, r3
   12eb0:	str	r1, [sp, #8]
   12eb2:	str	r0, [sp, #12]
   12eb4:	str	r2, [sp, #4]
   12eb6:	mov	r7, r1
   12eb8:	ldr	r6, [sp, #56]	; 0x38
   12eba:	b.n	12ebe <_strtoll_l.isra.0+0x16>
   12ebc:	mov	r7, r5
   12ebe:	mov	r5, r7
   12ec0:	mov	r0, r6
   12ec2:	ldrb.w	r4, [r5], #1
   12ec6:	bl	c484 <__locale_ctype_ptr_l>
   12eca:	add	r0, r4
   12ecc:	ldrb	r3, [r0, #1]
   12ece:	and.w	r3, r3, #8
   12ed2:	and.w	r2, r3, #255	; 0xff
   12ed6:	cmp	r3, #0
   12ed8:	bne.n	12ebc <_strtoll_l.isra.0+0x14>
   12eda:	cmp	r4, #45	; 0x2d
   12edc:	beq.w	12fe6 <_strtoll_l.isra.0+0x13e>
   12ee0:	cmp	r4, #43	; 0x2b
   12ee2:	it	eq
   12ee4:	ldrbeq	r4, [r7, #1]
   12ee6:	str	r2, [sp, #0]
   12ee8:	it	eq
   12eea:	addeq	r5, r7, #2
   12eec:	cmp.w	sl, #0
   12ef0:	beq.n	12f0c <_strtoll_l.isra.0+0x64>
   12ef2:	cmp.w	sl, #16
   12ef6:	beq.w	13024 <_strtoll_l.isra.0+0x17c>
   12efa:	ldr	r3, [sp, #0]
   12efc:	mov	r6, sl
   12efe:	asrs	r7, r6, #31
   12f00:	cbnz	r3, 12f1e <_strtoll_l.isra.0+0x76>
   12f02:	mov.w	r8, #4294967295
   12f06:	mvn.w	r9, #2147483648	; 0x80000000
   12f0a:	b.n	12f26 <_strtoll_l.isra.0+0x7e>
   12f0c:	cmp	r4, #48	; 0x30
   12f0e:	beq.n	13010 <_strtoll_l.isra.0+0x168>
   12f10:	movs	r6, #10
   12f12:	movs	r7, #0
   12f14:	mov.w	sl, #10
   12f18:	ldr	r3, [sp, #0]
   12f1a:	cmp	r3, #0
   12f1c:	beq.n	12f02 <_strtoll_l.isra.0+0x5a>
   12f1e:	mov.w	r8, #0
   12f22:	mov.w	r9, #2147483648	; 0x80000000
   12f26:	mov	r2, r6
   12f28:	mov	r3, r7
   12f2a:	mov	r0, r8
   12f2c:	mov	r1, r9
   12f2e:	bl	c054 <__aeabi_uldivmod>
   12f32:	mov	r3, r7
   12f34:	mov	fp, r2
   12f36:	mov	r0, r8
   12f38:	mov	r2, r6
   12f3a:	mov	r1, r9
   12f3c:	bl	c054 <__aeabi_uldivmod>
   12f40:	mov.w	lr, #0
   12f44:	movs	r2, #0
   12f46:	movs	r3, #0
   12f48:	b.n	12f6a <_strtoll_l.isra.0+0xc2>
   12f4a:	beq.n	12fd8 <_strtoll_l.isra.0+0x130>
   12f4c:	mul.w	r4, r2, r7
   12f50:	mla	r4, r6, r3, r4
   12f54:	umull	r2, r3, r2, r6
   12f58:	add	r3, r4
   12f5a:	adds.w	r2, r2, ip
   12f5e:	adc.w	r3, r3, ip, asr #31
   12f62:	mov.w	lr, #1
   12f66:	ldrb.w	r4, [r5], #1
   12f6a:	sub.w	ip, r4, #48	; 0x30
   12f6e:	cmp.w	ip, #9
   12f72:	bls.n	12f82 <_strtoll_l.isra.0+0xda>
   12f74:	sub.w	ip, r4, #65	; 0x41
   12f78:	cmp.w	ip, #25
   12f7c:	bhi.n	12f9a <_strtoll_l.isra.0+0xf2>
   12f7e:	sub.w	ip, r4, #55	; 0x37
   12f82:	cmp	sl, ip
   12f84:	ble.n	12fac <_strtoll_l.isra.0+0x104>
   12f86:	cmp.w	lr, #4294967295
   12f8a:	beq.n	12f66 <_strtoll_l.isra.0+0xbe>
   12f8c:	cmp	r1, r3
   12f8e:	it	eq
   12f90:	cmpeq	r0, r2
   12f92:	bcs.n	12f4a <_strtoll_l.isra.0+0xa2>
   12f94:	mov.w	lr, #4294967295
   12f98:	b.n	12f66 <_strtoll_l.isra.0+0xbe>
   12f9a:	sub.w	ip, r4, #97	; 0x61
   12f9e:	cmp.w	ip, #25
   12fa2:	bhi.n	12fac <_strtoll_l.isra.0+0x104>
   12fa4:	sub.w	ip, r4, #87	; 0x57
   12fa8:	cmp	sl, ip
   12faa:	bgt.n	12f86 <_strtoll_l.isra.0+0xde>
   12fac:	cmp.w	lr, #4294967295
   12fb0:	beq.n	12ff0 <_strtoll_l.isra.0+0x148>
   12fb2:	ldr	r1, [sp, #0]
   12fb4:	cbz	r1, 12fbc <_strtoll_l.isra.0+0x114>
   12fb6:	negs	r2, r2
   12fb8:	sbc.w	r3, r3, r3, lsl #1
   12fbc:	ldr	r1, [sp, #4]
   12fbe:	cmp	r1, #0
   12fc0:	beq.n	13048 <_strtoll_l.isra.0+0x1a0>
   12fc2:	cmp.w	lr, #0
   12fc6:	bne.n	13008 <_strtoll_l.isra.0+0x160>
   12fc8:	ldr	r5, [sp, #8]
   12fca:	mov	r0, r2
   12fcc:	mov	r1, r3
   12fce:	ldr	r3, [sp, #4]
   12fd0:	str	r5, [r3, #0]
   12fd2:	add	sp, #20
   12fd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fd8:	cmp	fp, ip
   12fda:	bge.n	12f4c <_strtoll_l.isra.0+0xa4>
   12fdc:	mov	r2, r0
   12fde:	mov	r3, r1
   12fe0:	mov.w	lr, #4294967295
   12fe4:	b.n	12f66 <_strtoll_l.isra.0+0xbe>
   12fe6:	movs	r3, #1
   12fe8:	adds	r5, r7, #2
   12fea:	ldrb	r4, [r7, #1]
   12fec:	str	r3, [sp, #0]
   12fee:	b.n	12eec <_strtoll_l.isra.0+0x44>
   12ff0:	ldr	r3, [sp, #0]
   12ff2:	cbnz	r3, 13040 <_strtoll_l.isra.0+0x198>
   12ff4:	mov.w	r0, #4294967295
   12ff8:	mvn.w	r1, #2147483648	; 0x80000000
   12ffc:	ldr	r2, [sp, #12]
   12ffe:	movs	r3, #34	; 0x22
   13000:	str	r3, [r2, #0]
   13002:	ldr	r3, [sp, #4]
   13004:	cbnz	r3, 1300c <_strtoll_l.isra.0+0x164>
   13006:	b.n	12fd2 <_strtoll_l.isra.0+0x12a>
   13008:	mov	r0, r2
   1300a:	mov	r1, r3
   1300c:	subs	r5, #1
   1300e:	b.n	12fce <_strtoll_l.isra.0+0x126>
   13010:	ldrb	r3, [r5, #0]
   13012:	and.w	r3, r3, #223	; 0xdf
   13016:	cmp	r3, #88	; 0x58
   13018:	beq.n	13032 <_strtoll_l.isra.0+0x18a>
   1301a:	movs	r6, #8
   1301c:	movs	r7, #0
   1301e:	mov.w	sl, #8
   13022:	b.n	12f18 <_strtoll_l.isra.0+0x70>
   13024:	cmp	r4, #48	; 0x30
   13026:	bne.n	1304e <_strtoll_l.isra.0+0x1a6>
   13028:	ldrb	r3, [r5, #0]
   1302a:	and.w	r3, r3, #223	; 0xdf
   1302e:	cmp	r3, #88	; 0x58
   13030:	bne.n	1304e <_strtoll_l.isra.0+0x1a6>
   13032:	ldrb	r4, [r5, #1]
   13034:	movs	r6, #16
   13036:	movs	r7, #0
   13038:	adds	r5, #2
   1303a:	mov.w	sl, #16
   1303e:	b.n	12f18 <_strtoll_l.isra.0+0x70>
   13040:	movs	r0, #0
   13042:	mov.w	r1, #2147483648	; 0x80000000
   13046:	b.n	12ffc <_strtoll_l.isra.0+0x154>
   13048:	mov	r0, r2
   1304a:	mov	r1, r3
   1304c:	b.n	12fd2 <_strtoll_l.isra.0+0x12a>
   1304e:	movs	r6, #16
   13050:	movs	r7, #0
   13052:	b.n	12f18 <_strtoll_l.isra.0+0x70>

00013054 <_strtoll_r>:
   13054:	push	{r4, r5, lr}
   13056:	ldr	r4, [pc, #24]	; (13070 <_strtoll_r+0x1c>)
   13058:	ldr	r5, [pc, #24]	; (13074 <_strtoll_r+0x20>)
   1305a:	ldr	r4, [r4, #0]
   1305c:	ldr	r4, [r4, #52]	; 0x34
   1305e:	sub	sp, #12
   13060:	cmp	r4, #0
   13062:	it	eq
   13064:	moveq	r4, r5
   13066:	str	r4, [sp, #0]
   13068:	bl	12ea8 <_strtoll_l.isra.0>
   1306c:	add	sp, #12
   1306e:	pop	{r4, r5, pc}
   13070:	.word	0x1fff0d78
   13074:	.word	0x1fff0d7c

00013078 <_strtoul_l.isra.0>:
   13078:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1307c:	ldr.w	r9, [sp, #40]	; 0x28
   13080:	mov	r6, r1
   13082:	mov	r7, r0
   13084:	mov	r5, r2
   13086:	mov	r8, r3
   13088:	mov	fp, r1
   1308a:	b.n	1308e <_strtoul_l.isra.0+0x16>
   1308c:	mov	fp, r4
   1308e:	mov	r4, fp
   13090:	mov	r0, r9
   13092:	ldrb.w	sl, [r4], #1
   13096:	bl	c484 <__locale_ctype_ptr_l>
   1309a:	add	r0, sl
   1309c:	ldrb	r0, [r0, #1]
   1309e:	and.w	r0, r0, #8
   130a2:	and.w	ip, r0, #255	; 0xff
   130a6:	cmp	r0, #0
   130a8:	bne.n	1308c <_strtoul_l.isra.0+0x14>
   130aa:	mov	r1, sl
   130ac:	cmp	r1, #45	; 0x2d
   130ae:	beq.n	13174 <_strtoul_l.isra.0+0xfc>
   130b0:	cmp	r1, #43	; 0x2b
   130b2:	itt	eq
   130b4:	ldrbeq.w	r1, [fp, #1]
   130b8:	addeq.w	r4, fp, #2
   130bc:	cmp.w	r8, #0
   130c0:	beq.n	130dc <_strtoul_l.isra.0+0x64>
   130c2:	cmp.w	r8, #16
   130c6:	beq.n	13182 <_strtoul_l.isra.0+0x10a>
   130c8:	mov.w	r3, #4294967295
   130cc:	udiv	r3, r3, r8
   130d0:	mul.w	sl, r8, r3
   130d4:	mvn.w	sl, sl
   130d8:	mov	r9, r8
   130da:	b.n	130ec <_strtoul_l.isra.0+0x74>
   130dc:	cmp	r1, #48	; 0x30
   130de:	beq.n	131a4 <_strtoul_l.isra.0+0x12c>
   130e0:	mov.w	r8, #10
   130e4:	ldr	r3, [pc, #244]	; (131dc <_strtoul_l.isra.0+0x164>)
   130e6:	mov	r9, r8
   130e8:	mov.w	sl, #5
   130ec:	mov.w	lr, #0
   130f0:	mov	r0, lr
   130f2:	b.n	13102 <_strtoul_l.isra.0+0x8a>
   130f4:	beq.n	13156 <_strtoul_l.isra.0+0xde>
   130f6:	mla	r0, r9, r0, r2
   130fa:	mov.w	lr, #1
   130fe:	ldrb.w	r1, [r4], #1
   13102:	sub.w	r2, r1, #48	; 0x30
   13106:	cmp	r2, #9
   13108:	bls.n	13116 <_strtoul_l.isra.0+0x9e>
   1310a:	sub.w	r2, r1, #65	; 0x41
   1310e:	cmp	r2, #25
   13110:	bhi.n	1312a <_strtoul_l.isra.0+0xb2>
   13112:	sub.w	r2, r1, #55	; 0x37
   13116:	cmp	r8, r2
   13118:	ble.n	1313a <_strtoul_l.isra.0+0xc2>
   1311a:	cmp.w	lr, #4294967295
   1311e:	beq.n	130fe <_strtoul_l.isra.0+0x86>
   13120:	cmp	r0, r3
   13122:	bls.n	130f4 <_strtoul_l.isra.0+0x7c>
   13124:	mov.w	lr, #4294967295
   13128:	b.n	130fe <_strtoul_l.isra.0+0x86>
   1312a:	sub.w	r2, r1, #97	; 0x61
   1312e:	cmp	r2, #25
   13130:	bhi.n	1313a <_strtoul_l.isra.0+0xc2>
   13132:	sub.w	r2, r1, #87	; 0x57
   13136:	cmp	r8, r2
   13138:	bgt.n	1311a <_strtoul_l.isra.0+0xa2>
   1313a:	cmp.w	lr, #4294967295
   1313e:	beq.n	13164 <_strtoul_l.isra.0+0xec>
   13140:	cmp.w	ip, #0
   13144:	beq.n	13148 <_strtoul_l.isra.0+0xd0>
   13146:	negs	r0, r0
   13148:	cbz	r5, 13160 <_strtoul_l.isra.0+0xe8>
   1314a:	cmp.w	lr, #0
   1314e:	bne.n	1316c <_strtoul_l.isra.0+0xf4>
   13150:	str	r6, [r5, #0]
   13152:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13156:	cmp	r2, sl
   13158:	ble.n	130f6 <_strtoul_l.isra.0+0x7e>
   1315a:	mov.w	lr, #4294967295
   1315e:	b.n	130fe <_strtoul_l.isra.0+0x86>
   13160:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13164:	movs	r3, #34	; 0x22
   13166:	str	r3, [r7, #0]
   13168:	mov	r0, lr
   1316a:	cbz	r5, 131be <_strtoul_l.isra.0+0x146>
   1316c:	subs	r6, r4, #1
   1316e:	str	r6, [r5, #0]
   13170:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13174:	add.w	r4, fp, #2
   13178:	ldrb.w	r1, [fp, #1]
   1317c:	mov.w	ip, #1
   13180:	b.n	130bc <_strtoul_l.isra.0+0x44>
   13182:	cmp	r1, #48	; 0x30
   13184:	bne.n	131c2 <_strtoul_l.isra.0+0x14a>
   13186:	ldrb	r3, [r4, #0]
   13188:	and.w	r3, r3, #223	; 0xdf
   1318c:	cmp	r3, #88	; 0x58
   1318e:	bne.n	131ce <_strtoul_l.isra.0+0x156>
   13190:	mov.w	r9, #16
   13194:	ldrb	r1, [r4, #1]
   13196:	mov	r8, r9
   13198:	mov.w	sl, #15
   1319c:	adds	r4, #2
   1319e:	mvn.w	r3, #4026531840	; 0xf0000000
   131a2:	b.n	130ec <_strtoul_l.isra.0+0x74>
   131a4:	ldrb	r3, [r4, #0]
   131a6:	and.w	r3, r3, #223	; 0xdf
   131aa:	cmp	r3, #88	; 0x58
   131ac:	beq.n	13190 <_strtoul_l.isra.0+0x118>
   131ae:	mov.w	r8, #8
   131b2:	mov	r9, r8
   131b4:	mov.w	sl, #7
   131b8:	mvn.w	r3, #3758096384	; 0xe0000000
   131bc:	b.n	130ec <_strtoul_l.isra.0+0x74>
   131be:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131c2:	mov.w	sl, #15
   131c6:	mvn.w	r3, #4026531840	; 0xf0000000
   131ca:	mov	r9, r8
   131cc:	b.n	130ec <_strtoul_l.isra.0+0x74>
   131ce:	mov	r9, r8
   131d0:	mov.w	sl, #15
   131d4:	mvn.w	r3, #4026531840	; 0xf0000000
   131d8:	b.n	130ec <_strtoul_l.isra.0+0x74>
   131da:	nop
   131dc:	.word	0x19999999

000131e0 <_strtoul_r>:
   131e0:	push	{r4, r5, lr}
   131e2:	ldr	r4, [pc, #24]	; (131fc <_strtoul_r+0x1c>)
   131e4:	ldr	r5, [pc, #24]	; (13200 <_strtoul_r+0x20>)
   131e6:	ldr	r4, [r4, #0]
   131e8:	ldr	r4, [r4, #52]	; 0x34
   131ea:	sub	sp, #12
   131ec:	cmp	r4, #0
   131ee:	it	eq
   131f0:	moveq	r4, r5
   131f2:	str	r4, [sp, #0]
   131f4:	bl	13078 <_strtoul_l.isra.0>
   131f8:	add	sp, #12
   131fa:	pop	{r4, r5, pc}
   131fc:	.word	0x1fff0d78
   13200:	.word	0x1fff0d7c

00013204 <_strtoull_l.isra.0>:
   13204:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13208:	sub	sp, #20
   1320a:	mov	fp, r1
   1320c:	str	r0, [sp, #8]
   1320e:	mov	r7, r2
   13210:	mov	r6, r3
   13212:	mov	r8, r1
   13214:	ldr	r4, [sp, #56]	; 0x38
   13216:	b.n	1321a <_strtoull_l.isra.0+0x16>
   13218:	mov	r8, r5
   1321a:	mov	r5, r8
   1321c:	mov	r0, r4
   1321e:	ldrb.w	r9, [r5], #1
   13222:	bl	c484 <__locale_ctype_ptr_l>
   13226:	add	r0, r9
   13228:	ldrb	r3, [r0, #1]
   1322a:	and.w	r3, r3, #8
   1322e:	and.w	r2, r3, #255	; 0xff
   13232:	cmp	r3, #0
   13234:	bne.n	13218 <_strtoull_l.isra.0+0x14>
   13236:	mov	r4, r9
   13238:	cmp	r4, #45	; 0x2d
   1323a:	beq.w	13356 <_strtoull_l.isra.0+0x152>
   1323e:	cmp	r4, #43	; 0x2b
   13240:	it	eq
   13242:	ldrbeq.w	r4, [r8, #1]
   13246:	str	r2, [sp, #4]
   13248:	it	eq
   1324a:	addeq.w	r5, r8, #2
   1324e:	cbz	r6, 13288 <_strtoull_l.isra.0+0x84>
   13250:	cmp	r6, #16
   13252:	beq.w	13364 <_strtoull_l.isra.0+0x160>
   13256:	mov.w	r9, r6, asr #31
   1325a:	mov	r2, r6
   1325c:	mov	r3, r9
   1325e:	mov.w	r0, #4294967295
   13262:	mov.w	r1, #4294967295
   13266:	bl	c054 <__aeabi_uldivmod>
   1326a:	mov	r2, r6
   1326c:	str	r0, [sp, #12]
   1326e:	mov	sl, r1
   13270:	mov	r3, r9
   13272:	mov.w	r0, #4294967295
   13276:	mov.w	r1, #4294967295
   1327a:	bl	c054 <__aeabi_uldivmod>
   1327e:	mov	r8, r6
   13280:	mov	lr, r2
   13282:	ldr	r2, [sp, #12]
   13284:	mov	r3, sl
   13286:	b.n	132a2 <_strtoull_l.isra.0+0x9e>
   13288:	cmp	r4, #48	; 0x30
   1328a:	beq.w	13390 <_strtoull_l.isra.0+0x18c>
   1328e:	ldr	r3, [pc, #348]	; (133ec <_strtoull_l.isra.0+0x1e8>)
   13290:	mov.w	lr, #5
   13294:	mov.w	r2, #2576980377	; 0x99999999
   13298:	mov.w	r8, #10
   1329c:	mov.w	r9, #0
   132a0:	movs	r6, #10
   132a2:	mov.w	ip, #0
   132a6:	movs	r0, #0
   132a8:	movs	r1, #0
   132aa:	b.n	132d2 <_strtoull_l.isra.0+0xce>
   132ac:	cmp	r1, r3
   132ae:	it	eq
   132b0:	cmpeq	r0, r2
   132b2:	beq.n	13336 <_strtoull_l.isra.0+0x132>
   132b4:	mul.w	r4, r0, r9
   132b8:	mla	r4, r8, r1, r4
   132bc:	umull	r0, r1, r0, r8
   132c0:	add	r1, r4
   132c2:	adds.w	r0, r0, sl
   132c6:	adc.w	r1, r1, sl, asr #31
   132ca:	mov.w	ip, #1
   132ce:	ldrb.w	r4, [r5], #1
   132d2:	sub.w	sl, r4, #48	; 0x30
   132d6:	cmp.w	sl, #9
   132da:	bls.n	132ea <_strtoull_l.isra.0+0xe6>
   132dc:	sub.w	sl, r4, #65	; 0x41
   132e0:	cmp.w	sl, #25
   132e4:	bhi.n	13302 <_strtoull_l.isra.0+0xfe>
   132e6:	sub.w	sl, r4, #55	; 0x37
   132ea:	cmp	r6, sl
   132ec:	ble.n	13314 <_strtoull_l.isra.0+0x110>
   132ee:	cmp.w	ip, #4294967295
   132f2:	beq.n	132ce <_strtoull_l.isra.0+0xca>
   132f4:	cmp	r3, r1
   132f6:	it	eq
   132f8:	cmpeq	r2, r0
   132fa:	bcs.n	132ac <_strtoull_l.isra.0+0xa8>
   132fc:	mov.w	ip, #4294967295
   13300:	b.n	132ce <_strtoull_l.isra.0+0xca>
   13302:	sub.w	sl, r4, #97	; 0x61
   13306:	cmp.w	sl, #25
   1330a:	bhi.n	13314 <_strtoull_l.isra.0+0x110>
   1330c:	sub.w	sl, r4, #87	; 0x57
   13310:	cmp	r6, sl
   13312:	bgt.n	132ee <_strtoull_l.isra.0+0xea>
   13314:	cmp.w	ip, #4294967295
   13318:	beq.n	13340 <_strtoull_l.isra.0+0x13c>
   1331a:	ldr	r3, [sp, #4]
   1331c:	cbz	r3, 13324 <_strtoull_l.isra.0+0x120>
   1331e:	negs	r0, r0
   13320:	sbc.w	r1, r1, r1, lsl #1
   13324:	cbz	r7, 13330 <_strtoull_l.isra.0+0x12c>
   13326:	cmp.w	ip, #0
   1332a:	bne.n	13352 <_strtoull_l.isra.0+0x14e>
   1332c:	mov	r5, fp
   1332e:	str	r5, [r7, #0]
   13330:	add	sp, #20
   13332:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13336:	cmp	sl, lr
   13338:	ble.n	132b4 <_strtoull_l.isra.0+0xb0>
   1333a:	mov.w	ip, #4294967295
   1333e:	b.n	132ce <_strtoull_l.isra.0+0xca>
   13340:	ldr	r2, [sp, #8]
   13342:	movs	r3, #34	; 0x22
   13344:	str	r3, [r2, #0]
   13346:	mov.w	r0, #4294967295
   1334a:	mov.w	r1, #4294967295
   1334e:	cmp	r7, #0
   13350:	beq.n	13330 <_strtoull_l.isra.0+0x12c>
   13352:	subs	r5, #1
   13354:	b.n	1332e <_strtoull_l.isra.0+0x12a>
   13356:	movs	r3, #1
   13358:	add.w	r5, r8, #2
   1335c:	ldrb.w	r4, [r8, #1]
   13360:	str	r3, [sp, #4]
   13362:	b.n	1324e <_strtoull_l.isra.0+0x4a>
   13364:	cmp	r4, #48	; 0x30
   13366:	bne.n	133b2 <_strtoull_l.isra.0+0x1ae>
   13368:	ldrb	r3, [r5, #0]
   1336a:	and.w	r3, r3, #223	; 0xdf
   1336e:	cmp	r3, #88	; 0x58
   13370:	bne.n	133c8 <_strtoull_l.isra.0+0x1c4>
   13372:	mov.w	r3, #4294967295
   13376:	ldrb	r4, [r5, #1]
   13378:	str	r3, [sp, #12]
   1337a:	mov.w	lr, #15
   1337e:	adds	r5, #2
   13380:	mvn.w	sl, #4026531840	; 0xf0000000
   13384:	mov.w	r8, #16
   13388:	mov.w	r9, #0
   1338c:	movs	r6, #16
   1338e:	b.n	13282 <_strtoull_l.isra.0+0x7e>
   13390:	ldrb	r3, [r5, #0]
   13392:	and.w	r3, r3, #223	; 0xdf
   13396:	cmp	r3, #88	; 0x58
   13398:	beq.n	13372 <_strtoull_l.isra.0+0x16e>
   1339a:	mov.w	lr, #7
   1339e:	mov.w	r2, #4294967295
   133a2:	mvn.w	r3, #3758096384	; 0xe0000000
   133a6:	mov.w	r8, #8
   133aa:	mov.w	r9, #0
   133ae:	movs	r6, #8
   133b0:	b.n	132a2 <_strtoull_l.isra.0+0x9e>
   133b2:	mov.w	lr, #15
   133b6:	mov.w	r2, #4294967295
   133ba:	mvn.w	r3, #4026531840	; 0xf0000000
   133be:	mov.w	r8, #16
   133c2:	mov.w	r9, #0
   133c6:	b.n	132a2 <_strtoull_l.isra.0+0x9e>
   133c8:	mov.w	r8, #16
   133cc:	mov.w	r9, #0
   133d0:	mov	r2, r8
   133d2:	mov	r3, r9
   133d4:	mov.w	r0, #4294967295
   133d8:	mov.w	r1, #4294967295
   133dc:	bl	c054 <__aeabi_uldivmod>
   133e0:	mvn.w	r3, #4026531840	; 0xf0000000
   133e4:	mov	lr, r2
   133e6:	mov.w	r2, #4294967295
   133ea:	b.n	132a2 <_strtoull_l.isra.0+0x9e>
   133ec:	.word	0x19999999

000133f0 <_strtoull_r>:
   133f0:	push	{r4, r5, lr}
   133f2:	ldr	r4, [pc, #24]	; (1340c <_strtoull_r+0x1c>)
   133f4:	ldr	r5, [pc, #24]	; (13410 <_strtoull_r+0x20>)
   133f6:	ldr	r4, [r4, #0]
   133f8:	ldr	r4, [r4, #52]	; 0x34
   133fa:	sub	sp, #12
   133fc:	cmp	r4, #0
   133fe:	it	eq
   13400:	moveq	r4, r5
   13402:	str	r4, [sp, #0]
   13404:	bl	13204 <_strtoull_l.isra.0>
   13408:	add	sp, #12
   1340a:	pop	{r4, r5, pc}
   1340c:	.word	0x1fff0d78
   13410:	.word	0x1fff0d7c

00013414 <__ssprint_r>:
   13414:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13418:	ldr	r3, [r2, #8]
   1341a:	sub	sp, #12
   1341c:	mov	r8, r2
   1341e:	cmp	r3, #0
   13420:	beq.n	13508 <__ssprint_r+0xf4>
   13422:	mov	fp, r0
   13424:	mov.w	r9, #0
   13428:	ldr	r6, [r2, #0]
   1342a:	ldr	r0, [r1, #0]
   1342c:	ldr	r3, [r1, #8]
   1342e:	mov	r5, r1
   13430:	mov	r4, r9
   13432:	cmp	r4, #0
   13434:	beq.n	134c2 <__ssprint_r+0xae>
   13436:	cmp	r4, r3
   13438:	mov	r7, r3
   1343a:	mov	sl, r3
   1343c:	bcc.n	134cc <__ssprint_r+0xb8>
   1343e:	ldrh	r3, [r5, #12]
   13440:	tst.w	r3, #1152	; 0x480
   13444:	beq.n	134a2 <__ssprint_r+0x8e>
   13446:	ldr	r7, [r5, #20]
   13448:	ldr	r1, [r5, #16]
   1344a:	add.w	r7, r7, r7, lsl #1
   1344e:	rsb	sl, r1, r0
   13452:	add.w	r7, r7, r7, lsr #31
   13456:	adds	r0, r4, #1
   13458:	asrs	r7, r7, #1
   1345a:	add	r0, sl
   1345c:	cmp	r0, r7
   1345e:	mov	r2, r7
   13460:	itt	hi
   13462:	movhi	r7, r0
   13464:	movhi	r2, r7
   13466:	lsls	r3, r3, #21
   13468:	bpl.n	134d2 <__ssprint_r+0xbe>
   1346a:	mov	r1, r2
   1346c:	mov	r0, fp
   1346e:	bl	c4c0 <_malloc_r>
   13472:	cmp	r0, #0
   13474:	beq.n	134e6 <__ssprint_r+0xd2>
   13476:	mov	r2, sl
   13478:	ldr	r1, [r5, #16]
   1347a:	str	r0, [sp, #4]
   1347c:	bl	9404 <memcpy>
   13480:	ldrh	r2, [r5, #12]
   13482:	ldr	r3, [sp, #4]
   13484:	bic.w	r2, r2, #1152	; 0x480
   13488:	orr.w	r2, r2, #128	; 0x80
   1348c:	strh	r2, [r5, #12]
   1348e:	rsb	r2, sl, r7
   13492:	add.w	r0, r3, sl
   13496:	str	r7, [r5, #20]
   13498:	str	r3, [r5, #16]
   1349a:	str	r0, [r5, #0]
   1349c:	str	r2, [r5, #8]
   1349e:	mov	r7, r4
   134a0:	mov	sl, r4
   134a2:	mov	r2, sl
   134a4:	mov	r1, r9
   134a6:	bl	cac0 <memmove>
   134aa:	ldr.w	r2, [r8, #8]
   134ae:	ldr	r3, [r5, #8]
   134b0:	ldr	r0, [r5, #0]
   134b2:	subs	r3, r3, r7
   134b4:	add	r0, sl
   134b6:	subs	r4, r2, r4
   134b8:	str	r3, [r5, #8]
   134ba:	str	r0, [r5, #0]
   134bc:	str.w	r4, [r8, #8]
   134c0:	cbz	r4, 13508 <__ssprint_r+0xf4>
   134c2:	ldr.w	r9, [r6]
   134c6:	ldr	r4, [r6, #4]
   134c8:	adds	r6, #8
   134ca:	b.n	13432 <__ssprint_r+0x1e>
   134cc:	mov	r7, r4
   134ce:	mov	sl, r4
   134d0:	b.n	134a2 <__ssprint_r+0x8e>
   134d2:	mov	r0, fp
   134d4:	bl	cc2c <_realloc_r>
   134d8:	mov	r3, r0
   134da:	cmp	r0, #0
   134dc:	bne.n	1348e <__ssprint_r+0x7a>
   134de:	ldr	r1, [r5, #16]
   134e0:	mov	r0, fp
   134e2:	bl	11ad0 <_free_r>
   134e6:	movs	r3, #12
   134e8:	str.w	r3, [fp]
   134ec:	ldrh	r3, [r5, #12]
   134ee:	movs	r2, #0
   134f0:	orr.w	r3, r3, #64	; 0x40
   134f4:	mov.w	r0, #4294967295
   134f8:	strh	r3, [r5, #12]
   134fa:	str.w	r2, [r8, #8]
   134fe:	str.w	r2, [r8, #4]
   13502:	add	sp, #12
   13504:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13508:	movs	r0, #0
   1350a:	str.w	r0, [r8, #4]
   1350e:	add	sp, #12
   13510:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013514 <_sungetc_r>:
   13514:	adds	r3, r1, #1
   13516:	push	{r4, r5, r6, lr}
   13518:	beq.n	13552 <_sungetc_r+0x3e>
   1351a:	ldrh	r3, [r2, #12]
   1351c:	ldr	r4, [r2, #48]	; 0x30
   1351e:	bic.w	r3, r3, #32
   13522:	strh	r3, [r2, #12]
   13524:	uxtb	r5, r1
   13526:	cbz	r4, 13558 <_sungetc_r+0x44>
   13528:	mov	r4, r2
   1352a:	ldr	r2, [r2, #4]
   1352c:	ldr	r3, [r4, #52]	; 0x34
   1352e:	cmp	r2, r3
   13530:	mov	r6, r1
   13532:	bge.n	13548 <_sungetc_r+0x34>
   13534:	ldr	r3, [r4, #0]
   13536:	subs	r2, r3, #1
   13538:	str	r2, [r4, #0]
   1353a:	strb.w	r6, [r3, #-1]
   1353e:	ldr	r3, [r4, #4]
   13540:	adds	r3, #1
   13542:	str	r3, [r4, #4]
   13544:	mov	r0, r5
   13546:	pop	{r4, r5, r6, pc}
   13548:	mov	r1, r4
   1354a:	bl	13658 <__submore>
   1354e:	cmp	r0, #0
   13550:	beq.n	13534 <_sungetc_r+0x20>
   13552:	mov.w	r5, #4294967295
   13556:	b.n	13544 <_sungetc_r+0x30>
   13558:	ldr	r0, [r2, #16]
   1355a:	ldr	r3, [r2, #0]
   1355c:	cbz	r0, 1356a <_sungetc_r+0x56>
   1355e:	cmp	r0, r3
   13560:	bcs.n	1356a <_sungetc_r+0x56>
   13562:	ldrb.w	r0, [r3, #-1]
   13566:	cmp	r5, r0
   13568:	beq.n	1358a <_sungetc_r+0x76>
   1356a:	str	r3, [r2, #56]	; 0x38
   1356c:	mov	r3, r2
   1356e:	ldr	r6, [r2, #4]
   13570:	str	r6, [r2, #60]	; 0x3c
   13572:	add.w	r4, r2, #64	; 0x40
   13576:	movs	r0, #3
   13578:	str	r0, [r2, #52]	; 0x34
   1357a:	str	r4, [r2, #48]	; 0x30
   1357c:	strb.w	r1, [r3, #66]!
   13580:	movs	r1, #1
   13582:	str	r3, [r2, #0]
   13584:	str	r1, [r2, #4]
   13586:	mov	r0, r5
   13588:	pop	{r4, r5, r6, pc}
   1358a:	ldr	r1, [r2, #4]
   1358c:	subs	r3, #1
   1358e:	adds	r1, #1
   13590:	str	r3, [r2, #0]
   13592:	str	r1, [r2, #4]
   13594:	b.n	13544 <_sungetc_r+0x30>
   13596:	nop

00013598 <__ssrefill_r>:
   13598:	push	{r4, lr}
   1359a:	mov	r4, r1
   1359c:	ldr	r1, [r1, #48]	; 0x30
   1359e:	cbz	r1, 135bc <__ssrefill_r+0x24>
   135a0:	add.w	r3, r4, #64	; 0x40
   135a4:	cmp	r1, r3
   135a6:	beq.n	135ac <__ssrefill_r+0x14>
   135a8:	bl	11ad0 <_free_r>
   135ac:	ldr	r3, [r4, #60]	; 0x3c
   135ae:	str	r3, [r4, #4]
   135b0:	movs	r0, #0
   135b2:	str	r0, [r4, #48]	; 0x30
   135b4:	cbz	r3, 135bc <__ssrefill_r+0x24>
   135b6:	ldr	r3, [r4, #56]	; 0x38
   135b8:	str	r3, [r4, #0]
   135ba:	pop	{r4, pc}
   135bc:	ldrh	r3, [r4, #12]
   135be:	ldr	r2, [r4, #16]
   135c0:	str	r2, [r4, #0]
   135c2:	orr.w	r3, r3, #32
   135c6:	movs	r2, #0
   135c8:	strh	r3, [r4, #12]
   135ca:	str	r2, [r4, #4]
   135cc:	mov.w	r0, #4294967295
   135d0:	pop	{r4, pc}
   135d2:	nop

000135d4 <_sfread_r>:
   135d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135d8:	sub	sp, #12
   135da:	mul.w	r9, r2, r3
   135de:	str	r2, [sp, #4]
   135e0:	mov	sl, r3
   135e2:	ldr	r4, [sp, #48]	; 0x30
   135e4:	cmp.w	r9, #0
   135e8:	beq.n	1363e <_sfread_r+0x6a>
   135ea:	mov	r7, r0
   135ec:	mov	r6, r1
   135ee:	mov	r5, r9
   135f0:	mov.w	r8, #0
   135f4:	b.n	13616 <_sfread_r+0x42>
   135f6:	ldr	r1, [r4, #0]
   135f8:	bl	9404 <memcpy>
   135fc:	ldr	r2, [r4, #0]
   135fe:	str.w	r8, [r4, #4]
   13602:	add	r2, fp
   13604:	str	r2, [r4, #0]
   13606:	mov	r1, r4
   13608:	mov	r0, r7
   1360a:	add	r6, fp
   1360c:	rsb	r5, fp, r5
   13610:	bl	13598 <__ssrefill_r>
   13614:	cbnz	r0, 13646 <_sfread_r+0x72>
   13616:	ldr.w	fp, [r4, #4]
   1361a:	cmp	r5, fp
   1361c:	mov	r0, r6
   1361e:	mov	r2, fp
   13620:	bhi.n	135f6 <_sfread_r+0x22>
   13622:	mov	r2, r5
   13624:	ldr	r1, [r4, #0]
   13626:	bl	9404 <memcpy>
   1362a:	ldr	r2, [r4, #4]
   1362c:	ldr	r3, [r4, #0]
   1362e:	subs	r2, r2, r5
   13630:	add	r3, r5
   13632:	mov	r0, sl
   13634:	str	r2, [r4, #4]
   13636:	str	r3, [r4, #0]
   13638:	add	sp, #12
   1363a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1363e:	mov	r0, r9
   13640:	add	sp, #12
   13642:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13646:	ldr	r3, [sp, #4]
   13648:	rsb	r9, r5, r9
   1364c:	udiv	r0, r9, r3
   13650:	add	sp, #12
   13652:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13656:	nop

00013658 <__submore>:
   13658:	add.w	r3, r1, #64	; 0x40
   1365c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13660:	mov	r4, r1
   13662:	ldr	r1, [r1, #48]	; 0x30
   13664:	cmp	r1, r3
   13666:	beq.n	13692 <__submore+0x3a>
   13668:	ldr	r6, [r4, #52]	; 0x34
   1366a:	lsls	r7, r6, #1
   1366c:	mov	r2, r7
   1366e:	bl	cc2c <_realloc_r>
   13672:	mov	r5, r0
   13674:	cbz	r0, 136c8 <__submore+0x70>
   13676:	add.w	r8, r0, r6
   1367a:	mov	r2, r6
   1367c:	mov	r0, r8
   1367e:	mov	r1, r5
   13680:	bl	9404 <memcpy>
   13684:	str.w	r8, [r4]
   13688:	str	r5, [r4, #48]	; 0x30
   1368a:	str	r7, [r4, #52]	; 0x34
   1368c:	movs	r0, #0
   1368e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13692:	mov.w	r1, #1024	; 0x400
   13696:	bl	c4c0 <_malloc_r>
   1369a:	cbz	r0, 136c8 <__submore+0x70>
   1369c:	ldrb.w	r3, [r4, #66]	; 0x42
   136a0:	str	r0, [r4, #48]	; 0x30
   136a2:	mov.w	r2, #1024	; 0x400
   136a6:	str	r2, [r4, #52]	; 0x34
   136a8:	strb.w	r3, [r0, #1023]	; 0x3ff
   136ac:	ldrb.w	r3, [r4, #65]	; 0x41
   136b0:	strb.w	r3, [r0, #1022]	; 0x3fe
   136b4:	ldrb.w	r3, [r4, #64]	; 0x40
   136b8:	strb.w	r3, [r0, #1021]	; 0x3fd
   136bc:	addw	r0, r0, #1021	; 0x3fd
   136c0:	str	r0, [r4, #0]
   136c2:	movs	r0, #0
   136c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   136c8:	mov.w	r0, #4294967295
   136cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000136d0 <_vasnprintf_r>:
   136d0:	push	{r4, r5, r6, lr}
   136d2:	mov	r5, r2
   136d4:	sub	sp, #104	; 0x68
   136d6:	ldr	r4, [r2, #0]
   136d8:	cbz	r1, 136de <_vasnprintf_r+0xe>
   136da:	cmp	r4, #0
   136dc:	bne.n	13714 <_vasnprintf_r+0x44>
   136de:	movs	r4, #0
   136e0:	mov.w	r2, #648	; 0x288
   136e4:	strh.w	r2, [sp, #12]
   136e8:	str	r4, [sp, #0]
   136ea:	str	r4, [sp, #16]
   136ec:	mov	r2, r3
   136ee:	movw	r6, #65535	; 0xffff
   136f2:	ldr	r3, [sp, #120]	; 0x78
   136f4:	str	r4, [sp, #8]
   136f6:	mov	r1, sp
   136f8:	str	r4, [sp, #20]
   136fa:	strh.w	r6, [sp, #14]
   136fe:	bl	e3d0 <_svfprintf_r>
   13702:	cmp	r0, #0
   13704:	blt.n	1372a <_vasnprintf_r+0x5a>
   13706:	ldr	r3, [sp, #0]
   13708:	str	r0, [r5, #0]
   1370a:	movs	r2, #0
   1370c:	strb	r2, [r3, #0]
   1370e:	ldr	r0, [sp, #16]
   13710:	add	sp, #104	; 0x68
   13712:	pop	{r4, r5, r6, pc}
   13714:	mov.w	r2, #1544	; 0x608
   13718:	str	r1, [sp, #0]
   1371a:	str	r1, [sp, #16]
   1371c:	strh.w	r2, [sp, #12]
   13720:	bge.n	136ec <_vasnprintf_r+0x1c>
   13722:	movs	r3, #139	; 0x8b
   13724:	str	r3, [r0, #0]
   13726:	movs	r0, #0
   13728:	b.n	13710 <_vasnprintf_r+0x40>
   1372a:	movs	r0, #0
   1372c:	b.n	13710 <_vasnprintf_r+0x40>
   1372e:	nop

00013730 <_calloc_r>:
   13730:	push	{r4, lr}
   13732:	mul.w	r1, r2, r1
   13736:	bl	c4c0 <_malloc_r>
   1373a:	mov	r4, r0
   1373c:	cbz	r0, 13776 <_calloc_r+0x46>
   1373e:	ldr.w	r2, [r0, #-4]
   13742:	bic.w	r2, r2, #3
   13746:	subs	r2, #4
   13748:	cmp	r2, #36	; 0x24
   1374a:	bhi.n	1377e <_calloc_r+0x4e>
   1374c:	cmp	r2, #19
   1374e:	bls.n	1377a <_calloc_r+0x4a>
   13750:	movs	r3, #0
   13752:	cmp	r2, #27
   13754:	str	r3, [r0, #0]
   13756:	str	r3, [r0, #4]
   13758:	bls.n	13788 <_calloc_r+0x58>
   1375a:	cmp	r2, #36	; 0x24
   1375c:	str	r3, [r0, #8]
   1375e:	str	r3, [r0, #12]
   13760:	iteee	ne
   13762:	addne.w	r2, r0, #16
   13766:	streq	r3, [r0, #16]
   13768:	streq	r3, [r0, #20]
   1376a:	addeq.w	r2, r0, #24
   1376e:	movs	r3, #0
   13770:	str	r3, [r2, #0]
   13772:	str	r3, [r2, #4]
   13774:	str	r3, [r2, #8]
   13776:	mov	r0, r4
   13778:	pop	{r4, pc}
   1377a:	mov	r2, r0
   1377c:	b.n	1376e <_calloc_r+0x3e>
   1377e:	movs	r1, #0
   13780:	bl	cb88 <memset>
   13784:	mov	r0, r4
   13786:	pop	{r4, pc}
   13788:	add.w	r2, r0, #8
   1378c:	b.n	1376e <_calloc_r+0x3e>
   1378e:	nop

00013790 <vtable for FsFile>:
	...
   13798:	]...q...........
   137a8:	............

000137b4 <vtable for Logger<long, 300, 128, 64>>:
	...
   137bc:	............%s_%
   137cc:	04d%02d%02d_%02d
   137dc:	%02d%02d.bin....
   137ec:	Menu....? Help..
   137fc:	a Start Acquisit
   1380c:	ion.b Start Logg
   1381c:	er..s Stop Logge
   1382c:	r...e End Aquisi
   1383c:	tion....h End Aq
   1384c:	uisition and Hib
   1385c:	ernate..x Exit P
   1386c:	rogram..?xabseh.
   1387c:	%c %2d on_time..
   1388c:	....%c %2d off_t
   1389c:	ime.....%c %2d f
   138ac:	irst_hour...%c %
   138bc:	2d second_hour..
   138cc:	....%c %2d third
   138dc:	_hour...%c %2d l
   138ec:	ast_hour....%c %
   138fc:	s name......%04d
   1390c:	/%02d/%02d..%c %
   1391c:	s date......%02d
   1392c:	:%02d:%02d..%c %
   1393c:	s time......%c %
   1394c:	s mac address...
   1395c:	exter 'a' to pri
   1396c:	nt this.exter '?
   1397c:	c' to read value
   1398c:	 c=(g,p,i,u,v,f,
   1399c:	n,d,t,m)....  e.
   139ac:	g.: ?i will prin
   139bc:	t first hour....
   139cc:	exter '!cval' to
   139dc:	 read value c=(g
   139ec:	,p,i,u,v,f,n,d,t
   139fc:	) and val is new
   13a0c:	 value..  e.g.: 
   13a1c:	!i10 will set fi
   13a2c:	rst hour to 10..
   13a3c:	exter 'xval' to 
   13a4c:	exit menu (x is 
   13a5c:	delay in minutes
   13a6c:	, -1 means immed
   13a7c:	iate)...  e.g.: 
   13a8c:	x10 will exit an
   13a9c:	d hibernate for 
   13aac:	10 minutes..    
   13abc:	    x-1 with exi
   13acc:	t and start imme
   13adc:	diately.?!xa....
   13aec:	gpiuvfndtlm.%02d
   13afc:	....%s......gpiu
   13b0c:	vfndt...SdError:
   13b1c:	 0X.,0X.Check SD
   13b2c:	 format.....erro
   13b3c:	r: .Config.txt..
   13b4c:	read failed.%d..
   13b5c:	%2d.....write fa
   13b6c:	iled....newCard 
   13b7c:	X...cardBegin: %
   13b8c:	x %d....begin fa
   13b9c:	iled....file.pre
   13bac:	Allocate failed.
   13bbc:	 %s...........(%
   13bcc:	d)......file.ope
   13bdc:	n failed.... %d 
   13bec:	blocks max: %d  
   13bfc:	MB........ overr
   13c0c:	un: (%d)....Fsam
   13c1c:	p requested: %.3
   13c2c:	f kHz  got %.3f 
   13c3c:	kHz.....Start Ac
   13c4c:	q...Start Logger
   13c5c:	....ESM Logger a
   13c6c:	nd Monitor..Stop
   13c7c:	 Acq....Stop Log
   13c8c:	ger.

00013c90 <TwoWire::i2c0_hardware>:
   13c90:	4..@@.....".0...
   13ca0:	....!./.........

00013cb0 <TwoWire::i2c1_hardware>:
   13cb0:	4..@....&:......
   13cc0:	..%;............

00013cd0 <TwoWire::i2c2_hardware>:
   13cd0:	(..@@...........
   13ce0:	............J...

00013cf0 <vtable for TwoWire>:
	...
   13cf8:	)....-.......-..
   13d08:	.-...-...-..EXFA
   13d18:	T...

00013d1c <vtable for SdSpiCard>:
	...
   13d24:	mm..qm...q..)t..
   13d34:	.z...p...r..Eu..
   13d44:	.{..am..em...m..
   13d54:	ew...x...o......
   13d64:	im..qn..ap...m..

00013d74 <vtable for SdioCard>:
	...
   13d7c:	%~..)~......A...
   13d8c:	Y~..=...........
   13d9c:	.....}...}......
   13dac:	.}...}...}......
   13dbc:	9~..Q....~..9...
   13dcc:	 IRQSTAT ...

00013dd8 <digital_pin_to_info_PGM>:
   13dd8:	@..C@..@D..CD..@
   13de8:	...C...@0..C0..@
   13df8:	4..C4..@...C...@
   13e08:	...C...@...C...@
   13e18:	...C...@...C...@
   13e28:	...C...@...C...@
   13e38:	...C...@...C...@
   13e48:	...C...@...C...@
   13e58:	...C...@...C...@
   13e68:	...C...@...C...@
   13e78:	...C...@...C...@
   13e88:	...C...@...C...@
   13e98:	h .Ch..@...C...@
   13ea8:	8..C8..@<..C<..@
   13eb8:	@..C@..@H..CH..@
   13ec8:	L..CL..@(..C(..@
   13ed8:	,..C,..@` .C`..@
   13ee8:	d .Cd..@ ..C ..@
   13ef8:	$..C$..@(..C(..@
   13f08:	,..C,..@D..CD..@
   13f18:	p..Cp..@t..Ct..@
   13f28:	h..Ch..@P..CP..@
   13f38:	X..CX..@\..C\..@
   13f48:	T..CT..@ ..C ..@
   13f58:	$..C$..@...C...@
   13f68:	...C...@8..C8..@
   13f78:	4..C4..@0..C0..@
   13f88:	<..C<..@,..C,..@
   13f98:	( .C(..@, .C,..@
   13fa8:	. .C...@. .C...@
   13fb8:	. .C...@. .C...@
   13fc8:	. .C...@. .C...@

00013fd8 <vtable for usb_serial_class>:
	...
   13fe0:	i...a...]...Y...
   13ff0:	U...Q...M...I...
   14000:	....

00014004 <usb_endpoint_config_table>:
   14004:	....

00014008 <usb_descriptor_list>:
   14008:	................
   14018:	....C.......4...
   14028:	................
   14038:	................
   14048:	8...............
   14058:	....

0001405c <_global_impure_ptr>:
   1405c:	P...C...POSIX...

0001406c <fpi.6173>:
   1406c:	5...............
   1407c:	....nf..inity...
   1408c:	an..

00014090 <fpinan.6209>:
   14090:	4...............
   140a0:	........

000140a8 <tinytens>:
   140a8:	.......<3...#.I9
   140b8:	=..D...2......[%
   140c8:	Co.d(.h.

000140d0 <zeroes.7258>:
   140d0:	0000000000000000
   140e0:	INF.inf.NAN.nan.
   140f0:	0123456789ABCDEF
   14100:	....0123456789ab
   14110:	cdef....(null)..
   14120:	0...

00014124 <blanks.7257>:
   14124:	                

00014134 <basefix.7328>:
   14134:	................
   14144:	................
   14154:	....e%ld....

00014160 <_ctype_>:
   14160:	.         ((((( 
   14170:	                
   14180:	 ...............
   14190:	................
   141a0:	..AAAAAA........
   141b0:	................
   141c0:	..BBBBBB........
   141d0:	................
   141e0:	 ...............
	...
   14260:	....Infinity....
   14270:	NaN.

00014274 <__hexdig>:
	...
   142a4:	................
   142b4:	................
	...
   142d4:	................
	...
   14374:	....

00014378 <__mprec_tens>:
   14378:	.......?......$@
   14388:	......Y@.....@.@
   14398:	.......@.....j.@
   143a8:	.......A......cA
   143b8:	.......A....e..A
   143c8:	... _..B....vH7B
   143d8:	......mB..@..0.B
   143e8:	.......B..4&.k.C
   143f8:	...7y.AC....W4vC
   14408:	..Ngm..C.=.`.X.C
   14418:	@..x...DP.....KD
   14428:	..M....D.J...-.D
   14438:	...yCx.D

00014440 <__mprec_bigtens>:
   14440:	...7y.AC.n.....F
   14450:	..?..O8M2.0.Hw.Z
   14460:	<.s..O.u

00014468 <p05.6087>:
   14468:	........}...

00014474 <_init>:
   14474:	push	{r3, r4, r5, r6, r7, lr}
   14476:	nop
   14478:	pop	{r3, r4, r5, r6, r7}
   1447a:	pop	{r3}
   1447c:	mov	lr, r3
   1447e:	bx	lr

00014480 <__init_array_start>:
   14480:	.word	0x00010a8d

00014484 <__frame_dummy_init_array_entry>:
   14484:	5...9*..

Disassembly of section .fini:

0001448c <_fini>:
   1448c:	push	{r3, r4, r5, r6, r7, lr}
   1448e:	nop
