
bin\ESM_Logger.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00014364 l    d  .fini	00000000 .fini
00014368 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0730 l    d  .data	00000000 .data
1fff12f8 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
0000981c l     F .text	0000000c startup_default_early_hook
00009828 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff12f8 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff12fc l       .bss	00000000 object.8610
0001435c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 I2S.c
1fff1318 l     O .bss	0000000c m_i2s_rxContext
00000000 l    df *ABS*	00000000 dma.c
1fff1328 l     O .bss	00000002 dma_channel_allocated_mask
1fff132c l     O .bss	00000200 DMAS
00000000 l    df *ABS*	00000000 hibernate.c
00000d84 l     F .text	0000001c llwuISR
00000000 l    df *ABS*	00000000 myAPP.cpp
0000199c l     F .text	000001a0 printAll()
00002954 l     F .text	000000ac _GLOBAL__sub_I_parameters
1fff2478 l     O .bss	00000004 blink(unsigned long)::to
1fff247e l     O .bss	00000002 i2sInProcessing::is_I2S
20020150 l     O .bss	00000002 uSD_IF::save(int)::isLogging
00000000 l    df *ABS*	00000000 ICS43432.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
00002ac4 l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 WireKinetis.cpp
20020358 l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00004e24 l     F .text	000000a0 FatFile::sync() [clone .part.39]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00007c8c l     F .text	00000030 m_sdhc_isr()
00007cbc l     F .text	0000000c isBusyDMA()
00007de4 l     F .text	000000c8 cardCommand(unsigned long, unsigned long)
00007eac l     F .text	0000002c isBusyCMD13()
00007ef8 l     F .text	00000120 cardCMD6(unsigned long, unsigned char*)
00008110 l     F .text	00000150 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00008558 l     F .text	00000100 transferStop()
20020364 l     O .bss	00000010 m_cid
20020374 l     O .bss	00000001 m_version2
20020375 l     O .bss	00000001 m_highCapacity
20020378 l     O .bss	00000004 m_ocr
2002037c l     O .bss	00000004 m_errorLine
20020380 l     O .bss	00000004 m_irqstat
20020384 l     O .bss	00000004 m_rca
1fff088c l     O .data	00000001 m_errorCode
20020388 l     O .bss	00000001 m_initDone
2002038c l     O .bss	00000010 m_csd
2002039c l     O .bss	00000001 m_dmaBusy
200203a0 l     O .bss	00000004 m_busyFcn
200203a4 l     O .bss	00000004 m_sdClkKhz
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
200203a9 l     O .bss	00000001 tx_noautoflush
200203ac l     O .bss	00000004 tx_packet
200203b0 l     O .bss	00000001 transmit_previous_timeout
200203b4 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 pins_teensy.c
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0894 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
200203c0 l     O .bss	00000004 ep0_tx_ptr
200203c4 l     O .bss	00000010 rx_last
200203d4 l     O .bss	00000002 ep0_tx_len
200203d8 l     O .bss	00000040 ep0_rx0_buf
20020418 l     O .bss	00000010 rx_first
20020428 l     O .bss	00000001 ep0_tx_data_toggle
2002042c l     O .bss	00000040 ep0_rx1_buf
2002046c l     O .bss	00000010 tx_first
1fff0000 l     O .usbdescriptortable	000000a0 table
2002047c l     O .bss	00000010 tx_last
2002048c l     O .bss	00000008 setup
20020494 l     O .bss	00000001 ep0_tx_bdt_bank
20020498 l     O .bss	00000008 reply_buffer
200204a4 l     O .bss	00000004 tx_state
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 analog.c
200204c8 l     O .bss	00000001 calibrating
1fff08a8 l     O .data	00000001 analog_config_bits
200204c9 l     O .bss	00000001 analog_reference_internal
1fff08a9 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 usb_desc.c
1fff08ac l     O .data	00000012 device_descriptor
1fff08d8 l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_atexit.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0000c370 l     F .text	00000018 __get_current_locale
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtod.c
0000d27c l     F .text	00000038 sulp
00013f44 l     O .text	00000014 fpi.6173
00013f68 l     O .text	00000014 fpinan.6209
00013f80 l     O .text	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000e1b0 l     F .text	00000136 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00013fa8 l     O .text	00000010 zeroes.7258
00013ffc l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfscanf.c
0001400c l     O .text	00000022 basefix.7328
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000109cc l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
000109ec l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00011be0 l     F .text	000000a8 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mprec.c
00014340 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strtoll.c
00012de8 l     F .text	000001ac _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
00012fb8 l     F .text	00000168 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
00013144 l     F .text	000001ec _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfscanf.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
1fff0950 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/walter/documents/arduino-1.8.8/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/walter/documents/arduino-1.8.8/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff12f8 l       .bss	00000000 __bss_start__
20020540 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00000fa8  w    F .text	0000001c c_mFS::~c_mFS()
00009814  w    F .text	00000006 adc0_isr
0000bb5c g     F .text	0000002c .hidden __aeabi_dcmpun
000094d0 g     F .text	0000001c usb_serial_available
00012d08 g     F .text	0000005e __any_on
0000bb20 g     F .text	00000012 .hidden __aeabi_dcmple
00008fa8 g     F .text	00000124 SdioCard::writeStart(unsigned long, unsigned long)
0000ba5c g     F .text	0000007a .hidden __cmpdf2
00000cd8 g     F .text	0000000c DMA_enable
00008260 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
00001708 g     F .text	00000002 yield
00005658 g     F .text	00000220 FatFile::write(void const*, unsigned int)
0000ba5c g     F .text	0000007a .hidden __eqdf2
00006c8c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
1fff08c0 g     O .data	00000018 usb_string_manufacturer_name_default
000055e0 g     F .text	00000076 FatFile::truncate()
1fff0820 g     O .data	0000006c Wire1
20020500 g     O .bss	00000004 m_i2s_tx_buffer
0000b5cc g     F .text	0000005a .hidden __floatdidf
000097cc  w    F .text	00000048 hard_fault_isr
00009814  w    F .text	00000006 dma_ch6_isr
20020360 g     O .bss	00000004 FsDateTime::callback
0000ae6c g     F .text	00000020 Print::println()
00009814  w    F .text	00000006 uart0_lon_isr
000035a4 g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
00009d94 g     F .text	000000c8 usb_rx_memory
00006c80  w    F .text	00000004 SdSpiCard::errorCode() const
00009814  w    F .text	00000006 dma_ch8_isr
00001b3c g     F .text	0000031c doMenu()
0000cb48 g     F .text	00000002 __malloc_unlock
2002035c g     O .bss	00000004 FsVolume::m_cwv
000092b8 g     F .text	00000016 SdSpiAltDriver::send(unsigned char)
00005084 g     F .text	00000106 FatFile::open(FatFile*, char const*, unsigned char)
0000b0ac g     F .text	000000e0 analog_init
00009e5c g     F .text	00000084 usb_tx
0000e190 g     F .text	00000020 _strtod_r
00009814  w    F .text	00000006 portcd_isr
0001087c g     F .text	0000004a _vdprintf_r
20020504 g     O .bss	00000004 m_i2s_rx_nbyte
00013514 g     F .text	00000082 _sfread_r
0000c9e0 g     F .text	000000c6 memmove
0000ab4c g     F .text	0000020c MillisTimer::runFromTimer()
1fff1748 g     O .bss	00000800 i2s_rx_buffer
0000c3ac g     F .text	00000014 __locale_ctype_ptr
0000170c g     F .text	00000134 check_hibernate(parameters_s*, int)
00012480 g     F .text	0000004c _Balloc
00009814  w    F .text	00000006 can1_rx_warn_isr
00014370 g       .ARM.exidx	00000000 __exidx_end
00009814  w    F .text	00000006 dma_error_isr
000060c0 g     F .text	000002b8 FatPartition::freeChain(unsigned long)
00006e5c g     F .text	000000a8 SdSpiCard::cardCommand(unsigned char, unsigned long)
00002d70 g     F .text	00000138 i2c0_isr
00003140 g     F .text	000000a2 FsFile::open(FsVolume*, char const*, unsigned char)
00000fdc  w    F .text	00000014 FsFile::flush()
0000ad90 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000ba4c g     F .text	0000008a .hidden __gtdf2
1fff152c g     O .bss	00000002 FS_started
0000c314 g     F .text	0000000c __errno
00000cf0 g     F .text	00000010 DMA_haltAll
00009814  w    F .text	00000006 portd_isr
00003a68 g     F .text	00000100 ExFatFile::open(ExFatFile*, char const*, unsigned char)
00009814  w    F .text	00000006 enet_error_isr
00002a80 g     F .text	00000012 c_ICS43432::start()
00013ba4 g     O .text	00000020 TwoWire::i2c2_hardware
200204a8 g     O .bss	00000004 EventResponder::firstInterrupt
00012364 g     F .text	00000004 __localeconv_l
0000518c g     F .text	0000000e FatFile::open(FatVolume*, char const*, unsigned char)
00006c90  w    F .text	0000000e SdSpiCard::~SdSpiCard()
00009814  w    F .text	00000006 tpm1_isr
00004514 g     F .text	000000a8 ExFatPartition::rootLength()
00001134  w    F .text	00000024 Print::println(__FlashStringHelper const*)
00000ac8 g     F .text	00000010 i2s_stopInput
20020158 g     O .bss	00000200 data1
00006c84  w    F .text	00000004 SdSpiCard::errorData() const
0000ad80  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00013cac g     O .text	00000200 digital_pin_to_info_PGM
00005db4 g     F .text	0000030c FatPartition::allocContiguous(unsigned long, unsigned long*)
2002053c g     O .bss	00000004 errno
00006f04 g     F .text	0000007c SdSpiCard::readOCR(unsigned long*)
000041dc g     F .text	0000009c ExFatPartition::fatGet(unsigned long, unsigned long*)
0000cff4 g     F .text	00000004 __seofread
00014370 g       .ARM.exidx	00000000 _etext
00001fcc g     F .text	000000cc readConfig(void*)
1fff12f8 g       .bss	00000000 _sbss
0000bae8 g     F .text	00000010 .hidden __aeabi_cdcmple
00007cd4 g     F .text	0000000c SdioCard::errorData() const
00009234 g     F .text	00000048 SdSpiAltDriver::deactivate()
0000bcc4 g     F .text	00000160 .hidden __aeabi_fadd
000090cc g     F .text	000000d8 SdioCard::writeSector(unsigned long, unsigned char const*)
0000bcc0 g     F .text	00000164 .hidden __subsf3
00009814  w    F .text	00000006 porte_isr
0000927c g     F .text	0000001a SdSpiAltDriver::receive()
00002644 g     F .text	00000310 loop
00009814  w    F .text	00000006 portb_isr
00009814  w    F .text	00000006 spi1_isr
00009814  w    F .text	00000006 uart3_status_isr
000032e4 g     F .text	000000bc ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00009814  w    F .text	00000006 mcm_isr
00008be0 g     F .text	000001b4 SdioCard::readData(unsigned char*)
000136f4  w    O .text	00000014 vtable for Logger<long, 300, 128, 64>
0000048c g     F .text	000002a8 i2s_speedConfig
00001514 g     F .text	0000013c tm2seconds(tm*)
000075d8 g     F .text	000000ac SdSpiCard::readData(unsigned char*, unsigned int)
200204ac g     O .bss	00000004 EventResponder::lastInterrupt
0000bfa4 g     F .text	00000024 .hidden __aeabi_f2lz
00009814  w    F .text	00000006 uart1_status_isr
00009324 g     F .text	00000134 memcpy
00009814  w    F .text	00000006 randnum_isr
000121c8 g     F .text	00000180 __hexnan
0000bad8 g     F .text	00000020 .hidden __aeabi_cdrcmple
00000ccc g     F .text	0000000c DMA_interruptAtHalf
0000431c g     F .text	000001f6 ExFatPartition::freeChain(unsigned long)
00005378 g     F .text	0000002a FatFile::peek()
0000e310 g     F .text	000016e4 _svfprintf_r
0000b55c g     F .text	00000022 .hidden __floatsidf
00001158 g     F .text	00000338 seconds2tm(unsigned long)
200203bc g     O .bss	00000004 systick_millis_count
0000ba54 g     F .text	00000082 .hidden __ltdf2
000097cc  w    F .text	00000048 bus_fault_isr
00009814  w    F .text	00000006 watchdog_isr
0000bf74 g     F .text	00000000 .hidden __aeabi_uldivmod
00002ea8 g     F .text	00000138 i2c1_isr
0000047c g     F .text	00000010 i2s_init
200204a0 g     O .bss	00000001 usb_configuration
00009814  w    F .text	00000006 dma_ch11_isr
00000f00  w    F .text	00000006 SdCardInterface::status()
0000865c g     F .text	00000014 SdioCard::syncDevice()
00008370 g     F .text	000001a4 SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
00002a00 g     F .text	0000007e c_ICS43432::init(long, long*, unsigned long, unsigned short)
0000046c g     F .text	00000010 i2s_stopClock
000053a4 g     F .text	00000040 FatFile::readDirCache(bool)
00012c60 g     F .text	00000060 __ratio
00002fe0 g     F .text	00000138 i2c2_isr
1fff08c0  w    O .data	00000018 usb_string_manufacturer_name
20020534 g     O .bss	00000008 usb_rx_byte_count_data
20020508 g     O .bss	00000004 m_i2s_dual
00009814  w    F .text	00000006 pit1_isr
0000c3c0 g     F .text	00000010 malloc
00000948 g     F .text	0000004c m_i2s_rx_isr
00009814  w    F .text	00000006 dma_ch4_isr
00013b84 g     O .text	00000020 TwoWire::i2c1_hardware
0000af48 g     F .text	00000084 software_isr
000136d0  w    O .text	00000024 vtable for FsFile
00012348 g     F .text	0000001c iswspace
00009814  w    F .text	00000006 dma_ch7_isr
00002cd0  w    F .text	0000001e TwoWire::read()
0000be2c g     F .text	0000001c .hidden __aeabi_i2f
00002aa8  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00014250 g     O .text	000000c8 __mprec_tens
0000a994 g     F .text	000000f4 usb_init
00000d78 g     F .text	0000000c DMA_clearInterrupt
00006c88  w    F .text	00000004 SdSpiCard::type() const
1fff247c g     O .bss	00000001 ICS43432
0000bbd8 g     F .text	00000040 .hidden __fixunsdfsi
00009814  w    F .text	00000006 lptmr_isr
200204d4 g     O .bss	00000004 __malloc_top_pad
00009868 g     F .text	00000024 rtc_set
000134d8 g     F .text	0000003a __ssrefill_r
00007464 g     F .text	00000174 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00004a80 g     F .text	0000011e ExFatFile::truncate()
1fff0730 g     O .data	00000000 .hidden __dso_handle
0000b53c g     F .text	0000001e .hidden __aeabi_ui2d
00012368 g     F .text	0000001c _localeconv_r
00013330 g     F .text	00000024 _strtoull_r
00009858 g     F .text	00000010 attachInterruptVector
00012694 g     F .text	00000012 __i2b
1fff0730 g       .data	00000000 _sdata
00013b64 g     O .text	00000020 TwoWire::i2c0_hardware
00005908 g     F .text	00000054 FatCache::sync()
0000c014 g     F .text	000002e2 .hidden __udivmoddi4
0000b2b8 g     F .text	00000000 .hidden __aeabi_drsub
0000cf2c g     F .text	00000024 _sbrk_r
000010b4  w    F .text	00000064 Logger<long, 300, 128, 64>::write(void*)
00007d58 g     F .text	00000020 SdioCard::type() const
00000ce4 g     F .text	0000000c DMA_disable
000001d0 g     F .text	000001f0 ResetHandler
00009458 g     F .text	00000048 usb_serial_getchar
00009814  w    F .text	00000006 can1_bus_off_isr
00009814  w    F .text	00000006 ftm2_isr
20020528 g     O .bss	00000008 usb_cdc_line_coding
00009b00 g     F .text	00000048 digitalWrite
200204b4 g     O .bss	00000004 EventResponder::lastYield
00009814  w    F .text	00000006 uart5_status_isr
00009814  w    F .text	00000006 lpuart0_status_isr
000033a0 g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
00013ed8 g     O .text	00000004 usb_endpoint_config_table
00009814  w    F .text	00000006 dma_ch9_isr
00001118  w    F .text	0000001c Print::write(char const*)
00009814  w    F .text	00000006 pit2_isr
0000bb0c g     F .text	00000012 .hidden __aeabi_dcmplt
200204d0 g     O .bss	00000004 __malloc_max_sbrked_mem
00009b48 g     F .text	00000078 pinMode
00006d00 g     F .text	00000090 SdSpiCard::writeStop()
00009ce0 g     F .text	0000004c usb_free
00009814  w    F .text	00000006 i2c3_isr
0000b580 g     F .text	0000003a .hidden __extendsfdf2
0000f9f4 g     F .text	00000e88 __ssvfscanf_r
0000b87c g     F .text	000001d0 .hidden __aeabi_ddiv
0000b2c4 g     F .text	00000276 .hidden __adddf3
1fff0748 g     O .data	0000006c Wire2
00006d90 g     F .text	000000cc SdSpiCard::writeData(unsigned char const*)
00012ad4 g     F .text	000000d0 __b2d
00001ef0  w    F .text	00000028 SdBase<FsVolume>::errorHalt(char const*)
00014368 g       .ARM.exidx	00000000 __exidx_start
1fff1314 g     O .bss	00000004 DMA_RX
0000b628 g     F .text	00000254 .hidden __aeabi_dmul
00006f80 g     F .text	00000064 SdSpiCard::writeStart(unsigned long)
00009814  w    F .text	00000006 pit0_isr
200204b8 g     O .bss	00000004 EventResponder::firstYield
00013f30 g     O .text	00000004 _global_impure_ptr
00009814  w    F .text	00000006 can1_error_isr
0000cb4c g     F .text	000003de _realloc_r
0000c320 g     F .text	00000050 __libc_init_array
20020540 g       .bss	00000000 __bss_end
00002cc4  w    F .text	0000000c TwoWire::available()
00009814  w    F .text	00000006 can0_wakeup_isr
00003b68 g     F .text	00000010 ExFatFile::open(ExFatVolume*, char const*, int)
00007ce0 g     F .text	0000001c SdioCard::readCID(CID*)
0001414c g     O .text	00000100 __hexdig
00004944 g     F .text	0000013c ExFatFile::addDirCluster()
00009814  w    F .text	00000006 flash_cmd_isr
1fff1f4c g     O .bss	00000508 mFS
00014318 g     O .text	00000028 __mprec_bigtens
00012560 g     F .text	00000098 __s2b
0000ad68  w    F .text	00000004 usb_serial_class::clear()
0000b53c g     F .text	0000001e .hidden __floatunsidf
00009814  w    F .text	00000006 uart2_status_isr
0000982c g     F .text	0000002c _sbrk
00012928 g     F .text	00000042 __mcmp
200204bc g     O .bss	00000004 MillisTimer::listWaiting
1fff0890 g     O .data	00000004 __brkval
200203b8 g     O .bss	00000001 usb_cdc_line_rtsdtr
00000d10 g     F .text	00000006 DMA_destinationAddress
00009784 g     F .text	00000048 usb_serial_flush_callback
0001434c g     F .text	00000000 _init
00000ff0  w    F .text	00000058 FsFile::available()
00009814  w    F .text	00000006 svcall_isr
2002050c g     O .bss	00000004 m_i2s_tx_nbyte
20020510 g     O .bss	00000004 m_i2s_nbits
00009814  w    F .text	00000006 dma_ch15_isr
00000da0 g     F .text	0000015c hibernate
0000bc18 g     F .text	0000009e .hidden __aeabi_d2f
00002098 g     F .text	000000d8 storeConfig(void*)
1fff1740 g     O .bss	00000006 mac
0000bcc0 g     F .text	00000164 .hidden __aeabi_fsub
00013bc4 g     O .text	00000024 vtable for TwoWire
00009814  w    F .text	00000006 uart1_error_isr
0001194c g     F .text	00000028 __libc_fini_array
0000d2b8 g     F .text	00000ed8 _strtod_l
00012198 g     F .text	00000030 __match
00009814  w    F .text	00000006 usbhs_phy_isr
20020540 g       .bss	00000000 _ebss
1fff1324 g     O .bss	00000004 rxCount
00008d94 g     F .text	00000128 SdioCard::readStart(unsigned long, unsigned long)
000082e8 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005034 g     F .text	00000050 FatFile::preAllocate(unsigned long)
00005878 g     F .text	00000090 FatCache::read(unsigned long, unsigned char)
000125f8 g     F .text	00000040 __hi0bits
0000bb88 g     F .text	0000004e .hidden __fixdfsi
00009814 g     F .text	00000006 unused_isr
00009814  w    F .text	00000006 spi0_isr
0000be58 g     F .text	0000007c .hidden __floatdisf
00009814  w    F .text	00000006 dma_ch3_isr
1fff2458 g     O .bss	00000020 text
0000b0a8 g     F .text	00000004 operator delete(void*, unsigned int)
00009814  w    F .text	00000006 flash_error_isr
0000b2c4 g     F .text	00000276 .hidden __aeabi_dadd
0000ba54 g     F .text	00000082 .hidden __ledf2
00009814  w    F .text	00000006 uart5_error_isr
0000bfc8 g     F .text	0000004c .hidden __aeabi_f2ulz
00009814  w    F .text	00000006 rtc_seconds_isr
00009814  w    F .text	00000006 pdb_isr
000127d8 g     F .text	000000a0 __pow5mult
0000b5bc g     F .text	0000006a .hidden __aeabi_ul2d
000097cc  w    F .text	00000048 usage_fault_isr
00009814  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00005c08 g     F .text	000001aa FatPartition::allocateCluster(unsigned long, unsigned long*)
00009814  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
20020530 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000ad58 g     F .text	00000010 systick_isr
00009814  w    F .text	00000006 rtc_alarm_isr
00003c34 g     F .text	00000230 ExFatPartition::init(SdCardInterface*, unsigned char)
00007348 g     F .text	0000011c SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
200204c0 g     O .bss	00000004 AudioStream::first_update
00009814  w    F .text	00000006 dma_ch2_isr
1fff0898 g     O .data	00000010 Serial
00009814  w    F .text	00000006 ftm1_isr
0000ad88  w    F .text	00000006 usb_serial_class::write(unsigned char)
0000981c  w    F .text	0000000c startup_early_hook
00009814  w    F .text	00000006 dma_ch13_isr
00004650 g     F .text	0000008c ExFatFile::addCluster()
00009814  w    F .text	00000006 uart2_error_isr
000094a0 g     F .text	00000030 usb_serial_peekchar
0000bb48 g     F .text	00000012 .hidden __aeabi_dcmpgt
00000bec g     F .text	00000030 DMA_source
000123e0 g     F .text	00000000 memchr
00005ab8 g     F .text	0000014e FatPartition::fatPut(unsigned long, unsigned long)
1fff0938 g     O .data	00000016 usb_string_serial_number_default
000097cc g     F .text	00000048 fault_isr
00011a10 g     F .text	000001d0 _free_r
00008658 g     F .text	00000004 SdioCard::readStop()
00003b84 g     F .text	00000082 FsCache::get(unsigned long, unsigned char)
0000c388 g     F .text	0000001c __locale_mb_cur_max
0000bb34 g     F .text	00000012 .hidden __aeabi_dcmpge
00009814  w    F .text	00000006 usb_charge_isr
0000ad78  w    F .text	00000004 usb_serial_class::flush()
00013454 g     F .text	00000082 _sungetc_r
00009814  w    F .text	00000006 cmt_isr
0000b2c0 g     F .text	0000027a .hidden __aeabi_dsub
00009814  w    F .text	00000006 usbhs_isr
1fff12f4 g     O .data	00000004 __malloc_sbrk_base
0000ad70  w    F .text	00000004 usb_serial_class::read()
00009814  w    F .text	00000006 ftm3_isr
00012f94 g     F .text	00000024 _strtoll_r
00009814  w    F .text	00000006 tsi0_isr
00001048  w    F .text	00000038 FsFile::read()
0000b5bc g     F .text	0000006a .hidden __floatundidf
00012878 g     F .text	000000ae __lshift
00009814  w    F .text	00000006 spi2_isr
000045f8 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
0000be2c g     F .text	0000001c .hidden __floatsisf
00013354 g     F .text	00000100 __ssprint_r
00013610 g     F .text	0000005e _vasnprintf_r
20020429 g     O .bss	00000001 usb_reboot_timer
00010928 g     F .text	000000a4 __register_exitproc
0000d1dc g     F .text	000000a0 strncmp
000094ec g     F .text	00000038 usb_serial_flush_input
1fff2480 g     O .bss	0002dcd0 logger
000126a8 g     F .text	00000130 __multiply
000096cc g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
1fff1f48 g     O .bss	00000002 parMods
200204d8 g     O .bss	00000028 __malloc_current_mallinfo
00012ba4 g     F .text	000000ba __d2b
00000fa8  w    F .text	0000001c c_mFS::~c_mFS()
00009814  w    F .text	00000006 can0_bus_off_isr
00002aa4 g     F .text	00000004 c_ICS43432::exit()
00007d48  w    F .text	0000000e SdioCard::~SdioCard()
20020495 g     O .bss	00000001 usb_rx_memory_needed
00007d28 g     F .text	0000001c SdioCard::writeStart(unsigned long)
00013120 g     F .text	00000024 _strtoul_r
00000d00 g     F .text	00000010 DMA_startAll
00009ee0 g     F .text	00000ab2 usb_isr
0000c308 g     F .text	0000000c __cxa_atexit
000033c8 g     F .text	000001aa ExFatFile::read(void*, unsigned int)
00006820 g     F .text	00000460 FatFile::open(FatFile*, fname_t*, unsigned char)
0000b55c g     F .text	00000022 .hidden __aeabi_i2d
0000bfa4 g     F .text	00000024 .hidden __fixsfdi
00003c08 g     F .text	0000002a FsCache::sync()
0000b0a0 g     F .text	00000006 Stream::parseInt()
0000c97c g     F .text	00000062 memcmp
00013eac  w    O .text	00000028 vtable for usb_serial_class
00009814  w    F .text	00000006 uart3_error_isr
000031e4 g     F .text	000000e8 FsVolume::begin(SdCardInterface*)
0000be48 g     F .text	0000008c .hidden __floatundisf
0000cf9c g     F .text	00000058 sscanf
200204b0 g     O .bss	00000004 MillisTimer::listActive
0000c2f8  w    F .text	00000002 .hidden __aeabi_ldiv0
00009814  w    F .text	00000006 porta_isr
1fff173c g     O .bss	00000004 haveAcq
0000b87c g     F .text	000001d0 .hidden __divdf3
00000d34 g     F .text	00000044 DMA_attachInterrupt
1fff1734 g     O .bss	00000004 i2sProcCount
00001f18 g     F .text	000000b4 logLightSensor()
00012cc0 g     F .text	00000046 __copybits
1fff03d0 g     O .usbbuffers	00000360 usb_buffer_memory
0000793c g     F .text	000001dc SdSpiCard::sectorCount()
00009814  w    F .text	00000006 low_voltage_isr
1fff0ee8 g     O .data	00000408 __malloc_av_
0000be24 g     F .text	00000024 .hidden __aeabi_ui2f
00009814  w    F .text	00000006 can0_error_isr
1fff0734 g     O .data	00000012 parameters
0000988c g     F .text	00000274 _init_Teensyduino_internal_
0000b628 g     F .text	00000254 .hidden __muldf3
0000972c g     F .text	00000058 usb_serial_flush_output
00009814  w    F .text	00000006 dma_ch12_isr
0000cb44 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
000064d4 g     F .text	00000244 FatFile::parsePathName(char const*, fname_t*, char const**)
00009814  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00013670 g     F .text	0000005e _calloc_r
00009814  w    F .text	00000006 pit3_isr
00009814  w    F .text	00000006 enet_rx_isr
00004844 g     F .text	0000005e ExFatFile::sync()
00008514 g     F .text	00000044 SdioCard::isBusy()
00001840 g     F .text	0000015c encode_mac(char*)
00009814  w    F .text	00000006 portc_isr
0000caa8 g     F .text	0000009a memset
0000af38 g     F .text	00000010 main
00000f18  w    F .text	00000082 Logger<long, 300, 128, 64>::drain()
00005478 g     F .text	000000b0 FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)
00000fc4  w    F .text	00000018 FsFile::peek()
200204cc g     O .bss	00000004 __malloc_max_total_mem
00003e64 g     F .text	0000010a ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000be58 g     F .text	0000007c .hidden __aeabi_l2f
00004ba0 g     F .text	00000284 ExFatFile::write(void const*, unsigned int)
000097cc  w    F .text	00000048 memmanage_fault_isr
0000b18c g     F .text	000000e0 usb_init_serialnumber
000036a4 g     F .text	000003c4 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)
0000e2e8 g     F .text	00000024 _strtol_r
0000bc18 g     F .text	0000009e .hidden __truncdfsf2
00014364 g       .text	00000000 __init_array_end
00010b18 g     F .text	00000e34 _dtoa_r
0000c3e0 g     F .text	00000570 _malloc_r
00009814  w    F .text	00000006 debugmonitor_isr
000108e0 g     F .text	0000001a __ascii_wctomb
0000b5cc g     F .text	0000005a .hidden __aeabi_l2d
00013598 g     F .text	00000078 __submore
00000ae8 g     F .text	00000024 i2s_enableInputDMA
0000aa88 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00002cbc g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
5dbd9fb1 g       *ABS*	00000000 __rtc_localtime
00009bc0 g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
0000be48 g     F .text	0000008c .hidden __aeabi_ul2f
00009814  w    F .text	00000006 cmp1_isr
0000bfc8 g     F .text	0000004c .hidden __fixunssfdi
00009814  w    F .text	00000006 ftm0_isr
000046dc g     F .text	00000168 ExFatFile::syncDir()
1fff2454 g     O .bss	00000004 loopStatus
00011974 g     F .text	0000009c _malloc_trim_r
1fff0934 g     O .data	00000004 string0
00009524 g     F .text	000001a8 usb_serial_write
00009828  w    F .text	00000002 startup_late_hook
000091a4 g     F .text	00000090 SdSpiAltDriver::activate()
0000ad74  w    F .text	00000004 usb_serial_class::available()
00002a94 g     F .text	0000000e c_ICS43432::stop()
00005528 g     F .text	000000b8 FatFile::sync()
1fff091c  w    O .data	00000016 usb_string_product_name
00000ad8 g     F .text	00000010 i2s_startInput
00009c04 g     F .text	0000009c delay
20020514 g     O .bss	00000004 m_i2s_rx_buffer
0000ba5c g     F .text	0000007a .hidden __nedf2
00009814  w    F .text	00000006 tpm0_isr
00014364 g     F .fini	00000000 _fini
00002d48 g     F .text	00000026 TwoWire::write(unsigned char)
0000ae9c g     F .text	0000001c Print::printf(char const*, ...)
0000cf50 g     F .text	0000004c sprintf
00009814  w    F .text	00000006 i2s0_rx_isr
00009814  w    F .text	00000006 uart4_error_isr
0000adbc g     F .text	000000b0 Print::print(long)
00004f7c g     F .text	000000b8 FatFile::close()
00000b0c g     F .text	00000030 DMA_init
0000595c g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
000109e0 g     F .text	0000000c atexit
00007d44  w    F .text	00000002 SdioCard::~SdioCard()
000108fc g     F .text	0000002c _write_r
00008018 g     F .text	000000f8 SdioCard::erase(unsigned long, unsigned long)
0000bcb8 g     F .text	0000016c .hidden __aeabi_frsub
00009814  w    F .text	00000006 can0_message_isr
00012ddc g     F .text	0000000c nanf
1fff0d78 g     O .data	00000004 _impure_ptr
00009814  w    F .text	00000006 can1_message_isr
00003574 g     F .text	0000002e ExFatFile::peek()
00009298 g     F .text	00000020 SdSpiAltDriver::receive(unsigned char*, unsigned int)
00012384 g     F .text	0000005c _mbrtowc_r
00009814  w    F .text	00000006 nmi_isr
1fff07b4 g     O .data	0000006c Wire
00000cc0 g     F .text	0000000c DMA_interruptAtCompletion
00006718 g     F .text	00000108 FatFile::lfnUniqueSfn(fname_t*)
00001080  w    F .text	00000034 FsFile::write(unsigned char)
00001650 g     F .text	000000b8 i2sInProcessing
00007cc8 g     F .text	0000000c SdioCard::errorCode() const
00014358 g       .text	00000000 __preinit_array_end
00006c8c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00009814  w    F .text	00000006 sdhc_isr
000048a4 g     F .text	000000a0 ExFatFile::preAllocate(unsigned long long)
00004060 g     F .text	000000aa ExFatPartition::dirCache(DirPos_t*, unsigned char)
00007b18 g     F .text	00000174 SdSpiCard::erase(unsigned long, unsigned long)
0000c950 g     F .text	0000002a __ascii_mbtowc
1fff1730 g     O .bss	00000004 i2sBusyCount
1fff1738 g     O .bss	00000004 doHibernate
00006ca0 g     F .text	00000060 SdSpiCard::isBusy()
00012a80 g     F .text	00000054 __ulp
00013bf0 g     O .text	00000058 vtable for SdSpiCard
1fff1530 g     O .bss	00000200 header
000008e8 g     F .text	00000060 i2s_configurePorts
00007684  w    F .text	0000015c SdSpiCard::readCID(CID*)
00002cf0  w    F .text	00000016 TwoWire::peek()
00002d08  w    F .text	00000002 TwoWire::flush()
00002170 g     F .text	000004d4 setup
00013edc g     O .text	00000054 usb_descriptor_list
00009d2c g     F .text	0000003c usb_rx
00007ed8 g     F .text	00000020 SdioCard::status()
00009814  w    F .text	00000006 dma_ch10_isr
00000f08 g     F .text	00000010 mySystick_isr()
00000c88 g     F .text	00000036 DMA_destinationBuffer_2ch
0000bbd8 g     F .text	00000040 .hidden __aeabi_d2uiz
00009814  w    F .text	00000006 uart0_error_isr
00009ca0 g     F .text	00000040 usb_malloc
000051dc g     F .text	0000019a FatFile::read(void*, unsigned int)
00009814  w    F .text	00000006 i2s0_isr
0000519c g     F .text	0000003e FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
000032cc g     F .text	00000004 operator new(unsigned int, unsigned long*)
000077e0  w    F .text	0000015c SdSpiCard::readCSD(csd_t*)
000096e4 g     F .text	00000048 usb_serial_write_buffer_free
00009814  w    F .text	00000006 enet_timer_isr
0000baf8 g     F .text	00000012 .hidden __aeabi_dcmpeq
00000994 g     F .text	00000134 i2s_setupInput
00002d0c g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
0000ae8c  w    F .text	0000000e _write
1fff12f8 g       .data	00000000 _edata
00004278 g     F .text	000000a4 ExFatPartition::fatPut(unsigned long, unsigned long)
00007d44  w    F .text	00000002 SdioCard::~SdioCard()
00009814  w    F .text	00000006 i2s0_tx_isr
00009814  w    F .text	00000006 adc1_isr
00006fe4 g     F .text	000000e0 SdSpiCard::syncDevice()
00000c1c g     F .text	00000038 DMA_source_2ch
00004ec4 g     F .text	000000b8 FatFile::addDirCluster()
0000ad7c  w    F .text	00000004 usb_serial_class::availableForWrite()
00009814  w    F .text	00000006 cmp0_isr
00000c54 g     F .text	00000032 DMA_destinationBuffer
0000b26c g     F .text	0000004c ultoa
00001e58  w    F .text	00000098 SdBase<FsVolume>::errorHalt(Print*)
1fff12f0 g     O .data	00000004 __malloc_trim_threshold
0000ad6c  w    F .text	00000004 usb_serial_class::peek()
0000be24 g     F .text	00000024 .hidden __floatunsisf
0001296c g     F .text	00000114 __mdiff
00007d18 g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000bb88 g     F .text	0000004e .hidden __aeabi_d2iz
0000410c g     F .text	000000ce ExFatPartition::dirSeek(DirPos_t*, unsigned long)
200203a8 g     O .bss	00000001 usb_cdc_transmit_flush_timer
200204c6 g     O .bss	00000002 AudioStream::cpu_cycles_total
00009814  w    F .text	00000006 pit_isr
00008658 g     F .text	00000004 SdioCard::writeStop()
000071e0  w    F .text	00000168 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00012d68 g     F .text	00000072 __sccl
000032d0 g     F .text	00000014 ExFatFile::close()
00014038 g     O .text	00000101 _ctype_
00009814  w    F .text	00000006 dac0_isr
000070c4  w    F .text	0000011c SdSpiCard::readSector(unsigned long, unsigned char*)
00014358 g       .text	00000000 __init_array_start
0000c2f8  w    F .text	00000002 .hidden __aeabi_idiv0
00009814  w    F .text	00000006 can1_tx_warn_isr
0000bb5c g     F .text	0000002c .hidden __unorddf2
00009814  w    F .text	00000006 uart0_status_isr
00001490 g     F .text	00000084 dateTime(unsigned short*, unsigned short*)
00009814  w    F .text	00000006 mcg_isr
0000afcc g     F .text	000000d4 Stream::parseInt(char)
00000400 g     O .text	00000010 flashconfigbytes
0000d100 g     F .text	000000dc strlen
0000c3a4 g     F .text	00000006 __locale_ctype_ptr_l
20020518 g     O .bss	00000004 m_i2s_isMaster
0000bae8 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000ba4c g     F .text	0000008a .hidden __gedf2
000053e4 g     F .text	00000094 FatFile::seekSet(unsigned long)
00011c88 g     F .text	00000510 __gethex
1fff091c g     O .data	00000016 usb_string_product_name_default
00000b3c g     F .text	000000b0 DMA_allocate
000108c8 g     F .text	00000018 vdprintf
00009814  w    F .text	00000006 dma_ch1_isr
00007d78 g     F .text	0000006c SdioCard::sectorCount()
00009d68 g     F .text	0000002c usb_tx_packet_count
0000cff8 g     F .text	000000ce strchr
00013c48 g     O .text	00000058 vtable for SdioCard
0000b580 g     F .text	0000003a .hidden __aeabi_f2d
00009814  w    F .text	00000006 dma_ch5_isr
00009814  w    F .text	00000006 can0_rx_warn_isr
2002051c g     O .bss	0000000c iscl
00009814  w    F .text	00000006 can0_tx_warn_isr
20020154 g     O .bss	00000004 startTime
00000f9c  w    F .text	0000000c Logger<long, 300, 128, 64>::haveFinished()
00009814  w    F .text	00000006 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003118 g     F .text	00000028 FsFile::close()
200204c4 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
0000b2c0 g     F .text	0000027a .hidden __subdf3
00014358 g       .text	00000000 __preinit_array_start
00003f70 g     F .text	000000ee ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00000734 g     F .text	000001b4 i2s_config
00012638 g     F .text	0000005a __lo0bits
00006378 g     F .text	0000015a FatPartition::init(SdCardInterface*, unsigned char)
0000bed4 g     F .text	00000000 .hidden __aeabi_ldivmod
0000c2fc g     F .text	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
00009814  w    F .text	00000006 cmp2_isr
0000bcc4 g     F .text	00000160 .hidden __addsf3
0000ab08 g     F .text	00000044 pendablesrvreq_isr
00000efc  w    F .text	00000004 Print::availableForWrite()
1fff0d7c g     O .data	0000016c __global_locale
00009814  w    F .text	00000006 wakeup_isr
00008670 g     F .text	00000570 SdioCard::begin(SdioConfig)
00003b78 g     F .text	0000000c FsCache::invalidate()
00000d18 g     F .text	0000001a DMA_triggerAtHardwareEvent
00009814  w    F .text	00000006 cmp3_isr
0000aeb8 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
000092d0 g     F .text	00000052 SdSpiAltDriver::send(unsigned char const*, unsigned int)
00005968 g     F .text	00000150 FatPartition::fatGet(unsigned long, unsigned long*)
0000c3d0 g     F .text	00000010 free
00009814  w    F .text	00000006 tpm2_isr
000124e0 g     F .text	00000080 __multadd
000124cc g     F .text	00000012 _Bfree
00009814  w    F .text	00000006 dma_ch0_isr
1fff0938  w    O .data	00000016 usb_string_serial_number
00009814  w    F .text	00000006 enet_tx_isr
000045bc g     F .text	0000003c exFatHashName(char const*, unsigned int, unsigned short)
00008ebc g     F .text	000000ec SdioCard::readSector(unsigned long, unsigned char*)
00007cfc g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
size_t fsPrintDateTime(print_t* pr, uint32_t dateTime) {
  return fsPrintDateTime(pr, dateTime >> 16, dateTime & 0XFFFF);
}
//------------------------------------------------------------------------------
size_t fsPrintDateTime(print_t* pr,
                       uint32_t dateTime, uint8_t s100, int8_t tz) {
       0:	... ............
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
  char sign;
  if (tz & 0X80) {
      10:	................
  str = fsFmtField(str, time & 63, 0);
  return fsFmtField(str, time >> 6, ':');
}
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time, uint8_t sec100) {
  str = fsFmtField(str, sec100%100, 0);
      20:	................
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      30:	............Y...
  return fsFmtField(str, time >> 6, ':');
}
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time, uint8_t sec100) {
  str = fsFmtField(str, sec100%100, 0);
  str = fsFmtField(str, 2*(time & 31) + sec100/100, '.');
      40:	................
/** Date time callback. */
void (*FsDateTime::callback)(uint16_t* date, uint16_t* time) = nullptr;
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      50:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
      60:	................
  return fsFmtField(str, 1980 + date, '-');
}
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time) {
  time >>= 5;
  str = fsFmtField(str, time & 63, 0);
      70:	................
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
      80:	................
/** Date time callback. */
void (*FsDateTime::callback)(uint16_t* date, uint16_t* time) = nullptr;
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      90:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      a0:	q-..............
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      b0:	................
  if (n < 10) {
    *--str = '0';
      c0:	................
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      d0:	................
  if (n < 10) {
    *--str = '0';
      e0:	................
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      f0:	................
  }
  str = fsFmtTime(str, (uint16_t)dateTime, s100);
  *--str = ' ';
  str = fsFmtDate(str, (uint16_t)(dateTime >> 16));
  return pr->write(str, buf + sizeof(buf) - str);
}
     100:	................
char* fsFmtTimeZone(char* str, int8_t tz) {
  char sign;
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
     110:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
     120:	................
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
     130:	................
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
     140:	I...............
/** Date time callback. */
void (*FsDateTime::callback)(uint16_t* date, uint16_t* time) = nullptr;
//-------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
     150:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
     160:	........./......
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
     170:	................
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
     180:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
     190:	................
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	981c <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	988c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	9868 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	9868 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	c320 <__libc_init_array>

	startup_late_hook();
     32c:	bl	9828 <startup_late_hook>
	main();
     330:	bl	af38 <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x1fff12f8
     360:	.word	0x0001436c
     364:	.word	0x1fff0730
     368:	.word	0x1fff12f8
     36c:	.word	0x20020540
     370:	.word	0x1fff0200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x5dbd9fb1
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff12f8
     42c:	.word	0x00000000
     430:	.word	0x00014368

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff12fc
     460:	.word	0x00014368
     464:	.word	0x1fff12f8
     468:	.word	0x00000000

0000046c <i2s_stopClock>:
int m_i2s_isMaster;
int m_i2s_nbits;
int m_i2s_dual;

void i2s_initClock(void) {  SIM_SCGC6 |= SIM_SCGC6_I2S;}
void i2s_stopClock(void) {  SIM_SCGC6 &= ~SIM_SCGC6_I2S;}
     46c:	ldr	r2, [pc, #8]	; (478 <i2s_stopClock+0xc>)
     46e:	ldr	r3, [r2, #0]
     470:	bic.w	r3, r3, #32768	; 0x8000
     474:	str	r3, [r2, #0]
     476:	bx	lr
     478:	.word	0x4004803c

0000047c <i2s_init>:

int m_i2s_isMaster;
int m_i2s_nbits;
int m_i2s_dual;

void i2s_initClock(void) {  SIM_SCGC6 |= SIM_SCGC6_I2S;}
     47c:	ldr	r2, [pc, #8]	; (488 <i2s_init+0xc>)
     47e:	ldr	r3, [r2, #0]
     480:	orr.w	r3, r3, #32768	; 0x8000
     484:	str	r3, [r2, #0]
     486:	bx	lr
     488:	.word	0x4004803c

0000048c <i2s_speedConfig>:
					73, 79, 83, 89, 97, 101, 103, 107, 109, 113,
					127, 131, 137, 139, 149, 151, 157, 163, 167, 173,
					179, 181, 191, 193, 197, 199};

float i2s_speedConfig(int device, int nbits, int fs)
{
     48c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     490:	vpush	{d8-d9}
//	BCLK = MCLK/2/(iscl3+1)
//  LRCLK = BCLK/(2*nbits); // division by  is to have 32 bits within frame sync (BCLK)
//
	int64_t i1=1,i2=1,i3;
	//
	if((device==SGTL5000_DEV) || (device==PJRC_AUDIO_DEV) || (device==CS5361_DEV))
     494:	cmp	r0, #2
					73, 79, 83, 89, 97, 101, 103, 107, 109, 113,
					127, 131, 137, 139, 149, 151, 157, 163, 167, 173,
					179, 181, 191, 193, 197, 199};

float i2s_speedConfig(int device, int nbits, int fs)
{
     496:	sub	sp, #12
     498:	vmov	s16, r1
//	BCLK = MCLK/2/(iscl3+1)
//  LRCLK = BCLK/(2*nbits); // division by  is to have 32 bits within frame sync (BCLK)
//
	int64_t i1=1,i2=1,i3;
	//
	if((device==SGTL5000_DEV) || (device==PJRC_AUDIO_DEV) || (device==CS5361_DEV))
     49c:	bhi.w	5a8 <i2s_speedConfig+0x11c>
	{
		int64_t nov;
		if (device==PJRC_AUDIO_DEV) 
     4a0:	cmp	r0, #0
     4a2:	bne.w	67e <i2s_speedConfig+0x1f2>
		{	nov=256;
     4a6:	mov.w	r3, #256	; 0x100
			nbits=16;
     4aa:	vldr	s16, [pc, #608]	; 70c <i2s_speedConfig+0x280>
	//
	if((device==SGTL5000_DEV) || (device==PJRC_AUDIO_DEV) || (device==CS5361_DEV))
	{
		int64_t nov;
		if (device==PJRC_AUDIO_DEV) 
		{	nov=256;
     4ae:	str	r0, [sp, #4]
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
     4b0:	movw	r8, #44100	; 0xac44
     4b4:	mov.w	r9, #0
	//
	if((device==SGTL5000_DEV) || (device==PJRC_AUDIO_DEV) || (device==CS5361_DEV))
	{
		int64_t nov;
		if (device==PJRC_AUDIO_DEV) 
		{	nov=256;
     4b8:	str	r3, [sp, #0]
			nbits=16;
     4ba:	ldr	r4, [pc, #596]	; (710 <i2s_speedConfig+0x284>)
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
     4bc:	ldr.w	sl, [pc, #596]	; 714 <i2s_speedConfig+0x288>
	if((device==SGTL5000_DEV) || (device==PJRC_AUDIO_DEV) || (device==CS5361_DEV))
	{
		int64_t nov;
		if (device==PJRC_AUDIO_DEV) 
		{	nov=256;
			nbits=16;
     4c0:	movs	r5, #0
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
     4c2:	mov	r6, r4
     4c4:	mov	r7, r5
     4c6:	mov.w	fp, #0
     4ca:	b.n	4dc <i2s_speedConfig+0x50>
     4cc:	cmp	r2, #1
     4ce:	sbcs.w	r3, r3, #0
     4d2:	blt.n	516 <i2s_speedConfig+0x8a>
     4d4:	cmp	r5, fp
     4d6:	it	eq
     4d8:	cmpeq	r4, sl
     4da:	beq.n	516 <i2s_speedConfig+0x8a>
     4dc:	adds	r4, r4, r6
     4de:	adcs	r5, r7
     4e0:	mov	r2, r8
     4e2:	mov	r3, r9
     4e4:	mov	r0, r4
     4e6:	mov	r1, r5
     4e8:	bl	bed4 <__aeabi_ldivmod>
     4ec:	and.w	r2, r0, #7
     4f0:	and.w	r3, r1, #2147483648	; 0x80000000
     4f4:	cmp	r2, #0
     4f6:	sbcs.w	lr, r3, #0
     4fa:	bge.n	4cc <i2s_speedConfig+0x40>
     4fc:	adds.w	r2, r2, #4294967295
     500:	orn	r2, r2, #7
     504:	adds	r2, #1
     506:	mov.w	r3, #4294967295
     50a:	adc.w	r3, r3, #0
     50e:	cmp	r2, #1
     510:	sbcs.w	r3, r3, #0
     514:	bge.n	4d4 <i2s_speedConfig+0x48>
     516:	ldr	r2, [pc, #508]	; (714 <i2s_speedConfig+0x288>)
		int64_t scl = fref/fs; // should now be multiple of 8
		//
		// find first multiplier
		int64_t bitRate = fref*nov;
     518:	ldr	r3, [sp, #4]
     51a:	umull	sl, fp, r0, r2
     51e:	mla	fp, r2, r1, fp
     522:	ldr	r1, [sp, #0]
     524:	mul.w	r3, r4, r3
     528:	mla	r3, r1, r5, r3
     52c:	umull	r4, r5, r4, r1
		int64_t scale0 = F_CPU*scl;
     530:	mov	r8, sl
     532:	mov	r9, fp
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
		int64_t scl = fref/fs; // should now be multiple of 8
		//
		// find first multiplier
		int64_t bitRate = fref*nov;
     534:	add	r5, r3
		int64_t scale0 = F_CPU*scl;
		
		for(i1=1; i1<256;i1++) if ((scale0*i1 % bitRate)==0) break;
     536:	movs	r6, #1
     538:	movs	r7, #0
     53a:	b.n	556 <i2s_speedConfig+0xca>
     53c:	adds	r6, #1
     53e:	adc.w	r7, r7, #0
     542:	adds.w	r8, r8, sl
     546:	adc.w	r9, r9, fp
     54a:	cmp	r7, #0
     54c:	it	eq
     54e:	cmpeq.w	r6, #256	; 0x100
     552:	beq.w	6e6 <i2s_speedConfig+0x25a>
     556:	mov	r2, r4
     558:	mov	r3, r5
     55a:	mov	r0, r8
     55c:	mov	r1, r9
     55e:	bl	bed4 <__aeabi_ldivmod>
     562:	orrs	r3, r2
     564:	bne.n	53c <i2s_speedConfig+0xb0>
		if(i1==256) return 0.0f; // failed to find multiplier
		
		i2=scale0*i1 / bitRate;
     566:	mov	r2, r4
     568:	mov	r3, r5
     56a:	mov	r0, r8
     56c:	mov	r1, r9
     56e:	bl	bed4 <__aeabi_ldivmod>
		i3 = nov / (4*nbits);
     572:	vmov	r3, s16
     576:	lsls	r2, r3, #2
     578:	asrs	r3, r2, #31
		int64_t scale0 = F_CPU*scl;
		
		for(i1=1; i1<256;i1++) if ((scale0*i1 % bitRate)==0) break;
		if(i1==256) return 0.0f; // failed to find multiplier
		
		i2=scale0*i1 / bitRate;
     57a:	mov	r8, r0
     57c:	mov	r9, r1
		i3 = nov / (4*nbits);
     57e:	ldmia.w	sp, {r0, r1}
     582:	bl	bed4 <__aeabi_ldivmod>
		
		iscl[0] = (int) (i1-1);
     586:	ldr	r3, [pc, #400]	; (718 <i2s_speedConfig+0x28c>)
		iscl[1] = (int) (i2-1);
     588:	add.w	r2, r8, #4294967295
     58c:	str	r2, [r3, #4]
		if(i1==256) return 0.0f; // failed to find multiplier
		
		i2=scale0*i1 / bitRate;
		i3 = nov / (4*nbits);
		
		iscl[0] = (int) (i1-1);
     58e:	subs	r4, r6, #1
		iscl[1] = (int) (i2-1);
		iscl[2] = (int) (i3-1);
     590:	subs	r2, r0, #1
		if(i1==256) return 0.0f; // failed to find multiplier
		
		i2=scale0*i1 / bitRate;
		i3 = nov / (4*nbits);
		
		iscl[0] = (int) (i1-1);
     592:	str	r4, [r3, #0]
		iscl[1] = (int) (i2-1);
		iscl[2] = (int) (i3-1);
     594:	str	r2, [r3, #8]
     596:	bl	be58 <__aeabi_l2f>
     59a:	vcvt.f32.s32	s16, s16
     59e:	vmov	s17, r0
     5a2:	vadd.f32	s19, s16, s16
     5a6:	b.n	640 <i2s_speedConfig+0x1b4>
	}
	
	else
  {
    i3=2;
    float A=F_CPU/2.0f/i3/(2.0f*nbits*fs);
     5a8:	vcvt.f32.s32	s16, s16
     5ac:	vmov	s15, r2
     5b0:	vadd.f32	s19, s16, s16
     5b4:	vcvt.f32.s32	s15, s15
     5b8:	vldr	s14, [pc, #352]	; 71c <i2s_speedConfig+0x290>
    float mn=1.0; 
    for(int ii=1;ii<32;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii); 
      if(xx<mn && A*ii<256.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     5bc:	vldr	s18, [pc, #352]	; 720 <i2s_speedConfig+0x294>
	}
	
	else
  {
    i3=2;
    float A=F_CPU/2.0f/i3/(2.0f*nbits*fs);
     5c0:	vmul.f32	s15, s15, s19
     5c4:	movs	r4, #1
     5c6:	movs	r5, #0
//  MCGPLLCLK=F_CPU // is set by _MICS(3)
//  MCLK = MCGPLLCLK*(iscl1+1)/(iscl2+1)
//	BCLK = MCLK/2/(iscl3+1)
//  LRCLK = BCLK/(2*nbits); // division by  is to have 32 bits within frame sync (BCLK)
//
	int64_t i1=1,i2=1,i3;
     5c8:	mov.w	r8, #1
     5cc:	mov.w	r9, #0
	}
	
	else
  {
    i3=2;
    float A=F_CPU/2.0f/i3/(2.0f*nbits*fs);
     5d0:	vdiv.f32	s17, s14, s15
//  MCGPLLCLK=F_CPU // is set by _MICS(3)
//  MCLK = MCGPLLCLK*(iscl1+1)/(iscl2+1)
//	BCLK = MCLK/2/(iscl3+1)
//  LRCLK = BCLK/(2*nbits); // division by  is to have 32 bits within frame sync (BCLK)
//
	int64_t i1=1,i2=1,i3;
     5d4:	mov	r6, r4
     5d6:	mov	r7, r5
	
	else
  {
    i3=2;
    float A=F_CPU/2.0f/i3/(2.0f*nbits*fs);
    float mn=1.0; 
     5d8:	mov	r0, r8
     5da:	mov	r1, r9
     5dc:	vmov.f32	s14, #112	; 0x3f800000  1.0
    for(int ii=1;ii<32;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii); 
     5e0:	vmov	s15, r4
     5e4:	vcvt.f32.s32	s15, s15
     5e8:	vmul.f32	s15, s15, s17
     5ec:	vcvt.s32.f32	s16, s15
     5f0:	vcvt.f32.s32	s16, s16
     5f4:	vsub.f32	s16, s15, s16
      if(xx<mn && A*ii<256.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     5f8:	vcmpe.f32	s16, s14
     5fc:	vmrs	APSR_nzcv, fpscr
     600:	bpl.n	61c <i2s_speedConfig+0x190>
     602:	vcmpe.f32	s15, s18
     606:	vmrs	APSR_nzcv, fpscr
     60a:	bpl.n	61c <i2s_speedConfig+0x190>
     60c:	vmov	r0, s15
     610:	bl	bfa4 <__aeabi_f2lz>
     614:	mov	r6, r4
     616:	mov	r7, r5
     618:	vmov.f32	s14, s16
     61c:	adds	r4, #1
     61e:	adc.w	r5, r5, #0
	else
  {
    i3=2;
    float A=F_CPU/2.0f/i3/(2.0f*nbits*fs);
    float mn=1.0; 
    for(int ii=1;ii<32;ii++) 
     622:	cmp	r5, #0
     624:	it	eq
     626:	cmpeq	r4, #32
     628:	bne.n	5e0 <i2s_speedConfig+0x154>
     62a:	mov	r8, r0
    { float xx;
      xx=A*ii-(int32_t)(A*ii); 
      if(xx<mn && A*ii<256.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
     62c:	ldr	r3, [pc, #232]	; (718 <i2s_speedConfig+0x28c>)
     62e:	mov	r9, r1
     630:	subs	r0, r6, #1
    iscl[1] = (int) (i2-1);
     632:	add.w	r1, r8, #4294967295
    iscl[2] = (int) (i3-1);
     636:	movs	r2, #1
     638:	stmia.w	r3, {r0, r1, r2}
     63c:	vmov.f32	s17, #0	; 0x40000000  2.0
  }
	return F_CPU * (float)(i1) / (float)(i2) / 2.0f / (float)(i3) / (2.0f*nbits); // is sampling frequency
     640:	mov	r1, r7
     642:	mov	r0, r6
     644:	bl	be58 <__aeabi_l2f>
     648:	vldr	s16, [pc, #216]	; 724 <i2s_speedConfig+0x298>
     64c:	vmov	s15, r0
     650:	mov	r1, r9
     652:	mov	r0, r8
     654:	vmul.f32	s16, s15, s16
     658:	bl	be58 <__aeabi_l2f>
     65c:	vmov	s14, r0
     660:	vdiv.f32	s15, s16, s14
     664:	vmov.f32	s14, #96	; 0x3f000000  0.5
     668:	vmul.f32	s15, s15, s14
     66c:	vdiv.f32	s14, s15, s17
     670:	vdiv.f32	s0, s14, s19
}
     674:	add	sp, #12
     676:	vpop	{d8-d9}
     67a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		{	nov=256;
			nbits=16;
			fs=44100; // is fixed in Audio tool
		}

		else if (device==SGTL5000_DEV)
     67e:	cmp	r0, #1
     680:	beq.n	6a0 <i2s_speedConfig+0x214>
			if(fs>48000) nov=256;
		}

		else if (device==CS5361_DEV)
		{   nbits = 32; 
			int64_t sc = 96000/fs;
     682:	ldr	r3, [pc, #164]	; (728 <i2s_speedConfig+0x29c>)
     684:	sdiv	r3, r3, r2
			if(sc>2) sc=2;
     688:	cmp	r3, #2
     68a:	bgt.n	700 <i2s_speedConfig+0x274>
     68c:	mov.w	r1, #256	; 0x100
     690:	lsl.w	r3, r1, r3
     694:	asrs	r1, r3, #31
     696:	str	r1, [sp, #4]
     698:	str	r3, [sp, #0]
		{	nov=512;
			if(fs>48000) nov=256;
		}

		else if (device==CS5361_DEV)
		{   nbits = 32; 
     69a:	vldr	s16, [pc, #144]	; 72c <i2s_speedConfig+0x2a0>
     69e:	b.n	6b6 <i2s_speedConfig+0x22a>
			fs=44100; // is fixed in Audio tool
		}

		else if (device==SGTL5000_DEV)
		{	nov=512;
			if(fs>48000) nov=256;
     6a0:	movw	r3, #48000	; 0xbb80
			nbits=16;
			fs=44100; // is fixed in Audio tool
		}

		else if (device==SGTL5000_DEV)
		{	nov=512;
     6a4:	cmp	r2, r3
     6a6:	ite	gt
     6a8:	movgt.w	r3, #256	; 0x100
     6ac:	movle.w	r3, #512	; 0x200
     6b0:	str	r3, [sp, #0]
     6b2:	movs	r3, #0
     6b4:	str	r3, [sp, #4]
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
     6b6:	mov.w	r9, r2, asr #31
     6ba:	mov	r3, r9
     6bc:	ldr	r0, [pc, #80]	; (710 <i2s_speedConfig+0x284>)
     6be:	movs	r1, #0
     6c0:	mov	r8, r2
     6c2:	bl	bed4 <__aeabi_ldivmod>
     6c6:	and.w	r2, r0, #7
     6ca:	and.w	r3, r1, #2147483648	; 0x80000000
     6ce:	cmp	r2, #0
     6d0:	sbcs.w	r4, r3, #0
     6d4:	blt.n	6ec <i2s_speedConfig+0x260>
     6d6:	cmp	r2, #1
     6d8:	sbcs.w	r3, r3, #0
     6dc:	bge.w	4ba <i2s_speedConfig+0x2e>
			if(sc>2) sc=2;
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
     6e0:	ldr	r4, [pc, #44]	; (710 <i2s_speedConfig+0x284>)
     6e2:	movs	r5, #0
     6e4:	b.n	516 <i2s_speedConfig+0x8a>
		// find first multiplier
		int64_t bitRate = fref*nov;
		int64_t scale0 = F_CPU*scl;
		
		for(i1=1; i1<256;i1++) if ((scale0*i1 % bitRate)==0) break;
		if(i1==256) return 0.0f; // failed to find multiplier
     6e6:	vldr	s0, [pc, #72]	; 730 <i2s_speedConfig+0x2a4>
     6ea:	b.n	674 <i2s_speedConfig+0x1e8>
			nov=256<<sc;
		}			
		
		// find reference frequency for rounding
		int64_t fref = 1000000; // start with 1 MHz
		while( (((fref/fs) % 8)>0) &&  (fref < F_CPU)) fref+= 1000000; 
     6ec:	adds.w	r2, r2, #4294967295
     6f0:	orn	r2, r2, #7
     6f4:	mov.w	r3, #4294967295
     6f8:	adds	r2, #1
     6fa:	adc.w	r3, r3, #0
     6fe:	b.n	6d6 <i2s_speedConfig+0x24a>
     700:	mov.w	r1, #1024	; 0x400
     704:	movs	r3, #0
     706:	stmia.w	sp, {r1, r3}
     70a:	b.n	69a <i2s_speedConfig+0x20e>
     70c:	.word	0x00000010
     710:	.word	0x000f4240
     714:	.word	0x05b8d800
     718:	.word	0x2002051c
     71c:	.word	0x4bb71b00
     720:	.word	0x43800000
     724:	.word	0x4cb71b00
     728:	.word	0x00017700
     72c:	.word	0x00000020
     730:	.word	0x00000000

00000734 <i2s_config>:
  }
	return F_CPU * (float)(i1) / (float)(i2) / 2.0f / (float)(i3) / (2.0f*nbits); // is sampling frequency
}

void i2s_config(int isMaster, int nbits, int dual, int sync)
{
     734:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      mcr_src=3;
  #endif
#endif

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
     738:	ldr	r4, [pc, #352]	; (89c <i2s_config+0x168>)
     73a:	ldr	r5, [r4, #0]
     73c:	cmp	r5, #0
     73e:	blt.n	816 <i2s_config+0xe2>
	if (I2S0_RCSR & I2S_RCSR_RE) return;
     740:	ldr	r5, [pc, #348]	; (8a0 <i2s_config+0x16c>)
     742:	ldr	r6, [r5, #0]
     744:	cmp	r6, #0
     746:	blt.n	816 <i2s_config+0xe2>

	I2S0_TCSR=0;
	I2S0_RCSR=0;
	//
	m_i2s_isMaster=isMaster;
     748:	ldr.w	ip, [pc, #396]	; 8d8 <i2s_config+0x1a4>
	m_i2s_nbits=nbits;
     74c:	ldr.w	lr, [pc, #396]	; 8dc <i2s_config+0x1a8>
	m_i2s_dual=dual;
     750:	ldr	r7, [pc, #336]	; (8a4 <i2s_config+0x170>)

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	I2S0_TCSR=0;
     752:	movs	r6, #0
     754:	str	r6, [r4, #0]
	I2S0_RCSR=0;
     756:	str	r6, [r5, #0]
	//
	m_i2s_isMaster=isMaster;
     758:	str.w	r0, [ip]
	m_i2s_nbits=nbits;
     75c:	str.w	r1, [lr]
	m_i2s_dual=dual;
     760:	str	r2, [r7, #0]
	
	// enable MCLK output
	if(isMaster)
     762:	cmp	r0, #0
     764:	bne.n	81a <i2s_config+0xe6>
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
     766:	ldr	r7, [pc, #320]	; (8a8 <i2s_config+0x174>)
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     768:	ldr	r6, [pc, #320]	; (8ac <i2s_config+0x178>)
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     76a:	ldr	r5, [pc, #324]	; (8b0 <i2s_config+0x17c>)
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
     76c:	str	r0, [r7, #0]
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     76e:	rsb	r4, r3, #1
     772:	lsls	r4, r4, #30
     774:	orr.w	r4, r4, #33554432	; 0x2000000
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     778:	movs	r7, #1
     77a:	str	r7, [r6, #0]
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     77c:	str	r4, [r5, #0]
	if(isMaster)
		I2S0_TCR2 |= (I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]) | I2S_TCR2_MSEL(1));
	//
	if(dual & I2S_TX_2CH)
     77e:	lsls	r5, r2, #31
		I2S0_TCR3 = I2S_TCR3_TCE_2CH; // dual tx channel
     780:	ldr	r4, [pc, #304]	; (8b4 <i2s_config+0x180>)
	else
		I2S0_TCR3 = I2S_TCR3_TCE; // single tx channel
	//
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) 
     782:	ldr	r6, [pc, #308]	; (8b8 <i2s_config+0x184>)
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
	if(isMaster)
		I2S0_TCR2 |= (I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]) | I2S_TCR2_MSEL(1));
	//
	if(dual & I2S_TX_2CH)
		I2S0_TCR3 = I2S_TCR3_TCE_2CH; // dual tx channel
     784:	ite	mi
     786:	movmi.w	r5, #196608	; 0x30000
	else
		I2S0_TCR3 = I2S_TCR3_TCE; // single tx channel
     78a:	movpl.w	r5, #65536	; 0x10000
	//
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) 
				| I2S_TCR4_SYWD((nbits-1)) 
     78e:	subs	r1, #1
		I2S0_TCR2 |= (I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]) | I2S_TCR2_MSEL(1));
	//
	if(dual & I2S_TX_2CH)
		I2S0_TCR3 = I2S_TCR3_TCE_2CH; // dual tx channel
	else
		I2S0_TCR3 = I2S_TCR3_TCE; // single tx channel
     790:	str	r5, [r4, #0]
	//
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) 
				| I2S_TCR4_SYWD((nbits-1)) 
     792:	lsls	r4, r1, #8
     794:	and.w	r4, r4, #7936	; 0x1f00
				| I2S_TCR4_MF 
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
     798:	orr.w	r5, r4, #65536	; 0x10000
     79c:	orr.w	r5, r5, #26
	if(dual & I2S_TX_2CH)
		I2S0_TCR3 = I2S_TCR3_TCE_2CH; // dual tx channel
	else
		I2S0_TCR3 = I2S_TCR3_TCE; // single tx channel
	//
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) 
     7a0:	str	r5, [r6, #0]
				| I2S_TCR4_SYWD((nbits-1)) 
				| I2S_TCR4_MF 
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
     7a2:	cmp	r0, #0
     7a4:	beq.n	872 <i2s_config+0x13e>
		I2S0_TCR4 |= I2S_TCR4_FSD;	
     7a6:	ldr.w	ip, [r6]
	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
	if(isMaster)
		I2S0_RCR2 = (I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]) | I2S_RCR2_MSEL(1));
     7aa:	ldr.w	lr, [pc, #288]	; 8cc <i2s_config+0x198>
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     7ae:	ldr.w	sl, [pc, #304]	; 8e0 <i2s_config+0x1ac>

	// configure receiver 
	I2S0_RMR = 0;
     7b2:	ldr.w	r9, [pc, #284]	; 8d0 <i2s_config+0x19c>
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
	if(isMaster)
		I2S0_RCR2 = (I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]) | I2S_RCR2_MSEL(1));
     7b6:	ldrb.w	lr, [lr, #8]
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));

	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
     7ba:	ldr.w	r8, [pc, #280]	; 8d4 <i2s_config+0x1a0>
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     7be:	lsls	r7, r1, #24
     7c0:	and.w	r7, r7, #520093696	; 0x1f000000
     7c4:	lsls	r1, r1, #16
     7c6:	orrs	r4, r7
     7c8:	and.w	r1, r1, #2031616	; 0x1f0000
				| I2S_TCR4_SYWD((nbits-1)) 
				| I2S_TCR4_MF 
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
     7cc:	orr.w	r7, ip, #1
     7d0:	str	r7, [r6, #0]
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     7d2:	orrs	r1, r4

	// configure receiver 
	I2S0_RMR = 0;
     7d4:	movs	r6, #0
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     7d6:	str.w	r1, [sl]

	// configure receiver 
	I2S0_RMR = 0;
     7da:	str.w	r6, [r9]
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
     7de:	ldr	r6, [pc, #220]	; (8bc <i2s_config+0x188>)
     7e0:	lsls	r3, r3, #30
	if(isMaster)
		I2S0_RCR2 = (I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]) | I2S_RCR2_MSEL(1));
     7e2:	orr.w	r4, lr, #83886080	; 0x5000000
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));

	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
     7e6:	movs	r7, #1
     7e8:	str.w	r7, [r8]
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
     7ec:	str	r3, [r6, #0]
	if(isMaster)
		I2S0_RCR2 = (I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]) | I2S_RCR2_MSEL(1));
     7ee:	str	r4, [r6, #0]
	//
	if(dual & I2S_RX_2CH)
     7f0:	lsls	r2, r2, #30
		I2S0_RCR3 = I2S_RCR3_RCE_2CH; // dual rx channel
     7f2:	ldr	r3, [pc, #204]	; (8c0 <i2s_config+0x18c>)
     7f4:	ite	mi
     7f6:	movmi.w	r2, #196608	; 0x30000
	else
		I2S0_RCR3 = I2S_RCR3_RCE; // single rx channel
     7fa:	movpl.w	r2, #65536	; 0x10000
     7fe:	str	r2, [r3, #0]
	//
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) 
     800:	ldr	r3, [pc, #192]	; (8c4 <i2s_config+0x190>)
     802:	str	r5, [r3, #0]
				| I2S_RCR4_SYWD((nbits-1)) 
				| I2S_RCR4_MF
				| I2S_RCR4_FSE	// frame sync early
				| I2S_RCR4_FSP	// sample at active low
				;
	if(isMaster)
     804:	cbz	r0, 80e <i2s_config+0xda>
		I2S0_RCR4 |= I2S_RCR4_FSD;	
     806:	ldr	r2, [r3, #0]
     808:	orr.w	r2, r2, #1
     80c:	str	r2, [r3, #0]

	I2S0_RCR5 = I2S_RCR5_WNW((nbits-1)) | I2S_RCR5_W0W((nbits-1)) | I2S_RCR5_FBT((nbits-1));
     80e:	ldr	r3, [pc, #184]	; (8c8 <i2s_config+0x194>)
     810:	str	r1, [r3, #0]
     812:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     816:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	m_i2s_dual=dual;
	
	// enable MCLK output
	if(isMaster)
	{
		I2S0_MCR = I2S_MCR_MICS(mcr_src)  | I2S_MCR_MOE;
     81a:	adds	r5, #128	; 0x80
     81c:	mov.w	r4, #1124073472	; 0x43000000
     820:	str	r4, [r5, #0]
		while (I2S0_MCR & I2S_MCR_DUF) ; 
     822:	ldr	r4, [r5, #0]
     824:	cmp	r4, #0
     826:	blt.n	822 <i2s_config+0xee>
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
     828:	ldr	r4, [pc, #160]	; (8cc <i2s_config+0x198>)
     82a:	ldr.w	lr, [pc, #184]	; 8e4 <i2s_config+0x1b0>
     82e:	ldr	r6, [r4, #0]
     830:	ldr	r5, [r4, #4]
	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
	if(isMaster)
		I2S0_TCR2 |= (I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]) | I2S_TCR2_MSEL(1));
     832:	ldrb	r7, [r4, #8]
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
     834:	ldr	r4, [pc, #112]	; (8a8 <i2s_config+0x174>)
	// enable MCLK output
	if(isMaster)
	{
		I2S0_MCR = I2S_MCR_MICS(mcr_src)  | I2S_MCR_MOE;
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
     836:	lsls	r6, r6, #12
     838:	ubfx	r5, r5, #0, #12
     83c:	and.w	r6, r6, #1044480	; 0xff000
     840:	orrs	r6, r5
	}

	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     842:	rsb	r5, r3, #1
	// enable MCLK output
	if(isMaster)
	{
		I2S0_MCR = I2S_MCR_MICS(mcr_src)  | I2S_MCR_MOE;
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
     846:	str.w	r6, [lr]
	}

	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     84a:	lsls	r5, r5, #30
     84c:	ldr	r6, [pc, #96]	; (8b0 <i2s_config+0x17c>)
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     84e:	sub.w	lr, lr, #256	; 0x100
		while (I2S0_MCR & I2S_MCR_DUF) ; 
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
     852:	mov.w	ip, #0
     856:	str.w	ip, [r4]
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     85a:	orr.w	r5, r5, #33554432	; 0x2000000
		I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]); 
	}

	// configure transmitter
	I2S0_TMR = 0;
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     85e:	movs	r4, #1
     860:	str.w	r4, [lr]
	I2S0_TCR2 = I2S_TCR2_SYNC((1-sync)) | I2S_TCR2_BCP ; // sync=1; tx is async; rx = sync
     864:	str	r5, [r6, #0]
	if(isMaster)
		I2S0_TCR2 |= (I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]) | I2S_TCR2_MSEL(1));
     866:	ldr	r4, [r6, #0]
     868:	orr.w	r4, r4, #83886080	; 0x5000000
     86c:	orrs	r4, r7
     86e:	str	r4, [r6, #0]
     870:	b.n	77e <i2s_config+0x4a>
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     872:	lsls	r6, r1, #24
     874:	and.w	r6, r6, #520093696	; 0x1f000000
     878:	lsls	r1, r1, #16
     87a:	orrs	r4, r6

	// configure receiver 
	I2S0_RMR = 0;
     87c:	ldr	r7, [pc, #80]	; (8d0 <i2s_config+0x19c>)
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     87e:	ldr.w	lr, [pc, #96]	; 8e0 <i2s_config+0x1ac>

	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
     882:	ldr	r6, [pc, #80]	; (8d4 <i2s_config+0x1a0>)
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     884:	and.w	r1, r1, #2031616	; 0x1f0000
     888:	orrs	r1, r4

	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
     88a:	ldr	r4, [pc, #48]	; (8bc <i2s_config+0x188>)
				| I2S_TCR4_FSE 
				| I2S_TCR4_FSP ;
	if(isMaster)
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));
     88c:	str.w	r1, [lr]

	// configure receiver 
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
     890:	lsls	r3, r3, #30
		I2S0_TCR4 |= I2S_TCR4_FSD;	
	
	I2S0_TCR5 = I2S_TCR5_WNW((nbits-1)) | I2S_TCR5_W0W((nbits-1)) | I2S_TCR5_FBT((nbits-1));

	// configure receiver 
	I2S0_RMR = 0;
     892:	str	r0, [r7, #0]
	I2S0_RCR1 = I2S_RCR1_RFW(1); 
     894:	movs	r7, #1
     896:	str	r7, [r6, #0]
	I2S0_RCR2 = I2S_RCR2_SYNC(sync);// | I2S_RCR2_BCP ; // sync=0; rx is async; tx is sync
     898:	str	r3, [r4, #0]
     89a:	b.n	7f0 <i2s_config+0xbc>
     89c:	.word	0x4002f000
     8a0:	.word	0x4002f080
     8a4:	.word	0x20020508
     8a8:	.word	0x4002f060
     8ac:	.word	0x4002f004
     8b0:	.word	0x4002f008
     8b4:	.word	0x4002f00c
     8b8:	.word	0x4002f010
     8bc:	.word	0x4002f088
     8c0:	.word	0x4002f08c
     8c4:	.word	0x4002f090
     8c8:	.word	0x4002f094
     8cc:	.word	0x2002051c
     8d0:	.word	0x4002f0e0
     8d4:	.word	0x4002f084
     8d8:	.word	0x20020518
     8dc:	.word	0x20020510
     8e0:	.word	0x4002f014
     8e4:	.word	0x4002f104

000008e8 <i2s_configurePorts>:
	I2S0_TDR1:								Pin15(6)
*/

void i2s_configurePorts(int iconf)
{
	if(iconf==1) //pjrc audio or wmxz cs5361 stereo board
     8e8:	cmp	r0, #1
	I2S0_TDR0:								Pin22(6)
	I2S0_TDR1:								Pin15(6)
*/

void i2s_configurePorts(int iconf)
{
     8ea:	push	{r4, r5, r6}
	if(iconf==1) //pjrc audio or wmxz cs5361 stereo board
     8ec:	beq.n	90e <i2s_configurePorts+0x26>
#endif
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif
	}
	else if(iconf==2) // pure rx system no MCLK
     8ee:	cmp	r0, #2
     8f0:	beq.n	8f6 <i2s_configurePorts+0xe>
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif

	}
}
     8f2:	pop	{r4, r5, r6}
     8f4:	bx	lr
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif
	}
	else if(iconf==2) // pure rx system no MCLK
	{
		CORE_PIN11_CONFIG = PORT_PCR_MUX(4); // pin 11, PTC6, I2S0_RX_BCLK
     8f6:	ldr	r4, [pc, #56]	; (930 <i2s_configurePorts+0x48>)
		CORE_PIN12_CONFIG = PORT_PCR_MUX(4); // pin 12, PTC7, I2S0_RX_FS
     8f8:	ldr	r0, [pc, #56]	; (934 <i2s_configurePorts+0x4c>)
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     8fa:	ldr	r1, [pc, #60]	; (938 <i2s_configurePorts+0x50>)
#ifdef __MK20DX256__
		CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11,I2S0_RXD1
#endif
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
     8fc:	ldr	r2, [pc, #60]	; (93c <i2s_configurePorts+0x54>)
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif
	}
	else if(iconf==2) // pure rx system no MCLK
	{
		CORE_PIN11_CONFIG = PORT_PCR_MUX(4); // pin 11, PTC6, I2S0_RX_BCLK
     8fe:	mov.w	r3, #1024	; 0x400
     902:	str	r3, [r4, #0]
		CORE_PIN12_CONFIG = PORT_PCR_MUX(4); // pin 12, PTC7, I2S0_RX_FS
     904:	str	r3, [r0, #0]
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif

	}
}
     906:	pop	{r4, r5, r6}
	}
	else if(iconf==2) // pure rx system no MCLK
	{
		CORE_PIN11_CONFIG = PORT_PCR_MUX(4); // pin 11, PTC6, I2S0_RX_BCLK
		CORE_PIN12_CONFIG = PORT_PCR_MUX(4); // pin 12, PTC7, I2S0_RX_FS
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     908:	str	r3, [r1, #0]
#ifdef __MK20DX256__
		CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11,I2S0_RXD1
#endif
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
     90a:	str	r3, [r2, #0]
#endif

	}
}
     90c:	bx	lr

void i2s_configurePorts(int iconf)
{
	if(iconf==1) //pjrc audio or wmxz cs5361 stereo board
	{
		CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin 9,  PTC3, I2S0_TX_BCLK
     90e:	ldr	r6, [pc, #48]	; (940 <i2s_configurePorts+0x58>)
		CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
     910:	ldr	r5, [pc, #28]	; (930 <i2s_configurePorts+0x48>)
		CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS
     912:	ldr	r4, [pc, #48]	; (944 <i2s_configurePorts+0x5c>)
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     914:	ldr	r0, [pc, #32]	; (938 <i2s_configurePorts+0x50>)
#ifdef __MK20DX256__
		CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11,I2S0_RXD1
#endif
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
     916:	ldr	r1, [pc, #36]	; (93c <i2s_configurePorts+0x54>)

void i2s_configurePorts(int iconf)
{
	if(iconf==1) //pjrc audio or wmxz cs5361 stereo board
	{
		CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin 9,  PTC3, I2S0_TX_BCLK
     918:	mov.w	r3, #1536	; 0x600
		CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
		CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     91c:	mov.w	r2, #1024	; 0x400

void i2s_configurePorts(int iconf)
{
	if(iconf==1) //pjrc audio or wmxz cs5361 stereo board
	{
		CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin 9,  PTC3, I2S0_TX_BCLK
     920:	str	r3, [r6, #0]
		CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
     922:	str	r3, [r5, #0]
		CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS
     924:	str	r3, [r4, #0]
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     926:	str	r2, [r0, #0]
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif

	}
}
     928:	pop	{r4, r5, r6}
		CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
#ifdef __MK20DX256__
		CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11,I2S0_RXD1
#endif
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
     92a:	str	r2, [r1, #0]
#ifdef __MK66FX1M0__
		CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11,I2S0_RXD1
#endif

	}
}
     92c:	bx	lr
     92e:	nop
     930:	.word	0x4004b018
     934:	.word	0x4004b01c
     938:	.word	0x4004b014
     93c:	.word	0x4004b02c
     940:	.word	0x4004b00c
     944:	.word	0x4004b008

00000948 <m_i2s_rx_isr>:

volatile uint32_t rxCount = 0;
void m_i2s_rx_isr(void)
{	uint32_t daddr, taddr;
	//
	rxCount++;
     948:	ldr	r2, [pc, #52]	; (980 <m_i2s_rx_isr+0x38>)

uint32_t i2sDma_getRxError(void) { return *DMA_RX->ES;}

volatile uint32_t rxCount = 0;
void m_i2s_rx_isr(void)
{	uint32_t daddr, taddr;
     94a:	push	{r4, lr}
	//
	rxCount++;
     94c:	ldr	r3, [r2, #0]
//	__disable_irq();
	DMA_clearInterrupt(DMA_RX);
     94e:	ldr	r4, [pc, #52]	; (984 <m_i2s_rx_isr+0x3c>)

volatile uint32_t rxCount = 0;
void m_i2s_rx_isr(void)
{	uint32_t daddr, taddr;
	//
	rxCount++;
     950:	adds	r3, #1
//	__disable_irq();
	DMA_clearInterrupt(DMA_RX);
     952:	ldr	r0, [r4, #0]

volatile uint32_t rxCount = 0;
void m_i2s_rx_isr(void)
{	uint32_t daddr, taddr;
	//
	rxCount++;
     954:	str	r3, [r2, #0]
//	__disable_irq();
	DMA_clearInterrupt(DMA_RX);
     956:	bl	d78 <DMA_clearInterrupt>
	daddr = (uint32_t) DMA_destinationAddress(DMA_RX);
     95a:	ldr	r0, [r4, #0]
     95c:	bl	d10 <DMA_destinationAddress>
	//
	if (daddr < (uint32_t)(&m_i2s_rx_buffer[m_i2s_rx_nbyte/2])) 
     960:	ldr	r3, [pc, #36]	; (988 <m_i2s_rx_isr+0x40>)
     962:	ldr	r2, [pc, #40]	; (98c <m_i2s_rx_isr+0x44>)
     964:	ldr	r3, [r3, #0]
     966:	ldr	r2, [r2, #0]
     968:	add.w	r3, r3, r3, lsr #31
     96c:	add.w	r1, r2, r3, asr #1
#endif
		// need to process data from the first half
		taddr=(uint32_t) &m_i2s_rx_buffer[0];
	}
	//
	i2sInProcessing((void *) &m_i2s_rxContext,(void *) taddr);
     970:	cmp	r0, r1
     972:	it	cs
     974:	movcs	r1, r2
     976:	ldr	r0, [pc, #24]	; (990 <m_i2s_rx_isr+0x48>)
     978:	bl	1650 <i2sInProcessing>
     97c:	pop	{r4, pc}
     97e:	nop
     980:	.word	0x1fff1324
     984:	.word	0x1fff1314
     988:	.word	0x20020504
     98c:	.word	0x20020514
     990:	.word	0x1fff1318

00000994 <i2s_setupInput>:

//#include "usb_serial.h"
//void logg(char c){	usb_serial_putchar(c);	usb_serial_flush_output();}

void i2s_setupInput(void * buffer, int ndat, int port, int prio)
{	// ndat is number of words in (dual) input buffer
     994:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
     998:	ldr	r4, [pc, #260]	; (aa0 <i2s_setupInput+0x10c>)
     99a:	ldr	r4, [r4, #0]
     99c:	cmp	r4, #0
     99e:	blt.n	a52 <i2s_setupInput+0xbe>
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9a0:	ldr.w	fp, [pc, #284]	; ac0 <i2s_setupInput+0x12c>
void i2s_setupInput(void * buffer, int ndat, int port, int prio)
{	// ndat is number of words in (dual) input buffer
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
     9a4:	ldr	r4, [pc, #252]	; (aa4 <i2s_setupInput+0x110>)
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9a6:	ldr.w	r6, [fp]
void i2s_setupInput(void * buffer, int ndat, int port, int prio)
{	// ndat is number of words in (dual) input buffer
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
     9aa:	str	r0, [r4, #0]
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9ac:	mul.w	r7, r1, r6
     9b0:	cmp	r7, #0
     9b2:	ldr	r4, [pc, #244]	; (aa8 <i2s_setupInput+0x114>)

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
     9b4:	ldr.w	sl, [pc, #268]	; ac4 <i2s_setupInput+0x130>
{	// ndat is number of words in (dual) input buffer
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9b8:	it	lt
     9ba:	addlt	r7, #7

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
     9bc:	add.w	r9, r1, r1, lsr #31
{	// ndat is number of words in (dual) input buffer
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9c0:	asrs	r7, r7, #3

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
     9c2:	mov.w	r9, r9, asr #1
     9c6:	mul.w	lr, r9, r6
{	// ndat is number of words in (dual) input buffer
	// if receiver is enabled, do nothing
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;
     9ca:	str	r7, [r4, #0]

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
	
	if(!DMA_RX) DMA_RX=DMA_allocate(port);
     9cc:	ldr	r7, [pc, #220]	; (aac <i2s_setupInput+0x118>)
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
     9ce:	cmp.w	lr, #0
     9d2:	it	lt
     9d4:	addlt.w	lr, lr, #7
     9d8:	mov	r8, r0
	
	if(!DMA_RX) DMA_RX=DMA_allocate(port);
     9da:	ldr	r0, [r7, #0]
     9dc:	mov	r5, r3
	if (I2S0_RCSR & I2S_RCSR_RE) return;
	
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
     9de:	mov.w	r3, lr, asr #3
     9e2:	mov	r4, r1
     9e4:	str.w	r3, [sl]
	
	if(!DMA_RX) DMA_RX=DMA_allocate(port);
     9e8:	cmp	r0, #0
     9ea:	beq.n	a8e <i2s_setupInput+0xfa>
	if(!DMA_RX) return;
	//
	if(m_i2s_dual & I2S_RX_2CH)
     9ec:	ldr	r3, [pc, #192]	; (ab0 <i2s_setupInput+0x11c>)
     9ee:	ldr	r3, [r3, #0]
     9f0:	lsls	r3, r3, #30
     9f2:	bmi.n	a56 <i2s_setupInput+0xc2>
		DMA_destinationBuffer_2ch(DMA_RX, buffer, ndat/2, m_i2s_nbits/8);
		m_i2s_rxContext.nsamp=ndat/2/4; // half buffer/ 4-chan
		m_i2s_rxContext.nchan=4;
	}
	else
	{ 	DMA_source(DMA_RX, (uint32_t *)&I2S0_RDR0, m_i2s_nbits/8);
     9f4:	subs	r2, r6, #0
     9f6:	it	lt
     9f8:	addlt	r2, #7
     9fa:	asrs	r2, r2, #3
     9fc:	ldr	r1, [pc, #180]	; (ab4 <i2s_setupInput+0x120>)
     9fe:	bl	bec <DMA_source>
		DMA_destinationBuffer(DMA_RX, buffer, ndat, m_i2s_nbits/8);
     a02:	ldr.w	r3, [fp]
     a06:	ldr	r0, [r7, #0]
     a08:	cmp	r3, #0
     a0a:	it	lt
     a0c:	addlt	r3, #7
     a0e:	asrs	r3, r3, #3
     a10:	mov	r2, r4
     a12:	mov	r1, r8
     a14:	bl	c54 <DMA_destinationBuffer>
		m_i2s_rxContext.nsamp=ndat/2/2;	// half buffer / 2-chan
     a18:	cmp	r4, #0
     a1a:	it	lt
     a1c:	addlt	r4, #3
     a1e:	asrs	r4, r4, #2
		m_i2s_rxContext.nchan=2;
     a20:	movs	r3, #2
		m_i2s_rxContext.nchan=4;
	}
	else
	{ 	DMA_source(DMA_RX, (uint32_t *)&I2S0_RDR0, m_i2s_nbits/8);
		DMA_destinationBuffer(DMA_RX, buffer, ndat, m_i2s_nbits/8);
		m_i2s_rxContext.nsamp=ndat/2/2;	// half buffer / 2-chan
     a22:	str.w	r4, [sl, #4]
		m_i2s_rxContext.nchan=2;
     a26:	str.w	r3, [sl, #8]
	}
	//
	DMA_interruptAtCompletion(DMA_RX); 
     a2a:	ldr	r0, [r7, #0]
     a2c:	bl	cc0 <DMA_interruptAtCompletion>
	DMA_interruptAtHalf(DMA_RX); 
     a30:	ldr	r0, [r7, #0]
     a32:	bl	ccc <DMA_interruptAtHalf>
	//
	DMA_attachInterrupt(DMA_RX, m_i2s_rx_isr); 
     a36:	ldr	r1, [pc, #128]	; (ab8 <i2s_setupInput+0x124>)
     a38:	ldr	r0, [r7, #0]
     a3a:	bl	d34 <DMA_attachInterrupt>
	DMA_triggerAtHardwareEvent(DMA_RX, DMAMUX_SOURCE_I2S0_RX) ;
     a3e:	ldr	r0, [r7, #0]
     a40:	movs	r1, #12
     a42:	bl	d18 <DMA_triggerAtHardwareEvent>
	if(prio>0) NVIC_SET_PRIORITY(IRQ_I2S0_RX, prio*16); // 8 is normal priority (set in mk20dx128.c)
     a46:	cmp	r5, #0
     a48:	ble.n	a52 <i2s_setupInput+0xbe>
     a4a:	lsls	r5, r5, #4
     a4c:	ldr	r3, [pc, #108]	; (abc <i2s_setupInput+0x128>)
     a4e:	uxtb	r5, r5
     a50:	strb	r5, [r3, #0]
     a52:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	
	if(!DMA_RX) DMA_RX=DMA_allocate(port);
	if(!DMA_RX) return;
	//
	if(m_i2s_dual & I2S_RX_2CH)
	{ 	DMA_source_2ch(DMA_RX, (uint32_t *)&I2S0_RDR0, m_i2s_nbits/8);
     a56:	subs	r2, r6, #0
     a58:	it	lt
     a5a:	addlt	r2, #7
     a5c:	asrs	r2, r2, #3
     a5e:	ldr	r1, [pc, #84]	; (ab4 <i2s_setupInput+0x120>)
     a60:	bl	c1c <DMA_source_2ch>
		DMA_destinationBuffer_2ch(DMA_RX, buffer, ndat/2, m_i2s_nbits/8);
     a64:	ldr.w	r3, [fp]
     a68:	ldr	r0, [r7, #0]
     a6a:	cmp	r3, #0
     a6c:	it	lt
     a6e:	addlt	r3, #7
     a70:	asrs	r3, r3, #3
     a72:	mov	r2, r9
     a74:	mov	r1, r8
     a76:	bl	c88 <DMA_destinationBuffer_2ch>
		m_i2s_rxContext.nsamp=ndat/2/4; // half buffer/ 4-chan
     a7a:	cmp	r4, #0
     a7c:	it	lt
     a7e:	addlt	r4, #7
     a80:	asrs	r4, r4, #3
		m_i2s_rxContext.nchan=4;
     a82:	movs	r3, #4
	if(!DMA_RX) return;
	//
	if(m_i2s_dual & I2S_RX_2CH)
	{ 	DMA_source_2ch(DMA_RX, (uint32_t *)&I2S0_RDR0, m_i2s_nbits/8);
		DMA_destinationBuffer_2ch(DMA_RX, buffer, ndat/2, m_i2s_nbits/8);
		m_i2s_rxContext.nsamp=ndat/2/4; // half buffer/ 4-chan
     a84:	str.w	r4, [sl, #4]
		m_i2s_rxContext.nchan=4;
     a88:	str.w	r3, [sl, #8]
     a8c:	b.n	a2a <i2s_setupInput+0x96>
	m_i2s_rx_buffer=buffer;
	m_i2s_rx_nbyte = ndat*m_i2s_nbits/8;

	m_i2s_rxContext.nbytes=ndat/2*m_i2s_nbits/8;
	
	if(!DMA_RX) DMA_RX=DMA_allocate(port);
     a8e:	mov	r0, r2
     a90:	bl	b3c <DMA_allocate>
     a94:	str	r0, [r7, #0]
	if(!DMA_RX) return;
     a96:	cmp	r0, #0
     a98:	beq.n	a52 <i2s_setupInput+0xbe>
     a9a:	ldr.w	r6, [fp]
     a9e:	b.n	9ec <i2s_setupInput+0x58>
     aa0:	.word	0x4002f080
     aa4:	.word	0x20020514
     aa8:	.word	0x20020504
     aac:	.word	0x1fff1314
     ab0:	.word	0x20020508
     ab4:	.word	0x4002f0a0
     ab8:	.word	0x00000949
     abc:	.word	0xe000e41d
     ac0:	.word	0x20020510
     ac4:	.word	0x1fff1318

00000ac8 <i2s_stopInput>:
	if(DMA_RX) DMA_disable(DMA_RX);
}

void i2s_stopInput(void)
{ //stops Input DMA
	if(DMA_RX) DMA_disable(DMA_RX);
     ac8:	ldr	r3, [pc, #8]	; (ad4 <i2s_stopInput+0xc>)
     aca:	ldr	r0, [r3, #0]
     acc:	cbz	r0, ad2 <i2s_stopInput+0xa>
     ace:	b.w	ce4 <DMA_disable>
     ad2:	bx	lr
     ad4:	.word	0x1fff1314

00000ad8 <i2s_startInput>:
{ //stops Output DMA
	if(DMA_TX) DMA_disable(DMA_TX);
}

void i2s_startInput(void)
{	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     ad8:	ldr	r2, [pc, #8]	; (ae4 <i2s_startInput+0xc>)
     ada:	ldr	r3, [r2, #0]
     adc:	orr.w	r3, r3, #2415919104	; 0x90000000
     ae0:	str	r3, [r2, #0]
     ae2:	bx	lr
     ae4:	.word	0x4002f080

00000ae8 <i2s_enableInputDMA>:
void i2s_startOutput(void)
{	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; 
}

void i2s_enableInputDMA(void)
{	if(!DMA_RX) return;
     ae8:	push	{r3, lr}
     aea:	ldr	r3, [pc, #24]	; (b04 <i2s_enableInputDMA+0x1c>)
     aec:	ldr	r0, [r3, #0]
     aee:	cbz	r0, b02 <i2s_enableInputDMA+0x1a>
	DMA_enable(DMA_RX);
     af0:	bl	cd8 <DMA_enable>
	I2S0_RCSR |= I2S_RCSR_FRDE | I2S_RCSR_FR;
     af4:	ldr	r2, [pc, #16]	; (b08 <i2s_enableInputDMA+0x20>)
     af6:	ldr	r3, [r2, #0]
     af8:	orr.w	r3, r3, #33554432	; 0x2000000
     afc:	orr.w	r3, r3, #1
     b00:	str	r3, [r2, #0]
     b02:	pop	{r3, pc}
     b04:	.word	0x1fff1314
     b08:	.word	0x4002f080

00000b0c <DMA_init>:
static uint16_t dma_channel_allocated_mask = 0;
static DMA_STRUCT DMAS[DMA_NUM_CHANNELS];

void DMA_init(void)
{
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
     b0c:	ldr	r0, [pc, #32]	; (b30 <DMA_init+0x24>)
	SIM_SCGC7 |= SIM_SCGC7_DMA;
     b0e:	ldr	r1, [pc, #36]	; (b34 <DMA_init+0x28>)
static uint16_t dma_channel_allocated_mask = 0;
static DMA_STRUCT DMAS[DMA_NUM_CHANNELS];

void DMA_init(void)
{
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
     b10:	ldr	r2, [r0, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;

//	DMA_CR = DMA_CR_HALT | DMA_CR_EMLM; // fixed priority arbitration
//	DMA_CR |= DMA_CR_ERCA; // enable round robin arbitration  // good idea?
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG;
     b12:	ldr	r3, [pc, #36]	; (b38 <DMA_init+0x2c>)
static uint16_t dma_channel_allocated_mask = 0;
static DMA_STRUCT DMAS[DMA_NUM_CHANNELS];

void DMA_init(void)
{
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
     b14:	orr.w	r2, r2, #2
     b18:	str	r2, [r0, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
     b1a:	ldr	r2, [r1, #0]

//	DMA_CR = DMA_CR_HALT | DMA_CR_EMLM; // fixed priority arbitration
//	DMA_CR |= DMA_CR_ERCA; // enable round robin arbitration  // good idea?
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG;
     b1c:	movs	r0, #130	; 0x82
static DMA_STRUCT DMAS[DMA_NUM_CHANNELS];

void DMA_init(void)
{
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
     b1e:	orr.w	r2, r2, #2
     b22:	str	r2, [r1, #0]

//	DMA_CR = DMA_CR_HALT | DMA_CR_EMLM; // fixed priority arbitration
//	DMA_CR |= DMA_CR_ERCA; // enable round robin arbitration  // good idea?
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG;
     b24:	str	r0, [r3, #0]
#ifdef __MK66FX1M0__
	DMA_CR |= DMA_CR_GRP1PRI;
     b26:	ldr	r2, [r3, #0]
     b28:	orr.w	r2, r2, #1024	; 0x400
     b2c:	str	r2, [r3, #0]
     b2e:	bx	lr
     b30:	.word	0x4004803c
     b34:	.word	0x40048040
     b38:	.word	0x40008000

00000b3c <DMA_allocate>:
} 

static int DMA_getChannel(int prio)
{	int ch;
	//find proper DMA according to its default priority (0 is lowest 15 is highest priority)
	ch= 4*(prio/4)+(3-(prio %4));
     b3c:	ldr	r2, [pc, #152]	; (bd8 <DMA_allocate+0x9c>)
     b3e:	cmp	r0, #0
     b40:	and.w	r2, r2, r0
     b44:	ite	lt
     b46:	addlt	r3, r0, #3
     b48:	movge	r3, r0
     b4a:	cmp	r2, #0
{// 	vectorPrint16((uint16_t*) dma->TCD,sizeof(DMA_TCD)/2,16,1,',');
}

#define DMA_TCD_BASE 0x40009000 
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
     b4c:	push	{r4, r5, r6, r7, lr}
} 

static int DMA_getChannel(int prio)
{	int ch;
	//find proper DMA according to its default priority (0 is lowest 15 is highest priority)
	ch= 4*(prio/4)+(3-(prio %4));
     b4e:	bic.w	r3, r3, #3
     b52:	blt.n	bc8 <DMA_allocate+0x8c>
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
     b54:	ldr	r7, [pc, #132]	; (bdc <DMA_allocate+0xa0>)
} 

static int DMA_getChannel(int prio)
{	int ch;
	//find proper DMA according to its default priority (0 is lowest 15 is highest priority)
	ch= 4*(prio/4)+(3-(prio %4));
     b56:	rsb	r2, r2, #3
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
     b5a:	ldrh	r4, [r7, #0]
} 

static int DMA_getChannel(int prio)
{	int ch;
	//find proper DMA according to its default priority (0 is lowest 15 is highest priority)
	ch= 4*(prio/4)+(3-(prio %4));
     b5c:	add	r3, r2
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
     b5e:	asr.w	r1, r4, r3
     b62:	ands.w	r1, r1, #1
     b66:	bne.n	bd2 <DMA_allocate+0x96>
		return -1; //no channel found
	else
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
     b68:	and.w	r2, r3, #15
     b6c:	add.w	r2, r2, #1073741824	; 0x40000000
     b70:	add.w	r2, r2, #33024	; 0x8100
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
		return -1; //no channel found
	else
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
     b74:	movs	r6, #1
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
	if((*DCHPRI & 0x0F) != prio) return -1;
     b76:	ldrb	r5, [r2, #0]
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
		return -1; //no channel found
	else
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
     b78:	lsls	r6, r3
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
	if((*DCHPRI & 0x0F) != prio) return -1;
     b7a:	and.w	lr, r5, #15
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
		return -1; //no channel found
	else
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
     b7e:	orrs	r4, r6
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
	if((*DCHPRI & 0x0F) != prio) return -1;
     b80:	cmp	r0, lr
	
	//check if already allocated
	if(((dma_channel_allocated_mask & (1<<ch)))) 
		return -1; //no channel found
	else
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
     b82:	strh	r4, [r7, #0]
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
	if((*DCHPRI & 0x0F) != prio) return -1;
     b84:	bne.n	bd2 <DMA_allocate+0x96>

	*DCHPRI |= DMA_DCHPRI_ECP; // allow to be interrupted
     b86:	orn	r5, r5, #127	; 0x7f

#define DMA_TCD_BASE 0x40009000 
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
     b8a:	cmp	r3, #0
		SET_BIT(dma_channel_allocated_mask,(1<<ch));
	
	uint8_t *DCHPRI=(uint8_t *)(DMA_DCHPRI_BASE + (ch & 0x0F));
	if((*DCHPRI & 0x0F) != prio) return -1;

	*DCHPRI |= DMA_DCHPRI_ECP; // allow to be interrupted
     b8c:	strb	r5, [r2, #0]

#define DMA_TCD_BASE 0x40009000 
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
     b8e:	blt.n	bd2 <DMA_allocate+0x96>
	
	DMAS[ch].channel=ch;
     b90:	ldr	r5, [pc, #76]	; (be0 <DMA_allocate+0xa4>)
	DMAS[ch].TCD->DLAST_SGA=0;
	DMAS[ch].TCD->CSR=0;
	DMAS[ch].TCD->BITER=0;
	
	DMAS[ch].ES = (uint32_t *)(0x40008004);
	DMA_CDNE = ch;
     b92:	ldr	r6, [pc, #80]	; (be4 <DMA_allocate+0xa8>)
	DMAS[ch].TCD->CITER=0;
	DMAS[ch].TCD->DLAST_SGA=0;
	DMAS[ch].TCD->CSR=0;
	DMAS[ch].TCD->BITER=0;
	
	DMAS[ch].ES = (uint32_t *)(0x40008004);
     b94:	ldr	r7, [pc, #80]	; (be8 <DMA_allocate+0xac>)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
	
	DMAS[ch].channel=ch;
	DMAS[ch].TCD = (DMA_TCD *)(DMA_TCD_BASE + ch * 32);
     b96:	add.w	r2, r3, #33554432	; 0x2000000
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
	
	DMAS[ch].channel=ch;
     b9a:	lsls	r0, r3, #4
	DMAS[ch].TCD = (DMA_TCD *)(DMA_TCD_BASE + ch * 32);
     b9c:	add.w	r2, r2, #1152	; 0x480
     ba0:	lsls	r2, r2, #5
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
	
	DMAS[ch].channel=ch;
     ba2:	adds	r4, r5, r0
	DMAS[ch].TCD = (DMA_TCD *)(DMA_TCD_BASE + ch * 32);
     ba4:	str	r2, [r5, r0]
	DMAS[ch].TCD->DLAST_SGA=0;
	DMAS[ch].TCD->CSR=0;
	DMAS[ch].TCD->BITER=0;
	
	DMAS[ch].ES = (uint32_t *)(0x40008004);
	DMA_CDNE = ch;
     ba6:	uxtb	r5, r3
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
	
	DMAS[ch].channel=ch;
     ba8:	str	r3, [r4, #8]
	DMAS[ch].TCD = (DMA_TCD *)(DMA_TCD_BASE + ch * 32);
	DMAS[ch].TCD->SADDR=0;
     baa:	str	r1, [r2, #0]
	DMAS[ch].TCD->SOFF=0;
     bac:	strh	r1, [r2, #4]
	DMAS[ch].TCD->ATTR=0;
     bae:	strh	r1, [r2, #6]
	DMAS[ch].TCD->NBYTES=0;
     bb0:	str	r1, [r2, #8]
	DMAS[ch].TCD->SLAST=0;
     bb2:	str	r1, [r2, #12]
	DMAS[ch].TCD->DADDR=0;
     bb4:	str	r1, [r2, #16]
	DMAS[ch].TCD->DOFF=0;
     bb6:	strh	r1, [r2, #20]
	DMAS[ch].TCD->CITER=0;
     bb8:	strh	r1, [r2, #22]
	DMAS[ch].TCD->DLAST_SGA=0;
     bba:	str	r1, [r2, #24]
	DMAS[ch].TCD->CSR=0;
     bbc:	strh	r1, [r2, #28]
	DMAS[ch].TCD->BITER=0;
     bbe:	strh	r1, [r2, #30]
	
	DMAS[ch].ES = (uint32_t *)(0x40008004);
     bc0:	str	r7, [r4, #4]
	DMA_CDNE = ch;
     bc2:	strb	r5, [r6, #0]
	return &DMAS[ch];
     bc4:	mov	r0, r4
     bc6:	pop	{r4, r5, r6, r7, pc}
} 

static int DMA_getChannel(int prio)
{	int ch;
	//find proper DMA according to its default priority (0 is lowest 15 is highest priority)
	ch= 4*(prio/4)+(3-(prio %4));
     bc8:	subs	r2, #1
     bca:	orn	r2, r2, #3
     bce:	adds	r2, #1
     bd0:	b.n	b54 <DMA_allocate+0x18>

#define DMA_TCD_BASE 0x40009000 
DMA_STRUCT *DMA_allocate(int prio)
{	int ch;
	ch=DMA_getChannel(prio);
	if(ch<0) return (DMA_STRUCT *)0;
     bd2:	movs	r0, #0
	DMAS[ch].TCD->BITER=0;
	
	DMAS[ch].ES = (uint32_t *)(0x40008004);
	DMA_CDNE = ch;
	return &DMAS[ch];
}
     bd4:	pop	{r4, r5, r6, r7, pc}
     bd6:	nop
     bd8:	.word	0x80000003
     bdc:	.word	0x1fff1328
     be0:	.word	0x1fff132c
     be4:	.word	0x4000801c
     be8:	.word	0x40008004

00000bec <DMA_source>:
}

void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     bec:	subs	r3, r2, #1
     bee:	cmp	r3, #1
	ch=dma->channel;
	CLEAR_BIT(dma_channel_allocated_mask,(1<<ch));
}

void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;
     bf0:	push	{r4}

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     bf2:	bls.n	bfe <DMA_source+0x12>
     bf4:	cmp	r2, #4
     bf6:	beq.n	bfe <DMA_source+0x12>
	TCD->SADDR = p;
	TCD->SOFF = 0;
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
	TCD->NBYTES = wordsize;
	TCD->SLAST = 0;
}
     bf8:	ldr.w	r4, [sp], #4
     bfc:	bx	lr
	ch=dma->channel;
	CLEAR_BIT(dma_channel_allocated_mask,(1<<ch));
}

void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;
     bfe:	ldr	r3, [r0, #0]

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 0;
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
     c00:	lsls	r4, r2, #7
     c02:	ldrh	r0, [r3, #6]

void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
     c04:	str	r1, [r3, #0]
	TCD->SOFF = 0;
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
     c06:	and.w	r1, r4, #1792	; 0x700
     c0a:	orrs	r1, r0
void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 0;
     c0c:	movs	r0, #0
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
	TCD->NBYTES = wordsize;
     c0e:	str	r2, [r3, #8]
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 0;
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
     c10:	strh	r1, [r3, #6]
void DMA_source(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 0;
     c12:	strh	r0, [r3, #4]
	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2);
	TCD->NBYTES = wordsize;
	TCD->SLAST = 0;
     c14:	str	r0, [r3, #12]
}
     c16:	ldr.w	r4, [sp], #4
     c1a:	bx	lr

00000c1c <DMA_source_2ch>:

void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     c1c:	subs	r3, r2, #1
     c1e:	cmp	r3, #1
	TCD->NBYTES = wordsize;
	TCD->SLAST = 0;
}

void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;
     c20:	push	{r4}

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     c22:	bls.n	c2e <DMA_source_2ch+0x12>
     c24:	cmp	r2, #4
     c26:	beq.n	c2e <DMA_source_2ch+0x12>
//	TCD->SLAST = -8;

	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2) | DMA_TCD_ATTR_SMOD(3);
	TCD->NBYTES = 2*wordsize;
	TCD->SLAST = 0;
}
     c28:	ldr.w	r4, [sp], #4
     c2c:	bx	lr
	TCD->NBYTES = wordsize;
	TCD->SLAST = 0;
}

void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;
     c2e:	ldr	r3, [r0, #0]
//	TCD->NBYTES = DMA_TCD_NBYTES_SMLOE |
//					DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
//					DMA_TCD_NBYTES_MLOFFYES_NBYTES(2*wordsize);
//	TCD->SLAST = -8;

	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2) | DMA_TCD_ATTR_SMOD(3);
     c30:	ldrh	r0, [r3, #6]

void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
     c32:	str	r1, [r3, #0]
//	TCD->NBYTES = DMA_TCD_NBYTES_SMLOE |
//					DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
//					DMA_TCD_NBYTES_MLOFFYES_NBYTES(2*wordsize);
//	TCD->SLAST = -8;

	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2) | DMA_TCD_ATTR_SMOD(3);
     c34:	lsls	r1, r2, #7
     c36:	orr.w	r0, r0, #6144	; 0x1800
     c3a:	and.w	r1, r1, #1792	; 0x700
void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 4;
     c3e:	movs	r4, #4
//	TCD->NBYTES = DMA_TCD_NBYTES_SMLOE |
//					DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
//					DMA_TCD_NBYTES_MLOFFYES_NBYTES(2*wordsize);
//	TCD->SLAST = -8;

	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2) | DMA_TCD_ATTR_SMOD(3);
     c40:	orrs	r1, r0
	TCD->NBYTES = 2*wordsize;
     c42:	lsls	r2, r2, #1
	TCD->SLAST = 0;
     c44:	movs	r0, #0
void DMA_source_2ch(DMA_STRUCT *dma, void *p, unsigned int wordsize)
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->SADDR = p;
	TCD->SOFF = 4;
     c46:	strh	r4, [r3, #4]
//	TCD->NBYTES = DMA_TCD_NBYTES_SMLOE |
//					DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
//					DMA_TCD_NBYTES_MLOFFYES_NBYTES(2*wordsize);
//	TCD->SLAST = -8;

	TCD->ATTR |= DMA_TCD_ATTR_SSIZE(wordsize/2) | DMA_TCD_ATTR_SMOD(3);
     c48:	strh	r1, [r3, #6]
	TCD->NBYTES = 2*wordsize;
     c4a:	str	r2, [r3, #8]
	TCD->SLAST = 0;
     c4c:	str	r0, [r3, #12]
}
     c4e:	ldr.w	r4, [sp], #4
     c52:	bx	lr

00000c54 <DMA_destinationBuffer>:
	TCD->NBYTES = 2*wordsize;
	TCD->DLAST_SGA = 0;
}

void DMA_destinationBuffer(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;
     c54:	push	{r4, r5}

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     c56:	subs	r4, r3, #1
     c58:	cmp	r4, #1
     c5a:	bls.n	c64 <DMA_destinationBuffer+0x10>
     c5c:	cmp	r3, #4
     c5e:	beq.n	c64 <DMA_destinationBuffer+0x10>
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*len; // is in bytes
	TCD->BITER = TCD->CITER = len; // number of major transfers
}
     c60:	pop	{r4, r5}
     c62:	bx	lr
	TCD->NBYTES = 2*wordsize;
	TCD->DLAST_SGA = 0;
}

void DMA_destinationBuffer(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;
     c64:	ldr	r0, [r0, #0]

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     c66:	ldrh	r4, [r0, #6]

void DMA_destinationBuffer(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
     c68:	str	r1, [r0, #16]
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     c6a:	ubfx	r5, r3, #1, #3
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*len; // is in bytes
     c6e:	negs	r1, r3
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     c70:	orrs	r4, r5
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*len; // is in bytes
     c72:	mul.w	r1, r2, r1
	TCD->BITER = TCD->CITER = len; // number of major transfers
     c76:	uxth	r2, r2
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     c78:	strh	r4, [r0, #6]
void DMA_destinationBuffer(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
     c7a:	strh	r3, [r0, #20]
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*len; // is in bytes
     c7c:	str	r1, [r0, #24]
	TCD->BITER = TCD->CITER = len; // number of major transfers
     c7e:	strh	r2, [r0, #22]
     c80:	strh	r2, [r0, #30]
}
     c82:	pop	{r4, r5}
     c84:	bx	lr
     c86:	nop

00000c88 <DMA_destinationBuffer_2ch>:

void DMA_destinationBuffer_2ch(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;
     c88:	push	{r4, r5, r6}

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
     c8a:	subs	r4, r3, #1
     c8c:	cmp	r4, #1
     c8e:	bls.n	c98 <DMA_destinationBuffer_2ch+0x10>
     c90:	cmp	r3, #4
     c92:	beq.n	c98 <DMA_destinationBuffer_2ch+0x10>
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*2*len; // is in bytes, is twice the size of single transfer buffer
	TCD->BITER = TCD->CITER = len; // number of major transfers
}
     c94:	pop	{r4, r5, r6}
     c96:	bx	lr
	TCD->DLAST_SGA = -wordsize*len; // is in bytes
	TCD->BITER = TCD->CITER = len; // number of major transfers
}

void DMA_destinationBuffer_2ch(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;
     c98:	ldr	r0, [r0, #0]
	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*2*len; // is in bytes, is twice the size of single transfer buffer
     c9a:	lsls	r4, r2, #1
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     c9c:	ldrh	r5, [r0, #6]

void DMA_destinationBuffer_2ch(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
     c9e:	str	r1, [r0, #16]
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     ca0:	ubfx	r6, r3, #1, #3
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*2*len; // is in bytes, is twice the size of single transfer buffer
     ca4:	negs	r1, r4
	TCD->BITER = TCD->CITER = len; // number of major transfers
     ca6:	uxth	r2, r2
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     ca8:	orr.w	r4, r6, r5
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*2*len; // is in bytes, is twice the size of single transfer buffer
     cac:	mul.w	r1, r3, r1
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
     cb0:	strh	r4, [r0, #6]
void DMA_destinationBuffer_2ch(DMA_STRUCT *dma, void *p, unsigned int len, unsigned int wordsize) 
{ 	DMA_TCD *TCD=dma->TCD;

	if(!((wordsize==1)||(wordsize==2)||(wordsize==4))) return; // limit to 1,2,4
	TCD->DADDR = p;
	TCD->DOFF = wordsize;
     cb2:	strh	r3, [r0, #20]
	TCD->ATTR |= DMA_TCD_ATTR_DSIZE(wordsize/2);
//	TCD->NBYTES = wordsize;
	TCD->DLAST_SGA = -wordsize*2*len; // is in bytes, is twice the size of single transfer buffer
     cb4:	str	r1, [r0, #24]
	TCD->BITER = TCD->CITER = len; // number of major transfers
     cb6:	strh	r2, [r0, #22]
     cb8:	strh	r2, [r0, #30]
}
     cba:	pop	{r4, r5, r6}
     cbc:	bx	lr
     cbe:	nop

00000cc0 <DMA_interruptAtCompletion>:

	TCD->BITER = TCD->CITER = len; // number of words
}

void DMA_interruptAtCompletion(DMA_STRUCT *dma) 
{ 	DMA_TCD *TCD=dma->TCD;
     cc0:	ldr	r2, [r0, #0]
	TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
     cc2:	ldrh	r3, [r2, #28]
     cc4:	orr.w	r3, r3, #2
     cc8:	strh	r3, [r2, #28]
     cca:	bx	lr

00000ccc <DMA_interruptAtHalf>:
}

void DMA_interruptAtHalf(DMA_STRUCT *dma) 
{ 	DMA_TCD *TCD=dma->TCD;
     ccc:	ldr	r2, [r0, #0]
	TCD->CSR |= DMA_TCD_CSR_INTHALF;
     cce:	ldrh	r3, [r2, #28]
     cd0:	orr.w	r3, r3, #4
     cd4:	strh	r3, [r2, #28]
     cd6:	bx	lr

00000cd8 <DMA_enable>:
	TCD->CSR = DMA_TCD_CSR_START;
}

void DMA_enable(DMA_STRUCT *dma) 
{
	DMA_SERQ = dma->channel;
     cd8:	ldr	r3, [pc, #4]	; (ce0 <DMA_enable+0x8>)
     cda:	ldrb	r2, [r0, #8]
     cdc:	strb	r2, [r3, #0]
     cde:	bx	lr
     ce0:	.word	0x4000801b

00000ce4 <DMA_disable>:
}

void DMA_disable(DMA_STRUCT *dma) 
{
	DMA_CERQ = dma->channel;
     ce4:	ldr	r3, [pc, #4]	; (cec <DMA_disable+0x8>)
     ce6:	ldrb	r2, [r0, #8]
     ce8:	strb	r2, [r3, #0]
     cea:	bx	lr
     cec:	.word	0x4000801a

00000cf0 <DMA_haltAll>:
{ 	DMA_TCD *TCD=dma->TCD;
	TCD->CSR |= DMA_TCD_CSR_DREQ;
}

void DMA_haltAll(void)
{ 	SET_BIT(DMA_CR,DMA_CR_HALT);
     cf0:	ldr	r2, [pc, #8]	; (cfc <DMA_haltAll+0xc>)
     cf2:	ldr	r3, [r2, #0]
     cf4:	orr.w	r3, r3, #32
     cf8:	str	r3, [r2, #0]
     cfa:	bx	lr
     cfc:	.word	0x40008000

00000d00 <DMA_startAll>:
}

void DMA_startAll(void)
{ 	CLEAR_BIT(DMA_CR,DMA_CR_HALT);
     d00:	ldr	r2, [pc, #8]	; (d0c <DMA_startAll+0xc>)
     d02:	ldr	r3, [r2, #0]
     d04:	bic.w	r3, r3, #32
     d08:	str	r3, [r2, #0]
     d0a:	bx	lr
     d0c:	.word	0x40008000

00000d10 <DMA_destinationAddress>:
	return (void *)(TCD->SADDR);
}

void *DMA_destinationAddress(DMA_STRUCT *dma) 
{ 	DMA_TCD *TCD=dma->TCD;
	return (void *)(TCD->DADDR);
     d10:	ldr	r3, [r0, #0]
}
     d12:	ldr	r0, [r3, #16]
     d14:	bx	lr
     d16:	nop

00000d18 <DMA_triggerAtHardwareEvent>:

//=====================================================================================	
void DMA_triggerAtHardwareEvent(DMA_STRUCT *dma, uint8_t source) 
{
	volatile uint8_t *mux;
	mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + dma->channel;  // on T3.6 are 32 DMA entries
     d18:	ldr	r3, [r0, #8]
     d1a:	add.w	r3, r3, #1073741824	; 0x40000000
     d1e:	add.w	r3, r3, #135168	; 0x21000
	*mux = 0;
	*mux = (source & 63) | DMAMUX_ENABLE;
     d22:	and.w	r1, r1, #63	; 0x3f
     d26:	orr.w	r1, r1, #128	; 0x80
//=====================================================================================	
void DMA_triggerAtHardwareEvent(DMA_STRUCT *dma, uint8_t source) 
{
	volatile uint8_t *mux;
	mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + dma->channel;  // on T3.6 are 32 DMA entries
	*mux = 0;
     d2a:	movs	r2, #0
     d2c:	strb	r2, [r3, #0]
	*mux = (source & 63) | DMAMUX_ENABLE;
     d2e:	strb	r1, [r3, #0]
     d30:	bx	lr
     d32:	nop

00000d34 <DMA_attachInterrupt>:
}

//=====================================================================================	
void DMA_attachInterrupt(DMA_STRUCT *dma, void (*isr)(void)) 
{
	_VectorsRam[IRQ_DMA_CH0 + 16 + dma->channel % 16] = isr;	// on T3.6 are only 16 interrupt slots
     d34:	ldr	r2, [r0, #8]
     d36:	ldr	r3, [pc, #56]	; (d70 <DMA_attachInterrupt+0x3c>)
     d38:	ands	r3, r2
     d3a:	cmp	r3, #0
	*mux = (source & 63) | DMAMUX_ENABLE;
}

//=====================================================================================	
void DMA_attachInterrupt(DMA_STRUCT *dma, void (*isr)(void)) 
{
     d3c:	push	{r4, r5}
	_VectorsRam[IRQ_DMA_CH0 + 16 + dma->channel % 16] = isr;	// on T3.6 are only 16 interrupt slots
     d3e:	blt.n	d66 <DMA_attachInterrupt+0x32>
	NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + dma->channel % 16);
     d40:	asrs	r2, r3, #5
     d42:	lsls	r2, r2, #2
     d44:	add.w	r2, r2, #3758096384	; 0xe0000000
}

//=====================================================================================	
void DMA_attachInterrupt(DMA_STRUCT *dma, void (*isr)(void)) 
{
	_VectorsRam[IRQ_DMA_CH0 + 16 + dma->channel % 16] = isr;	// on T3.6 are only 16 interrupt slots
     d48:	add.w	r5, r3, #16
     d4c:	ldr	r4, [pc, #36]	; (d74 <DMA_attachInterrupt+0x40>)
	NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + dma->channel % 16);
     d4e:	add.w	r2, r2, #57600	; 0xe100
     d52:	and.w	r3, r3, #31
     d56:	movs	r0, #1
     d58:	lsl.w	r3, r0, r3
}

//=====================================================================================	
void DMA_attachInterrupt(DMA_STRUCT *dma, void (*isr)(void)) 
{
	_VectorsRam[IRQ_DMA_CH0 + 16 + dma->channel % 16] = isr;	// on T3.6 are only 16 interrupt slots
     d5c:	str.w	r1, [r4, r5, lsl #2]
	NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + dma->channel % 16);
     d60:	str	r3, [r2, #0]
}
     d62:	pop	{r4, r5}
     d64:	bx	lr
}

//=====================================================================================	
void DMA_attachInterrupt(DMA_STRUCT *dma, void (*isr)(void)) 
{
	_VectorsRam[IRQ_DMA_CH0 + 16 + dma->channel % 16] = isr;	// on T3.6 are only 16 interrupt slots
     d66:	subs	r3, #1
     d68:	orn	r3, r3, #15
     d6c:	adds	r3, #1
     d6e:	b.n	d40 <DMA_attachInterrupt+0xc>
     d70:	.word	0x8000000f
     d74:	.word	0x1fff0200

00000d78 <DMA_clearInterrupt>:
	NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + dma->channel % 16);
}

void DMA_clearInterrupt(DMA_STRUCT *dma) 
{
	DMA_CINT = dma->channel;	// on T3.6 CINT has 32 entries
     d78:	ldr	r3, [pc, #4]	; (d80 <DMA_clearInterrupt+0x8>)
     d7a:	ldrb	r2, [r0, #8]
     d7c:	strb	r2, [r3, #0]
     d7e:	bx	lr
     d80:	.word	0x4000801f

00000d84 <llwuISR>:

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     d84:	ldr	r2, [pc, #16]	; (d98 <llwuISR+0x14>)
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     d86:	ldr	r1, [pc, #20]	; (d9c <llwuISR+0x18>)

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     d88:	ldrb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     d8a:	movs	r0, #0

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     d8c:	orr.w	r3, r3, #32
     d90:	strb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     d92:	str	r0, [r1, #0]
     d94:	bx	lr
     d96:	nop
     d98:	.word	0x4007c00d
     d9c:	.word	0x4003d01c

00000da0 <hibernate>:
       asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void hibernate(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
     da0:	push	{r3, r4, r5, r6, r7, lr}
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     da2:	ldr	r4, [pc, #268]	; (eb0 <hibernate+0x110>)
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     da4:	ldr	r2, [pc, #268]	; (eb4 <hibernate+0x114>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     da6:	ldr	r3, [r4, #0]
    RTC_IER = 0;// clear RTC interrupts
}

void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
     da8:	ldr	r1, [pc, #268]	; (eb8 <hibernate+0x118>)
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
     daa:	ldr	r7, [pc, #272]	; (ebc <hibernate+0x11c>)
  LLWU_PE2 = 0;
     dac:	ldr	r6, [pc, #272]	; (ec0 <hibernate+0x120>)
  LLWU_PE3 = 0;
     dae:	ldr	r5, [pc, #276]	; (ec4 <hibernate+0x124>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     db0:	orr.w	r3, r3, #536870912	; 0x20000000
     db4:	str	r3, [r4, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     db6:	ldr	r3, [r2, #0]
     db8:	orr.w	r3, r3, #256	; 0x100
       asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void hibernate(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
     dbc:	mov	r4, r0
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     dbe:	str	r3, [r2, #0]
    RTC_IER = 0;// clear RTC interrupts
}

void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
     dc0:	movs	r0, #21
     dc2:	bl	9858 <attachInterruptVector>
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
     dc6:	ldr	r3, [pc, #256]	; (ec8 <hibernate+0x128>)
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
     dc8:	ldr.w	ip, [pc, #288]	; eec <hibernate+0x14c>
  NVIC_ENABLE_IRQ( IRQ_LLWU );
     dcc:	ldr.w	lr, [pc, #288]	; ef0 <hibernate+0x150>
//
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
     dd0:	ldr	r1, [pc, #248]	; (ecc <hibernate+0x12c>)
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
     dd2:	ldr	r0, [pc, #252]	; (ed0 <hibernate+0x130>)
}

void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
     dd4:	movs	r2, #32
     dd6:	strb	r2, [r3, #0]
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
     dd8:	mov.w	r3, #2097152	; 0x200000
     ddc:	str.w	r3, [ip]
  NVIC_ENABLE_IRQ( IRQ_LLWU );
     de0:	str.w	r3, [lr]
//
  LLWU_PE1 = 0;
     de4:	movs	r3, #0
     de6:	strb	r3, [r7, #0]
  LLWU_PE2 = 0;
     de8:	strb	r3, [r6, #0]
  LLWU_PE3 = 0;
     dea:	strb	r3, [r5, #0]
  LLWU_PE4 = 0;
     dec:	strb	r3, [r1, #0]
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
     dee:	strb	r3, [r0, #0]
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     df0:	sub.w	r0, r0, #217088	; 0x35000
  LLWU_PE2 = 0;
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
  LLWU_PE6 = 0;
     df4:	strb	r3, [r7, #5]
  LLWU_PE7 = 0;
     df6:	strb	r3, [r6, #5]
  LLWU_PE8 = 0;
     df8:	strb	r3, [r5, #5]
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
     dfa:	strb	r2, [r1, #5]
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     dfc:	ldr	r2, [r0, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     dfe:	ldr	r1, [pc, #212]	; (ed4 <hibernate+0x134>)
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
     e00:	ldr.w	ip, [pc, #240]	; ef4 <hibernate+0x154>
    PORTA_PCR1 = PORT_PCR_MUX(0);
     e04:	ldr.w	lr, [pc, #240]	; ef8 <hibernate+0x158>
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     e08:	orr.w	r2, r2, #67108864	; 0x4000000
     e0c:	str	r2, [r0, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     e0e:	ldr	r2, [r1, #0]
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
    PORTA_PCR3 = PORT_PCR_MUX(0);

    PORTB_PCR2 = PORT_PCR_MUX(0);
    PORTB_PCR3 = PORT_PCR_MUX(0);
     e10:	add.w	r0, r0, #12288	; 0x3000
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
     e14:	sub.w	r7, r7, #207872	; 0x32c00
    PORTA_PCR3 = PORT_PCR_MUX(0);
     e18:	sub.w	r6, r6, #207872	; 0x32c00

    PORTB_PCR2 = PORT_PCR_MUX(0);
     e1c:	sub.w	r5, r5, #203776	; 0x31c00
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
     e20:	sub.w	r7, r7, #1016	; 0x3f8
    PORTA_PCR3 = PORT_PCR_MUX(0);
     e24:	subw	r6, r6, #1013	; 0x3f5

    PORTB_PCR2 = PORT_PCR_MUX(0);
     e28:	subw	r5, r5, #1018	; 0x3fa
    PORTB_PCR3 = PORT_PCR_MUX(0);
     e2c:	adds	r0, #8
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     e2e:	orr.w	r2, r2, #1073741824	; 0x40000000
     e32:	str	r2, [r1, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e34:	ldr	r2, [pc, #160]	; (ed8 <hibernate+0x138>)
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
     e36:	str.w	r3, [ip]
    PORTA_PCR1 = PORT_PCR_MUX(0);
     e3a:	str.w	r3, [lr]
    PORTA_PCR2 = PORT_PCR_MUX(0);
     e3e:	str	r3, [r7, #0]
    PORTA_PCR3 = PORT_PCR_MUX(0);
     e40:	str	r3, [r6, #0]

    PORTB_PCR2 = PORT_PCR_MUX(0);
     e42:	str	r3, [r5, #0]
    PORTB_PCR3 = PORT_PCR_MUX(0);
     e44:	str	r3, [r0, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e46:	ldr	r0, [r2, #0]

#define VLLS_MODE VLLS0
void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     e48:	ldr	r5, [pc, #144]	; (edc <hibernate+0x13c>)
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
     e4a:	ldr	r7, [pc, #148]	; (ee0 <hibernate+0x140>)
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e4c:	sub.w	r1, r1, #40704	; 0x9f00
   RTC_IER |= RTC_IER_TAIE_MASK;
     e50:	sub.w	lr, lr, #48896	; 0xbf00
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e54:	subs	r1, #248	; 0xf8
   RTC_IER |= RTC_IER_TAIE_MASK;
     e56:	sub.w	lr, lr, #232	; 0xe8
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e5a:	add	r0, r4
     e5c:	str	r0, [r1, #0]
   RTC_IER |= RTC_IER_TAIE_MASK;
     e5e:	ldr.w	r1, [lr]

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
     e62:	ldr	r4, [pc, #128]	; (ee4 <hibernate+0x144>)
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
     e64:	ldr	r0, [pc, #128]	; (ee8 <hibernate+0x148>)
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
   RTC_IER |= RTC_IER_TAIE_MASK;
     e66:	orr.w	r1, r1, #4
     e6a:	str.w	r1, [lr]

#define VLLS_MODE VLLS0
void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     e6e:	ldrb	r1, [r5, #5]
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     e70:	add.w	r2, r2, #266240	; 0x41000

#define VLLS_MODE VLLS0
void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     e74:	and.w	r1, r1, #223	; 0xdf
     e78:	strb	r1, [r5, #5]
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     e7a:	adds	r2, #1
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
     e7c:	movs	r1, #2
     e7e:	strb	r1, [r7, #0]
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     e80:	ldrb	r1, [r2, #0]
     e82:	and.w	r1, r1, #248	; 0xf8
     e86:	strb	r1, [r2, #0]
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx
     e88:	ldrb	r1, [r2, #0]

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
     e8a:	add.w	r6, r6, #216064	; 0x34c00
     e8e:	addw	r6, r6, #1014	; 0x3f6
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx
     e92:	orr.w	r1, r1, #4
     e96:	strb	r1, [r2, #0]

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
     e98:	strb	r3, [r6, #0]
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;
     e9a:	ldrb	r3, [r2, #0]

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
     e9c:	ldr	r3, [r4, #0]
     e9e:	bic.w	r3, r3, #2
     ea2:	str	r3, [r4, #0]
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
     ea4:	ldr	r3, [r0, #0]
     ea6:	orr.w	r3, r3, #4
     eaa:	str	r3, [r0, #0]
       asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
     eac:	wfi
     eae:	pop	{r3, r4, r5, r6, r7, pc}
     eb0:	.word	0x4004803c
     eb4:	.word	0x4003d010
     eb8:	.word	0x00000d85
     ebc:	.word	0x4007c000
     ec0:	.word	0x4007c001
     ec4:	.word	0x4007c002
     ec8:	.word	0xe000e415
     ecc:	.word	0x4007c003
     ed0:	.word	0x4007c004
     ed4:	.word	0x40047000
     ed8:	.word	0x4003d000
     edc:	.word	0x40064000
     ee0:	.word	0x4007e000
     ee4:	.word	0xe000e010
     ee8:	.word	0xe000ed10
     eec:	.word	0xe000e280
     ef0:	.word	0xe000e100
     ef4:	.word	0x40049000
     ef8:	.word	0x40049004

00000efc <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     efc:	movs	r0, #0
     efe:	bx	lr

00000f00 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     f00:	mov.w	r0, #4294967295
     f04:	bx	lr
     f06:	nop

00000f08 <mySystick_isr()>:
int doHibernate=0;

// to disable EventResponder
// (https://forum.pjrc.com/threads/46442-Minimal-Blink-fails-with-void-yield()?p=153602&viewfull=1#post153602)
extern "C" volatile uint32_t systick_millis_count;
void mySystick_isr(void){ systick_millis_count++;}
     f08:	ldr	r2, [pc, #8]	; (f14 <mySystick_isr()+0xc>)
     f0a:	ldr	r3, [r2, #0]
     f0c:	adds	r3, #1
     f0e:	str	r3, [r2, #0]
     f10:	bx	lr
     f12:	nop
     f14:	.word	0x200203bc

00000f18 <Logger<long, 300, 128, 64>::drain()>:
        return INF;
    }
  }
  
template <typename T, int nq, int nd, int na>
uint8_t * Logger<T,nq,nd,na>:: drain(void)
     f18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  {
    uint16_t n;
    if(head>tail) n=head-tail; else n = nq + head -tail;
     f1c:	add.w	r8, r0, #154624	; 0x25c00
     f20:	ldrh.w	ip, [r8, #200]	; 0xc8
     f24:	ldrh.w	r5, [r8, #202]	; 0xca
     f28:	cmp	ip, r5
     f2a:	itet	ls
     f2c:	addls.w	r3, ip, #300	; 0x12c
     f30:	rsbhi	r3, r5, ip
     f34:	subls	r3, r3, r5
     f36:	uxth	r3, r3

    int16_t nb=na; // na is number of buffers to fetched from queue and written to disk
    if(n>nb)
     f38:	cmp	r3, #64	; 0x40
     f3a:	ble.n	f94 <Logger<long, 300, 128, 64>::drain()+0x7c>
    {
      T *bptr = buffer;
     f3c:	add.w	sl, r8, #208	; 0xd0
     f40:	mov	lr, sl
     f42:	movs	r6, #64	; 0x40
          // copy to buffer     
          { T *src = queue[t];
            if(src)
            { for(int jj=0; jj<nd; jj++) bptr[jj]=src[jj];
              pool.release(t);
              queue[t]=0;
     f44:	mov.w	r9, #0
      T *bptr = buffer;
      //
      uint16_t t = tail;
      while(--nb>=0)
      {
        if (t != head) 
     f48:	cmp	ip, r5
     f4a:	beq.n	f86 <Logger<long, 300, 128, 64>::drain()+0x6e>
        {
          if (++t >= nq) t = 0;
     f4c:	adds	r5, #1
     f4e:	uxth	r5, r5
     f50:	cmp.w	r5, #300	; 0x12c
     f54:	it	cs
     f56:	movcs	r5, #0
     f58:	add.w	r7, r0, r5, lsl #2
          
          // copy to buffer     
          { T *src = queue[t];
     f5c:	add.w	r7, r7, #153600	; 0x25800
     f60:	ldr	r4, [r7, #24]
            if(src)
     f62:	cbz	r4, f7e <Logger<long, 300, 128, 64>::drain()+0x66>
     f64:	subs	r3, r4, #4
     f66:	sub.w	r2, lr, #4
     f6a:	add.w	r4, r4, #508	; 0x1fc
            { for(int jj=0; jj<nd; jj++) bptr[jj]=src[jj];
     f6e:	ldr.w	r1, [r3, #4]!
     f72:	str.w	r1, [r2, #4]!
     f76:	cmp	r4, r3
     f78:	bne.n	f6e <Logger<long, 300, 128, 64>::drain()+0x56>
              pool.release(t);
              queue[t]=0;
     f7a:	str.w	r9, [r7, #24]
            }
          }
          tail = t;
     f7e:	strh.w	r5, [r8, #202]	; 0xca
          bptr += nd;
     f82:	add.w	lr, lr, #512	; 0x200
     f86:	subs	r6, #1
     f88:	uxth	r6, r6
    if(n>nb)
    {
      T *bptr = buffer;
      //
      uint16_t t = tail;
      while(--nb>=0)
     f8a:	cmp	r6, #0
     f8c:	bne.n	f48 <Logger<long, 300, 128, 64>::drain()+0x30>
          }
          tail = t;
          bptr += nd;
        }
      }
      return (uint8_t *)buffer;
     f8e:	mov	r0, sl
    }
    return 0;
  }
     f90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          bptr += nd;
        }
      }
      return (uint8_t *)buffer;
    }
    return 0;
     f94:	movs	r0, #0
     f96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f9a:	nop

00000f9c <Logger<long, 300, 128, 64>::haveFinished()>:
  //
  void clear(void);
  //
  uint8_t *drain(void);
  uint16_t write(void *src);
  void haveFinished(void) {enabled=0;} // got signal from uSD_IF
     f9c:	add.w	r0, r0, #154624	; 0x25c00
     fa0:	movs	r3, #0
     fa2:	strh.w	r3, [r0, #204]	; 0xcc
     fa6:	bx	lr

00000fa8 <c_mFS::~c_mFS()>:
{ struct tm tx=seconds2tm(RTC_TSR);  
  return tx.tm_hour;
}

uint16_t FS_started=0;
class c_mFS
     fa8:	push	{r4, lr}
class FsFile {
#endif  // ENABLE_ARDUINO_FEATURES
 public:
  FsFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsFile() {close();}
     faa:	ldr	r3, [pc, #20]	; (fc0 <c_mFS::~c_mFS()+0x18>)
     fac:	str.w	r3, [r0, #1208]	; 0x4b8
     fb0:	mov	r4, r0
     fb2:	add.w	r0, r0, #1208	; 0x4b8
     fb6:	bl	3118 <FsFile::close()>
     fba:	mov	r0, r4
     fbc:	pop	{r4, pc}
     fbe:	nop
     fc0:	.word	0x000136d8

00000fc4 <FsFile::peek()>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
     fc4:	ldr	r3, [r0, #72]	; 0x48
           m_xFile ? m_xFile->peek() : -1;
     fc6:	cbz	r3, fce <FsFile::peek()+0xa>
     fc8:	mov	r0, r3
     fca:	b.w	5378 <FatFile::peek()>
     fce:	ldr	r0, [r0, #76]	; 0x4c
     fd0:	cbz	r0, fd6 <FsFile::peek()+0x12>
     fd2:	b.w	3574 <ExFatFile::peek()>
  }
     fd6:	mov.w	r0, #4294967295
     fda:	bx	lr

00000fdc <FsFile::flush()>:
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {sync();}
     fdc:	ldr	r3, [r0, #72]	; 0x48
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     fde:	cbz	r3, fe6 <FsFile::flush()+0xa>
     fe0:	mov	r0, r3
     fe2:	b.w	5528 <FatFile::sync()>
     fe6:	ldr	r0, [r0, #76]	; 0x4c
     fe8:	cbz	r0, fee <FsFile::flush()+0x12>
     fea:	b.w	4844 <ExFatFile::sync()>
     fee:	bx	lr

00000ff0 <FsFile::available()>:
  operator bool() {return isOpen();}
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
     ff0:	ldr	r2, [r0, #72]	; 0x48
           m_xFile ? m_xFile->available() : 0;
     ff2:	cbz	r2, 100e <FsFile::available()+0x1e>
  void fsetpos(fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     ff4:	ldrb	r3, [r2, #0]
     ff6:	and.w	r3, r3, #8
     ffa:	and.w	r0, r3, #255	; 0xff
     ffe:	cbz	r3, 1042 <FsFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
    1000:	ldr	r3, [r2, #28]
    1002:	ldr	r0, [r2, #20]
    1004:	subs	r0, r3, r0
    1006:	it	mi
    1008:	mvnmi.w	r0, #2147483648	; 0x80000000
    100c:	bx	lr
    100e:	ldr	r1, [r0, #76]	; 0x4c
    1010:	cbz	r1, 1044 <FsFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
    1012:	ldrb.w	r3, [r1, #49]	; 0x31
    1016:	and.w	r3, r3, #8
    101a:	and.w	r0, r3, #255	; 0xff
    101e:	cbz	r3, 1042 <FsFile::available()+0x52>
    1020:	ldrd	r2, r3, [r1, #16]
    1024:	ldrd	r0, r1, [r1]
    1028:	subs	r0, r2, r0
    */
  operator bool() {return isOpen();}
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    102a:	push	{r4, r5}
    102c:	sbc.w	r1, r3, r1
    1030:	movs	r5, #0
    1032:	mvn.w	r4, #2147483648	; 0x80000000
    1036:	cmp	r5, r1
    1038:	it	eq
    103a:	cmpeq	r4, r0
    103c:	bcs.n	1040 <FsFile::available()+0x50>
    103e:	mov	r0, r4
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
  }
    1040:	pop	{r4, r5}
    1042:	bx	lr
    1044:	mov	r0, r1
    1046:	bx	lr

00001048 <FsFile::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    1048:	push	{lr}
    104a:	ldr	r3, [r0, #72]	; 0x48
    104c:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    104e:	cbz	r3, 106a <FsFile::read()+0x22>
    1050:	mov	r0, r3
    1052:	movs	r2, #1
    1054:	add.w	r1, sp, #7
    1058:	bl	51dc <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    105c:	cmp	r0, #1
    105e:	bne.n	107a <FsFile::read()+0x32>
    1060:	ldrb.w	r0, [sp, #7]
  }
    1064:	add	sp, #12
    1066:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    106a:	ldr	r0, [r0, #76]	; 0x4c
    106c:	cbz	r0, 107a <FsFile::read()+0x32>
    106e:	movs	r2, #1
    1070:	add.w	r1, sp, #7
    1074:	bl	33c8 <ExFatFile::read(void*, unsigned int)>
    1078:	b.n	105c <FsFile::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    107a:	mov.w	r0, #4294967295
    107e:	b.n	1064 <FsFile::read()+0x1c>

00001080 <FsFile::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {return write(&b, 1);}
    1080:	push	{lr}
    1082:	ldr	r3, [r0, #72]	; 0x48
    1084:	sub	sp, #12
    1086:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    108a:	cbz	r3, 109e <FsFile::write(unsigned char)+0x1e>
    108c:	mov	r0, r3
    108e:	movs	r2, #1
    1090:	add.w	r1, sp, #7
    1094:	bl	5658 <FatFile::write(void const*, unsigned int)>
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {return write(&b, 1);}
    1098:	add	sp, #12
    109a:	ldr.w	pc, [sp], #4
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    109e:	ldr	r0, [r0, #76]	; 0x4c
    10a0:	cmp	r0, #0
    10a2:	beq.n	1098 <FsFile::write(unsigned char)+0x18>
    10a4:	movs	r2, #1
    10a6:	add.w	r1, sp, #7
    10aa:	bl	4ba0 <ExFatFile::write(void const*, unsigned int)>
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {return write(&b, 1);}
    10ae:	add	sp, #12
    10b0:	ldr.w	pc, [sp], #4

000010b4 <Logger<long, 300, 128, 64>::write(void*)>:
    }
    tail = t;
  }

template <typename T, int nq, int nd, int na>
uint16_t Logger<T,nq,nd,na>:: write(void *inp)
    10b4:	push	{r4, r5, r6}
  {
    uint16_t h;

    if(!enabled) return 0; // don't do anything
    10b6:	add.w	r6, r0, #154624	; 0x25c00
    10ba:	ldrh.w	r5, [r6, #204]	; 0xcc
    10be:	cbz	r5, 10e2 <Logger<long, 300, 128, 64>::write(void*)+0x2e>
    
    h = head + 1;
    10c0:	ldrh.w	r5, [r6, #200]	; 0xc8
    if (h >= nq) h = 0;
    if (h == tail) {  // disaster
    10c4:	ldrh.w	r3, [r6, #202]	; 0xca
  {
    uint16_t h;

    if(!enabled) return 0; // don't do anything
    
    h = head + 1;
    10c8:	adds	r5, #1
    10ca:	uxth	r5, r5
    if (h >= nq) h = 0;
    10cc:	cmp.w	r5, #300	; 0x12c
    10d0:	it	cs
    10d2:	movcs	r5, #0
    if (h == tail) {  // disaster
    10d4:	cmp	r3, r5
    10d6:	bne.n	10e8 <Logger<long, 300, 128, 64>::write(void*)+0x34>
      overrun++;
    10d8:	ldr	r3, [r0, #4]
    10da:	adds	r3, #1
    10dc:	str	r3, [r0, #4]
      // simply ignore new data
      return INF;
    10de:	movw	r5, #65535	; 0xffff
        return head;
      }
      else
        return INF;
    }
  }
    10e2:	mov	r0, r5
    10e4:	pop	{r4, r5, r6}
    10e6:	bx	lr
      overrun++;
      // simply ignore new data
      return INF;
    } 
    else 
    { queue[h] = pool.fetch(h);
    10e8:	add.w	r3, r5, #38400	; 0x9600
    10ec:	adds	r3, #6
class store
{ T pool[nb*nd];

  public:
  store(void) {;}
  T *fetch(int ii) {return &pool[ii*nd];}
    10ee:	add.w	r2, r0, #24
    10f2:	add.w	r2, r2, r5, lsl #9
      overrun++;
      // simply ignore new data
      return INF;
    } 
    else 
    { queue[h] = pool.fetch(h);
    10f6:	str.w	r2, [r0, r3, lsl #2]
    10fa:	add.w	r4, r1, #508	; 0x1fc
    10fe:	subs	r2, #4
    1100:	subs	r3, r1, #4
      T *ptr = queue[h];
      if(ptr)
      { T *src = (T*) inp;
        for(int ii=0; ii<nd; ii++) ptr[ii]=src[ii];
    1102:	ldr.w	r1, [r3, #4]!
    1106:	str.w	r1, [r2, #4]!
    110a:	cmp	r3, r4
    110c:	bne.n	1102 <Logger<long, 300, 128, 64>::write(void*)+0x4e>
        return head;
      }
      else
        return INF;
    }
  }
    110e:	mov	r0, r5
    { queue[h] = pool.fetch(h);
      T *ptr = queue[h];
      if(ptr)
      { T *src = (T*) inp;
        for(int ii=0; ii<nd; ii++) ptr[ii]=src[ii];
        head = h;
    1110:	strh.w	r5, [r6, #200]	; 0xc8
        return head;
      }
      else
        return INF;
    }
  }
    1114:	pop	{r4, r5, r6}
    1116:	bx	lr

00001118 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1118:	push	{r4, r5, r6, lr}
    111a:	mov	r4, r0
    111c:	mov	r0, r1
    111e:	mov	r5, r1
    1120:	bl	d100 <strlen>
    1124:	ldr	r3, [r4, #0]
    1126:	mov	r2, r0
    1128:	mov	r1, r5
    112a:	mov	r0, r4
    112c:	ldr	r3, [r3, #4]
    112e:	ldmia.w	sp!, {r4, r5, r6, lr}
    1132:	bx	r3

00001134 <Print::println(__FlashStringHelper const*)>:
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1134:	push	{r3, r4, r5, lr}
    1136:	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1138:	mov	r0, r1
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    113a:	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    113c:	bl	d100 <strlen>
    1140:	ldr	r3, [r4, #0]
    1142:	mov	r2, r0
    1144:	mov	r1, r5
    1146:	ldr	r3, [r3, #4]
    1148:	mov	r0, r4
    114a:	blx	r3
    114c:	mov	r5, r0
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    114e:	mov	r0, r4
    1150:	bl	ae6c <Print::println()>
    1154:	add	r0, r5
    1156:	pop	{r3, r4, r5, pc}

00001158 <seconds2tm(unsigned long)>:
  int tm_yday;
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
    1158:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    115c:	ldr	r6, [pc, #788]	; (1474 <seconds2tm(unsigned long)+0x31c>)
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
    115e:	ldr	r3, [pc, #792]	; (1478 <seconds2tm(unsigned long)+0x320>)
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    1160:	ldr	r2, [pc, #792]	; (147c <seconds2tm(unsigned long)+0x324>)
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    1162:	ldr	r7, [pc, #796]	; (1480 <seconds2tm(unsigned long)+0x328>)

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    1164:	ldr	r4, [pc, #796]	; (1484 <seconds2tm(unsigned long)+0x32c>)
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)

  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
  uint32_t days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= tt) year++;
    1166:	ldr.w	ip, [pc, #800]	; 1488 <seconds2tm(unsigned long)+0x330>
    116a:	ldr.w	lr, [pc, #800]	; 148c <seconds2tm(unsigned long)+0x334>

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    116e:	umull	r5, r6, r6, r1
    1172:	lsrs	r6, r6, #16
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
    1174:	umull	r8, r5, r3, r1
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    1178:	add.w	sl, r6, #4

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    117c:	umull	r8, r2, r2, r1
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
    1180:	lsrs	r5, r5, #5
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    1182:	umull	r8, r9, sl, r7

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    1186:	lsrs	r2, r2, #11
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
    1188:	umull	r7, r3, r3, r5
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    118c:	umull	r7, r4, r4, r2
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    1190:	rsb	r7, r9, sl
    1194:	add.w	r7, r9, r7, lsr #1
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
    1198:	lsrs	r3, r3, #5
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    119a:	lsrs	r7, r7, #2

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    119c:	lsrs	r4, r4, #4
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
    119e:	rsb	r3, r3, r3, lsl #4
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11a2:	rsb	r7, r7, r7, lsl #3

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    11a6:	add.w	r8, r4, r4, lsl #1
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11aa:	rsb	r7, r7, sl
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
    11ae:	sub.w	r4, r5, r3, lsl #2
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
    11b2:	rsb	r5, r5, r5, lsl #4
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    11b6:	sub.w	r2, r2, r8, lsl #3
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11ba:	adds	r7, #1
  int tm_isdst;
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
    11bc:	sub.w	r1, r1, r5, lsl #2
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)

  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
  uint32_t days = 0;
    11c0:	movs	r3, #0
*/

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
    11c2:	stmia.w	r0, {r1, r4}
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)
    11c6:	str	r7, [r0, #24]

struct tm seconds2tm(uint32_t tt)
{ struct tm tx;
  tx.tm_sec   = tt % 60;    tt /= 60; // now it is minutes
  tx.tm_min   = tt % 60;    tt /= 60; // now it is hours
  tx.tm_hour  = tt % 24;    tt /= 24; // now it is days
    11c8:	str	r2, [r0, #8]
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)

  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
    11ca:	mov	r4, r3
  uint32_t days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= tt) year++;
    11cc:	movw	r9, #365	; 0x16d
    11d0:	movs	r7, #100	; 0x64
    11d2:	mov.w	r8, #400	; 0x190
    11d6:	b.n	11f4 <seconds2tm(unsigned long)+0x9c>
    11d8:	lsrs	r1, r1, #7
    11da:	mls	r1, r8, r1, r2
    11de:	cmp	r5, #0
    11e0:	bne.n	12bc <seconds2tm(unsigned long)+0x164>
    11e2:	cmp	r1, #0
    11e4:	ite	ne
    11e6:	movne	r2, r9
    11e8:	moveq.w	r2, #366	; 0x16e
    11ec:	add	r3, r2
    11ee:	cmp	r6, r3
    11f0:	bcc.n	1216 <seconds2tm(unsigned long)+0xbe>
    11f2:	adds	r4, #1
    11f4:	addw	r2, r4, #1970	; 0x7b2
    11f8:	umull	r5, r1, lr, r2
    11fc:	lsrs	r5, r1, #5
    11fe:	cmp	r4, ip
    1200:	mls	r5, r7, r5, r2
    1204:	beq.n	120c <seconds2tm(unsigned long)+0xb4>
    1206:	tst.w	r2, #3
    120a:	beq.n	11d8 <seconds2tm(unsigned long)+0x80>
    120c:	movw	r2, #365	; 0x16d
    1210:	add	r3, r2
    1212:	cmp	r6, r3
    1214:	bcs.n	11f2 <seconds2tm(unsigned long)+0x9a>

  tx.tm_year = 1970+year; // year is NOT offset from 1970 

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
    1216:	ldr	r2, [pc, #624]	; (1488 <seconds2tm(unsigned long)+0x330>)
  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
  uint32_t days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= tt) year++;

  tx.tm_year = 1970+year; // year is NOT offset from 1970 
    1218:	addw	r5, r4, #1970	; 0x7b2

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
    121c:	cmp	r4, r2
  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
  uint32_t days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= tt) year++;

  tx.tm_year = 1970+year; // year is NOT offset from 1970 
    121e:	str	r5, [r0, #20]

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
    1220:	beq.w	1358 <seconds2tm(unsigned long)+0x200>
    1224:	ands.w	r7, r5, #3
    1228:	beq.n	12c2 <seconds2tm(unsigned long)+0x16a>
  tt  -= days; // now tt is days in this year, starting at 0
    122a:	mvn.w	r4, #364	; 0x16c
    122e:	add	r3, r4
    1230:	subs	r2, r6, r3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1232:	cmp	r2, #30
    1234:	bls.w	1414 <seconds2tm(unsigned long)+0x2bc>
    tt -= monthLength;
    1238:	sub.w	r3, r2, #31
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    123c:	cmp	r3, #27
    123e:	bls.w	1434 <seconds2tm(unsigned long)+0x2dc>
    tt -= monthLength;
    1242:	sub.w	r3, r2, #59	; 0x3b
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1246:	cmp	r3, #30
    1248:	bls.w	143a <seconds2tm(unsigned long)+0x2e2>
    tt -= monthLength;
    124c:	sub.w	r3, r2, #90	; 0x5a
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1250:	cmp	r3, #29
    1252:	bls.w	1440 <seconds2tm(unsigned long)+0x2e8>
    tt -= monthLength;
    1256:	sub.w	r3, r2, #120	; 0x78
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    125a:	cmp	r3, #30
    125c:	bls.w	1446 <seconds2tm(unsigned long)+0x2ee>
    tt -= monthLength;
    1260:	sub.w	r3, r2, #151	; 0x97
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1264:	cmp	r3, #29
    1266:	bls.w	144c <seconds2tm(unsigned long)+0x2f4>
    tt -= monthLength;
    126a:	sub.w	r3, r2, #181	; 0xb5
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    126e:	cmp	r3, #30
    1270:	bls.w	1452 <seconds2tm(unsigned long)+0x2fa>
    tt -= monthLength;
    1274:	sub.w	r3, r2, #212	; 0xd4
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1278:	cmp	r3, #30
    127a:	bls.w	1458 <seconds2tm(unsigned long)+0x300>
    tt -= monthLength;
    127e:	sub.w	r3, r2, #243	; 0xf3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1282:	cmp	r3, #29
    1284:	bls.w	145e <seconds2tm(unsigned long)+0x306>
    tt -= monthLength;
    1288:	mvn.w	r9, #272	; 0x110
    128c:	add.w	r3, r2, r9
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1290:	cmp	r3, #30
    1292:	bls.w	140c <seconds2tm(unsigned long)+0x2b4>
    tt -= monthLength;
    1296:	sub.w	r3, r2, #304	; 0x130
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    129a:	cmp	r3, #29
    129c:	bls.w	146a <seconds2tm(unsigned long)+0x312>
    tt -= monthLength;
    12a0:	sub.w	r3, r2, #334	; 0x14e
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    12a4:	cmp	r3, #30
    12a6:	bls.w	1464 <seconds2tm(unsigned long)+0x30c>
    tt -= monthLength;
    12aa:	mvn.w	r8, #364	; 0x16c
    12ae:	add	r2, r8
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    12b0:	movs	r1, #13
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    tt -= monthLength;
  }
  tx.tm_mon = mm + 1;   // jan is month 1  
  tx.tm_mday = tt + 1;     // day of month
    12b2:	adds	r6, r2, #1
    12b4:	str	r6, [r0, #12]
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    tt -= monthLength;
  }
  tx.tm_mon = mm + 1;   // jan is month 1  
    12b6:	str	r1, [r0, #16]
  tx.tm_mday = tt + 1;     // day of month
  return tx;
}
    12b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  tx.tm_wday  = ((tt + 4) % 7) + 1;   // Sunday is day 1 (tbv)

  // tt is now days since EPOCH_Year (1970)
  uint32_t year = 0;  
  uint32_t days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= tt) year++;
    12bc:	mov.w	r2, #366	; 0x16e
    12c0:	b.n	11ec <seconds2tm(unsigned long)+0x94>

  tx.tm_year = 1970+year; // year is NOT offset from 1970 

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
    12c2:	ldr	r2, [pc, #456]	; (148c <seconds2tm(unsigned long)+0x334>)
    12c4:	umull	r1, r2, r2, r5
    12c8:	lsrs	r4, r2, #5
    12ca:	movs	r1, #100	; 0x64
    12cc:	mls	r4, r1, r4, r5
    12d0:	lsrs	r2, r2, #7
    12d2:	mov.w	r1, #400	; 0x190
    12d6:	cmp	r4, #0
    12d8:	bne.n	13c8 <seconds2tm(unsigned long)+0x270>
    12da:	mls	r1, r1, r2, r5
    12de:	cmp	r1, #0
    12e0:	bne.w	13f6 <seconds2tm(unsigned long)+0x29e>
  tt  -= days; // now tt is days in this year, starting at 0
    12e4:	sub.w	r3, r3, #366	; 0x16e
    12e8:	subs	r6, r6, r3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    12ea:	cmp	r6, #30
    12ec:	bls.w	1470 <seconds2tm(unsigned long)+0x318>
    tt -= monthLength;
    12f0:	sub.w	r2, r6, #31
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    12f4:	cmp	r2, #28
    12f6:	bls.w	1408 <seconds2tm(unsigned long)+0x2b0>
    tt -= monthLength;
    12fa:	sub.w	r2, r6, #60	; 0x3c
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    12fe:	cmp	r2, #30
    1300:	bls.w	1418 <seconds2tm(unsigned long)+0x2c0>
    tt -= monthLength;
    1304:	sub.w	r2, r6, #91	; 0x5b
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1308:	cmp	r2, #29
    130a:	bls.w	141c <seconds2tm(unsigned long)+0x2c4>
    tt -= monthLength;
    130e:	sub.w	r2, r6, #121	; 0x79
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1312:	cmp	r2, #30
    1314:	bls.w	1428 <seconds2tm(unsigned long)+0x2d0>
    tt -= monthLength;
    1318:	sub.w	r2, r6, #152	; 0x98
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    131c:	cmp	r2, #29
    131e:	bls.n	1420 <seconds2tm(unsigned long)+0x2c8>
    tt -= monthLength;
    1320:	sub.w	r2, r6, #182	; 0xb6
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1324:	cmp	r2, #30
    1326:	bls.n	1424 <seconds2tm(unsigned long)+0x2cc>
    tt -= monthLength;
    1328:	sub.w	r2, r6, #213	; 0xd5
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    132c:	cmp	r2, #30
    132e:	bls.n	1430 <seconds2tm(unsigned long)+0x2d8>
    tt -= monthLength;
    1330:	sub.w	r2, r6, #244	; 0xf4
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1334:	cmp	r2, #29
    1336:	bls.n	142c <seconds2tm(unsigned long)+0x2d4>
    tt -= monthLength;
    1338:	sub.w	r2, r6, #274	; 0x112
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    133c:	cmp	r2, #30
    133e:	bls.n	140e <seconds2tm(unsigned long)+0x2b6>
    tt -= monthLength;
    1340:	mvn.w	r5, #304	; 0x130
    1344:	adds	r2, r6, r5
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1346:	cmp	r2, #29
    1348:	bhi.n	13e0 <seconds2tm(unsigned long)+0x288>
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    134a:	movs	r1, #10
    134c:	adds	r1, #1
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    tt -= monthLength;
  }
  tx.tm_mon = mm + 1;   // jan is month 1  
  tx.tm_mday = tt + 1;     // day of month
    134e:	adds	r6, r2, #1
    1350:	str	r6, [r0, #12]
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    tt -= monthLength;
  }
  tx.tm_mon = mm + 1;   // jan is month 1  
    1352:	str	r1, [r0, #16]
  tx.tm_mday = tt + 1;     // day of month
  return tx;
}
    1354:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  tx.tm_year = 1970+year; // year is NOT offset from 1970 

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
    1358:	mvn.w	r2, #364	; 0x16c
    135c:	add	r3, r2
    135e:	subs	r6, r6, r3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1360:	cmp	r6, #30
    1362:	bls.n	1412 <seconds2tm(unsigned long)+0x2ba>
    tt -= monthLength;
    1364:	sub.w	r2, r6, #31
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1368:	cmp	r2, #27
    136a:	bls.n	1408 <seconds2tm(unsigned long)+0x2b0>
    tt -= monthLength;
    136c:	sub.w	r2, r6, #59	; 0x3b
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1370:	cmp	r2, #30
    1372:	bls.n	1418 <seconds2tm(unsigned long)+0x2c0>
    tt -= monthLength;
    1374:	sub.w	r2, r6, #90	; 0x5a
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1378:	cmp	r2, #29
    137a:	bls.n	141c <seconds2tm(unsigned long)+0x2c4>
    tt -= monthLength;
    137c:	sub.w	r2, r6, #120	; 0x78
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1380:	cmp	r2, #30
    1382:	bls.n	1428 <seconds2tm(unsigned long)+0x2d0>
    tt -= monthLength;
    1384:	sub.w	r2, r6, #151	; 0x97
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1388:	cmp	r2, #29
    138a:	bls.n	1420 <seconds2tm(unsigned long)+0x2c8>
    tt -= monthLength;
    138c:	sub.w	r2, r6, #181	; 0xb5
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1390:	cmp	r2, #30
    1392:	bls.n	1424 <seconds2tm(unsigned long)+0x2cc>
    tt -= monthLength;
    1394:	sub.w	r2, r6, #212	; 0xd4
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1398:	cmp	r2, #30
    139a:	bls.n	1430 <seconds2tm(unsigned long)+0x2d8>
    tt -= monthLength;
    139c:	sub.w	r2, r6, #243	; 0xf3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13a0:	cmp	r2, #29
    13a2:	bls.n	142c <seconds2tm(unsigned long)+0x2d4>
    tt -= monthLength;
    13a4:	mvn.w	ip, #272	; 0x110
    13a8:	add.w	r2, r6, ip
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13ac:	cmp	r2, #30
    13ae:	bls.n	140e <seconds2tm(unsigned long)+0x2b6>
    tt -= monthLength;
    13b0:	sub.w	r2, r6, #304	; 0x130
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13b4:	cmp	r2, #29
    13b6:	bls.n	134a <seconds2tm(unsigned long)+0x1f2>
    tt -= monthLength;
    13b8:	sub.w	r2, r6, #334	; 0x14e
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13bc:	cmp	r2, #30
    13be:	bls.n	13f2 <seconds2tm(unsigned long)+0x29a>
    tt -= monthLength;
    13c0:	mvn.w	r7, #364	; 0x16c
    13c4:	adds	r2, r6, r7
    13c6:	b.n	12b0 <seconds2tm(unsigned long)+0x158>

  tx.tm_year = 1970+year; // year is NOT offset from 1970 

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
    13c8:	sub.w	r3, r3, #366	; 0x16e
    13cc:	mls	r1, r1, r2, r5
    13d0:	subs	r6, r6, r3
    13d2:	cmp	r1, #0
    13d4:	beq.n	12ea <seconds2tm(unsigned long)+0x192>
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13d6:	cmp	r6, #30
    13d8:	bhi.n	12f0 <seconds2tm(unsigned long)+0x198>
    13da:	mov	r2, r6
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    13dc:	mov	r1, r7
    13de:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    tt -= monthLength;
    13e0:	mvn.w	r3, #334	; 0x14e
    13e4:	adds	r2, r6, r3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13e6:	cmp	r2, #30
    tt -= monthLength;
    13e8:	it	hi
    13ea:	subhi.w	r2, r6, #366	; 0x16e
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13ee:	bhi.w	12b0 <seconds2tm(unsigned long)+0x158>
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    13f2:	movs	r1, #11
    13f4:	b.n	134c <seconds2tm(unsigned long)+0x1f4>

  tx.tm_year = 1970+year; // year is NOT offset from 1970 

  // correct for last (actual) year
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
    13f6:	mvn.w	r1, #364	; 0x16c
    13fa:	add	r3, r1
    13fc:	subs	r6, r6, r3
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    13fe:	cmp	r6, #30
    1400:	bhi.n	1364 <seconds2tm(unsigned long)+0x20c>
    1402:	mov	r2, r6
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1404:	mov	r1, r4
    1406:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
    1408:	movs	r1, #1
    140a:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    140c:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    140e:	movs	r1, #9
    1410:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1412:	mov	r2, r6
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1414:	movs	r1, #0
    1416:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
    1418:	movs	r1, #2
    141a:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
    141c:	movs	r1, #3
    141e:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
    1420:	movs	r1, #5
    1422:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
    1424:	movs	r1, #6
    1426:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
    1428:	movs	r1, #4
    142a:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
    142c:	movs	r1, #8
    142e:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
    1430:	movs	r1, #7
    1432:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1434:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1436:	movs	r1, #1
    1438:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    143a:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    143c:	movs	r1, #2
    143e:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1440:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1442:	movs	r1, #3
    1444:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1446:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1448:	movs	r1, #4
    144a:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    144c:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    144e:	movs	r1, #5
    1450:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1452:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1454:	movs	r1, #6
    1456:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1458:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    145a:	movs	r1, #7
    145c:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    145e:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1460:	movs	r1, #8
    1462:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1464:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    1466:	movs	r1, #11
    1468:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    146a:	mov	r2, r3
  days -= (LEAP_YEAR(year) ? 366 : 365);
  tt  -= days; // now tt is days in this year, starting at 0
  
  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<12; mm++) 
    146c:	movs	r1, #10
    146e:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
  { monthLength = monthDays[mm];
    if ((mm==1) & LEAP_YEAR(year)) monthLength++; 
    if (tt<monthLength) break;
    1470:	mov	r2, r6
    1472:	b.n	134c <seconds2tm(unsigned long)+0x1f4>
    1474:	.word	0xc22e4507
    1478:	.word	0x88888889
    147c:	.word	0x91a2b3c5
    1480:	.word	0x24924925
    1484:	.word	0xaaaaaaab
    1488:	.word	0xfffff84e
    148c:	.word	0x51eb851f

00001490 <dateTime(unsigned short*, unsigned short*)>:
  tt+=(days*24*3600);
  return tt;
}

// Call back for file timestamps.  Only called for file create and sync().
void dateTime(uint16_t* date, uint16_t* time) {
    1490:	push	{r4, r5, lr}

  struct tm tx=seconds2tm(RTC_TSR);
    1492:	ldr	r3, [pc, #124]	; (1510 <dateTime(unsigned short*, unsigned short*)+0x80>)
    1494:	ldr	r3, [r3, #0]
  tt+=(days*24*3600);
  return tt;
}

// Call back for file timestamps.  Only called for file create and sync().
void dateTime(uint16_t* date, uint16_t* time) {
    1496:	sub	sp, #44	; 0x2c
    1498:	mov	r5, r0
    149a:	mov	r4, r1

  struct tm tx=seconds2tm(RTC_TSR);
    149c:	add	r0, sp, #4
    149e:	mov	r1, r3
    14a0:	bl	1158 <seconds2tm(unsigned long)>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    14a4:	ldr	r3, [sp, #24]
    
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(tx.tm_year, tx.tm_mon, tx.tm_mday);
    14a6:	ldr	r1, [sp, #20]
    14a8:	ldr	r2, [sp, #16]
    14aa:	subw	r3, r3, #1980	; 0x7bc
    14ae:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    14b0:	cmp	r3, #127	; 0x7f
    14b2:	bhi.n	14ba <dateTime(unsigned short*, unsigned short*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
    14b4:	uxtb	r0, r1
    14b6:	cmp	r0, #12
    14b8:	bls.n	14fa <dateTime(unsigned short*, unsigned short*)+0x6a>
         year << 9 | month << 5 | day;
    14ba:	movs	r3, #0

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(tx.tm_hour, tx.tm_min, tx.tm_sec);
    14bc:	ldr	r0, [sp, #12]
void dateTime(uint16_t* date, uint16_t* time) {

  struct tm tx=seconds2tm(RTC_TSR);
    
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(tx.tm_year, tx.tm_mon, tx.tm_mday);
    14be:	strh	r3, [r5, #0]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    14c0:	uxtb	r3, r0
    14c2:	cmp	r3, #23

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(tx.tm_hour, tx.tm_min, tx.tm_sec);
    14c4:	ldr	r1, [sp, #8]
    14c6:	ldr	r2, [sp, #4]
    14c8:	bhi.n	14f2 <dateTime(unsigned short*, unsigned short*)+0x62>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    14ca:	uxtb	r3, r1
    14cc:	cmp	r3, #59	; 0x3b
    14ce:	bhi.n	14f2 <dateTime(unsigned short*, unsigned short*)+0x62>
    14d0:	uxtb	r3, r2
    14d2:	cmp	r3, #59	; 0x3b
    14d4:	bhi.n	14f2 <dateTime(unsigned short*, unsigned short*)+0x62>
         hour << 11 | minute << 5 | second >> 1;
    14d6:	lsls	r3, r0, #11
    14d8:	lsls	r1, r1, #5
    14da:	and.w	r1, r1, #8160	; 0x1fe0
    14de:	and.w	r3, r3, #522240	; 0x7f800
    14e2:	orrs	r3, r1
    14e4:	ubfx	r2, r2, #1, #7
    14e8:	orrs	r3, r2
    14ea:	uxth	r3, r3
    14ec:	strh	r3, [r4, #0]
}
    14ee:	add	sp, #44	; 0x2c
    14f0:	pop	{r4, r5, pc}
    14f2:	movs	r3, #0
    
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(tx.tm_year, tx.tm_mon, tx.tm_mday);

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(tx.tm_hour, tx.tm_min, tx.tm_sec);
    14f4:	strh	r3, [r4, #0]
}
    14f6:	add	sp, #44	; 0x2c
    14f8:	pop	{r4, r5, pc}
void dateTime(uint16_t* date, uint16_t* time) {

  struct tm tx=seconds2tm(RTC_TSR);
    
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(tx.tm_year, tx.tm_mon, tx.tm_mday);
    14fa:	uxtb	r2, r2
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
    14fc:	cmp	r2, #31
    14fe:	bhi.n	14ba <dateTime(unsigned short*, unsigned short*)+0x2a>
         year << 9 | month << 5 | day;
    1500:	lsls	r1, r1, #5
    1502:	and.w	r1, r1, #8160	; 0x1fe0
    1506:	orrs	r2, r1
    1508:	orr.w	r3, r2, r3, lsl #9
    150c:	uxth	r3, r3
    150e:	b.n	14bc <dateTime(unsigned short*, unsigned short*)+0x2c>
    1510:	.word	0x4003d000

00001514 <tm2seconds(tm*)>:
}

uint32_t tm2seconds (struct tm *tx) 
{
  uint32_t tt;
  tt=tx->tm_sec+tx->tm_min*60+tx->tm_hour*3600;  
    1514:	ldr	r2, [r0, #4]
  // count days size epoch until previous midnight
  uint32_t days=tx->tm_mday-1;

  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<(tx->tm_mon-1); mm++) days+=monthDays[mm]; 
    1516:	ldr	r1, [r0, #16]
{
  uint32_t tt;
  tt=tx->tm_sec+tx->tm_min*60+tx->tm_hour*3600;  

  // count days size epoch until previous midnight
  uint32_t days=tx->tm_mday-1;
    1518:	ldr	r3, [r0, #12]
  tx.tm_mday = tt + 1;     // day of month
  return tx;
}

uint32_t tm2seconds (struct tm *tx) 
{
    151a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tt;
  tt=tx->tm_sec+tx->tm_min*60+tx->tm_hour*3600;  
    151e:	ldr	r4, [r0, #0]
    1520:	ldr	r5, [r0, #8]
    1522:	rsb	r2, r2, r2, lsl #4
    1526:	add.w	r2, r4, r2, lsl #2
    152a:	mov.w	r8, #3600	; 0xe10
    152e:	mla	r8, r8, r5, r2
  // count days size epoch until previous midnight
  uint32_t days=tx->tm_mday-1;

  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<(tx->tm_mon-1); mm++) days+=monthDays[mm]; 
    1532:	subs	r2, r1, #1
{
  uint32_t tt;
  tt=tx->tm_sec+tx->tm_min*60+tx->tm_hour*3600;  

  // count days size epoch until previous midnight
  uint32_t days=tx->tm_mday-1;
    1534:	add.w	r4, r3, #4294967295

  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<(tx->tm_mon-1); mm++) days+=monthDays[mm]; 
    1538:	beq.n	1596 <tm2seconds(tm*)+0x82>
    153a:	cmp	r2, #1
    153c:	add.w	r5, r3, #30
    1540:	beq.n	1614 <tm2seconds(tm*)+0x100>
    1542:	cmp	r2, #2
    1544:	add.w	r5, r3, #58	; 0x3a
    1548:	beq.n	1614 <tm2seconds(tm*)+0x100>
    154a:	cmp	r2, #3
    154c:	add.w	r5, r3, #89	; 0x59
    1550:	beq.n	1614 <tm2seconds(tm*)+0x100>
    1552:	cmp	r2, #4
    1554:	add.w	r5, r3, #119	; 0x77
    1558:	beq.n	1614 <tm2seconds(tm*)+0x100>
    155a:	cmp	r2, #5
    155c:	add.w	r5, r3, #150	; 0x96
    1560:	beq.n	1614 <tm2seconds(tm*)+0x100>
    1562:	cmp	r2, #6
    1564:	add.w	r5, r3, #180	; 0xb4
    1568:	beq.n	1614 <tm2seconds(tm*)+0x100>
    156a:	cmp	r2, #7
    156c:	add.w	r5, r3, #211	; 0xd3
    1570:	beq.n	1614 <tm2seconds(tm*)+0x100>
    1572:	cmp	r2, #8
    1574:	add.w	r5, r3, #242	; 0xf2
    1578:	beq.n	1614 <tm2seconds(tm*)+0x100>
    157a:	cmp	r2, #9
    157c:	add.w	r3, r3, #272	; 0x110
    1580:	beq.n	1618 <tm2seconds(tm*)+0x104>
    1582:	cmp	r2, #10
    1584:	add.w	r3, r4, #304	; 0x130
    1588:	beq.n	1618 <tm2seconds(tm*)+0x104>
    158a:	cmp	r2, #11
    158c:	add.w	r3, r4, #334	; 0x14e
    1590:	beq.n	1618 <tm2seconds(tm*)+0x104>
    1592:	addw	r4, r4, #365	; 0x16d
  if(tx->tm_mon>2 && LEAP_YEAR(tx->tm_year-1970)) days++;
    1596:	cmp	r1, #2
    1598:	ldr	r6, [r0, #20]
    159a:	ble.n	15a4 <tm2seconds(tm*)+0x90>
    159c:	cmp	r6, #0
    159e:	ble.n	15a4 <tm2seconds(tm*)+0x90>
    15a0:	lsls	r2, r6, #30
    15a2:	beq.n	161c <tm2seconds(tm*)+0x108>

  uint32_t years=0;
  while(years++ < (tx->tm_year-1970)) days += (LEAP_YEAR(years) ? 366 : 365);
    15a4:	movw	r3, #1970	; 0x7b2
    15a8:	cmp	r6, r3
    15aa:	beq.n	1604 <tm2seconds(tm*)+0xf0>
    15ac:	mvn.w	r3, #1968	; 0x7b0
    15b0:	add	r6, r3
    15b2:	ldr	r7, [pc, #144]	; (1644 <tm2seconds(tm*)+0x130>)
    15b4:	ldr	r0, [pc, #144]	; (1648 <tm2seconds(tm*)+0x134>)
    15b6:	movs	r3, #1
    15b8:	movw	r9, #365	; 0x16d
    15bc:	mov.w	lr, #100	; 0x64
    15c0:	mov.w	ip, #400	; 0x190
    15c4:	b.n	15e0 <tm2seconds(tm*)+0xcc>
    15c6:	lsrs	r1, r1, #7
    15c8:	mls	r1, ip, r1, r2
    15cc:	cbnz	r5, 160e <tm2seconds(tm*)+0xfa>
    15ce:	cmp	r1, #0
    15d0:	ite	ne
    15d2:	movne	r2, r9
    15d4:	moveq.w	r2, #366	; 0x16e
    15d8:	adds	r3, #1
    15da:	cmp	r3, r6
    15dc:	add	r4, r2
    15de:	beq.n	1604 <tm2seconds(tm*)+0xf0>
    15e0:	cmp	r3, r7
    15e2:	addw	r2, r3, #1970	; 0x7b2
    15e6:	beq.n	15f8 <tm2seconds(tm*)+0xe4>
    15e8:	umull	r5, r1, r0, r2
    15ec:	lsrs	r5, r1, #5
    15ee:	tst.w	r2, #3
    15f2:	mls	r5, lr, r5, r2
    15f6:	beq.n	15c6 <tm2seconds(tm*)+0xb2>
    15f8:	adds	r3, #1
    15fa:	movw	r2, #365	; 0x16d
    15fe:	cmp	r3, r6
    1600:	add	r4, r2
    1602:	bne.n	15e0 <tm2seconds(tm*)+0xcc>
  //  
  tt+=(days*24*3600);
  return tt;
    1604:	ldr	r0, [pc, #68]	; (164c <tm2seconds(tm*)+0x138>)
}
    1606:	mla	r0, r0, r4, r8
    160a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  uint32_t monthLength=0;
  for (mm=0; mm<(tx->tm_mon-1); mm++) days+=monthDays[mm]; 
  if(tx->tm_mon>2 && LEAP_YEAR(tx->tm_year-1970)) days++;

  uint32_t years=0;
  while(years++ < (tx->tm_year-1970)) days += (LEAP_YEAR(years) ? 366 : 365);
    160e:	mov.w	r2, #366	; 0x16e
    1612:	b.n	15d8 <tm2seconds(tm*)+0xc4>
  // count days size epoch until previous midnight
  uint32_t days=tx->tm_mday-1;

  uint32_t mm=0;
  uint32_t monthLength=0;
  for (mm=0; mm<(tx->tm_mon-1); mm++) days+=monthDays[mm]; 
    1614:	mov	r4, r5
    1616:	b.n	1596 <tm2seconds(tm*)+0x82>
    1618:	mov	r4, r3
    161a:	b.n	1596 <tm2seconds(tm*)+0x82>
  if(tx->tm_mon>2 && LEAP_YEAR(tx->tm_year-1970)) days++;
    161c:	ldr	r2, [pc, #40]	; (1648 <tm2seconds(tm*)+0x134>)
    161e:	asrs	r3, r6, #31
    1620:	smull	r1, r2, r2, r6
    1624:	rsb	r1, r3, r2, asr #5
    1628:	movs	r0, #100	; 0x64
    162a:	mls	r1, r0, r1, r6
    162e:	cbnz	r1, 1640 <tm2seconds(tm*)+0x12c>
    1630:	rsb	r3, r3, r2, asr #7
    1634:	mov.w	r2, #400	; 0x190
    1638:	mls	r3, r2, r3, r6
    163c:	cmp	r3, #0
    163e:	bne.n	15a4 <tm2seconds(tm*)+0x90>
    1640:	adds	r4, #1
    1642:	b.n	15a4 <tm2seconds(tm*)+0x90>
    1644:	.word	0xfffff84e
    1648:	.word	0x51eb851f
    164c:	.word	0x00015180

00001650 <i2sInProcessing>:
/************************Process specific code ********************************/
void i2sInProcessing(void * s, void * d)
{
	static uint16_t is_I2S=0;

	i2sProcCount++;
    1650:	ldr	r2, [pc, #156]	; (16f0 <i2sInProcessing+0xa0>)



/************************Process specific code ********************************/
void i2sInProcessing(void * s, void * d)
{
    1652:	push	{r3, r4, r5, r6, r7, lr}
	static uint16_t is_I2S=0;

	i2sProcCount++;
	if(is_I2S) {i2sBusyCount++; return;}
    1654:	ldr	r4, [pc, #156]	; (16f4 <i2sInProcessing+0xa4>)
/************************Process specific code ********************************/
void i2sInProcessing(void * s, void * d)
{
	static uint16_t is_I2S=0;

	i2sProcCount++;
    1656:	ldr	r3, [r2, #0]
	if(is_I2S) {i2sBusyCount++; return;}
    1658:	ldrh	r0, [r4, #0]
/************************Process specific code ********************************/
void i2sInProcessing(void * s, void * d)
{
	static uint16_t is_I2S=0;

	i2sProcCount++;
    165a:	adds	r3, #1
    165c:	str	r3, [r2, #0]
	if(is_I2S) {i2sBusyCount++; return;}
    165e:	cbnz	r0, 1698 <i2sInProcessing+0x48>
	is_I2S=1;
    1660:	movs	r3, #1
    1662:	strh	r3, [r4, #0]
    1664:	add.w	r0, r1, #1020	; 0x3fc
    1668:	subs	r3, r1, #4
	int32_t *src = (int32_t *) d;

	// for ICS43432 need first shift left to get correct MSB
	// shift 8bit to right to get data-LSB to bit 0
  #ifdef MSB_CORRECTION
  	for(int ii=0; ii<I2S_CHAN*N_SAMP;ii++) { src[ii]<<=1; src[ii]>>=8;}
    166a:	ldr.w	r2, [r3, #4]!
    166e:	sbfx	r2, r2, #7, #24
    1672:	cmp	r3, r0
    1674:	str	r2, [r3, #0]
    1676:	bne.n	166a <i2sInProcessing+0x1a>
    1678:	ldr	r2, [pc, #124]	; (16f8 <i2sInProcessing+0xa8>)
    167a:	movs	r3, #0
  #endif

	#ifdef DO_LOGGER
    #if N_CHAN==1
      DATA_T *logData = data1; 
      for(int ii=0; ii< N_SAMP; ii++) logData[ii]=src[ICH+2*ii];
    167c:	ldr.w	r0, [r1, r3, lsl #3]
    1680:	str.w	r0, [r2, #4]!
    1684:	adds	r3, #1
    1686:	cmp	r3, #128	; 0x80
    1688:	bne.n	167c <i2sInProcessing+0x2c>
template <typename T, int nq, int nd, int na>
uint16_t Logger<T,nq,nd,na>:: write(void *inp)
  {
    uint16_t h;

    if(!enabled) return 0; // don't do anything
    168a:	ldr	r5, [pc, #112]	; (16fc <i2sInProcessing+0xac>)
    168c:	ldrh.w	r3, [r5, #204]	; 0xcc
    1690:	cbnz	r3, 16a2 <i2sInProcessing+0x52>
	#ifdef DO_USB_AUDIO
    mExtract(dst16,src,ICS_CHAN*N_SAMP);
		usbAudio_write(dst16,N_SAMP);
	#endif

  is_I2S=0;
    1692:	movs	r3, #0
    1694:	strh	r3, [r4, #0]
    1696:	pop	{r3, r4, r5, r6, r7, pc}
void i2sInProcessing(void * s, void * d)
{
	static uint16_t is_I2S=0;

	i2sProcCount++;
	if(is_I2S) {i2sBusyCount++; return;}
    1698:	ldr	r2, [pc, #100]	; (1700 <i2sInProcessing+0xb0>)
    169a:	ldr	r3, [r2, #0]
    169c:	adds	r3, #1
    169e:	str	r3, [r2, #0]
    16a0:	pop	{r3, r4, r5, r6, r7, pc}
    
    h = head + 1;
    16a2:	ldrh.w	r6, [r5, #200]	; 0xc8
    if (h >= nq) h = 0;
    if (h == tail) {  // disaster
    16a6:	ldrh.w	r2, [r5, #202]	; 0xca
  {
    uint16_t h;

    if(!enabled) return 0; // don't do anything
    
    h = head + 1;
    16aa:	adds	r6, #1
    16ac:	uxth	r6, r6
    if (h >= nq) h = 0;
    16ae:	cmp.w	r6, #300	; 0x12c
    16b2:	it	cs
    16b4:	movcs	r6, #0
    if (h == tail) {  // disaster
    16b6:	cmp	r2, r6
    16b8:	sub.w	r3, r5, #154624	; 0x25c00
    16bc:	beq.n	16e8 <i2sInProcessing+0x98>
class store
{ T pool[nb*nd];

  public:
  store(void) {;}
  T *fetch(int ii) {return &pool[ii*nd];}
    16be:	lsls	r2, r6, #9
      overrun++;
      // simply ignore new data
      return INF;
    } 
    else 
    { queue[h] = pool.fetch(h);
    16c0:	add.w	r1, r6, #38400	; 0x9600
class store
{ T pool[nb*nd];

  public:
  store(void) {;}
  T *fetch(int ii) {return &pool[ii*nd];}
    16c4:	adds	r7, r3, r2
      overrun++;
      // simply ignore new data
      return INF;
    } 
    else 
    { queue[h] = pool.fetch(h);
    16c6:	adds	r1, #6
    16c8:	add.w	r0, r2, #24
class store
{ T pool[nb*nd];

  public:
  store(void) {;}
  T *fetch(int ii) {return &pool[ii*nd];}
    16cc:	adds	r7, #24
      overrun++;
      // simply ignore new data
      return INF;
    } 
    else 
    { queue[h] = pool.fetch(h);
    16ce:	str.w	r7, [r3, r1, lsl #2]
    16d2:	add	r0, r3
    16d4:	mov.w	r2, #512	; 0x200
    16d8:	ldr	r1, [pc, #40]	; (1704 <i2sInProcessing+0xb4>)
    16da:	bl	9324 <memcpy>
	#ifdef DO_USB_AUDIO
    mExtract(dst16,src,ICS_CHAN*N_SAMP);
		usbAudio_write(dst16,N_SAMP);
	#endif

  is_I2S=0;
    16de:	movs	r3, #0
      T *ptr = queue[h];
      if(ptr)
      { T *src = (T*) inp;
        for(int ii=0; ii<nd; ii++) ptr[ii]=src[ii];
        head = h;
    16e0:	strh.w	r6, [r5, #200]	; 0xc8
    16e4:	strh	r3, [r4, #0]
    16e6:	pop	{r3, r4, r5, r6, r7, pc}
    if(!enabled) return 0; // don't do anything
    
    h = head + 1;
    if (h >= nq) h = 0;
    if (h == tail) {  // disaster
      overrun++;
    16e8:	ldr	r2, [r3, #4]
    16ea:	adds	r2, #1
    16ec:	str	r2, [r3, #4]
    16ee:	b.n	1692 <i2sInProcessing+0x42>
    16f0:	.word	0x1fff1734
    16f4:	.word	0x1fff247e
    16f8:	.word	0x20020154
    16fc:	.word	0x20018080
    1700:	.word	0x1fff1730
    1704:	.word	0x20020158

00001708 <yield>:

// to disable EventResponder
// (https://forum.pjrc.com/threads/46442-Minimal-Blink-fails-with-void-yield()?p=153602&viewfull=1#post153602)
extern "C" volatile uint32_t systick_millis_count;
void mySystick_isr(void){ systick_millis_count++;}
void yield(void){}
    1708:	bx	lr
    170a:	nop

0000170c <check_hibernate(parameters_s*, int)>:
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
}

void check_hibernate( parameters_s *par, int flag)
{
    170c:	push	{r4, r5, r6, r7, lr}
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    170e:	ldr	r3, [pc, #288]	; (1830 <check_hibernate(parameters_s*, int)+0x124>)
    1710:	ldr	r6, [r3, #0]
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
}

void check_hibernate( parameters_s *par, int flag)
{
    1712:	sub	sp, #44	; 0x2c
    1714:	mov	r4, r0
    1716:	mov	r7, r1
  uint32_t tt=getRTC();
  struct tm tx=seconds2tm(tt);
    1718:	add	r0, sp, #4
    171a:	mov	r1, r6
    171c:	bl	1158 <seconds2tm(unsigned long)>
  uint16_t to = tx.tm_hour;
  
  // check if we should sleep longer
  uint16_t doRecording=1;
  doRecording = check_time(to,par->first_hour, par->second_hour) ||
    1720:	ldrh	r1, [r4, #4]
    1722:	ldrh	r3, [r4, #6]

void check_hibernate( parameters_s *par, int flag)
{
  uint32_t tt=getRTC();
  struct tm tx=seconds2tm(tt);
  uint16_t to = tx.tm_hour;
    1724:	ldrh.w	r2, [sp, #12]
  uint16_t last_hour;

 */
inline uint16_t check_time(uint16_t to, uint16_t t1, uint16_t t2)
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
    1728:	cmp	r1, r3
    172a:	bcs.n	17b8 <check_hibernate(parameters_s*, int)+0xac>
    172c:	cmp	r2, r1
    172e:	bcc.n	1742 <check_hibernate(parameters_s*, int)+0x36>
    1730:	cmp	r2, r3
    1732:	ite	cs
    1734:	movcs	r0, #0
    1736:	movcc	r0, #1
  struct tm tx=seconds2tm(tt);
  uint16_t to = tx.tm_hour;
  
  // check if we should sleep longer
  uint16_t doRecording=1;
  doRecording = check_time(to,par->first_hour, par->second_hour) ||
    1738:	cbz	r0, 1742 <check_hibernate(parameters_s*, int)+0x36>
                check_time(to,par->third_hour, par->last_hour);
  
  int32_t dto=0, dt=0, t1;
  if(doRecording)
  { if(flag)
    173a:	cmp	r7, #0
    173c:	bne.n	17c0 <check_hibernate(parameters_s*, int)+0xb4>
//    while(!Serial);  Serial.printf("%d %d %d %d\n\r",dto,t1,tx,dt); Serial.flush();  delay(10000);
    
    go_hibernate(dt);
#endif
  }
}
    173e:	add	sp, #44	; 0x2c
    1740:	pop	{r4, r5, r6, r7, pc}
  uint16_t to = tx.tm_hour;
  
  // check if we should sleep longer
  uint16_t doRecording=1;
  doRecording = check_time(to,par->first_hour, par->second_hour) ||
                check_time(to,par->third_hour, par->last_hour);
    1742:	ldrh	r0, [r4, #8]
    1744:	ldrh	r5, [r4, #10]
  uint16_t last_hour;

 */
inline uint16_t check_time(uint16_t to, uint16_t t1, uint16_t t2)
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
    1746:	cmp	r0, r5
    1748:	bcs.n	17f8 <check_hibernate(parameters_s*, int)+0xec>
    174a:	cmp	r2, r0
    174c:	bcs.n	17fc <check_hibernate(parameters_s*, int)+0xf0>
    174e:	cmp	r1, r5
    1750:	bls.n	1812 <check_hibernate(parameters_s*, int)+0x106>
    1752:	cmp	r2, r5
    1754:	bcs.n	181c <check_hibernate(parameters_s*, int)+0x110>
      dto=(par->first_hour - par->last_hour);
      t1=par->last_hour;
    }
    else // is in middle sleep period
    {
      dto=(par->third_hour - par->second_hour);
    1756:	subs	r1, r0, r3
    int32_t tx =tt % (24*3600); // seconds of day
    
    dt = dto - ((tx-t1 +24*3600) % (24*3600));
//    while(!Serial);  Serial.printf("%d %d %d %d\n\r",dto,t1,tx,dt); Serial.flush();  delay(10000);
    
    go_hibernate(dt);
    1758:	ldr	r7, [pc, #216]	; (1834 <check_hibernate(parameters_s*, int)+0x128>)
    175a:	ldr	r5, [pc, #220]	; (1838 <check_hibernate(parameters_s*, int)+0x12c>)
			} else if (pin == 21) {
				CORE_PIN21_PORTCLEAR = CORE_PIN21_BITMASK;
			} else if (pin == 22) {
				CORE_PIN22_PORTCLEAR = CORE_PIN22_BITMASK;
			} else if (pin == 23) {
				CORE_PIN23_PORTCLEAR = CORE_PIN23_BITMASK;
    175c:	ldr	r4, [pc, #220]	; (183c <check_hibernate(parameters_s*, int)+0x130>)
    175e:	umull	r0, r2, r7, r6
    1762:	lsrs	r2, r2, #16
    1764:	mls	r6, r5, r2, r6
    1768:	mov.w	r0, #3600	; 0xe10
    176c:	mls	r3, r0, r3, r6
    1770:	add.w	r3, r3, #86016	; 0x15000
    1774:	add.w	r3, r3, #384	; 0x180
    1778:	smull	r6, r7, r3, r7
    else // is in middle sleep period
    {
      dto=(par->third_hour - par->second_hour);
      t1=par->second_hour;
    }
    if(dto<0) dto += 24;
    177c:	cmp	r1, #0
    int32_t tx =tt % (24*3600); // seconds of day
    
    dt = dto - ((tx-t1 +24*3600) % (24*3600));
//    while(!Serial);  Serial.printf("%d %d %d %d\n\r",dto,t1,tx,dt); Serial.flush();  delay(10000);
    
    go_hibernate(dt);
    177e:	add.w	r6, r3, r7
    1782:	mov.w	r2, r3, asr #31
    1786:	rsb	r2, r2, r6, asr #16
    else // is in middle sleep period
    {
      dto=(par->third_hour - par->second_hour);
      t1=par->second_hour;
    }
    if(dto<0) dto += 24;
    178a:	it	lt
    178c:	addlt	r1, #24
    int32_t tx =tt % (24*3600); // seconds of day
    
    dt = dto - ((tx-t1 +24*3600) % (24*3600));
//    while(!Serial);  Serial.printf("%d %d %d %d\n\r",dto,t1,tx,dt); Serial.flush();  delay(10000);
    
    go_hibernate(dt);
    178e:	mls	r3, r5, r2, r3
    1792:	mul.w	r1, r0, r1
    1796:	movs	r2, #4
    1798:	str	r2, [r4, #0]
    179a:	subs	r5, r1, r3
 */
#include "hibernate.h"

void go_hibernate(uint32_t seconds)
{ digitalWriteFast(23,LOW); // turn sensor an micro OFF 
  for(int ii=0;ii<24;ii++) pinMode(ii,INPUT);   
    179c:	movs	r4, #0
    179e:	uxtb	r0, r4
    17a0:	movs	r1, #0
    17a2:	adds	r4, #1
    17a4:	bl	9b48 <pinMode>
    17a8:	cmp	r4, #24
    17aa:	bne.n	179e <check_hibernate(parameters_s*, int)+0x92>
  hibernate(seconds);
    17ac:	mov	r0, r5
//    while(!Serial);  Serial.printf("%d %d %d %d\n\r",dto,t1,tx,dt); Serial.flush();  delay(10000);
    
    go_hibernate(dt);
#endif
  }
}
    17ae:	add	sp, #44	; 0x2c
    17b0:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#include "hibernate.h"

void go_hibernate(uint32_t seconds)
{ digitalWriteFast(23,LOW); // turn sensor an micro OFF 
  for(int ii=0;ii<24;ii++) pinMode(ii,INPUT);   
  hibernate(seconds);
    17b4:	b.w	da0 <hibernate>
  uint16_t last_hour;

 */
inline uint16_t check_time(uint16_t to, uint16_t t1, uint16_t t2)
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
    17b8:	cmp	r2, r1
    17ba:	bcc.n	1730 <check_hibernate(parameters_s*, int)+0x24>
  doRecording = check_time(to,par->first_hour, par->second_hour) ||
                check_time(to,par->third_hour, par->last_hour);
  
  int32_t dto=0, dt=0, t1;
  if(doRecording)
  { if(flag)
    17bc:	cmp	r7, #0
    17be:	beq.n	173e <check_hibernate(parameters_s*, int)+0x32>
    {
      dto = (par->on_time + par->off_time)*60;
      dt = dto - (tt % dto);
    17c0:	ldrh	r1, [r4, #0]
    17c2:	ldrh	r3, [r4, #2]
    17c4:	ldr	r2, [pc, #116]	; (183c <check_hibernate(parameters_s*, int)+0x130>)
    17c6:	add	r3, r1
    17c8:	rsb	r3, r3, r3, lsl #4
    17cc:	lsls	r3, r3, #2
    17ce:	movs	r1, #4
    17d0:	udiv	r5, r6, r3
    17d4:	mls	r5, r3, r5, r6
    17d8:	subs	r5, r3, r5
    17da:	str	r1, [r2, #0]
 */
#include "hibernate.h"

void go_hibernate(uint32_t seconds)
{ digitalWriteFast(23,LOW); // turn sensor an micro OFF 
  for(int ii=0;ii<24;ii++) pinMode(ii,INPUT);   
    17dc:	movs	r4, #0
    17de:	uxtb	r0, r4
    17e0:	movs	r1, #0
    17e2:	adds	r4, #1
    17e4:	bl	9b48 <pinMode>
    17e8:	cmp	r4, #24
    17ea:	bne.n	17de <check_hibernate(parameters_s*, int)+0xd2>
  hibernate(seconds);
    17ec:	mov	r0, r5
//    while(!Serial);  Serial.printf("%d %d %d %d\n\r",dto,t1,tx,dt); Serial.flush();  delay(10000);
    
    go_hibernate(dt);
#endif
  }
}
    17ee:	add	sp, #44	; 0x2c
    17f0:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#include "hibernate.h"

void go_hibernate(uint32_t seconds)
{ digitalWriteFast(23,LOW); // turn sensor an micro OFF 
  for(int ii=0;ii<24;ii++) pinMode(ii,INPUT);   
  hibernate(seconds);
    17f4:	b.w	da0 <hibernate>
  uint16_t last_hour;

 */
inline uint16_t check_time(uint16_t to, uint16_t t1, uint16_t t2)
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
    17f8:	cmp	r2, r0
    17fa:	bcs.n	173a <check_hibernate(parameters_s*, int)+0x2e>
    17fc:	cmp	r2, r5
    17fe:	ite	cs
    1800:	movcs.w	lr, #0
    1804:	movcc.w	lr, #1
  struct tm tx=seconds2tm(tt);
  uint16_t to = tx.tm_hour;
  
  // check if we should sleep longer
  uint16_t doRecording=1;
  doRecording = check_time(to,par->first_hour, par->second_hour) ||
    1808:	cmp.w	lr, #0
    180c:	bne.n	173a <check_hibernate(parameters_s*, int)+0x2e>
  uint16_t last_hour;

 */
inline uint16_t check_time(uint16_t to, uint16_t t1, uint16_t t2)
{
  return (t1<t2)? (to>=t1)&&(to<t2) : (to>=t1)||(to<t2);
    180e:	cmp	r1, r5
    1810:	bhi.n	1752 <check_hibernate(parameters_s*, int)+0x46>
    1812:	cmp	r2, r5
    1814:	bcc.n	181c <check_hibernate(parameters_s*, int)+0x110>
    dt = dto - (tt % dto);
    go_hibernate(dt);
#else
    if(check_time(to,par->last_hour,par->first_hour))
    {
      dto=(par->first_hour - par->last_hour);
    1816:	mov	r3, r5
    1818:	subs	r1, r1, r5
    181a:	b.n	1758 <check_hibernate(parameters_s*, int)+0x4c>
    181c:	cmp	r2, r1
    181e:	ite	cs
    1820:	movcs	r2, #0
    1822:	movcc	r2, #1
#if SLEEP_MODE==0
    dto = (par->on_time+par->off_time)*60;
    dt = dto - (tt % dto);
    go_hibernate(dt);
#else
    if(check_time(to,par->last_hour,par->first_hour))
    1824:	cmp	r2, #0
    1826:	beq.n	1756 <check_hibernate(parameters_s*, int)+0x4a>
    {
      dto=(par->first_hour - par->last_hour);
    1828:	mov	r3, r5
    182a:	subs	r1, r1, r5
    182c:	b.n	1758 <check_hibernate(parameters_s*, int)+0x4c>
    182e:	nop
    1830:	.word	0x4003d000
    1834:	.word	0xc22e4507
    1838:	.word	0x00015180
    183c:	.word	0x400ff088

00001840 <encode_mac(char*)>:
  doRead_mac(0xe,mac,0);
  doRead_mac(0xf,mac,3);
}

char * encode_mac(char * text)  
{
    1840:	push	{r4, r5, r6, r7}
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    1842:	ldr	r2, [pc, #316]	; (1980 <encode_mac(char*)+0x140>)
  FTFL_FCCOB1 = word;             // read the given word of read once area

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
    1844:	ldr	r3, [pc, #316]	; (1984 <encode_mac(char*)+0x144>)

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
  FTFL_FCCOB1 = word;             // read the given word of read once area
    1846:	ldr	r4, [pc, #320]	; (1988 <encode_mac(char*)+0x148>)
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    1848:	movs	r6, #65	; 0x41
  FTFL_FCCOB1 = word;             // read the given word of read once area
    184a:	movs	r5, #14

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
    184c:	movs	r1, #128	; 0x80
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    184e:	strb	r6, [r2, #0]
  FTFL_FCCOB1 = word;             // read the given word of read once area
    1850:	strb	r5, [r4, #0]

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));
    1852:	mov	r2, r3
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
  FTFL_FCCOB1 = word;             // read the given word of read once area

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
    1854:	strb	r1, [r3, #0]
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));
    1856:	ldrb	r3, [r2, #0]
    1858:	ldr	r1, [pc, #296]	; (1984 <encode_mac(char*)+0x144>)
    185a:	lsls	r4, r3, #24
    185c:	bpl.n	1856 <encode_mac(char*)+0x16>

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
    185e:	ldr	r3, [pc, #300]	; (198c <encode_mac(char*)+0x14c>)
    1860:	ldr	r2, [pc, #300]	; (1990 <encode_mac(char*)+0x150>)
    1862:	ldrb	r4, [r3, #0]
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    1864:	ldr	r6, [pc, #300]	; (1994 <encode_mac(char*)+0x154>)

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
    1866:	strb	r4, [r2, #0]
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
  *(mac+offset+2) = FTFL_FCCOB7;       // Skip FTFL_FCCOB4 as it's always 0.
    1868:	subs	r3, #2
  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    186a:	ldrb	r6, [r6, #0]
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    186c:	ldr	r4, [pc, #272]	; (1980 <encode_mac(char*)+0x140>)
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
  *(mac+offset+2) = FTFL_FCCOB7;       // Skip FTFL_FCCOB4 as it's always 0.
    186e:	ldrb	r3, [r3, #0]

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
  FTFL_FCCOB1 = word;             // read the given word of read once area
    1870:	ldr	r5, [pc, #276]	; (1988 <encode_mac(char*)+0x148>)
  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    1872:	strb	r6, [r2, #1]
  *(mac+offset+2) = FTFL_FCCOB7;       // Skip FTFL_FCCOB4 as it's always 0.
    1874:	strb	r3, [r2, #2]
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    1876:	movs	r7, #65	; 0x41
  FTFL_FCCOB1 = word;             // read the given word of read once area
    1878:	movs	r6, #15

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
    187a:	movs	r3, #128	; 0x80
uint8_t mac[6];

// http://forum.pjrc.com/threads/91-teensy-3-MAC-address
void doRead_mac(uint8_t word, uint8_t *mac, uint8_t offset) 
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
    187c:	strb	r7, [r4, #0]
  FTFL_FCCOB1 = word;             // read the given word of read once area
    187e:	strb	r6, [r5, #0]

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));
    1880:	mov	r4, r1
{
  FTFL_FCCOB0 = 0x41;             // Selects the READONCE command
  FTFL_FCCOB1 = word;             // read the given word of read once area

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
    1882:	strb	r3, [r1, #0]
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));
    1884:	ldrb	r3, [r4, #0]
    1886:	lsls	r3, r3, #24
    1888:	bpl.n	1884 <encode_mac(char*)+0x44>
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    188a:	ldrb	r3, [r2, #0]

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
    188c:	ldr	r5, [pc, #252]	; (198c <encode_mac(char*)+0x14c>)
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    188e:	ldr	r4, [pc, #260]	; (1994 <encode_mac(char*)+0x154>)
  *(mac+offset+2) = FTFL_FCCOB7;       // Skip FTFL_FCCOB4 as it's always 0.
    1890:	ldr	r1, [pc, #260]	; (1998 <encode_mac(char*)+0x158>)

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
    1892:	ldrb	r5, [r5, #0]
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    1894:	ldrb	r4, [r4, #0]
  *(mac+offset+2) = FTFL_FCCOB7;       // Skip FTFL_FCCOB4 as it's always 0.
    1896:	ldrb	r1, [r1, #0]
    1898:	strb	r1, [r2, #5]
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    189a:	lsrs	r3, r3, #4
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    189c:	cmp	r3, #9
    189e:	ite	hi
    18a0:	addhi	r3, #55	; 0x37
    18a2:	addls	r3, #48	; 0x30

  // launch command and wait until complete
  FTFL_FSTAT = FTFL_FSTAT_CCIF;
  while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF));

  *(mac+offset) =   FTFL_FCCOB5;       // collect only the top three bytes,
    18a4:	strb	r5, [r2, #3]
  *(mac+offset+1) = FTFL_FCCOB6;       // in the right orientation (big endian).
    18a6:	strb	r4, [r2, #4]
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18a8:	strb	r3, [r0, #0]
    digit=(mac[ii] & 0x0F);
    18aa:	ldrb	r3, [r2, #0]
    18ac:	and.w	r3, r3, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18b0:	cmp	r3, #9
    18b2:	ite	hi
    18b4:	addhi	r3, #55	; 0x37
    18b6:	addls	r3, #48	; 0x30
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    18b8:	movs	r1, #95	; 0x5f
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18ba:	strb	r3, [r0, #1]
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    18bc:	strb	r1, [r0, #2]
    digit=(mac[ii] & 0xF0) >> 4;
    18be:	ldrb	r3, [r2, #1]
    18c0:	lsrs	r3, r3, #4
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18c2:	cmp	r3, #9
    18c4:	bls.n	196a <encode_mac(char*)+0x12a>
    18c6:	adds	r3, #55	; 0x37
    18c8:	strb	r3, [r0, #3]
    digit=(mac[ii] & 0x0F);
    18ca:	ldrb	r3, [r2, #1]
    18cc:	and.w	r3, r3, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18d0:	cmp	r3, #9
    18d2:	ite	hi
    18d4:	addhi	r3, #55	; 0x37
    18d6:	addls	r3, #48	; 0x30
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    18d8:	movs	r1, #95	; 0x5f
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18da:	strb	r3, [r0, #4]
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    18dc:	strb	r1, [r0, #5]
    digit=(mac[ii] & 0xF0) >> 4;
    18de:	ldrb	r3, [r2, #2]
    18e0:	lsrs	r3, r3, #4
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18e2:	cmp	r3, #9
    18e4:	bls.n	197a <encode_mac(char*)+0x13a>
    18e6:	adds	r3, #55	; 0x37
    18e8:	strb	r3, [r0, #6]
    digit=(mac[ii] & 0x0F);
    18ea:	ldrb	r3, [r2, #2]
    18ec:	and.w	r3, r3, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18f0:	cmp	r3, #9
    18f2:	ite	hi
    18f4:	addhi	r3, #55	; 0x37
    18f6:	addls	r3, #48	; 0x30
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    18f8:	movs	r1, #95	; 0x5f
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18fa:	strb	r3, [r0, #7]
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    18fc:	strb	r1, [r0, #8]
    digit=(mac[ii] & 0xF0) >> 4;
    18fe:	ldrb	r3, [r2, #3]
    1900:	lsrs	r3, r3, #4
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1902:	cmp	r3, #9
    1904:	bls.n	1976 <encode_mac(char*)+0x136>
    1906:	adds	r3, #55	; 0x37
    digit=(mac[ii] & 0x0F);
    1908:	ldrb	r1, [r2, #3]
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    190a:	strb	r3, [r0, #9]
    digit=(mac[ii] & 0x0F);
    190c:	and.w	r3, r1, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1910:	cmp	r3, #9
    1912:	ite	hi
    1914:	addhi.w	r1, r3, #55	; 0x37
    1918:	addls.w	r1, r3, #48	; 0x30
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    191c:	ldrb	r3, [r2, #4]
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    191e:	strb	r1, [r0, #10]
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    1920:	lsrs	r3, r3, #4
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1922:	movs	r1, #95	; 0x5f
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1924:	cmp	r3, #9
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1926:	strb	r1, [r0, #11]
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1928:	bls.n	1972 <encode_mac(char*)+0x132>
    192a:	adds	r3, #55	; 0x37
    digit=(mac[ii] & 0x0F);
    192c:	ldrb	r1, [r2, #4]
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    192e:	strb	r3, [r0, #12]
    digit=(mac[ii] & 0x0F);
    1930:	and.w	r3, r1, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1934:	cmp	r3, #9
    1936:	ite	hi
    1938:	addhi.w	r1, r3, #55	; 0x37
    193c:	addls.w	r1, r3, #48	; 0x30
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    1940:	ldrb	r3, [r2, #5]
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1942:	strb	r1, [r0, #13]
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    1944:	lsrs	r3, r3, #4
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    1946:	movs	r1, #95	; 0x5f
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1948:	cmp	r3, #9
  uint8_t ii,jj;
  uint8_t digit;
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    194a:	strb	r1, [r0, #14]
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    194c:	bhi.n	196e <encode_mac(char*)+0x12e>
    194e:	adds	r3, #48	; 0x30
    digit=(mac[ii] & 0x0F);
    1950:	ldrb	r2, [r2, #5]
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1952:	strb	r3, [r0, #15]
    digit=(mac[ii] & 0x0F);
    1954:	and.w	r3, r2, #15
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1958:	cmp	r3, #9
    195a:	ite	ls
    195c:	addls	r3, #48	; 0x30
    195e:	addhi	r3, #55	; 0x37
  }
  text[jj]=0;
    1960:	movs	r2, #0
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    digit=(mac[ii] & 0x0F);
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1962:	strb	r3, [r0, #16]
  }
  text[jj]=0;
    1964:	strb	r2, [r0, #17]

  return text;
}
    1966:	pop	{r4, r5, r6, r7}
    1968:	bx	lr
  read_mac();
  for(ii = 0,jj=0; ii < 6; ii++) 
  {
    if (ii!=0) text[jj++]='_';
    digit=(mac[ii] & 0xF0) >> 4;
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
    196a:	adds	r3, #48	; 0x30
    196c:	b.n	18c8 <encode_mac(char*)+0x88>
    196e:	adds	r3, #55	; 0x37
    1970:	b.n	1950 <encode_mac(char*)+0x110>
    1972:	adds	r3, #48	; 0x30
    1974:	b.n	192c <encode_mac(char*)+0xec>
    1976:	adds	r3, #48	; 0x30
    1978:	b.n	1908 <encode_mac(char*)+0xc8>
    197a:	adds	r3, #48	; 0x30
    197c:	b.n	18e8 <encode_mac(char*)+0xa8>
    197e:	nop
    1980:	.word	0x40020007
    1984:	.word	0x40020000
    1988:	.word	0x40020006
    198c:	.word	0x4002000a
    1990:	.word	0x1fff1740
    1994:	.word	0x40020009
    1998:	.word	0x40020008

0000199c <printAll()>:
int getLightSensor();

char text[32];

static void printAll(void)
{
    199c:	push	{r4, r5, r6, r7, lr}
  SERIALX.printf("%c %2d on_time\n\r",     'g',parameters.on_time);
    199e:	ldr	r4, [pc, #316]	; (1adc <printAll()+0x140>)
    19a0:	ldr	r5, [pc, #316]	; (1ae0 <printAll()+0x144>)
    19a2:	ldr	r1, [pc, #320]	; (1ae4 <printAll()+0x148>)
    19a4:	ldrh	r3, [r5, #0]
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    19a6:	ldr	r7, [pc, #320]	; (1ae8 <printAll()+0x14c>)

static char * getDate(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    sprintf(text,"%04d/%02d/%02d",tx.tm_year, tx.tm_mon, tx.tm_mday);
    19a8:	ldr	r6, [pc, #320]	; (1aec <printAll()+0x150>)
int getLightSensor();

char text[32];

static void printAll(void)
{
    19aa:	sub	sp, #52	; 0x34
  SERIALX.printf("%c %2d on_time\n\r",     'g',parameters.on_time);
    19ac:	mov	r0, r4
    19ae:	movs	r2, #103	; 0x67
    19b0:	bl	ae9c <Print::printf(char const*, ...)>
  SERIALX.printf("%c %2d off_time\n\r",    'p',parameters.off_time);
    19b4:	ldrh	r3, [r5, #2]
    19b6:	ldr	r1, [pc, #312]	; (1af0 <printAll()+0x154>)
    19b8:	mov	r0, r4
    19ba:	movs	r2, #112	; 0x70
    19bc:	bl	ae9c <Print::printf(char const*, ...)>
  SERIALX.printf("%c %2d first_hour\n\r",  'i',parameters.first_hour);
    19c0:	ldrh	r3, [r5, #4]
    19c2:	ldr	r1, [pc, #304]	; (1af4 <printAll()+0x158>)
    19c4:	mov	r0, r4
    19c6:	movs	r2, #105	; 0x69
    19c8:	bl	ae9c <Print::printf(char const*, ...)>
  SERIALX.printf("%c %2d second_hour\n\r", 'u',parameters.second_hour);
    19cc:	ldrh	r3, [r5, #6]
    19ce:	ldr	r1, [pc, #296]	; (1af8 <printAll()+0x15c>)
    19d0:	mov	r0, r4
    19d2:	movs	r2, #117	; 0x75
    19d4:	bl	ae9c <Print::printf(char const*, ...)>
  SERIALX.printf("%c %2d third_hour\n\r",  'v',parameters.third_hour);
    19d8:	ldrh	r3, [r5, #8]
    19da:	ldr	r1, [pc, #288]	; (1afc <printAll()+0x160>)
    19dc:	mov	r0, r4
    19de:	movs	r2, #118	; 0x76
    19e0:	bl	ae9c <Print::printf(char const*, ...)>
  SERIALX.printf("%c %2d last_hour\n\r",   'f',parameters.last_hour);
    19e4:	ldrh	r3, [r5, #10]
    19e6:	ldr	r1, [pc, #280]	; (1b00 <printAll()+0x164>)
    19e8:	mov	r0, r4
    19ea:	movs	r2, #102	; 0x66
    19ec:	bl	ae9c <Print::printf(char const*, ...)>
  SERIALX.printf("%c %s name\n\r",         'n',parameters.name);
    19f0:	add.w	r3, r5, #12
    19f4:	movs	r2, #110	; 0x6e
    19f6:	mov	r0, r4
    19f8:	ldr	r1, [pc, #264]	; (1b04 <printAll()+0x168>)
    19fa:	bl	ae9c <Print::printf(char const*, ...)>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    19fe:	ldr	r1, [r7, #0]
}

static char * getDate(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1a00:	add	r0, sp, #12
    1a02:	bl	1158 <seconds2tm(unsigned long)>
    sprintf(text,"%04d/%02d/%02d",tx.tm_year, tx.tm_mon, tx.tm_mday);
    1a06:	ldr	r1, [sp, #24]
    1a08:	ldr	r3, [sp, #28]
    1a0a:	ldr	r2, [sp, #32]
    1a0c:	str	r1, [sp, #0]
    1a0e:	mov	r0, r6
    1a10:	ldr	r1, [pc, #244]	; (1b08 <printAll()+0x16c>)
    1a12:	bl	cf50 <sprintf>
  SERIALX.printf("%c %2d first_hour\n\r",  'i',parameters.first_hour);
  SERIALX.printf("%c %2d second_hour\n\r", 'u',parameters.second_hour);
  SERIALX.printf("%c %2d third_hour\n\r",  'v',parameters.third_hour);
  SERIALX.printf("%c %2d last_hour\n\r",   'f',parameters.last_hour);
  SERIALX.printf("%c %s name\n\r",         'n',parameters.name);
  SERIALX.printf("%c %s date\n\r",         'd',getDate(text));
    1a16:	mov	r3, r6
    1a18:	movs	r2, #100	; 0x64
    1a1a:	mov	r0, r4
    1a1c:	ldr	r1, [pc, #236]	; (1b0c <printAll()+0x170>)
    1a1e:	bl	ae9c <Print::printf(char const*, ...)>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1a22:	ldr	r1, [r7, #0]
}

static char * getTime(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1a24:	add	r0, sp, #12
    1a26:	bl	1158 <seconds2tm(unsigned long)>
    sprintf(text,"%02d:%02d:%02d",tx.tm_hour, tx.tm_min, tx.tm_sec);
    1a2a:	ldr	r1, [sp, #12]
    1a2c:	ldr	r3, [sp, #16]
    1a2e:	ldr	r2, [sp, #20]
    1a30:	str	r1, [sp, #0]
    1a32:	mov	r0, r6
    1a34:	ldr	r1, [pc, #216]	; (1b10 <printAll()+0x174>)
    1a36:	bl	cf50 <sprintf>
  SERIALX.printf("%c %2d second_hour\n\r", 'u',parameters.second_hour);
  SERIALX.printf("%c %2d third_hour\n\r",  'v',parameters.third_hour);
  SERIALX.printf("%c %2d last_hour\n\r",   'f',parameters.last_hour);
  SERIALX.printf("%c %s name\n\r",         'n',parameters.name);
  SERIALX.printf("%c %s date\n\r",         'd',getDate(text));
  SERIALX.printf("%c %s time\n\r",         't',getTime(text));
    1a3a:	mov	r3, r6
    1a3c:	movs	r2, #116	; 0x74
    1a3e:	ldr	r1, [pc, #212]	; (1b14 <printAll()+0x178>)
    1a40:	mov	r0, r4
    1a42:	bl	ae9c <Print::printf(char const*, ...)>
  SERIALX.printf("%c %s mac address\n\r",  'm',encode_mac(text));
    1a46:	mov	r0, r6
    1a48:	bl	1840 <encode_mac(char*)>
    1a4c:	movs	r2, #109	; 0x6d
    1a4e:	mov	r3, r0
    1a50:	ldr	r1, [pc, #196]	; (1b18 <printAll()+0x17c>)
    1a52:	mov	r0, r4
    1a54:	bl	ae9c <Print::printf(char const*, ...)>
  SERIALX.println();
    1a58:	mov	r0, r4
    1a5a:	bl	ae6c <Print::println()>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a5e:	movs	r1, #23
    1a60:	ldr	r0, [pc, #184]	; (1b1c <printAll()+0x180>)
    1a62:	bl	9524 <usb_serial_write>
    1a66:	mov	r0, r4
    1a68:	bl	ae6c <Print::println()>
    1a6c:	movs	r1, #48	; 0x30
    1a6e:	ldr	r0, [pc, #176]	; (1b20 <printAll()+0x184>)
    1a70:	bl	9524 <usb_serial_write>
    1a74:	mov	r0, r4
    1a76:	bl	ae6c <Print::println()>
    1a7a:	movs	r1, #32
    1a7c:	ldr	r0, [pc, #164]	; (1b24 <printAll()+0x188>)
    1a7e:	bl	9524 <usb_serial_write>
    1a82:	mov	r0, r4
    1a84:	bl	ae6c <Print::println()>
    1a88:	movs	r1, #70	; 0x46
    1a8a:	ldr	r0, [pc, #156]	; (1b28 <printAll()+0x18c>)
    1a8c:	bl	9524 <usb_serial_write>
    1a90:	mov	r0, r4
    1a92:	bl	ae6c <Print::println()>
    1a96:	movs	r1, #38	; 0x26
    1a98:	ldr	r0, [pc, #144]	; (1b2c <printAll()+0x190>)
    1a9a:	bl	9524 <usb_serial_write>
    1a9e:	mov	r0, r4
    1aa0:	bl	ae6c <Print::println()>
    1aa4:	movs	r1, #69	; 0x45
    1aa6:	ldr	r0, [pc, #136]	; (1b30 <printAll()+0x194>)
    1aa8:	bl	9524 <usb_serial_write>
    1aac:	mov	r0, r4
    1aae:	bl	ae6c <Print::println()>
    1ab2:	movs	r1, #50	; 0x32
    1ab4:	ldr	r0, [pc, #124]	; (1b34 <printAll()+0x198>)
    1ab6:	bl	9524 <usb_serial_write>
    1aba:	mov	r0, r4
    1abc:	bl	ae6c <Print::println()>
    1ac0:	movs	r1, #43	; 0x2b
    1ac2:	ldr	r0, [pc, #116]	; (1b38 <printAll()+0x19c>)
    1ac4:	bl	9524 <usb_serial_write>
    1ac8:	mov	r0, r4
    1aca:	bl	ae6c <Print::println()>
  SERIALX.println("exter '!cval' to read value c=(g,p,i,u,v,f,n,d,t) and val is new value");
  SERIALX.println("  e.g.: !i10 will set first hour to 10");
  SERIALX.println("exter 'xval' to exit menu (x is delay in minutes, -1 means immediate)");
  SERIALX.println("  e.g.: x10 will exit and hibernate for 10 minutes");
  SERIALX.println("        x-1 with exit and start immediately");
  SERIALX.println();
    1ace:	mov	r0, r4
}
    1ad0:	add	sp, #52	; 0x34
    1ad2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  SERIALX.println("exter '!cval' to read value c=(g,p,i,u,v,f,n,d,t) and val is new value");
  SERIALX.println("  e.g.: !i10 will set first hour to 10");
  SERIALX.println("exter 'xval' to exit menu (x is delay in minutes, -1 means immediate)");
  SERIALX.println("  e.g.: x10 will exit and hibernate for 10 minutes");
  SERIALX.println("        x-1 with exit and start immediately");
  SERIALX.println();
    1ad6:	b.w	ae6c <Print::println()>
    1ada:	nop
    1adc:	.word	0x1fff0898
    1ae0:	.word	0x1fff0734
    1ae4:	.word	0x000137bc
    1ae8:	.word	0x4003d000
    1aec:	.word	0x1fff2458
    1af0:	.word	0x000137d0
    1af4:	.word	0x000137e4
    1af8:	.word	0x000137f8
    1afc:	.word	0x00013810
    1b00:	.word	0x00013824
    1b04:	.word	0x00013838
    1b08:	.word	0x00013848
    1b0c:	.word	0x00013858
    1b10:	.word	0x00013868
    1b14:	.word	0x00013878
    1b18:	.word	0x00013888
    1b1c:	.word	0x0001389c
    1b20:	.word	0x000138b4
    1b24:	.word	0x000138e8
    1b28:	.word	0x0001390c
    1b2c:	.word	0x00013954
    1b30:	.word	0x0001397c
    1b34:	.word	0x000139c4
    1b38:	.word	0x000139f8

00001b3c <doMenu()>:
      parMods=1;
    }  
}

int16_t doMenu(void)
{
    1b3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
static void setRTC(uint32_t tt)
{
  RTC_SR = 0;
    1b40:	ldr	r5, [pc, #640]	; (1dc4 <doMenu()+0x288>)
  RTC_TPR = 0;
    1b42:	ldr	r6, [pc, #644]	; (1dc8 <doMenu()+0x28c>)
      parMods=1;
    }  
}

int16_t doMenu(void)
{
    1b44:	sub	sp, #52	; 0x34
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1b46:	bl	94d0 <usb_serial_available>
  int16_t ret=0;
  do
  {
    while(!SERIALX.available());
    1b4a:	cmp	r0, #0
    1b4c:	beq.n	1b46 <doMenu()+0xa>
        virtual int read() { return usb_serial_getchar(); }
    1b4e:	bl	9458 <usb_serial_getchar>
    1b52:	uxtb	r4, r0
    char c=SERIALX.read();
    
    if (strchr("?!xa", c))
    1b54:	mov	r1, r4
    1b56:	ldr	r0, [pc, #628]	; (1dcc <doMenu()+0x290>)
    1b58:	bl	cff8 <strchr>
    1b5c:	cmp	r0, #0
    1b5e:	beq.n	1b46 <doMenu()+0xa>
    { switch (c)
    1b60:	cmp	r4, #63	; 0x3f
    1b62:	beq.n	1b82 <doMenu()+0x46>
    1b64:	ble.n	1bf4 <doMenu()+0xb8>
    1b66:	cmp	r4, #97	; 0x61
    1b68:	beq.w	1c80 <doMenu()+0x144>
    1b6c:	cmp	r4, #120	; 0x78
    1b6e:	bne.n	1b46 <doMenu()+0xa>
      {
        case '?': doMenu1(); break;
        case '!': doMenu2(); break;
        case 'x': ret = SERIALX.parseInt(); break;
    1b70:	ldr	r0, [pc, #604]	; (1dd0 <doMenu()+0x294>)
    1b72:	bl	b0a0 <Stream::parseInt()>
    1b76:	sxth	r0, r0
        case 'a': printAll(); break;
      }
    }
  } while(ret==0);
    1b78:	cmp	r0, #0
    1b7a:	beq.n	1b46 <doMenu()+0xa>
  return ret;
}
    1b7c:	add	sp, #52	; 0x34
    1b7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1b82:	bl	94d0 <usb_serial_available>
  SERIALX.println();
}

static void doMenu1(void)
{ // for enquiries
    while(!SERIALX.available());
    1b86:	cmp	r0, #0
    1b88:	beq.n	1b82 <doMenu()+0x46>
        virtual int read() { return usb_serial_getchar(); }
    1b8a:	bl	9458 <usb_serial_getchar>
    1b8e:	uxtb	r4, r0
    char c=SERIALX.read();
    
    if (strchr("gpiuvfndtlm", c))
    1b90:	mov	r1, r4
    1b92:	ldr	r0, [pc, #576]	; (1dd4 <doMenu()+0x298>)
    1b94:	bl	cff8 <strchr>
    1b98:	cmp	r0, #0
    1b9a:	beq.n	1b46 <doMenu()+0xa>
    { switch (c)
    1b9c:	subs	r4, #100	; 0x64
    1b9e:	cmp	r4, #18
    1ba0:	bhi.n	1b46 <doMenu()+0xa>
    1ba2:	add	r3, pc, #4	; (adr r3, 1ba8 <doMenu()+0x6c>)
    1ba4:	ldr.w	pc, [r3, r4, lsl #2]
    1ba8:	.word	0x00001d49
    1bac:	.word	0x00001b47
    1bb0:	.word	0x00001d6f
    1bb4:	.word	0x00001d7d
    1bb8:	.word	0x00001b47
    1bbc:	.word	0x00001d8b
    1bc0:	.word	0x00001b47
    1bc4:	.word	0x00001b47
    1bc8:	.word	0x00001d99
    1bcc:	.word	0x00001da5
    1bd0:	.word	0x00001db7
    1bd4:	.word	0x00001b47
    1bd8:	.word	0x00001e05
    1bdc:	.word	0x00001b47
    1be0:	.word	0x00001b47
    1be4:	.word	0x00001b47
    1be8:	.word	0x00001e13
    1bec:	.word	0x00001e29
    1bf0:	.word	0x00001e37
  {
    while(!SERIALX.available());
    char c=SERIALX.read();
    
    if (strchr("?!xa", c))
    { switch (c)
    1bf4:	cmp	r4, #33	; 0x21
    1bf6:	bne.n	1b46 <doMenu()+0xa>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1bf8:	bl	94d0 <usb_serial_available>
! t timestring\n ESM_Logger sets time
! x delay\n      ESM_Logger exits menu and hibernates for the amount given in delay
*/
static void doMenu2(void)
{ // for settings
    while(!SERIALX.available());
    1bfc:	cmp	r0, #0
    1bfe:	beq.n	1bf8 <doMenu()+0xbc>
        virtual int read() { return usb_serial_getchar(); }
    1c00:	bl	9458 <usb_serial_getchar>
    1c04:	uxtb	r4, r0
    char c=SERIALX.read();
    uint16_t year,month,day,hour,minutes,seconds;
    
    if (strchr("gpiuvfndt", c))
    1c06:	mov	r1, r4
    1c08:	ldr	r0, [pc, #460]	; (1dd8 <doMenu()+0x29c>)
    1c0a:	bl	cff8 <strchr>
    1c0e:	cmp	r0, #0
    1c10:	beq.n	1b46 <doMenu()+0xa>
    { switch (c)
    1c12:	subs	r4, #100	; 0x64
    1c14:	cmp	r4, #18
    1c16:	bhi.n	1c78 <doMenu()+0x13c>
    1c18:	tbb	[pc, r4]
    1c1c:	.word	0x473e2e0a
    1c20:	.word	0x2e2e502e
    1c24:	.word	0x2e592e2e
    1c28:	.word	0x2e2e2e68
    1c2c:	.short	0x8d71
    1c2e:	.byte	0x35
    1c2f:	.byte	0x00
        case 'v': parameters.third_hour  =SERIALX.parseInt();break;
        case 'f': parameters.last_hour   =SERIALX.parseInt();break;
        case 'n': for(int ii=0; ii<4;ii++) parameters.name[ii] = SERIALX.read();
                  parameters.name[4]=0; break;
        case 'd':     
                  year= SERIALX.parseInt();
    1c30:	ldr	r0, [pc, #412]	; (1dd0 <doMenu()+0x294>)
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1c32:	ldr.w	r9, [pc, #436]	; 1de8 <doMenu()+0x2ac>
        case 'v': parameters.third_hour  =SERIALX.parseInt();break;
        case 'f': parameters.last_hour   =SERIALX.parseInt();break;
        case 'n': for(int ii=0; ii<4;ii++) parameters.name[ii] = SERIALX.read();
                  parameters.name[4]=0; break;
        case 'd':     
                  year= SERIALX.parseInt();
    1c36:	bl	b0a0 <Stream::parseInt()>
    1c3a:	mov	r8, r0
                  month= SERIALX.parseInt();
    1c3c:	ldr	r0, [pc, #400]	; (1dd0 <doMenu()+0x294>)
    1c3e:	bl	b0a0 <Stream::parseInt()>
    1c42:	mov	r7, r0
                  day= SERIALX.parseInt();
    1c44:	ldr	r0, [pc, #392]	; (1dd0 <doMenu()+0x294>)
    1c46:	bl	b0a0 <Stream::parseInt()>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1c4a:	ldr.w	r1, [r9]
        case 'n': for(int ii=0; ii<4;ii++) parameters.name[ii] = SERIALX.read();
                  parameters.name[4]=0; break;
        case 'd':     
                  year= SERIALX.parseInt();
                  month= SERIALX.parseInt();
                  day= SERIALX.parseInt();
    1c4e:	mov	r4, r0
}

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    1c50:	add	r0, sp, #12
    1c52:	bl	1158 <seconds2tm(unsigned long)>
    tx.tm_year=year;
    tx.tm_mon=month;
    1c56:	uxth	r7, r7

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    tx.tm_year=year;
    1c58:	uxth.w	r3, r8
    tx.tm_mon=month;
    tx.tm_mday=day;
    1c5c:	uxth	r4, r4
    tt=tm2seconds(&tx);
    1c5e:	add	r0, sp, #12

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    tx.tm_year=year;
    1c60:	str	r3, [sp, #32]
    tx.tm_mon=month;
    1c62:	str	r7, [sp, #28]
    tx.tm_mday=day;
    1c64:	str	r4, [sp, #24]
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    tx.tm_hour=hour;
    tx.tm_min=minutes;
    tx.tm_sec=seconds;
    tt=tm2seconds(&tx);
    1c66:	bl	1514 <tm2seconds(tm*)>
/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
static void setRTC(uint32_t tt)
{
  RTC_SR = 0;
    1c6a:	movs	r3, #0
  RTC_TPR = 0;
  RTC_TSR = tt;
  RTC_SR = RTC_SR_TCE;
    1c6c:	movs	r2, #16
/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
static void setRTC(uint32_t tt)
{
  RTC_SR = 0;
    1c6e:	str	r3, [r5, #0]
  RTC_TPR = 0;
    1c70:	str	r3, [r6, #0]
  RTC_TSR = tt;
    1c72:	str.w	r0, [r9]
  RTC_SR = RTC_SR_TCE;
    1c76:	str	r2, [r5, #0]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1c78:	ldr	r3, [pc, #352]	; (1ddc <doMenu()+0x2a0>)
    1c7a:	movs	r2, #1
    1c7c:	strh	r2, [r3, #0]
    1c7e:	b.n	1b46 <doMenu()+0xa>
    { switch (c)
      {
        case '?': doMenu1(); break;
        case '!': doMenu2(); break;
        case 'x': ret = SERIALX.parseInt(); break;
        case 'a': printAll(); break;
    1c80:	bl	199c <printAll()>
    1c84:	b.n	1b46 <doMenu()+0xa>
      {
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
        case 'i': parameters.first_hour  =SERIALX.parseInt();break;
        case 'u': parameters.second_hour =SERIALX.parseInt();break;
        case 'v': parameters.third_hour  =SERIALX.parseInt();break;
    1c86:	ldr	r0, [pc, #328]	; (1dd0 <doMenu()+0x294>)
    1c88:	bl	b0a0 <Stream::parseInt()>
    1c8c:	ldr	r3, [pc, #336]	; (1de0 <doMenu()+0x2a4>)
    1c8e:	strh	r0, [r3, #8]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1c90:	ldr	r3, [pc, #328]	; (1ddc <doMenu()+0x2a0>)
    1c92:	movs	r2, #1
    1c94:	strh	r2, [r3, #0]
    1c96:	b.n	1b46 <doMenu()+0xa>
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
        case 'i': parameters.first_hour  =SERIALX.parseInt();break;
        case 'u': parameters.second_hour =SERIALX.parseInt();break;
        case 'v': parameters.third_hour  =SERIALX.parseInt();break;
        case 'f': parameters.last_hour   =SERIALX.parseInt();break;
    1c98:	ldr	r0, [pc, #308]	; (1dd0 <doMenu()+0x294>)
    1c9a:	bl	b0a0 <Stream::parseInt()>
    1c9e:	ldr	r3, [pc, #320]	; (1de0 <doMenu()+0x2a4>)
    1ca0:	strh	r0, [r3, #10]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1ca2:	ldr	r3, [pc, #312]	; (1ddc <doMenu()+0x2a0>)
    1ca4:	movs	r2, #1
    1ca6:	strh	r2, [r3, #0]
    1ca8:	b.n	1b46 <doMenu()+0xa>
    uint16_t year,month,day,hour,minutes,seconds;
    
    if (strchr("gpiuvfndt", c))
    { switch (c)
      {
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
    1caa:	ldr	r0, [pc, #292]	; (1dd0 <doMenu()+0x294>)
    1cac:	bl	b0a0 <Stream::parseInt()>
    1cb0:	ldr	r3, [pc, #300]	; (1de0 <doMenu()+0x2a4>)
    1cb2:	strh	r0, [r3, #0]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1cb4:	ldr	r3, [pc, #292]	; (1ddc <doMenu()+0x2a0>)
    1cb6:	movs	r2, #1
    1cb8:	strh	r2, [r3, #0]
    1cba:	b.n	1b46 <doMenu()+0xa>
    if (strchr("gpiuvfndt", c))
    { switch (c)
      {
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
        case 'i': parameters.first_hour  =SERIALX.parseInt();break;
    1cbc:	ldr	r0, [pc, #272]	; (1dd0 <doMenu()+0x294>)
    1cbe:	bl	b0a0 <Stream::parseInt()>
    1cc2:	ldr	r3, [pc, #284]	; (1de0 <doMenu()+0x2a4>)
    1cc4:	strh	r0, [r3, #4]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1cc6:	ldr	r3, [pc, #276]	; (1ddc <doMenu()+0x2a0>)
    1cc8:	movs	r2, #1
    1cca:	strh	r2, [r3, #0]
    1ccc:	b.n	1b46 <doMenu()+0xa>
    1cce:	ldr	r4, [pc, #276]	; (1de4 <doMenu()+0x2a8>)
    1cd0:	adds	r7, r4, #4
    1cd2:	bl	9458 <usb_serial_getchar>
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
        case 'i': parameters.first_hour  =SERIALX.parseInt();break;
        case 'u': parameters.second_hour =SERIALX.parseInt();break;
        case 'v': parameters.third_hour  =SERIALX.parseInt();break;
        case 'f': parameters.last_hour   =SERIALX.parseInt();break;
        case 'n': for(int ii=0; ii<4;ii++) parameters.name[ii] = SERIALX.read();
    1cd6:	strb.w	r0, [r4, #1]!
    1cda:	cmp	r4, r7
    1cdc:	bne.n	1cd2 <doMenu()+0x196>
                  parameters.name[4]=0; break;
    1cde:	ldr	r3, [pc, #256]	; (1de0 <doMenu()+0x2a4>)
    1ce0:	movs	r2, #0
    1ce2:	strb	r2, [r3, #16]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1ce4:	ldr	r3, [pc, #244]	; (1ddc <doMenu()+0x2a0>)
    1ce6:	movs	r2, #1
    1ce8:	strh	r2, [r3, #0]
    1cea:	b.n	1b46 <doMenu()+0xa>
    
    if (strchr("gpiuvfndt", c))
    { switch (c)
      {
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
    1cec:	ldr	r0, [pc, #224]	; (1dd0 <doMenu()+0x294>)
    1cee:	bl	b0a0 <Stream::parseInt()>
    1cf2:	ldr	r3, [pc, #236]	; (1de0 <doMenu()+0x2a4>)
    1cf4:	strh	r0, [r3, #2]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1cf6:	ldr	r3, [pc, #228]	; (1ddc <doMenu()+0x2a0>)
    1cf8:	movs	r2, #1
    1cfa:	strh	r2, [r3, #0]
    1cfc:	b.n	1b46 <doMenu()+0xa>
                  month= SERIALX.parseInt();
                  day= SERIALX.parseInt();
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour= SERIALX.parseInt();
    1cfe:	ldr	r0, [pc, #208]	; (1dd0 <doMenu()+0x294>)
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1d00:	ldr.w	r9, [pc, #228]	; 1de8 <doMenu()+0x2ac>
                  month= SERIALX.parseInt();
                  day= SERIALX.parseInt();
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour= SERIALX.parseInt();
    1d04:	bl	b0a0 <Stream::parseInt()>
    1d08:	mov	r8, r0
                  minutes= SERIALX.parseInt();
    1d0a:	ldr	r0, [pc, #196]	; (1dd0 <doMenu()+0x294>)
    1d0c:	bl	b0a0 <Stream::parseInt()>
    1d10:	mov	r7, r0
                  seconds= SERIALX.parseInt();
    1d12:	ldr	r0, [pc, #188]	; (1dd0 <doMenu()+0x294>)
    1d14:	bl	b0a0 <Stream::parseInt()>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1d18:	ldr.w	r1, [r9]
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour= SERIALX.parseInt();
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
    1d1c:	mov	r4, r0
}

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    1d1e:	add	r0, sp, #12
    1d20:	bl	1158 <seconds2tm(unsigned long)>
    tx.tm_hour=hour;
    tx.tm_min=minutes;
    1d24:	uxth	r7, r7

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    tx.tm_hour=hour;
    1d26:	uxth.w	r3, r8
    tx.tm_min=minutes;
    tx.tm_sec=seconds;
    1d2a:	uxth	r4, r4
    tt=tm2seconds(&tx);
    1d2c:	add	r0, sp, #12

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    uint32_t tt=getRTC();
    struct tm tx=seconds2tm(tt);
    tx.tm_hour=hour;
    1d2e:	str	r3, [sp, #20]
    tx.tm_min=minutes;
    1d30:	str	r7, [sp, #16]
    tx.tm_sec=seconds;
    1d32:	str	r4, [sp, #12]
    1d34:	b.n	1c66 <doMenu()+0x12a>
    { switch (c)
      {
        case 'g': parameters.on_time     =SERIALX.parseInt(); break;
        case 'p': parameters.off_time    =SERIALX.parseInt(); break;
        case 'i': parameters.first_hour  =SERIALX.parseInt();break;
        case 'u': parameters.second_hour =SERIALX.parseInt();break;
    1d36:	ldr	r0, [pc, #152]	; (1dd0 <doMenu()+0x294>)
    1d38:	bl	b0a0 <Stream::parseInt()>
    1d3c:	ldr	r3, [pc, #160]	; (1de0 <doMenu()+0x2a4>)
    1d3e:	strh	r0, [r3, #6]
                  minutes= SERIALX.parseInt();
                  seconds= SERIALX.parseInt();
                  setTime(hour,minutes,seconds);
                  break;
      }
      parMods=1;
    1d40:	ldr	r3, [pc, #152]	; (1ddc <doMenu()+0x2a0>)
    1d42:	movs	r2, #1
    1d44:	strh	r2, [r3, #0]
    1d46:	b.n	1b46 <doMenu()+0xa>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1d48:	ldr	r3, [pc, #156]	; (1de8 <doMenu()+0x2ac>)
}

static char * getDate(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1d4a:	add	r0, sp, #12
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1d4c:	ldr	r1, [r3, #0]
}

static char * getDate(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1d4e:	bl	1158 <seconds2tm(unsigned long)>
    sprintf(text,"%04d/%02d/%02d",tx.tm_year, tx.tm_mon, tx.tm_mday);
    1d52:	ldr	r1, [sp, #24]
    1d54:	str	r1, [sp, #0]
    1d56:	ldr	r3, [sp, #28]
    1d58:	ldr	r2, [sp, #32]
    1d5a:	ldr	r1, [pc, #144]	; (1dec <doMenu()+0x2b0>)

static char * getTime(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    sprintf(text,"%02d:%02d:%02d",tx.tm_hour, tx.tm_min, tx.tm_sec);
    1d5c:	ldr	r0, [pc, #144]	; (1df0 <doMenu()+0x2b4>)
    1d5e:	bl	cf50 <sprintf>
        case 'u': SERIALX.printf("%02d\r\n",parameters.second_hour);break;
        case 'v': SERIALX.printf("%02d\r\n",parameters.third_hour);break;
        case 'f': SERIALX.printf("%02d\r\n",parameters.last_hour);break;
        case 'n': SERIALX.printf("%s\r\n",parameters.name);break;  // could be (unique) mac address
        case 'd': SERIALX.printf("%s\r\n",getDate(text));break;
        case 't': SERIALX.printf("%s\r\n",getTime(text));break;
    1d62:	ldr	r2, [pc, #140]	; (1df0 <doMenu()+0x2b4>)
    1d64:	ldr	r1, [pc, #140]	; (1df4 <doMenu()+0x2b8>)
    1d66:	ldr	r0, [pc, #104]	; (1dd0 <doMenu()+0x294>)
    1d68:	bl	ae9c <Print::printf(char const*, ...)>
    1d6c:	b.n	1b46 <doMenu()+0xa>
        case 'g': SERIALX.printf("%02d\r\n",parameters.on_time); break;
        case 'p': SERIALX.printf("%02d\r\n",parameters.off_time); break;
        case 'i': SERIALX.printf("%02d\r\n",parameters.first_hour);break;
        case 'u': SERIALX.printf("%02d\r\n",parameters.second_hour);break;
        case 'v': SERIALX.printf("%02d\r\n",parameters.third_hour);break;
        case 'f': SERIALX.printf("%02d\r\n",parameters.last_hour);break;
    1d6e:	ldr	r3, [pc, #112]	; (1de0 <doMenu()+0x2a4>)
    1d70:	ldr	r1, [pc, #132]	; (1df8 <doMenu()+0x2bc>)
    1d72:	ldrh	r2, [r3, #10]
    1d74:	ldr	r0, [pc, #88]	; (1dd0 <doMenu()+0x294>)
    1d76:	bl	ae9c <Print::printf(char const*, ...)>
    1d7a:	b.n	1b46 <doMenu()+0xa>
    char c=SERIALX.read();
    
    if (strchr("gpiuvfndtlm", c))
    { switch (c)
      {
        case 'g': SERIALX.printf("%02d\r\n",parameters.on_time); break;
    1d7c:	ldr	r3, [pc, #96]	; (1de0 <doMenu()+0x2a4>)
    1d7e:	ldr	r1, [pc, #120]	; (1df8 <doMenu()+0x2bc>)
    1d80:	ldrh	r2, [r3, #0]
    1d82:	ldr	r0, [pc, #76]	; (1dd0 <doMenu()+0x294>)
    1d84:	bl	ae9c <Print::printf(char const*, ...)>
    1d88:	b.n	1b46 <doMenu()+0xa>
        case 'p': SERIALX.printf("%02d\r\n",parameters.off_time); break;
        case 'i': SERIALX.printf("%02d\r\n",parameters.first_hour);break;
    1d8a:	ldr	r3, [pc, #84]	; (1de0 <doMenu()+0x2a4>)
    1d8c:	ldr	r1, [pc, #104]	; (1df8 <doMenu()+0x2bc>)
    1d8e:	ldrh	r2, [r3, #4]
    1d90:	ldr	r0, [pc, #60]	; (1dd0 <doMenu()+0x294>)
    1d92:	bl	ae9c <Print::printf(char const*, ...)>
    1d96:	b.n	1b46 <doMenu()+0xa>
        case 'v': SERIALX.printf("%02d\r\n",parameters.third_hour);break;
        case 'f': SERIALX.printf("%02d\r\n",parameters.last_hour);break;
        case 'n': SERIALX.printf("%s\r\n",parameters.name);break;  // could be (unique) mac address
        case 'd': SERIALX.printf("%s\r\n",getDate(text));break;
        case 't': SERIALX.printf("%s\r\n",getTime(text));break;
        case 'l': SERIALX.printf("%04d\r\n",getLightSensor());break;
    1d98:	movs	r2, #0
    1d9a:	ldr	r1, [pc, #96]	; (1dfc <doMenu()+0x2c0>)
    1d9c:	ldr	r0, [pc, #48]	; (1dd0 <doMenu()+0x294>)
    1d9e:	bl	ae9c <Print::printf(char const*, ...)>
    1da2:	b.n	1b46 <doMenu()+0xa>
        case 'm': SERIALX.printf("%s\r\n",encode_mac(text)); break;
    1da4:	ldr	r0, [pc, #72]	; (1df0 <doMenu()+0x2b4>)
    1da6:	bl	1840 <encode_mac(char*)>
    1daa:	ldr	r1, [pc, #72]	; (1df4 <doMenu()+0x2b8>)
    1dac:	mov	r2, r0
    1dae:	ldr	r0, [pc, #32]	; (1dd0 <doMenu()+0x294>)
    1db0:	bl	ae9c <Print::printf(char const*, ...)>
    1db4:	b.n	1b46 <doMenu()+0xa>
        case 'p': SERIALX.printf("%02d\r\n",parameters.off_time); break;
        case 'i': SERIALX.printf("%02d\r\n",parameters.first_hour);break;
        case 'u': SERIALX.printf("%02d\r\n",parameters.second_hour);break;
        case 'v': SERIALX.printf("%02d\r\n",parameters.third_hour);break;
        case 'f': SERIALX.printf("%02d\r\n",parameters.last_hour);break;
        case 'n': SERIALX.printf("%s\r\n",parameters.name);break;  // could be (unique) mac address
    1db6:	ldr	r2, [pc, #72]	; (1e00 <doMenu()+0x2c4>)
    1db8:	ldr	r1, [pc, #56]	; (1df4 <doMenu()+0x2b8>)
    1dba:	ldr	r0, [pc, #20]	; (1dd0 <doMenu()+0x294>)
    1dbc:	bl	ae9c <Print::printf(char const*, ...)>
    1dc0:	b.n	1b46 <doMenu()+0xa>
    1dc2:	nop
    1dc4:	.word	0x4003d014
    1dc8:	.word	0x4003d004
    1dcc:	.word	0x00013a24
    1dd0:	.word	0x1fff0898
    1dd4:	.word	0x00013a2c
    1dd8:	.word	0x00013a50
    1ddc:	.word	0x1fff1f48
    1de0:	.word	0x1fff0734
    1de4:	.word	0x1fff073f
    1de8:	.word	0x4003d000
    1dec:	.word	0x00013848
    1df0:	.word	0x1fff2458
    1df4:	.word	0x00013a40
    1df8:	.word	0x00013a38
    1dfc:	.word	0x00013a48
    1e00:	.word	0x1fff0740
    
    if (strchr("gpiuvfndtlm", c))
    { switch (c)
      {
        case 'g': SERIALX.printf("%02d\r\n",parameters.on_time); break;
        case 'p': SERIALX.printf("%02d\r\n",parameters.off_time); break;
    1e04:	ldr	r3, [pc, #60]	; (1e44 <doMenu()+0x308>)
    1e06:	ldr	r1, [pc, #64]	; (1e48 <doMenu()+0x30c>)
    1e08:	ldrh	r2, [r3, #2]
    1e0a:	ldr	r0, [pc, #64]	; (1e4c <doMenu()+0x310>)
    1e0c:	bl	ae9c <Print::printf(char const*, ...)>
    1e10:	b.n	1b46 <doMenu()+0xa>
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1e12:	ldr	r3, [pc, #60]	; (1e50 <doMenu()+0x314>)
}

static char * getTime(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1e14:	add	r0, sp, #12
  return 0;
}

/**************** FOR Tim's Menu ***************************************/
#include <time.h>
static uint32_t getRTC(void) {return RTC_TSR;}
    1e16:	ldr	r1, [r3, #0]
}

static char * getTime(char *text)
{
    uint32_t tt=getRTC();
    struct tm tx =seconds2tm(tt);
    1e18:	bl	1158 <seconds2tm(unsigned long)>
    sprintf(text,"%02d:%02d:%02d",tx.tm_hour, tx.tm_min, tx.tm_sec);
    1e1c:	ldr	r1, [sp, #12]
    1e1e:	str	r1, [sp, #0]
    1e20:	ldr	r3, [sp, #16]
    1e22:	ldr	r2, [sp, #20]
    1e24:	ldr	r1, [pc, #44]	; (1e54 <doMenu()+0x318>)
    1e26:	b.n	1d5c <doMenu()+0x220>
    { switch (c)
      {
        case 'g': SERIALX.printf("%02d\r\n",parameters.on_time); break;
        case 'p': SERIALX.printf("%02d\r\n",parameters.off_time); break;
        case 'i': SERIALX.printf("%02d\r\n",parameters.first_hour);break;
        case 'u': SERIALX.printf("%02d\r\n",parameters.second_hour);break;
    1e28:	ldr	r3, [pc, #24]	; (1e44 <doMenu()+0x308>)
    1e2a:	ldr	r1, [pc, #28]	; (1e48 <doMenu()+0x30c>)
    1e2c:	ldrh	r2, [r3, #6]
    1e2e:	ldr	r0, [pc, #28]	; (1e4c <doMenu()+0x310>)
    1e30:	bl	ae9c <Print::printf(char const*, ...)>
    1e34:	b.n	1b46 <doMenu()+0xa>
        case 'v': SERIALX.printf("%02d\r\n",parameters.third_hour);break;
    1e36:	ldr	r3, [pc, #12]	; (1e44 <doMenu()+0x308>)
    1e38:	ldr	r1, [pc, #12]	; (1e48 <doMenu()+0x30c>)
    1e3a:	ldrh	r2, [r3, #8]
    1e3c:	ldr	r0, [pc, #12]	; (1e4c <doMenu()+0x310>)
    1e3e:	bl	ae9c <Print::printf(char const*, ...)>
    1e42:	b.n	1b46 <doMenu()+0xa>
    1e44:	.word	0x1fff0734
    1e48:	.word	0x00013a38
    1e4c:	.word	0x1fff0898
    1e50:	.word	0x4003d000
    1e54:	.word	0x00013868

00001e58 <SdBase<FsVolume>::errorHalt(Print*)>:
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(Print* pr) {
    1e58:	mov	r5, r0
    1e5a:	ldr.w	r0, [r0, #1156]	; 0x484
    1e5e:	push	{r3, lr}
    1e60:	mov	r4, r1


  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1e62:	cbz	r0, 1e94 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
      return m_card->errorCode();
    1e64:	ldr	r3, [r0, #0]
    1e66:	ldr	r3, [r3, #36]	; 0x24
    1e68:	blx	r3
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(Print* pr) {
    if (sdErrorCode()) {
    1e6a:	cbnz	r0, 1e94 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
    1e6c:	ldr.w	r3, [r5, #1144]	; 0x478
  /** \return Partition type, FAT_TYPE_EXFAT, FAT_TYPE_FAT32,
   *          FAT_TYPE_FAT16, or zero for error.
   */
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
    1e70:	cbz	r3, 1e82 <SdBase<FsVolume>::errorHalt(Print*)+0x2a>
    1e72:	ldrb	r3, [r3, #7]
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    1e74:	cbz	r3, 1e78 <SdBase<FsVolume>::errorHalt(Print*)+0x20>
    1e76:	b.n	1e76 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
      pr->println(F("Check SD format."));
    1e78:	mov	r0, r4
    1e7a:	ldr	r1, [pc, #104]	; (1ee4 <SdBase<FsVolume>::errorHalt(Print*)+0x8c>)
    1e7c:	bl	1134 <Print::println(__FlashStringHelper const*)>
    1e80:	b.n	1e76 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1e82:	ldr.w	r3, [r5, #1148]	; 0x47c
    1e86:	cmp	r3, #0
    1e88:	beq.n	1e78 <SdBase<FsVolume>::errorHalt(Print*)+0x20>
    1e8a:	ldrb.w	r3, [r3, #1084]	; 0x43c
    if (sdErrorCode()) {
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    1e8e:	cmp	r3, #0
    1e90:	bne.n	1e76 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1e92:	b.n	1e78 <SdBase<FsVolume>::errorHalt(Print*)+0x20>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1e94:	ldr	r1, [pc, #80]	; (1ee8 <SdBase<FsVolume>::errorHalt(Print*)+0x90>)
    1e96:	mov	r0, r4
    1e98:	bl	1118 <Print::write(char const*)>
    1e9c:	ldr.w	r0, [r5, #1156]	; 0x484


  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1ea0:	cbz	r0, 1edc <SdBase<FsVolume>::errorHalt(Print*)+0x84>
      return m_card->errorCode();
    1ea2:	ldr	r3, [r0, #0]
    1ea4:	ldr	r3, [r3, #36]	; 0x24
    1ea6:	blx	r3
    1ea8:	mov	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1eaa:	movs	r3, #0
    1eac:	movs	r2, #16
    1eae:	mov	r0, r4
    1eb0:	bl	aeb8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1eb4:	ldr	r1, [pc, #52]	; (1eec <SdBase<FsVolume>::errorHalt(Print*)+0x94>)
    1eb6:	mov	r0, r4
    1eb8:	bl	1118 <Print::write(char const*)>
    1ebc:	ldr.w	r0, [r5, #1156]	; 0x484
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    1ec0:	cbz	r0, 1ee0 <SdBase<FsVolume>::errorHalt(Print*)+0x88>
    1ec2:	ldr	r3, [r0, #0]
    1ec4:	ldr	r3, [r3, #40]	; 0x28
    1ec6:	blx	r3
    1ec8:	uxtb	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1eca:	movs	r3, #0
    1ecc:	movs	r2, #16
    1ece:	mov	r0, r4
    1ed0:	bl	aeb8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    1ed4:	mov	r0, r4
    1ed6:	bl	ae6c <Print::println()>
    1eda:	b.n	1e76 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>


  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1edc:	movs	r1, #39	; 0x27
    1ede:	b.n	1eaa <SdBase<FsVolume>::errorHalt(Print*)+0x52>
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    1ee0:	mov	r1, r0
    1ee2:	b.n	1eca <SdBase<FsVolume>::errorHalt(Print*)+0x72>
    1ee4:	.word	0x00013a6c
    1ee8:	.word	0x00013a5c
    1eec:	.word	0x00013a68

00001ef0 <SdBase<FsVolume>::errorHalt(char const*)>:
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1ef0:	ldr	r4, [pc, #28]	; (1f10 <SdBase<FsVolume>::errorHalt(char const*)+0x20>)
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] msg Message to print.
   */
  void errorHalt(const char* msg) {errorHalt(&Serial, msg);}
    1ef2:	push	{r3, lr}
    1ef4:	mov	r5, r0
    1ef6:	mov	r6, r1
    1ef8:	mov	r0, r4
    1efa:	ldr	r1, [pc, #24]	; (1f14 <SdBase<FsVolume>::errorHalt(char const*)+0x24>)
    1efc:	bl	1118 <Print::write(char const*)>
   * \param[in] pr Print destination.
   * \param[in] msg Message to print.
   */
  void errorHalt(Print* pr, const char* msg) {
    pr->print(F("error: "));
    pr->println(msg);
    1f00:	mov	r1, r6
    1f02:	mov	r0, r4
    1f04:	bl	1134 <Print::println(__FlashStringHelper const*)>
    errorHalt(pr);
    1f08:	mov	r1, r4
    1f0a:	mov	r0, r5
    1f0c:	bl	1e58 <SdBase<FsVolume>::errorHalt(Print*)>
    1f10:	.word	0x1fff0898
    1f14:	.word	0x00013a80

00001f18 <logLightSensor()>:
//  lux = LightSensor.GetLightIntensity();
  return lux;
}

void logLightSensor(void)
{
    1f18:	push	{r4, r5, lr}
  int lux =0;
  lux=getLightSensor();
  
  struct tm tx=seconds2tm(RTC_TSR);  
    1f1a:	ldr	r3, [pc, #144]	; (1fac <logLightSensor()+0x94>)
//  lux = LightSensor.GetLightIntensity();
  return lux;
}

void logLightSensor(void)
{
    1f1c:	sub	sp, #140	; 0x8c
  int lux =0;
  lux=getLightSensor();
  
  struct tm tx=seconds2tm(RTC_TSR);  
    1f1e:	ldr	r1, [r3, #0]
    1f20:	add	r0, sp, #20
    1f22:	bl	1158 <seconds2tm(unsigned long)>
  
  char txt[80];
  sprintf(txt,"%4d/%02d/%02d %02d:%02d %d\r\n", 
      tx.tm_year, tx.tm_mon, tx.tm_mday,tx.tm_hour, tx.tm_min, lux);
    1f26:	ldr	r1, [sp, #32]
    1f28:	ldr	r5, [sp, #28]
    1f2a:	ldr	r0, [sp, #24]
    1f2c:	ldr	r3, [sp, #36]	; 0x24
    1f2e:	str	r0, [sp, #8]
    1f30:	movs	r4, #0
    1f32:	stmia.w	sp, {r1, r5}
    1f36:	ldr	r2, [sp, #40]	; 0x28
    1f38:	str	r4, [sp, #12]
    1f3a:	add	r0, sp, #56	; 0x38
    1f3c:	ldr	r1, [pc, #112]	; (1fb0 <logLightSensor()+0x98>)
    1f3e:	bl	cf50 <sprintf>
      return nbuf;
    }

    void logText(char *filename, char * txt)
    { int nbuf=0;
      char *ptr=txt; while(*ptr++) nbuf++; // length of text without trailing zero (?)
    1f42:	ldrb.w	r3, [sp, #56]	; 0x38
    1f46:	cbz	r3, 1fa0 <logLightSensor()+0x88>
    1f48:	add	r3, sp, #56	; 0x38
    1f4a:	ldrb.w	r2, [r3, #1]!
    1f4e:	adds	r4, #1
    1f50:	cmp	r2, #0
    1f52:	bne.n	1f4a <logLightSensor()+0x32>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    1f54:	ldr	r3, [pc, #92]	; (1fb4 <logLightSensor()+0x9c>)
    1f56:	ldr	r1, [r3, #0]
    1f58:	cbz	r1, 1f86 <logLightSensor()+0x6e>
    1f5a:	ldr	r5, [pc, #92]	; (1fb8 <logLightSensor()+0xa0>)
    1f5c:	ldr	r2, [pc, #92]	; (1fbc <logLightSensor()+0xa4>)
    1f5e:	add.w	r0, r5, #1208	; 0x4b8
    1f62:	movs	r3, #70	; 0x46
    1f64:	bl	3140 <FsFile::open(FsVolume*, char const*, unsigned char)>
    1f68:	cbz	r0, 1f86 <logLightSensor()+0x6e>
    1f6a:	ldr.w	r0, [r5, #1280]	; 0x500
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1f6e:	cbz	r0, 1f8e <logLightSensor()+0x76>
    1f70:	add	r1, sp, #56	; 0x38
    1f72:	mov	r2, r4
    1f74:	bl	5658 <FatFile::write(void const*, unsigned int)>
      if (!file.open(filename, O_CREAT | O_WRITE |O_APPEND)) sd.errorHalt("logText file.open failed");
      if (nbuf != file.write((uint8_t *)txt, nbuf)) sd.errorHalt("logText file.write failed");
    1f78:	cmp	r4, r0
    1f7a:	bne.n	1fa4 <logLightSensor()+0x8c>
      file.close();
    1f7c:	ldr	r0, [pc, #64]	; (1fc0 <logLightSensor()+0xa8>)
    1f7e:	bl	3118 <FsFile::close()>
  mFS.logText((char *)"lux.txt",(char *)txt);
}
    1f82:	add	sp, #140	; 0x8c
    1f84:	pop	{r4, r5, pc}
    }

    void logText(char *filename, char * txt)
    { int nbuf=0;
      char *ptr=txt; while(*ptr++) nbuf++; // length of text without trailing zero (?)
      if (!file.open(filename, O_CREAT | O_WRITE |O_APPEND)) sd.errorHalt("logText file.open failed");
    1f86:	ldr	r1, [pc, #60]	; (1fc4 <logLightSensor()+0xac>)
    1f88:	ldr	r0, [pc, #44]	; (1fb8 <logLightSensor()+0xa0>)
    1f8a:	bl	1ef0 <SdBase<FsVolume>::errorHalt(char const*)>
    1f8e:	ldr.w	r0, [r5, #1284]	; 0x504
    1f92:	cmp	r0, #0
    1f94:	beq.n	1f78 <logLightSensor()+0x60>
    1f96:	add	r1, sp, #56	; 0x38
    1f98:	mov	r2, r4
    1f9a:	bl	4ba0 <ExFatFile::write(void const*, unsigned int)>
    1f9e:	b.n	1f78 <logLightSensor()+0x60>
      if ((int)nbuf != file.read(buffer, nbuf)) sd.errorHalt("read failed");
      return nbuf;
    }

    void logText(char *filename, char * txt)
    { int nbuf=0;
    1fa0:	mov	r4, r3
    1fa2:	b.n	1f54 <logLightSensor()+0x3c>
      char *ptr=txt; while(*ptr++) nbuf++; // length of text without trailing zero (?)
      if (!file.open(filename, O_CREAT | O_WRITE |O_APPEND)) sd.errorHalt("logText file.open failed");
      if (nbuf != file.write((uint8_t *)txt, nbuf)) sd.errorHalt("logText file.write failed");
    1fa4:	ldr	r1, [pc, #32]	; (1fc8 <logLightSensor()+0xb0>)
    1fa6:	ldr	r0, [pc, #16]	; (1fb8 <logLightSensor()+0xa0>)
    1fa8:	bl	1ef0 <SdBase<FsVolume>::errorHalt(char const*)>
    1fac:	.word	0x4003d000
    1fb0:	.word	0x00013ab0
    1fb4:	.word	0x2002035c
    1fb8:	.word	0x1fff1f4c
    1fbc:	.word	0x00013ad0
    1fc0:	.word	0x1fff2404
    1fc4:	.word	0x00013af4
    1fc8:	.word	0x00013ad8

00001fcc <readConfig(void*)>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    1fcc:	ldr	r3, [pc, #176]	; (2080 <readConfig(void*)+0xb4>)
    1fce:	ldr	r1, [r3, #0]
    1fd0:	cmp	r1, #0
    1fd2:	beq.n	2056 <readConfig(void*)+0x8a>
  mFS.close();
  
}

void readConfig(void * ptr)
{
    1fd4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fd8:	movs	r3, #1
    1fda:	sub	sp, #32
    1fdc:	mov	r4, r0
    1fde:	ldr	r2, [pc, #164]	; (2084 <readConfig(void*)+0xb8>)
    1fe0:	ldr	r0, [pc, #164]	; (2088 <readConfig(void*)+0xbc>)
    1fe2:	bl	3140 <FsFile::open(FsVolume*, char const*, unsigned char)>
    1fe6:	cbz	r0, 2050 <readConfig(void*)+0x84>
    1fe8:	ldr	r6, [pc, #160]	; (208c <readConfig(void*)+0xc0>)
    1fea:	add.w	r7, r4, #12
    1fee:	mov	r8, r6
    1ff0:	b.n	2010 <readConfig(void*)+0x44>
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    1ff2:	movs	r2, #4
    1ff4:	mov	r1, sp
    1ff6:	bl	51dc <FatFile::read(void*, unsigned int)>
    1ffa:	mov	r5, r0
      return nbuf;
    }

    uint32_t read(uint8_t *buffer, uint32_t nbuf)
    {      
      if ((int)nbuf != file.read(buffer, nbuf)) sd.errorHalt("read failed");
    1ffc:	cmp	r5, #4
    1ffe:	bne.n	2076 <readConfig(void*)+0xaa>
  char text[32];
  uint16_t *data = (uint16_t *) ptr;
  if(!mFS.open((char*)"Config.txt",O_RDONLY)) return;
  for(int ii=0; ii<6; ii++)
    {mFS.read((uint8_t*)text,4); sscanf(text,"%d",&data[ii]);}
    2000:	mov	r2, r4
    2002:	ldr	r1, [pc, #140]	; (2090 <readConfig(void*)+0xc4>)
    2004:	adds	r4, #2
    2006:	mov	r0, sp
    2008:	bl	cf9c <sscanf>
void readConfig(void * ptr)
{
  char text[32];
  uint16_t *data = (uint16_t *) ptr;
  if(!mFS.open((char*)"Config.txt",O_RDONLY)) return;
  for(int ii=0; ii<6; ii++)
    200c:	cmp	r7, r4
    200e:	beq.n	202a <readConfig(void*)+0x5e>
    2010:	ldr.w	r0, [r6, #1280]	; 0x500
    2014:	cmp	r0, #0
    2016:	bne.n	1ff2 <readConfig(void*)+0x26>
    2018:	ldr.w	r0, [r8, #1284]	; 0x504
    201c:	cbz	r0, 2076 <readConfig(void*)+0xaa>
    201e:	movs	r2, #4
    2020:	mov	r1, sp
    2022:	bl	33c8 <ExFatFile::read(void*, unsigned int)>
    2026:	mov	r5, r0
    2028:	b.n	1ffc <readConfig(void*)+0x30>
    202a:	ldr.w	r0, [r6, #1280]	; 0x500
    202e:	ldr	r3, [pc, #92]	; (208c <readConfig(void*)+0xc0>)
    2030:	cbz	r0, 2066 <readConfig(void*)+0x9a>
    2032:	mov	r2, r5
    2034:	mov	r1, r7
    2036:	bl	51dc <FatFile::read(void*, unsigned int)>
    203a:	cmp	r0, #4
    203c:	bne.n	2076 <readConfig(void*)+0xaa>
    203e:	ldr.w	r0, [r6, #1280]	; 0x500
    2042:	ldr	r3, [pc, #72]	; (208c <readConfig(void*)+0xc0>)
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    2044:	cbz	r0, 2058 <readConfig(void*)+0x8c>
    2046:	bl	55e0 <FatFile::truncate()>
    }

    void close(void)
    {
      file.truncate();
      file.close();
    204a:	ldr	r0, [pc, #60]	; (2088 <readConfig(void*)+0xbc>)
    204c:	bl	3118 <FsFile::close()>
    {mFS.read((uint8_t*)text,4); sscanf(text,"%d",&data[ii]);}
  mFS.read((uint8_t*)&data[6],4);
  mFS.close();
}
    2050:	add	sp, #32
    2052:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2056:	bx	lr
    2058:	ldr.w	r0, [r3, #1284]	; 0x504
    205c:	cmp	r0, #0
    205e:	beq.n	204a <readConfig(void*)+0x7e>
    2060:	bl	4a80 <ExFatFile::truncate()>
    2064:	b.n	204a <readConfig(void*)+0x7e>
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    2066:	ldr.w	r0, [r3, #1284]	; 0x504
    206a:	cbz	r0, 2076 <readConfig(void*)+0xaa>
    206c:	mov	r2, r5
    206e:	mov	r1, r7
    2070:	bl	33c8 <ExFatFile::read(void*, unsigned int)>
    2074:	b.n	203a <readConfig(void*)+0x6e>
      return nbuf;
    }

    uint32_t read(uint8_t *buffer, uint32_t nbuf)
    {      
      if ((int)nbuf != file.read(buffer, nbuf)) sd.errorHalt("read failed");
    2076:	ldr	r1, [pc, #28]	; (2094 <readConfig(void*)+0xc8>)
    2078:	ldr	r0, [pc, #16]	; (208c <readConfig(void*)+0xc0>)
    207a:	bl	1ef0 <SdBase<FsVolume>::errorHalt(char const*)>
    207e:	nop
    2080:	.word	0x2002035c
    2084:	.word	0x00013b10
    2088:	.word	0x1fff2404
    208c:	.word	0x1fff1f4c
    2090:	.word	0x00013b28
    2094:	.word	0x00013b1c

00002098 <storeConfig(void*)>:
  mFS.logText((char *)"lux.txt",(char *)txt);
}


void storeConfig(void * ptr)
{ char text[32];
    2098:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    209c:	ldr	r3, [pc, #184]	; (2158 <storeConfig(void*)+0xc0>)
    209e:	ldr	r1, [r3, #0]
    20a0:	sub	sp, #36	; 0x24
    20a2:	mov	r8, r0
    20a4:	cbz	r1, 20b0 <storeConfig(void*)+0x18>
    20a6:	movs	r3, #82	; 0x52
    20a8:	ldr	r2, [pc, #176]	; (215c <storeConfig(void*)+0xc4>)
    20aa:	ldr	r0, [pc, #180]	; (2160 <storeConfig(void*)+0xc8>)
    20ac:	bl	3140 <FsFile::open(FsVolume*, char const*, unsigned char)>
    20b0:	ldr	r6, [pc, #176]	; (2164 <storeConfig(void*)+0xcc>)
    20b2:	sub.w	r4, r8, #2
    20b6:	mov	r9, r6
    20b8:	add.w	r7, r8, #10
    20bc:	b.n	20ce <storeConfig(void*)+0x36>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    20be:	mov	r2, r5
    20c0:	mov	r1, sp
    20c2:	bl	5658 <FatFile::write(void const*, unsigned int)>
      file.close();
    }

    uint32_t write(uint8_t *buffer, uint32_t nbuf)
    {
      if (nbuf != file.write(buffer, nbuf)) sd.errorHalt("write failed");
    20c6:	cmp	r5, r0
    20c8:	bne.n	2150 <storeConfig(void*)+0xb8>
  uint16_t *data = (uint16_t *) ptr;
  mFS.open((char*)"Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<6; ii++)
    20ca:	cmp	r7, r4
    20cc:	beq.n	20fc <storeConfig(void*)+0x64>
    {sprintf(text,"%2d\r\n",data[ii]); mFS.write((uint8_t*)text,strlen(text));}
    20ce:	ldrh.w	r2, [r4, #2]!
    20d2:	ldr	r1, [pc, #148]	; (2168 <storeConfig(void*)+0xd0>)
    20d4:	mov	r0, sp
    20d6:	bl	cf50 <sprintf>
    20da:	mov	r0, sp
    20dc:	bl	d100 <strlen>
    20e0:	mov	r5, r0
    20e2:	ldr.w	r0, [r6, #1280]	; 0x500
    20e6:	cmp	r0, #0
    20e8:	bne.n	20be <storeConfig(void*)+0x26>
    20ea:	ldr.w	r0, [r9, #1284]	; 0x504
    20ee:	cmp	r0, #0
    20f0:	beq.n	20c6 <storeConfig(void*)+0x2e>
    20f2:	mov	r2, r5
    20f4:	mov	r1, sp
    20f6:	bl	4ba0 <ExFatFile::write(void const*, unsigned int)>
    20fa:	b.n	20c6 <storeConfig(void*)+0x2e>
    20fc:	ldr.w	r0, [r6, #1280]	; 0x500
    2100:	ldr	r3, [pc, #96]	; (2164 <storeConfig(void*)+0xcc>)
  mFS.write((uint8_t *)&data[6],4);
    2102:	add.w	r1, r8, #12
    2106:	cbz	r0, 212a <storeConfig(void*)+0x92>
    2108:	movs	r2, #4
    210a:	bl	5658 <FatFile::write(void const*, unsigned int)>
    210e:	cmp	r0, #4
    2110:	bne.n	2150 <storeConfig(void*)+0xb8>
    2112:	ldr.w	r0, [r6, #1280]	; 0x500
    2116:	ldr	r3, [pc, #76]	; (2164 <storeConfig(void*)+0xcc>)
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    2118:	cbz	r0, 2138 <storeConfig(void*)+0xa0>
    211a:	bl	55e0 <FatFile::truncate()>
    }

    void close(void)
    {
      file.truncate();
      file.close();
    211e:	ldr	r0, [pc, #64]	; (2160 <storeConfig(void*)+0xc8>)
    2120:	bl	3118 <FsFile::close()>
  mFS.close();
  
}
    2124:	add	sp, #36	; 0x24
    2126:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    212a:	ldr.w	r0, [r3, #1284]	; 0x504
    212e:	cbz	r0, 2150 <storeConfig(void*)+0xb8>
    2130:	movs	r2, #4
    2132:	bl	4ba0 <ExFatFile::write(void const*, unsigned int)>
    2136:	b.n	210e <storeConfig(void*)+0x76>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    2138:	ldr.w	r0, [r3, #1284]	; 0x504
    213c:	cmp	r0, #0
    213e:	beq.n	211e <storeConfig(void*)+0x86>
    2140:	bl	4a80 <ExFatFile::truncate()>
    2144:	ldr	r0, [pc, #24]	; (2160 <storeConfig(void*)+0xc8>)
    2146:	bl	3118 <FsFile::close()>
    214a:	add	sp, #36	; 0x24
    214c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

    uint32_t write(uint8_t *buffer, uint32_t nbuf)
    {
      if (nbuf != file.write(buffer, nbuf)) sd.errorHalt("write failed");
    2150:	ldr	r1, [pc, #24]	; (216c <storeConfig(void*)+0xd4>)
    2152:	ldr	r0, [pc, #16]	; (2164 <storeConfig(void*)+0xcc>)
    2154:	bl	1ef0 <SdBase<FsVolume>::errorHalt(char const*)>
    2158:	.word	0x2002035c
    215c:	.word	0x00013b10
    2160:	.word	0x1fff2404
    2164:	.word	0x1fff1f4c
    2168:	.word	0x00013b2c
    216c:	.word	0x00013aa0

00002170 <setup>:
void mySystick_isr(void){ systick_millis_count++;}
void yield(void){}
//
// Arduino Setup
void setup(void)
{
    2170:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // redirect Systick 
  _VectorsRam[15] = mySystick_isr;
    2174:	ldr	r3, [pc, #712]	; (2440 <setup+0x2d0>)
    2176:	ldr	r2, [pc, #716]	; (2444 <setup+0x2d4>)
    2178:	str	r2, [r3, #60]	; 0x3c

  // check first (with pin2 set to low) if we wanted to enter menu mode
  pinMode(2,INPUT_PULLUP);
    217a:	movs	r1, #2
    217c:	mov	r0, r1
void mySystick_isr(void){ systick_millis_count++;}
void yield(void){}
//
// Arduino Setup
void setup(void)
{
    217e:	sub	sp, #60	; 0x3c
  // redirect Systick 
  _VectorsRam[15] = mySystick_isr;

  // check first (with pin2 set to low) if we wanted to enter menu mode
  pinMode(2,INPUT_PULLUP);
    2180:	bl	9b48 <pinMode>
  delay(1000);
    2184:	mov.w	r0, #1000	; 0x3e8
    2188:	bl	9c04 <delay>
    218c:	ldr	r7, [pc, #696]	; (2448 <setup+0x2d8>)
  pinMode(23, OUTPUT);
    218e:	movs	r1, #1
    2190:	movs	r0, #23
    2192:	bl	9b48 <pinMode>
    2196:	movs	r2, #4
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
    2198:	ldr	r3, [pc, #688]	; (244c <setup+0x2dc>)
			} else if (pin == 21) {
				CORE_PIN21_PORTCLEAR = CORE_PIN21_BITMASK;
			} else if (pin == 22) {
				CORE_PIN22_PORTCLEAR = CORE_PIN22_BITMASK;
			} else if (pin == 23) {
				CORE_PIN23_PORTCLEAR = CORE_PIN23_BITMASK;
    219a:	str	r2, [r7, #0]
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
    219c:	ldr	r3, [r3, #0]
  digitalWriteFast(23,LOW); // turn sensor and mic ON 
  
  if(digitalReadFast(2)==LOW)
    219e:	lsls	r2, r3, #31
    21a0:	bpl.w	230c <setup+0x19c>
  SdFs sd;
  FsFile file;
  
  public:
    void init(void)
    { if(FS_started) return;
    21a4:	ldr	r5, [pc, #680]	; (2450 <setup+0x2e0>)

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    21a6:	ldr	r3, [pc, #684]	; (2454 <setup+0x2e4>)
    21a8:	ldrh	r2, [r5, #0]
		header.nsamp = nsamp;
    21aa:	movs	r0, #128	; 0x80
		header.fsamp = fsamp;
    21ac:	movw	r1, #44100	; 0xac44

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    21b0:	movs	r4, #1
		header.nsamp = nsamp;
    21b2:	str	r0, [r3, #20]
		header.fsamp = fsamp;
    21b4:	str	r1, [r3, #12]

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    21b6:	str	r4, [r3, #8]
    21b8:	cmp	r2, #0
    21ba:	beq.w	236a <setup+0x1fa>
 * 
 */
void uSD_IF::init(void)
{
  mFS.init();
  fileStatus=0;
    21be:	ldr	r5, [pc, #664]	; (2458 <setup+0x2e8>)
  }
  else
  {
    #ifdef DO_LOGGER
      loggerSetup(N_CHAN, F_SAMP, N_SAMP);
      readConfig(&parameters);
    21c0:	ldr	r0, [pc, #664]	; (245c <setup+0x2ec>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    21c2:	ldr	r4, [pc, #668]	; (2460 <setup+0x2f0>)
    21c4:	ldr	r6, [pc, #668]	; (2464 <setup+0x2f4>)
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    21c6:	ldr.w	r9, [pc, #640]	; 2448 <setup+0x2d8>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    21ca:	ldr.w	r8, [pc, #732]	; 24a8 <setup+0x338>
    21ce:	movs	r3, #0
    21d0:	strh	r3, [r5, #14]
    21d2:	bl	1fcc <readConfig(void*)>
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
}

void doBlink(uint32_t dt, uint32_t msec)
{ pinMode(13,OUTPUT);
    21d6:	movs	r1, #1
    21d8:	movs	r0, #13
    21da:	bl	9b48 <pinMode>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    21de:	ldr	r3, [r4, #0]
    21e0:	str	r3, [sp, #40]	; 0x28
	return ret;
    21e2:	ldr	r1, [sp, #40]	; 0x28
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    21e4:	ldr.w	ip, [pc, #708]	; 24ac <setup+0x33c>
    21e8:	ldr	r0, [r6, #0]
    21ea:	addw	r1, r1, #1500	; 0x5dc
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    21ee:	mov	r7, r4
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    21f0:	mov.w	lr, #32
    21f4:	b.n	2204 <setup+0x94>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    21f6:	ldr	r3, [r7, #0]
    21f8:	str	r3, [sp, #32]
	return ret;
    21fa:	ldr	r3, [sp, #32]

//------------------------ Asynchronous Blink ------------------------------
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1-to<msec) {yield(); return;}
    21fc:	subs	r2, r3, r0
    21fe:	cmp.w	r2, #500	; 0x1f4
    2202:	bcs.n	22ee <setup+0x17e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2204:	ldr	r3, [r4, #0]
    2206:	str	r3, [sp, #36]	; 0x24
	return ret;
    2208:	ldr	r3, [sp, #36]	; 0x24
}

void doBlink(uint32_t dt, uint32_t msec)
{ pinMode(13,OUTPUT);
  uint32_t t0=millis();
  while(millis()<t0+dt) blink(msec);
    220a:	cmp	r1, r3
    220c:	bhi.n	21f6 <setup+0x86>
	#ifdef DO_USB_AUDIO
		usbAudio_init();
	#endif

  // limit acquisition to specific hours of day
  check_hibernate(&parameters,0);
    220e:	movs	r1, #0
    2210:	ldr	r0, [pc, #584]	; (245c <setup+0x2ec>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2212:	ldr	r7, [pc, #588]	; (2460 <setup+0x2f0>)
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    2214:	ldr.w	r9, [pc, #656]	; 24a8 <setup+0x338>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2218:	ldr.w	r8, [pc, #556]	; 2448 <setup+0x2d8>
    221c:	bl	170c <check_hibernate(parameters_s*, int)>
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
}

void doBlink(uint32_t dt, uint32_t msec)
{ pinMode(13,OUTPUT);
    2220:	movs	r1, #1
    2222:	movs	r0, #13
    2224:	bl	9b48 <pinMode>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2228:	ldr	r3, [r4, #0]
    222a:	str	r3, [sp, #52]	; 0x34
	return ret;
    222c:	ldr	r1, [sp, #52]	; 0x34
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    222e:	ldr.w	lr, [pc, #636]	; 24ac <setup+0x33c>
    2232:	ldr	r0, [r6, #0]
    2234:	add.w	r1, r1, #1000	; 0x3e8
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    2238:	mov.w	ip, #32
    223c:	b.n	224a <setup+0xda>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    223e:	ldr	r3, [r7, #0]
    2240:	str	r3, [sp, #44]	; 0x2c
	return ret;
    2242:	ldr	r3, [sp, #44]	; 0x2c

//------------------------ Asynchronous Blink ------------------------------
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1-to<msec) {yield(); return;}
    2244:	subs	r2, r3, r0
    2246:	cmp	r2, #99	; 0x63
    2248:	bhi.n	22dc <setup+0x16c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    224a:	ldr	r3, [r4, #0]
    224c:	str	r3, [sp, #48]	; 0x30
	return ret;
    224e:	ldr	r3, [sp, #48]	; 0x30
}

void doBlink(uint32_t dt, uint32_t msec)
{ pinMode(13,OUTPUT);
  uint32_t t0=millis();
  while(millis()<t0+dt) blink(msec);
    2250:	cmp	r3, r1
    2252:	bcc.n	223e <setup+0xce>
    // blink for 1 second
    doBlink(1000,100);
	#endif

	#ifdef DO_LOGGER
    logLightSensor();  
    2254:	bl	1f18 <logLightSensor()>
}

inline uint16_t acqSetup(void)
{
  // initialize and start ICS43432 interface
  uint32_t fs = ICS43432.init(F_SAMP, i2s_rx_buffer, N_BUF, I2S_CHAN);
    2258:	movs	r3, #2
    225a:	str	r3, [sp, #0]
    225c:	ldr	r2, [pc, #520]	; (2468 <setup+0x2f8>)
    225e:	ldr	r0, [pc, #524]	; (246c <setup+0x2fc>)
    2260:	mov.w	r3, #512	; 0x200
    2264:	movw	r1, #44100	; 0xac44
    2268:	bl	2a00 <c_ICS43432::init(long, long*, unsigned long, unsigned short)>

	#ifdef DO_LOGGER
    logLightSensor();  
	#endif

	haveAcq=acqSetup();
    226c:	ldr	r1, [pc, #512]	; (2470 <setup+0x300>)
 loopStatus=0;
 doHibernate=0;
    226e:	ldr	r3, [pc, #516]	; (2474 <setup+0x304>)
	#ifdef DO_LOGGER
    logLightSensor();  
	#endif

	haveAcq=acqSetup();
 loopStatus=0;
    2270:	ldr	r2, [pc, #516]	; (2478 <setup+0x308>)

	#ifdef DO_LOGGER
    logLightSensor();  
	#endif

	haveAcq=acqSetup();
    2272:	adds	r7, r0, #0
    2274:	it	ne
    2276:	movne	r7, #1
    2278:	str	r7, [r1, #0]
 loopStatus=0;
    227a:	movs	r6, #0
inline void acqStart(void)
{ 
  #if DO_DEBUG == 2
    Serial.println("Start Acq");
  #endif
  ICS43432.start();
    227c:	ldr	r0, [pc, #492]	; (246c <setup+0x2fc>)

/*--------------- larger AudioRecorderLogger methods ------------------*/
template <typename T, int nq, int nd, int na>
void Logger<T,nq,nd,na>:: clear(void)
  {
    uint16_t t = tail;
    227e:	ldr	r7, [pc, #508]	; (247c <setup+0x30c>)
    logLightSensor();  
	#endif

	haveAcq=acqSetup();
 loopStatus=0;
 doHibernate=0;
    2280:	str	r6, [r3, #0]
	#ifdef DO_LOGGER
    logLightSensor();  
	#endif

	haveAcq=acqSetup();
 loopStatus=0;
    2282:	str	r6, [r2, #0]
inline void acqStart(void)
{ 
  #if DO_DEBUG == 2
    Serial.println("Start Acq");
  #endif
  ICS43432.start();
    2284:	bl	2a80 <c_ICS43432::start()>
 loopStatus=0;
 doHibernate=0;
 #if ON_TIME > 0
   acqStart();
   #ifdef DO_LOGGER
     delay(300); // delay logger to allow acq to settle down
    2288:	mov.w	r0, #300	; 0x12c
    228c:	bl	9c04 <delay>
    2290:	ldrh.w	r3, [r7, #202]	; 0xca
    while (t != head) {
    2294:	ldrh.w	r0, [r7, #200]	; 0xc8
    2298:	cmp	r3, r0
      if (++t >= nq) t = 0;
      pool.release(t);
      queue[t]=0; // remove address from queue
    229a:	it	ne
    229c:	movne	r1, r6
/*--------------- larger AudioRecorderLogger methods ------------------*/
template <typename T, int nq, int nd, int na>
void Logger<T,nq,nd,na>:: clear(void)
  {
    uint16_t t = tail;
    while (t != head) {
    229e:	beq.n	22bc <setup+0x14c>
      if (++t >= nq) t = 0;
    22a0:	adds	r3, #1
    22a2:	uxth	r3, r3
    22a4:	cmp.w	r3, #300	; 0x12c
    22a8:	it	cs
    22aa:	movcs	r3, #0
      pool.release(t);
      queue[t]=0; // remove address from queue
    22ac:	add.w	r2, r3, #38400	; 0x9600
    22b0:	adds	r2, #6
    22b2:	uxth	r3, r3
/*--------------- larger AudioRecorderLogger methods ------------------*/
template <typename T, int nq, int nd, int na>
void Logger<T,nq,nd,na>:: clear(void)
  {
    uint16_t t = tail;
    while (t != head) {
    22b4:	cmp	r3, r0
      if (++t >= nq) t = 0;
      pool.release(t);
      queue[t]=0; // remove address from queue
    22b6:	str.w	r1, [r5, r2, lsl #2]
/*--------------- larger AudioRecorderLogger methods ------------------*/
template <typename T, int nq, int nd, int na>
void Logger<T,nq,nd,na>:: clear(void)
  {
    uint16_t t = tail;
    while (t != head) {
    22ba:	bne.n	22a0 <setup+0x130>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    22bc:	ldr	r3, [r4, #0]
    22be:	str	r3, [sp, #12]
     loggerStart(); 
   #endif
   startTime=millis();
    22c0:	ldr	r1, [pc, #444]	; (2480 <setup+0x310>)
	return ret;
    22c2:	ldr	r4, [sp, #12]
      if (++t >= nq) t = 0;
      pool.release(t);
      queue[t]=0; // remove address from queue
    }
    tail = t;
    22c4:	strh.w	r0, [r7, #202]	; 0xca
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
  { maxBlockSize = na*nd*sizeof(T);}

  void start(void) { clear(); reset(); isRunning=1; enabled = 1; }
    22c8:	movs	r3, #1
class uSD_IF
{
  public:
  uSD_IF(void) {;}
  void init(void);
  void reset(void) {fileStatus=0;}
    22ca:	movs	r2, #0
    22cc:	str	r4, [r1, #0]
    22ce:	strh	r2, [r5, #14]
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
  { maxBlockSize = na*nd*sizeof(T);}

  void start(void) { clear(); reset(); isRunning=1; enabled = 1; }
    22d0:	strh	r3, [r5, #12]
    22d2:	strh.w	r3, [r7, #204]	; 0xcc
 #endif

}
    22d6:	add	sp, #60	; 0x3c
    22d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    22dc:	ldr.w	r2, [lr]
    22e0:	lsls	r2, r2, #26
    22e2:	bmi.n	2300 <setup+0x190>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    22e4:	str.w	ip, [r9]
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1-to<msec) {yield(); return;}
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
    22e8:	str	r3, [r6, #0]
    22ea:	mov	r0, r3
    22ec:	b.n	224a <setup+0xda>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    22ee:	ldr.w	r2, [ip]
    22f2:	lsls	r0, r2, #26
    22f4:	bmi.n	2306 <setup+0x196>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    22f6:	str.w	lr, [r8]
    22fa:	str	r3, [r6, #0]
    22fc:	mov	r0, r3
    22fe:	b.n	2204 <setup+0x94>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2300:	str.w	ip, [r8]
    2304:	b.n	22e8 <setup+0x178>
    2306:	str.w	lr, [r9]
    230a:	b.n	22fa <setup+0x18a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    230c:	ldr	r4, [pc, #336]	; (2460 <setup+0x2f0>)
    230e:	ldr	r6, [pc, #340]	; (2464 <setup+0x2f4>)
    2310:	ldr	r3, [r4, #0]
    2312:	str	r3, [sp, #8]
  
  if(digitalReadFast(2)==LOW)
  { 
    // signal begin of menu
    uint32_t tt=millis();
    pinMode(13,OUTPUT); // for LED
    2314:	movs	r1, #1
    2316:	movs	r0, #13
	return ret;
    2318:	ldr	r3, [sp, #8]
    231a:	ldr	r5, [pc, #360]	; (2484 <setup+0x314>)
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    231c:	ldr.w	r8, [pc, #396]	; 24ac <setup+0x33c>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    2320:	ldr.w	r9, [pc, #388]	; 24a8 <setup+0x338>
    2324:	bl	9b48 <pinMode>
    2328:	ldr	r0, [pc, #348]	; (2488 <setup+0x318>)
    232a:	ldr.w	lr, [pc, #388]	; 24b0 <setup+0x340>
    232e:	ldr	r1, [r6, #0]
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2330:	mov.w	ip, #32
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2334:	ldrb	r3, [r0, #0]
    2336:	cbz	r3, 234a <setup+0x1da>
    2338:	ldrb	r3, [r5, #0]
    233a:	lsls	r3, r3, #31
    233c:	bpl.n	234a <setup+0x1da>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    233e:	ldr	r3, [r4, #0]
    2340:	ldr.w	r2, [lr]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2344:	subs	r3, r3, r2
    2346:	cmp	r3, #14
    2348:	bhi.n	23ce <setup+0x25e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    234a:	ldr	r3, [r4, #0]
    234c:	str	r3, [sp, #16]
	return ret;
    234e:	ldr	r3, [sp, #16]

//------------------------ Asynchronous Blink ------------------------------
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1-to<msec) {yield(); return;}
    2350:	subs	r2, r3, r1
    2352:	cmp.w	r2, #1000	; 0x3e8
    2356:	bcc.n	2334 <setup+0x1c4>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    2358:	ldr.w	r2, [r8]
    235c:	lsls	r1, r2, #26
    235e:	bpl.n	23be <setup+0x24e>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2360:	str.w	ip, [r7]
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
    2364:	str	r3, [r6, #0]
    2366:	mov	r1, r3
    2368:	b.n	2334 <setup+0x1c4>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    236a:	ldr	r7, [pc, #288]	; (248c <setup+0x31c>)
    236c:	add.w	r6, r7, #1160	; 0x488
    2370:	mov	r1, r4
    2372:	mov	r0, r6
    2374:	bl	8670 <SdioCard::begin(SdioConfig)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2378:	movs	r1, #9
    237a:	ldr	r0, [pc, #276]	; (2490 <setup+0x320>)
    237c:	bl	9524 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2380:	ldr	r0, [pc, #272]	; (2494 <setup+0x324>)
    2382:	bl	ae6c <Print::println()>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    2386:	mov	r0, r6
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    2388:	str.w	r6, [r7, #1156]	; 0x484
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    238c:	bl	7cc8 <SdioCard::errorCode() const>
    2390:	mov	r2, r6
    2392:	mov	r3, r0
    2394:	ldr	r1, [pc, #256]	; (2498 <setup+0x328>)
    2396:	ldr	r0, [pc, #252]	; (2494 <setup+0x324>)
    2398:	bl	ae9c <Print::printf(char const*, ...)>
    return m_card && !m_card->errorCode();
    239c:	ldr.w	r0, [r7, #1156]	; 0x484
    23a0:	cbz	r0, 23b6 <setup+0x246>
    23a2:	ldr	r3, [r0, #0]
    23a4:	ldr	r3, [r3, #36]	; 0x24
    23a6:	blx	r3
    23a8:	cbnz	r0, 23b6 <setup+0x246>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    23aa:	ldr.w	r1, [r7, #1156]	; 0x484
    23ae:	mov	r0, r7
    23b0:	bl	31e4 <FsVolume::begin(SdCardInterface*)>
    23b4:	cbnz	r0, 23c4 <setup+0x254>
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
    23b6:	ldr	r1, [pc, #228]	; (249c <setup+0x32c>)
    23b8:	ldr	r0, [pc, #208]	; (248c <setup+0x31c>)
    23ba:	bl	1ef0 <SdBase<FsVolume>::errorHalt(char const*)>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    23be:	str.w	ip, [r9]
    23c2:	b.n	2364 <setup+0x1f4>
      // Set Time callback
      FsDateTime::callback = dateTime;
    23c4:	ldr	r3, [pc, #216]	; (24a0 <setup+0x330>)
    23c6:	ldr	r2, [pc, #220]	; (24a4 <setup+0x334>)

      FS_started=1;
    23c8:	strh	r4, [r5, #0]
  public:
    void init(void)
    { if(FS_started) return;
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    23ca:	str	r2, [r3, #0]
    23cc:	b.n	21be <setup+0x4e>
  SdFs sd;
  FsFile file;
  
  public:
    void init(void)
    { if(FS_started) return;
    23ce:	ldr.w	sl, [pc, #128]	; 2450 <setup+0x2e0>

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    23d2:	ldr.w	r8, [pc, #128]	; 2454 <setup+0x2e4>
  { 
    // signal begin of menu
    uint32_t tt=millis();
    pinMode(13,OUTPUT); // for LED
    while(!SERIALX) blink(1000);
    digitalWrite(13,LOW); // switch of Led
    23d6:	movs	r1, #0
    23d8:	movs	r0, #13
    23da:	bl	9b00 <digitalWrite>
    23de:	ldrh.w	r3, [sl]
#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
		header.nsamp = nsamp;
    23e2:	movs	r1, #128	; 0x80
		header.fsamp = fsamp;
    23e4:	movw	r2, #44100	; 0xac44

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    23e8:	movs	r5, #1
		header.nsamp = nsamp;
    23ea:	str.w	r1, [r8, #20]
		header.fsamp = fsamp;
    23ee:	str.w	r2, [r8, #12]

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    23f2:	str.w	r5, [r8, #8]
    23f6:	cmp	r3, #0
    23f8:	beq.w	254e <setup+0x3de>
 * 
 */
void uSD_IF::init(void)
{
  mFS.init();
  fileStatus=0;
    23fc:	ldr	r5, [pc, #88]	; (2458 <setup+0x2e8>)
      loggerSetup(N_CHAN, F_SAMP, N_SAMP);
      readConfig(&parameters);
    #endif
    printAll();

    parMods=0;
    23fe:	ldr.w	r9, [pc, #180]	; 24b4 <setup+0x344>

    SERIALX.begin(9600);

    #ifdef DO_LOGGER
      loggerSetup(N_CHAN, F_SAMP, N_SAMP);
      readConfig(&parameters);
    2402:	ldr	r0, [pc, #88]	; (245c <setup+0x2ec>)
    2404:	movs	r7, #0
    2406:	strh	r7, [r5, #14]
    2408:	bl	1fcc <readConfig(void*)>
    #endif
    printAll();
    240c:	bl	199c <printAll()>

    parMods=0;
    2410:	strh.w	r7, [r9]
    int16_t ret=0;
    do ret=doMenu(); while(ret==0);
    2414:	bl	1b3c <doMenu()>
    2418:	cmp	r0, #0
    241a:	beq.n	2414 <setup+0x2a4>
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
}

void doBlink(uint32_t dt, uint32_t msec)
{ pinMode(13,OUTPUT);
    241c:	movs	r1, #1
    241e:	mov	r7, r0
    2420:	movs	r0, #13
    2422:	bl	9b48 <pinMode>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2426:	ldr	r3, [r4, #0]
    2428:	str	r3, [sp, #28]
	return ret;
    242a:	ldr	r1, [sp, #28]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    242c:	ldr.w	lr, [pc, #48]	; 2460 <setup+0x2f0>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    2430:	ldr.w	fp, [pc, #120]	; 24ac <setup+0x33c>
    2434:	ldr	r2, [r6, #0]
    2436:	add.w	r1, r1, #1000	; 0x3e8
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    243a:	mov.w	ip, #32
    243e:	b.n	24c6 <setup+0x356>
    2440:	.word	0x1fff0200
    2444:	.word	0x00000f09
    2448:	.word	0x400ff088
    244c:	.word	0x400ff0d0
    2450:	.word	0x1fff152c
    2454:	.word	0x1fff1530
    2458:	.word	0x1fff2480
    245c:	.word	0x1fff0734
    2460:	.word	0x200203bc
    2464:	.word	0x1fff2478
    2468:	.word	0x1fff1748
    246c:	.word	0x1fff247c
    2470:	.word	0x1fff173c
    2474:	.word	0x1fff1738
    2478:	.word	0x1fff2454
    247c:	.word	0x20018080
    2480:	.word	0x20020154
    2484:	.word	0x200203b8
    2488:	.word	0x200204a0
    248c:	.word	0x1fff1f4c
    2490:	.word	0x00013b34
    2494:	.word	0x1fff0898
    2498:	.word	0x00013b40
    249c:	.word	0x00013b54
    24a0:	.word	0x20020360
    24a4:	.word	0x00001491
    24a8:	.word	0x400ff084
    24ac:	.word	0x400ff090
    24b0:	.word	0x20020530
    24b4:	.word	0x1fff1f48
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    24b8:	ldr.w	r3, [lr]
    24bc:	str	r3, [sp, #20]
	return ret;
    24be:	ldr	r3, [sp, #20]

//------------------------ Asynchronous Blink ------------------------------
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1-to<msec) {yield(); return;}
    24c0:	subs	r0, r3, r2
    24c2:	cmp	r0, #99	; 0x63
    24c4:	bhi.n	2532 <setup+0x3c2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    24c6:	ldr	r3, [r4, #0]
    24c8:	str	r3, [sp, #24]
	return ret;
    24ca:	ldr	r3, [sp, #24]
}

void doBlink(uint32_t dt, uint32_t msec)
{ pinMode(13,OUTPUT);
  uint32_t t0=millis();
  while(millis()<t0+dt) blink(msec);
    24cc:	cmp	r3, r1
    24ce:	bcc.n	24b8 <setup+0x348>
    //expect -1 to continue with program and a value >0 to hibernate for (val) minutes
    
    // signal end of menu
    doBlink(1000,100);

    if(parMods)
    24d0:	ldrsh.w	r3, [r9]
    24d4:	cbz	r3, 2506 <setup+0x396>
#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
		header.nsamp = nsamp;
    24d6:	movs	r2, #128	; 0x80
    24d8:	ldrh.w	r3, [sl]
    24dc:	str.w	r2, [r8, #20]

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    24e0:	mov.w	r9, #1
		header.nsamp = nsamp;
		header.fsamp = fsamp;
    24e4:	movw	r2, #44100	; 0xac44
    24e8:	ldr.w	sl, [pc, #336]	; 263c <setup+0x4cc>

#ifdef DO_LOGGER
  extern header_s header;
	void loggerSetup(uint32_t nch, uint32_t fsamp, uint32_t nsamp)
	{
		header.nch = nch;
    24ec:	str.w	r9, [r8, #8]
		header.nsamp = nsamp;
		header.fsamp = fsamp;
    24f0:	str.w	r2, [r8, #12]
    24f4:	cmp	r3, #0
    24f6:	beq.n	25b4 <setup+0x444>
    24f8:	movs	r3, #0

    if(parMods)
    {
      #ifdef DO_LOGGER
        loggerSetup(N_CHAN, F_SAMP, N_SAMP);
        storeConfig(&parameters);
    24fa:	ldr	r0, [pc, #288]	; (261c <setup+0x4ac>)
    24fc:	strh	r3, [r5, #14]
    24fe:	bl	2098 <storeConfig(void*)>
      #endif
      printAll();
    2502:	bl	199c <printAll()>
    }

    if(ret>0) go_hibernate(ret*60);
    2506:	cmp	r7, #0
    2508:	ble.w	220e <setup+0x9e>
			} else if (pin == 21) {
				CORE_PIN21_PORTCLEAR = CORE_PIN21_BITMASK;
			} else if (pin == 22) {
				CORE_PIN22_PORTCLEAR = CORE_PIN22_BITMASK;
			} else if (pin == 23) {
				CORE_PIN23_PORTCLEAR = CORE_PIN23_BITMASK;
    250c:	ldr	r3, [pc, #272]	; (2620 <setup+0x4b0>)
    250e:	rsb	r7, r7, r7, lsl #4
    2512:	movs	r2, #4
    2514:	mov.w	r8, r7, lsl #2
    2518:	str	r2, [r3, #0]
 */
#include "hibernate.h"

void go_hibernate(uint32_t seconds)
{ digitalWriteFast(23,LOW); // turn sensor an micro OFF 
  for(int ii=0;ii<24;ii++) pinMode(ii,INPUT);   
    251a:	movs	r7, #0
    251c:	uxtb	r0, r7
    251e:	movs	r1, #0
    2520:	adds	r7, #1
    2522:	bl	9b48 <pinMode>
    2526:	cmp	r7, #24
    2528:	bne.n	251c <setup+0x3ac>
  hibernate(seconds);
    252a:	mov	r0, r8
    252c:	bl	da0 <hibernate>
    2530:	b.n	220e <setup+0x9e>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    2532:	ldr.w	r2, [fp]
    2536:	lsls	r2, r2, #26
    2538:	bpl.n	2546 <setup+0x3d6>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    253a:	ldr	r2, [pc, #228]	; (2620 <setup+0x4b0>)
    253c:	str.w	ip, [r2]
void blink(uint32_t msec)
{ static uint32_t to=0;
  uint32_t t1 = millis();
  if(t1-to<msec) {yield(); return;}
  digitalWriteFast(13,!digitalReadFast(13)); 
  to=t1;
    2540:	str	r3, [r6, #0]
    2542:	mov	r2, r3
    2544:	b.n	24c6 <setup+0x356>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    2546:	ldr	r2, [pc, #220]	; (2624 <setup+0x4b4>)
    2548:	str.w	ip, [r2]
    254c:	b.n	2540 <setup+0x3d0>
    254e:	ldr.w	r9, [pc, #240]	; 2640 <setup+0x4d0>
    2552:	add.w	r7, r9, #1160	; 0x488
    2556:	mov	r1, r5
    2558:	mov	r0, r7
    255a:	bl	8670 <SdioCard::begin(SdioConfig)>
    255e:	movs	r1, #9
    2560:	ldr	r0, [pc, #196]	; (2628 <setup+0x4b8>)
    2562:	bl	9524 <usb_serial_write>
    2566:	ldr	r0, [pc, #196]	; (262c <setup+0x4bc>)
    2568:	bl	ae6c <Print::println()>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    256c:	mov	r0, r7
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    256e:	str.w	r7, [r9, #1156]	; 0x484
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    2572:	bl	7cc8 <SdioCard::errorCode() const>
    2576:	mov	r2, r7
    2578:	mov	r3, r0
    257a:	ldr	r1, [pc, #180]	; (2630 <setup+0x4c0>)
    257c:	ldr	r0, [pc, #172]	; (262c <setup+0x4bc>)
    257e:	bl	ae9c <Print::printf(char const*, ...)>
    return m_card && !m_card->errorCode();
    2582:	ldr.w	r0, [r9, #1156]	; 0x484
    2586:	cmp	r0, #0
    2588:	beq.w	23b6 <setup+0x246>
    258c:	ldr	r3, [r0, #0]
    258e:	ldr	r3, [r3, #36]	; 0x24
    2590:	blx	r3
    2592:	cmp	r0, #0
    2594:	bne.w	23b6 <setup+0x246>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2598:	ldr.w	r1, [r9, #1156]	; 0x484
    259c:	mov	r0, r9
    259e:	bl	31e4 <FsVolume::begin(SdCardInterface*)>
    25a2:	cmp	r0, #0
    25a4:	beq.w	23b6 <setup+0x246>
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    25a8:	ldr	r3, [pc, #136]	; (2634 <setup+0x4c4>)
    25aa:	ldr	r2, [pc, #140]	; (2638 <setup+0x4c8>)

      FS_started=1;
    25ac:	strh.w	r5, [sl]
  public:
    void init(void)
    { if(FS_started) return;
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    25b0:	str	r2, [r3, #0]
    25b2:	b.n	23fc <setup+0x28c>
    25b4:	ldr.w	r8, [pc, #136]	; 2640 <setup+0x4d0>
    25b8:	add.w	fp, r8, #1160	; 0x488
    25bc:	mov	r1, r9
    25be:	mov	r0, fp
    25c0:	bl	8670 <SdioCard::begin(SdioConfig)>
    25c4:	movs	r1, #9
    25c6:	ldr	r0, [pc, #96]	; (2628 <setup+0x4b8>)
    25c8:	bl	9524 <usb_serial_write>
    25cc:	ldr	r0, [pc, #92]	; (262c <setup+0x4bc>)
    25ce:	bl	ae6c <Print::println()>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    25d2:	mov	r0, fp
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    25d4:	str.w	fp, [r8, #1156]	; 0x484
Serial.printf("cardBegin: %x %d\n\r", m_card, m_card->errorCode());
    25d8:	bl	7cc8 <SdioCard::errorCode() const>
    25dc:	mov	r2, fp
    25de:	mov	r3, r0
    25e0:	ldr	r1, [pc, #76]	; (2630 <setup+0x4c0>)
    25e2:	ldr	r0, [pc, #72]	; (262c <setup+0x4bc>)
    25e4:	bl	ae9c <Print::printf(char const*, ...)>
    return m_card && !m_card->errorCode();
    25e8:	ldr.w	r0, [r8, #1156]	; 0x484
    25ec:	cmp	r0, #0
    25ee:	beq.w	23b6 <setup+0x246>
    25f2:	ldr	r3, [r0, #0]
    25f4:	ldr	r3, [r3, #36]	; 0x24
    25f6:	blx	r3
    25f8:	cmp	r0, #0
    25fa:	bne.w	23b6 <setup+0x246>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success else false.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    25fe:	ldr.w	r1, [r8, #1156]	; 0x484
    2602:	mov	r0, r8
    2604:	bl	31e4 <FsVolume::begin(SdCardInterface*)>
    2608:	cmp	r0, #0
    260a:	beq.w	23b6 <setup+0x246>
    260e:	ldr	r3, [pc, #36]	; (2634 <setup+0x4c4>)
    2610:	ldr	r2, [pc, #36]	; (2638 <setup+0x4c8>)

      FS_started=1;
    2612:	strh.w	r9, [sl]
  public:
    void init(void)
    { if(FS_started) return;
      if (!sd.begin(SD_CONFIG)) sd.errorHalt("begin failed");
      // Set Time callback
      FsDateTime::callback = dateTime;
    2616:	str	r2, [r3, #0]
    2618:	b.n	24f8 <setup+0x388>
    261a:	nop
    261c:	.word	0x1fff0734
    2620:	.word	0x400ff088
    2624:	.word	0x400ff084
    2628:	.word	0x00013b34
    262c:	.word	0x1fff0898
    2630:	.word	0x00013b40
    2634:	.word	0x20020360
    2638:	.word	0x00001491
    263c:	.word	0x1fff152c
    2640:	.word	0x1fff1f4c

00002644 <loop>:
int menu(void);

/*************************** Arduino loop ************************************/
void loop(void)
{ 
  if(!haveAcq) return;
    2644:	ldr	r3, [pc, #680]	; (28f0 <loop+0x2ac>)
    2646:	ldr	r3, [r3, #0]
    2648:	cmp	r3, #0
    264a:	beq.n	26ce <loop+0x8a>

int menu(void);

/*************************** Arduino loop ************************************/
void loop(void)
{ 
    264c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(!haveAcq) return;
  //
  if(doHibernate && (loopStatus<2)) 
    2650:	ldr	r5, [pc, #672]	; (28f4 <loop+0x2b0>)
    2652:	ldr	r4, [pc, #676]	; (28f8 <loop+0x2b4>)
    2654:	ldr	r3, [r5, #0]

int menu(void);

/*************************** Arduino loop ************************************/
void loop(void)
{ 
    2656:	sub	sp, #156	; 0x9c
  if(!haveAcq) return;
  //
  if(doHibernate && (loopStatus<2)) 
    2658:	cbz	r3, 269a <loop+0x56>
    265a:	ldr	r3, [r4, #0]
    265c:	cmp	r3, #1
    265e:	ble.n	2686 <loop+0x42>
#if ON_TIME > 0
    #ifdef DO_LOGGER
      if(loopStatus==0) loopStatus=2;
    #endif
    
    if(millis()>(parameters.on_time*60+3)*1000)  //
    2660:	ldr	r1, [pc, #664]	; (28fc <loop+0x2b8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2662:	ldr	r2, [pc, #668]	; (2900 <loop+0x2bc>)
    2664:	ldrh	r0, [r1, #0]
    2666:	ldr	r2, [r2, #0]
    2668:	str	r2, [sp, #32]
    266a:	movw	r2, #60000	; 0xea60
	return ret;
    266e:	ldr	r1, [sp, #32]
    2670:	mul.w	r2, r2, r0
    2674:	addw	r2, r2, #3000	; 0xbb8
    2678:	cmp	r2, r1
    267a:	bcc.n	26c0 <loop+0x7c>
        loopStatus=1;
      #endif
    }
    
    #ifdef DO_LOGGER
      if(loopStatus==2){ if(!loggerLoop()) loopStatus=1; }
    267c:	cmp	r3, #2
    267e:	beq.n	26d0 <loop+0x8c>
    	#else
    		acqLoop();
    	#endif
    }
#endif
}
    2680:	add	sp, #156	; 0x9c
    2682:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline void acqStop(void)
{ 
  #if DO_DEBUG == 2
    Serial.println("Stop Acq");
  #endif
  ICS43432.stop();
    2686:	ldr	r0, [pc, #636]	; (2904 <loop+0x2c0>)
    2688:	bl	2a94 <c_ICS43432::stop()>
}

inline void acqExit(void)
{
  ICS43432.exit();
    268c:	ldr	r0, [pc, #628]	; (2904 <loop+0x2c0>)
    268e:	bl	2aa4 <c_ICS43432::exit()>
  //
  if(doHibernate && (loopStatus<2)) 
  { acqStop();
    acqExit();

    check_hibernate(&parameters,1); 
    2692:	movs	r1, #1
    2694:	ldr	r0, [pc, #612]	; (28fc <loop+0x2b8>)
    2696:	bl	170c <check_hibernate(parameters_s*, int)>
    269a:	ldr	r3, [r4, #0]
  }
  
#if ON_TIME > 0
    #ifdef DO_LOGGER
      if(loopStatus==0) loopStatus=2;
    269c:	cmp	r3, #0
    269e:	bne.n	2660 <loop+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    26a0:	ldr	r3, [pc, #604]	; (2900 <loop+0x2bc>)
    #endif
    
    if(millis()>(parameters.on_time*60+3)*1000)  //
    26a2:	ldr	r2, [pc, #600]	; (28fc <loop+0x2b8>)
    26a4:	ldr	r3, [r3, #0]
    26a6:	ldrh	r2, [r2, #0]
    26a8:	str	r3, [sp, #32]
    26aa:	movw	r3, #60000	; 0xea60
    26ae:	mul.w	r2, r3, r2
	return ret;
    26b2:	ldr	r1, [sp, #32]
    26b4:	addw	r2, r2, #3000	; 0xbb8
    check_hibernate(&parameters,1); 
  }
  
#if ON_TIME > 0
    #ifdef DO_LOGGER
      if(loopStatus==0) loopStatus=2;
    26b8:	movs	r3, #2
    #endif
    
    if(millis()>(parameters.on_time*60+3)*1000)  //
    26ba:	cmp	r2, r1
    check_hibernate(&parameters,1); 
  }
  
#if ON_TIME > 0
    #ifdef DO_LOGGER
      if(loopStatus==0) loopStatus=2;
    26bc:	str	r3, [r4, #0]
    #endif
    
    if(millis()>(parameters.on_time*60+3)*1000)  //
    26be:	bcs.n	26d0 <loop+0x8c>
  Logger (void) : head(0), tail(0), enabled(0)
  { maxBlockSize = na*nd*sizeof(T);}

  void start(void) { clear(); reset(); isRunning=1; enabled = 1; }
  void stop(void) { isRunning=0; } // tell uSD_IF
  void stopnow(void) { isRunning=-1; } // tell uSD_IF
    26c0:	ldr	r1, [pc, #580]	; (2908 <loop+0x2c4>)
    26c2:	movw	r0, #65535	; 0xffff
    { doHibernate=1; 
    26c6:	movs	r2, #1
    26c8:	strh	r0, [r1, #12]
    26ca:	str	r2, [r5, #0]
    26cc:	b.n	267c <loop+0x38>
    26ce:	bx	lr
  //
  static uint16_t isLogging = 0; // flag to ensure single access to function

  char filename[80];

  if (isLogging) return 1; // we are already busy (should not happen)
    26d0:	ldr	r6, [pc, #568]	; (290c <loop+0x2c8>)
    26d2:	ldrh	r3, [r6, #0]
    26d4:	cmp	r3, #0
    26d6:	bne.n	2680 <loop+0x3c>
  isLogging = 1;

  if(fileStatus==4) { isLogging = 0; return 1; } // don't do anything anymore 
    26d8:	ldr	r5, [pc, #556]	; (2908 <loop+0x2c4>)
    26da:	ldrh	r3, [r5, #14]
  static uint16_t isLogging = 0; // flag to ensure single access to function

  char filename[80];

  if (isLogging) return 1; // we are already busy (should not happen)
  isLogging = 1;
    26dc:	movs	r2, #1

  if(fileStatus==4) { isLogging = 0; return 1; } // don't do anything anymore 
    26de:	cmp	r3, #4
  static uint16_t isLogging = 0; // flag to ensure single access to function

  char filename[80];

  if (isLogging) return 1; // we are already busy (should not happen)
  isLogging = 1;
    26e0:	strh	r2, [r6, #0]

  if(fileStatus==4) { isLogging = 0; return 1; } // don't do anything anymore 
    26e2:	beq.n	2716 <loop+0xd2>

  if(fileStatus==0)
    26e4:	cbz	r3, 271c <loop+0xd8>
    else
      fileStatus = 2; // flag as open
//    isLogging = 0; return 1;
  }

  if(fileStatus==2)
    26e6:	cmp	r3, #2
    26e8:	beq.n	27a2 <loop+0x15e>
      isRunning=0;  // tell close to finish to finish aquisition
    }
//    if(fileStatus==2){ isLogging = 0; return 1; }
  }

  if(fileStatus==3)
    26ea:	cmp	r3, #3
    26ec:	bne.n	2716 <loop+0xd2>
    26ee:	ldr	r4, [pc, #544]	; (2910 <loop+0x2cc>)
    26f0:	ldr.w	r0, [r4, #1280]	; 0x500
    26f4:	ldr	r3, [pc, #536]	; (2910 <loop+0x2cc>)
    26f6:	cmp	r0, #0
    26f8:	beq.w	28a6 <loop+0x262>
    26fc:	bl	55e0 <FatFile::truncate()>
    }

    void close(void)
    {
      file.truncate();
      file.close();
    2700:	ldr	r0, [pc, #528]	; (2914 <loop+0x2d0>)
    2702:	bl	3118 <FsFile::close()>
    //close file
    mFS.close();
#if DO_DEBUG ==2
    Serial.printf("\n\r(%d)\n\r",overrun);
#endif
    if(isRunning==0) // we should stop logging
    2706:	ldrsh.w	r3, [r5, #12]
    270a:	cbnz	r3, 2712 <loop+0xce>
  //
  void clear(void);
  //
  uint8_t *drain(void);
  uint16_t write(void *src);
  void haveFinished(void) {enabled=0;} // got signal from uSD_IF
    270c:	ldr	r2, [pc, #520]	; (2918 <loop+0x2d4>)
    270e:	strh.w	r3, [r2, #204]	; 0xcc
    { haveFinished(); fileStatus = 4; 
//      isLogging = 0; return 0;
    }
    
    //
    fileStatus= 0; // flag file as closed   
    2712:	movs	r3, #0
    2714:	strh	r3, [r5, #14]
  char filename[80];

  if (isLogging) return 1; // we are already busy (should not happen)
  isLogging = 1;

  if(fileStatus==4) { isLogging = 0; return 1; } // don't do anything anymore 
    2716:	movs	r3, #0
    2718:	strh	r3, [r6, #0]
    271a:	b.n	2680 <loop+0x3c>
#include <time.h>
struct tm seconds2tm(uint32_t tt);

uint16_t generateFilename(char *dev, char *filename)
{
  struct tm tx=seconds2tm(RTC_TSR);;
    271c:	ldr	r3, [pc, #508]	; (291c <loop+0x2d8>)
    271e:	add	r0, sp, #36	; 0x24
    2720:	ldr	r1, [r3, #0]
    2722:	bl	1158 <seconds2tm(unsigned long)>
  sprintf(filename,"%s_%04d%02d%02d_%02d%02d%02d.bin",dev,
          tx.tm_year, tx.tm_mon, tx.tm_mday,
          tx.tm_hour, tx.tm_min, tx.tm_sec);
    2726:	ldr	r1, [sp, #36]	; 0x24
    2728:	ldr	r2, [sp, #40]	; 0x28
    272a:	ldr	r0, [sp, #44]	; 0x2c
    272c:	str	r1, [sp, #16]
    272e:	str	r2, [sp, #12]
    2730:	ldr	r1, [sp, #48]	; 0x30
    2732:	ldr	r2, [sp, #52]	; 0x34
    2734:	ldr	r3, [sp, #56]	; 0x38
    2736:	str	r0, [sp, #8]
    2738:	str	r1, [sp, #4]
    273a:	str	r2, [sp, #0]
    273c:	ldr	r1, [pc, #480]	; (2920 <loop+0x2dc>)
    273e:	ldr	r2, [pc, #484]	; (2924 <loop+0x2e0>)
    2740:	add	r0, sp, #72	; 0x48
    2742:	bl	cf50 <sprintf>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    2746:	ldr	r3, [pc, #480]	; (2928 <loop+0x2e4>)
    2748:	ldr	r1, [r3, #0]
    274a:	cmp	r1, #0
    274c:	beq.w	2856 <loop+0x212>
    2750:	ldr	r4, [pc, #444]	; (2910 <loop+0x2cc>)
    2752:	add	r2, sp, #72	; 0x48
    2754:	add.w	r0, r4, #1208	; 0x4b8
    2758:	movs	r3, #83	; 0x53
    275a:	bl	3140 <FsFile::open(FsVolume*, char const*, unsigned char)>
    275e:	cmp	r0, #0
    2760:	beq.n	2856 <loop+0x212>
    2762:	ldr.w	r0, [r4, #1280]	; 0x500
   *
   * \param[in] length size of the file in bytes.
   * \return true for success else false.
   */
  bool preAllocate(uint64_t length) {
    if (m_fFile) {
    2766:	cmp	r0, #0
    2768:	beq.w	2940 <loop+0x2fc>
      return length < (1ULL << 32) ? m_fFile->preAllocate(length) : false;
    276c:	mov.w	r1, #41943040	; 0x2800000
    2770:	bl	5034 <FatFile::preAllocate(unsigned long)>
    void open(char * filename)
    {
      if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) {
        sd.errorHalt("file.open failed");
      }
      if (!file.preAllocate(PRE_ALLOCATE_SIZE)) {
    2774:	cmp	r0, #0
    2776:	beq.w	28e6 <loop+0x2a2>
    277a:	ldr.w	r0, [r4, #1280]	; 0x500
    277e:	ldr	r2, [pc, #400]	; (2910 <loop+0x2cc>)

    mFS.open(filename);
#if DO_DEBUG > 0
    Serial.printf(" %s\n\r",filename);
#endif
    loggerCount=0;  // count successful transfers
    2780:	movs	r3, #0
    2782:	str	r3, [r5, #20]
    overrun=0;      // count buffer overruns
    2784:	str	r3, [r5, #4]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    2786:	cmp	r0, #0
    2788:	beq.w	2894 <loop+0x250>
    278c:	mov.w	r2, #512	; 0x200
    2790:	ldr	r1, [pc, #408]	; (292c <loop+0x2e8>)
    2792:	bl	5658 <FatFile::write(void const*, unsigned int)>
      file.close();
    }

    uint32_t write(uint8_t *buffer, uint32_t nbuf)
    {
      if (nbuf != file.write(buffer, nbuf)) sd.errorHalt("write failed");
    2796:	cmp.w	r0, #512	; 0x200
    279a:	bne.w	28de <loop+0x29a>
    //
    if (!mFS.write((uint8_t*)&header, sizeof(header_s)))
      fileStatus = 3; // close file on write failure
    else
      fileStatus = 2; // flag as open
    279e:	movs	r3, #2
    27a0:	strh	r3, [r5, #14]
  
template <typename T, int nq, int nd, int na>
uint8_t * Logger<T,nq,nd,na>:: drain(void)
  {
    uint16_t n;
    if(head>tail) n=head-tail; else n = nq + head -tail;
    27a2:	ldr.w	fp, [pc, #372]	; 2918 <loop+0x2d4>
  }

  if(fileStatus==2)
  { 
    // write to file
    uint16_t nbuf = maxBlockSize;
    27a6:	ldr	r3, [r5, #8]
  
template <typename T, int nq, int nd, int na>
uint8_t * Logger<T,nq,nd,na>:: drain(void)
  {
    uint16_t n;
    if(head>tail) n=head-tail; else n = nq + head -tail;
    27a8:	ldrh.w	r9, [fp, #200]	; 0xc8
    27ac:	ldrh.w	r4, [fp, #202]	; 0xca
  }

  if(fileStatus==2)
  { 
    // write to file
    uint16_t nbuf = maxBlockSize;
    27b0:	str	r3, [sp, #28]
  
template <typename T, int nq, int nd, int na>
uint8_t * Logger<T,nq,nd,na>:: drain(void)
  {
    uint16_t n;
    if(head>tail) n=head-tail; else n = nq + head -tail;
    27b2:	cmp	r9, r4
    27b4:	itet	ls
    27b6:	addls.w	r3, r9, #300	; 0x12c
    27ba:	rsbhi	r3, r4, r9
    27be:	subls	r3, r3, r4
    27c0:	uxth	r3, r3

    int16_t nb=na; // na is number of buffers to fetched from queue and written to disk
    if(n>nb)
    27c2:	cmp	r3, #64	; 0x40
    27c4:	ble.n	287a <loop+0x236>
    27c6:	movs	r3, #0
    27c8:	ldr.w	r8, [pc, #356]	; 2930 <loop+0x2ec>
          // copy to buffer     
          { T *src = queue[t];
            if(src)
            { for(int jj=0; jj<nd; jj++) bptr[jj]=src[jj];
              pool.release(t);
              queue[t]=0;
    27cc:	mov	sl, r3
  {
    uint16_t n;
    if(head>tail) n=head-tail; else n = nq + head -tail;

    int16_t nb=na; // na is number of buffers to fetched from queue and written to disk
    if(n>nb)
    27ce:	movs	r7, #64	; 0x40
      T *bptr = buffer;
      //
      uint16_t t = tail;
      while(--nb>=0)
      {
        if (t != head) 
    27d0:	cmp	r9, r4
    27d2:	beq.n	280e <loop+0x1ca>
        {
          if (++t >= nq) t = 0;
    27d4:	adds	r4, #1
    27d6:	uxth	r4, r4
    27d8:	cmp.w	r4, #300	; 0x12c
    27dc:	it	cs
    27de:	movcs	r4, #0
          
          // copy to buffer     
          { T *src = queue[t];
    27e0:	add.w	ip, r4, #38400	; 0x9600
    27e4:	add.w	ip, ip, #6
    27e8:	ldr.w	r0, [r5, ip, lsl #2]
            if(src)
    27ec:	cbz	r0, 2808 <loop+0x1c4>
    27ee:	subs	r3, r0, #4
    27f0:	sub.w	r2, r8, #4
    27f4:	add.w	r0, r0, #508	; 0x1fc
            { for(int jj=0; jj<nd; jj++) bptr[jj]=src[jj];
    27f8:	ldr.w	r1, [r3, #4]!
    27fc:	str.w	r1, [r2, #4]!
    2800:	cmp	r0, r3
    2802:	bne.n	27f8 <loop+0x1b4>
              pool.release(t);
              queue[t]=0;
    2804:	str.w	sl, [r5, ip, lsl #2]
            }
          }
          tail = t;
          bptr += nd;
    2808:	add.w	r8, r8, #512	; 0x200
    280c:	movs	r3, #1
    280e:	add.w	lr, r7, #4294967295
    2812:	uxth.w	r7, lr
    if(n>nb)
    {
      T *bptr = buffer;
      //
      uint16_t t = tail;
      while(--nb>=0)
    2816:	cmp	r7, #0
    2818:	bne.n	27d0 <loop+0x18c>
    281a:	cmp	r3, #0
    281c:	bne.n	28c8 <loop+0x284>
    281e:	ldr	r4, [pc, #240]	; (2910 <loop+0x2cc>)
    2820:	ldrh.w	r8, [sp, #28]
    2824:	ldr.w	r0, [r4, #1280]	; 0x500
    2828:	cmp	r0, #0
    282a:	beq.n	28b6 <loop+0x272>
    282c:	mov	r2, r8
    282e:	ldr	r1, [pc, #256]	; (2930 <loop+0x2ec>)
    2830:	bl	5658 <FatFile::write(void const*, unsigned int)>
    2834:	cmp	r8, r0
    2836:	bne.n	28de <loop+0x29a>
    uint16_t nbuf = maxBlockSize;
    uint32_t maxLoggerCount = (max_mb*1024*1024)/maxBlockSize;
    uint8_t *buffer=(uint8_t*)drain();
    if(buffer)
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
    2838:	cmp.w	r8, #0
    283c:	bne.n	285e <loop+0x21a>
          Serial.flush();
        }
#endif
      }
    }
    if(isRunning<0) 
    283e:	ldrsh.w	r3, [r5, #12]
    uint16_t nbuf = maxBlockSize;
    uint32_t maxLoggerCount = (max_mb*1024*1024)/maxBlockSize;
    uint8_t *buffer=(uint8_t*)drain();
    if(buffer)
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
    2842:	movs	r2, #3
          Serial.flush();
        }
#endif
      }
    }
    if(isRunning<0) 
    2844:	cmp	r3, #0
    uint16_t nbuf = maxBlockSize;
    uint32_t maxLoggerCount = (max_mb*1024*1024)/maxBlockSize;
    uint8_t *buffer=(uint8_t*)drain();
    if(buffer)
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
    2846:	strh	r2, [r5, #14]
          Serial.flush();
        }
#endif
      }
    }
    if(isRunning<0) 
    2848:	bge.w	26f0 <loop+0xac>
    { fileStatus=3; // flag to stop logging
    284c:	movs	r2, #3
      isRunning=0;  // tell close to finish to finish aquisition
    284e:	movs	r3, #0
        }
#endif
      }
    }
    if(isRunning<0) 
    { fileStatus=3; // flag to stop logging
    2850:	strh	r2, [r5, #14]
      isRunning=0;  // tell close to finish to finish aquisition
    2852:	strh	r3, [r5, #12]
    2854:	b.n	26f0 <loop+0xac>
    }
    
    void open(char * filename)
    {
      if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) {
        sd.errorHalt("file.open failed");
    2856:	ldr	r1, [pc, #220]	; (2934 <loop+0x2f0>)
    2858:	ldr	r0, [pc, #180]	; (2910 <loop+0x2cc>)
    285a:	bl	1ef0 <SdBase<FsVolume>::errorHalt(char const*)>
    uint32_t maxLoggerCount = (max_mb*1024*1024)/maxBlockSize;
    uint8_t *buffer=(uint8_t*)drain();
    if(buffer)
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
      if(fileStatus == 2)
    285e:	ldrh	r3, [r5, #14]
    2860:	ldr	r2, [pc, #164]	; (2908 <loop+0x2c4>)
    2862:	cmp	r3, #2
    2864:	bne.n	2888 <loop+0x244>
      { loggerCount++;
    2866:	ldr	r3, [r2, #20]
        if(loggerCount == maxLoggerCount)
    2868:	ldr	r0, [sp, #28]
    uint8_t *buffer=(uint8_t*)drain();
    if(buffer)
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
      if(fileStatus == 2)
      { loggerCount++;
    286a:	adds	r3, #1
        if(loggerCount == maxLoggerCount)
    286c:	mov.w	r1, #41943040	; 0x2800000
    2870:	udiv	r7, r1, r0
    2874:	cmp	r7, r3
    uint8_t *buffer=(uint8_t*)drain();
    if(buffer)
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
      if(fileStatus == 2)
      { loggerCount++;
    2876:	str	r3, [r2, #20]
        if(loggerCount == maxLoggerCount)
    2878:	beq.n	28ce <loop+0x28a>
          Serial.flush();
        }
#endif
      }
    }
    if(isRunning<0) 
    287a:	ldrsh.w	r3, [r5, #12]
    287e:	cmp	r3, #0
    2880:	bge.w	2716 <loop+0xd2>
    2884:	ldr	r4, [pc, #136]	; (2910 <loop+0x2cc>)
    2886:	b.n	284c <loop+0x208>
    2888:	ldrsh.w	r2, [r2, #12]
    288c:	cmp	r2, #0
    288e:	bge.w	26ea <loop+0xa6>
    2892:	b.n	284c <loop+0x208>
    2894:	ldr.w	r0, [r2, #1284]	; 0x504
    2898:	cbz	r0, 28de <loop+0x29a>
    289a:	mov.w	r2, #512	; 0x200
    289e:	ldr	r1, [pc, #140]	; (292c <loop+0x2e8>)
    28a0:	bl	4ba0 <ExFatFile::write(void const*, unsigned int)>
    28a4:	b.n	2796 <loop+0x152>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    28a6:	ldr.w	r0, [r3, #1284]	; 0x504
    28aa:	cmp	r0, #0
    28ac:	beq.w	2700 <loop+0xbc>
    28b0:	bl	4a80 <ExFatFile::truncate()>
    28b4:	b.n	2700 <loop+0xbc>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    28b6:	ldr.w	r0, [r4, #1284]	; 0x504
    28ba:	cmp	r0, #0
    28bc:	beq.n	2834 <loop+0x1f0>
    28be:	mov	r2, r8
    28c0:	ldr	r1, [pc, #108]	; (2930 <loop+0x2ec>)
    28c2:	bl	4ba0 <ExFatFile::write(void const*, unsigned int)>
    28c6:	b.n	2834 <loop+0x1f0>
    28c8:	strh.w	r4, [fp, #202]	; 0xca
    28cc:	b.n	281e <loop+0x1da>
    28ce:	ldrsh.w	r3, [r2, #12]
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
      if(fileStatus == 2)
      { loggerCount++;
        if(loggerCount == maxLoggerCount)
        { fileStatus= 3;}
    28d2:	movs	r1, #3
          Serial.flush();
        }
#endif
      }
    }
    if(isRunning<0) 
    28d4:	cmp	r3, #0
    {
      if (!mFS.write(buffer, nbuf)){ fileStatus = 3;} // close file on write failure
      if(fileStatus == 2)
      { loggerCount++;
        if(loggerCount == maxLoggerCount)
        { fileStatus= 3;}
    28d6:	strh	r1, [r2, #14]
          Serial.flush();
        }
#endif
      }
    }
    if(isRunning<0) 
    28d8:	bge.w	26f0 <loop+0xac>
    28dc:	b.n	284c <loop+0x208>
      file.close();
    }

    uint32_t write(uint8_t *buffer, uint32_t nbuf)
    {
      if (nbuf != file.write(buffer, nbuf)) sd.errorHalt("write failed");
    28de:	ldr	r1, [pc, #88]	; (2938 <loop+0x2f4>)
    28e0:	ldr	r0, [pc, #44]	; (2910 <loop+0x2cc>)
    28e2:	bl	1ef0 <SdBase<FsVolume>::errorHalt(char const*)>
    {
      if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) {
        sd.errorHalt("file.open failed");
      }
      if (!file.preAllocate(PRE_ALLOCATE_SIZE)) {
        sd.errorHalt("file.preAllocate failed");    
    28e6:	ldr	r1, [pc, #84]	; (293c <loop+0x2f8>)
    28e8:	ldr	r0, [pc, #36]	; (2910 <loop+0x2cc>)
    28ea:	bl	1ef0 <SdBase<FsVolume>::errorHalt(char const*)>
    28ee:	nop
    28f0:	.word	0x1fff173c
    28f4:	.word	0x1fff1738
    28f8:	.word	0x1fff2454
    28fc:	.word	0x1fff0734
    2900:	.word	0x200203bc
    2904:	.word	0x1fff247c
    2908:	.word	0x1fff2480
    290c:	.word	0x20020150
    2910:	.word	0x1fff1f4c
    2914:	.word	0x1fff2404
    2918:	.word	0x20018080
    291c:	.word	0x4003d000
    2920:	.word	0x00013708
    2924:	.word	0x1fff0740
    2928:	.word	0x2002035c
    292c:	.word	0x1fff1530
    2930:	.word	0x20018150
    2934:	.word	0x00013afc
    2938:	.word	0x00013aa0
    293c:	.word	0x00013a88
   */
  bool preAllocate(uint64_t length) {
    if (m_fFile) {
      return length < (1ULL << 32) ? m_fFile->preAllocate(length) : false;
    }
    return m_xFile ? m_xFile->preAllocate(length) : false;
    2940:	ldr.w	r0, [r4, #1284]	; 0x504
    2944:	cmp	r0, #0
    2946:	beq.n	28e6 <loop+0x2a2>
    2948:	mov.w	r2, #41943040	; 0x2800000
    294c:	movs	r3, #0
    294e:	bl	48a4 <ExFatFile::preAllocate(unsigned long long)>
    2952:	b.n	2774 <loop+0x130>

00002954 <_GLOBAL__sub_I_parameters>:
    text[jj++]=((digit < 10) ? '0' + digit : 'A' + digit - 10);
  }
  text[jj]=0;

  return text;
}
    2954:	push	{r3, r4, r5, r6, r7, lr}
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    2956:	ldr	r3, [pc, #132]	; (29dc <_GLOBAL__sub_I_parameters+0x88>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2958:	ldr	r4, [pc, #132]	; (29e0 <_GLOBAL__sub_I_parameters+0x8c>)
    295a:	str.w	r4, [r3, #1160]	; 0x488
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    295e:	movs	r4, #38	; 0x26
    2960:	strb.w	r4, [r3, #1192]	; 0x4a8
    2964:	ldr	r0, [pc, #124]	; (29e4 <_GLOBAL__sub_I_parameters+0x90>)
class FsFile : public Stream {
#else  // ENABLE_ARDUINO_FEATURES
class FsFile {
#endif  // ENABLE_ARDUINO_FEATURES
 public:
  FsFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    2966:	ldr	r5, [pc, #128]	; (29e8 <_GLOBAL__sub_I_parameters+0x94>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    2968:	ldr	r7, [pc, #128]	; (29ec <_GLOBAL__sub_I_parameters+0x98>)
    296a:	str.w	r0, [r3, #1176]	; 0x498
    296e:	movs	r4, #0
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2970:	mov.w	r6, #1000	; 0x3e8
    2974:	str.w	r5, [r3, #1208]	; 0x4b8
  void release(uint16_t ii) {;}
};


#include "mfs.h"
c_mFS mFS;
    2978:	ldr	r2, [pc, #116]	; (29f0 <_GLOBAL__sub_I_parameters+0x9c>)
    297a:	ldr	r1, [pc, #120]	; (29f4 <_GLOBAL__sub_I_parameters+0xa0>)
    297c:	str.w	r7, [r3, #1200]	; 0x4b0
    2980:	mov	r0, r3
    2982:	str.w	r6, [r3, #1216]	; 0x4c0
    2986:	str.w	r4, [r3, #1144]	; 0x478
    298a:	str.w	r4, [r3, #1148]	; 0x47c
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    298e:	strb.w	r4, [r3, #1172]	; 0x494
    2992:	strb.w	r4, [r3, #1195]	; 0x4ab
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiAltDriver {
 public:
#if IMPLEMENT_SPI_PORT_SELECTION
  SdSpiAltDriver() : m_spi(nullptr) {}
    2996:	str.w	r4, [r3, #1196]	; 0x4ac
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    299a:	strb.w	r4, [r3, #1212]	; 0x4bc
    299e:	strb.w	r4, [r3, #1220]	; 0x4c4
    29a2:	str.w	r4, [r3, #1280]	; 0x500
    29a6:	str.w	r4, [r3, #1284]	; 0x504
    29aa:	bl	c2fc <__aeabi_atexit>

/*--------------  - uSDLogger class          ------------------*/
class uSD_IF
{
  public:
  uSD_IF(void) {;}
    29ae:	ldr	r3, [pc, #72]	; (29f8 <_GLOBAL__sub_I_parameters+0xa4>)
 */
template <typename T, int nq, int nd, int na>
class Logger : public uSD_IF
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
    29b0:	ldr	r0, [pc, #72]	; (29fc <_GLOBAL__sub_I_parameters+0xa8>)

/*--------------  - uSDLogger class          ------------------*/
class uSD_IF
{
  public:
  uSD_IF(void) {;}
    29b2:	str	r4, [r3, #4]
 */
template <typename T, int nq, int nd, int na>
class Logger : public uSD_IF
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
    29b4:	add.w	r2, r3, #154624	; 0x25c00

/*--------------  - uSDLogger class          ------------------*/
class uSD_IF
{
  public:
  uSD_IF(void) {;}
    29b8:	movw	r5, #65535	; 0xffff
template <typename T, int nq, int nd, int na>
class Logger : public uSD_IF
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
  { maxBlockSize = na*nd*sizeof(T);}
    29bc:	mov.w	r1, #32768	; 0x8000

/*--------------  - uSDLogger class          ------------------*/
class uSD_IF
{
  public:
  uSD_IF(void) {;}
    29c0:	strh	r4, [r3, #12]
    29c2:	str	r4, [r3, #16]
    29c4:	str	r4, [r3, #20]
    29c6:	strh	r5, [r3, #14]
 */
template <typename T, int nq, int nd, int na>
class Logger : public uSD_IF
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
    29c8:	str	r0, [r3, #0]
  { maxBlockSize = na*nd*sizeof(T);}
    29ca:	str	r1, [r3, #8]
 */
template <typename T, int nq, int nd, int na>
class Logger : public uSD_IF
{
public:
  Logger (void) : head(0), tail(0), enabled(0)
    29cc:	strh.w	r4, [r2, #200]	; 0xc8
    29d0:	strh.w	r4, [r2, #202]	; 0xca
    29d4:	strh.w	r4, [r2, #204]	; 0xcc
    29d8:	pop	{r3, r4, r5, r6, r7, pc}
    29da:	nop
    29dc:	.word	0x1fff1f4c
    29e0:	.word	0x00013c50
    29e4:	.word	0x00013bf8
    29e8:	.word	0x000136d8
    29ec:	.word	0x38011001
    29f0:	.word	0x1fff0730
    29f4:	.word	0x00000fa9
    29f8:	.word	0x1fff2480
    29fc:	.word	0x000136fc

00002a00 <c_ICS43432::init(long, long*, unsigned long, unsigned short)>:
 */

  extern int iscl[];

uint32_t c_ICS43432::init(int32_t fsamp, int32_t *buffer, uint32_t nbuf, uint16_t nch)
{
    2a00:	push	{r4, r5, r6, r7, lr}
    2a02:	vpush	{d8}
    2a06:	sub	sp, #12
    2a08:	mov	r4, r1
    2a0a:	mov	r5, r2
    2a0c:	mov	r6, r3
    2a0e:	ldrh.w	r7, [sp, #40]	; 0x28
  i2s_init();
    2a12:	bl	47c <i2s_init>
  
  float fs = i2s_speedConfig(ICS43432_DEV,N_BITS, fsamp);
    2a16:	mov	r2, r4
    2a18:	movs	r1, #32
    2a1a:	movs	r0, #5
    2a1c:	bl	48c <i2s_speedConfig>
  if(fs<1.0f) return 0;
    2a20:	vmov.f32	s15, #112	; 0x3f800000  1.0
    2a24:	vcmpe.f32	s0, s15
    2a28:	vmrs	APSR_nzcv, fpscr
    2a2c:	bmi.n	2a70 <c_ICS43432::init(long, long*, unsigned long, unsigned short)+0x70>

  if(nch>2)  
    2a2e:	cmp	r7, #2
  	i2s_config(1, N_BITS, I2S_RX_2CH, 0); // both RX channels
    2a30:	mov.w	r3, #0
  else
	  i2s_config(1, N_BITS, 0, 0);  // only 1 RX channel
    2a34:	ite	ls
    2a36:	movls	r2, r3
  
  float fs = i2s_speedConfig(ICS43432_DEV,N_BITS, fsamp);
  if(fs<1.0f) return 0;

  if(nch>2)  
  	i2s_config(1, N_BITS, I2S_RX_2CH, 0); // both RX channels
    2a38:	movhi	r2, #2
  else
	  i2s_config(1, N_BITS, 0, 0);  // only 1 RX channel
    2a3a:	movs	r1, #32
    2a3c:	movs	r0, #1
    2a3e:	vmov.f32	s16, s0
    2a42:	bl	734 <i2s_config>
  i2s_configurePorts(2);
    2a46:	movs	r0, #2
    2a48:	bl	8e8 <i2s_configurePorts>

  DMA_init();
    2a4c:	bl	b0c <DMA_init>
  i2s_setupInput(buffer,nbuf,2,5); //port, prio (8=normal)
    2a50:	mov	r0, r5
    2a52:	mov	r1, r6
    2a54:	movs	r3, #5
    2a56:	movs	r2, #2
    2a58:	bl	994 <i2s_setupInput>
  return (uint32_t) fs;
    2a5c:	vcvt.u32.f32	s15, s16
    2a60:	vmov	r0, s15
    2a64:	vstr	s15, [sp, #4]
}
    2a68:	add	sp, #12
    2a6a:	vpop	{d8}
    2a6e:	pop	{r4, r5, r6, r7, pc}
uint32_t c_ICS43432::init(int32_t fsamp, int32_t *buffer, uint32_t nbuf, uint16_t nch)
{
  i2s_init();
  
  float fs = i2s_speedConfig(ICS43432_DEV,N_BITS, fsamp);
  if(fs<1.0f) return 0;
    2a70:	movs	r3, #0
    2a72:	mov	r0, r3
    2a74:	str	r3, [sp, #4]
  i2s_configurePorts(2);

  DMA_init();
  i2s_setupInput(buffer,nbuf,2,5); //port, prio (8=normal)
  return (uint32_t) fs;
}
    2a76:	add	sp, #12
    2a78:	vpop	{d8}
    2a7c:	pop	{r4, r5, r6, r7, pc}
    2a7e:	nop

00002a80 <c_ICS43432::start()>:

void c_ICS43432::start(void)
{
    2a80:	push	{r3, lr}
  i2s_enableInputDMA();
    2a82:	bl	ae8 <i2s_enableInputDMA>
  DMA_startAll();
    2a86:	bl	d00 <DMA_startAll>
  i2s_startInput();
}
    2a8a:	ldmia.w	sp!, {r3, lr}

void c_ICS43432::start(void)
{
  i2s_enableInputDMA();
  DMA_startAll();
  i2s_startInput();
    2a8e:	b.w	ad8 <i2s_startInput>
    2a92:	nop

00002a94 <c_ICS43432::stop()>:
}

void c_ICS43432::stop(void)
{
    2a94:	push	{r3, lr}
  i2s_stopInput();
    2a96:	bl	ac8 <i2s_stopInput>
  DMA_haltAll();
}
    2a9a:	ldmia.w	sp!, {r3, lr}
}

void c_ICS43432::stop(void)
{
  i2s_stopInput();
  DMA_haltAll();
    2a9e:	b.w	cf0 <DMA_haltAll>
    2aa2:	nop

00002aa4 <c_ICS43432::exit()>:
}

void c_ICS43432::exit(void) { i2s_stopClock();}
    2aa4:	b.w	46c <i2s_stopClock>

00002aa8 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    2aa8:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2aaa:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2aac:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2aae:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2ab0:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2ab2:	beq.n	2abc <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    2ab4:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2ab8:	b.w	aa88 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2abc:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    2abe:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2ac2:	bx	r3

00002ac4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    2ac4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ac8:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    2aca:	ldr	r5, [r4, #12]
    2acc:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    2ad0:	ldr	r5, [pc, #484]	; (2cb8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    2ad2:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    2ad4:	bne.n	2b7c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2ad6:	lsls	r7, r3, #31
    2ad8:	bpl.w	2c42 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    2adc:	cmp	r1, #0
    2ade:	beq.w	2ca8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2ae2:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    2ae4:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2ae6:	it	ne
    2ae8:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    2aec:	str	r5, [r4, #52]	; 0x34
    2aee:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2af0:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    2af4:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2af8:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2afc:	cmp.w	ip, #0
    2b00:	beq.w	2c54 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    2b04:	cbz	r1, 2b10 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    2b06:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    2b08:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    2b0c:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2b10:	ldr	r5, [r0, #4]
    2b12:	ldrb	r6, [r5, #8]
			if (count == 2)
    2b14:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2b18:	add.w	r6, r6, #4294967295
    2b1c:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    2b20:	ite	eq
    2b22:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2b26:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2b2a:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2b2c:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    2b2e:	sub.w	ip, ip, #2
    2b32:	b.n	2b46 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    2b34:	cbz	r2, 2b3a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    2b36:	strb	r4, [r2, #0]
    2b38:	adds	r2, #1
						} 
						count_read--;
    2b3a:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2b3c:	and.w	r5, r5, #61440	; 0xf000
    2b40:	cmp	r5, r6
    2b42:	bls.n	2b72 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    2b44:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    2b46:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    2b48:	tst.w	r5, #240	; 0xf0
    2b4c:	beq.n	2b3c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    2b4e:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    2b50:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    2b54:	mov	r7, r2
    2b56:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    2b5a:	bne.n	2b34 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    2b5c:	cbz	r2, 2b66 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    2b5e:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    2b62:	strb	r4, [r2, #1]
    2b64:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2b66:	and.w	r5, r5, #61440	; 0xf000
    2b6a:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    2b6c:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2b70:	bhi.n	2b44 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    2b72:	cmp.w	ip, #0
    2b76:	beq.n	2c54 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    2b78:	ldr	r4, [r0, #0]
    2b7a:	b.n	2b04 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2b7c:	lsls	r5, r3, #31
    2b7e:	bpl.n	2c1a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    2b80:	cmp	r1, #0
    2b82:	beq.w	2c98 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2b86:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    2b88:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2b8a:	it	ne
    2b8c:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    2b90:	str	r5, [r4, #52]	; 0x34
    2b92:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    2b94:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    2b98:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    2b9c:	cmp.w	lr, #0
    2ba0:	beq.n	2c26 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    2ba2:	cbz	r1, 2bb0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    2ba4:	ldrb.w	ip, [r1, #1]
    2ba8:	ldrb	r5, [r1, #0]
    2baa:	adds	r1, #2
    2bac:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2bb0:	ldr	r5, [r0, #4]
    2bb2:	ldrb	r6, [r5, #8]
			if (count == 2)
    2bb4:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2bb8:	add.w	r6, r6, #4294967295
    2bbc:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    2bc0:	ite	eq
    2bc2:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2bc6:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2bca:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2bcc:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    2bce:	sub.w	lr, lr, #2
    2bd2:	b.n	2be6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    2bd4:	cbz	r2, 2bda <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    2bd6:	strb	r4, [r2, #0]
    2bd8:	adds	r2, #1
						} 
						count_read--;
    2bda:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2bdc:	and.w	r5, r5, #61440	; 0xf000
    2be0:	cmp	r5, r6
    2be2:	bls.n	2c10 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    2be4:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    2be6:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    2be8:	tst.w	r5, #240	; 0xf0
    2bec:	beq.n	2bdc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    2bee:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    2bf2:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    2bf4:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    2bf6:	bne.n	2bd4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    2bf8:	cbz	r2, 2c04 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    2bfa:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    2bfe:	asrs	r4, r4, #8
    2c00:	strb	r4, [r2, #1]
    2c02:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2c04:	and.w	r5, r5, #61440	; 0xf000
    2c08:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    2c0a:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2c0e:	bhi.n	2be4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    2c10:	cmp.w	lr, #0
    2c14:	beq.n	2c26 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    2c16:	ldr	r4, [r0, #0]
    2c18:	b.n	2ba2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2c1a:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    2c1c:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    2c20:	cmp.w	lr, #0
    2c24:	bne.n	2ba2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    2c26:	cbz	r3, 2c70 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    2c28:	ldr	r4, [r0, #0]
			sr = port().SR;
    2c2a:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2c2c:	tst.w	r1, #240	; 0xf0
    2c30:	beq.n	2c2a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    2c32:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    2c34:	lsls	r4, r3, #31
    2c36:	bpl.n	2c74 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    2c38:	cbz	r2, 2c3e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    2c3a:	strb	r1, [r2, #0]
    2c3c:	adds	r2, #1
					count_read--;
    2c3e:	subs	r3, #1
    2c40:	b.n	2c26 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2c42:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2c46:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2c48:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2c4c:	cmp.w	ip, #0
    2c50:	bne.w	2b04 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    2c54:	cbz	r3, 2c70 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    2c56:	ldr	r4, [r0, #0]
			sr = port().SR;
    2c58:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2c5a:	tst.w	r1, #240	; 0xf0
    2c5e:	beq.n	2c58 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    2c60:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    2c62:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    2c64:	bpl.n	2c86 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    2c66:	cbz	r2, 2c6c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    2c68:	strb	r1, [r2, #0]
    2c6a:	adds	r2, #1
					count_read--;
    2c6c:	subs	r3, #1
    2c6e:	b.n	2c54 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    2c70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    2c74:	cbz	r2, 2c82 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    2c76:	mov	r4, r2
						*p_read++ = w >> 8;
    2c78:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    2c7a:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    2c7e:	strb	r5, [r2, #1]
    2c80:	mov	r2, r4
					}
					count_read -= 2;
    2c82:	subs	r3, #2
    2c84:	b.n	2c26 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    2c86:	cbz	r2, 2c94 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    2c88:	mov	r4, r2
    2c8a:	asrs	r5, r1, #8
    2c8c:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    2c90:	strb	r1, [r2, #1]
    2c92:	mov	r2, r4
					}
					count_read -= 2;
    2c94:	subs	r3, #2
    2c96:	b.n	2c54 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2c98:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    2c9c:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2c9e:	it	ne
    2ca0:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    2ca4:	str	r5, [r4, #52]	; 0x34
    2ca6:	b.n	2b94 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2ca8:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    2cac:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2cae:	it	ne
    2cb0:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    2cb4:	str	r5, [r4, #52]	; 0x34
    2cb6:	b.n	2af0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    2cb8:	.word	0x801f0400

00002cbc <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    2cbc:	cbz	r3, 2cc2 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    2cbe:	b.w	2ac4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    2cc2:	bx	lr

00002cc4 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    2cc4:	ldrb.w	r2, [r0, #57]	; 0x39
    2cc8:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    2ccc:	subs	r0, r2, r0
    2cce:	bx	lr

00002cd0 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2cd0:	ldrb.w	r3, [r0, #56]	; 0x38
    2cd4:	ldrb.w	r2, [r0, #57]	; 0x39
    2cd8:	cmp	r2, r3
    2cda:	bls.n	2ce8 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    2cdc:	adds	r2, r3, #1
    2cde:	add	r3, r0
    2ce0:	strb.w	r2, [r0, #56]	; 0x38
    2ce4:	ldrb	r0, [r3, #24]
    2ce6:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2ce8:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    2cec:	bx	lr
    2cee:	nop

00002cf0 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2cf0:	ldrb.w	r3, [r0, #56]	; 0x38
    2cf4:	ldrb.w	r2, [r0, #57]	; 0x39
    2cf8:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    2cfa:	itte	hi
    2cfc:	addhi	r3, r3, r0
    2cfe:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2d00:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    2d04:	bx	lr
    2d06:	nop

00002d08 <TwoWire::flush()>:
	virtual void flush(void) {
    2d08:	bx	lr
    2d0a:	nop

00002d0c <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2d0c:	push	{r3, r4, r5, lr}
    2d0e:	mov	r5, r0
	if (transmitting || slave_mode) {
    2d10:	ldrh.w	r0, [r0, #94]	; 0x5e
    2d14:	cbz	r0, 2d3c <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    2d16:	ldrb.w	r3, [r5, #93]	; 0x5d
    2d1a:	mov	r4, r2
    2d1c:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    2d20:	cmp	r4, r2
    2d22:	bhi.n	2d3e <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    2d24:	add.w	r0, r5, #59	; 0x3b
    2d28:	add	r0, r3
    2d2a:	mov	r2, r4
    2d2c:	bl	9324 <memcpy>
		txBufferLength += quantity;
    2d30:	ldrb.w	r3, [r5, #93]	; 0x5d
    2d34:	add	r3, r4
    2d36:	strb.w	r3, [r5, #93]	; 0x5d
    2d3a:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    2d3c:	pop	{r3, r4, r5, pc}
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    2d3e:	movs	r0, #1
    2d40:	mov	r4, r2
    2d42:	strb	r0, [r5, #4]
    2d44:	b.n	2d24 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    2d46:	nop

00002d48 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    2d48:	ldrh.w	r3, [r0, #94]	; 0x5e
    2d4c:	cbz	r3, 2d6a <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    2d4e:	ldrb.w	r3, [r0, #93]	; 0x5d
    2d52:	cmp	r3, #32
    2d54:	bhi.n	2d66 <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    2d56:	adds	r2, r0, r3
    2d58:	adds	r3, #1
    2d5a:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    2d5e:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    2d60:	strb.w	r1, [r2, #59]	; 0x3b
    2d64:	bx	lr
    2d66:	movs	r3, #1
    2d68:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    2d6a:	movs	r0, #0
    2d6c:	bx	lr
    2d6e:	nop

00002d70 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    2d70:	push	{r3, r4, r5, lr}
    2d72:	ldr	r5, [pc, #300]	; (2ea0 <i2c0_isr+0x130>)
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    2d74:	ldr	r2, [r5, #16]
void TwoWire::isr(void)
{
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    2d76:	ldrb	r4, [r2, #3]
    2d78:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    2d7a:	lsls	r1, r4, #27
    2d7c:	bpl.n	2dca <i2c0_isr+0x5a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    2d7e:	movs	r3, #16
    2d80:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    2d82:	lsls	r3, r4, #25
    2d84:	bpl.n	2dc8 <i2c0_isr+0x58>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    2d86:	and.w	r4, r4, #4
    2d8a:	and.w	r3, r4, #255	; 0xff
    2d8e:	cmp	r4, #0
    2d90:	beq.n	2e4e <i2c0_isr+0xde>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    2d92:	ldr	r1, [pc, #272]	; (2ea4 <i2c0_isr+0x134>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    2d94:	ldr	r2, [r5, #100]	; 0x64
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
			txBufferLength = 0;
    2d96:	ldr	r4, [pc, #264]	; (2ea0 <i2c0_isr+0x130>)
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    2d98:	movs	r3, #0
    2d9a:	strb	r3, [r1, #0]
			txBufferLength = 0;
    2d9c:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    2da0:	cmp	r2, #0
    2da2:	beq.n	2e76 <i2c0_isr+0x106>
				user_onRequest();
    2da4:	blx	r2
			}
			if (txBufferLength == 0) {
    2da6:	ldrb.w	r3, [r4, #93]	; 0x5d
    2daa:	cmp	r3, #0
    2dac:	beq.n	2e76 <i2c0_isr+0x106>
    2dae:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    2db0:	movs	r2, #208	; 0xd0
    2db2:	strb	r2, [r3, #2]
    2db4:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    2db6:	ldrb.w	r2, [r5, #59]	; 0x3b
    2dba:	strb	r2, [r3, #4]
    2dbc:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    2dbe:	movs	r2, #1
    2dc0:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2dc4:	movs	r2, #2
    2dc6:	strb	r2, [r3, #3]
    2dc8:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    2dca:	and.w	r3, r4, #64	; 0x40
    2dce:	and.w	r0, r3, #255	; 0xff
    2dd2:	cmp	r3, #0
    2dd4:	bne.n	2d86 <i2c0_isr+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    2dd6:	ldrb	r3, [r2, #6]
    2dd8:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    2dda:	and.w	r1, r3, #96	; 0x60
    2dde:	cmp	r1, #96	; 0x60
    2de0:	beq.n	2e84 <i2c0_isr+0x114>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    2de2:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    2de4:	and.w	r3, r3, #16
    2de8:	and.w	r1, r3, #255	; 0xff
    2dec:	cbz	r3, 2e1e <i2c0_isr+0xae>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    2dee:	ands.w	r4, r4, #1
    2df2:	bne.n	2e68 <i2c0_isr+0xf8>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    2df4:	ldrb.w	r3, [r5, #92]	; 0x5c
    2df8:	ldrb.w	r0, [r5, #93]	; 0x5d
    2dfc:	ldr	r1, [pc, #160]	; (2ea0 <i2c0_isr+0x130>)
    2dfe:	cmp	r0, r3
    2e00:	bls.n	2e9c <i2c0_isr+0x12c>
				port().D = txBuffer[txBufferIndex++];
    2e02:	adds	r0, r1, r3
    2e04:	adds	r3, #1
    2e06:	ldrb.w	r0, [r0, #59]	; 0x3b
    2e0a:	strb.w	r3, [r1, #92]	; 0x5c
    2e0e:	strb	r0, [r2, #4]
    2e10:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    2e12:	movs	r2, #208	; 0xd0
    2e14:	strb	r2, [r3, #2]
    2e16:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2e18:	movs	r2, #2
    2e1a:	strb	r2, [r3, #3]
    2e1c:	b.n	2dc8 <i2c0_isr+0x58>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    2e1e:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    2e22:	ldrb	r3, [r2, #6]
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    2e24:	ldr	r0, [pc, #120]	; (2ea0 <i2c0_isr+0x130>)
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    2e26:	orr.w	r3, r3, #32
    2e2a:	strb	r3, [r2, #6]
    2e2c:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    2e2e:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    2e32:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    2e34:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    2e36:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    2e38:	bhi.n	2dc4 <i2c0_isr+0x54>
    2e3a:	ldr	r4, [pc, #104]	; (2ea4 <i2c0_isr+0x134>)
    2e3c:	ldrb	r4, [r4, #0]
    2e3e:	cmp	r4, #0
    2e40:	beq.n	2dc4 <i2c0_isr+0x54>
			rxBuffer[rxBufferLength++] = data;
    2e42:	adds	r4, r0, r1
    2e44:	adds	r1, #1
    2e46:	strb	r2, [r4, #24]
    2e48:	strb.w	r1, [r0, #57]	; 0x39
    2e4c:	b.n	2dc4 <i2c0_isr+0x54>
    2e4e:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    2e50:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    2e54:	movs	r3, #192	; 0xc0
    2e56:	strb	r3, [r2, #2]
    2e58:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    2e5a:	ldr	r2, [pc, #72]	; (2ea4 <i2c0_isr+0x134>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    2e5c:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    2e5e:	movs	r1, #1
    2e60:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2e62:	movs	r2, #2
    2e64:	strb	r2, [r3, #3]
    2e66:	b.n	2dc8 <i2c0_isr+0x58>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    2e68:	movs	r3, #192	; 0xc0
    2e6a:	strb	r3, [r2, #2]
    2e6c:	ldr	r3, [r5, #16]
			data = port().D;
    2e6e:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2e70:	movs	r2, #2
    2e72:	strb	r2, [r3, #3]
    2e74:	b.n	2dc8 <i2c0_isr+0x58>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    2e76:	movs	r2, #1
				txBuffer[0] = 0;
    2e78:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    2e7a:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    2e7e:	strb.w	r3, [r5, #59]	; 0x3b
    2e82:	b.n	2dae <i2c0_isr+0x3e>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    2e84:	and.w	r3, r3, #223	; 0xdf
    2e88:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    2e8a:	ldr	r3, [r5, #104]	; 0x68
    2e8c:	cbz	r3, 2e98 <i2c0_isr+0x128>
			rxBufferIndex = 0;
    2e8e:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    2e92:	ldrb.w	r0, [r5, #57]	; 0x39
    2e96:	blx	r3
    2e98:	ldr	r2, [r5, #16]
    2e9a:	b.n	2de2 <i2c0_isr+0x72>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    2e9c:	strb	r4, [r2, #4]
    2e9e:	b.n	2e10 <i2c0_isr+0xa0>
    2ea0:	.word	0x1fff07b4
    2ea4:	.word	0x20020358

00002ea8 <i2c1_isr>:
void i2c0_isr(void) { Wire.isr(); }
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    2ea8:	push	{r3, r4, r5, lr}
    2eaa:	ldr	r5, [pc, #300]	; (2fd8 <i2c1_isr+0x130>)
    2eac:	ldr	r2, [r5, #16]
void TwoWire::isr(void)
{
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    2eae:	ldrb	r4, [r2, #3]
    2eb0:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    2eb2:	lsls	r1, r4, #27
    2eb4:	bpl.n	2f02 <i2c1_isr+0x5a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    2eb6:	movs	r3, #16
    2eb8:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    2eba:	lsls	r3, r4, #25
    2ebc:	bpl.n	2f00 <i2c1_isr+0x58>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    2ebe:	and.w	r4, r4, #4
    2ec2:	and.w	r3, r4, #255	; 0xff
    2ec6:	cmp	r4, #0
    2ec8:	beq.n	2f86 <i2c1_isr+0xde>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    2eca:	ldr	r1, [pc, #272]	; (2fdc <i2c1_isr+0x134>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    2ecc:	ldr	r2, [r5, #100]	; 0x64
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
			txBufferLength = 0;
    2ece:	ldr	r4, [pc, #264]	; (2fd8 <i2c1_isr+0x130>)
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    2ed0:	movs	r3, #0
    2ed2:	strb	r3, [r1, #0]
			txBufferLength = 0;
    2ed4:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    2ed8:	cmp	r2, #0
    2eda:	beq.n	2fae <i2c1_isr+0x106>
				user_onRequest();
    2edc:	blx	r2
			}
			if (txBufferLength == 0) {
    2ede:	ldrb.w	r3, [r4, #93]	; 0x5d
    2ee2:	cmp	r3, #0
    2ee4:	beq.n	2fae <i2c1_isr+0x106>
    2ee6:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    2ee8:	movs	r2, #208	; 0xd0
    2eea:	strb	r2, [r3, #2]
    2eec:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    2eee:	ldrb.w	r2, [r5, #59]	; 0x3b
    2ef2:	strb	r2, [r3, #4]
    2ef4:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    2ef6:	movs	r2, #1
    2ef8:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2efc:	movs	r2, #2
    2efe:	strb	r2, [r3, #3]
    2f00:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    2f02:	and.w	r3, r4, #64	; 0x40
    2f06:	and.w	r0, r3, #255	; 0xff
    2f0a:	cmp	r3, #0
    2f0c:	bne.n	2ebe <i2c1_isr+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    2f0e:	ldrb	r3, [r2, #6]
    2f10:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    2f12:	and.w	r1, r3, #96	; 0x60
    2f16:	cmp	r1, #96	; 0x60
    2f18:	beq.n	2fbc <i2c1_isr+0x114>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    2f1a:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    2f1c:	and.w	r3, r3, #16
    2f20:	and.w	r1, r3, #255	; 0xff
    2f24:	cbz	r3, 2f56 <i2c1_isr+0xae>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    2f26:	ands.w	r4, r4, #1
    2f2a:	bne.n	2fa0 <i2c1_isr+0xf8>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    2f2c:	ldrb.w	r3, [r5, #92]	; 0x5c
    2f30:	ldrb.w	r0, [r5, #93]	; 0x5d
    2f34:	ldr	r1, [pc, #160]	; (2fd8 <i2c1_isr+0x130>)
    2f36:	cmp	r0, r3
    2f38:	bls.n	2fd4 <i2c1_isr+0x12c>
				port().D = txBuffer[txBufferIndex++];
    2f3a:	adds	r0, r1, r3
    2f3c:	adds	r3, #1
    2f3e:	ldrb.w	r0, [r0, #59]	; 0x3b
    2f42:	strb.w	r3, [r1, #92]	; 0x5c
    2f46:	strb	r0, [r2, #4]
    2f48:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    2f4a:	movs	r2, #208	; 0xd0
    2f4c:	strb	r2, [r3, #2]
    2f4e:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2f50:	movs	r2, #2
    2f52:	strb	r2, [r3, #3]
    2f54:	b.n	2f00 <i2c1_isr+0x58>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    2f56:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    2f5a:	ldrb	r3, [r2, #6]
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    2f5c:	ldr	r0, [pc, #120]	; (2fd8 <i2c1_isr+0x130>)
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    2f5e:	orr.w	r3, r3, #32
    2f62:	strb	r3, [r2, #6]
    2f64:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    2f66:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    2f6a:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    2f6c:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    2f6e:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    2f70:	bhi.n	2efc <i2c1_isr+0x54>
    2f72:	ldr	r4, [pc, #104]	; (2fdc <i2c1_isr+0x134>)
    2f74:	ldrb	r4, [r4, #0]
    2f76:	cmp	r4, #0
    2f78:	beq.n	2efc <i2c1_isr+0x54>
			rxBuffer[rxBufferLength++] = data;
    2f7a:	adds	r4, r0, r1
    2f7c:	adds	r1, #1
    2f7e:	strb	r2, [r4, #24]
    2f80:	strb.w	r1, [r0, #57]	; 0x39
    2f84:	b.n	2efc <i2c1_isr+0x54>
    2f86:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    2f88:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    2f8c:	movs	r3, #192	; 0xc0
    2f8e:	strb	r3, [r2, #2]
    2f90:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    2f92:	ldr	r2, [pc, #72]	; (2fdc <i2c1_isr+0x134>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    2f94:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    2f96:	movs	r1, #1
    2f98:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2f9a:	movs	r2, #2
    2f9c:	strb	r2, [r3, #3]
    2f9e:	b.n	2f00 <i2c1_isr+0x58>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    2fa0:	movs	r3, #192	; 0xc0
    2fa2:	strb	r3, [r2, #2]
    2fa4:	ldr	r3, [r5, #16]
			data = port().D;
    2fa6:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2fa8:	movs	r2, #2
    2faa:	strb	r2, [r3, #3]
    2fac:	b.n	2f00 <i2c1_isr+0x58>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    2fae:	movs	r2, #1
				txBuffer[0] = 0;
    2fb0:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    2fb2:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    2fb6:	strb.w	r3, [r5, #59]	; 0x3b
    2fba:	b.n	2ee6 <i2c1_isr+0x3e>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    2fbc:	and.w	r3, r3, #223	; 0xdf
    2fc0:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    2fc2:	ldr	r3, [r5, #104]	; 0x68
    2fc4:	cbz	r3, 2fd0 <i2c1_isr+0x128>
			rxBufferIndex = 0;
    2fc6:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    2fca:	ldrb.w	r0, [r5, #57]	; 0x39
    2fce:	blx	r3
    2fd0:	ldr	r2, [r5, #16]
    2fd2:	b.n	2f1a <i2c1_isr+0x72>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    2fd4:	strb	r4, [r2, #4]
    2fd6:	b.n	2f48 <i2c1_isr+0xa0>
    2fd8:	.word	0x1fff0820
    2fdc:	.word	0x20020358

00002fe0 <i2c2_isr>:
void i2c1_isr(void) { Wire1.isr(); }
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    2fe0:	push	{r3, r4, r5, lr}
    2fe2:	ldr	r5, [pc, #300]	; (3110 <i2c2_isr+0x130>)
    2fe4:	ldr	r2, [r5, #16]
void TwoWire::isr(void)
{
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    2fe6:	ldrb	r4, [r2, #3]
    2fe8:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    2fea:	lsls	r1, r4, #27
    2fec:	bpl.n	303a <i2c2_isr+0x5a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    2fee:	movs	r3, #16
    2ff0:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    2ff2:	lsls	r3, r4, #25
    2ff4:	bpl.n	3038 <i2c2_isr+0x58>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    2ff6:	and.w	r4, r4, #4
    2ffa:	and.w	r3, r4, #255	; 0xff
    2ffe:	cmp	r4, #0
    3000:	beq.n	30be <i2c2_isr+0xde>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    3002:	ldr	r1, [pc, #272]	; (3114 <i2c2_isr+0x134>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    3004:	ldr	r2, [r5, #100]	; 0x64
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
			txBufferLength = 0;
    3006:	ldr	r4, [pc, #264]	; (3110 <i2c2_isr+0x130>)
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    3008:	movs	r3, #0
    300a:	strb	r3, [r1, #0]
			txBufferLength = 0;
    300c:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    3010:	cmp	r2, #0
    3012:	beq.n	30e6 <i2c2_isr+0x106>
				user_onRequest();
    3014:	blx	r2
			}
			if (txBufferLength == 0) {
    3016:	ldrb.w	r3, [r4, #93]	; 0x5d
    301a:	cmp	r3, #0
    301c:	beq.n	30e6 <i2c2_isr+0x106>
    301e:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    3020:	movs	r2, #208	; 0xd0
    3022:	strb	r2, [r3, #2]
    3024:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    3026:	ldrb.w	r2, [r5, #59]	; 0x3b
    302a:	strb	r2, [r3, #4]
    302c:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    302e:	movs	r2, #1
    3030:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3034:	movs	r2, #2
    3036:	strb	r2, [r3, #3]
    3038:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    303a:	and.w	r3, r4, #64	; 0x40
    303e:	and.w	r0, r3, #255	; 0xff
    3042:	cmp	r3, #0
    3044:	bne.n	2ff6 <i2c2_isr+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    3046:	ldrb	r3, [r2, #6]
    3048:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    304a:	and.w	r1, r3, #96	; 0x60
    304e:	cmp	r1, #96	; 0x60
    3050:	beq.n	30f4 <i2c2_isr+0x114>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    3052:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    3054:	and.w	r3, r3, #16
    3058:	and.w	r1, r3, #255	; 0xff
    305c:	cbz	r3, 308e <i2c2_isr+0xae>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    305e:	ands.w	r4, r4, #1
    3062:	bne.n	30d8 <i2c2_isr+0xf8>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    3064:	ldrb.w	r3, [r5, #92]	; 0x5c
    3068:	ldrb.w	r0, [r5, #93]	; 0x5d
    306c:	ldr	r1, [pc, #160]	; (3110 <i2c2_isr+0x130>)
    306e:	cmp	r0, r3
    3070:	bls.n	310c <i2c2_isr+0x12c>
				port().D = txBuffer[txBufferIndex++];
    3072:	adds	r0, r1, r3
    3074:	adds	r3, #1
    3076:	ldrb.w	r0, [r0, #59]	; 0x3b
    307a:	strb.w	r3, [r1, #92]	; 0x5c
    307e:	strb	r0, [r2, #4]
    3080:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    3082:	movs	r2, #208	; 0xd0
    3084:	strb	r2, [r3, #2]
    3086:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3088:	movs	r2, #2
    308a:	strb	r2, [r3, #3]
    308c:	b.n	3038 <i2c2_isr+0x58>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    308e:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    3092:	ldrb	r3, [r2, #6]
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    3094:	ldr	r0, [pc, #120]	; (3110 <i2c2_isr+0x130>)
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    3096:	orr.w	r3, r3, #32
    309a:	strb	r3, [r2, #6]
    309c:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    309e:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    30a2:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    30a4:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    30a6:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    30a8:	bhi.n	3034 <i2c2_isr+0x54>
    30aa:	ldr	r4, [pc, #104]	; (3114 <i2c2_isr+0x134>)
    30ac:	ldrb	r4, [r4, #0]
    30ae:	cmp	r4, #0
    30b0:	beq.n	3034 <i2c2_isr+0x54>
			rxBuffer[rxBufferLength++] = data;
    30b2:	adds	r4, r0, r1
    30b4:	adds	r1, #1
    30b6:	strb	r2, [r4, #24]
    30b8:	strb.w	r1, [r0, #57]	; 0x39
    30bc:	b.n	3034 <i2c2_isr+0x54>
    30be:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    30c0:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    30c4:	movs	r3, #192	; 0xc0
    30c6:	strb	r3, [r2, #2]
    30c8:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    30ca:	ldr	r2, [pc, #72]	; (3114 <i2c2_isr+0x134>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    30cc:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    30ce:	movs	r1, #1
    30d0:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    30d2:	movs	r2, #2
    30d4:	strb	r2, [r3, #3]
    30d6:	b.n	3038 <i2c2_isr+0x58>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    30d8:	movs	r3, #192	; 0xc0
    30da:	strb	r3, [r2, #2]
    30dc:	ldr	r3, [r5, #16]
			data = port().D;
    30de:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    30e0:	movs	r2, #2
    30e2:	strb	r2, [r3, #3]
    30e4:	b.n	3038 <i2c2_isr+0x58>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    30e6:	movs	r2, #1
				txBuffer[0] = 0;
    30e8:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    30ea:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    30ee:	strb.w	r3, [r5, #59]	; 0x3b
    30f2:	b.n	301e <i2c2_isr+0x3e>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    30f4:	and.w	r3, r3, #223	; 0xdf
    30f8:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    30fa:	ldr	r3, [r5, #104]	; 0x68
    30fc:	cbz	r3, 3108 <i2c2_isr+0x128>
			rxBufferIndex = 0;
    30fe:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    3102:	ldrb.w	r0, [r5, #57]	; 0x39
    3106:	blx	r3
    3108:	ldr	r2, [r5, #16]
    310a:	b.n	3052 <i2c2_isr+0x72>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    310c:	strb	r4, [r2, #4]
    310e:	b.n	3080 <i2c2_isr+0xa0>
    3110:	.word	0x1fff0748
    3114:	.word	0x20020358

00003118 <FsFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//-----------------------------------------------------------------------------
bool FsFile::close() {
    3118:	push	{r4, lr}
    311a:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    311c:	ldr	r0, [r0, #72]	; 0x48
    311e:	cbz	r0, 312c <FsFile::close()+0x14>
    3120:	bl	4f7c <FatFile::close()>
    3124:	cbz	r0, 312c <FsFile::close()+0x14>
    m_fFile = nullptr;
    3126:	movs	r3, #0
    3128:	str	r3, [r4, #72]	; 0x48
    return true;
    312a:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    312c:	ldr	r0, [r4, #76]	; 0x4c
    312e:	cbz	r0, 313c <FsFile::close()+0x24>
    3130:	bl	32d0 <ExFatFile::close()>
    3134:	cbz	r0, 313c <FsFile::close()+0x24>
    m_xFile = nullptr;
    3136:	movs	r3, #0
    3138:	str	r3, [r4, #76]	; 0x4c
    313a:	pop	{r4, pc}
    return true;
  }
  return false;
    313c:	movs	r0, #0
}
    313e:	pop	{r4, pc}

00003140 <FsFile::open(FsVolume*, char const*, unsigned char)>:
  }
  return false;
}
//-----------------------------------------------------------------------------
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
  if (!vol) {
    3140:	cmp	r1, #0
    3142:	beq.n	31da <FsFile::open(FsVolume*, char const*, unsigned char)+0x9a>
    m_xFile = nullptr;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
    3144:	push	{r3, r4, r5, r6, r7, lr}
    3146:	mov	r4, r0
  }
  return *this;
}
//-----------------------------------------------------------------------------
bool FsFile::close() {
  if (m_fFile && m_fFile->close()) {
    3148:	ldr	r0, [r0, #72]	; 0x48
    314a:	mov	r5, r1
    314c:	mov	r7, r3
    314e:	mov	r6, r2
    3150:	cbz	r0, 3188 <FsFile::open(FsVolume*, char const*, unsigned char)+0x48>
    3152:	bl	4f7c <FatFile::close()>
    3156:	cbz	r0, 3188 <FsFile::open(FsVolume*, char const*, unsigned char)+0x48>
    m_fFile = nullptr;
    3158:	movs	r3, #0
    315a:	str	r3, [r4, #72]	; 0x48
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    315c:	ldr.w	r3, [r5, #1144]	; 0x478
    3160:	cbz	r3, 31a2 <FsFile::open(FsVolume*, char const*, unsigned char)+0x62>
    m_fFile = new (m_fileMem) FatFile;
    3162:	add.w	r1, r4, #16
    3166:	movs	r0, #36	; 0x24
    3168:	bl	32cc <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    316c:	movs	r3, #0
    316e:	strb	r3, [r0, #0]
    3170:	strb	r3, [r0, #1]
    3172:	strb	r3, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    3174:	mov	r2, r6
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    3176:	str	r0, [r4, #72]	; 0x48
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    3178:	mov	r3, r7
    317a:	ldr.w	r1, [r5, #1144]	; 0x478
    317e:	bl	518c <FatFile::open(FatVolume*, char const*, unsigned char)>
    3182:	cbz	r0, 31d6 <FsFile::open(FsVolume*, char const*, unsigned char)+0x96>
      return true;
    3184:	movs	r0, #1
    3186:	pop	{r3, r4, r5, r6, r7, pc}
bool FsFile::close() {
  if (m_fFile && m_fFile->close()) {
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    3188:	ldr	r0, [r4, #76]	; 0x4c
    318a:	cmp	r0, #0
    318c:	beq.n	315c <FsFile::open(FsVolume*, char const*, unsigned char)+0x1c>
    318e:	bl	32d0 <ExFatFile::close()>
    3192:	cmp	r0, #0
    3194:	beq.n	315c <FsFile::open(FsVolume*, char const*, unsigned char)+0x1c>
    m_xFile = nullptr;
    3196:	movs	r3, #0
    3198:	str	r3, [r4, #76]	; 0x4c
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    319a:	ldr.w	r3, [r5, #1144]	; 0x478
    319e:	cmp	r3, #0
    31a0:	bne.n	3162 <FsFile::open(FsVolume*, char const*, unsigned char)+0x22>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    31a2:	ldr.w	r3, [r5, #1148]	; 0x47c
    31a6:	cbz	r3, 31de <FsFile::open(FsVolume*, char const*, unsigned char)+0x9e>
    m_xFile = new (m_fileMem) ExFatFile;
    31a8:	add.w	r1, r4, #16
    31ac:	movs	r0, #56	; 0x38
    31ae:	bl	32cc <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    31b2:	movs	r3, #0
    31b4:	strb.w	r3, [r0, #49]	; 0x31
    31b8:	strb.w	r3, [r0, #50]	; 0x32
    31bc:	strb.w	r3, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    31c0:	ldr.w	r1, [r5, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    31c4:	str	r0, [r4, #76]	; 0x4c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    31c6:	mov	r3, r7
    31c8:	mov	r2, r6
    31ca:	bl	3b68 <ExFatFile::open(ExFatVolume*, char const*, int)>
    31ce:	cmp	r0, #0
    31d0:	bne.n	3184 <FsFile::open(FsVolume*, char const*, unsigned char)+0x44>
      return true;
    }
    m_xFile = nullptr;
    31d2:	str	r0, [r4, #76]	; 0x4c
  }
  return false;
}
    31d4:	pop	{r3, r4, r5, r6, r7, pc}
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
    31d6:	str	r0, [r4, #72]	; 0x48
    return false;
    31d8:	pop	{r3, r4, r5, r6, r7, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
  if (!vol) {
    return false;
    31da:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    31dc:	bx	lr
  return false;
}
//-----------------------------------------------------------------------------
bool FsFile::open(FsVolume* vol, const char* path, uint8_t oflag) {
  if (!vol) {
    return false;
    31de:	movs	r0, #0
    31e0:	pop	{r3, r4, r5, r6, r7, pc}
    31e2:	nop

000031e4 <FsVolume::begin(SdCardInterface*)>:
 */
#include "FsVolume.h"
#include "FsFile.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    31e4:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    31e6:	movs	r6, #0
 */
#include "FsVolume.h"
#include "FsFile.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    31e8:	mov	r5, r0
  m_blockDev = blockDev;
    31ea:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    31ee:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    31f2:	mov	r1, r0
    31f4:	mov.w	r0, #1144	; 0x478
    31f8:	bl	32cc <operator new(unsigned int, unsigned long*)>
    31fc:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    31fe:	str	r6, [r0, #4]
    invalidate();
    3200:	bl	3b78 <FsCache::invalidate()>
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    3204:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    3208:	add.w	r0, r4, #524	; 0x20c
    320c:	bl	3b78 <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    3210:	strb.w	r6, [r4, #1084]	; 0x43c
    3214:	strb.w	r6, [r4, #1137]	; 0x471
    3218:	strb.w	r6, [r4, #1138]	; 0x472
    321c:	strb.w	r6, [r4, #1139]	; 0x473
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    3220:	ldr.w	r6, [r5, #1152]	; 0x480
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    3224:	str.w	r4, [r5, #1148]	; 0x47c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 0) {
    if (!(part ? init(dev, part) : init(dev, 1) || init(dev, 0))) {
    3228:	mov	r1, r6
    322a:	mov	r0, r4
    322c:	movs	r2, #1
    322e:	bl	3c34 <ExFatPartition::init(SdCardInterface*, unsigned char)>
    3232:	cbz	r0, 3252 <FsVolume::begin(SdCardInterface*)+0x6e>
  /**
   * Set volume working directory to root.
   * \return true for success else false.
   */
  bool chdir() {
    m_vwd.close();
    3234:	add.w	r6, r4, #1088	; 0x440
    3238:	mov	r0, r6
    323a:	bl	32d0 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    323e:	mov	r1, r4
    3240:	mov	r0, r6
    3242:	bl	33a0 <ExFatFile::openRoot(ExFatVolume*)>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    3246:	cbz	r0, 3260 <FsVolume::begin(SdCardInterface*)+0x7c>
    3248:	ldr	r2, [pc, #124]	; (32c8 <FsVolume::begin(SdCardInterface*)+0xe4>)
  return false;

 done:
  m_cwv = this;

  return true;
    324a:	mov	r3, r5
    324c:	movs	r0, #1
    324e:	str	r3, [r2, #0]
}
    3250:	pop	{r4, r5, r6, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 0) {
    if (!(part ? init(dev, part) : init(dev, 1) || init(dev, 0))) {
    3252:	mov	r2, r0
    3254:	mov	r1, r6
    3256:	mov	r0, r4
    3258:	bl	3c34 <ExFatPartition::init(SdCardInterface*, unsigned char)>
    325c:	cmp	r0, #0
    325e:	bne.n	3234 <FsVolume::begin(SdCardInterface*)+0x50>
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    3260:	movs	r6, #0
    3262:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    3266:	mov	r1, r5
    3268:	mov.w	r0, #1120	; 0x460
    326c:	bl	32cc <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    3270:	strb	r6, [r0, #7]
    3272:	strb.w	r6, [r0, #1084]	; 0x43c
    3276:	strb.w	r6, [r0, #1085]	; 0x43d
    327a:	strb.w	r6, [r0, #1086]	; 0x43e
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    327e:	ldr.w	r6, [r5, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
    3282:	str.w	r0, [r5, #1144]	; 0x478
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 0) {
    if (!(part ? init(dev, part) : init(dev, 1) || init(dev, 0))) {
    3286:	movs	r2, #1
    3288:	mov	r1, r6
    328a:	mov	r4, r0
    328c:	bl	6378 <FatPartition::init(SdCardInterface*, unsigned char)>
    3290:	cbz	r0, 32b8 <FsVolume::begin(SdCardInterface*)+0xd4>
  /**
   * Set volume working directory to root.
   * \return true for success else false.
   */
  bool chdir() {
    m_vwd.close();
    3292:	addw	r6, r4, #1084	; 0x43c
    3296:	mov	r0, r6
    3298:	bl	4f7c <FatFile::close()>
    return m_vwd.openRoot(this);
    329c:	mov	r1, r4
    329e:	mov	r0, r6
    32a0:	bl	519c <FatFile::openRoot(FatVolume*)>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    32a4:	cmp	r0, #0
    32a6:	bne.n	3248 <FsVolume::begin(SdCardInterface*)+0x64>
    goto done;
  }
  m_cwv = nullptr;
  m_fVol = nullptr;
    32a8:	movs	r2, #0
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    32aa:	mov	r3, r2
  m_fVol = nullptr;
    32ac:	str.w	r2, [r5, #1144]	; 0x478
  return false;
    32b0:	mov	r0, r2
    32b2:	ldr	r2, [pc, #20]	; (32c8 <FsVolume::begin(SdCardInterface*)+0xe4>)
    32b4:	str	r3, [r2, #0]

 done:
  m_cwv = this;

  return true;
}
    32b6:	pop	{r4, r5, r6, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 0) {
    if (!(part ? init(dev, part) : init(dev, 1) || init(dev, 0))) {
    32b8:	mov	r2, r0
    32ba:	mov	r1, r6
    32bc:	mov	r0, r4
    32be:	bl	6378 <FatPartition::init(SdCardInterface*, unsigned char)>
    32c2:	cmp	r0, #0
    32c4:	bne.n	3292 <FsVolume::begin(SdCardInterface*)+0xae>
    32c6:	b.n	32a8 <FsVolume::begin(SdCardInterface*)+0xc4>
    32c8:	.word	0x2002035c

000032cc <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    32cc:	mov	r0, r1
    32ce:	bx	lr

000032d0 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    32d0:	push	{r4, lr}
    32d2:	mov	r4, r0
  bool rtn = sync();
    32d4:	bl	4844 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    32d8:	movs	r3, #0
    32da:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    32de:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    32e2:	pop	{r4, pc}

000032e4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    32e4:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    32e6:	ldrb	r0, [r1, #0]
    32e8:	cmp	r0, #32
    32ea:	bne.n	32f4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    32ec:	ldrb.w	r0, [r1, #1]!
    32f0:	cmp	r0, #32
    32f2:	beq.n	32ec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    32f4:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    32f6:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    32f8:	cmp	r0, #0
    32fa:	beq.n	3396 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb2>
    32fc:	cmp	r0, #47	; 0x2f
    32fe:	beq.n	3358 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3300:	cmp	r0, #92	; 0x5c
    3302:	beq.n	3346 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    3304:	sub.w	r4, r0, #34	; 0x22
    3308:	uxtb	r4, r4
    330a:	cmp	r4, #29
    330c:	bls.n	334a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    330e:	ldr.w	lr, [pc, #140]	; 339c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb8>
    3312:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3314:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    3316:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3318:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    331c:	mov	r7, r6
    331e:	beq.n	3346 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3320:	cmp	r5, #94	; 0x5e
    3322:	bhi.n	3346 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3324:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3328:	sub.w	r5, r0, #34	; 0x22
    332c:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    332e:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    3330:	cbz	r0, 3388 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa4>
    3332:	cmp	r0, #47	; 0x2f
    3334:	beq.n	335a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    3336:	cmp	r0, #92	; 0x5c
    3338:	lsr.w	r7, lr, r5
    333c:	beq.n	3346 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    333e:	cmp	r5, #29
    3340:	bhi.n	3316 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    3342:	lsls	r5, r7, #31
    3344:	bpl.n	3316 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3346:	movs	r0, #0
    3348:	pop	{r4, r5, r6, r7, pc}
    334a:	ldr	r5, [pc, #80]	; (339c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb8>)
    334c:	lsr.w	r4, r5, r4
    3350:	lsls	r6, r4, #31
    3352:	bpl.n	330e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    3354:	movs	r0, #0
    3356:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3358:	movs	r4, #0
    335a:	add	r1, r4
    335c:	mov	r0, r1
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    335e:	mov	r6, r0
    3360:	ldrb.w	r5, [r0], #1
    3364:	cmp	r5, #32
    3366:	beq.n	335e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7a>
    3368:	cmp	r5, #47	; 0x2f
    336a:	beq.n	335e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7a>
  *ptr = &path[end];
    336c:	str	r6, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    336e:	cbz	r4, 3380 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>
    c = path[len - 1];
    3370:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    3374:	cmp	r3, #46	; 0x2e
    3376:	beq.n	337c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>
    3378:	cmp	r3, #32
    337a:	bne.n	338e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xaa>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    337c:	subs	r4, #1
    337e:	bne.n	3370 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    3380:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    3382:	str	r0, [r2, #0]
  return true;
    3384:	movs	r0, #1
    3386:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3388:	str	r7, [r3, #0]
    338a:	add	r1, r4
    338c:	b.n	3370 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    338e:	cmp	r4, #255	; 0xff
    3390:	ble.n	3380 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3392:	movs	r0, #0
    3394:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3396:	str	r1, [r3, #0]
    3398:	b.n	3382 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9e>
    339a:	nop
    339c:	.word	0x35000101

000033a0 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    33a0:	ldrb.w	r2, [r0, #49]	; 0x31
    33a4:	cbz	r2, 33aa <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    33a6:	movs	r0, #0
    33a8:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    33aa:	push	{r3, r4, r5, lr}
    33ac:	mov	r4, r0
    33ae:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    33b0:	mov	r1, r2
    33b2:	movs	r2, #56	; 0x38
    33b4:	bl	caa8 <memset>
  m_attributes = FILE_ATTR_ROOT;
    33b8:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    33ba:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    33bc:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    33c0:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    33c4:	str	r5, [r4, #32]
    33c6:	pop	{r3, r4, r5, pc}

000033c8 <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    33c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33cc:	ldrb.w	r3, [r0, #51]	; 0x33
    33d0:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    33d2:	lsls	r0, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    33d4:	sub	sp, #8
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    33d6:	bpl.w	353e <ExFatFile::read(void*, unsigned int)+0x176>
    33da:	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    33dc:	lsls	r1, r3, #25
    33de:	mov	r6, r2
    33e0:	bpl.w	3554 <ExFatFile::read(void*, unsigned int)+0x18c>
    if ((m_curPosition + count) > m_validLength) {
    33e4:	ldrd	r0, r1, [r4]
    33e8:	ldrd	r2, r3, [r4, #16]
    33ec:	adds.w	r8, r0, r6
    33f0:	adc.w	r9, r1, #0
    33f4:	cmp	r3, r9
    33f6:	it	eq
    33f8:	cmpeq	r2, r8
    33fa:	bcc.w	3560 <ExFatFile::read(void*, unsigned int)+0x198>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    33fe:	cmp	r6, #0
    3400:	beq.w	3564 <ExFatFile::read(void*, unsigned int)+0x19c>
    3404:	mov	r9, r4
    3406:	ldrd	r2, r3, [r9], #24
    340a:	mov	r8, r6
    340c:	b.n	34ba <ExFatFile::read(void*, unsigned int)+0xf2>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    340e:	orrs	r3, r2
    3410:	bne.n	34f6 <ExFatFile::read(void*, unsigned int)+0x12e>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3412:	ldrb.w	r3, [r4, #49]	; 0x31
    3416:	lsls	r3, r3, #25
    3418:	ite	mi
    341a:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    341e:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    3420:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    3422:	ldrb.w	lr, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3426:	ldr.w	r3, [r0, #1060]	; 0x424
    342a:	subs	r1, #2
    342c:	lsrs	r7, r7, #9
    342e:	lsl.w	r2, r1, lr
    3432:	adds	r1, r7, r3
    3434:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    3436:	cmp.w	sl, #0
    343a:	bne.n	34ce <ExFatFile::read(void*, unsigned int)+0x106>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    343c:	cmp.w	r8, #512	; 0x200
    3440:	bcc.n	34ce <ExFatFile::read(void*, unsigned int)+0x106>
    3442:	ldr.w	r3, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    3446:	cmp	r1, r3
    3448:	beq.n	34ce <ExFatFile::read(void*, unsigned int)+0x106>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    344a:	cmp.w	r8, #1024	; 0x400
    344e:	bcc.n	3504 <ExFatFile::read(void*, unsigned int)+0x13c>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isContiguous()) {
    3450:	ldrb.w	r2, [r4, #51]	; 0x33
    3454:	lsls	r2, r2, #25
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3456:	mov.w	sl, r8, lsr #9
      if (!isContiguous()) {
    345a:	bmi.n	346c <ExFatFile::read(void*, unsigned int)+0xa4>
        uint32_t maxNs = m_vol->sectorsPerCluster()
                         - (clusterOffset >> m_vol->bytesPerSectorShift());
    345c:	movs	r2, #1
    345e:	lsl.w	lr, r2, lr
    3462:	rsb	r7, r7, lr
    3466:	cmp	sl, r7
    3468:	it	cs
    346a:	movcs	sl, r7
          ns = maxNs;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (m_vol->dataCacheSector() <= sector
          && m_vol->dataCacheSector() < (sector + ns)) {
    346c:	cmp	r1, r3
                         - (clusterOffset >> m_vol->bytesPerSectorShift());
        if (ns > maxNs) {
          ns = maxNs;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    346e:	mov.w	r7, sl, lsl #9
      if (m_vol->dataCacheSector() <= sector
          && m_vol->dataCacheSector() < (sector + ns)) {
    3472:	bcc.n	348e <ExFatFile::read(void*, unsigned int)+0xc6>
    3474:	add.w	r2, sl, r1
    3478:	cmp	r2, r3
    347a:	bls.n	348e <ExFatFile::read(void*, unsigned int)+0xc6>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    347c:	add.w	r0, r0, #524	; 0x20c
    3480:	str	r1, [sp, #4]
    3482:	bl	3c08 <FsCache::sync()>
        // flush cache if a sector is in the cache
        if (!m_vol->dataCacheSync()) {
    3486:	cmp	r0, #0
    3488:	beq.n	353e <ExFatFile::read(void*, unsigned int)+0x176>
    348a:	ldr	r0, [r4, #32]
    348c:	ldr	r1, [sp, #4]
    348e:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    3492:	ldr	r2, [r0, #0]
    3494:	mov	r3, sl
    3496:	ldr.w	sl, [r2, #12]
    349a:	mov	r2, r5
    349c:	blx	sl
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    349e:	cmp	r0, #0
    34a0:	beq.n	353e <ExFatFile::read(void*, unsigned int)+0x176>
    34a2:	mov	r0, r7
    34a4:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    34a6:	ldrd	r2, r3, [r4]
    34aa:	adds	r2, r2, r0
    34ac:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    34ae:	subs.w	r8, r8, r7
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    34b2:	add	r5, r7
    m_curPosition += n;
    34b4:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    34b8:	beq.n	3564 <ExFatFile::read(void*, unsigned int)+0x19c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    34ba:	ldr	r0, [r4, #32]
    34bc:	ldr.w	r7, [r0, #1072]	; 0x430
    34c0:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    34c2:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    34c6:	cmp	r7, #0
    34c8:	beq.n	340e <ExFatFile::read(void*, unsigned int)+0x46>
    34ca:	ldr	r1, [r4, #24]
    34cc:	b.n	3422 <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    34ce:	add.w	r0, r0, #524	; 0x20c
    34d2:	movs	r2, #0
    34d4:	bl	3b84 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    34d8:	cbz	r0, 353e <ExFatFile::read(void*, unsigned int)+0x176>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    34da:	rsb	r7, sl, #512	; 0x200
    34de:	cmp	r7, r8
    34e0:	it	cs
    34e2:	movcs	r7, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    34e4:	add.w	r1, r0, sl
    34e8:	mov	r2, r7
    34ea:	mov	r0, r5
    34ec:	bl	9324 <memcpy>
    34f0:	mov	r0, r7
    34f2:	movs	r1, #0
    34f4:	b.n	34a6 <ExFatFile::read(void*, unsigned int)+0xde>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    34f6:	ldrb.w	r3, [r4, #51]	; 0x33
    34fa:	lsls	r1, r3, #25
    34fc:	bpl.n	351e <ExFatFile::read(void*, unsigned int)+0x156>
        m_curCluster++;
    34fe:	ldr	r1, [r4, #24]
    3500:	adds	r1, #1
    3502:	b.n	3420 <ExFatFile::read(void*, unsigned int)+0x58>
    3504:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    3508:	ldr	r3, [r0, #0]
    350a:	mov	r2, r5
    350c:	ldr	r3, [r3, #8]
    350e:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    3510:	cbz	r0, 353e <ExFatFile::read(void*, unsigned int)+0x176>
    3512:	mov.w	r0, #512	; 0x200
    3516:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3518:	mov.w	r7, #512	; 0x200
    351c:	b.n	34a6 <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    351e:	mov	r2, r9
    3520:	ldr	r1, [r4, #24]
    3522:	bl	41dc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3526:	sxtb	r0, r0
        if (fg < 0) {
    3528:	cmp	r0, #0
    352a:	blt.n	353e <ExFatFile::read(void*, unsigned int)+0x176>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    352c:	beq.n	3534 <ExFatFile::read(void*, unsigned int)+0x16c>
    352e:	ldr	r0, [r4, #32]
    3530:	ldr	r1, [r4, #24]
    3532:	b.n	3422 <ExFatFile::read(void*, unsigned int)+0x5a>
          // EOF if directory.
          if (isDir()) {
    3534:	ldrb.w	r3, [r4, #49]	; 0x31
    3538:	tst.w	r3, #80	; 0x50
    353c:	bne.n	3568 <ExFatFile::read(void*, unsigned int)+0x1a0>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    353e:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    3542:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    3546:	orr.w	r3, r3, #2
    354a:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    354e:	add	sp, #8
    3550:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3554:	ldrb.w	r3, [r4, #49]	; 0x31
    3558:	lsls	r2, r3, #28
    355a:	bmi.w	33e4 <ExFatFile::read(void*, unsigned int)+0x1c>
    355e:	b.n	33fe <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    3560:	subs	r6, r2, r0
    3562:	b.n	33fe <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3564:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    3568:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    356c:	add	sp, #8
    356e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3572:	nop

00003574 <ExFatFile::peek()>:
 fail:
  *name = 0;
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    3574:	push	{r4, r5, r6, r7, lr}
    3576:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3578:	movs	r2, #1
    357a:	add.w	r1, sp, #7
    357e:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    3580:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    3584:	ldr	r5, [r0, #24]
    3586:	bl	33c8 <ExFatFile::read(void*, unsigned int)>
    358a:	cmp	r0, #1
    358c:	it	eq
    358e:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    3592:	str	r5, [r4, #24]
    3594:	it	ne
    3596:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    359a:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    359e:	add	sp, #12
    35a0:	pop	{r4, r5, r6, r7, pc}
    35a2:	nop

000035a4 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    35a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35a8:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    35ac:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    35ae:	sub	sp, #12
    35b0:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    35b2:	cmp.w	lr, #0
    35b6:	beq.n	35f0 <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    35b8:	ldrd	r0, r1, [r0]
    35bc:	cmp	r1, r3
    35be:	it	eq
    35c0:	cmpeq	r0, r2
    35c2:	mov	r6, r2
    35c4:	mov	r7, r3
    35c6:	beq.n	3640 <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    35c8:	orrs.w	r3, r6, r7
    35cc:	bne.n	35de <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    35ce:	movs	r3, #0
    35d0:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    35d2:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    35d4:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    35d8:	add	sp, #12
    35da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    35de:	tst.w	lr, #8
    35e2:	beq.n	35fa <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    35e4:	ldrd	r2, r3, [r4, #16]
    35e8:	cmp	r3, r7
    35ea:	it	eq
    35ec:	cmpeq	r2, r6
    35ee:	bcs.n	35fa <ExFatFile::seekSet(unsigned long long)+0x56>
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    35f0:	str	r5, [r4, #24]
  return false;
    35f2:	movs	r0, #0
}
    35f4:	add	sp, #12
    35f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    35fa:	ldr	r3, [r4, #32]
    35fc:	str	r3, [sp, #4]
    35fe:	ldrb.w	ip, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    3602:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3606:	add.w	ip, ip, #9
    360a:	uxtb.w	ip, ip
    360e:	adds.w	r2, r6, #4294967295
    3612:	adc.w	r3, r7, #4294967295
    3616:	rsb	r8, ip, #32
    361a:	lsl.w	fp, r3, r8
    361e:	lsr.w	r2, r2, ip
    3622:	orr.w	r2, r2, fp
    3626:	sub.w	fp, ip, #32
    362a:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    362e:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3632:	orr.w	r2, r2, r3
  if (isContiguous()) {
    3636:	beq.n	3644 <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    3638:	ldr	r3, [r4, #28]
    363a:	add	r2, r3
    363c:	str	r2, [r4, #24]
    goto done;
    363e:	b.n	35d2 <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    3640:	movs	r0, #1
    3642:	b.n	35f4 <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3644:	adds.w	r9, r0, #4294967295
    3648:	adc.w	sl, r1, #4294967295
    364c:	lsr.w	ip, r9, ip
    3650:	lsl.w	r8, sl, r8
    3654:	orr.w	ip, ip, r8
    3658:	lsr.w	fp, sl, fp
    365c:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    3660:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3662:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    3664:	bcs.n	3696 <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3666:	tst.w	lr, #64	; 0x40
    366a:	itet	ne
    366c:	ldrne	r3, [sp, #4]
    366e:	ldreq	r3, [r4, #28]
    3670:	ldrne.w	r3, [r3, #1068]	; 0x42c
    3674:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3676:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3678:	add.w	r9, r4, #24
    367c:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    367e:	cmp.w	r8, #0
    3682:	beq.n	35d2 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3684:	ldr	r1, [r4, #24]
    3686:	ldr	r0, [r4, #32]
    3688:	bl	41dc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    368c:	add.w	r8, r8, #4294967295
    3690:	cmp	r0, #0
    3692:	bne.n	367c <ExFatFile::seekSet(unsigned long long)+0xd8>
    3694:	b.n	35f0 <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    3696:	orrs.w	r3, r0, r1
    369a:	beq.n	3666 <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    369c:	rsb	r2, ip, r2
    36a0:	b.n	3676 <ExFatFile::seekSet(unsigned long long)+0xd2>
    36a2:	nop

000036a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, uint8_t oflag) {
    36a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36a8:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    36aa:	ldrb.w	r4, [r0, #49]	; 0x31
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, uint8_t oflag) {
    36ae:	str	r2, [sp, #0]
    36b0:	mov	r5, r1
    36b2:	ldrb.w	r1, [sp, #112]	; 0x70
    36b6:	str	r1, [sp, #8]
    36b8:	mov	r6, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    36ba:	cbnz	r4, 36c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    36bc:	mov	sl, r3
    36be:	ldrb.w	r3, [r5, #49]	; 0x31
    36c2:	tst.w	r3, #80	; 0x50
    36c6:	bne.n	36d8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x34>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    36c8:	movs	r0, #0
    36ca:	strb.w	r0, [r6, #49]	; 0x31
  m_flags = 0;
    36ce:	strb.w	r0, [r6, #51]	; 0x33
  return false;
}
    36d2:	add	sp, #76	; 0x4c
    36d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36d8:	mov	r3, r2
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (name) {
    36da:	cmp	r2, #0
    36dc:	beq.w	390e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x26a>
    36e0:	mov	r0, r3
    nameHash = exFatHashName(name, nameLength, 0);
    36e2:	mov	r2, r4
    36e4:	mov	r1, sl
    36e6:	bl	45bc <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    36ea:	ldrb.w	r3, [r5, #49]	; 0x31
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    36ee:	str	r0, [sp, #16]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    36f0:	cmp	r3, #0
    36f2:	bne.w	38f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x254>
  }
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    36f6:	ldr	r2, [pc, #540]	; (3914 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x270>)
    36f8:	add.w	r3, sl, #14
    36fc:	smull	r1, r2, r2, r3
    3700:	add	r2, r3
    3702:	asrs	r3, r3, #31
    3704:	rsb	r3, r3, r2, asr #3
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
    3708:	ldr	r2, [sp, #8]
  }
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    370a:	uxtb	r3, r3
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
    370c:	and.w	r2, r2, #7
  }
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    3710:	str	r3, [sp, #20]
    3712:	adds	r3, #2
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    3714:	mov.w	r9, #0
  }
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    3718:	uxtb.w	fp, r3

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
    371c:	orr.w	r3, r2, #64	; 0x40
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
    3720:	str	r2, [sp, #4]

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    3722:	mov	r4, r9
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, uint8_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    3724:	mov	r7, r9

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
    3726:	str	r3, [sp, #12]
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    3728:	movs	r2, #32
    372a:	add	r1, sp, #40	; 0x28
    372c:	mov	r0, r5
    372e:	bl	33c8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3732:	cmp	r0, #0
    3734:	beq.n	37b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x10e>
      goto create;
    }
    if (n != 32) {
    3736:	cmp	r0, #32
    3738:	bne.n	36c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    373a:	ldrb.w	r3, [sp, #40]	; 0x28
    373e:	lsls	r2, r3, #24
    3740:	bmi.n	380a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x166>
      if (freeCount == 0) {
    3742:	cmp	r4, #0
    3744:	bne.n	3804 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x160>
        freePos.position = dir->curPosition() - 32;
    3746:	ldr	r2, [r5, #0]
        freePos.cluster = dir->curCluster();
    3748:	ldr	r1, [r5, #24]
    374a:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    374c:	subs	r2, #32
    374e:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    3750:	adds	r4, #1
    3752:	uxtb	r4, r4
      }
      if (!buf[0]) {
    3754:	cbz	r3, 37b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x10e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    3756:	cmp	r3, #192	; 0xc0
    3758:	beq.w	38a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x200>
    375c:	cmp	r3, #193	; 0xc1
    375e:	beq.n	3820 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x17c>
    3760:	cmp	r3, #133	; 0x85
    3762:	bne.n	3728 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    3764:	movs	r2, #56	; 0x38
    3766:	movs	r1, #0
    3768:	mov	r0, r6
    376a:	bl	caa8 <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    376e:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    3772:	ldrb.w	r2, [sp, #41]	; 0x29
    3776:	strb.w	r2, [r6, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    377a:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    377e:	lsls	r3, r3, #27
          m_attributes |= FILE_ATTR_FILE;
    3780:	it	pl
    3782:	orrpl.w	r2, r2, #8
    3786:	strb.w	r2, [r6, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    378a:	ldr	r3, [r5, #0]
    378c:	ldr	r1, [r5, #32]
    378e:	ldr	r2, [r5, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    3790:	str	r2, [r6, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    3792:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    3794:	str	r1, [r6, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    3796:	str	r3, [r6, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    3798:	ldrb.w	r3, [r5, #51]	; 0x33
    379c:	ubfx	r3, r3, #6, #1
    37a0:	strb.w	r3, [r6, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    37a4:	movs	r2, #32
    37a6:	add	r1, sp, #40	; 0x28
    37a8:	mov	r0, r5
    37aa:	bl	33c8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    37ae:	cmp	r0, #0
    37b0:	bne.n	3736 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x92>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE) || !name) {
    37b2:	ldr	r3, [sp, #8]
    37b4:	and.w	r3, r3, #66	; 0x42
    37b8:	cmp	r3, #66	; 0x42
    37ba:	bne.n	36c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    37bc:	ldr	r3, [sp, #0]
    37be:	cmp	r3, #0
    37c0:	beq.n	36c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    37c2:	cmp	r4, fp
    37c4:	bcc.n	37e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x13e>
    37c6:	b.n	3918 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x274>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    37c8:	cmp	r0, #32
    37ca:	bne.w	36c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    37ce:	cbnz	r4, 37da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x136>
      freePos.position = dir->curPosition() - 32;
    37d0:	ldr	r2, [r5, #0]
      freePos.cluster = dir->curCluster();
    37d2:	ldr	r1, [r5, #24]
    37d4:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    37d6:	subs	r2, #32
    37d8:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    37da:	uxtb	r4, r3
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    37dc:	cmp	fp, r4
    37de:	bls.w	3918 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x274>
    n = dir->read(buf, 32);
    37e2:	movs	r2, #32
    37e4:	add	r1, sp, #40	; 0x28
    37e6:	mov	r0, r5
    37e8:	bl	33c8 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    37ec:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    37ee:	cmp	r0, #0
    37f0:	bne.n	37c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x124>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    37f2:	mov	r0, r5
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    37f4:	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    37f6:	bl	4944 <ExFatFile::addDirCluster()>
    37fa:	cmp	r0, #0
    37fc:	beq.w	36c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    3800:	str	r7, [r5, #24]
      continue;
    3802:	b.n	37dc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x138>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    3804:	cmp	r4, fp
    3806:	bcs.n	3754 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0xb0>
    3808:	b.n	3750 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0xac>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    380a:	cmp.w	r9, #0
    380e:	bne.n	3756 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0xb2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    3810:	cmp	r4, fp
    3812:	it	cc
    3814:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    3816:	cmp	r3, #133	; 0x85
    3818:	bne.n	3728 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
        continue;
      }
      inSet = true;
    381a:	mov.w	r9, #1
    381e:	b.n	3764 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0xc0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    3820:	rsb	r8, r7, sl
    3824:	uxtb.w	r8, r8
    3828:	cmp.w	r8, #15
    382c:	it	cs
    382e:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    3832:	mov	r3, r8
    3834:	mov	r2, r7
    3836:	ldr	r1, [sp, #0]
    3838:	add	r0, sp, #40	; 0x28
    383a:	bl	45f8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    383e:	cmp	r0, #0
    3840:	beq.n	38e6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x242>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    3842:	add	r7, r8
    3844:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    3846:	cmp	sl, r7
    3848:	bne.w	3728 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    384c:	ldr	r3, [sp, #8]
    384e:	lsls	r0, r3, #24
    3850:	bmi.w	36c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
    3854:	tst.w	r3, #50	; 0x32
    3858:	beq.n	3866 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x1c2>
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    385a:	ldrb.w	r3, [r6, #49]	; 0x31
    385e:	tst.w	r3, #17
    3862:	bne.w	36c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
#if !READ_ONLY
  if (oflag & O_TRUNC) {
    3866:	ldr	r2, [sp, #8]
    3868:	lsls	r1, r2, #27
    386a:	mov	r3, r2
    386c:	bpl.w	39e8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x344>
    if (!(oflag & O_WRITE)) {
    3870:	lsls	r2, r3, #30
    3872:	bpl.w	36c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3876:	ldrb.w	r3, [r6, #49]	; 0x31
    387a:	cmp	r3, #0
    387c:	beq.w	36c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3880:	ldrd	r2, r3, [r6]
    3884:	orrs	r3, r2
    3886:	beq.n	3894 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x1f0>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    3888:	movs	r2, #0
    388a:	movs	r3, #0
    388c:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    3890:	movs	r1, #0
    3892:	str	r1, [r6, #24]
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    3894:	mov	r0, r6
    3896:	bl	4a80 <ExFatFile::truncate()>
    389a:	cmp	r0, #0
    389c:	beq.w	36c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    38a0:	movs	r0, #1
    38a2:	b.n	36d2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x2e>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    38a4:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
    38a8:	ldrb.w	r2, [sp, #4]
    38ac:	strb.w	r2, [r6, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    38b0:	lsls	r7, r3, #30
          m_flags |= FILE_FLAG_CONTIGUOUS;
    38b2:	itt	mi
    38b4:	ldrbmi.w	r3, [sp, #12]
    38b8:	strbmi.w	r3, [r6, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    38bc:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    38c0:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    38c4:	strd	r2, r3, [r6, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    38c8:	ldr	r3, [sp, #60]	; 0x3c
    38ca:	str	r3, [r6, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    38cc:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    38ce:	strd	r0, r1, [r6, #8]
        if (!name) {
    38d2:	cmp	r3, #0
    38d4:	beq.n	384c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x1a8>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    38d6:	ldrb.w	r3, [sp, #43]	; 0x2b
    38da:	cmp	r3, sl
    38dc:	beq.n	38ea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x246>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    38de:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    38e2:	mov	r7, r9
    38e4:	b.n	3728 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    38e6:	mov	r9, r0
    38e8:	b.n	3728 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    38ea:	ldrh.w	r3, [sp, #44]	; 0x2c
    38ee:	ldr	r2, [sp, #16]
    38f0:	cmp	r3, r2
    38f2:	bne.n	38de <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x23a>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = oflag & FILE_FLAG_OFLAG;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    38f4:	movs	r7, #0
    38f6:	b.n	3728 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x84>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    38f8:	ldrd	r2, r3, [r5]
    38fc:	orrs	r3, r2
    38fe:	beq.w	36f6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x52>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    3902:	movs	r2, #0
    3904:	movs	r3, #0
    3906:	strd	r2, r3, [r5]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    390a:	str	r4, [r5, #24]
    390c:	b.n	36f6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x52>
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, uint8_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint16_t nameHash = 0;
    390e:	str	r2, [sp, #16]
    3910:	b.n	36f6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x52>
    3912:	nop
    3914:	.word	0x88888889
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    3918:	ldrb.w	r3, [r5, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    391c:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    391e:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    3922:	movs	r1, #0
    3924:	mov	r0, r6
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    3926:	add	r4, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    3928:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    392c:	bl	caa8 <memset>
    3930:	ldr	r3, [r5, #32]
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = EXFAT_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
      m_flags |= oflag & FILE_FLAG_OFLAG;
    3932:	ldr	r5, [sp, #8]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    3934:	str	r3, [r6, #32]
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    3936:	ldmia.w	r4, {r0, r1, r2}
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = EXFAT_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
      m_flags |= oflag & FILE_FLAG_OFLAG;
    393a:	and.w	r7, r5, #7
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    393e:	movs	r5, #8
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = EXFAT_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
      m_flags |= oflag & FILE_FLAG_OFLAG;
    3940:	orn	r9, r7, #125	; 0x7d
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    3944:	strb.w	r5, [r6, #49]	; 0x31
    3948:	add.w	r7, sl, #30
  m_dirPos = freePos;
    394c:	add.w	r5, r6, #36	; 0x24
    3950:	stmia.w	r5, {r0, r1, r2}
    3954:	uxtb	r7, r7
    3956:	ldr	r5, [sp, #0]
    3958:	str.w	r9, [sp]
  for (uint8_t i = 0; i < freeNeed; i++) {
    395c:	mov.w	r8, #0
    3960:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    3962:	movs	r2, #1
    3964:	mov	r1, r4
    3966:	bl	4060 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    396a:	mov	r9, r0
    396c:	cmp	r0, #0
    396e:	beq.w	36c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    3972:	ldrsb.w	r2, [r0]
    3976:	cmp	r2, #0
    3978:	blt.w	36c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    397c:	movs	r2, #32
    397e:	movs	r1, #0
    3980:	bl	caa8 <memset>
    if (i == 0) {
    3984:	cmp.w	r8, #0
    3988:	beq.n	3a2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x388>
        uint16_t date, time;
        FsDateTime::callback(&date, &time);
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    398a:	cmp.w	r8, #1
    398e:	beq.n	3a0a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x366>
    3990:	rsb	r2, r8, r8, lsl #4
    3994:	cmp	r7, #15
    3996:	sub.w	r2, r2, #30
      m_flags |= oflag & FILE_FLAG_OFLAG;
      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    399a:	mov.w	r1, #193	; 0xc1
    399e:	mov	r0, r7
    39a0:	it	cs
    39a2:	movcs	r0, #15
    39a4:	uxtb	r2, r2
    39a6:	strb.w	r1, [r9]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    39aa:	cbz	r0, 39c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x320>
    39ac:	add.w	r3, r9, #2
    39b0:	sxth	r0, r0
    39b2:	add.w	r0, r3, r0, lsl #1
    39b6:	add	r2, r5
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    39b8:	ldrb.w	r1, [r2], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    39bc:	strh.w	r1, [r3], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    39c0:	cmp	r0, r3
    39c2:	bne.n	39b8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x314>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    39c4:	add.w	r8, r8, #1
    39c8:	uxtb.w	r8, r8
    39cc:	cmp	fp, r8
    39ce:	bls.n	3a02 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x35e>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    39d0:	movs	r2, #32
    39d2:	mov	r1, r4
    39d4:	ldr	r0, [r6, #32]
    39d6:	bl	410c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    39da:	cmp	r0, #1
    39dc:	bne.w	36c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
    39e0:	subs	r7, #15
    39e2:	uxtb	r7, r7
    39e4:	ldr	r0, [r6, #32]
    39e6:	b.n	3962 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x2be>
    39e8:	mov	r3, r2
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    39ea:	lsls	r3, r3, #26
    39ec:	bpl.w	38a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x1fc>
    39f0:	ldrd	r2, r3, [r6, #16]
    39f4:	mov	r0, r6
    39f6:	bl	35a4 <ExFatFile::seekSet(unsigned long long)>
    39fa:	cmp	r0, #0
    39fc:	bne.w	38a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x1fc>
    3a00:	b.n	36c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x24>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    3a02:	mov	r0, r6
    3a04:	bl	4844 <ExFatFile::sync()>
    3a08:	b.n	36d2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x2e>
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = EXFAT_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
      m_flags |= oflag & FILE_FLAG_OFLAG;
    3a0a:	ldrb.w	r3, [sp]
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    3a0e:	movs	r1, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    3a10:	movs	r2, #3
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    3a12:	strb.w	r1, [r9]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    3a16:	strb.w	r2, [r9, #1]
      m_flags = EXFAT_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
      m_flags |= oflag & FILE_FLAG_OFLAG;
    3a1a:	strb.w	r3, [r6, #51]	; 0x33
    3a1e:	ldrh.w	r3, [sp, #16]
      dirStream->nameLength = nameLength;
    3a22:	strb.w	sl, [r9, #3]
    3a26:	strh.w	r3, [r9, #4]
    3a2a:	b.n	39c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x320>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3a2c:	ldr	r3, [sp, #20]
    3a2e:	adds	r2, r3, #1
    3a30:	uxtb	r2, r2
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    3a32:	movs	r1, #133	; 0x85
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    3a34:	ldr	r3, [pc, #44]	; (3a64 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x3c0>)
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    3a36:	strb.w	r1, [r9]
      m_setCount = freeNeed - 1;
    3a3a:	strb.w	r2, [r6, #48]	; 0x30
      dirFile->setCount = m_setCount;
    3a3e:	strb.w	r2, [r9, #1]
      if (FsDateTime::callback) {
    3a42:	ldr	r2, [r3, #0]
    3a44:	cmp	r2, #0
    3a46:	beq.n	39c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x320>
        uint16_t date, time;
        FsDateTime::callback(&date, &time);
    3a48:	add.w	r1, sp, #26
    3a4c:	add	r0, sp, #24
    3a4e:	blx	r2
    3a50:	ldrh.w	r1, [sp, #26]
    3a54:	ldrh.w	r2, [sp, #24]
    3a58:	strh.w	r1, [r9, #8]
    3a5c:	strh.w	r2, [r9, #10]
    3a60:	b.n	39c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)+0x320>
    3a62:	nop
    3a64:	.word	0x20020360

00003a68 <ExFatFile::open(ExFatFile*, char const*, unsigned char)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, uint8_t oflag) {
    3a68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3a6c:	mov	r6, r0
    3a6e:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    3a70:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, uint8_t oflag) {
    3a74:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    3a76:	movs	r0, #0
    3a78:	strb.w	r0, [sp, #73]	; 0x49
    3a7c:	strb.w	r0, [sp, #74]	; 0x4a
    3a80:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    3a84:	cbnz	r4, 3a94 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x2c>
    3a86:	mov	r9, r3
    3a88:	ldrb.w	r3, [r1, #49]	; 0x31
    3a8c:	tst.w	r3, #80	; 0x50
    3a90:	mov	r5, r1
    3a92:	bne.n	3a9c <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    3a94:	movs	r0, #0
}
    3a96:	add	sp, #84	; 0x54
    3a98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    3a9c:	ldrb	r3, [r2, #0]
    3a9e:	cmp	r3, #47	; 0x2f
    3aa0:	mov	r4, r2
    3aa2:	beq.n	3b0c <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0xa4>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, uint8_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, uint8_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    3aa4:	mov.w	r8, #1
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    3aa8:	mov	r1, r4
    3aaa:	add	r3, sp, #12
    3aac:	add	r2, sp, #16
    3aae:	mov	r0, r6
    3ab0:	bl	32e4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    3ab4:	cmp	r0, #0
    3ab6:	beq.n	3a94 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    3ab8:	ldr	r3, [sp, #12]
    3aba:	ldrb	r3, [r3, #0]
    3abc:	cmp	r3, #0
    3abe:	beq.n	3b36 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0xce>
    3ac0:	ldrb.w	r3, [sp, #16]
    3ac4:	ldr	r2, [sp, #20]
    3ac6:	str.w	r8, [sp]
    3aca:	mov	r1, r5
    3acc:	mov	r0, r6
    3ace:	bl	36a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
    3ad2:	cmp	r0, #0
    3ad4:	beq.n	3a94 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    3ad6:	mov	r4, r6
    3ad8:	add	r7, sp, #24
    3ada:	add.w	lr, r6, #48	; 0x30
    3ade:	ldr	r0, [r4, #0]
    3ae0:	ldr	r1, [r4, #4]
    3ae2:	ldr	r2, [r4, #8]
    3ae4:	ldr	r3, [r4, #12]
    3ae6:	mov	r5, r7
    3ae8:	stmia	r5!, {r0, r1, r2, r3}
    3aea:	adds	r4, #16
    3aec:	cmp	r4, lr
    3aee:	mov	r7, r5
    3af0:	bne.n	3ade <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x76>
    3af2:	ldr	r0, [r4, #0]
    3af4:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    3af6:	mov	r0, r6
    3af8:	bl	4844 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3afc:	movs	r3, #0
    3afe:	strb.w	r3, [r6, #49]	; 0x31
  m_flags = 0;
    3b02:	strb.w	r3, [r6, #51]	; 0x33
    3b06:	ldr	r4, [sp, #12]
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    3b08:	add	r5, sp, #24
    3b0a:	b.n	3aa8 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    3b0c:	adds	r4, #1
    3b0e:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    3b10:	ldrb	r1, [r4, #0]
    3b12:	cmp	r1, #47	; 0x2f
    3b14:	beq.n	3b0c <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0xa4>
      path++;
    }
    if (*path == 0) {
    3b16:	cbz	r1, 3b4e <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0xe6>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3b18:	movs	r2, #56	; 0x38
    3b1a:	add	r0, sp, #24
    3b1c:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    3b1e:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3b20:	bl	caa8 <memset>
  m_attributes = FILE_ATTR_ROOT;
    3b24:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3b26:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    3b28:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    3b2a:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3b2c:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3b30:	strb.w	r3, [sp, #75]	; 0x4b
    3b34:	b.n	3aa4 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x3c>
    3b36:	ldrb.w	r3, [sp, #16]
    3b3a:	ldr	r2, [sp, #20]
    3b3c:	str.w	r9, [sp]
    3b40:	mov	r1, r5
    3b42:	mov	r0, r6
    3b44:	bl	36a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, unsigned char)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    3b48:	add	sp, #84	; 0x54
    3b4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3b4e:	movs	r2, #56	; 0x38
    3b50:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    3b52:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3b54:	bl	caa8 <memset>
  m_attributes = FILE_ATTR_ROOT;
    3b58:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3b5a:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    3b5c:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3b5e:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3b62:	strb.w	r0, [r6, #51]	; 0x33
    3b66:	b.n	3a96 <ExFatFile::open(ExFatFile*, char const*, unsigned char)+0x2e>

00003b68 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    3b68:	cbz	r1, 3b74 <ExFatFile::open(ExFatVolume*, char const*, int)+0xc>
    3b6a:	uxtb	r3, r3
    3b6c:	add.w	r1, r1, #1088	; 0x440
    3b70:	b.w	3a68 <ExFatFile::open(ExFatFile*, char const*, unsigned char)>
}
    3b74:	mov	r0, r1
    3b76:	bx	lr

00003b78 <FsCache::invalidate()>:
#include "ExFatVolume.h"
#include "../common/FsStructs.h"

//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    3b78:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    3b7a:	mov.w	r3, #4294967295
#include "ExFatVolume.h"
#include "../common/FsStructs.h"

//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    3b7e:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    3b80:	str	r3, [r0, #8]
    3b82:	bx	lr

00003b84 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3b84:	ldr	r3, [r0, #4]
    3b86:	cmp	r3, #0
    3b88:	beq.n	3c02 <FsCache::get(unsigned long, unsigned char)+0x7e>
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    3b8a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b8e:	mov	r6, r1
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    3b90:	ldr	r1, [r0, #8]
    3b92:	cmp	r1, r6
    3b94:	mov	r7, r2
    3b96:	mov	r4, r0
    3b98:	beq.n	3bba <FsCache::get(unsigned long, unsigned char)+0x36>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3b9a:	ldrb	r2, [r0, #0]
    3b9c:	lsls	r2, r2, #31
    3b9e:	bmi.n	3bce <FsCache::get(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    3ba0:	lsls	r3, r7, #30
    3ba2:	add.w	r5, r0, #12
    3ba6:	bpl.n	3bec <FsCache::get(unsigned long, unsigned char)+0x68>
    3ba8:	movs	r3, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    3baa:	and.w	r2, r7, #1
    3bae:	orrs	r2, r3
    3bb0:	strb	r2, [r4, #0]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    3bb2:	str	r6, [r4, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;
    3bb4:	mov	r0, r5
    3bb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bba:	mov	r5, r0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    3bbc:	and.w	r2, r7, #1
    3bc0:	ldrsb.w	r3, [r5], #12
    3bc4:	orrs	r2, r3
    3bc6:	strb	r2, [r4, #0]
  return m_cacheBuffer;
    3bc8:	mov	r0, r5
    3bca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    3bce:	ldr	r2, [r3, #0]
    3bd0:	add.w	r5, r0, #12
    3bd4:	ldr.w	r8, [r2, #24]
    3bd8:	mov	r0, r3
    3bda:	mov	r2, r5
    3bdc:	blx	r8
    3bde:	cbz	r0, 3bfc <FsCache::get(unsigned long, unsigned char)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    3be0:	ldrb	r3, [r4, #0]
    3be2:	bic.w	r3, r3, #1
    3be6:	strb	r3, [r4, #0]
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    3be8:	lsls	r3, r7, #30
    3bea:	bmi.n	3ba8 <FsCache::get(unsigned long, unsigned char)+0x24>
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    3bec:	ldr	r0, [r4, #4]
    3bee:	ldr	r3, [r0, #0]
    3bf0:	mov	r2, r5
    3bf2:	ldr	r3, [r3, #8]
    3bf4:	mov	r1, r6
    3bf6:	blx	r3
    3bf8:	cmp	r0, #0
    3bfa:	bne.n	3ba8 <FsCache::get(unsigned long, unsigned char)+0x24>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    3bfc:	movs	r0, #0
    3bfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c02:	movs	r0, #0
}
    3c04:	bx	lr
    3c06:	nop

00003c08 <FsCache::sync()>:
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3c08:	ldrb	r3, [r0, #0]
    3c0a:	lsls	r3, r3, #31
    3c0c:	bmi.n	3c12 <FsCache::sync()+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
    3c0e:	movs	r0, #1
    3c10:	bx	lr

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    3c12:	push	{r4, lr}
    3c14:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    3c16:	ldr	r0, [r0, #4]
    3c18:	ldr	r1, [r4, #8]
    3c1a:	ldr	r3, [r0, #0]
    3c1c:	add.w	r2, r4, #12
    3c20:	ldr	r3, [r3, #24]
    3c22:	blx	r3
    3c24:	cbz	r0, 3c30 <FsCache::sync()+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    3c26:	ldrb	r3, [r4, #0]
    3c28:	bic.w	r3, r3, #1
    3c2c:	strb	r3, [r4, #0]
    3c2e:	pop	{r4, pc}
  }
  return true;

fail:
  return false;
}
    3c30:	pop	{r4, pc}
    3c32:	nop

00003c34 <ExFatPartition::init(SdCardInterface*, unsigned char)>:
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    3c34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#include "../common/FsStructs.h"

//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    3c38:	mov.w	r3, #4294967295
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    3c3c:	movs	r5, #0
  m_blockDev = dev;
    3c3e:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    3c42:	str	r1, [r0, #4]
    3c44:	str.w	r1, [r0, #528]	; 0x210
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    3c48:	strb.w	r5, [r0, #1084]	; 0x43c
#include "ExFatVolume.h"
#include "../common/FsStructs.h"

//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    3c4c:	strb	r5, [r0, #0]
    3c4e:	strb.w	r5, [r0, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    3c52:	str	r3, [r0, #8]
    3c54:	str.w	r3, [r0, #532]	; 0x214
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3c58:	cbz	r1, 3c96 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    3c5a:	ldr	r3, [r1, #0]
    3c5c:	add.w	r8, r0, #536	; 0x218
    3c60:	mov	r6, r2
    3c62:	mov	r4, r0
    3c64:	ldr	r3, [r3, #8]
    3c66:	mov	r0, r1
    3c68:	mov	r2, r8
    3c6a:	mov	r1, r5
    3c6c:	blx	r3
    3c6e:	mov	r7, r0
    3c70:	cbz	r0, 3c96 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    3c72:	cmp	r6, #4
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    3c74:	strb.w	r5, [r4, #524]	; 0x20c
    m_sector = sector;
    3c78:	str.w	r5, [r4, #532]	; 0x214

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    3c7c:	bhi.n	3c96 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    3c7e:	cbnz	r6, 3c9e <ExFatPartition::init(SdCardInterface*, unsigned char)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    3c80:	movs	r2, #5
    3c82:	ldr	r1, [pc, #476]	; (3e60 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x22c>)
    3c84:	addw	r0, r4, #539	; 0x21b
    3c88:	bl	d1dc <strncmp>
    3c8c:	cbnz	r0, 3c96 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    3c8e:	ldrb.w	r3, [r4, #644]	; 0x284
    3c92:	cmp	r3, #9
    3c94:	beq.n	3ce2 <ExFatPartition::init(SdCardInterface*, unsigned char)+0xae>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    3c96:	movs	r7, #0
}
    3c98:	mov	r0, r7
    3c9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    3c9e:	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    3ca0:	add.w	r3, r4, r3, lsl #4
    3ca4:	ldrb.w	r2, [r3, #982]	; 0x3d6
    3ca8:	ands.w	r5, r2, #127	; 0x7f
    3cac:	bne.n	3c96 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
    3cae:	ldrb.w	r3, [r3, #986]	; 0x3da
    3cb2:	cmp	r3, #0
    3cb4:	beq.n	3c96 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    3cb6:	add.w	r6, r8, r6, lsl #4
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3cba:	ldr.w	r0, [r4, #528]	; 0x210
    3cbe:	ldr.w	r6, [r6, #438]	; 0x1b6
    3cc2:	cmp	r0, #0
    3cc4:	beq.n	3c96 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    3cc6:	cmp	r6, #0
    3cc8:	beq.n	3c80 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x4c>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    3cca:	ldr	r3, [r0, #0]
    3ccc:	mov	r2, r8
    3cce:	ldr	r3, [r3, #8]
    3cd0:	mov	r1, r6
    3cd2:	blx	r3
    3cd4:	cmp	r0, #0
    3cd6:	beq.n	3c96 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x62>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    3cd8:	strb.w	r5, [r4, #524]	; 0x20c
    m_sector = sector;
    3cdc:	str.w	r6, [r4, #532]	; 0x214
    3ce0:	b.n	3c80 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x4c>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    3ce2:	ldrb.w	lr, [r4, #645]	; 0x285
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3ce6:	ldr.w	r3, [r4, #624]	; 0x270
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3cea:	ldr.w	r1, [r4, #616]	; 0x268
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    3cee:	str.w	r0, [r4, #1048]	; 0x418
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3cf2:	add.w	r5, lr, #9
    3cf6:	movs	r2, #1
    3cf8:	lsls	r2, r5
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3cfa:	add	r1, r6
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3cfc:	add	r6, r3
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
    3cfe:	ldr.w	r3, [r4, #620]	; 0x26c
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3d02:	str.w	r2, [r4, #1076]	; 0x434
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    3d06:	mov	r5, r0
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
    3d08:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
    3d0c:	subs	r0, r2, #1
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    3d0e:	ldr.w	r3, [r4, #632]	; 0x278
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
    3d12:	ldr.w	r2, [r4, #628]	; 0x274
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    3d16:	strb.w	lr, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
    3d1a:	str.w	r0, [r4, #1072]	; 0x430
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3d1e:	str.w	r1, [r4, #1052]	; 0x41c
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3d22:	str.w	r6, [r4, #1060]	; 0x424
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    3d26:	mov	r8, r5
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    3d28:	mov	r9, r5
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
    3d2a:	str.w	r2, [r4, #1064]	; 0x428
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    3d2e:	str.w	r3, [r4, #1068]	; 0x42c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3d32:	ldr	r0, [r4, #4]
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    3d34:	add.w	r6, r6, r8, lsr #12
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3d38:	cmp	r0, #0
    3d3a:	beq.n	3e16 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1e2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    3d3c:	ldr	r1, [r4, #8]
    3d3e:	cmp	r6, r1
    3d40:	beq.n	3e3c <ExFatPartition::init(SdCardInterface*, unsigned char)+0x208>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3d42:	ldrb	r3, [r4, #0]
    3d44:	lsls	r3, r3, #31
    3d46:	bmi.n	3e42 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x20e>
    3d48:	add.w	sl, r4, #12
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    3d4c:	ldr	r3, [r0, #0]
    3d4e:	mov	r2, sl
    3d50:	ldr	r3, [r3, #8]
    3d52:	mov	r1, r6
    3d54:	blx	r3
    3d56:	cmp	r0, #0
    3d58:	beq.n	3e16 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1e2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    3d5a:	strb.w	r9, [r4]
    m_sector = sector;
    3d5e:	str	r6, [r4, #8]
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    3d60:	movs	r0, #0
    3d62:	ldrb.w	r3, [sl, r0]
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3d66:	lsls	r2, r3, #31
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3d68:	add.w	r1, r8, #1
        if (!(mask & cache[i])) {
    3d6c:	bmi.n	3e06 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1d2>
          if ((endAlloc - bgnAlloc) == count) {
    3d6e:	subs	r2, r1, r5
    3d70:	cmp	r2, #1
    3d72:	beq.n	3e12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3d74:	ldr.w	r2, [r4, #1064]	; 0x428
    3d78:	cmp	r2, r1
    3d7a:	bls.n	3e32 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3d7c:	lsls	r6, r3, #30
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3d7e:	add.w	r1, r8, #2
        if (!(mask & cache[i])) {
    3d82:	bmi.n	3e0a <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1d6>
          if ((endAlloc - bgnAlloc) == count) {
    3d84:	subs	r6, r1, r5
    3d86:	cmp	r6, #1
    3d88:	beq.n	3e12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3d8a:	cmp	r1, r2
    3d8c:	bcs.n	3e32 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3d8e:	lsls	r6, r3, #29
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3d90:	add.w	r1, r8, #3
        if (!(mask & cache[i])) {
    3d94:	bmi.n	3e0e <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1da>
          if ((endAlloc - bgnAlloc) == count) {
    3d96:	subs	r6, r1, r5
    3d98:	cmp	r6, #1
    3d9a:	beq.n	3e12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3d9c:	cmp	r2, r1
    3d9e:	bls.n	3e32 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3da0:	lsls	r6, r3, #28
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3da2:	add.w	r1, r8, #4
        if (!(mask & cache[i])) {
    3da6:	bmi.n	3e1e <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1ea>
          if ((endAlloc - bgnAlloc) == count) {
    3da8:	subs	r6, r1, r5
    3daa:	cmp	r6, #1
    3dac:	beq.n	3e12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3dae:	cmp	r2, r1
    3db0:	bls.n	3e32 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3db2:	lsls	r6, r3, #27
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3db4:	add.w	r1, r8, #5
        if (!(mask & cache[i])) {
    3db8:	bmi.n	3e22 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1ee>
          if ((endAlloc - bgnAlloc) == count) {
    3dba:	subs	r6, r1, r5
    3dbc:	cmp	r6, #1
    3dbe:	beq.n	3e12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3dc0:	cmp	r2, r1
    3dc2:	bls.n	3e32 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3dc4:	lsls	r6, r3, #26
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3dc6:	add.w	r1, r8, #6
        if (!(mask & cache[i])) {
    3dca:	bmi.n	3e26 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1f2>
          if ((endAlloc - bgnAlloc) == count) {
    3dcc:	subs	r6, r1, r5
    3dce:	cmp	r6, #1
    3dd0:	beq.n	3e12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3dd2:	cmp	r2, r1
    3dd4:	bls.n	3e32 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3dd6:	lsls	r6, r3, #25
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3dd8:	add.w	r1, r8, #7
        if (!(mask & cache[i])) {
    3ddc:	bmi.n	3e2a <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1f6>
          if ((endAlloc - bgnAlloc) == count) {
    3dde:	subs	r6, r1, r5
    3de0:	cmp	r6, #1
    3de2:	beq.n	3e12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3de4:	cmp	r1, r2
    3de6:	bcs.n	3e32 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3de8:	lsls	r3, r3, #24
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3dea:	add.w	r8, r8, #8
        if (!(mask & cache[i])) {
    3dee:	bmi.n	3e2e <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fa>
          if ((endAlloc - bgnAlloc) == count) {
    3df0:	rsb	r3, r5, r8
    3df4:	cmp	r3, #1
    3df6:	beq.n	3e12 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1de>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3df8:	cmp	r2, r8
    3dfa:	bls.n	3e32 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1fe>
    3dfc:	adds	r0, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    3dfe:	cmp.w	r0, #512	; 0x200
    3e02:	bne.n	3d62 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x12e>
    3e04:	b.n	3e36 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x202>
      for (; mask; mask <<= 1) {
        endAlloc++;
    3e06:	mov	r5, r1
    3e08:	b.n	3d74 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x140>
    3e0a:	mov	r5, r1
    3e0c:	b.n	3d8a <ExFatPartition::init(SdCardInterface*, unsigned char)+0x156>
    3e0e:	mov	r5, r1
    3e10:	b.n	3d9c <ExFatPartition::init(SdCardInterface*, unsigned char)+0x168>
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    3e12:	str.w	r5, [r4, #1048]	; 0x418
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
    3e16:	movs	r3, #64	; 0x40
    3e18:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    3e1c:	b.n	3c98 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x64>
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3e1e:	mov	r5, r1
    3e20:	b.n	3dae <ExFatPartition::init(SdCardInterface*, unsigned char)+0x17a>
    3e22:	mov	r5, r1
    3e24:	b.n	3dc0 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x18c>
    3e26:	mov	r5, r1
    3e28:	b.n	3dd2 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x19e>
    3e2a:	mov	r5, r1
    3e2c:	b.n	3de4 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1b0>
    3e2e:	mov	r5, r8
    3e30:	b.n	3df8 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1c4>
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3e32:	movs	r5, #0
    3e34:	mov	r8, r5
    3e36:	ldr.w	r6, [r4, #1060]	; 0x424
    3e3a:	b.n	3d32 <ExFatPartition::init(SdCardInterface*, unsigned char)+0xfe>
    3e3c:	add.w	sl, r4, #12
    3e40:	b.n	3d60 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x12c>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    3e42:	ldr	r3, [r0, #0]
    3e44:	add.w	sl, r4, #12
    3e48:	ldr	r3, [r3, #24]
    3e4a:	mov	r2, sl
    3e4c:	blx	r3
    3e4e:	cmp	r0, #0
    3e50:	beq.n	3e16 <ExFatPartition::init(SdCardInterface*, unsigned char)+0x1e2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    3e52:	ldrb	r3, [r4, #0]
    3e54:	ldr	r0, [r4, #4]
    3e56:	bic.w	r3, r3, #1
    3e5a:	strb	r3, [r4, #0]
    3e5c:	b.n	3d4c <ExFatPartition::init(SdCardInterface*, unsigned char)+0x118>
    3e5e:	nop
    3e60:	.word	0x00013be8

00003e64 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    3e64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e68:	sub	sp, #12
    3e6a:	mov	r7, r0
    3e6c:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    3e6e:	str	r1, [sp, #4]
    3e70:	cmp	r1, #0
    3e72:	beq.n	3f2a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xc6>
    3e74:	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    3e78:	ldr.w	r3, [r7, #1064]	; 0x428
    3e7c:	cmp	r8, r3
    3e7e:	bcs.n	3f20 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xbc>
    3e80:	and.w	r5, r8, #7
    3e84:	movs	r3, #1
    3e86:	lsl.w	r5, r3, r5
    3e8a:	uxtb	r5, r5
    3e8c:	ubfx	sl, r8, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    3e90:	mov	r6, r8
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    3e92:	mov	r4, r8
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    3e94:	ldr.w	r3, [r7, #1060]	; 0x424
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3e98:	ldr	r0, [r7, #4]
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    3e9a:	add.w	r3, r3, r4, lsr #12
    3e9e:	str	r3, [sp, #0]
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3ea0:	cmp	r0, #0
    3ea2:	beq.n	3f66 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x102>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    3ea4:	ldr	r1, [r7, #8]
    3ea6:	cmp	r3, r1
    3ea8:	beq.n	3f46 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe2>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3eaa:	ldrb	r3, [r7, #0]
    3eac:	lsls	r3, r3, #31
    3eae:	bmi.n	3f4c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe8>
    3eb0:	add.w	fp, r7, #12
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    3eb4:	ldr	r3, [r0, #0]
    3eb6:	ldr	r1, [sp, #0]
    3eb8:	ldr	r3, [r3, #8]
    3eba:	mov	r2, fp
    3ebc:	blx	r3
    3ebe:	cmp	r0, #0
    3ec0:	beq.n	3f66 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x102>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    3ec2:	mov.w	r3, #0
    3ec6:	strb	r3, [r7, #0]
    m_sector = sector;
    3ec8:	ldr	r3, [sp, #0]
    3eca:	str	r3, [r7, #8]
    3ecc:	ldrb.w	r1, [fp, sl]
    3ed0:	b.n	3ee8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    3ed2:	cmp	r2, r9
    3ed4:	beq.n	3f30 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xcc>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    3ed6:	cmp	r8, r4
    3ed8:	beq.n	3efc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3eda:	ldr.w	r2, [r7, #1064]	; 0x428
    3ede:	cmp	r4, r2
    3ee0:	bcs.n	3f14 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xb0>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    3ee2:	ands.w	r5, r3, #255	; 0xff
    3ee6:	beq.n	3f04 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
        endAlloc++;
    3ee8:	adds	r4, #1
        if (!(mask & cache[i])) {
    3eea:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    3eec:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    3ef0:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3ef4:	beq.n	3ed2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    3ef6:	cmp	r8, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3ef8:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    3efa:	bne.n	3eda <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x76>
          return 1;
    3efc:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    3efe:	add	sp, #12
    3f00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f04:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    3f08:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    3f0c:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    3f10:	bne.n	3ecc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x68>
    3f12:	b.n	3f18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xb4>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    3f14:	movs	r6, #0
    3f16:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    3f18:	mov.w	sl, #0
    3f1c:	movs	r5, #1
    3f1e:	b.n	3e94 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x30>
    3f20:	mov.w	r8, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    3f24:	mov	sl, r8
    3f26:	movs	r5, #1
    3f28:	b.n	3e90 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    3f2a:	ldr.w	r8, [r0, #1048]	; 0x418
    3f2e:	b.n	3e78 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x14>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    3f30:	ldr	r3, [sp, #4]
    3f32:	cbnz	r3, 3f3e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xda>
    3f34:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    3f38:	it	eq
    3f3a:	streq.w	r6, [r7, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    3f3e:	adds	r0, r6, #2
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    3f40:	add	sp, #12
    3f42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f46:	add.w	fp, r7, #12
    3f4a:	b.n	3ecc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x68>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    3f4c:	ldr	r3, [r0, #0]
    3f4e:	add.w	fp, r7, #12
    3f52:	ldr	r3, [r3, #24]
    3f54:	mov	r2, fp
    3f56:	blx	r3
    3f58:	cbz	r0, 3f66 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x102>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    3f5a:	ldrb	r3, [r7, #0]
    3f5c:	ldr	r0, [r7, #4]
    3f5e:	bic.w	r3, r3, #1
    3f62:	strb	r3, [r7, #0]
    3f64:	b.n	3eb4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x50>
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    3f66:	movs	r0, #0
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    3f68:	add	sp, #12
    3f6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f6e:	nop

00003f70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    3f70:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    3f74:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    3f76:	mov	r6, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    3f78:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    3f7c:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    3f7e:	adds	r2, r1, r2
    3f80:	cmp	r2, r0
    3f82:	bhi.n	4016 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa6>
    3f84:	mov	r8, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    3f86:	ldr.w	r3, [r6, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    3f8a:	cmp.w	r8, #0
    3f8e:	bne.n	401c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xac>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    3f90:	cmp	r1, r3
      m_bitmapStart = start;
    3f92:	it	cc
    3f94:	strcc.w	r1, [r6, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    3f98:	and.w	r4, r1, #7
    3f9c:	movs	r3, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    3f9e:	ldr.w	r2, [r6, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    3fa2:	lsl.w	r4, r3, r4
    3fa6:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    3fa8:	add.w	sl, r2, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    3fac:	ubfx	r9, r1, #3, #9
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3fb0:	ldr	r0, [r6, #4]
  mask = 1 << (start & 7);
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    3fb2:	add.w	r7, sl, #1
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3fb6:	cbz	r0, 4016 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    3fb8:	ldr	r1, [r6, #8]
    3fba:	cmp	sl, r1
    3fbc:	beq.n	4036 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc6>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3fbe:	ldrb	r3, [r6, #0]
    3fc0:	lsls	r3, r3, #31
    3fc2:	bmi.n	4042 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xd2>
    3fc4:	add.w	fp, r6, #12
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    3fc8:	ldr	r3, [r0, #0]
    3fca:	mov	r2, fp
    3fcc:	ldr	r3, [r3, #8]
    3fce:	mov	r1, sl
    3fd0:	blx	r3
    3fd2:	cbz	r0, 4016 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa6>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    3fd4:	str.w	sl, [r6, #8]
    3fd8:	movs	r3, #1
    3fda:	add.w	r1, fp, r9
  }
  m_status |= option & CACHE_STATUS_MASK;
    3fde:	strb	r3, [r6, #0]
    3fe0:	add.w	fp, fp, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    3fe4:	ldrb	r2, [r1, #0]
    3fe6:	tst	r2, r4
    3fe8:	ite	ne
    3fea:	movne	r3, #1
    3fec:	moveq	r3, #0
    3fee:	cmp	r3, r8
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    3ff0:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    3ff4:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    3ff8:	beq.n	4016 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    3ffa:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    3ffc:	strb	r2, [r1, #0]
        if (--count == 0) {
    3ffe:	beq.n	4030 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4000:	ands.w	r4, r4, #255	; 0xff
    4004:	bne.n	3fe4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x74>
    4006:	adds	r1, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4008:	cmp	fp, r1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    400a:	mov	r9, r4
    400c:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4010:	bne.n	3fe4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x74>
  mask = 1 << (start & 7);
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    4012:	mov	sl, r7
    4014:	b.n	3fb0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    4016:	movs	r0, #0
}
    4018:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    401c:	cmp	r1, r3
    401e:	bhi.n	3f98 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    4020:	cmp	r2, r3
    4022:	bls.n	3f98 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4024:	cmp	r2, r0
    4026:	it	cs
    4028:	movcs	r2, #0
    402a:	str.w	r2, [r6, #1048]	; 0x418
    402e:	b.n	3f98 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    4030:	movs	r0, #1
    4032:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4036:	mov	fp, r6
    4038:	ldrb.w	r3, [fp], #12
    403c:	orr.w	r3, r3, #1
    4040:	b.n	3fda <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x6a>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4042:	ldr	r3, [r0, #0]
    4044:	add.w	fp, r6, #12
    4048:	ldr	r3, [r3, #24]
    404a:	mov	r2, fp
    404c:	blx	r3
    404e:	cmp	r0, #0
    4050:	beq.n	4016 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4052:	ldrb	r3, [r6, #0]
    4054:	ldr	r0, [r6, #4]
    4056:	bic.w	r3, r3, #1
    405a:	strb	r3, [r6, #0]
    405c:	b.n	3fc8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    405e:	nop

00004060 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4060:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    4064:	ldmia.w	r1, {r3, r5}
    4068:	ldr.w	r6, [r0, #1072]	; 0x430
    406c:	ldrb.w	r4, [r0, #1085]	; 0x43d
    4070:	ldr.w	r7, [r0, #1060]	; 0x424
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4074:	ldr.w	lr, [r0, #528]	; 0x210
  return n;
}
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    4078:	ands	r5, r6
    407a:	subs	r3, #2
    407c:	add.w	r6, r7, r5, lsr #9
    4080:	lsls	r3, r4
    4082:	adds	r4, r6, r3
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4084:	cmp.w	lr, #0
    4088:	beq.n	4104 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0xa4>
    408a:	mov	r8, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    408c:	ldr.w	r1, [r0, #532]	; 0x214
    4090:	cmp	r4, r1
    4092:	mov	r5, r2
    4094:	mov	r6, r0
    4096:	beq.n	40c6 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x66>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4098:	ldrb.w	r3, [r0, #524]	; 0x20c
    409c:	lsls	r2, r3, #31
    409e:	bmi.n	40d0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x70>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    40a0:	lsls	r3, r5, #30
    40a2:	add.w	r7, r0, #536	; 0x218
    40a6:	bpl.n	40f2 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x92>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    40a8:	str.w	r4, [r6, #532]	; 0x214
    40ac:	movs	r2, #0
  }
  m_status |= option & CACHE_STATUS_MASK;
    40ae:	and.w	r5, r5, #1
    40b2:	orrs	r5, r2
    40b4:	strb.w	r5, [r6, #524]	; 0x20c
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    40b8:	ldr.w	r0, [r8, #4]
    40bc:	ubfx	r0, r0, #0, #9
    40c0:	add	r0, r7
    40c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40c6:	ldrsb.w	r2, [r0, #524]	; 0x20c
    40ca:	add.w	r7, r0, #536	; 0x218
    40ce:	b.n	40ae <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x4e>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    40d0:	ldr.w	r3, [lr]
    40d4:	add.w	r7, r0, #536	; 0x218
    40d8:	ldr	r3, [r3, #24]
    40da:	mov	r0, lr
    40dc:	mov	r2, r7
    40de:	blx	r3
    40e0:	cbz	r0, 4104 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    40e2:	ldrb.w	r3, [r6, #524]	; 0x20c
    40e6:	bic.w	r3, r3, #1
    40ea:	strb.w	r3, [r6, #524]	; 0x20c
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    40ee:	lsls	r3, r5, #30
    40f0:	bmi.n	40a8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x48>
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    40f2:	ldr.w	r0, [r6, #528]	; 0x210
    40f6:	ldr	r3, [r0, #0]
    40f8:	mov	r2, r7
    40fa:	ldr	r3, [r3, #8]
    40fc:	mov	r1, r4
    40fe:	blx	r3
    4100:	cmp	r0, #0
    4102:	bne.n	40a8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x48>
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    4104:	movs	r0, #0
}
    4106:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    410a:	nop

0000410c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    410c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4110:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4112:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    4114:	adds	r3, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4116:	ldr.w	r1, [r0, #1072]	; 0x430
  pos->position += offset;
    411a:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    411c:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4120:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4122:	adds	r3, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4124:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4126:	uxtb	r3, r3
    4128:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    412c:	mov	r7, r0
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    412e:	movs	r6, #0
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4130:	cbz	r4, 4142 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
    if (pos->isContiguous) {
    4132:	ldrb	r3, [r5, #8]
    4134:	cbz	r3, 4148 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3c>
      pos->cluster++;
    4136:	ldr	r3, [r5, #0]
    4138:	adds	r3, #1
    413a:	str	r3, [r5, #0]
    413c:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    413e:	cmp	r4, #0
    4140:	bne.n	4132 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x26>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    4142:	movs	r0, #1
    4144:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4148:	ldr.w	r3, [r7, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    414c:	ldr.w	r8, [r5]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4150:	adds	r3, #1
    4152:	cmp	r8, r3
    4154:	bls.n	415e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x52>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4156:	mov.w	r0, #4294967295
    415a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    415e:	ldr.w	r3, [r7, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4162:	ldr.w	r0, [r7, #528]	; 0x210

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4166:	add.w	r9, r3, r8, lsr #7
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    416a:	cmp	r0, #0
    416c:	beq.n	4156 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    416e:	ldr.w	r1, [r7, #532]	; 0x214
    4172:	cmp	r9, r1
    4174:	beq.n	41ac <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0xa0>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4176:	ldrb.w	r3, [r7, #524]	; 0x20c
    417a:	lsls	r3, r3, #31
    417c:	bmi.n	41b2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0xa6>
    417e:	add.w	sl, r7, #536	; 0x218
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4182:	ldr	r3, [r0, #0]
    4184:	mov	r2, sl
    4186:	ldr	r3, [r3, #8]
    4188:	mov	r1, r9
    418a:	blx	r3
    418c:	cmp	r0, #0
    418e:	beq.n	4156 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4190:	strb.w	r6, [r7, #524]	; 0x20c
    m_sector = sector;
    4194:	str.w	r9, [r7, #532]	; 0x214
    4198:	mov.w	r8, r8, lsl #2
    419c:	ubfx	r8, r8, #0, #9
    41a0:	ldr.w	r3, [sl, r8]
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    41a4:	adds	r2, r3, #1
    41a6:	beq.n	41d4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0xc8>
    return 0;
  }
  *value = next;
    41a8:	str	r3, [r5, #0]
    41aa:	b.n	413c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x30>
    41ac:	add.w	sl, r7, #536	; 0x218
    41b0:	b.n	4198 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x8c>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    41b2:	ldr	r3, [r0, #0]
    41b4:	add.w	sl, r7, #536	; 0x218
    41b8:	ldr	r3, [r3, #24]
    41ba:	mov	r2, sl
    41bc:	blx	r3
    41be:	cmp	r0, #0
    41c0:	beq.n	4156 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    41c2:	ldrb.w	r3, [r7, #524]	; 0x20c
    41c6:	ldr.w	r0, [r7, #528]	; 0x210
    41ca:	bic.w	r3, r3, #1
    41ce:	strb.w	r3, [r7, #524]	; 0x20c
    41d2:	b.n	4182 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x76>
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    41d4:	movs	r0, #0
        return status;
      }
    }
  }
  return 1;
}
    41d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    41da:	nop

000041dc <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    41dc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    41e0:	ldr.w	r3, [r0, #1064]	; 0x428
    41e4:	adds	r3, #1
    41e6:	cmp	r3, r1
    41e8:	bcs.n	41f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    41ea:	movs	r0, #255	; 0xff
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    41ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    41f0:	ldr.w	r7, [r0, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    41f4:	ldr.w	r3, [r0, #528]	; 0x210

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    41f8:	add.w	r7, r7, r1, lsr #7
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    41fc:	cmp	r3, #0
    41fe:	beq.n	41ea <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    4200:	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4202:	ldr.w	r1, [r0, #532]	; 0x214
    4206:	cmp	r7, r1
    4208:	mov	r6, r2
    420a:	mov	r4, r0
    420c:	beq.n	424c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x70>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    420e:	ldrb.w	r2, [r0, #524]	; 0x20c
    4212:	lsls	r0, r2, #31
    4214:	bmi.n	4252 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x76>
    4216:	add.w	r8, r4, #536	; 0x218
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    421a:	ldr	r2, [r3, #0]
    421c:	mov	r0, r3
    421e:	mov	r1, r7
    4220:	ldr	r3, [r2, #8]
    4222:	mov	r2, r8
    4224:	blx	r3
    4226:	cmp	r0, #0
    4228:	beq.n	41ea <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    422a:	movs	r3, #0
    m_sector = sector;
    422c:	str.w	r7, [r4, #532]	; 0x214
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4230:	strb.w	r3, [r4, #524]	; 0x20c
    4234:	lsls	r1, r5, #2
    4236:	ubfx	r1, r1, #0, #9
    423a:	ldr.w	r3, [r8, r1]
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    423e:	adds	r2, r3, #1
    return 0;
  }
  *value = next;
  return 1;
    4240:	itte	ne
    4242:	movne	r0, #1
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
    4244:	strne	r3, [r6, #0]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    4246:	moveq	r0, #0
    4248:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    424c:	add.w	r8, r0, #536	; 0x218
    4250:	b.n	4234 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x58>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4252:	ldr	r2, [r3, #0]
    4254:	add.w	r8, r4, #536	; 0x218
    4258:	ldr.w	r9, [r2, #24]
    425c:	mov	r0, r3
    425e:	mov	r2, r8
    4260:	blx	r9
    4262:	cmp	r0, #0
    4264:	beq.n	41ea <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4266:	ldrb.w	r2, [r4, #524]	; 0x20c
    426a:	ldr.w	r3, [r4, #528]	; 0x210
    426e:	bic.w	r2, r2, #1
    4272:	strb.w	r2, [r4, #524]	; 0x20c
    4276:	b.n	421a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>

00004278 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4278:	cmp	r1, #1
    427a:	bls.n	430a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x92>
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    427c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4280:	ldr.w	r3, [r0, #1064]	; 0x428
    4284:	adds	r3, #1
    4286:	cmp	r1, r3
    4288:	bls.n	4290 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    428a:	movs	r0, #0
}
    428c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4290:	ldr.w	r7, [r0, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4294:	ldr.w	r3, [r0, #528]	; 0x210
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4298:	add.w	r7, r7, r1, lsr #7
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    429c:	cmp	r3, #0
    429e:	beq.n	428a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
    42a0:	mov	r4, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    42a2:	ldr.w	r1, [r0, #532]	; 0x214
    42a6:	cmp	r7, r1
    42a8:	mov	r6, r2
    42aa:	mov	r5, r0
    42ac:	beq.n	430e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x96>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    42ae:	ldrb.w	r2, [r0, #524]	; 0x20c
    42b2:	lsls	r2, r2, #31
    42b4:	bmi.n	42e4 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x6c>
    42b6:	add.w	r8, r0, #536	; 0x218
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    42ba:	ldr	r2, [r3, #0]
    42bc:	mov	r0, r3
    42be:	mov	r1, r7
    42c0:	ldr	r3, [r2, #8]
    42c2:	mov	r2, r8
    42c4:	blx	r3
    42c6:	cmp	r0, #0
    42c8:	beq.n	428a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    42ca:	str.w	r7, [r5, #532]	; 0x214
    42ce:	movs	r3, #1
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    42d0:	lsls	r1, r4, #2
    42d2:	ubfx	r1, r1, #0, #9
  }
  m_status |= option & CACHE_STATUS_MASK;
    42d6:	strb.w	r3, [r5, #524]	; 0x20c
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    42da:	movs	r0, #1
    42dc:	str.w	r6, [r8, r1]
    42e0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    42e4:	ldr	r2, [r3, #0]
    42e6:	add.w	r8, r0, #536	; 0x218
    42ea:	ldr.w	r9, [r2, #24]
    42ee:	mov	r0, r3
    42f0:	mov	r2, r8
    42f2:	blx	r9
    42f4:	cmp	r0, #0
    42f6:	beq.n	428a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    42f8:	ldrb.w	r2, [r5, #524]	; 0x20c
    42fc:	ldr.w	r3, [r5, #528]	; 0x210
    4300:	bic.w	r2, r2, #1
    4304:	strb.w	r2, [r5, #524]	; 0x20c
    4308:	b.n	42ba <ExFatPartition::fatPut(unsigned long, unsigned long)+0x42>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    430a:	movs	r0, #0
}
    430c:	bx	lr
    430e:	ldrb.w	r3, [r0, #524]	; 0x20c
    4312:	add.w	r8, r0, #536	; 0x218
    4316:	orr.w	r3, r3, #1
    431a:	b.n	42d0 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x58>

0000431c <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    431c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4320:	mov	r5, r1
    4322:	sub	sp, #12
    4324:	mov	r6, r0
  uint32_t next;
  uint32_t start = cluster;
    4326:	mov	r7, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4328:	ldr.w	r3, [r6, #1064]	; 0x428
    432c:	adds	r3, #1
    432e:	cmp	r5, r3
    4330:	bls.n	433a <ExFatPartition::freeChain(unsigned long)+0x1e>
  } while (status);

  return true;

 fail:
  return false;
    4332:	movs	r0, #0
}
    4334:	add	sp, #12
    4336:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    433a:	ldr.w	r3, [r6, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    433e:	ldr.w	r0, [r6, #528]	; 0x210

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4342:	lsrs	r4, r5, #7
    4344:	add.w	r9, r4, r3
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4348:	cmp	r0, #0
    434a:	beq.n	4332 <ExFatPartition::freeChain(unsigned long)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    434c:	ldr.w	r1, [r6, #532]	; 0x214
    4350:	cmp	r9, r1
    4352:	beq.w	44e0 <ExFatPartition::freeChain(unsigned long)+0x1c4>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4356:	ldrb.w	r3, [r6, #524]	; 0x20c
    435a:	lsls	r3, r3, #31
    435c:	bmi.w	44e6 <ExFatPartition::freeChain(unsigned long)+0x1ca>
    4360:	add.w	fp, r6, #536	; 0x218
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4364:	ldr	r3, [r0, #0]
    4366:	mov	r2, fp
    4368:	ldr	r3, [r3, #8]
    436a:	mov	r1, r9
    436c:	blx	r3
    436e:	cmp	r0, #0
    4370:	beq.n	4332 <ExFatPartition::freeChain(unsigned long)+0x16>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4372:	movs	r3, #0
    m_sector = sector;
    4374:	str.w	r9, [r6, #532]	; 0x214
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4378:	strb.w	r3, [r6, #524]	; 0x20c

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    437c:	lsls	r3, r5, #2
    437e:	ubfx	r3, r3, #0, #9
    4382:	add.w	sl, fp, r3
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4386:	ldr.w	r3, [fp, r3]

  if (next == EXFAT_EOC) {
    438a:	adds	r1, r3, #1
    438c:	itet	ne
    438e:	movne	r8, r3
    4390:	moveq	r3, #0
    4392:	movne	r3, #1
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4394:	cmp	r5, #1
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    4396:	str	r3, [sp, #4]
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4398:	bls.n	4332 <ExFatPartition::freeChain(unsigned long)+0x16>
    439a:	ldr.w	r3, [r6, #1064]	; 0x428
    439e:	adds	r3, #1
    43a0:	cmp	r5, r3
    43a2:	bhi.n	4332 <ExFatPartition::freeChain(unsigned long)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    43a4:	ldr.w	r3, [r6, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    43a8:	ldr.w	r0, [r6, #528]	; 0x210
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    43ac:	add	r4, r3
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    43ae:	cmp	r0, #0
    43b0:	beq.n	4332 <ExFatPartition::freeChain(unsigned long)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    43b2:	cmp	r9, r4
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    43b4:	ldrb.w	r3, [r6, #524]	; 0x20c
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    43b8:	beq.n	448e <ExFatPartition::freeChain(unsigned long)+0x172>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    43ba:	lsls	r2, r3, #31
    43bc:	bmi.n	4494 <ExFatPartition::freeChain(unsigned long)+0x178>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    43be:	ldr	r3, [r0, #0]
    43c0:	mov	r2, fp
    43c2:	ldr	r3, [r3, #8]
    43c4:	mov	r1, r4
    43c6:	blx	r3
    43c8:	cmp	r0, #0
    43ca:	beq.n	4332 <ExFatPartition::freeChain(unsigned long)+0x16>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    43cc:	str.w	r4, [r6, #532]	; 0x214
    43d0:	movs	r3, #1
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    43d2:	adds	r5, #1
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    43d4:	movs	r2, #0
    43d6:	cmp	r5, r8
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    43d8:	strb.w	r3, [r6, #524]	; 0x20c
    43dc:	str.w	r2, [sl]
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    43e0:	bne.n	43e8 <ExFatPartition::freeChain(unsigned long)+0xcc>
    43e2:	ldr	r3, [sp, #4]
    43e4:	cmp	r3, #0
    43e6:	bne.n	448a <ExFatPartition::freeChain(unsigned long)+0x16e>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    43e8:	subs	r5, r5, r7
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    43ea:	ldr.w	r3, [r6, #1064]	; 0x428
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    43ee:	subs	r7, #2
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    43f0:	adds	r2, r5, r7
    43f2:	cmp	r2, r3
    43f4:	bhi.n	4332 <ExFatPartition::freeChain(unsigned long)+0x16>
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    43f6:	ldr.w	r3, [r6, #1048]	; 0x418
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    43fa:	and.w	r4, r7, #7
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    43fe:	cmp	r7, r3
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4400:	mov.w	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4404:	ldr.w	r3, [r6, #1060]	; 0x424
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    4408:	it	cc
    440a:	strcc.w	r7, [r6, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    440e:	lsl.w	r4, r2, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4412:	add.w	r9, r3, r7, lsr #12
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4416:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    4418:	ubfx	r7, r7, #3, #9
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    441c:	ldr	r0, [r6, #4]
  mask = 1 << (start & 7);
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    441e:	add.w	sl, r9, #1
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4422:	cmp	r0, #0
    4424:	beq.n	4332 <ExFatPartition::freeChain(unsigned long)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4426:	ldr	r1, [r6, #8]
    4428:	cmp	r9, r1
    442a:	beq.n	44b6 <ExFatPartition::freeChain(unsigned long)+0x19a>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    442c:	ldrb	r3, [r6, #0]
    442e:	lsls	r3, r3, #31
    4430:	bmi.n	44c2 <ExFatPartition::freeChain(unsigned long)+0x1a6>
    4432:	add.w	fp, r6, #12
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4436:	ldr	r3, [r0, #0]
    4438:	mov	r2, fp
    443a:	ldr	r3, [r3, #8]
    443c:	mov	r1, r9
    443e:	blx	r3
    4440:	cmp	r0, #0
    4442:	beq.w	4332 <ExFatPartition::freeChain(unsigned long)+0x16>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    4446:	str.w	r9, [r6, #8]
    444a:	movs	r3, #1
    444c:	add.w	r1, fp, r7
  }
  m_status |= option & CACHE_STATUS_MASK;
    4450:	strb	r3, [r6, #0]
    4452:	add.w	fp, fp, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    4456:	ldrb	r3, [r1, #0]
    4458:	tst	r3, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    445a:	eor.w	r0, r3, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    445e:	mov.w	r2, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    4462:	beq.w	4332 <ExFatPartition::freeChain(unsigned long)+0x16>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    4466:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4468:	strb	r0, [r1, #0]
        if (--count == 0) {
    446a:	beq.n	4482 <ExFatPartition::freeChain(unsigned long)+0x166>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    446c:	ands.w	r4, r2, #255	; 0xff
    4470:	bne.n	4456 <ExFatPartition::freeChain(unsigned long)+0x13a>
    4472:	adds	r1, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4474:	cmp	r1, fp
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4476:	mov	r7, r4
    4478:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    447c:	bne.n	4456 <ExFatPartition::freeChain(unsigned long)+0x13a>
  mask = 1 << (start & 7);
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    447e:	mov	r9, sl
    4480:	b.n	441c <ExFatPartition::freeChain(unsigned long)+0x100>
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    4482:	ldr	r3, [sp, #4]
    4484:	cmp	r3, #0
    4486:	beq.n	450a <ExFatPartition::freeChain(unsigned long)+0x1ee>
    4488:	mov	r7, r8
    448a:	mov	r5, r8
    448c:	b.n	4328 <ExFatPartition::freeChain(unsigned long)+0xc>
    448e:	orr.w	r3, r3, #1
    4492:	b.n	43d2 <ExFatPartition::freeChain(unsigned long)+0xb6>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4494:	ldr	r3, [r0, #0]
    4496:	mov	r1, r9
    4498:	ldr	r3, [r3, #24]
    449a:	mov	r2, fp
    449c:	blx	r3
    449e:	cmp	r0, #0
    44a0:	beq.w	4332 <ExFatPartition::freeChain(unsigned long)+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    44a4:	ldrb.w	r3, [r6, #524]	; 0x20c
    44a8:	ldr.w	r0, [r6, #528]	; 0x210
    44ac:	bic.w	r3, r3, #1
    44b0:	strb.w	r3, [r6, #524]	; 0x20c
    44b4:	b.n	43be <ExFatPartition::freeChain(unsigned long)+0xa2>
    44b6:	mov	fp, r6
    44b8:	ldrb.w	r3, [fp], #12
    44bc:	orr.w	r3, r3, #1
    44c0:	b.n	444c <ExFatPartition::freeChain(unsigned long)+0x130>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    44c2:	ldr	r3, [r0, #0]
    44c4:	add.w	fp, r6, #12
    44c8:	ldr	r3, [r3, #24]
    44ca:	mov	r2, fp
    44cc:	blx	r3
    44ce:	cmp	r0, #0
    44d0:	beq.w	4332 <ExFatPartition::freeChain(unsigned long)+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    44d4:	ldrb	r3, [r6, #0]
    44d6:	ldr	r0, [r6, #4]
    44d8:	bic.w	r3, r3, #1
    44dc:	strb	r3, [r6, #0]
    44de:	b.n	4436 <ExFatPartition::freeChain(unsigned long)+0x11a>
    44e0:	add.w	fp, r6, #536	; 0x218
    44e4:	b.n	437c <ExFatPartition::freeChain(unsigned long)+0x60>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    44e6:	ldr	r3, [r0, #0]
    44e8:	add.w	fp, r6, #536	; 0x218
    44ec:	ldr	r3, [r3, #24]
    44ee:	mov	r2, fp
    44f0:	blx	r3
    44f2:	cmp	r0, #0
    44f4:	beq.w	4332 <ExFatPartition::freeChain(unsigned long)+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    44f8:	ldrb.w	r3, [r6, #524]	; 0x20c
    44fc:	ldr.w	r0, [r6, #528]	; 0x210
    4500:	bic.w	r3, r3, #1
    4504:	strb.w	r3, [r6, #524]	; 0x20c
    4508:	b.n	4364 <ExFatPartition::freeChain(unsigned long)+0x48>
      start = next;
    }
    cluster = next;
  } while (status);

  return true;
    450a:	movs	r0, #1

 fail:
  return false;
}
    450c:	add	sp, #12
    450e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4512:	nop

00004514 <ExFatPartition::rootLength()>:
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4514:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
    4518:	mov.w	r8, #0
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    451c:	ldr.w	r4, [r0, #1068]	; 0x42c
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4520:	mov	r6, r0
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4522:	mov	r7, r8
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4524:	ldr.w	r3, [r6, #1064]	; 0x428
    4528:	adds	r3, #1
    452a:	cmp	r3, r4
    452c:	bcs.n	4540 <ExFatPartition::rootLength()+0x2c>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    452e:	movs	r3, #0
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
  return nc << bytesPerClusterShift();
    4530:	ldrb.w	r0, [r6, #1085]	; 0x43d
    4534:	adds	r0, #9
    4536:	uxtb	r0, r0
    4538:	lsl.w	r0, r3, r0
}
    453c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4540:	ldr.w	r5, [r6, #1052]	; 0x41c
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    4544:	ldr.w	r0, [r6, #528]	; 0x210

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4548:	add.w	r5, r5, r4, lsr #7
  m_status = 0;
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    454c:	cmp	r0, #0
    454e:	beq.n	452e <ExFatPartition::rootLength()+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4550:	ldr.w	r1, [r6, #532]	; 0x214
    4554:	cmp	r5, r1
    4556:	beq.n	458e <ExFatPartition::rootLength()+0x7a>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4558:	ldrb.w	r3, [r6, #524]	; 0x20c
    455c:	lsls	r2, r3, #31
    455e:	bmi.n	4594 <ExFatPartition::rootLength()+0x80>
    4560:	add.w	r9, r6, #536	; 0x218
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4564:	ldr	r3, [r0, #0]
    4566:	mov	r2, r9
    4568:	ldr	r3, [r3, #8]
    456a:	mov	r1, r5
    456c:	blx	r3
    456e:	cmp	r0, #0
    4570:	beq.n	452e <ExFatPartition::rootLength()+0x1a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    4572:	strb.w	r7, [r6, #524]	; 0x20c
    m_sector = sector;
    4576:	str.w	r5, [r6, #532]	; 0x214

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    457a:	lsls	r4, r4, #2
    457c:	ubfx	r4, r4, #0, #9
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4580:	ldr.w	r4, [r9, r4]

  if (next == EXFAT_EOC) {
    4584:	adds	r3, r4, #1
    4586:	beq.n	45b6 <ExFatPartition::rootLength()+0xa2>
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    4588:	add.w	r8, r8, #1
    458c:	b.n	4524 <ExFatPartition::rootLength()+0x10>
    458e:	add.w	r9, r6, #536	; 0x218
    4592:	b.n	457a <ExFatPartition::rootLength()+0x66>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4594:	ldr	r3, [r0, #0]
    4596:	add.w	r9, r6, #536	; 0x218
    459a:	ldr	r3, [r3, #24]
    459c:	mov	r2, r9
    459e:	blx	r3
    45a0:	cmp	r0, #0
    45a2:	beq.n	452e <ExFatPartition::rootLength()+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    45a4:	ldrb.w	r3, [r6, #524]	; 0x20c
    45a8:	ldr.w	r0, [r6, #528]	; 0x210
    45ac:	bic.w	r3, r3, #1
    45b0:	strb.w	r3, [r6, #524]	; 0x20c
    45b4:	b.n	4564 <ExFatPartition::rootLength()+0x50>
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    45b6:	add.w	r3, r8, #1
    45ba:	b.n	4530 <ExFatPartition::rootLength()+0x1c>

000045bc <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    45bc:	cbz	r1, 45f4 <exFatHashName(char const*, unsigned int, unsigned short)+0x38>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    45be:	push	{r4, r5, r6}
    45c0:	add	r1, r0
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    45c2:	ldrb.w	r4, [r0], #1
    if ('a' <= c && c <= 'z') {
      c -= 'a' - 'A';
    45c6:	sub.w	r5, r4, #32
    45ca:	lsls	r3, r2, #15
    45cc:	uxtb	r5, r5
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
    45ce:	sub.w	r6, r4, #97	; 0x61
      c -= 'a' - 'A';
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    45d2:	cmp	r6, #25
    45d4:	it	ls
    45d6:	movls	r4, r5
    45d8:	orr.w	r2, r3, r2, lsr #1
    45dc:	uxtah	r2, r4, r2
    45e0:	uxth	r2, r2
    45e2:	lsls	r3, r2, #15
    45e4:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    45e8:	cmp	r1, r0
    45ea:	uxth	r2, r2
    45ec:	bne.n	45c2 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    45ee:	mov	r0, r2
    45f0:	pop	{r4, r5, r6}
    45f2:	bx	lr
    45f4:	mov	r0, r2
    45f6:	bx	lr

000045f8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    45f8:	cbz	r3, 464c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    45fa:	push	{r4, r5, r6}
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    45fc:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    45fe:	cmp	r4, #126	; 0x7e
    4600:	bhi.n	4640 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    4602:	add	r3, r2
    4604:	adds	r5, r1, r3
    4606:	add	r2, r1
    4608:	adds	r0, #2
    460a:	ldrb.w	r3, [r2], #1
    460e:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4610:	sub.w	r1, r3, #97	; 0x61
    4614:	cmp	r1, #25
    4616:	sub.w	r1, r4, #97	; 0x61
    461a:	ite	ls
    461c:	movls	r6, #32
    461e:	movhi	r6, #0
    4620:	cmp	r1, #25
    4622:	ite	ls
    4624:	movls	r1, #32
    4626:	movhi	r1, #0
    4628:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    462a:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    462c:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    462e:	uxtb	r4, r4
    4630:	cmp	r4, r3
    4632:	bne.n	4640 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4634:	cmp	r5, r2
    4636:	beq.n	4646 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    4638:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    463c:	cmp	r4, #126	; 0x7e
    463e:	bls.n	460a <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    4640:	movs	r0, #0
    }
  }
  return true;
}
    4642:	pop	{r4, r5, r6}
    4644:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4646:	movs	r0, #1
}
    4648:	pop	{r4, r5, r6}
    464a:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    464c:	movs	r0, #1
}
    464e:	bx	lr

00004650 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4650:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    4652:	push	{r3, r4, r5, r6, r7, lr}
    4654:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4656:	ldr	r0, [r0, #32]
    4658:	cbz	r1, 465c <ExFatFile::addCluster()+0xc>
    465a:	adds	r1, #1
    465c:	movs	r2, #1
    465e:	bl	3e64 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4662:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4664:	mov	r6, r0
  if (find < 2) {
    4666:	bls.n	46c8 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    4668:	movs	r3, #1
    466a:	mov	r1, r0
    466c:	mov	r2, r3
    466e:	ldr	r0, [r4, #32]
    4670:	bl	3f70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4674:	mov	r7, r0
    4676:	cbz	r0, 46c8 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4678:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    467a:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    467e:	cbz	r0, 46ce <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4680:	lsls	r2, r3, #25
    4682:	bpl.n	46ac <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    4684:	adds	r2, r0, #1
    4686:	cmp	r6, r2
    4688:	beq.n	46d6 <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    468a:	bic.w	r2, r3, #64	; 0x40
    468e:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4692:	ldr	r3, [r4, #28]
    4694:	b.n	46a2 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    4696:	ldr	r0, [r4, #32]
    4698:	bl	4278 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    469c:	cbz	r0, 46c8 <ExFatFile::addCluster()+0x78>
    469e:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    46a0:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    46a2:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    46a4:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    46a6:	mov	r1, r3
    46a8:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    46aa:	bcc.n	4696 <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    46ac:	mov.w	r2, #4294967295
    46b0:	mov	r1, r6
    46b2:	ldr	r0, [r4, #32]
    46b4:	bl	4278 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    46b8:	cbz	r0, 46c8 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    46ba:	ldr	r1, [r4, #24]
    46bc:	cbz	r1, 46d6 <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    46be:	mov	r2, r6
    46c0:	ldr	r0, [r4, #32]
    46c2:	bl	4278 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    46c6:	cbnz	r0, 46d6 <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    46c8:	movs	r7, #0
}
    46ca:	mov	r0, r7
    46cc:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    46ce:	orr.w	r3, r3, #64	; 0x40
    46d2:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    46d6:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    46d8:	mov	r0, r7
    46da:	pop	{r3, r4, r5, r6, r7, pc}

000046dc <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    46dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    46e0:	add.w	sl, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    46e4:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    46e6:	ldmia.w	sl, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    46ea:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    46ec:	add.w	r8, sp, #12
    46f0:	stmia.w	r8, {r0, r1, r2}
    46f4:	movs	r7, #0
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    46f6:	ldr.w	fp, [pc, #328]	; 4840 <ExFatFile::syncDir()+0x164>
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    46fa:	mov	r9, r7
//-----------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    46fc:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    46fe:	movs	r2, #0
    4700:	mov	r1, r8
    4702:	ldr	r0, [r6, #32]
    4704:	bl	4060 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    4708:	uxtb	r3, r7
    if (!cache) {
    470a:	mov	r5, r0
    470c:	cbz	r0, 471c <ExFatFile::syncDir()+0x40>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    470e:	ldrb	r2, [r0, #0]
    4710:	cmp	r2, #192	; 0xc0
    4712:	beq.n	47c6 <ExFatFile::syncDir()+0xea>
    4714:	cmp	r2, #193	; 0xc1
    4716:	beq.n	4774 <ExFatFile::syncDir()+0x98>
    4718:	cmp	r2, #133	; 0x85
    471a:	beq.n	4730 <ExFatFile::syncDir()+0x54>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    471c:	ldrb.w	r3, [r6, #50]	; 0x32
    4720:	orr.w	r3, r3, #1
    4724:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    4728:	movs	r0, #0
}
    472a:	add	sp, #28
    472c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4730:	ldrb.w	r1, [r6, #49]	; 0x31
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    4734:	ldr.w	r2, [fp]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    4738:	ldrb.w	r9, [r0, #1]
    473c:	and.w	r1, r1, #55	; 0x37
    4740:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    4742:	cbz	r2, 47a4 <ExFatFile::syncDir()+0xc8>
          m_vol->dataCacheDirty();
    4744:	ldr	r0, [r6, #32]
    4746:	str	r3, [sp, #4]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    4748:	ldrb.w	r1, [r0, #524]	; 0x20c
    474c:	orr.w	r1, r1, #1
    4750:	strb.w	r1, [r0, #524]	; 0x20c
          uint16_t date, time;
          FsDateTime::callback(&date, &time);
    4754:	add.w	r1, sp, #10
    4758:	add	r0, sp, #8
    475a:	blx	r2
          setLe16(df->modifyTime, time);
          setLe16(df->modifyDate, date);
    475c:	ldrh.w	r2, [sp, #8]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          FsDateTime::callback(&date, &time);
          setLe16(df->modifyTime, time);
    4760:	ldrh.w	r1, [sp, #10]
    4764:	strh	r2, [r5, #14]
    4766:	strh	r2, [r5, #18]
    4768:	ldr	r3, [sp, #4]
    476a:	ldrb	r2, [r5, #0]
    476c:	strh	r1, [r5, #12]
    476e:	strh	r1, [r5, #16]
    4770:	cmp	r2, #133	; 0x85
    4772:	beq.n	47a4 <ExFatFile::syncDir()+0xc8>
    4774:	subs	r1, r5, #1
    4776:	adds	r5, #31
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4778:	ldrb.w	r0, [r1, #1]!
    477c:	lsls	r2, r4, #15
    477e:	orr.w	r4, r2, r4, lsr #1
    4782:	uxtah	r4, r0, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4786:	cmp	r5, r1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4788:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    478a:	bne.n	4778 <ExFatFile::syncDir()+0x9c>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    478c:	cmp	r3, r9
    478e:	beq.n	4802 <ExFatFile::syncDir()+0x126>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    4790:	movs	r2, #32
    4792:	mov	r1, r8
    4794:	ldr	r0, [r6, #32]
    4796:	bl	410c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    479a:	cmp	r0, #1
    479c:	add.w	r7, r7, #1
    47a0:	beq.n	46fe <ExFatFile::syncDir()+0x22>
    47a2:	b.n	471c <ExFatFile::syncDir()+0x40>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    47a4:	movs	r1, #0
    47a6:	b.n	47ac <ExFatFile::syncDir()+0xd0>
    47a8:	cmp	r1, #31
    47aa:	bhi.n	478c <ExFatFile::syncDir()+0xb0>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    47ac:	ldrb	r0, [r5, r1]
    47ae:	lsls	r2, r4, #15
    47b0:	orr.w	r4, r2, r4, lsr #1
    47b4:	uxtah	r4, r0, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    47b8:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    47ba:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    47bc:	add.w	r1, r1, #1
    47c0:	bne.n	47a8 <ExFatFile::syncDir()+0xcc>
    47c2:	movs	r1, #4
    47c4:	b.n	47ac <ExFatFile::syncDir()+0xd0>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    47c6:	ldrb.w	r2, [r6, #51]	; 0x33
    47ca:	tst.w	r2, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    47ce:	ldrb	r2, [r0, #1]
    47d0:	ite	ne
    47d2:	orrne.w	r2, r2, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    47d6:	andeq.w	r2, r2, #253	; 0xfd
    47da:	strb	r2, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    47dc:	ldrd	r0, r1, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    47e0:	strd	r0, r1, [r5, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    47e4:	ldrd	r0, r1, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    47e8:	ldr	r2, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    47ea:	str	r2, [r5, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    47ec:	strd	r0, r1, [r5, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    47f0:	ldr	r1, [r6, #32]
    47f2:	ldrb.w	r2, [r1, #524]	; 0x20c
    47f6:	orr.w	r2, r2, #1
    47fa:	strb.w	r2, [r1, #524]	; 0x20c
    47fe:	ldrb	r2, [r5, #0]
    4800:	b.n	4770 <ExFatFile::syncDir()+0x94>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4802:	mov	r1, sl
    4804:	movs	r2, #1
    4806:	ldr	r0, [r6, #32]
    4808:	bl	4060 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    480c:	cmp	r0, #0
    480e:	beq.n	471c <ExFatFile::syncDir()+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    4810:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4812:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4814:	mov	r0, r5
    4816:	bl	3c08 <FsCache::sync()>
    481a:	cmp	r0, #0
    481c:	beq.w	471c <ExFatFile::syncDir()+0x40>
    4820:	add.w	r0, r5, #524	; 0x20c
    4824:	bl	3c08 <FsCache::sync()>
    4828:	cmp	r0, #0
    482a:	beq.w	471c <ExFatFile::syncDir()+0x40>
    482e:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4832:	ldr	r3, [r0, #0]
    4834:	ldr	r3, [r3, #20]
    4836:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4838:	cmp	r0, #0
    483a:	beq.w	471c <ExFatFile::syncDir()+0x40>
    483e:	b.n	472a <ExFatFile::syncDir()+0x4e>
    4840:	.word	0x20020360

00004844 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4844:	ldrb.w	r2, [r0, #49]	; 0x31
    4848:	cbz	r2, 4870 <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    484a:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    484c:	ldrb.w	r2, [r0, #51]	; 0x33
    4850:	lsls	r1, r2, #24
    4852:	bmi.n	4874 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    4854:	ldr	r5, [r0, #32]
    4856:	mov	r4, r0
    4858:	mov	r0, r5
    485a:	bl	3c08 <FsCache::sync()>
    485e:	cbnz	r0, 4884 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4860:	ldrb.w	r3, [r4, #50]	; 0x32
    4864:	orr.w	r3, r3, #1
    4868:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    486c:	movs	r0, #0
}
    486e:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4870:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4872:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4874:	and.w	r2, r2, #127	; 0x7f
    4878:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    487c:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4880:	b.w	46dc <ExFatFile::syncDir()>
    4884:	add.w	r0, r5, #524	; 0x20c
    4888:	bl	3c08 <FsCache::sync()>
    488c:	cmp	r0, #0
    488e:	beq.n	4860 <ExFatFile::sync()+0x1c>
    4890:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4894:	ldr	r3, [r0, #0]
    4896:	ldr	r3, [r3, #20]
    4898:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    489a:	cmp	r0, #0
    489c:	beq.n	4860 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    489e:	movs	r0, #1
    48a0:	pop	{r3, r4, r5, pc}
    48a2:	nop

000048a4 <ExFatFile::preAllocate(unsigned long long)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    48a4:	orrs.w	r1, r2, r3
    48a8:	beq.n	48b2 <ExFatFile::preAllocate(unsigned long long)+0xe>
    48aa:	ldrb.w	r1, [r0, #51]	; 0x33
    48ae:	lsls	r1, r1, #30
    48b0:	bmi.n	48b6 <ExFatFile::preAllocate(unsigned long long)+0x12>
    goto fail;
  }
  return true;

 fail:
  return false;
    48b2:	movs	r0, #0
}
    48b4:	bx	lr
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    48b6:	ldr	r1, [r0, #28]
    48b8:	cmp	r1, #0
    48ba:	bne.n	48b2 <ExFatFile::preAllocate(unsigned long long)+0xe>
  return sync(); 
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
    48bc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    48c0:	mov	r6, r0
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    48c2:	ldr	r0, [r0, #32]
    48c4:	mov	r5, r3
    48c6:	ldrb.w	r3, [r0, #1085]	; 0x43d
    48ca:	adds	r3, #9
    48cc:	adds.w	r8, r2, #4294967295
    48d0:	uxtb	r3, r3
    48d2:	adc.w	r9, r5, #4294967295
    48d6:	rsb	r7, r3, #32
    48da:	lsl.w	r7, r9, r7
    48de:	mov	r4, r2
    48e0:	lsr.w	r2, r8, r3
    48e4:	subs	r3, #32
    48e6:	orrs	r2, r7
    48e8:	lsr.w	r3, r9, r3
    48ec:	orrs	r2, r3
    48ee:	adds	r7, r2, #1
  find = m_vol->bitmapFind(0, need);
    48f0:	mov	r2, r7
    48f2:	bl	3e64 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    48f6:	cmp	r0, #1
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
  find = m_vol->bitmapFind(0, need);
    48f8:	mov	r8, r0
  if (find < 2) {
    48fa:	bls.n	490a <ExFatFile::preAllocate(unsigned long long)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    48fc:	mov	r1, r0
    48fe:	mov	r2, r7
    4900:	movs	r3, #1
    4902:	ldr	r0, [r6, #32]
    4904:	bl	3f70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4908:	cbnz	r0, 4910 <ExFatFile::preAllocate(unsigned long long)+0x6c>
    goto fail;
  }
  return true;

 fail:
  return false;
    490a:	movs	r0, #0
    490c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    4910:	ldrb.w	r3, [r6, #51]	; 0x33
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4914:	ldrb.w	r2, [r6, #49]	; 0x31
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
    4918:	str.w	r8, [r6, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    491c:	orn	r1, r3, #63	; 0x3f
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
    4920:	strd	r4, r5, [r6, #8]
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    4924:	strb.w	r1, [r6, #51]	; 0x33
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4928:	cbz	r2, 4940 <ExFatFile::preAllocate(unsigned long long)+0x9c>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    492a:	and.w	r3, r3, #127	; 0x7f
    492e:	orr.w	r3, r3, #64	; 0x40
    4932:	strb.w	r3, [r6, #51]	; 0x33
    return syncDir();
    4936:	mov	r0, r6
  }
  return true;

 fail:
  return false;
}
    4938:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    493c:	b.w	46dc <ExFatFile::syncDir()>
  }
  return true;

 fail:
  return false;
}
    4940:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004944 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4944:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4948:	ldrb.w	r3, [r0, #49]	; 0x31
    494c:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    494e:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4950:	bmi.n	4a0a <ExFatFile::addDirCluster()+0xc6>
    4952:	ldr	r0, [r0, #8]
    4954:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    4956:	ldr.w	r3, [r3, #1076]	; 0x434
    495a:	add	r0, r3
    495c:	cmp.w	r0, #67108864	; 0x4000000
    4960:	bcc.n	496a <ExFatFile::addDirCluster()+0x26>
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
    4962:	movs	r6, #0
  }
  return sync();

 fail:
  return false;
}
    4964:	mov	r0, r6
    4966:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    496a:	mov	r0, r4
    496c:	bl	4650 <ExFatFile::addCluster()>
    4970:	mov	r6, r0
    4972:	cmp	r0, #0
    4974:	beq.n	4962 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    4976:	ldr	r5, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4978:	ldrb.w	r3, [r5, #524]	; 0x20c
    497c:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    497e:	add.w	r7, r5, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4982:	bmi.n	4a46 <ExFatFile::addDirCluster()+0x102>
      return nullptr;
    }
    invalidate();
    4984:	mov	r0, r7
    return m_cacheBuffer;
    4986:	add.w	r8, r5, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    498a:	bl	3b78 <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    498e:	mov.w	r2, #512	; 0x200
    4992:	movs	r1, #0
    4994:	mov	r0, r8
    4996:	bl	caa8 <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    499a:	ldr	r5, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    499c:	ldr	r3, [r4, #24]
    499e:	ldrb.w	r1, [r5, #1085]	; 0x43d
    49a2:	ldr.w	r2, [r5, #1060]	; 0x424
    49a6:	sub.w	sl, r3, #2
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    49aa:	mov.w	r9, #1
    49ae:	lsl.w	sl, sl, r1
    49b2:	lsls.w	r3, r9, r1
    49b6:	add	sl, r2
    49b8:	it	ne
    49ba:	movne	r7, #0
    49bc:	beq.n	49e2 <ExFatFile::addDirCluster()+0x9e>
    49be:	ldr.w	r0, [r5, #1080]	; 0x438
  }
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    49c2:	ldr	r3, [r0, #0]
    49c4:	add.w	r1, sl, r7
    49c8:	ldr	r3, [r3, #24]
    49ca:	mov	r2, r8
    49cc:	blx	r3
    49ce:	adds	r7, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    49d0:	cmp	r0, #0
    49d2:	beq.n	4962 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    49d4:	ldr	r5, [r4, #32]
    49d6:	ldrb.w	r3, [r5, #1085]	; 0x43d
    49da:	lsl.w	r3, r9, r3
    49de:	cmp	r3, r7
    49e0:	bhi.n	49be <ExFatFile::addDirCluster()+0x7a>
    49e2:	ldrb.w	lr, [r4, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    49e6:	ldrb.w	r7, [r4, #51]	; 0x33
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    49ea:	tst.w	lr, #64	; 0x40
    49ee:	beq.n	4a12 <ExFatFile::addDirCluster()+0xce>
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    49f0:	lsls	r3, r7, #24
    49f2:	bmi.n	4a6e <ExFatFile::addDirCluster()+0x12a>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    49f4:	mov	r0, r5
    49f6:	bl	3c08 <FsCache::sync()>
    49fa:	cbnz	r0, 4a52 <ExFatFile::addDirCluster()+0x10e>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    49fc:	ldrb.w	r3, [r4, #50]	; 0x32
    4a00:	orr.w	r3, r3, #1
    4a04:	strb.w	r3, [r4, #50]	; 0x32
    4a08:	b.n	4962 <ExFatFile::addDirCluster()+0x1e>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4a0a:	ldr	r0, [r0, #32]
    4a0c:	bl	4514 <ExFatPartition::rootLength()>
    4a10:	b.n	4954 <ExFatFile::addDirCluster()+0x10>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4a12:	orr.w	r7, r7, #128	; 0x80
    m_dataLength  += m_vol->bytesPerCluster();
    4a16:	ldrd	r2, r3, [r4, #8]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4a1a:	strb.w	r7, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    4a1e:	ldr.w	r0, [r5, #1076]	; 0x434
    m_validLength += m_vol->bytesPerCluster();
    4a22:	ldrd	r8, r9, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4a26:	adds	r2, r2, r0
    4a28:	mov.w	r1, #0
    4a2c:	adcs	r3, r1
    m_validLength += m_vol->bytesPerCluster();
    4a2e:	adds.w	r0, r0, r8
    4a32:	adc.w	r1, r1, r9
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4a36:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    4a3a:	strd	r0, r1, [r4, #16]
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4a3e:	cmp.w	lr, #0
    4a42:	beq.n	4964 <ExFatFile::addDirCluster()+0x20>
    4a44:	b.n	49f0 <ExFatFile::addDirCluster()+0xac>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4a46:	mov	r0, r7
    4a48:	bl	3c08 <FsCache::sync()>
    4a4c:	cmp	r0, #0
    4a4e:	bne.n	4984 <ExFatFile::addDirCluster()+0x40>
    4a50:	b.n	4962 <ExFatFile::addDirCluster()+0x1e>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4a52:	add.w	r0, r5, #524	; 0x20c
    4a56:	bl	3c08 <FsCache::sync()>
    4a5a:	cmp	r0, #0
    4a5c:	beq.n	49fc <ExFatFile::addDirCluster()+0xb8>
    4a5e:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4a62:	ldr	r3, [r0, #0]
    4a64:	ldr	r3, [r3, #20]
    4a66:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4a68:	cmp	r0, #0
    4a6a:	beq.n	49fc <ExFatFile::addDirCluster()+0xb8>
    4a6c:	b.n	4964 <ExFatFile::addDirCluster()+0x20>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4a6e:	and.w	r7, r7, #127	; 0x7f
    4a72:	strb.w	r7, [r4, #51]	; 0x33
    return syncDir();
    4a76:	mov	r0, r4
  }
  return sync();

 fail:
  return false;
}
    4a78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4a7c:	b.w	46dc <ExFatFile::syncDir()>

00004a80 <ExFatFile::truncate()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4a80:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    4a84:	lsls	r2, r3, #30
    4a86:	bpl.n	4b1c <ExFatFile::truncate()+0x9c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    4a88:	ldr	r1, [r0, #28]
    4a8a:	cmp	r1, #0
    4a8c:	beq.n	4b18 <ExFatFile::truncate()+0x98>
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4a8e:	push	{r4, r5, r6, r7, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    4a90:	and.w	r2, r3, #64	; 0x40
    4a94:	mov	r4, r0
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4a96:	sub	sp, #12
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    4a98:	and.w	r0, r2, #255	; 0xff
    4a9c:	cmp	r2, #0
    4a9e:	beq.n	4b20 <ExFatFile::truncate()+0xa0>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4aa0:	ldr	r0, [r4, #32]
    if (m_curCluster) {
    4aa2:	ldr.w	lr, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4aa6:	ldrb.w	r5, [r0, #1085]	; 0x43d
    4aaa:	ldrd	r6, r7, [r4, #8]
    4aae:	adds	r5, #9
    4ab0:	uxtb	r5, r5
    4ab2:	adds.w	r6, r6, #4294967295
    4ab6:	rsb	ip, r5, #32
    4aba:	adc.w	r7, r7, #4294967295
    4abe:	lsr.w	r2, r6, r5
    4ac2:	lsl.w	ip, r7, ip
    4ac6:	subs	r5, #32
    4ac8:	orr.w	r2, r2, ip
    4acc:	lsr.w	r5, r7, r5
    4ad0:	orrs	r2, r5
    4ad2:	adds	r2, #1
    if (m_curCluster) {
    4ad4:	cmp.w	lr, #0
    4ad8:	beq.n	4b62 <ExFatFile::truncate()+0xe2>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    4ada:	subs	r1, #1
    4adc:	rsb	r1, lr, r1
    4ae0:	add	r2, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    4ae2:	add.w	r1, lr, #1
    4ae6:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4ae8:	cmp	r2, #0
    4aea:	bne.n	4b56 <ExFatFile::truncate()+0xd6>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4aec:	ldrd	r0, r1, [r4]
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4af0:	ldrb.w	r2, [r4, #49]	; 0x31
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4af4:	orr.w	r3, r3, #128	; 0x80
    4af8:	strb.w	r3, [r4, #51]	; 0x33
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4afc:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    4b00:	strd	r0, r1, [r4, #16]
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4b04:	cbz	r2, 4b50 <ExFatFile::truncate()+0xd0>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4b06:	and.w	r3, r3, #127	; 0x7f
    4b0a:	strb.w	r3, [r4, #51]	; 0x33
    return syncDir();
    4b0e:	mov	r0, r4
    4b10:	bl	46dc <ExFatFile::syncDir()>
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4b14:	add	sp, #12
    4b16:	pop	{r4, r5, r6, r7, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    4b18:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4b1a:	bx	lr
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    4b1c:	movs	r0, #0
}
    4b1e:	bx	lr
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    4b20:	ldr	r3, [r4, #24]
    4b22:	cbnz	r3, 4b68 <ExFatFile::truncate()+0xe8>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    4b24:	str	r1, [sp, #4]
      m_firstCluster = 0;
    4b26:	str	r3, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    4b28:	ldr	r0, [r4, #32]
    4b2a:	bl	431c <ExFatPartition::freeChain(unsigned long)>
    4b2e:	cbz	r0, 4b5e <ExFatFile::truncate()+0xde>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4b30:	ldrb.w	r3, [r4, #51]	; 0x33
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4b34:	ldrb.w	r2, [r4, #49]	; 0x31
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4b38:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4b3c:	orr.w	r3, r3, #128	; 0x80
    4b40:	strb.w	r3, [r4, #51]	; 0x33
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4b44:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    4b48:	strd	r0, r1, [r4, #16]
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4b4c:	cmp	r2, #0
    4b4e:	bne.n	4b06 <ExFatFile::truncate()+0x86>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    4b50:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4b52:	add	sp, #12
    4b54:	pop	{r4, r5, r6, r7, pc}
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4b56:	movs	r3, #0
    4b58:	bl	3f70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4b5c:	cbnz	r0, 4b86 <ExFatFile::truncate()+0x106>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    4b5e:	movs	r0, #0
    4b60:	b.n	4b14 <ExFatFile::truncate()+0x94>
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    4b62:	str.w	lr, [r4, #28]
    4b66:	b.n	4ae6 <ExFatFile::truncate()+0x66>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    4b68:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4b6a:	mov	r1, r3
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    4b6c:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4b70:	ldr	r0, [r4, #32]
    4b72:	bl	41dc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4b76:	sxtb	r0, r0
      if (fg < 0) {
    4b78:	cmp	r0, #0
    4b7a:	blt.n	4b5e <ExFatFile::truncate()+0xde>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    4b7c:	bne.n	4b8c <ExFatFile::truncate()+0x10c>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    4b7e:	ldr	r1, [sp, #4]
    4b80:	cmp	r1, #0
    4b82:	beq.n	4b30 <ExFatFile::truncate()+0xb0>
    4b84:	b.n	4b28 <ExFatFile::truncate()+0xa8>
    4b86:	ldrb.w	r3, [r4, #51]	; 0x33
    4b8a:	b.n	4aec <ExFatFile::truncate()+0x6c>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    4b8c:	mov.w	r2, #4294967295
    4b90:	ldr	r1, [r4, #24]
    4b92:	ldr	r0, [r4, #32]
    4b94:	bl	4278 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4b98:	cmp	r0, #0
    4b9a:	bne.n	4b7e <ExFatFile::truncate()+0xfe>
    4b9c:	b.n	4b5e <ExFatFile::truncate()+0xde>
    4b9e:	nop

00004ba0 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4ba0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ba4:	ldrb.w	r3, [r0, #51]	; 0x33
    4ba8:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4baa:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4bac:	mov	r6, r0
    4bae:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4bb0:	bmi.n	4bc8 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    4bb2:	ldrb.w	r3, [r6, #50]	; 0x32
    4bb6:	orr.w	r3, r3, #1
    4bba:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    4bbe:	mov.w	r0, #4294967295
}
    4bc2:	add	sp, #20
    4bc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
    4bc8:	lsls	r2, r3, #29
    4bca:	mov	sl, r1
    4bcc:	bmi.w	4df2 <ExFatFile::write(void const*, unsigned int)+0x252>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    4bd0:	ldr	r3, [sp, #4]
    4bd2:	cmp	r3, #0
    4bd4:	beq.w	4e1a <ExFatFile::write(void const*, unsigned int)+0x27a>
    4bd8:	mov	r1, r6
    4bda:	mov	r8, r3
    4bdc:	ldrd	r2, r3, [r1], #24
    4be0:	str	r1, [sp, #12]
    4be2:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4be4:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    4be6:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4be8:	ldr.w	r4, [r0, #1072]	; 0x430
    4bec:	mov	r3, fp
    4bee:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    4bf0:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    4bf4:	cbnz	r4, 4c4a <ExFatFile::write(void const*, unsigned int)+0xaa>
      // start of new cluster
      if (m_curCluster != 0) {
    4bf6:	cmp	r5, #0
    4bf8:	beq.w	4d78 <ExFatFile::write(void const*, unsigned int)+0x1d8>
        int fg;

        if (isContiguous()) {
    4bfc:	ldrb.w	r3, [r6, #51]	; 0x33
    4c00:	lsls	r3, r3, #25
    4c02:	bpl.w	4dc0 <ExFatFile::write(void const*, unsigned int)+0x220>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    4c06:	ldrd	r2, r3, [r6, #8]
    4c0a:	ldrb.w	r7, [r0, #1085]	; 0x43d
    4c0e:	adds	r7, #9
    4c10:	uxtb	r7, r7
    4c12:	adds.w	r2, r2, #4294967295
    4c16:	adc.w	r3, r3, #4294967295
    4c1a:	rsb	lr, r7, #32
    4c1e:	lsl.w	lr, r3, lr
    4c22:	lsr.w	r1, r2, r7
    4c26:	subs	r7, #32
    4c28:	lsr.w	r7, r3, r7
    4c2c:	orr.w	r1, r1, lr
    4c30:	ldr	r3, [r6, #28]
    4c32:	orrs	r1, r7
    4c34:	add	r3, r1
    4c36:	cmp	r5, r3
    4c38:	bcc.w	4da6 <ExFatFile::write(void const*, unsigned int)+0x206>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    4c3c:	mov	r0, r6
    4c3e:	bl	4650 <ExFatFile::addCluster()>
    4c42:	cmp	r0, #0
    4c44:	beq.n	4bb2 <ExFatFile::write(void const*, unsigned int)+0x12>
    4c46:	ldr	r0, [r6, #32]
    4c48:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    4c4a:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4c4e:	ldrb.w	lr, [r0, #1085]	; 0x43d
    4c52:	lsrs	r4, r4, #9
    4c54:	subs	r5, #2
    4c56:	adds	r1, r4, r7
    4c58:	lsl.w	r5, r5, lr
    4c5c:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    4c5e:	cmp.w	r9, #0
    4c62:	bne.w	4d6a <ExFatFile::write(void const*, unsigned int)+0x1ca>
    4c66:	cmp.w	r8, #512	; 0x200
    4c6a:	bcs.n	4d1c <ExFatFile::write(void const*, unsigned int)+0x17c>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    4c6c:	ldrd	r2, r3, [r6, #16]
    4c70:	ldrd	r4, r5, [r6]
    4c74:	cmp.w	r8, #512	; 0x200
    4c78:	mov	r7, r8
    4c7a:	it	cs
    4c7c:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    4c80:	cmp	r5, r3
    4c82:	it	eq
    4c84:	cmpeq	r4, r2
    4c86:	ite	cc
    4c88:	movcc	r2, #1
    4c8a:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4c8c:	add.w	r0, r0, #524	; 0x20c
    4c90:	bl	3b84 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    4c94:	cmp	r0, #0
    4c96:	beq.n	4bb2 <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    4c98:	add	r0, r9
    4c9a:	mov	r2, r7
    4c9c:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4c9e:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    4ca0:	bl	9324 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4ca4:	cmp.w	r9, #512	; 0x200
    4ca8:	beq.w	4dd0 <ExFatFile::write(void const*, unsigned int)+0x230>
    4cac:	mov	r0, r7
    4cae:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4cb0:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4cb4:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4cb8:	adds.w	fp, r2, r0
    4cbc:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4cc0:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4cc2:	mov	r2, fp
    4cc4:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4cc6:	it	eq
    4cc8:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    4cca:	add	sl, r7
    toWrite -= n;
    4ccc:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4cd0:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4cd4:	bcs.n	4cea <ExFatFile::write(void const*, unsigned int)+0x14a>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4cd6:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    4cda:	mov	r4, ip
    4cdc:	mov	r3, fp
    4cde:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4ce2:	orn	r1, r1, #127	; 0x7f
    4ce6:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    4cea:	cmp.w	r8, #0
    4cee:	bne.w	4be4 <ExFatFile::write(void const*, unsigned int)+0x44>
    4cf2:	mov	r2, fp
    4cf4:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    4cf6:	ldrd	r0, r1, [r6, #8]
    4cfa:	cmp	r1, r3
    4cfc:	it	eq
    4cfe:	cmpeq	r0, r2
    4d00:	bcc.n	4e02 <ExFatFile::write(void const*, unsigned int)+0x262>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    4d02:	ldr	r3, [pc, #284]	; (4e20 <ExFatFile::write(void const*, unsigned int)+0x280>)
    4d04:	ldr	r3, [r3, #0]
    4d06:	cmp	r3, #0
    4d08:	beq.w	4e16 <ExFatFile::write(void const*, unsigned int)+0x276>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4d0c:	ldrb.w	r3, [r6, #51]	; 0x33
    4d10:	ldr	r0, [sp, #4]
    4d12:	orn	r3, r3, #127	; 0x7f
    4d16:	strb.w	r3, [r6, #51]	; 0x33
    4d1a:	b.n	4bc2 <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    4d1c:	cmp.w	r8, #1024	; 0x400
    4d20:	bcc.n	4d80 <ExFatFile::write(void const*, unsigned int)+0x1e0>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    4d22:	movs	r3, #1
    4d24:	lsl.w	lr, r3, lr
    4d28:	rsb	lr, r4, lr
    4d2c:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    4d30:	mov.w	r4, r8, lsr #9
    4d34:	cmp	r4, lr
    4d36:	it	cs
    4d38:	movcs	r4, lr
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (m_vol->dataCacheSector() <= sector
          && m_vol->dataCacheSector() < (sector + ns)) {
    4d3a:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    4d3c:	mov.w	r7, r4, lsl #9
      if (m_vol->dataCacheSector() <= sector
          && m_vol->dataCacheSector() < (sector + ns)) {
    4d40:	bcc.n	4d56 <ExFatFile::write(void const*, unsigned int)+0x1b6>
    4d42:	adds	r2, r4, r1
    4d44:	cmp	r2, r3
    4d46:	bls.n	4d56 <ExFatFile::write(void const*, unsigned int)+0x1b6>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    4d48:	add.w	r0, r0, #524	; 0x20c
    4d4c:	str	r1, [sp, #8]
    4d4e:	bl	3b78 <FsCache::invalidate()>
    4d52:	ldr	r0, [r6, #32]
    4d54:	ldr	r1, [sp, #8]
    4d56:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    4d5a:	ldr	r5, [r0, #0]
    4d5c:	mov	r3, r4
    4d5e:	mov	r2, sl
    4d60:	ldr	r4, [r5, #28]
    4d62:	blx	r4
        // invalidate cache if sector is in cache
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    4d64:	cmp	r0, #0
    4d66:	bne.n	4cac <ExFatFile::write(void const*, unsigned int)+0x10c>
    4d68:	b.n	4bb2 <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    4d6a:	rsb	r7, r9, #512	; 0x200
    4d6e:	cmp	r7, r8
    4d70:	it	cs
    4d72:	movcs	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    4d74:	movs	r2, #1
    4d76:	b.n	4c8c <ExFatFile::write(void const*, unsigned int)+0xec>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    4d78:	ldr	r5, [r6, #28]
    4d7a:	cbz	r5, 4dac <ExFatFile::write(void const*, unsigned int)+0x20c>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    4d7c:	str	r5, [r6, #24]
    4d7e:	b.n	4c4a <ExFatFile::write(void const*, unsigned int)+0xaa>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    4d80:	ldr.w	r3, [r0, #532]	; 0x214
    4d84:	cmp	r1, r3
    4d86:	beq.n	4de2 <ExFatFile::write(void const*, unsigned int)+0x242>
    4d88:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    4d8c:	ldr	r3, [r0, #0]
    4d8e:	mov	r2, sl
    4d90:	ldr	r3, [r3, #24]
    4d92:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    4d94:	cmp	r0, #0
    4d96:	beq.w	4bb2 <ExFatFile::write(void const*, unsigned int)+0x12>
    4d9a:	mov.w	r0, #512	; 0x200
    4d9e:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    4da0:	mov.w	r7, #512	; 0x200
    4da4:	b.n	4cb0 <ExFatFile::write(void const*, unsigned int)+0x110>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    4da6:	adds	r5, #1
    4da8:	str	r5, [r6, #24]
    4daa:	b.n	4c4a <ExFatFile::write(void const*, unsigned int)+0xaa>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    4dac:	mov	r0, r6
    4dae:	bl	4650 <ExFatFile::addCluster()>
    4db2:	cmp	r0, #0
    4db4:	beq.w	4bb2 <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    4db8:	ldr	r5, [r6, #24]
    4dba:	str	r5, [r6, #28]
    4dbc:	ldr	r0, [r6, #32]
    4dbe:	b.n	4c4a <ExFatFile::write(void const*, unsigned int)+0xaa>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4dc0:	mov	r1, r5
    4dc2:	ldr	r2, [sp, #12]
    4dc4:	bl	41dc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    4dc8:	cmp	r0, #0
    4dca:	bne.w	4c46 <ExFatFile::write(void const*, unsigned int)+0xa6>
    4dce:	b.n	4c3c <ExFatFile::write(void const*, unsigned int)+0x9c>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    4dd0:	ldr	r0, [r6, #32]
    4dd2:	add.w	r0, r0, #524	; 0x20c
    4dd6:	bl	3c08 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    4dda:	cmp	r0, #0
    4ddc:	bne.w	4cac <ExFatFile::write(void const*, unsigned int)+0x10c>
    4de0:	b.n	4bb2 <ExFatFile::write(void const*, unsigned int)+0x12>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    4de2:	add.w	r0, r0, #524	; 0x20c
    4de6:	str	r1, [sp, #8]
    4de8:	bl	3b78 <FsCache::invalidate()>
    4dec:	ldr	r0, [r6, #32]
    4dee:	ldr	r1, [sp, #8]
    4df0:	b.n	4d88 <ExFatFile::write(void const*, unsigned int)+0x1e8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
    if (!seekSet(m_validLength)) {
    4df2:	ldrd	r2, r3, [r0, #16]
    4df6:	bl	35a4 <ExFatFile::seekSet(unsigned long long)>
    4dfa:	cmp	r0, #0
    4dfc:	beq.w	4bb2 <ExFatFile::write(void const*, unsigned int)+0x12>
    4e00:	b.n	4bd0 <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4e02:	ldrb.w	r1, [r6, #51]	; 0x33
    4e06:	ldr	r0, [sp, #4]
    4e08:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    4e0c:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4e10:	strb.w	r1, [r6, #51]	; 0x33
    4e14:	b.n	4bc2 <ExFatFile::write(void const*, unsigned int)+0x22>
    4e16:	ldr	r0, [sp, #4]
    4e18:	b.n	4bc2 <ExFatFile::write(void const*, unsigned int)+0x22>
    4e1a:	ldrd	r2, r3, [r6]
    4e1e:	b.n	4cf6 <ExFatFile::write(void const*, unsigned int)+0x156>
    4e20:	.word	0x20020360

00004e24 <FatFile::sync() [clone .part.39]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    4e24:	push	{r4, r5, lr}
  uint16_t date, time;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4e26:	ldrsb.w	r3, [r0, #2]
    4e2a:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    4e2c:	sub	sp, #12
    4e2e:	mov	r4, r0
  uint16_t date, time;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4e30:	blt.n	4e66 <FatFile::sync() [clone .part.39]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    4e32:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    4e34:	add.w	r0, r5, #36	; 0x24
    4e38:	bl	5908 <FatCache::sync()>
    4e3c:	cbnz	r0, 4e4c <FatFile::sync() [clone .part.39]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    4e3e:	ldrb	r3, [r4, #1]
    4e40:	orr.w	r3, r3, #1
    4e44:	strb	r3, [r4, #1]
  return false;
    4e46:	movs	r0, #0
}
    4e48:	add	sp, #12
    4e4a:	pop	{r4, r5, pc}
    4e4c:	add.w	r0, r5, #560	; 0x230
    4e50:	bl	5908 <FatCache::sync()>
    4e54:	cmp	r0, #0
    4e56:	beq.n	4e3e <FatFile::sync() [clone .part.39]+0x1a>
    4e58:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4e5a:	ldr	r3, [r0, #0]
    4e5c:	ldr	r3, [r3, #20]
    4e5e:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    4e60:	cmp	r0, #0
    4e62:	beq.n	4e3e <FatFile::sync() [clone .part.39]+0x1a>
    4e64:	b.n	4e48 <FatFile::sync() [clone .part.39]+0x24>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    4e66:	ldr	r0, [r0, #8]
    4e68:	ldr	r1, [r4, #24]
    4e6a:	adds	r0, #36	; 0x24
    4e6c:	movs	r2, #1
    4e6e:	bl	5878 <FatCache::read(unsigned long, unsigned char)>
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    4e72:	cmp	r0, #0
    4e74:	beq.n	4e3e <FatFile::sync() [clone .part.39]+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    4e76:	ldrh	r3, [r4, #4]
    4e78:	and.w	r3, r3, #15
    4e7c:	lsls	r3, r3, #5
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    4e7e:	adds	r5, r0, r3
    4e80:	beq.n	4e3e <FatFile::sync() [clone .part.39]+0x1a>
    4e82:	ldrb	r3, [r0, r3]
    4e84:	cmp	r3, #229	; 0xe5
    4e86:	beq.n	4e3e <FatFile::sync() [clone .part.39]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    4e88:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    4e8a:	ldr	r2, [pc, #52]	; (4ec0 <FatFile::sync() [clone .part.39]+0x9c>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    4e8c:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    4e8e:	itt	mi
    4e90:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4e92:	strmi	r3, [r5, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    4e94:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    4e96:	ldr	r2, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4e98:	strh	r3, [r5, #26]
    4e9a:	lsrs	r3, r3, #16
    4e9c:	strh	r3, [r5, #20]
    4e9e:	cbz	r2, 4eb6 <FatFile::sync() [clone .part.39]+0x92>
      FsDateTime::callback(&date, &time);
    4ea0:	add.w	r1, sp, #6
    4ea4:	add	r0, sp, #4
    4ea6:	blx	r2
      setLe16(dir->modifyDate, date);
    4ea8:	ldrh.w	r3, [sp, #4]
    4eac:	ldrh.w	r2, [sp, #6]
    4eb0:	strh	r3, [r5, #24]
    4eb2:	strh	r3, [r5, #18]
    4eb4:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4eb6:	ldrb	r3, [r4, #2]
    4eb8:	and.w	r3, r3, #127	; 0x7f
    4ebc:	strb	r3, [r4, #2]
    4ebe:	b.n	4e32 <FatFile::sync() [clone .part.39]+0xe>
    4ec0:	.word	0x20020360

00004ec4 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    4ec4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    4ec8:	ldrb	r3, [r0, #0]
    4eca:	lsls	r3, r3, #26
    4ecc:	bmi.n	4ed6 <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    4ece:	ldr	r3, [pc, #168]	; (4f78 <FatFile::addDirCluster()+0xb4>)
    4ed0:	ldr	r2, [r0, #20]
    4ed2:	cmp	r2, r3
    4ed4:	bls.n	4ede <FatFile::addDirCluster()+0x1a>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    4ed6:	movs	r6, #0
}
    4ed8:	mov	r0, r6
    4eda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    4ede:	mov	r2, r0
    4ee0:	mov	r5, r0
    4ee2:	ldr.w	r4, [r2, #16]!
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    4ee6:	ldr	r0, [r0, #8]
    4ee8:	mov	r1, r4
    4eea:	bl	5c08 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    4eee:	mov	r6, r0
    4ef0:	cmp	r0, #0
    4ef2:	beq.n	4ed6 <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    4ef4:	cbnz	r4, 4f52 <FatFile::addDirCluster()+0x8e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4ef6:	ldrb	r3, [r5, #2]
    4ef8:	ldr	r1, [r5, #16]
    4efa:	orr.w	r3, r3, #64	; 0x40
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4efe:	orn	r3, r3, #127	; 0x7f
    4f02:	strb	r3, [r5, #2]
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    4f04:	ldr	r0, [r5, #8]
    4f06:	bl	595c <FatPartition::clusterStartSector(unsigned long) const>
    4f0a:	mov	r7, r0
    4f0c:	ldr	r0, [r5, #8]
    4f0e:	mov	r1, r7
    4f10:	adds	r0, #36	; 0x24
    4f12:	movs	r2, #5
    4f14:	bl	5878 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    4f18:	mov	r8, r0
    4f1a:	cmp	r0, #0
    4f1c:	beq.n	4ed6 <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    4f1e:	mov.w	r2, #512	; 0x200
    4f22:	movs	r1, #0
    4f24:	bl	caa8 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    4f28:	ldr	r3, [r5, #8]
    4f2a:	ldrb	r2, [r3, #4]
    4f2c:	cmp	r2, #1
    4f2e:	bls.n	4f62 <FatFile::addDirCluster()+0x9e>
    4f30:	movs	r4, #1
    4f32:	b.n	4f3c <FatFile::addDirCluster()+0x78>
    4f34:	ldr	r3, [r5, #8]
    4f36:	ldrb	r2, [r3, #4]
    4f38:	cmp	r2, r4
    4f3a:	bls.n	4f62 <FatFile::addDirCluster()+0x9e>
    4f3c:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    4f3e:	ldr	r3, [r0, #0]
    4f40:	adds	r1, r4, r7
    4f42:	ldr	r3, [r3, #24]
    4f44:	mov	r2, r8
    4f46:	blx	r3
    4f48:	adds	r4, #1
    4f4a:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    4f4c:	cmp	r0, #0
    4f4e:	bne.n	4f34 <FatFile::addDirCluster()+0x70>
    4f50:	b.n	4ed6 <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    4f52:	ldr	r1, [r5, #16]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4f54:	ldrb	r3, [r5, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    4f56:	adds	r4, #1
    4f58:	cmp	r1, r4
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4f5a:	it	ne
    4f5c:	andne.w	r3, r3, #191	; 0xbf
    4f60:	b.n	4efe <FatFile::addDirCluster()+0x3a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    4f62:	ldrb	r3, [r3, #6]
    4f64:	ldr	r1, [r5, #20]
    4f66:	mov.w	r2, #512	; 0x200
    4f6a:	lsl.w	r3, r2, r3
    4f6e:	uxtah	r3, r1, r3
    4f72:	str	r3, [r5, #20]
    4f74:	b.n	4ed8 <FatFile::addDirCluster()+0x14>
    4f76:	nop
    4f78:	.word	0x001ffdff

00004f7c <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    4f7c:	push	{r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    4f7e:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    4f80:	sub	sp, #12
    4f82:	mov	r4, r0
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    4f84:	cbnz	r3, 4f92 <FatFile::close()+0x16>
    return true;
    4f86:	movs	r0, #1
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    4f88:	movs	r3, #0
    4f8a:	strb	r3, [r4, #0]
  m_flags = 0;
    4f8c:	strb	r3, [r4, #2]
  return rtn;
}
    4f8e:	add	sp, #12
    4f90:	pop	{r4, r5, pc}
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4f92:	ldrsb.w	r3, [r0, #2]
    4f96:	cmp	r3, #0
    4f98:	blt.n	4fd4 <FatFile::close()+0x58>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    4f9a:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    4f9c:	add.w	r0, r5, #36	; 0x24
    4fa0:	bl	5908 <FatCache::sync()>
    4fa4:	cbnz	r0, 4fba <FatFile::close()+0x3e>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    4fa6:	ldrb	r3, [r4, #1]
    4fa8:	orr.w	r3, r3, #1
    4fac:	strb	r3, [r4, #1]
  return false;
    4fae:	movs	r0, #0
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    4fb0:	movs	r3, #0
    4fb2:	strb	r3, [r4, #0]
  m_flags = 0;
    4fb4:	strb	r3, [r4, #2]
  return rtn;
}
    4fb6:	add	sp, #12
    4fb8:	pop	{r4, r5, pc}
    4fba:	add.w	r0, r5, #560	; 0x230
    4fbe:	bl	5908 <FatCache::sync()>
    4fc2:	cmp	r0, #0
    4fc4:	beq.n	4fa6 <FatFile::close()+0x2a>
    4fc6:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4fc8:	ldr	r3, [r0, #0]
    4fca:	ldr	r3, [r3, #20]
    4fcc:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    4fce:	cmp	r0, #0
    4fd0:	beq.n	4fa6 <FatFile::close()+0x2a>
    4fd2:	b.n	4f88 <FatFile::close()+0xc>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    4fd4:	ldr	r0, [r0, #8]
    4fd6:	ldr	r1, [r4, #24]
    4fd8:	adds	r0, #36	; 0x24
    4fda:	movs	r2, #1
    4fdc:	bl	5878 <FatCache::read(unsigned long, unsigned char)>
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    4fe0:	cmp	r0, #0
    4fe2:	beq.n	4fa6 <FatFile::close()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    4fe4:	ldrh	r3, [r4, #4]
    4fe6:	and.w	r3, r3, #15
    4fea:	lsls	r3, r3, #5
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    4fec:	adds	r5, r0, r3
    4fee:	beq.n	4fa6 <FatFile::close()+0x2a>
    4ff0:	ldrb	r3, [r0, r3]
    4ff2:	cmp	r3, #229	; 0xe5
    4ff4:	beq.n	4fa6 <FatFile::close()+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    4ff6:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    4ff8:	ldr	r2, [pc, #52]	; (5030 <FatFile::close()+0xb4>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    4ffa:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    4ffc:	itt	mi
    4ffe:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5000:	strmi	r3, [r5, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5002:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5004:	ldr	r2, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5006:	strh	r3, [r5, #26]
    5008:	lsrs	r3, r3, #16
    500a:	strh	r3, [r5, #20]
    500c:	cbz	r2, 5024 <FatFile::close()+0xa8>
      FsDateTime::callback(&date, &time);
    500e:	add.w	r1, sp, #6
    5012:	add	r0, sp, #4
    5014:	blx	r2
      setLe16(dir->modifyDate, date);
    5016:	ldrh.w	r3, [sp, #4]
    501a:	ldrh.w	r2, [sp, #6]
    501e:	strh	r3, [r5, #24]
    5020:	strh	r3, [r5, #18]
    5022:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5024:	ldrb	r3, [r4, #2]
    5026:	and.w	r3, r3, #127	; 0x7f
    502a:	strb	r3, [r4, #2]
    502c:	b.n	4f9a <FatFile::close()+0x1e>
    502e:	nop
    5030:	.word	0x20020360

00005034 <FatFile::preAllocate(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5034:	cbnz	r1, 503a <FatFile::preAllocate(unsigned long)+0x6>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    5036:	movs	r0, #0
}
    5038:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
    503a:	push	{r3, r4, r5, lr}
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    503c:	ldrb	r3, [r0, #2]
    503e:	lsls	r3, r3, #30
    5040:	bmi.n	5046 <FatFile::preAllocate(unsigned long)+0x12>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    5042:	movs	r0, #0
    5044:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5046:	ldr	r3, [r0, #32]
    5048:	cmp	r3, #0
    504a:	bne.n	5042 <FatFile::preAllocate(unsigned long)+0xe>
    504c:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    504e:	ldr	r0, [r0, #8]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    5050:	ldrb	r3, [r0, #6]
    5052:	adds	r3, #9
    5054:	mov	r5, r1
    5056:	uxtb	r3, r3
    5058:	subs	r1, #1
    505a:	lsrs	r1, r3
    505c:	adds	r1, #1
    505e:	add.w	r2, r4, #32
    5062:	bl	5db4 <FatPartition::allocContiguous(unsigned long, unsigned long*)>
    5066:	cmp	r0, #0
    5068:	beq.n	5042 <FatFile::preAllocate(unsigned long)+0xe>
  }
  m_fileSize = length;

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    506a:	ldrb	r3, [r4, #2]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    506c:	ldrb	r2, [r4, #0]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fileSize = length;
    506e:	str	r5, [r4, #28]

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5070:	orn	r3, r3, #31
    5074:	strb	r3, [r4, #2]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    5076:	cbnz	r2, 507a <FatFile::preAllocate(unsigned long)+0x46>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
}
    5078:	pop	{r3, r4, r5, pc}
    507a:	mov	r0, r4
    507c:	ldmia.w	sp!, {r3, r4, r5, lr}
    5080:	b.w	4e24 <FatFile::sync() [clone .part.39]>

00005084 <FatFile::open(FatFile*, char const*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, uint8_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
    5084:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5088:	mov	r6, r0
    508a:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    508c:	ldrb	r4, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, uint8_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
    508e:	str	r2, [sp, #4]
    5090:	movs	r0, #0
    5092:	strb.w	r0, [sp, #36]	; 0x24
    5096:	strb.w	r0, [sp, #37]	; 0x25
    509a:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    509e:	cbnz	r4, 50ac <FatFile::open(FatFile*, char const*, unsigned char)+0x28>
    50a0:	mov	r7, r3
    50a2:	ldrb	r3, [r1, #0]
    50a4:	tst.w	r3, #112	; 0x70
    50a8:	mov	r5, r1
    50aa:	bne.n	50b4 <FatFile::open(FatFile*, char const*, unsigned char)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    50ac:	movs	r0, #0
}
    50ae:	add	sp, #72	; 0x48
    50b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    50b4:	ldrb	r3, [r2, #0]
    50b6:	cmp	r3, #47	; 0x2f
    50b8:	mov	r4, r2
    50ba:	bne.n	5108 <FatFile::open(FatFile*, char const*, unsigned char)+0x84>
    while (isDirSeparator(*path)) {
      path++;
    50bc:	adds	r4, #1
    50be:	str	r4, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    50c0:	ldrb.w	r8, [r4]
    50c4:	cmp.w	r8, #47	; 0x2f
    50c8:	beq.n	50bc <FatFile::open(FatFile*, char const*, unsigned char)+0x38>
      path++;
    }
    if (*path == 0) {
    50ca:	cmp.w	r8, #0
    50ce:	beq.n	515e <FatFile::open(FatFile*, char const*, unsigned char)+0xda>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    50d0:	ldr	r5, [r5, #8]
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    50d2:	add	r0, sp, #36	; 0x24
    50d4:	movs	r2, #36	; 0x24
    50d6:	movs	r1, #0
    50d8:	bl	caa8 <memset>

  m_vol = vol;
    50dc:	str	r5, [sp, #44]	; 0x2c
  switch (vol->fatType()) {
    50de:	ldrb	r3, [r5, #7]
    50e0:	cmp	r3, #16
    50e2:	beq.n	5156 <FatFile::open(FatFile*, char const*, unsigned char)+0xd2>
    50e4:	cmp	r3, #32
    50e6:	bne.n	50ac <FatFile::open(FatFile*, char const*, unsigned char)+0x28>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    50e8:	movs	r3, #64	; 0x40
    50ea:	strb.w	r3, [sp, #36]	; 0x24
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    50ee:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    50f0:	add	r5, sp, #36	; 0x24
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    50f2:	strb.w	r3, [sp, #38]	; 0x26
    50f6:	b.n	5108 <FatFile::open(FatFile*, char const*, unsigned char)+0x84>
    50f8:	mov	r0, r6
    50fa:	bl	4e24 <FatFile::sync() [clone .part.39]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    50fe:	movs	r3, #0
    5100:	ldr	r4, [sp, #4]
    5102:	strb	r3, [r6, #0]
  m_flags = 0;
    5104:	strb	r3, [r6, #2]
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    5106:	add	r5, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5108:	add	r2, sp, #4
    510a:	add	r1, sp, #12
    510c:	mov	r0, r4
    510e:	bl	64d4 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
    5112:	add	r2, sp, #12
    5114:	mov	r1, r5
    5116:	movs	r3, #1
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5118:	cmp	r0, #0
    511a:	beq.n	50ac <FatFile::open(FatFile*, char const*, unsigned char)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    511c:	ldr	r4, [sp, #4]
    511e:	ldrb	r4, [r4, #0]
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
    5120:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5122:	cbz	r4, 5144 <FatFile::open(FatFile*, char const*, unsigned char)+0xc0>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
    5124:	bl	6820 <FatFile::open(FatFile*, fname_t*, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5128:	mov	r5, r6
    512a:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
    512c:	cmp	r0, #0
    512e:	beq.n	50ac <FatFile::open(FatFile*, char const*, unsigned char)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5130:	ldmia	r5!, {r0, r1, r2, r3}
    5132:	stmia	r4!, {r0, r1, r2, r3}
    5134:	ldmia	r5!, {r0, r1, r2, r3}
    5136:	stmia	r4!, {r0, r1, r2, r3}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    5138:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    513a:	ldr	r2, [r5, #0]
    513c:	str	r2, [r4, #0]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    513e:	cmp	r3, #0
    5140:	beq.n	50fe <FatFile::open(FatFile*, char const*, unsigned char)+0x7a>
    5142:	b.n	50f8 <FatFile::open(FatFile*, char const*, unsigned char)+0x74>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    5144:	mov	r3, r7
    5146:	add	r2, sp, #12
    5148:	mov	r1, r5
    514a:	mov	r0, r6
    514c:	bl	6820 <FatFile::open(FatFile*, fname_t*, unsigned char)>

fail:
  return false;
}
    5150:	add	sp, #72	; 0x48
    5152:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5156:	movs	r3, #32
    5158:	strb.w	r3, [sp, #36]	; 0x24
    515c:	b.n	50ee <FatFile::open(FatFile*, char const*, unsigned char)+0x6a>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    515e:	ldr	r4, [r5, #8]
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    5160:	movs	r2, #36	; 0x24
    5162:	mov	r1, r8
    5164:	mov	r0, r6
    5166:	bl	caa8 <memset>

  m_vol = vol;
    516a:	str	r4, [r6, #8]
  switch (vol->fatType()) {
    516c:	ldrb	r3, [r4, #7]
    516e:	cmp	r3, #16
    5170:	beq.n	5180 <FatFile::open(FatFile*, char const*, unsigned char)+0xfc>
    5172:	cmp	r3, #32
    5174:	bne.n	5186 <FatFile::open(FatFile*, char const*, unsigned char)+0x102>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5176:	movs	r3, #64	; 0x40
    5178:	strb	r3, [r6, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    517a:	movs	r0, #1
    517c:	strb	r0, [r6, #2]
    517e:	b.n	50ae <FatFile::open(FatFile*, char const*, unsigned char)+0x2a>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5180:	movs	r3, #32
    5182:	strb	r3, [r6, #0]
    5184:	b.n	517a <FatFile::open(FatFile*, char const*, unsigned char)+0xf6>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    5186:	mov	r0, r8
    5188:	b.n	50ae <FatFile::open(FatFile*, char const*, unsigned char)+0x2a>
    518a:	nop

0000518c <FatFile::open(FatVolume*, char const*, unsigned char)>:
bool FatFile::open(const char* path, uint8_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, uint8_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    518c:	cbz	r1, 5196 <FatFile::open(FatVolume*, char const*, unsigned char)+0xa>
    518e:	addw	r1, r1, #1084	; 0x43c
    5192:	b.w	5084 <FatFile::open(FatFile*, char const*, unsigned char)>
}
    5196:	mov	r0, r1
    5198:	bx	lr
    519a:	nop

0000519c <FatFile::openRoot(FatVolume*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    519c:	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
    519e:	ldrb	r4, [r0, #0]
    51a0:	cbz	r4, 51a6 <FatFile::openRoot(FatVolume*)+0xa>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    51a2:	movs	r0, #0
    51a4:	pop	{r4, r5, r6, pc}
    51a6:	mov	r5, r0
    51a8:	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    51aa:	movs	r2, #36	; 0x24
    51ac:	mov	r1, r4
    51ae:	bl	caa8 <memset>

  m_vol = vol;
    51b2:	str	r6, [r5, #8]
  switch (vol->fatType()) {
    51b4:	ldrb	r3, [r6, #7]
    51b6:	cmp	r3, #16
    51b8:	beq.n	51ce <FatFile::openRoot(FatVolume*)+0x32>
    51ba:	cmp	r3, #32
    51bc:	bne.n	51ca <FatFile::openRoot(FatVolume*)+0x2e>
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    51be:	movs	r4, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    51c0:	movs	r3, #64	; 0x40
    51c2:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    51c4:	strb	r4, [r5, #2]
  return true;
    51c6:	mov	r0, r4
    51c8:	pop	{r4, r5, r6, pc}

fail:
  return false;
    51ca:	mov	r0, r4
}
    51cc:	pop	{r4, r5, r6, pc}
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    51ce:	movs	r4, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    51d0:	movs	r3, #32
    51d2:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    51d4:	strb	r4, [r5, #2]
  return true;
    51d6:	mov	r0, r4
    51d8:	pop	{r4, r5, r6, pc}
    51da:	nop

000051dc <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    51dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    51e0:	ldrb	r3, [r0, #2]
    51e2:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    51e4:	sub	sp, #12
    51e6:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    51e8:	bpl.w	530c <FatFile::read(void*, unsigned int)+0x130>
    51ec:	mov	r7, r1
    51ee:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    51f0:	lsls	r6, r1, #28
    51f2:	mov	r9, r2
    51f4:	bmi.w	531e <FatFile::read(void*, unsigned int)+0x142>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    51f8:	lsls	r4, r1, #26
    51fa:	bpl.n	520e <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    51fc:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    51fe:	ldr	r3, [r0, #20]
    5200:	ldrh	r2, [r2, #8]
    5202:	rsb	r3, r3, r2, lsl #5
    5206:	uxth	r3, r3
    5208:	cmp	r9, r3
    520a:	it	cs
    520c:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    520e:	cmp.w	r9, #0
    5212:	beq.w	536a <FatFile::read(void*, unsigned int)+0x18e>
    5216:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5218:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    521a:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    521c:	mov	r6, r9
    521e:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5222:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5226:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    522a:	bpl.n	52ac <FatFile::read(void*, unsigned int)+0xd0>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    522c:	ldr	r1, [r2, #32]
    522e:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5232:	cmp.w	fp, #0
    5236:	bne.n	52e0 <FatFile::read(void*, unsigned int)+0x104>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5238:	cmp.w	r6, #512	; 0x200
    523c:	bcc.n	52e0 <FatFile::read(void*, unsigned int)+0x104>
    523e:	ldr	r3, [r2, #44]	; 0x2c
        || sector == m_vol->cacheSectorNumber()) {
    5240:	cmp	r1, r3
    5242:	beq.n	52e0 <FatFile::read(void*, unsigned int)+0x104>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5244:	cmp.w	r6, #1024	; 0x400
    5248:	bcc.n	5330 <FatFile::read(void*, unsigned int)+0x154>
      uint8_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    524a:	ldrb	r0, [r5, #0]
    524c:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint8_t ns = toRead >> m_vol->bytesPerSectorShift();
    524e:	ubfx	fp, r6, #9, #8
      if (!isRootFixed()) {
    5252:	bmi.n	5262 <FatFile::read(void*, unsigned int)+0x86>
        uint8_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5254:	ldrb	r0, [r2, #4]
    5256:	rsb	r0, r8, r0
    525a:	uxtb	r0, r0
    525c:	cmp	fp, r0
    525e:	it	cs
    5260:	movcs	fp, r0
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (m_vol->cacheSectorNumber() <= sector
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5262:	cmp	r1, r3
        uint8_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    5264:	mov.w	r4, fp, lsl #9
      if (m_vol->cacheSectorNumber() <= sector
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5268:	bcc.n	5282 <FatFile::read(void*, unsigned int)+0xa6>
    526a:	add	r3, fp
    526c:	cmp	r1, r3
    526e:	bcs.n	5282 <FatFile::read(void*, unsigned int)+0xa6>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5270:	add.w	r0, r2, #36	; 0x24
    5274:	str	r1, [sp, #4]
    5276:	bl	5908 <FatCache::sync()>
        // flush cache if a sector is in the cache
        if (!m_vol->cacheSyncData()) {
    527a:	cmp	r0, #0
    527c:	beq.n	530c <FatFile::read(void*, unsigned int)+0x130>
    527e:	ldr	r2, [r5, #8]
    5280:	ldr	r1, [sp, #4]
    5282:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    5284:	ldr	r2, [r0, #0]
    5286:	mov	r3, fp
    5288:	ldr.w	fp, [r2, #12]
    528c:	mov	r2, r7
    528e:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    5290:	cmp	r0, #0
    5292:	beq.n	530c <FatFile::read(void*, unsigned int)+0x130>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5294:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5296:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5298:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    529a:	add	r7, r4
    m_curPosition += n;
    529c:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    529e:	beq.n	536a <FatFile::read(void*, unsigned int)+0x18e>
    52a0:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    52a2:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    52a4:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    52a6:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    52aa:	bmi.n	522c <FatFile::read(void*, unsigned int)+0x50>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    52ac:	ldrb.w	r8, [r2, #5]
    52b0:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    52b4:	cmp.w	fp, #0
    52b8:	bne.n	532c <FatFile::read(void*, unsigned int)+0x150>
    52ba:	cmp.w	r8, #0
    52be:	bne.n	532c <FatFile::read(void*, unsigned int)+0x150>
        // start of new cluster
        if (m_curPosition == 0) {
    52c0:	cmp	r3, #0
    52c2:	bne.n	5344 <FatFile::read(void*, unsigned int)+0x168>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    52c4:	lsls	r1, r1, #25
    52c6:	ite	mi
    52c8:	ldrmi	r1, [r2, #32]
    52ca:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    52cc:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    52ce:	mov	r0, r2
    52d0:	bl	595c <FatPartition::clusterStartSector(unsigned long) const>
    52d4:	ldr	r2, [r5, #8]
    52d6:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    52da:	cmp.w	fp, #0
    52de:	beq.n	5238 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    52e0:	add.w	r0, r2, #36	; 0x24
    52e4:	movs	r2, #0
    52e6:	bl	5878 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    52ea:	cbz	r0, 530c <FatFile::read(void*, unsigned int)+0x130>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    52ec:	rsb	r4, fp, #512	; 0x200
    52f0:	cmp	r4, r6
    52f2:	it	cs
    52f4:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    52f6:	add.w	r1, r0, fp
    52fa:	mov	r2, r4
    52fc:	mov	r0, r7
    52fe:	bl	9324 <memcpy>
    5302:	b.n	5294 <FatFile::read(void*, unsigned int)+0xb8>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    5304:	ldrb	r3, [r5, #0]
    5306:	tst.w	r3, #112	; 0x70
    530a:	bne.n	536c <FatFile::read(void*, unsigned int)+0x190>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    530c:	ldrb	r3, [r5, #1]
  return -1;
    530e:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    5312:	orr.w	r3, r3, #2
    5316:	strb	r3, [r5, #1]
  return -1;
}
    5318:	add	sp, #12
    531a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    531e:	ldr	r3, [r0, #28]
    5320:	ldr	r2, [r0, #20]
    5322:	subs	r3, r3, r2
    5324:	cmp	r9, r3
    5326:	it	cs
    5328:	movcs	r9, r3
    532a:	b.n	520e <FatFile::read(void*, unsigned int)+0x32>
    532c:	ldr	r1, [r5, #16]
    532e:	b.n	52ce <FatFile::read(void*, unsigned int)+0xf2>
    5330:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5332:	ldr	r3, [r0, #0]
    5334:	mov	r2, r7
    5336:	ldr	r3, [r3, #8]
    5338:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    533a:	cmp	r0, #0
    533c:	beq.n	530c <FatFile::read(void*, unsigned int)+0x130>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    533e:	mov.w	r4, #512	; 0x200
    5342:	b.n	5294 <FatFile::read(void*, unsigned int)+0xb8>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    5344:	lsls	r3, r1, #28
    5346:	bpl.n	5354 <FatFile::read(void*, unsigned int)+0x178>
    5348:	ldrb	r3, [r5, #2]
    534a:	lsls	r4, r3, #25
    534c:	bpl.n	5354 <FatFile::read(void*, unsigned int)+0x178>
          m_curCluster++;
    534e:	ldr	r1, [r5, #16]
    5350:	adds	r1, #1
    5352:	b.n	52cc <FatFile::read(void*, unsigned int)+0xf0>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5354:	mov	r0, r2
    5356:	ldr	r1, [r5, #16]
    5358:	mov	r2, sl
    535a:	bl	5968 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    535e:	cmp	r0, #0
    5360:	blt.n	530c <FatFile::read(void*, unsigned int)+0x130>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    5362:	beq.n	5304 <FatFile::read(void*, unsigned int)+0x128>
    5364:	ldr	r2, [r5, #8]
    5366:	ldr	r1, [r5, #16]
    5368:	b.n	52ce <FatFile::read(void*, unsigned int)+0xf2>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    536a:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    536c:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    5370:	add	sp, #12
    5372:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5376:	nop

00005378 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    5378:	push	{r4, r5, r6, lr}
    537a:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    537c:	movs	r2, #1
    537e:	add.w	r1, sp, #7
    5382:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5384:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    5386:	ldr	r5, [r0, #16]
    5388:	bl	51dc <FatFile::read(void*, unsigned int)>
    538c:	cmp	r0, #1
    538e:	it	eq
    5390:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    5394:	str	r6, [r4, #20]
    5396:	it	ne
    5398:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    539c:	str	r5, [r4, #16]
  return c;
}
    539e:	add	sp, #8
    53a0:	pop	{r4, r5, r6, pc}
    53a2:	nop

000053a4 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
    53a4:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    53a6:	ldr	r3, [r0, #20]
    53a8:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
    53ac:	sub	sp, #12
    53ae:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    53b0:	cbz	r5, 53b4 <FatFile::readDirCache(bool)+0x10>
    53b2:	cbnz	r1, 53d8 <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    53b4:	movs	r2, #1
    53b6:	add.w	r1, sp, #7
    53ba:	mov	r0, r4
    53bc:	bl	51dc <FatFile::read(void*, unsigned int)>
    53c0:	sxtb	r0, r0
    if  (n != 1) {
    53c2:	cmp	r0, #1
    53c4:	bne.n	53de <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    53c6:	ldr	r3, [r4, #20]
    53c8:	adds	r3, #31
    53ca:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    53cc:	ldr	r0, [r4, #8]
    53ce:	adds	r0, #48	; 0x30
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<dir_t*>(m_vol->cacheAddress()) + i;
    53d0:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    53d4:	add	sp, #12
    53d6:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    53d8:	adds	r3, #32
    53da:	str	r3, [r0, #20]
    53dc:	b.n	53cc <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<dir_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    53de:	movs	r0, #0
}
    53e0:	add	sp, #12
    53e2:	pop	{r4, r5, pc}

000053e4 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    53e4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53e8:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    53ea:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    53ec:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    53ee:	cbz	r3, 541e <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    53f0:	ldr	r2, [r0, #20]
    53f2:	cmp	r2, r1
    53f4:	mov	r6, r1
    53f6:	beq.n	546e <FatFile::seekSet(unsigned long)+0x8a>
    return true;
  }
  if (pos == 0) {
    53f8:	cbnz	r1, 540c <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    53fa:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    53fc:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    53fe:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5400:	bic.w	r3, r3, #32
    5404:	strb	r3, [r4, #2]
  return true;
    5406:	movs	r0, #1
    5408:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    540c:	lsls	r0, r3, #28
    540e:	bmi.n	5426 <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    5410:	lsls	r1, r3, #26
    5412:	bpl.n	542c <FatFile::seekSet(unsigned long)+0x48>
    5414:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    5416:	ldrh	r3, [r3, #8]
    5418:	cmp.w	r6, r3, lsl #5
    541c:	bls.n	53fc <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    541e:	str	r7, [r4, #16]
  return false;
    5420:	movs	r0, #0
    5422:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    5426:	ldr	r1, [r4, #28]
    5428:	cmp	r6, r1
    542a:	bhi.n	541e <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    542c:	ldr.w	lr, [r4, #8]
    5430:	ldrb.w	r5, [lr, #6]
    5434:	adds	r5, #9
    5436:	uxtb	r1, r5
    5438:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    543a:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    543c:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    543e:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    5440:	cmp	r0, r5
    5442:	bhi.n	5446 <FatFile::seekSet(unsigned long)+0x62>
    5444:	cbnz	r2, 5474 <FatFile::seekSet(unsigned long)+0x90>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5446:	lsls	r3, r3, #25
    5448:	ite	mi
    544a:	ldrmi.w	r3, [lr, #32]
    544e:	ldrpl	r3, [r4, #32]
    5450:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5452:	add.w	r8, r4, #16
    5456:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    5458:	cmp	r5, #0
    545a:	beq.n	53fc <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    545c:	ldr	r1, [r4, #16]
    545e:	ldr	r0, [r4, #8]
    5460:	bl	5968 <FatPartition::fatGet(unsigned long, unsigned long*)>
    5464:	cmp	r0, #0
    5466:	add.w	r5, r5, #4294967295
    546a:	bgt.n	5456 <FatFile::seekSet(unsigned long)+0x72>
    546c:	b.n	541e <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    546e:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    5470:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    5474:	subs	r5, r5, r0
    5476:	b.n	5452 <FatFile::seekSet(unsigned long)+0x6e>

00005478 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
    5478:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    547c:	mov	r5, r1
    547e:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5480:	movs	r1, #0
    5482:	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
    5484:	mov	r4, r0
    5486:	mov	r7, r3
    5488:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    548c:	bl	caa8 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5490:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    5492:	ldr	r3, [r5, #32]
    5494:	str	r3, [r4, #12]
  dir_t* dir = reinterpret_cast<dir_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    5496:	and.w	r5, r8, #15
    549a:	add.w	r3, r0, #48	; 0x30
    549e:	add.w	r5, r3, r5, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    54a2:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    54a4:	strh.w	r8, [r4, #4]
    54a8:	ldrb	r2, [r5, #11]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = reinterpret_cast<dir_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    54aa:	lsls	r3, r2, #28
    54ac:	bmi.n	54d0 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    54ae:	and.w	r2, r2, #23
    54b2:	strb	r2, [r4, #0]
  if (isFileDir(dir)) {
    54b4:	ldrb	r3, [r5, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    54b6:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    54b8:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    54bc:	itt	eq
    54be:	orreq.w	r2, r2, #8
    54c2:	strbeq	r2, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
    54c4:	tst.w	r7, #50	; 0x32
    54c8:	beq.n	54da <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x62>
    if (isSubDir() || isReadOnly()) {
    54ca:	tst.w	r2, #17
    54ce:	beq.n	54da <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x62>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    54d0:	movs	r0, #0
    54d2:	strb	r0, [r4, #0]
  m_flags = 0;
    54d4:	strb	r0, [r4, #2]
  return false;
    54d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // save open flags for read/write
  m_flags = oflag & FILE_FLAG_OFLAG;
    54da:	and.w	r2, r7, #7
    54de:	strb	r2, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    54e0:	ldrh	r1, [r5, #20]
    54e2:	ldrh	r3, [r5, #26]
    54e4:	ldr	r6, [r0, #44]	; 0x2c
    }
  }
  // save open flags for read/write
  m_flags = oflag & FILE_FLAG_OFLAG;

  m_dirSector = m_vol->cacheSectorNumber();
    54e6:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    54e8:	lsls	r6, r7, #27

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    54ea:	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
    54ee:	bpl.n	54fe <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x86>
    if (!(oflag & O_WRITE)) {
    54f0:	lsls	r5, r7, #30
    54f2:	bpl.n	54d0 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x58>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    54f4:	cbnz	r1, 551c <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    54f6:	orn	r2, r2, #127	; 0x7f
    54fa:	strb	r2, [r4, #2]
    54fc:	b.n	5504 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x8c>
  } else {
    m_firstCluster = firstCluster;
    54fe:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5500:	ldr	r3, [r5, #28]
    m_fileSize = getLe32(dir->fileSize);
    5502:	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5504:	lsls	r3, r7, #26
    5506:	bmi.n	550e <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    5508:	movs	r0, #1

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
    550a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    550e:	ldr	r1, [r4, #28]
    5510:	mov	r0, r4
    5512:	bl	53e4 <FatFile::seekSet(unsigned long)>
    5516:	cmp	r0, #0
    5518:	bne.n	5508 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x90>
    551a:	b.n	54d0 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x58>
  if (oflag & O_TRUNC) {
    if (!(oflag & O_WRITE)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    551c:	bl	60c0 <FatPartition::freeChain(unsigned long)>
    5520:	cmp	r0, #0
    5522:	beq.n	54d0 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x58>
    5524:	ldrb	r2, [r4, #2]
    5526:	b.n	54f6 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)+0x7e>

00005528 <FatFile::sync()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    5528:	ldrb	r3, [r0, #0]
    552a:	cbz	r3, 556e <FatFile::sync()+0x46>
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    552c:	push	{r4, r5, lr}
  uint16_t date, time;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    552e:	ldrsb.w	r3, [r0, #2]
    5532:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5534:	sub	sp, #12
    5536:	mov	r4, r0
  uint16_t date, time;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5538:	blt.n	5572 <FatFile::sync()+0x4a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    553a:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    553c:	add.w	r0, r5, #36	; 0x24
    5540:	bl	5908 <FatCache::sync()>
    5544:	cbnz	r0, 5554 <FatFile::sync()+0x2c>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    5546:	ldrb	r3, [r4, #1]
    5548:	orr.w	r3, r3, #1
    554c:	strb	r3, [r4, #1]
  return false;
    554e:	movs	r0, #0
}
    5550:	add	sp, #12
    5552:	pop	{r4, r5, pc}
    5554:	add.w	r0, r5, #560	; 0x230
    5558:	bl	5908 <FatCache::sync()>
    555c:	cmp	r0, #0
    555e:	beq.n	5546 <FatFile::sync()+0x1e>
    5560:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5562:	ldr	r3, [r0, #0]
    5564:	ldr	r3, [r3, #20]
    5566:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5568:	cmp	r0, #0
    556a:	beq.n	5546 <FatFile::sync()+0x1e>
    556c:	b.n	5550 <FatFile::sync()+0x28>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    return true;
    556e:	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5570:	bx	lr
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5572:	ldr	r0, [r0, #8]
    5574:	ldr	r1, [r4, #24]
    5576:	adds	r0, #36	; 0x24
    5578:	movs	r2, #1
    557a:	bl	5878 <FatCache::read(unsigned long, unsigned char)>
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    557e:	cmp	r0, #0
    5580:	beq.n	5546 <FatFile::sync()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    5582:	ldrh	r3, [r4, #4]
    5584:	and.w	r3, r3, #15
    5588:	lsls	r3, r3, #5
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    558a:	adds	r5, r0, r3
    558c:	beq.n	5546 <FatFile::sync()+0x1e>
    558e:	ldrb	r3, [r0, r3]
    5590:	cmp	r3, #229	; 0xe5
    5592:	beq.n	5546 <FatFile::sync()+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5594:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5596:	ldr	r2, [pc, #68]	; (55dc <FatFile::sync()+0xb4>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5598:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    559a:	itt	mi
    559c:	ldrmi	r3, [r4, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    559e:	strmi	r3, [r5, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    55a0:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    55a2:	ldr	r2, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    55a4:	strh	r3, [r5, #26]
    55a6:	lsrs	r3, r3, #16
    55a8:	strh	r3, [r5, #20]
    55aa:	cbz	r2, 55c2 <FatFile::sync()+0x9a>
      FsDateTime::callback(&date, &time);
    55ac:	add.w	r1, sp, #6
    55b0:	add	r0, sp, #4
    55b2:	blx	r2
      setLe16(dir->modifyDate, date);
    55b4:	ldrh.w	r3, [sp, #4]
    55b8:	ldrh.w	r2, [sp, #6]
    55bc:	strh	r3, [r5, #24]
    55be:	strh	r3, [r5, #18]
    55c0:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    55c2:	ldrb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
    55c4:	ldr	r5, [r4, #8]
      setLe16(dir->modifyDate, date);
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    55c6:	and.w	r3, r3, #127	; 0x7f
    55ca:	strb	r3, [r4, #2]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    55cc:	add.w	r0, r5, #36	; 0x24
    55d0:	bl	5908 <FatCache::sync()>
    55d4:	cmp	r0, #0
    55d6:	beq.n	5546 <FatFile::sync()+0x1e>
    55d8:	b.n	5554 <FatFile::sync()+0x2c>
    55da:	nop
    55dc:	.word	0x20020360

000055e0 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    55e0:	ldrb	r3, [r0, #2]
    55e2:	lsls	r3, r3, #30
    55e4:	bpl.n	561c <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    55e6:	ldr	r3, [r0, #32]
    55e8:	cbz	r3, 5618 <FatFile::truncate()+0x38>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    55ea:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    55ec:	ldr	r1, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    55ee:	sub	sp, #8
    55f0:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    55f2:	cbnz	r1, 5632 <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    55f4:	str	r3, [sp, #4]
    m_firstCluster = 0;
    55f6:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    55f8:	mov	r1, r3
    55fa:	ldr	r0, [r4, #8]
    55fc:	bl	60c0 <FatPartition::freeChain(unsigned long)>
    5600:	cbz	r0, 562e <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5602:	ldrb	r3, [r4, #2]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    5604:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    5606:	ldr	r1, [r4, #20]
    5608:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    560a:	orn	r3, r3, #127	; 0x7f
    560e:	strb	r3, [r4, #2]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  if (!isOpen()) {
    5610:	cbnz	r2, 564e <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5612:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    5614:	add	sp, #8
    5616:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5618:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    561a:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    561c:	movs	r0, #0
}
    561e:	bx	lr
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5620:	mvn.w	r2, #4026531840	; 0xf0000000
    5624:	ldr	r1, [r4, #16]
    5626:	ldr	r0, [r4, #8]
    5628:	bl	5ab8 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    562c:	cbnz	r0, 5646 <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    562e:	movs	r0, #0
    5630:	b.n	5614 <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    5632:	add	r2, sp, #8
    5634:	movs	r3, #0
    5636:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    563a:	ldr	r0, [r0, #8]
    563c:	bl	5968 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    5640:	cmp	r0, #0
    5642:	blt.n	562e <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    5644:	bne.n	5620 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    5646:	ldr	r3, [sp, #4]
    5648:	cmp	r3, #0
    564a:	beq.n	5602 <FatFile::truncate()+0x22>
    564c:	b.n	55f8 <FatFile::truncate()+0x18>
    564e:	mov	r0, r4
    5650:	bl	4e24 <FatFile::sync() [clone .part.39]>
    5654:	b.n	5614 <FatFile::truncate()+0x34>
    5656:	nop

00005658 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5658:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    565c:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    565e:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5660:	sub	sp, #12
    5662:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5664:	bmi.n	5678 <FatFile::write(void const*, unsigned int)+0x20>

  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5666:	ldrb	r3, [r4, #1]
    5668:	orr.w	r3, r3, #1
    566c:	strb	r3, [r4, #1]
  return -1;
    566e:	mov.w	r0, #4294967295
}
    5672:	add	sp, #12
    5674:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5678:	mov	r8, r1
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
    567a:	lsls	r1, r3, #29
    567c:	mov	r9, r2
    567e:	bmi.w	582a <FatFile::write(void const*, unsigned int)+0x1d2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    5682:	ldr	r3, [r4, #20]
    5684:	mvns	r2, r3
    5686:	cmp	r9, r2
    5688:	bhi.n	5666 <FatFile::write(void const*, unsigned int)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    568a:	cmp.w	r9, #0
    568e:	beq.w	5842 <FatFile::write(void const*, unsigned int)+0x1ea>
    5692:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5694:	mov.w	sl, #0
    5698:	b.n	5710 <FatFile::write(void const*, unsigned int)+0xb8>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    569a:	cmp	r1, #0
    569c:	beq.w	57a8 <FatFile::write(void const*, unsigned int)+0x150>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    56a0:	ldrb	r2, [r4, #2]
    56a2:	lsls	r2, r2, #25
    56a4:	bpl.w	57cc <FatFile::write(void const*, unsigned int)+0x174>
    56a8:	ldr	r2, [r4, #28]
    56aa:	cmp	r2, r3
    56ac:	bls.w	57cc <FatFile::write(void const*, unsigned int)+0x174>
          m_curCluster++;
    56b0:	adds	r1, #1
    56b2:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    56b4:	bl	595c <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    56b8:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    56bc:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    56be:	bcc.n	5772 <FatFile::write(void const*, unsigned int)+0x11a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    56c0:	cmp.w	r6, #1024	; 0x400
    56c4:	ldr	r0, [r4, #8]
    56c6:	bcc.n	578c <FatFile::write(void const*, unsigned int)+0x134>
      // use multiple sector write command
      uint8_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    56c8:	ldrb	r2, [r0, #4]
    56ca:	ldr	r7, [r0, #44]	; 0x2c
    56cc:	subs	r2, r2, r5
      uint8_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    56ce:	ubfx	r3, r6, #9, #8
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint8_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    56d2:	uxtb	r2, r2
    56d4:	cmp	r3, r2
    56d6:	it	cs
    56d8:	movcs	r3, r2
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      if (m_vol->cacheSectorNumber() <= sector
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    56da:	cmp	r7, r1
      uint8_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint8_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    56dc:	mov.w	r5, r3, lsl #9
      if (m_vol->cacheSectorNumber() <= sector
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    56e0:	bhi.n	56f4 <FatFile::write(void const*, unsigned int)+0x9c>
    56e2:	add	r7, r3
    56e4:	cmp	r7, r1
    56e6:	bls.n	56f4 <FatFile::write(void const*, unsigned int)+0x9c>
    56e8:	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    56ec:	mov.w	r2, #4294967295
    56f0:	str	r2, [r0, #44]	; 0x2c
    56f2:	ldr	r0, [r4, #8]
    56f4:	ldr	r0, [r0, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    56f6:	ldr	r7, [r0, #0]
    56f8:	mov	r2, r8
    56fa:	ldr	r7, [r7, #28]
    56fc:	blx	r7
        // invalidate cache if sector is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    56fe:	cmp	r0, #0
    5700:	beq.n	5666 <FatFile::write(void const*, unsigned int)+0xe>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5702:	ldr	r3, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5704:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5706:	add	r3, r5
    src += n;
    5708:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    570a:	str	r3, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    570c:	beq.w	5842 <FatFile::write(void const*, unsigned int)+0x1ea>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    5710:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5712:	ldr	r1, [r4, #16]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5714:	ldrb	r2, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5716:	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    571a:	ubfx	r7, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    571e:	bne.n	5762 <FatFile::write(void const*, unsigned int)+0x10a>
    5720:	cmp	r7, #0
    5722:	beq.n	569a <FatFile::write(void const*, unsigned int)+0x42>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5724:	bl	595c <FatPartition::clusterStartSector(unsigned long) const>
    5728:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    572a:	rsb	r5, r7, #512	; 0x200
    572e:	cmp	r5, r6
    5730:	ldr	r0, [r4, #8]
    5732:	it	cs
    5734:	movcs	r5, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    5736:	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5738:	adds	r0, #36	; 0x24
    573a:	bl	5878 <FatCache::read(unsigned long, unsigned char)>
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    573e:	cmp	r0, #0
    5740:	beq.n	5666 <FatFile::write(void const*, unsigned int)+0xe>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    5742:	add	r0, r7
    5744:	mov	r2, r5
    5746:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5748:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    574a:	bl	9324 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    574e:	cmp.w	r7, #512	; 0x200
    5752:	bne.n	5702 <FatFile::write(void const*, unsigned int)+0xaa>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5754:	ldr	r0, [r4, #8]
    5756:	adds	r0, #36	; 0x24
    5758:	bl	5908 <FatCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    575c:	cmp	r0, #0
    575e:	bne.n	5702 <FatFile::write(void const*, unsigned int)+0xaa>
    5760:	b.n	5666 <FatFile::write(void const*, unsigned int)+0xe>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5762:	bl	595c <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    5766:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5768:	cmp	r7, #0
    576a:	bne.n	572a <FatFile::write(void const*, unsigned int)+0xd2>
    576c:	cmp.w	r6, #512	; 0x200
    5770:	bcs.n	56c0 <FatFile::write(void const*, unsigned int)+0x68>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5772:	ldr	r2, [r4, #20]
    5774:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5776:	ldr	r0, [r4, #8]
    5778:	cmp.w	r6, #512	; 0x200
    577c:	mov	r5, r6
    577e:	it	cs
    5780:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5784:	cmp	r2, r3
    5786:	bcc.n	580e <FatFile::write(void const*, unsigned int)+0x1b6>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    5788:	movs	r2, #5
    578a:	b.n	5738 <FatFile::write(void const*, unsigned int)+0xe0>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    578c:	ldr	r3, [r0, #44]	; 0x2c
    578e:	cmp	r3, r1
    5790:	beq.n	581c <FatFile::write(void const*, unsigned int)+0x1c4>
    5792:	ldr	r0, [r0, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5794:	ldr	r3, [r0, #0]
    5796:	mov	r2, r8
    5798:	ldr	r3, [r3, #24]
    579a:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    579c:	cmp	r0, #0
    579e:	beq.w	5666 <FatFile::write(void const*, unsigned int)+0xe>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    57a2:	mov.w	r5, #512	; 0x200
    57a6:	b.n	5702 <FatFile::write(void const*, unsigned int)+0xaa>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    57a8:	ldr	r1, [r4, #32]
    57aa:	cmp	r1, #0
    57ac:	bne.n	56b2 <FatFile::write(void const*, unsigned int)+0x5a>
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    57ae:	add.w	r2, r4, #16
    57b2:	bl	5c08 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    57b6:	cmp	r0, #0
    57b8:	beq.w	5666 <FatFile::write(void const*, unsigned int)+0xe>
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    57bc:	ldrb	r3, [r4, #2]
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    57be:	ldr	r1, [r4, #16]
    57c0:	str	r1, [r4, #32]
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    57c2:	orn	r3, r3, #63	; 0x3f
    57c6:	strb	r3, [r4, #2]
    57c8:	ldr	r0, [r4, #8]
    57ca:	b.n	56b4 <FatFile::write(void const*, unsigned int)+0x5c>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    57cc:	add.w	fp, r4, #16
    57d0:	mov	r2, fp
    57d2:	bl	5968 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    57d6:	cmp	r0, #0
    57d8:	blt.w	5666 <FatFile::write(void const*, unsigned int)+0xe>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    57dc:	bne.n	586c <FatFile::write(void const*, unsigned int)+0x214>
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    57de:	ldr	r3, [r4, #16]
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    57e0:	ldr	r0, [r4, #8]
    57e2:	str	r3, [sp, #4]
    57e4:	mov	r2, fp
    57e6:	mov	r1, r3
    57e8:	bl	5c08 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    57ec:	cmp	r0, #0
    57ee:	beq.w	5666 <FatFile::write(void const*, unsigned int)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    57f2:	ldr	r3, [sp, #4]
    57f4:	cbz	r3, 5838 <FatFile::write(void const*, unsigned int)+0x1e0>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    57f6:	ldr	r1, [r4, #16]
    57f8:	adds	r3, #1
    57fa:	cmp	r1, r3
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    57fc:	ldrb	r3, [r4, #2]
    57fe:	it	ne
    5800:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5804:	orn	r3, r3, #127	; 0x7f
    5808:	strb	r3, [r4, #2]
    580a:	ldr	r0, [r4, #8]
    580c:	b.n	56b4 <FatFile::write(void const*, unsigned int)+0x5c>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    580e:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    5810:	tst.w	r3, #32
    5814:	ite	eq
    5816:	moveq	r2, #1
    5818:	movne	r2, #5
    581a:	b.n	5738 <FatFile::write(void const*, unsigned int)+0xe0>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    581c:	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    5820:	mov.w	r3, #4294967295
    5824:	str	r3, [r0, #44]	; 0x2c
    5826:	ldr	r0, [r4, #8]
    5828:	b.n	5792 <FatFile::write(void const*, unsigned int)+0x13a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
    if (!seekSet(m_fileSize)) {
    582a:	ldr	r1, [r0, #28]
    582c:	bl	53e4 <FatFile::seekSet(unsigned long)>
    5830:	cmp	r0, #0
    5832:	beq.w	5666 <FatFile::write(void const*, unsigned int)+0xe>
    5836:	b.n	5682 <FatFile::write(void const*, unsigned int)+0x2a>
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5838:	ldrb	r3, [r4, #2]
    583a:	ldr	r1, [r4, #16]
    583c:	orr.w	r3, r3, #64	; 0x40
    5840:	b.n	5804 <FatFile::write(void const*, unsigned int)+0x1ac>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    5842:	ldr	r2, [r4, #28]
    5844:	cmp	r2, r3
    5846:	bcc.n	585a <FatFile::write(void const*, unsigned int)+0x202>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5848:	ldr	r3, [pc, #40]	; (5874 <FatFile::write(void const*, unsigned int)+0x21c>)
    584a:	ldr	r3, [r3, #0]
    584c:	cbz	r3, 5868 <FatFile::write(void const*, unsigned int)+0x210>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    584e:	ldrb	r3, [r4, #2]
    5850:	orn	r3, r3, #127	; 0x7f
    5854:	mov	r0, r9
    5856:	strb	r3, [r4, #2]
    5858:	b.n	5672 <FatFile::write(void const*, unsigned int)+0x1a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    585a:	ldrb	r2, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    585c:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    585e:	orn	r3, r2, #127	; 0x7f
    5862:	mov	r0, r9
    5864:	strb	r3, [r4, #2]
    5866:	b.n	5672 <FatFile::write(void const*, unsigned int)+0x1a>
    5868:	mov	r0, r9
    586a:	b.n	5672 <FatFile::write(void const*, unsigned int)+0x1a>
    586c:	ldr	r0, [r4, #8]
    586e:	ldr	r1, [r4, #16]
    5870:	b.n	56b4 <FatFile::write(void const*, unsigned int)+0x5c>
    5872:	nop
    5874:	.word	0x20020360

00005878 <FatCache::read(unsigned long, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    5878:	push	{r3, r4, r5, r6, r7, lr}
    587a:	mov	r7, r1
  if (m_lbn != sector) {
    587c:	ldr	r1, [r0, #8]
    587e:	cmp	r1, r7
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    5880:	mov	r5, r0
    5882:	mov	r4, r2
  if (m_lbn != sector) {
    5884:	beq.n	58a4 <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5886:	ldrb	r3, [r0, #0]
    5888:	lsls	r0, r3, #31
    588a:	bmi.n	58b6 <FatCache::read(unsigned long, unsigned char)+0x3e>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    588c:	lsls	r3, r4, #29
    588e:	add.w	r6, r5, #12
    5892:	bpl.n	58d8 <FatCache::read(unsigned long, unsigned char)+0x60>
    5894:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    5896:	and.w	r4, r4, #3
    589a:	orrs	r4, r3
    589c:	strb	r4, [r5, #0]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    589e:	str	r7, [r5, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;
    58a0:	mov	r0, r6
    58a2:	pop	{r3, r4, r5, r6, r7, pc}
    58a4:	mov	r6, r0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    58a6:	and.w	r4, r4, #3
    58aa:	ldrsb.w	r3, [r6], #12
    58ae:	orrs	r4, r3
    58b0:	strb	r4, [r5, #0]
  return &m_buffer;
    58b2:	mov	r0, r6
    58b4:	pop	{r3, r4, r5, r6, r7, pc}
    58b6:	ldr	r3, [r5, #4]
    58b8:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    58ba:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    58bc:	add.w	r6, r5, #12
    58c0:	ldr	r3, [r3, #24]
    58c2:	mov	r2, r6
    58c4:	blx	r3
    58c6:	cbz	r0, 58ea <FatCache::read(unsigned long, unsigned char)+0x72>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    58c8:	ldrb	r3, [r5, #0]
    58ca:	lsls	r2, r3, #30
    58cc:	bmi.n	58ee <FatCache::read(unsigned long, unsigned char)+0x76>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    58ce:	bic.w	r3, r3, #1
    58d2:	strb	r3, [r5, #0]
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    58d4:	lsls	r3, r4, #29
    58d6:	bmi.n	5894 <FatCache::read(unsigned long, unsigned char)+0x1c>
    58d8:	ldr	r3, [r5, #4]
    58da:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    58dc:	ldr	r3, [r0, #0]
    58de:	mov	r2, r6
    58e0:	ldr	r3, [r3, #8]
    58e2:	mov	r1, r7
    58e4:	blx	r3
      if (!m_part->readSector(sector, m_buffer.data)) {
    58e6:	cmp	r0, #0
    58e8:	bne.n	5894 <FatCache::read(unsigned long, unsigned char)+0x1c>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    58ea:	movs	r0, #0
    58ec:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    58ee:	ldr	r3, [r5, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    58f0:	ldr	r2, [r5, #8]
    58f2:	ldr	r0, [r3, #0]
    58f4:	ldr	r1, [r3, #16]
    58f6:	ldr	r3, [r0, #0]
    58f8:	add	r1, r2
    58fa:	ldr	r3, [r3, #24]
    58fc:	mov	r2, r6
    58fe:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5900:	cmp	r0, #0
    5902:	beq.n	58ea <FatCache::read(unsigned long, unsigned char)+0x72>
    5904:	ldrb	r3, [r5, #0]
    5906:	b.n	58ce <FatCache::read(unsigned long, unsigned char)+0x56>

00005908 <FatCache::sync()>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    5908:	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    590a:	ldrb	r3, [r0, #0]
    590c:	lsls	r1, r3, #31
    590e:	bmi.n	5916 <FatCache::sync()+0xe>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
    5910:	movs	r4, #1

fail:
  return false;
}
    5912:	mov	r0, r4
    5914:	pop	{r3, r4, r5, r6, r7, pc}
    5916:	ldr	r3, [r0, #4]
    5918:	ldr	r1, [r0, #8]
    591a:	mov	r5, r0
    591c:	ldr	r0, [r3, #0]
    591e:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5920:	add.w	r6, r5, #12
    5924:	ldr	r3, [r3, #24]
    5926:	mov	r2, r6
    5928:	blx	r3
    592a:	mov	r4, r0
    592c:	cbz	r0, 5956 <FatCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    592e:	ldrb	r3, [r5, #0]
    5930:	lsls	r2, r3, #30
    5932:	bmi.n	593e <FatCache::sync()+0x36>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5934:	bic.w	r3, r3, #1
    5938:	strb	r3, [r5, #0]
  }
  return true;

fail:
  return false;
}
    593a:	mov	r0, r4
    593c:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    593e:	ldr	r3, [r5, #4]
    5940:	ldr	r1, [r5, #8]
    5942:	ldr	r0, [r3, #0]
    5944:	ldr	r7, [r3, #16]
    5946:	ldr	r3, [r0, #0]
    5948:	mov	r2, r6
    594a:	add	r1, r7
    594c:	ldr	r3, [r3, #24]
    594e:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5950:	cbz	r0, 5956 <FatCache::sync()+0x4e>
    5952:	ldrb	r3, [r5, #0]
    5954:	b.n	5934 <FatCache::sync()+0x2c>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    5956:	movs	r4, #0
}
    5958:	mov	r0, r4
    595a:	pop	{r3, r4, r5, r6, r7, pc}

0000595c <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    595c:	ldrb	r3, [r0, #6]
    595e:	ldr	r0, [r0, #20]
    5960:	subs	r1, #2
    5962:	lsls	r1, r3
}
    5964:	add	r0, r1
    5966:	bx	lr

00005968 <FatPartition::fatGet(unsigned long, unsigned long*)>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5968:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    596c:	ldrb	r3, [r0, #7]
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    596e:	cmp	r3, #32
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5970:	mov	r4, r0
    5972:	mov	r5, r1
    5974:	mov	r7, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5976:	beq.n	5a04 <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5978:	cmp	r3, #16
    597a:	bne.n	59ce <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    597c:	ldr	r3, [r0, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    597e:	ldr.w	r1, [r0, #568]	; 0x238
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5982:	ubfx	r6, r5, #8, #8
    5986:	add	r6, r3
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5988:	cmp	r6, r1

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    598a:	ldrb.w	r3, [r0, #560]	; 0x230
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    598e:	beq.n	59d6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x6e>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5990:	lsls	r0, r3, #31
    5992:	bmi.n	59dc <FatPartition::fatGet(unsigned long, unsigned long*)+0x74>
    5994:	add.w	r8, r4, #572	; 0x23c
    5998:	ldr.w	r3, [r4, #564]	; 0x234
    599c:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    599e:	ldr	r3, [r0, #0]
    59a0:	mov	r2, r8
    59a2:	ldr	r3, [r3, #8]
    59a4:	mov	r1, r6
    59a6:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    59a8:	cbz	r0, 59ce <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    59aa:	str.w	r6, [r4, #568]	; 0x238
    59ae:	movs	r3, #2
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    59b0:	uxtb	r5, r5
    59b2:	add.w	r5, r4, r5, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    59b6:	strb.w	r3, [r4, #560]	; 0x230
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    59ba:	ldrh.w	r3, [r5, #572]	; 0x23c
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    59be:	ldr	r2, [r4, #28]
    59c0:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    59c2:	itte	ls
    59c4:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    59c6:	strls	r3, [r7, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    59c8:	movhi	r0, #0
    59ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    59ce:	mov.w	r0, #4294967295
    59d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59d6:	orr.w	r3, r3, #2
    59da:	b.n	59b0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    59dc:	ldr.w	r3, [r4, #564]	; 0x234
    59e0:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    59e2:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    59e4:	add.w	r8, r4, #572	; 0x23c
    59e8:	ldr	r3, [r3, #24]
    59ea:	mov	r2, r8
    59ec:	blx	r3
    59ee:	cmp	r0, #0
    59f0:	beq.n	59ce <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    59f2:	ldrb.w	r3, [r4, #560]	; 0x230
    59f6:	lsls	r2, r3, #30
    59f8:	bmi.n	5a78 <FatPartition::fatGet(unsigned long, unsigned long*)+0x110>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    59fa:	bic.w	r3, r3, #1
    59fe:	strb.w	r3, [r4, #560]	; 0x230
    5a02:	b.n	5998 <FatPartition::fatGet(unsigned long, unsigned long*)+0x30>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5a04:	ldr	r6, [r0, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5a06:	ldr.w	r1, [r0, #568]	; 0x238

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5a0a:	ldrb.w	r3, [r0, #560]	; 0x230

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5a0e:	add.w	r6, r6, r5, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5a12:	cmp	r6, r1
    5a14:	beq.n	5a4a <FatPartition::fatGet(unsigned long, unsigned long*)+0xe2>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5a16:	lsls	r0, r3, #31
    5a18:	bmi.n	5a50 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe8>
    5a1a:	add.w	r8, r4, #572	; 0x23c
    5a1e:	ldr.w	r3, [r4, #564]	; 0x234
    5a22:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5a24:	ldr	r3, [r0, #0]
    5a26:	mov	r2, r8
    5a28:	ldr	r3, [r3, #8]
    5a2a:	mov	r1, r6
    5a2c:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5a2e:	cmp	r0, #0
    5a30:	beq.n	59ce <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5a32:	str.w	r6, [r4, #568]	; 0x238
    5a36:	movs	r3, #2
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5a38:	and.w	r5, r5, #127	; 0x7f
    5a3c:	add.w	r5, r4, r5, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    5a40:	strb.w	r3, [r4, #560]	; 0x230
    5a44:	ldr.w	r3, [r5, #572]	; 0x23c
    5a48:	b.n	59be <FatPartition::fatGet(unsigned long, unsigned long*)+0x56>
    5a4a:	orr.w	r3, r3, #2
    5a4e:	b.n	5a38 <FatPartition::fatGet(unsigned long, unsigned long*)+0xd0>
    5a50:	ldr.w	r3, [r4, #564]	; 0x234
    5a54:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5a56:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5a58:	add.w	r8, r4, #572	; 0x23c
    5a5c:	ldr	r3, [r3, #24]
    5a5e:	mov	r2, r8
    5a60:	blx	r3
    5a62:	cmp	r0, #0
    5a64:	beq.n	59ce <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5a66:	ldrb.w	r3, [r4, #560]	; 0x230
    5a6a:	lsls	r2, r3, #30
    5a6c:	bmi.n	5a98 <FatPartition::fatGet(unsigned long, unsigned long*)+0x130>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5a6e:	bic.w	r3, r3, #1
    5a72:	strb.w	r3, [r4, #560]	; 0x230
    5a76:	b.n	5a1e <FatPartition::fatGet(unsigned long, unsigned long*)+0xb6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5a78:	ldr.w	r3, [r4, #564]	; 0x234
    5a7c:	ldr.w	r2, [r4, #568]	; 0x238
    5a80:	ldr	r0, [r3, #0]
    5a82:	ldr	r1, [r3, #16]
    5a84:	ldr	r3, [r0, #0]
    5a86:	add	r1, r2
    5a88:	ldr	r3, [r3, #24]
    5a8a:	mov	r2, r8
    5a8c:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5a8e:	cmp	r0, #0
    5a90:	beq.n	59ce <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
    5a92:	ldrb.w	r3, [r4, #560]	; 0x230
    5a96:	b.n	59fa <FatPartition::fatGet(unsigned long, unsigned long*)+0x92>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5a98:	ldr.w	r3, [r4, #564]	; 0x234
    5a9c:	ldr.w	r2, [r4, #568]	; 0x238
    5aa0:	ldr	r0, [r3, #0]
    5aa2:	ldr	r1, [r3, #16]
    5aa4:	ldr	r3, [r0, #0]
    5aa6:	add	r1, r2
    5aa8:	ldr	r3, [r3, #24]
    5aaa:	mov	r2, r8
    5aac:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5aae:	cmp	r0, #0
    5ab0:	beq.n	59ce <FatPartition::fatGet(unsigned long, unsigned long*)+0x66>
    5ab2:	ldrb.w	r3, [r4, #560]	; 0x230
    5ab6:	b.n	5a6e <FatPartition::fatGet(unsigned long, unsigned long*)+0x106>

00005ab8 <FatPartition::fatPut(unsigned long, unsigned long)>:
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5ab8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5abc:	ldrb	r3, [r0, #7]
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5abe:	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5ac0:	mov	r4, r0
    5ac2:	mov	r5, r1
    5ac4:	mov	r7, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5ac6:	beq.n	5b1c <FatPartition::fatPut(unsigned long, unsigned long)+0x64>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    5ac8:	cmp	r3, #16
    5aca:	beq.n	5ad2 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    5acc:	movs	r0, #0
    5ace:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5ad2:	ldr	r3, [r0, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5ad4:	ldr.w	r1, [r0, #568]	; 0x238
    return true;
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5ad8:	ubfx	r6, r5, #8, #8
    5adc:	add	r6, r3
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5ade:	cmp	r6, r1

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5ae0:	ldrb.w	r3, [r0, #560]	; 0x230
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5ae4:	beq.n	5b66 <FatPartition::fatPut(unsigned long, unsigned long)+0xae>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5ae6:	lsls	r0, r3, #31
    5ae8:	bmi.n	5b72 <FatPartition::fatPut(unsigned long, unsigned long)+0xba>
    5aea:	add.w	r8, r4, #572	; 0x23c
    5aee:	ldr.w	r3, [r4, #564]	; 0x234
    5af2:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5af4:	ldr	r3, [r0, #0]
    5af6:	mov	r2, r8
    5af8:	ldr	r3, [r3, #8]
    5afa:	mov	r1, r6
    5afc:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5afe:	cmp	r0, #0
    5b00:	beq.n	5acc <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5b02:	str.w	r6, [r4, #568]	; 0x238
    5b06:	movs	r3, #3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5b08:	uxtb	r5, r5
    5b0a:	add.w	r5, r4, r5, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    5b0e:	strb.w	r3, [r4, #560]	; 0x230
    5b12:	strh.w	r7, [r5, #572]	; 0x23c
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    5b16:	movs	r0, #1
    5b18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5b1c:	ldr	r6, [r0, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5b1e:	ldr.w	r1, [r0, #568]	; 0x238

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5b22:	ldrb.w	r3, [r0, #560]	; 0x230

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5b26:	add.w	r6, r6, r5, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5b2a:	cmp	r1, r6
    5b2c:	beq.n	5b6c <FatPartition::fatPut(unsigned long, unsigned long)+0xb4>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5b2e:	lsls	r0, r3, #31
    5b30:	bmi.n	5b9a <FatPartition::fatPut(unsigned long, unsigned long)+0xe2>
    5b32:	add.w	r8, r4, #572	; 0x23c
    5b36:	ldr.w	r3, [r4, #564]	; 0x234
    5b3a:	ldr	r0, [r3, #0]
    5b3c:	ldr	r3, [r0, #0]
    5b3e:	mov	r2, r8
    5b40:	ldr	r3, [r3, #8]
    5b42:	mov	r1, r6
    5b44:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5b46:	cmp	r0, #0
    5b48:	beq.n	5acc <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5b4a:	str.w	r6, [r4, #568]	; 0x238
    5b4e:	movs	r3, #3
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5b50:	and.w	r5, r5, #127	; 0x7f
    5b54:	add.w	r5, r4, r5, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    5b58:	strb.w	r3, [r4, #560]	; 0x230
    5b5c:	str.w	r7, [r5, #572]	; 0x23c
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    5b60:	movs	r0, #1
    5b62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b66:	orr.w	r3, r3, #3
    5b6a:	b.n	5b08 <FatPartition::fatPut(unsigned long, unsigned long)+0x50>
    5b6c:	orr.w	r3, r3, #3
    5b70:	b.n	5b50 <FatPartition::fatPut(unsigned long, unsigned long)+0x98>
    5b72:	ldr.w	r3, [r4, #564]	; 0x234
    5b76:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5b78:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5b7a:	add.w	r8, r4, #572	; 0x23c
    5b7e:	ldr	r3, [r3, #24]
    5b80:	mov	r2, r8
    5b82:	blx	r3
    5b84:	cmp	r0, #0
    5b86:	beq.n	5acc <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5b88:	ldrb.w	r3, [r4, #560]	; 0x230
    5b8c:	lsls	r2, r3, #30
    5b8e:	bmi.n	5bc2 <FatPartition::fatPut(unsigned long, unsigned long)+0x10a>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5b90:	bic.w	r3, r3, #1
    5b94:	strb.w	r3, [r4, #560]	; 0x230
    5b98:	b.n	5aee <FatPartition::fatPut(unsigned long, unsigned long)+0x36>
    5b9a:	ldr.w	r3, [r4, #564]	; 0x234
    5b9e:	ldr	r0, [r3, #0]
    5ba0:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5ba2:	add.w	r8, r4, #572	; 0x23c
    5ba6:	ldr	r3, [r3, #24]
    5ba8:	mov	r2, r8
    5baa:	blx	r3
    5bac:	cmp	r0, #0
    5bae:	beq.n	5acc <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5bb0:	ldrb.w	r3, [r4, #560]	; 0x230
    5bb4:	lsls	r2, r3, #30
    5bb6:	bmi.n	5be4 <FatPartition::fatPut(unsigned long, unsigned long)+0x12c>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5bb8:	bic.w	r3, r3, #1
    5bbc:	strb.w	r3, [r4, #560]	; 0x230
    5bc0:	b.n	5b36 <FatPartition::fatPut(unsigned long, unsigned long)+0x7e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5bc2:	ldr.w	r3, [r4, #564]	; 0x234
    5bc6:	ldr.w	r2, [r4, #568]	; 0x238
    5bca:	ldr	r0, [r3, #0]
    5bcc:	ldr	r1, [r3, #16]
    5bce:	ldr	r3, [r0, #0]
    5bd0:	add	r1, r2
    5bd2:	ldr	r3, [r3, #24]
    5bd4:	mov	r2, r8
    5bd6:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5bd8:	cmp	r0, #0
    5bda:	beq.w	5acc <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
    5bde:	ldrb.w	r3, [r4, #560]	; 0x230
    5be2:	b.n	5b90 <FatPartition::fatPut(unsigned long, unsigned long)+0xd8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5be4:	ldr.w	r3, [r4, #564]	; 0x234
    5be8:	ldr.w	r2, [r4, #568]	; 0x238
    5bec:	ldr	r0, [r3, #0]
    5bee:	ldr	r1, [r3, #16]
    5bf0:	ldr	r3, [r0, #0]
    5bf2:	add	r1, r2
    5bf4:	ldr	r3, [r3, #24]
    5bf6:	mov	r2, r8
    5bf8:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5bfa:	cmp	r0, #0
    5bfc:	beq.w	5acc <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
    5c00:	ldrb.w	r3, [r4, #560]	; 0x230
    5c04:	b.n	5bb8 <FatPartition::fatPut(unsigned long, unsigned long)+0x100>
    5c06:	nop

00005c08 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    5c08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c0c:	mov	r4, r0
    5c0e:	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
    5c10:	mov	r7, r1
    5c12:	cmp	r1, #0
    5c14:	bne.w	5d20 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x118>
    5c18:	ldr	r6, [r0, #12]
    5c1a:	ldr	r3, [r4, #28]
    5c1c:	mov	r5, r6
    5c1e:	b.n	5c62 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5a>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5c20:	ldrb.w	r3, [r4, #560]	; 0x230
    5c24:	lsls	r0, r3, #31
    5c26:	bmi.n	5ca6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x9e>
    5c28:	add.w	sl, r4, #572	; 0x23c
    5c2c:	ldr.w	r3, [r4, #564]	; 0x234
    5c30:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5c32:	ldr	r3, [r0, #0]
    5c34:	mov	r2, sl
    5c36:	ldr	r3, [r3, #8]
    5c38:	mov	r1, r9
    5c3a:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5c3c:	cbz	r0, 5c9e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    5c3e:	ldr	r3, [r4, #28]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5c40:	str.w	r9, [r4, #568]	; 0x238
    5c44:	movs	r1, #2
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5c46:	uxtb	r2, r5
    5c48:	add.w	r2, r4, r2, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    5c4c:	strb.w	r1, [r4, #560]	; 0x230
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    5c50:	ldrh.w	r2, [r2, #572]	; 0x23c
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    5c54:	cmp	r2, r3
    5c56:	bhi.n	5c5e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
    int8_t fg = fatGet(find, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    5c58:	cmp	r2, #0
    5c5a:	beq.w	5d8c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x184>
      break;
    }
    if (find == start) {
    5c5e:	cmp	r5, r6
    5c60:	beq.n	5c9e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    5c62:	ldrb	r2, [r4, #7]
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
    5c64:	adds	r5, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
    5c66:	cmp	r5, r3
    5c68:	it	hi
    5c6a:	movhi	r5, #2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5c6c:	cmp	r2, #32
    5c6e:	beq.n	5cce <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xc6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5c70:	cmp	r2, #16
    5c72:	bne.n	5c9e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5c74:	ldr	r2, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5c76:	ldr.w	r1, [r4, #568]	; 0x238
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5c7a:	ubfx	r9, r5, #8, #8
    5c7e:	add	r9, r2
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5c80:	cmp	r9, r1
    5c82:	bne.n	5c20 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    5c84:	ldrb.w	r1, [r4, #560]	; 0x230
    5c88:	orr.w	r1, r1, #2
    5c8c:	b.n	5c46 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // link clusters
    if (!fatPut(current, find)) {
    5c8e:	mov	r1, r7
    5c90:	mov	r0, r4
    5c92:	mov	r2, r5
    5c94:	bl	5ab8 <FatPartition::fatPut(unsigned long, unsigned long)>
    5c98:	cmp	r0, #0
    5c9a:	bne.w	5da8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x1a0>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    5c9e:	movs	r6, #0
}
    5ca0:	mov	r0, r6
    5ca2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ca6:	ldr.w	r3, [r4, #564]	; 0x234
    5caa:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5cac:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5cae:	add.w	sl, r4, #572	; 0x23c
    5cb2:	ldr	r3, [r3, #24]
    5cb4:	mov	r2, sl
    5cb6:	blx	r3
    5cb8:	cmp	r0, #0
    5cba:	beq.n	5c9e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5cbc:	ldrb.w	r3, [r4, #560]	; 0x230
    5cc0:	lsls	r2, r3, #30
    5cc2:	bmi.n	5d4c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x144>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5cc4:	bic.w	r3, r3, #1
    5cc8:	strb.w	r3, [r4, #560]	; 0x230
    5ccc:	b.n	5c2c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5cce:	ldr	r2, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5cd0:	ldr.w	r1, [r4, #568]	; 0x238

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5cd4:	add.w	r9, r2, r5, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5cd8:	cmp	r1, r9
    5cda:	beq.n	5d16 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10e>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5cdc:	ldrb.w	r3, [r4, #560]	; 0x230
    5ce0:	lsls	r0, r3, #31
    5ce2:	bmi.n	5d24 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x11c>
    5ce4:	add.w	sl, r4, #572	; 0x23c
    5ce8:	ldr.w	r3, [r4, #564]	; 0x234
    5cec:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5cee:	ldr	r3, [r0, #0]
    5cf0:	mov	r2, sl
    5cf2:	ldr	r3, [r3, #8]
    5cf4:	mov	r1, r9
    5cf6:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5cf8:	cmp	r0, #0
    5cfa:	beq.n	5c9e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    5cfc:	ldr	r3, [r4, #28]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5cfe:	str.w	r9, [r4, #568]	; 0x238
    5d02:	movs	r1, #2
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5d04:	and.w	r2, r5, #127	; 0x7f
    5d08:	add.w	r2, r4, r2, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    5d0c:	strb.w	r1, [r4, #560]	; 0x230
    5d10:	ldr.w	r2, [r2, #572]	; 0x23c
    5d14:	b.n	5c54 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4c>
    5d16:	ldrb.w	r1, [r4, #560]	; 0x230
    5d1a:	orr.w	r1, r1, #2
    5d1e:	b.n	5d04 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xfc>
    5d20:	mov	r6, r1
    5d22:	b.n	5c1a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x12>
    5d24:	ldr.w	r3, [r4, #564]	; 0x234
    5d28:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5d2a:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5d2c:	add.w	sl, r4, #572	; 0x23c
    5d30:	ldr	r3, [r3, #24]
    5d32:	mov	r2, sl
    5d34:	blx	r3
    5d36:	cmp	r0, #0
    5d38:	beq.n	5c9e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5d3a:	ldrb.w	r3, [r4, #560]	; 0x230
    5d3e:	lsls	r2, r3, #30
    5d40:	bmi.n	5d6c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x164>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5d42:	bic.w	r3, r3, #1
    5d46:	strb.w	r3, [r4, #560]	; 0x230
    5d4a:	b.n	5ce8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xe0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5d4c:	ldr.w	r3, [r4, #564]	; 0x234
    5d50:	ldr.w	r2, [r4, #568]	; 0x238
    5d54:	ldr	r0, [r3, #0]
    5d56:	ldr	r1, [r3, #16]
    5d58:	ldr	r3, [r0, #0]
    5d5a:	add	r1, r2
    5d5c:	ldr	r3, [r3, #24]
    5d5e:	mov	r2, sl
    5d60:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5d62:	cmp	r0, #0
    5d64:	beq.n	5c9e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    5d66:	ldrb.w	r3, [r4, #560]	; 0x230
    5d6a:	b.n	5cc4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xbc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5d6c:	ldr.w	r3, [r4, #564]	; 0x234
    5d70:	ldr.w	r2, [r4, #568]	; 0x238
    5d74:	ldr	r0, [r3, #0]
    5d76:	ldr	r1, [r3, #16]
    5d78:	ldr	r3, [r0, #0]
    5d7a:	add	r1, r2
    5d7c:	ldr	r3, [r3, #24]
    5d7e:	mov	r2, sl
    5d80:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5d82:	cmp	r0, #0
    5d84:	beq.n	5c9e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    5d86:	ldrb.w	r3, [r4, #560]	; 0x230
    5d8a:	b.n	5d42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x13a>
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5d8c:	mvn.w	r2, #4026531840	; 0xf0000000
    5d90:	mov	r1, r5
    5d92:	mov	r0, r4
    5d94:	bl	5ab8 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
    5d98:	mov	r6, r0
    5d9a:	cmp	r0, #0
    5d9c:	beq.w	5c9e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    5da0:	cmp	r7, #0
    5da2:	bne.w	5c8e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x86>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
    5da6:	str	r5, [r4, #12]
  }
  updateFreeClusterCount(-1);
  *next = find;
    5da8:	str.w	r5, [r8]
  return true;

fail:
  return false;
}
    5dac:	mov	r0, r6
    5dae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5db2:	nop

00005db4 <FatPartition::allocContiguous(unsigned long, unsigned long*)>:
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    5db4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  uint32_t startCluster = m_allocSearchStart;
    5db8:	ldr.w	r8, [r0, #12]
    5dbc:	ldr	r3, [r0, #28]
fail:
  return false;
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    5dbe:	sub	sp, #12
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  uint32_t startCluster = m_allocSearchStart;
  endCluster = bgnCluster = startCluster + 1;
    5dc0:	add.w	r7, r8, #1
fail:
  return false;
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    5dc4:	str	r2, [sp, #4]
    5dc6:	mov	r4, r0
    5dc8:	mov	fp, r1
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  uint32_t startCluster = m_allocSearchStart;
  endCluster = bgnCluster = startCluster + 1;
    5dca:	mov	r2, r7
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
  // flag to save place to start next search
  bool setStart = true;
    5dcc:	mov.w	sl, #1
    5dd0:	b.n	5de4 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x30>
    int8_t fg = fatGet(endCluster, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    5dd2:	cmp	r2, #0
    5dd4:	bne.n	5e42 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x8e>
    5dd6:	adds	r2, r6, #1

      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
    } else if ((endCluster - bgnCluster + 1) == count) {
    5dd8:	subs	r1, r2, r7
    5dda:	cmp	r1, fp
    5ddc:	beq.w	5f44 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x190>
      // done - found space
      break;
    }
    // Can't find space if all clusters checked.
    if (startCluster == endCluster) {
    5de0:	cmp	r6, r8
    5de2:	beq.n	5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
  endCluster = bgnCluster = startCluster + 1;

  // search the FAT for free clusters
  while (1) {
    // If past end - start from beginning of FAT.
    if (endCluster > m_lastCluster) {
    5de4:	cmp	r2, r3
    5de6:	it	ls
    5de8:	movls	r6, r2
    5dea:	ldrb	r2, [r4, #7]
      bgnCluster = endCluster = 2;
    5dec:	itt	hi
    5dee:	movhi	r7, #2
    5df0:	movhi	r6, r7
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5df2:	cmp	r2, #32
    5df4:	beq.n	5e8a <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xd6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5df6:	cmp	r2, #16
    5df8:	bne.n	5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5dfa:	ldr	r2, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5dfc:	ldr.w	r1, [r4, #568]	; 0x238
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5e00:	ubfx	r5, r6, #8, #8
    5e04:	add	r5, r2
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5e06:	cmp	r5, r1
    5e08:	beq.n	5e58 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa4>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5e0a:	ldrb.w	r3, [r4, #560]	; 0x230
    5e0e:	lsls	r0, r3, #31
    5e10:	bmi.n	5e62 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xae>
    5e12:	add.w	r9, r4, #572	; 0x23c
    5e16:	ldr.w	r3, [r4, #564]	; 0x234
    5e1a:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5e1c:	ldr	r3, [r0, #0]
    5e1e:	mov	r2, r9
    5e20:	ldr	r3, [r3, #8]
    5e22:	mov	r1, r5
    5e24:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5e26:	cbz	r0, 5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    5e28:	ldr	r3, [r4, #28]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5e2a:	str.w	r5, [r4, #568]	; 0x238
    5e2e:	movs	r1, #2
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5e30:	uxtb	r2, r6
    5e32:	add.w	r2, r4, r2, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    5e36:	strb.w	r1, [r4, #560]	; 0x230
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    5e3a:	ldrh.w	r2, [r2, #572]	; 0x23c
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    5e3e:	cmp	r2, r3
    5e40:	bls.n	5dd2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    5e42:	adds	r7, r6, #1
    } else if ((endCluster - bgnCluster + 1) == count) {
      // done - found space
      break;
    }
    // Can't find space if all clusters checked.
    if (startCluster == endCluster) {
    5e44:	cmp	r6, r8
    5e46:	mov	r2, r7
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;

      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
    5e48:	mov.w	sl, #0
    } else if ((endCluster - bgnCluster + 1) == count) {
      // done - found space
      break;
    }
    // Can't find space if all clusters checked.
    if (startCluster == endCluster) {
    5e4c:	bne.n	5de4 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x30>
  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;

fail:
  return false;
    5e4e:	movs	r5, #0
}
    5e50:	mov	r0, r5
    5e52:	add	sp, #12
    5e54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e58:	ldrb.w	r1, [r4, #560]	; 0x230
    5e5c:	orr.w	r1, r1, #2
    5e60:	b.n	5e30 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x7c>
    5e62:	ldr.w	r3, [r4, #564]	; 0x234
    5e66:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5e68:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5e6a:	add.w	r9, r4, #572	; 0x23c
    5e6e:	ldr	r3, [r3, #24]
    5e70:	mov	r2, r9
    5e72:	blx	r3
    5e74:	cmp	r0, #0
    5e76:	beq.n	5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5e78:	ldrb.w	r3, [r4, #560]	; 0x230
    5e7c:	lsls	r2, r3, #30
    5e7e:	bmi.n	5f04 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x150>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5e80:	bic.w	r3, r3, #1
    5e84:	strb.w	r3, [r4, #560]	; 0x230
    5e88:	b.n	5e16 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x62>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5e8a:	ldr	r5, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5e8c:	ldr.w	r1, [r4, #568]	; 0x238

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5e90:	add.w	r5, r5, r6, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5e94:	cmp	r1, r5
    5e96:	beq.n	5ed2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x11e>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5e98:	ldrb.w	r3, [r4, #560]	; 0x230
    5e9c:	lsls	r0, r3, #31
    5e9e:	bmi.n	5edc <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x128>
    5ea0:	add.w	r9, r4, #572	; 0x23c
    5ea4:	ldr.w	r3, [r4, #564]	; 0x234
    5ea8:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5eaa:	ldr	r3, [r0, #0]
    5eac:	mov	r2, r9
    5eae:	ldr	r3, [r3, #8]
    5eb0:	mov	r1, r5
    5eb2:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5eb4:	cmp	r0, #0
    5eb6:	beq.n	5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    5eb8:	ldr	r3, [r4, #28]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5eba:	str.w	r5, [r4, #568]	; 0x238
    5ebe:	movs	r1, #2
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5ec0:	and.w	r2, r6, #127	; 0x7f
    5ec4:	add.w	r2, r4, r2, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    5ec8:	strb.w	r1, [r4, #560]	; 0x230
    5ecc:	ldr.w	r2, [r2, #572]	; 0x23c
    5ed0:	b.n	5e3e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x8a>
    5ed2:	ldrb.w	r1, [r4, #560]	; 0x230
    5ed6:	orr.w	r1, r1, #2
    5eda:	b.n	5ec0 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x10c>
    5edc:	ldr.w	r3, [r4, #564]	; 0x234
    5ee0:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5ee2:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5ee4:	add.w	r9, r4, #572	; 0x23c
    5ee8:	ldr	r3, [r3, #24]
    5eea:	mov	r2, r9
    5eec:	blx	r3
    5eee:	cmp	r0, #0
    5ef0:	beq.n	5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5ef2:	ldrb.w	r3, [r4, #560]	; 0x230
    5ef6:	lsls	r2, r3, #30
    5ef8:	bmi.n	5f24 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x170>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5efa:	bic.w	r3, r3, #1
    5efe:	strb.w	r3, [r4, #560]	; 0x230
    5f02:	b.n	5ea4 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xf0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5f04:	ldr.w	r3, [r4, #564]	; 0x234
    5f08:	ldr.w	r2, [r4, #568]	; 0x238
    5f0c:	ldr	r0, [r3, #0]
    5f0e:	ldr	r1, [r3, #16]
    5f10:	ldr	r3, [r0, #0]
    5f12:	add	r1, r2
    5f14:	ldr	r3, [r3, #24]
    5f16:	mov	r2, r9
    5f18:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5f1a:	cmp	r0, #0
    5f1c:	beq.n	5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    5f1e:	ldrb.w	r3, [r4, #560]	; 0x230
    5f22:	b.n	5e80 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xcc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5f24:	ldr.w	r3, [r4, #564]	; 0x234
    5f28:	ldr.w	r2, [r4, #568]	; 0x238
    5f2c:	ldr	r0, [r3, #0]
    5f2e:	ldr	r1, [r3, #16]
    5f30:	ldr	r3, [r0, #0]
    5f32:	add	r1, r2
    5f34:	ldr	r3, [r3, #24]
    5f36:	mov	r2, r9
    5f38:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5f3a:	cmp	r0, #0
    5f3c:	beq.n	5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    5f3e:	ldrb.w	r3, [r4, #560]	; 0x230
    5f42:	b.n	5efa <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x146>
      goto fail;
    }
    endCluster++;
  }
  // remember possible next free cluster
  if (setStart) {
    5f44:	cmp.w	sl, #0
    5f48:	beq.n	5f4c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x198>
    m_allocSearchStart = endCluster + 1;
    5f4a:	str	r2, [r4, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5f4c:	mvn.w	r2, #4026531840	; 0xf0000000
    5f50:	mov	r1, r6
    5f52:	mov	r0, r4
    5f54:	bl	5ab8 <FatPartition::fatPut(unsigned long, unsigned long)>
  }

  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    5f58:	mov	r5, r0
    5f5a:	cmp	r0, #0
    5f5c:	beq.w	5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    5f60:	cmp	r7, r6
    5f62:	bcs.n	6018 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x264>
    5f64:	ldrb	r3, [r4, #7]
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5f66:	cmp	r3, #32
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) {
    5f68:	add.w	r8, r6, #4294967295
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    5f6c:	beq.n	5fc4 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x210>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    5f6e:	cmp	r3, #16
    5f70:	bne.w	5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5f74:	ldr	r3, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5f76:	ldr.w	r1, [r4, #568]	; 0x238
    return true;
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5f7a:	ubfx	r6, r8, #8, #8
    5f7e:	add	r6, r3
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5f80:	cmp	r6, r1
    5f82:	beq.n	600e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x25a>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5f84:	ldrb.w	r3, [r4, #560]	; 0x230
    5f88:	lsls	r0, r3, #31
    5f8a:	bmi.n	6028 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x274>
    5f8c:	add.w	r9, r4, #572	; 0x23c
    5f90:	ldr.w	r3, [r4, #564]	; 0x234
    5f94:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5f96:	ldr	r3, [r0, #0]
    5f98:	mov	r2, r9
    5f9a:	ldr	r3, [r3, #8]
    5f9c:	mov	r1, r6
    5f9e:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5fa0:	cmp	r0, #0
    5fa2:	beq.w	5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5fa6:	str.w	r6, [r4, #568]	; 0x238
    5faa:	movs	r1, #3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5fac:	uxtb.w	r3, r8
    5fb0:	add.w	r3, r4, r3, lsl #1
    5fb4:	add.w	r2, r8, #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    5fb8:	strb.w	r1, [r4, #560]	; 0x230
    5fbc:	mov	r6, r8
    5fbe:	strh.w	r2, [r3, #572]	; 0x23c
    5fc2:	b.n	5f60 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1ac>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5fc4:	ldr	r3, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5fc6:	ldr.w	r1, [r4, #568]	; 0x238

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5fca:	add.w	r9, r3, r8, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    5fce:	cmp	r9, r1
    5fd0:	beq.n	601e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x26a>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5fd2:	ldrb.w	r3, [r4, #560]	; 0x230
    5fd6:	lsls	r0, r3, #31
    5fd8:	bmi.n	6052 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x29e>
    5fda:	add.w	sl, r4, #572	; 0x23c
    5fde:	ldr.w	r3, [r4, #564]	; 0x234
    5fe2:	ldr	r0, [r3, #0]
    5fe4:	ldr	r3, [r0, #0]
    5fe6:	mov	r2, sl
    5fe8:	ldr	r3, [r3, #8]
    5fea:	mov	r1, r9
    5fec:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5fee:	cmp	r0, #0
    5ff0:	beq.w	5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5ff4:	str.w	r9, [r4, #568]	; 0x238
    5ff8:	movs	r2, #3
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5ffa:	and.w	r3, r8, #127	; 0x7f
    5ffe:	add.w	r3, r4, r3, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    6002:	strb.w	r2, [r4, #560]	; 0x230
    6006:	str.w	r6, [r3, #572]	; 0x23c
    600a:	mov	r6, r8
    600c:	b.n	5f60 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1ac>
    600e:	ldrb.w	r1, [r4, #560]	; 0x230
    6012:	orr.w	r1, r1, #3
    6016:	b.n	5fac <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1f8>
  }
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
    6018:	ldr	r3, [sp, #4]
    601a:	str	r7, [r3, #0]
  return true;
    601c:	b.n	5e50 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9c>
    601e:	ldrb.w	r2, [r4, #560]	; 0x230
    6022:	orr.w	r2, r2, #3
    6026:	b.n	5ffa <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x246>
    6028:	ldr.w	r3, [r4, #564]	; 0x234
    602c:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    602e:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    6030:	add.w	r9, r4, #572	; 0x23c
    6034:	ldr	r3, [r3, #24]
    6036:	mov	r2, r9
    6038:	blx	r3
    603a:	cmp	r0, #0
    603c:	beq.w	5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6040:	ldrb.w	r3, [r4, #560]	; 0x230
    6044:	lsls	r2, r3, #30
    6046:	bmi.n	607c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x2c8>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6048:	bic.w	r3, r3, #1
    604c:	strb.w	r3, [r4, #560]	; 0x230
    6050:	b.n	5f90 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1dc>
    6052:	ldr.w	r3, [r4, #564]	; 0x234
    6056:	ldr	r0, [r3, #0]
    6058:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    605a:	add.w	sl, r4, #572	; 0x23c
    605e:	ldr	r3, [r3, #24]
    6060:	mov	r2, sl
    6062:	blx	r3
    6064:	cmp	r0, #0
    6066:	beq.w	5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    606a:	ldrb.w	r3, [r4, #560]	; 0x230
    606e:	lsls	r2, r3, #30
    6070:	bmi.n	609e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x2ea>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6072:	bic.w	r3, r3, #1
    6076:	strb.w	r3, [r4, #560]	; 0x230
    607a:	b.n	5fde <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x22a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    607c:	ldr.w	r3, [r4, #564]	; 0x234
    6080:	ldr.w	r2, [r4, #568]	; 0x238
    6084:	ldr	r0, [r3, #0]
    6086:	ldr	r1, [r3, #16]
    6088:	ldr	r3, [r0, #0]
    608a:	add	r1, r2
    608c:	ldr	r3, [r3, #24]
    608e:	mov	r2, r9
    6090:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    6092:	cmp	r0, #0
    6094:	beq.w	5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    6098:	ldrb.w	r3, [r4, #560]	; 0x230
    609c:	b.n	6048 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x294>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    609e:	ldr.w	r3, [r4, #564]	; 0x234
    60a2:	ldr.w	r2, [r4, #568]	; 0x238
    60a6:	ldr	r0, [r3, #0]
    60a8:	ldr	r1, [r3, #16]
    60aa:	ldr	r3, [r0, #0]
    60ac:	add	r1, r2
    60ae:	ldr	r3, [r3, #24]
    60b0:	mov	r2, sl
    60b2:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    60b4:	cmp	r0, #0
    60b6:	beq.w	5e4e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x9a>
    60ba:	ldrb.w	r3, [r4, #560]	; 0x230
    60be:	b.n	6072 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x2be>

000060c0 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    60c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    60c4:	mov	r4, r0
    60c6:	mov	r5, r1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    60c8:	mov.w	r8, #0
    60cc:	ldrb	r3, [r4, #7]
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    60ce:	cmp	r3, #32
    60d0:	beq.n	61c4 <FatPartition::freeChain(unsigned long)+0x104>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    60d2:	cmp	r3, #16
    60d4:	bne.n	612e <FatPartition::freeChain(unsigned long)+0x6e>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    60d6:	ldr	r2, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    60d8:	ldr.w	r1, [r4, #568]	; 0x238
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    60dc:	ubfx	r6, r5, #8, #8
    60e0:	add	r6, r2
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    60e2:	cmp	r6, r1
    60e4:	beq.n	6134 <FatPartition::freeChain(unsigned long)+0x74>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    60e6:	ldrb.w	r3, [r4, #560]	; 0x230
    60ea:	lsls	r0, r3, #31
    60ec:	bmi.n	619a <FatPartition::freeChain(unsigned long)+0xda>
    60ee:	add.w	r9, r4, #572	; 0x23c
    60f2:	ldr.w	r3, [r4, #564]	; 0x234
    60f6:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    60f8:	ldr	r3, [r0, #0]
    60fa:	mov	r2, r9
    60fc:	ldr	r3, [r3, #8]
    60fe:	mov	r1, r6
    6100:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6102:	cbz	r0, 612e <FatPartition::freeChain(unsigned long)+0x6e>
    6104:	ldrb	r3, [r4, #7]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    6106:	str.w	r6, [r4, #568]	; 0x238
    610a:	movs	r1, #2
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    610c:	uxtb	r2, r5
    610e:	add.w	r2, r4, r2, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    6112:	strb.w	r1, [r4, #560]	; 0x230
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    6116:	ldrh.w	r2, [r2, #572]	; 0x23c
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    611a:	ldr	r1, [r4, #28]
    return 0;
    611c:	cmp	r1, r2
    611e:	itte	cs
    6120:	movcs	r7, r2
    6122:	movcs	r6, #1
    6124:	movcc	r6, #0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    6126:	cmp	r3, #32
    6128:	beq.n	620c <FatPartition::freeChain(unsigned long)+0x14c>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    612a:	cmp	r3, #16
    612c:	beq.n	613e <FatPartition::freeChain(unsigned long)+0x7e>
  } while (fg);

  return true;

fail:
  return false;
    612e:	movs	r0, #0
    6130:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6134:	ldrb.w	r1, [r4, #560]	; 0x230
    6138:	orr.w	r1, r1, #2
    613c:	b.n	610c <FatPartition::freeChain(unsigned long)+0x4c>
    return true;
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    613e:	ldr	r3, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6140:	ldr.w	r1, [r4, #568]	; 0x238
    return true;
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    6144:	ubfx	r9, r5, #8, #8
    6148:	add	r9, r3
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    614a:	cmp	r9, r1
    614c:	beq.w	6254 <FatPartition::freeChain(unsigned long)+0x194>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6150:	ldrb.w	r3, [r4, #560]	; 0x230
    6154:	lsls	r0, r3, #31
    6156:	bmi.w	6272 <FatPartition::freeChain(unsigned long)+0x1b2>
    615a:	add.w	sl, r4, #572	; 0x23c
    615e:	ldr.w	r3, [r4, #564]	; 0x234
    6162:	ldr	r0, [r3, #0]
    6164:	ldr	r3, [r0, #0]
    6166:	mov	r2, sl
    6168:	ldr	r3, [r3, #8]
    616a:	mov	r1, r9
    616c:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    616e:	cmp	r0, #0
    6170:	beq.n	612e <FatPartition::freeChain(unsigned long)+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    6172:	str.w	r9, [r4, #568]	; 0x238
    6176:	movs	r2, #3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6178:	uxtb	r3, r5
    617a:	add.w	r3, r4, r3, lsl #1
  }
  m_status |= option & CACHE_STATUS_MASK;
    617e:	strb.w	r2, [r4, #560]	; 0x230
    6182:	strh.w	r8, [r3, #572]	; 0x23c
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
    6186:	ldr	r3, [r4, #12]
    6188:	cmp	r5, r3
    618a:	bcs.n	618e <FatPartition::freeChain(unsigned long)+0xce>
      m_allocSearchStart = cluster;
    618c:	str	r5, [r4, #12]
    618e:	mov	r5, r7
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    6190:	cmp	r6, #0
    6192:	bne.n	60cc <FatPartition::freeChain(unsigned long)+0xc>
      m_allocSearchStart = cluster;
    }
    cluster = next;
  } while (fg);

  return true;
    6194:	movs	r0, #1
    6196:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    619a:	ldr.w	r3, [r4, #564]	; 0x234
    619e:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    61a0:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    61a2:	add.w	r9, r4, #572	; 0x23c
    61a6:	ldr	r3, [r3, #24]
    61a8:	mov	r2, r9
    61aa:	blx	r3
    61ac:	cmp	r0, #0
    61ae:	beq.n	612e <FatPartition::freeChain(unsigned long)+0x6e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    61b0:	ldrb.w	r3, [r4, #560]	; 0x230
    61b4:	lsls	r2, r3, #30
    61b6:	bmi.w	62f0 <FatPartition::freeChain(unsigned long)+0x230>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    61ba:	bic.w	r3, r3, #1
    61be:	strb.w	r3, [r4, #560]	; 0x230
    61c2:	b.n	60f2 <FatPartition::freeChain(unsigned long)+0x32>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    61c4:	ldr	r6, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    61c6:	ldr.w	r1, [r4, #568]	; 0x238

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    61ca:	add.w	r6, r6, r5, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    61ce:	cmp	r1, r6
    61d0:	beq.n	625e <FatPartition::freeChain(unsigned long)+0x19e>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    61d2:	ldrb.w	r3, [r4, #560]	; 0x230
    61d6:	lsls	r0, r3, #31
    61d8:	bmi.n	629c <FatPartition::freeChain(unsigned long)+0x1dc>
    61da:	add.w	r9, r4, #572	; 0x23c
    61de:	ldr.w	r3, [r4, #564]	; 0x234
    61e2:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    61e4:	ldr	r3, [r0, #0]
    61e6:	mov	r2, r9
    61e8:	ldr	r3, [r3, #8]
    61ea:	mov	r1, r6
    61ec:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    61ee:	cmp	r0, #0
    61f0:	beq.n	612e <FatPartition::freeChain(unsigned long)+0x6e>
    61f2:	ldrb	r3, [r4, #7]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    61f4:	str.w	r6, [r4, #568]	; 0x238
    61f8:	movs	r1, #2
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    61fa:	and.w	r2, r5, #127	; 0x7f
    61fe:	add.w	r2, r4, r2, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    6202:	strb.w	r1, [r4, #560]	; 0x230
    6206:	ldr.w	r2, [r2, #572]	; 0x23c
    620a:	b.n	611a <FatPartition::freeChain(unsigned long)+0x5a>

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    620c:	ldr	r3, [r4, #24]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    620e:	ldr.w	r1, [r4, #568]	; 0x238

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6212:	add.w	r9, r3, r5, lsr #7
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6216:	cmp	r9, r1
    6218:	beq.n	6268 <FatPartition::freeChain(unsigned long)+0x1a8>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    621a:	ldrb.w	r3, [r4, #560]	; 0x230
    621e:	lsls	r0, r3, #31
    6220:	bmi.n	62c6 <FatPartition::freeChain(unsigned long)+0x206>
    6222:	add.w	sl, r4, #572	; 0x23c
    6226:	ldr.w	r3, [r4, #564]	; 0x234
    622a:	ldr	r0, [r3, #0]
    622c:	ldr	r3, [r0, #0]
    622e:	mov	r2, sl
    6230:	ldr	r3, [r3, #8]
    6232:	mov	r1, r9
    6234:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6236:	cmp	r0, #0
    6238:	beq.w	612e <FatPartition::freeChain(unsigned long)+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    623c:	str.w	r9, [r4, #568]	; 0x238
    6240:	movs	r2, #3
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6242:	and.w	r3, r5, #127	; 0x7f
    6246:	add.w	r3, r4, r3, lsl #2
  }
  m_status |= option & CACHE_STATUS_MASK;
    624a:	strb.w	r2, [r4, #560]	; 0x230
    624e:	str.w	r8, [r3, #572]	; 0x23c
    6252:	b.n	6186 <FatPartition::freeChain(unsigned long)+0xc6>
    6254:	ldrb.w	r2, [r4, #560]	; 0x230
    6258:	orr.w	r2, r2, #3
    625c:	b.n	6178 <FatPartition::freeChain(unsigned long)+0xb8>
    625e:	ldrb.w	r1, [r4, #560]	; 0x230
    6262:	orr.w	r1, r1, #2
    6266:	b.n	61fa <FatPartition::freeChain(unsigned long)+0x13a>
    6268:	ldrb.w	r2, [r4, #560]	; 0x230
    626c:	orr.w	r2, r2, #3
    6270:	b.n	6242 <FatPartition::freeChain(unsigned long)+0x182>
    6272:	ldr.w	r3, [r4, #564]	; 0x234
    6276:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    6278:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    627a:	add.w	sl, r4, #572	; 0x23c
    627e:	ldr	r3, [r3, #24]
    6280:	mov	r2, sl
    6282:	blx	r3
    6284:	cmp	r0, #0
    6286:	beq.w	612e <FatPartition::freeChain(unsigned long)+0x6e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    628a:	ldrb.w	r3, [r4, #560]	; 0x230
    628e:	lsls	r2, r3, #30
    6290:	bmi.n	6312 <FatPartition::freeChain(unsigned long)+0x252>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6292:	bic.w	r3, r3, #1
    6296:	strb.w	r3, [r4, #560]	; 0x230
    629a:	b.n	615e <FatPartition::freeChain(unsigned long)+0x9e>
    629c:	ldr.w	r3, [r4, #564]	; 0x234
    62a0:	ldr	r0, [r3, #0]
    62a2:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    62a4:	add.w	r9, r4, #572	; 0x23c
    62a8:	ldr	r3, [r3, #24]
    62aa:	mov	r2, r9
    62ac:	blx	r3
    62ae:	cmp	r0, #0
    62b0:	beq.w	612e <FatPartition::freeChain(unsigned long)+0x6e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    62b4:	ldrb.w	r3, [r4, #560]	; 0x230
    62b8:	lsls	r2, r3, #30
    62ba:	bmi.n	6334 <FatPartition::freeChain(unsigned long)+0x274>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    62bc:	bic.w	r3, r3, #1
    62c0:	strb.w	r3, [r4, #560]	; 0x230
    62c4:	b.n	61de <FatPartition::freeChain(unsigned long)+0x11e>
    62c6:	ldr.w	r3, [r4, #564]	; 0x234
    62ca:	ldr	r0, [r3, #0]
    62cc:	ldr	r3, [r0, #0]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    62ce:	add.w	sl, r4, #572	; 0x23c
    62d2:	ldr	r3, [r3, #24]
    62d4:	mov	r2, sl
    62d6:	blx	r3
    62d8:	cmp	r0, #0
    62da:	beq.w	612e <FatPartition::freeChain(unsigned long)+0x6e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    62de:	ldrb.w	r3, [r4, #560]	; 0x230
    62e2:	lsls	r2, r3, #30
    62e4:	bmi.n	6356 <FatPartition::freeChain(unsigned long)+0x296>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    62e6:	bic.w	r3, r3, #1
    62ea:	strb.w	r3, [r4, #560]	; 0x230
    62ee:	b.n	6226 <FatPartition::freeChain(unsigned long)+0x166>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    62f0:	ldr.w	r3, [r4, #564]	; 0x234
    62f4:	ldr.w	r2, [r4, #568]	; 0x238
    62f8:	ldr	r0, [r3, #0]
    62fa:	ldr	r1, [r3, #16]
    62fc:	ldr	r3, [r0, #0]
    62fe:	add	r1, r2
    6300:	ldr	r3, [r3, #24]
    6302:	mov	r2, r9
    6304:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    6306:	cmp	r0, #0
    6308:	beq.w	612e <FatPartition::freeChain(unsigned long)+0x6e>
    630c:	ldrb.w	r3, [r4, #560]	; 0x230
    6310:	b.n	61ba <FatPartition::freeChain(unsigned long)+0xfa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    6312:	ldr.w	r3, [r4, #564]	; 0x234
    6316:	ldr.w	r2, [r4, #568]	; 0x238
    631a:	ldr	r0, [r3, #0]
    631c:	ldr	r1, [r3, #16]
    631e:	ldr	r3, [r0, #0]
    6320:	add	r1, r2
    6322:	ldr	r3, [r3, #24]
    6324:	mov	r2, sl
    6326:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    6328:	cmp	r0, #0
    632a:	beq.w	612e <FatPartition::freeChain(unsigned long)+0x6e>
    632e:	ldrb.w	r3, [r4, #560]	; 0x230
    6332:	b.n	6292 <FatPartition::freeChain(unsigned long)+0x1d2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    6334:	ldr.w	r3, [r4, #564]	; 0x234
    6338:	ldr.w	r2, [r4, #568]	; 0x238
    633c:	ldr	r0, [r3, #0]
    633e:	ldr	r1, [r3, #16]
    6340:	ldr	r3, [r0, #0]
    6342:	add	r1, r2
    6344:	ldr	r3, [r3, #24]
    6346:	mov	r2, r9
    6348:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    634a:	cmp	r0, #0
    634c:	beq.w	612e <FatPartition::freeChain(unsigned long)+0x6e>
    6350:	ldrb.w	r3, [r4, #560]	; 0x230
    6354:	b.n	62bc <FatPartition::freeChain(unsigned long)+0x1fc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    6356:	ldr.w	r3, [r4, #564]	; 0x234
    635a:	ldr.w	r2, [r4, #568]	; 0x238
    635e:	ldr	r0, [r3, #0]
    6360:	ldr	r1, [r3, #16]
    6362:	ldr	r3, [r0, #0]
    6364:	add	r1, r2
    6366:	ldr	r3, [r3, #24]
    6368:	mov	r2, sl
    636a:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    636c:	cmp	r0, #0
    636e:	beq.w	612e <FatPartition::freeChain(unsigned long)+0x6e>
    6372:	ldrb.w	r3, [r4, #560]	; 0x230
    6376:	b.n	62e6 <FatPartition::freeChain(unsigned long)+0x226>

00006378 <FatPartition::init(SdCardInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    6378:	push	{r3, r4, r5, r6, r7, lr}
    637a:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    637c:	movs	r5, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    637e:	mov.w	r3, #4294967295
  m_allocSearchStart = 1;
    6382:	movs	r0, #1
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    6384:	str	r4, [r4, #40]	; 0x28
    6386:	str.w	r4, [r4, #564]	; 0x234
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    638a:	str	r1, [r4, #0]
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    638c:	str	r0, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    638e:	strb	r5, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6390:	strb.w	r5, [r4, #36]	; 0x24
    6394:	strb.w	r5, [r4, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
    6398:	str	r3, [r4, #44]	; 0x2c
    639a:	str.w	r3, [r4, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    639e:	mov	r6, r2
    63a0:	cmp	r2, #0
    63a2:	beq.n	644a <FatPartition::init(SdCardInterface*, unsigned char)+0xd2>
    if (part > 4) {
    63a4:	cmp	r2, #4
    63a6:	bls.n	63ac <FatPartition::init(SdCardInterface*, unsigned char)+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    63a8:	movs	r0, #0
    63aa:	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
//------------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    63ac:	ldr	r3, [r1, #0]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    63ae:	add.w	r7, r4, #48	; 0x30
    63b2:	mov	r0, r1
    63b4:	ldr	r3, [r3, #8]
    63b6:	mov	r2, r7
    63b8:	mov	r1, r5
    63ba:	blx	r3
    63bc:	cmp	r0, #0
    63be:	beq.n	63a8 <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    63c0:	add.w	r6, r6, #268435456	; 0x10000000
    63c4:	subs	r6, #1
    63c6:	lsls	r6, r6, #4
    63c8:	add.w	r3, r4, #494	; 0x1ee
    63cc:	adds	r2, r3, r6
      if (!m_part->readSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    63ce:	strb.w	r5, [r4, #36]	; 0x24
    m_lbn = sector;
    63d2:	str	r5, [r4, #44]	; 0x2c
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    63d4:	ldrb	r1, [r2, #4]
    63d6:	cmp	r1, #0
    63d8:	beq.n	63a8 <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
    63da:	ldrb	r3, [r3, r6]
    63dc:	lsls	r3, r3, #25
    63de:	bne.n	63a8 <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    63e0:	ldr	r6, [r2, #8]
#include "../common/FsStructs.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    63e2:	cbz	r6, 63fe <FatPartition::init(SdCardInterface*, unsigned char)+0x86>
    63e4:	ldr	r3, [r4, #40]	; 0x28
    63e6:	ldr	r0, [r3, #0]
    63e8:	ldr	r3, [r0, #0]
    63ea:	mov	r2, r7
    63ec:	ldr	r3, [r3, #8]
    63ee:	mov	r1, r6
    63f0:	blx	r3
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    63f2:	cmp	r0, #0
    63f4:	beq.n	63a8 <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    63f6:	movs	r3, #0
    m_lbn = sector;
    63f8:	str	r6, [r4, #44]	; 0x2c
      if (!m_part->readSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    63fa:	strb.w	r3, [r4, #36]	; 0x24
    volumeStartSector = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    63fe:	ldrb.w	r2, [r4, #64]	; 0x40
    6402:	cmp	r2, #2
    6404:	bne.n	63a8 <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
    6406:	ldrh.w	r3, [r4, #59]	; 0x3b
    640a:	cmp.w	r3, #512	; 0x200
    640e:	bne.n	63a8 <FatPartition::init(SdCardInterface*, unsigned char)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6410:	ldrb.w	r3, [r4, #61]	; 0x3d
    6414:	strb	r3, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6416:	subs	r0, r3, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6418:	movs	r1, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    641a:	cmp	r3, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    641c:	strb	r0, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    641e:	strb	r1, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6420:	beq.n	64ba <FatPartition::init(SdCardInterface*, unsigned char)+0x142>
    6422:	cmp	r3, #2
    6424:	beq.n	64be <FatPartition::init(SdCardInterface*, unsigned char)+0x146>
    6426:	cmp	r3, #4
    6428:	beq.n	6454 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    642a:	cmp	r3, #8
    642c:	beq.n	64c2 <FatPartition::init(SdCardInterface*, unsigned char)+0x14a>
    642e:	cmp	r3, #16
    6430:	beq.n	64c6 <FatPartition::init(SdCardInterface*, unsigned char)+0x14e>
    6432:	cmp	r3, #32
    6434:	beq.n	64ca <FatPartition::init(SdCardInterface*, unsigned char)+0x152>
    6436:	cmp	r3, #64	; 0x40
    6438:	beq.n	64ce <FatPartition::init(SdCardInterface*, unsigned char)+0x156>
    643a:	cmp	r3, #128	; 0x80
    643c:	beq.n	6452 <FatPartition::init(SdCardInterface*, unsigned char)+0xda>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
    643e:	movs	r2, #8
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6440:	cbz	r3, 6454 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    6442:	movs	r3, #8
    6444:	strb	r3, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6446:	movs	r0, #0
    6448:	pop	{r3, r4, r5, r6, r7, pc}
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    644a:	mov	r0, r1
    644c:	add.w	r7, r4, #48	; 0x30
    6450:	b.n	63e8 <FatPartition::init(SdCardInterface*, unsigned char)+0x70>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
    6452:	movs	r2, #7
    6454:	strb	r2, [r4, #6]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6456:	ldrh.w	r0, [r4, #70]	; 0x46
    645a:	str	r0, [r4, #16]
  if (m_sectorsPerFat == 0) {
    645c:	cbnz	r0, 6462 <FatPartition::init(SdCardInterface*, unsigned char)+0xea>
    645e:	ldr	r0, [r4, #84]	; 0x54
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6460:	str	r0, [r4, #16]
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6462:	ldrh.w	r3, [r4, #65]	; 0x41
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6466:	ldrh	r5, [r4, #62]	; 0x3e

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6468:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    646a:	add	r5, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    646c:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    646e:	add.w	r0, r5, r0, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6472:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    6476:	ldrh.w	r1, [r4, #67]	; 0x43

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    647a:	str	r0, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    647c:	add.w	r3, r0, r3, asr #9
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6480:	str	r5, [r4, #24]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    6482:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    6484:	cbnz	r1, 6488 <FatPartition::init(SdCardInterface*, unsigned char)+0x110>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6486:	ldr	r1, [r4, #80]	; 0x50
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    6488:	subs	r6, r6, r3
    648a:	add	r6, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    648c:	lsr.w	r2, r6, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6490:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6494:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6496:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6498:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    649a:	bls.n	64b2 <FatPartition::init(SdCardInterface*, unsigned char)+0x13a>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    649c:	movw	r3, #65524	; 0xfff4
    64a0:	cmp	r2, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    64a2:	ittet	hi
    64a4:	ldrhi	r3, [r4, #92]	; 0x5c
    64a6:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    64a8:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    64aa:	movhi	r3, #32
    64ac:	strb	r3, [r4, #7]
  }
  return true;
    64ae:	movs	r0, #1
    64b0:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    64b2:	movs	r3, #12
    64b4:	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    64b6:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    64b8:	pop	{r3, r4, r5, r6, r7, pc}
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    64ba:	mov	r2, r1
    64bc:	b.n	6456 <FatPartition::init(SdCardInterface*, unsigned char)+0xde>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
    64be:	movs	r2, #1
    64c0:	b.n	6454 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    64c2:	movs	r2, #3
    64c4:	b.n	6454 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    64c6:	movs	r2, #4
    64c8:	b.n	6454 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    64ca:	movs	r2, #5
    64cc:	b.n	6454 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    64ce:	movs	r2, #6
    64d0:	b.n	6454 <FatPartition::init(SdCardInterface*, unsigned char)+0xdc>
    64d2:	nop

000064d4 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    64d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    64d8:	ldrb	r3, [r0, #0]
    64da:	cmp	r3, #32
    64dc:	bne.n	64e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    64de:	ldrb.w	r3, [r0, #1]!
    64e2:	cmp	r3, #32
    64e4:	beq.n	64de <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    64e6:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    64e8:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    64ea:	cmp	r3, #0
    64ec:	beq.w	66f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x222>
    64f0:	cmp	r3, #47	; 0x2f
    64f2:	beq.n	6554 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    64f4:	cmp	r3, #92	; 0x5c
    64f6:	beq.n	653e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    64f8:	sub.w	r4, r3, #34	; 0x22
    64fc:	uxtb	r4, r4
    64fe:	cmp	r4, #29
    6500:	bls.n	6544 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    6502:	ldr.w	lr, [pc, #528]	; 6714 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x240>
    6506:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6508:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    650a:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    650c:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6510:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    6512:	beq.n	653e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    6514:	cmp	r5, #94	; 0x5e
    6516:	bhi.n	653e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6518:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    651c:	sub.w	r5, r3, #34	; 0x22
    6520:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6522:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    6524:	cmp	r3, #0
    6526:	beq.w	66c8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f4>
    652a:	cmp	r3, #47	; 0x2f
    652c:	beq.n	6556 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    652e:	cmp	r3, #92	; 0x5c
    6530:	lsr.w	r7, lr, r5
    6534:	beq.n	653e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6536:	cmp	r5, #29
    6538:	bhi.n	650a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    653a:	lsls	r7, r7, #31
    653c:	bpl.n	650a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    653e:	movs	r0, #0
    6540:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6544:	ldr	r5, [pc, #460]	; (6714 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x240>)
    6546:	lsr.w	r4, r5, r4
    654a:	lsls	r4, r4, #31
    654c:	bpl.n	6502 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    654e:	movs	r0, #0
    6550:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6554:	movs	r4, #0
    6556:	adds	r6, r0, r4
    6558:	mov	r3, r6
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    655a:	mov	r7, r3
    655c:	ldrb.w	r5, [r3], #1
    6560:	cmp	r5, #32
    6562:	beq.n	655a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x86>
    6564:	cmp	r5, #47	; 0x2f
    6566:	beq.n	655a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x86>
  *ptr = &path[end];
    6568:	str	r7, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    656a:	cbz	r4, 6580 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xac>
    656c:	mov	r2, r6
    c = path[len - 1];
    656e:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    6572:	cmp	r3, #46	; 0x2e
    6574:	beq.n	657c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa8>
    6576:	cmp	r3, #32
    6578:	bne.w	66ce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fa>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    657c:	subs	r4, #1
    657e:	bne.n	656e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9a>
    6580:	mov.w	r5, #4294967295
    6584:	mov	r3, r4
    6586:	add.w	r2, r1, #13
    658a:	mov.w	r7, #538976288	; 0x20202020
  }
  // Max length of LFN is 255.
  if (len > 255) {
    return false;
  }
  fname->len = len;
    658e:	str	r3, [r1, #4]
    6590:	str.w	r7, [r1, #13]
    6594:	subs	r6, r0, #1
    6596:	str	r7, [r2, #4]
    6598:	str.w	r7, [r2, #7]
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    659c:	movs	r2, #0
    659e:	b.n	65a2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xce>
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    65a0:	adds	r2, #1
    65a2:	ldrb.w	r3, [r6, #1]!
    65a6:	cmp	r3, #46	; 0x2e
    65a8:	beq.n	65a0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xcc>
    65aa:	cmp	r3, #32
    65ac:	beq.n	65a0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xcc>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    65ae:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    65b2:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    65b4:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    65b8:	beq.n	65d4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x100>
    65ba:	ldrb	r7, [r0, r5]
    65bc:	cmp	r7, #46	; 0x2e
    65be:	add.w	r6, r0, r5
    65c2:	bne.n	65ce <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
    65c4:	b.n	65d4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x100>
    65c6:	ldrb.w	r7, [r6, #-1]!
    65ca:	cmp	r7, #46	; 0x2e
    65cc:	beq.n	65d4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x100>
    65ce:	adds.w	r5, r5, #4294967295
    65d2:	bcs.n	65c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xf2>
  for (; si < len; si++) {
    65d4:	cmp	r2, r4
    65d6:	mov.w	r9, #0
    65da:	bge.w	6700 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22c>
    65de:	mov	r6, r9
    65e0:	mov	sl, r9
    65e2:	movs	r7, #7
    65e4:	mov.w	r8, #8
    65e8:	b.n	6636 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    65ea:	cmp	r3, #46	; 0x2e
    65ec:	beq.n	667e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1aa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    65ee:	cmp	r3, #34	; 0x22
    65f0:	beq.n	660a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x136>
    65f2:	cmp	r3, #124	; 0x7c
    65f4:	beq.n	660a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x136>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    65f6:	sub.w	lr, r3, #42	; 0x2a
    65fa:	cmp.w	lr, #5
    65fe:	bls.n	6692 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1be>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    6600:	sub.w	lr, r3, #58	; 0x3a
    6604:	cmp.w	lr, #5
    6608:	bhi.n	66bc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1e8>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    660a:	cmp	r5, r2
    660c:	beq.n	6682 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    660e:	cmp	r7, r6
    6610:	bcc.n	6666 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x192>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    6612:	mov.w	ip, #0
      c = '_';
    6616:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6618:	add.w	lr, r6, #1
    661c:	add.w	fp, r1, r6
    6620:	uxtb.w	r6, lr
      if (i < 7) {
    6624:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6626:	strb.w	r3, [fp, #13]
      if (i < 7) {
    662a:	bhi.n	662e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15a>
        fname->seqPos = i;
    662c:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    662e:	adds	r2, #1
    6630:	cmp	r2, r4
    6632:	bge.n	6644 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x170>
    6634:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    6636:	cmp	r3, #32
    6638:	bne.n	65ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x116>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    663a:	adds	r2, #1
    663c:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    663e:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6642:	blt.n	6634 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    6644:	ldrb	r3, [r1, #13]
    6646:	cmp	r3, #32
    6648:	beq.w	653e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    return false;
  }

  if (is83) {
    664c:	cmp.w	ip, #0
    6650:	beq.n	66e2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    6652:	tst.w	sl, r9
    6656:	it	ne
    6658:	movne.w	r9, #2
    665c:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    6660:	movs	r0, #1
    6662:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    6666:	cmp	r7, #10
    6668:	beq.n	66da <FatFile::parsePathName(char const*, fname_t*, char const**)+0x206>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    666a:	cmp	r5, r2
    666c:	blt.n	66da <FatFile::parsePathName(char const*, fname_t*, char const**)+0x206>
    666e:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    6670:	movs	r7, #10
      i = 8;    // Place for extension.
    6672:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    6674:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    6678:	mov.w	ip, #0
    667c:	b.n	662e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15a>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    667e:	cmp	r5, r2
    6680:	bne.n	663a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x166>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    6682:	cmp	r7, #10
    6684:	beq.n	66da <FatFile::parsePathName(char const*, fname_t*, char const**)+0x206>
    6686:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    6688:	movs	r7, #10
      i = 8;    // Place for extension.
    668a:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    668c:	mov.w	r8, #16
    6690:	b.n	662e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15a>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    6692:	cmp	r3, #45	; 0x2d
    6694:	bne.n	660a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x136>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    6696:	sub.w	lr, r3, #33	; 0x21
    669a:	cmp.w	lr, #93	; 0x5d
    669e:	bhi.n	660a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x136>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    66a0:	cmp	r5, r2
    66a2:	beq.n	6682 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
    66a4:	cmp	r7, r6
    66a6:	bcc.n	6666 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x192>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    66a8:	sub.w	lr, r3, #97	; 0x61
    66ac:	cmp.w	lr, #25
    66b0:	bhi.n	6704 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x230>
        c += 'A' - 'a';
    66b2:	subs	r3, #32
    66b4:	uxtb	r3, r3
        lc |= bit;
    66b6:	orr.w	r9, r8, r9
    66ba:	b.n	6618 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x144>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    66bc:	sub.w	lr, r3, #91	; 0x5b
    66c0:	cmp.w	lr, #2
    66c4:	bls.n	660a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x136>
    66c6:	b.n	6696 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c2>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    66c8:	str	r7, [r2, #0]
    66ca:	adds	r6, r0, r4
    66cc:	b.n	656c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x98>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    66ce:	cmp	r4, #255	; 0xff
    66d0:	bgt.w	653e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    66d4:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    66d6:	mov	r3, r4
    66d8:	b.n	6586 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb2>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    66da:	ldrb	r3, [r1, #13]
    66dc:	cmp	r3, #32
    66de:	beq.w	653e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    66e2:	ldrb	r3, [r1, #12]
    66e4:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    66e6:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    66e8:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    66ea:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    66ec:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    66ee:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    66f0:	strb	r2, [r3, #14]
    66f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    66f6:	str	r0, [r2, #0]
    66f8:	mov	r4, r3
    66fa:	mov.w	r5, #4294967295
    66fe:	b.n	6586 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb2>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6700:	mov	sl, r9
    6702:	b.n	6644 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x170>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    6704:	sub.w	lr, r3, #65	; 0x41
    6708:	cmp.w	lr, #25
        uc |= bit;
    670c:	it	ls
    670e:	orrls.w	sl, r8, sl
    6712:	b.n	6618 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x144>
    6714:	.word	0x35000101

00006718 <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    6718:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    671c:	ldrb	r5, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    671e:	mov	r6, r1
    6720:	mov	r4, r0
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    6722:	movs	r7, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    6724:	mov.w	r8, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    6728:	ldr	r0, [r6, #4]
    672a:	ldr	r1, [r6, #8]
    672c:	adds	r3, r7, r0
    672e:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6730:	cbz	r0, 6744 <FatFile::lfnUniqueSfn(fname_t*)+0x2c>
    6732:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    6734:	ldrb.w	r2, [r1], #1
    6738:	add.w	r3, r3, r3, lsl #5
    673c:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    673e:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    6740:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6742:	bne.n	6734 <FatFile::lfnUniqueSfn(fname_t*)+0x1c>
    6744:	cmp	r5, #3
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
    6746:	and.w	r2, r3, #15
    674a:	it	cs
    674c:	movcs	r5, #3
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    674e:	adds	r1, r5, #4
    6750:	cmp	r2, #9
    6752:	ite	hi
    6754:	addhi.w	r0, r2, #55	; 0x37
    6758:	addls.w	r0, r2, #48	; 0x30
    675c:	uxtb	r1, r1
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    675e:	adds	r2, r5, #3
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6760:	add	r1, r6
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6762:	uxtb	r2, r2
    6764:	cmp	r5, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6766:	strb	r0, [r1, #13]
        hex >>= 4;
    6768:	mov.w	r3, r3, asr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    676c:	bcs.n	6808 <FatFile::lfnUniqueSfn(fname_t*)+0xf0>
        uint8_t h = hex & 0XF;
    676e:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6772:	cmp	r1, #9
    6774:	ite	hi
    6776:	addhi.w	r0, r1, #55	; 0x37
    677a:	addls.w	r0, r1, #48	; 0x30
    677e:	adds	r1, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6780:	adds	r2, r5, #2
    6782:	uxtb	r2, r2
    6784:	cmp	r5, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6786:	strb	r0, [r1, #13]
    6788:	mov.w	r3, r3, asr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    678c:	bcs.n	680a <FatFile::lfnUniqueSfn(fname_t*)+0xf2>
        uint8_t h = hex & 0XF;
    678e:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6792:	cmp	r1, #9
    6794:	ite	hi
    6796:	addhi.w	r0, r1, #55	; 0x37
    679a:	addls.w	r0, r1, #48	; 0x30
    679e:	adds	r1, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    67a0:	adds	r2, r5, #1
    67a2:	uxtb	r2, r2
    67a4:	cmp	r5, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    67a6:	strb	r0, [r1, #13]
    67a8:	mov.w	r3, r3, asr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    67ac:	bcs.n	680a <FatFile::lfnUniqueSfn(fname_t*)+0xf2>
        uint8_t h = hex & 0XF;
    67ae:	uxtb	r3, r3
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    67b0:	cmp	r3, #9
    67b2:	ite	hi
    67b4:	addhi	r3, #55	; 0x37
    67b6:	addls	r3, #48	; 0x30
    67b8:	add	r2, r6
    67ba:	uxtb	r3, r3
    67bc:	mov	r1, r5
    67be:	strb	r3, [r2, #13]
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    67c0:	adds	r3, r6, r1
   * the value false is returned for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    67c2:	mov	r0, r4
    67c4:	movs	r1, #0
    67c6:	strb.w	r8, [r3, #13]
    67ca:	bl	53e4 <FatFile::seekSet(unsigned long)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    67ce:	add.w	r9, r6, #13
      }
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
    67d2:	movs	r1, #1
    67d4:	mov	r0, r4
    67d6:	bl	53a4 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    67da:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    67dc:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    67de:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    67e0:	cbz	r0, 680e <FatFile::lfnUniqueSfn(fname_t*)+0xf6>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    67e2:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    67e6:	mov	r0, r9
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    67e8:	cmp.w	lr, #0
    67ec:	beq.n	681a <FatFile::lfnUniqueSfn(fname_t*)+0x102>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    67ee:	ldrb	r3, [r3, #11]
    67f0:	lsls	r3, r3, #28
    67f2:	bmi.n	67d2 <FatFile::lfnUniqueSfn(fname_t*)+0xba>
    67f4:	bl	c97c <memcmp>
    67f8:	cmp	r0, #0
    67fa:	bne.n	67d2 <FatFile::lfnUniqueSfn(fname_t*)+0xba>
    67fc:	adds	r7, #1
    67fe:	uxth	r7, r7
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    6800:	cmp	r7, #100	; 0x64
    6802:	bne.n	6728 <FatFile::lfnUniqueSfn(fname_t*)+0x10>
fail:
  return false;

done:
  return true;
}
    6804:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6808:	movs	r5, #3
    680a:	mov	r1, r5
    680c:	b.n	67c0 <FatFile::lfnUniqueSfn(fname_t*)+0xa8>
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    680e:	ldrb	r0, [r4, #1]
    6810:	clz	r0, r0
    6814:	lsrs	r0, r0, #5
    6816:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    681a:	movs	r0, #1
    681c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006820 <FatFile::open(FatFile*, fname_t*, unsigned char)>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
    6820:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    6824:	ldrb	r4, [r1, #0]
    6826:	tst.w	r4, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
    682a:	sub	sp, #44	; 0x2c
  uint16_t time;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    682c:	beq.n	6832 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    682e:	ldrb	r4, [r0, #0]
    6830:	cbz	r4, 683a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    6832:	movs	r0, #0
}
    6834:	add	sp, #44	; 0x2c
    6836:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    683a:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
    683c:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6840:	lsls	r4, r4, #30
    6842:	bne.n	68be <FatFile::open(FatFile*, fname_t*, unsigned char)+0x9e>
    6844:	mov.w	r8, #1
    6848:	mov	r5, r1
    684a:	mov	r9, r2
    684c:	str	r0, [sp, #28]
    684e:	movs	r1, #0
    6850:	mov	r0, r5
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint16_t freeIndex = 0;
    6852:	mov	r6, r1
    6854:	str	r3, [sp, #24]
    6856:	bl	53e4 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    685a:	add.w	r3, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    685e:	str	r6, [sp, #20]
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    6860:	str	r6, [sp, #8]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    6862:	mov	r4, r6
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    6864:	mov	r7, r6
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
    6866:	str	r6, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6868:	str	r3, [sp, #12]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    686a:	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
    686c:	movs	r1, #1
    686e:	mov	r0, r5
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6870:	ubfx	fp, r3, #5, #16
    dir = dirFile->readDirCache(true);
    6874:	bl	53a4 <FatFile::readDirCache(bool)>
    if (!dir) {
    6878:	cmp	r0, #0
    687a:	beq.w	699a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x17a>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    687e:	ldrb	r3, [r0, #0]
    6880:	cmp	r3, #229	; 0xe5
    6882:	beq.n	68ee <FatFile::open(FatFile*, fname_t*, unsigned char)+0xce>
    6884:	cmp	r3, #0
    6886:	beq.n	68ee <FatFile::open(FatFile*, fname_t*, unsigned char)+0xce>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    6888:	cmp	r4, r8
    688a:	it	cc
    688c:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    688e:	cmp	r3, #46	; 0x2e
    6890:	beq.n	68ea <FatFile::open(FatFile*, fname_t*, unsigned char)+0xca>
    6892:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    6894:	cmp	r2, #15
    6896:	beq.n	6908 <FatFile::open(FatFile*, fname_t*, unsigned char)+0xe8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    6898:	lsls	r2, r2, #28
    689a:	bmi.n	68ea <FatFile::open(FatFile*, fname_t*, unsigned char)+0xca>
      if (lfnOrd) {
    689c:	cmp	r7, #0
    689e:	bne.w	6b50 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x330>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    68a2:	movs	r2, #11
    68a4:	ldr	r1, [sp, #12]
    68a6:	bl	c97c <memcmp>
    68aa:	cmp	r0, #0
    68ac:	bne.n	686a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    68ae:	ldrb.w	r3, [r9]
    68b2:	lsls	r3, r3, #31
    68b4:	bpl.w	6bec <FatFile::open(FatFile*, fname_t*, unsigned char)+0x3cc>
          goto found;
        }
        fnameFound = true;
    68b8:	movs	r3, #1
    68ba:	str	r3, [sp, #16]
    68bc:	b.n	686a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    68be:	ldr	r5, [pc, #652]	; (6b4c <FatFile::open(FatFile*, fname_t*, unsigned char)+0x32c>)
    68c0:	add.w	r4, sl, #12
    68c4:	umull	r4, r8, r5, r4
    68c8:	mov.w	r8, r8, lsr #2
    68cc:	add.w	r8, r8, #1
    68d0:	uxtb.w	r8, r8
    68d4:	b.n	6848 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    68d6:	ldr	r2, [sp, #8]
    68d8:	subs	r2, #1
    68da:	uxtb	r2, r2
    68dc:	cmp	r3, r2
    68de:	str	r2, [sp, #8]
    68e0:	bne.n	68ea <FatFile::open(FatFile*, fname_t*, unsigned char)+0xca>
    68e2:	ldrb	r3, [r0, #13]
    68e4:	ldr	r2, [sp, #20]
    68e6:	cmp	r2, r3
    68e8:	beq.n	691a <FatFile::open(FatFile*, fname_t*, unsigned char)+0xfa>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    68ea:	movs	r7, #0
    68ec:	b.n	686a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    68ee:	cmp	r4, #0
    68f0:	it	eq
    68f2:	moveq	r6, fp
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    68f4:	cmp	r4, r8
        freeFound++;
    68f6:	itt	cc
    68f8:	addcc	r4, #1
    68fa:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    68fc:	cmp	r3, #0
    68fe:	beq.n	69a2 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x182>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6900:	cmp	r3, #229	; 0xe5
    6902:	bne.n	688e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x6e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6904:	movs	r7, #0
    6906:	b.n	686a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
    6908:	cmp	r7, #0
    690a:	bne.n	68d6 <FatFile::open(FatFile*, fname_t*, unsigned char)+0xb6>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    690c:	lsls	r1, r3, #25
    690e:	bpl.n	686a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    6910:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    6914:	ldrb	r3, [r0, #13]
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    6916:	str	r7, [sp, #8]
        checksum = ldir->checksum;
    6918:	str	r3, [sp, #20]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    691a:	ldr	r3, [sp, #8]
    691c:	subs	r3, #1
    691e:	add.w	r1, r3, r3, lsl #1
    6922:	add.w	r1, r3, r1, lsl #2
      if (k >= len) {
    6926:	cmp	sl, r1
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    6928:	mov	r3, r1
      if (k >= len) {
    692a:	bls.n	68ea <FatFile::open(FatFile*, fname_t*, unsigned char)+0xca>
    692c:	adds	r0, #4
    692e:	add.w	lr, r1, #13
    6932:	b.n	696e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x14e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6934:	uxtb.w	ip, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6938:	sub.w	r2, ip, #65	; 0x41
    693c:	cmp	r2, #25
    693e:	itt	ls
    6940:	addls.w	r2, ip, #32
    6944:	uxtbls.w	ip, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6948:	ldr.w	r2, [r9, #8]
    694c:	ldrb	r2, [r2, r3]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    694e:	sub.w	fp, r2, #65	; 0x41
    6952:	cmp.w	fp, #25
    6956:	itt	ls
    6958:	addls	r2, #32
    695a:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    695c:	cmp	r2, ip
    695e:	add.w	r3, r3, #1
    6962:	bne.n	68ea <FatFile::open(FatFile*, fname_t*, unsigned char)+0xca>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    6964:	cmp	r3, lr
    6966:	add.w	r0, r0, #2
    696a:	beq.w	686a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
    696e:	subs	r2, r3, r1
    6970:	uxtb	r2, r2
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < 5) {
    6972:	cmp	r2, #4
    6974:	bls.n	698a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x16a>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    6976:	cmp	r2, #10
//-----------------------------------------------------------------------------

#if USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6978:	ite	ls
    697a:	ldrhls	r2, [r0, #0]
    697c:	ldrhhi	r2, [r0, #2]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    697e:	cmp	sl, r3
    6980:	beq.n	6992 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x172>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6982:	cmp	r2, #255	; 0xff
    6984:	bls.n	6934 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x114>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6986:	movs	r7, #0
    6988:	b.n	686a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    698a:	cmp	sl, r3
    698c:	ldrh.w	r2, [r0, #-3]
    6990:	bne.n	6982 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x162>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    6992:	cmp	r2, #0
    6994:	it	ne
    6996:	movne	r7, #0
    6998:	b.n	686a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    699a:	ldrb	r3, [r5, #1]
    699c:	cmp	r3, #0
    699e:	bne.w	6832 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
    69a2:	ldr	r3, [sp, #24]
    69a4:	and.w	r3, r3, #66	; 0x42
    69a8:	cmp	r3, #66	; 0x42
    69aa:	bne.w	6832 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    69ae:	cmp	r4, #0
    69b0:	it	eq
    69b2:	moveq	r6, fp
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    69b4:	cmp	r4, r8
    69b6:	bcc.n	69c0 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1a0>
    69b8:	b.n	69f0 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1d0>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    69ba:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    69bc:	cmp	r8, r4
    69be:	bls.n	69f0 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1d0>
    dir = dirFile->readDirCache();
    69c0:	movs	r1, #0
    69c2:	mov	r0, r5
    69c4:	bl	53a4 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    69c8:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    69ca:	cmp	r0, #0
    69cc:	bne.n	69ba <FatFile::open(FatFile*, fname_t*, unsigned char)+0x19a>
      if (dirFile->getError()) {
    69ce:	ldrb	r3, [r5, #1]
    69d0:	cbz	r3, 69dc <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1bc>
    69d2:	b.n	6832 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    69d4:	ldr	r3, [r5, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    69d6:	ldrb	r3, [r3, #4]
    69d8:	cmp	r3, #1
    69da:	bhi.n	69f0 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1d0>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    69dc:	cmp	r8, r4
    69de:	bls.n	69f0 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1d0>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    69e0:	mov	r0, r5
    69e2:	bl	4ec4 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    69e6:	adds	r4, #16
    69e8:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    69ea:	cmp	r0, #0
    69ec:	bne.n	69d4 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1b4>
    69ee:	b.n	6832 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    69f0:	ldr	r3, [sp, #16]
    69f2:	cbz	r3, 6a02 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x1e2>
    if (!dirFile->lfnUniqueSfn(fname)) {
    69f4:	mov	r1, r9
    69f6:	mov	r0, r5
    69f8:	bl	6718 <FatFile::lfnUniqueSfn(fname_t*)>
    69fc:	cmp	r0, #0
    69fe:	beq.w	6832 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    6a02:	lsls	r1, r6, #5
    6a04:	mov	r0, r5
    6a06:	bl	53e4 <FatFile::seekSet(unsigned long)>
    6a0a:	cmp	r0, #0
    6a0c:	beq.w	6832 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    6a10:	add.w	r7, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    6a14:	ands.w	r7, r7, #255	; 0xff
    6a18:	beq.w	6c0e <FatFile::open(FatFile*, fname_t*, unsigned char)+0x3ee>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6a1c:	orr.w	r6, r7, #64	; 0x40
    6a20:	uxtb	r6, r6
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6a22:	mov	r8, r7
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
    6a24:	movs	r4, #0
    6a26:	movs	r1, #0
    6a28:	mov	r0, r5
    6a2a:	bl	53a4 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6a2e:	cmp	r0, #0
    6a30:	beq.w	6832 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    6a34:	ldr	r1, [r5, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    6a36:	ldrb.w	r2, [r1, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6a3a:	cmp	r7, r8
    6a3c:	orr.w	r2, r2, #1
    6a40:	ite	ne
    6a42:	movne	r3, r8
    6a44:	moveq	r3, r6
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6a46:	mov.w	lr, #15
    6a4a:	strb.w	r2, [r1, #36]	; 0x24
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6a4e:	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    6a50:	strb	r4, [r0, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6a52:	strb.w	lr, [r0, #11]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6a56:	ldrb.w	lr, [r9, #13]
    6a5a:	ldrb.w	r1, [r9, #14]
    6a5e:	mov.w	r2, lr, lsr #1
    6a62:	orr.w	r2, r2, lr, lsl #7
    6a66:	add	r2, r1
    6a68:	uxtb	r2, r2
    6a6a:	ldrb.w	lr, [r9, #15]
    6a6e:	lsrs	r1, r2, #1
    6a70:	orr.w	r2, r1, r2, lsl #7
    6a74:	uxtab	r2, lr, r2
    6a78:	uxtb	r2, r2
    6a7a:	ldrb.w	lr, [r9, #16]
    6a7e:	lsrs	r1, r2, #1
    6a80:	orr.w	r2, r1, r2, lsl #7
    6a84:	uxtab	r2, lr, r2
    6a88:	uxtb	r2, r2
    6a8a:	ldrb.w	lr, [r9, #17]
    6a8e:	lsrs	r1, r2, #1
    6a90:	orr.w	r2, r1, r2, lsl #7
    6a94:	uxtab	r2, lr, r2
    6a98:	uxtb	r2, r2
    6a9a:	ldrb.w	lr, [r9, #18]
    6a9e:	lsrs	r1, r2, #1
    6aa0:	orr.w	r2, r1, r2, lsl #7
    6aa4:	uxtab	r2, lr, r2
    6aa8:	uxtb	r2, r2
    6aaa:	ldrb.w	lr, [r9, #19]
    6aae:	lsrs	r1, r2, #1
    6ab0:	orr.w	r2, r1, r2, lsl #7
    6ab4:	uxtab	r2, lr, r2
    6ab8:	uxtb	r2, r2
    6aba:	ldrb.w	lr, [r9, #20]
    6abe:	lsrs	r1, r2, #1
    6ac0:	orr.w	r2, r1, r2, lsl #7
    6ac4:	uxtab	r2, lr, r2
    6ac8:	uxtb	r2, r2
    6aca:	ldrb.w	lr, [r9, #21]
    6ace:	lsrs	r1, r2, #1
    6ad0:	orr.w	r2, r1, r2, lsl #7
    6ad4:	uxtab	r2, lr, r2
    6ad8:	uxtb	r2, r2
    6ada:	ldrb.w	lr, [r9, #22]
    6ade:	lsrs	r1, r2, #1
    6ae0:	orr.w	r2, r1, r2, lsl #7
    6ae4:	uxtab	r2, lr, r2
    6ae8:	uxtb	r2, r2
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6aea:	ldrb.w	lr, [r9, #23]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6aee:	strh	r4, [r0, #26]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6af0:	lsrs	r1, r2, #1
    6af2:	orr.w	r2, r1, r2, lsl #7
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6af6:	and.w	r3, r3, #31
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6afa:	uxtab	r2, lr, r2
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6afe:	subs	r3, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6b00:	strb	r2, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6b02:	add.w	r2, r3, r3, lsl #1
    6b06:	add.w	r2, r3, r2, lsl #2
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    6b0a:	ldr.w	lr, [r9, #8]
    6b0e:	adds	r0, #4
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    6b10:	movs	r3, #0
    6b12:	b.n	6b34 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x314>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6b14:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6b16:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6b1a:	bls.n	6b46 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x326>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    6b1c:	cmp	r3, #10
    6b1e:	ite	ls
    6b20:	strhls	r1, [r0, #0]
    6b22:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    6b24:	adds	r3, #1
    6b26:	uxtb	r3, r3
    6b28:	cmp	r3, #13
    6b2a:	add.w	r2, r2, #1
    6b2e:	add.w	r0, r0, #2
    6b32:	beq.n	6c02 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x3e2>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6b34:	cmp	sl, r2
    6b36:	bhi.n	6b14 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x2f4>
    6b38:	ite	ne
    6b3a:	movne.w	r1, #4294967295
    6b3e:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6b40:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6b42:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6b44:	bhi.n	6b1c <FatFile::open(FatFile*, fname_t*, unsigned char)+0x2fc>
    6b46:	strh.w	r1, [r0, #-3]
    6b4a:	b.n	6b24 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x304>
    6b4c:	.word	0x4ec4ec4f
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6b50:	ldr	r3, [sp, #8]
    6b52:	cmp	r3, #1
    6b54:	bne.w	6832 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6b58:	ldrb	r1, [r0, #0]
    6b5a:	ldrb	r3, [r0, #1]
    6b5c:	ldrb	r4, [r0, #9]
    6b5e:	lsls	r2, r1, #7
    6b60:	orr.w	r2, r2, r1, lsr #1
    6b64:	add	r3, r2
    6b66:	uxtb	r3, r3
    6b68:	lsls	r2, r3, #7
    6b6a:	ldrb	r1, [r0, #2]
    6b6c:	orr.w	r3, r2, r3, lsr #1
    6b70:	uxtab	r3, r1, r3
    6b74:	uxtb	r3, r3
    6b76:	lsls	r2, r3, #7
    6b78:	ldrb	r1, [r0, #3]
    6b7a:	orr.w	r3, r2, r3, lsr #1
    6b7e:	uxtab	r3, r1, r3
    6b82:	uxtb	r3, r3
    6b84:	lsls	r2, r3, #7
    6b86:	ldrb	r1, [r0, #4]
    6b88:	orr.w	r3, r2, r3, lsr #1
    6b8c:	uxtab	r3, r1, r3
    6b90:	uxtb	r3, r3
    6b92:	lsrs	r2, r3, #1
    6b94:	ldrb	r1, [r0, #5]
    6b96:	orr.w	r3, r2, r3, lsl #7
    6b9a:	uxtab	r3, r1, r3
    6b9e:	uxtb	r3, r3
    6ba0:	lsrs	r2, r3, #1
    6ba2:	ldrb	r1, [r0, #6]
    6ba4:	orr.w	r3, r2, r3, lsl #7
    6ba8:	uxtab	r3, r1, r3
    6bac:	uxtb	r3, r3
    6bae:	lsrs	r2, r3, #1
    6bb0:	ldrb	r1, [r0, #7]
    6bb2:	orr.w	r3, r2, r3, lsl #7
    6bb6:	uxtab	r3, r1, r3
    6bba:	uxtb	r3, r3
    6bbc:	lsrs	r2, r3, #1
    6bbe:	ldrb	r1, [r0, #8]
    6bc0:	orr.w	r3, r2, r3, lsl #7
    6bc4:	uxtab	r3, r1, r3
    6bc8:	uxtb	r3, r3
    6bca:	lsrs	r2, r3, #1
    6bcc:	orr.w	r3, r2, r3, lsl #7
    6bd0:	uxtab	r3, r4, r3
    6bd4:	uxtb	r3, r3
    6bd6:	lsrs	r2, r3, #1
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6bd8:	ldrb	r1, [r0, #10]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6bda:	orr.w	r3, r2, r3, lsl #7
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6bde:	uxtab	r3, r1, r3
    6be2:	ldr	r2, [sp, #20]
    6be4:	uxtb	r3, r3
    6be6:	cmp	r2, r3
    6be8:	bne.w	6832 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    6bec:	ldr	r3, [sp, #24]
    6bee:	lsls	r6, r3, #24
    6bf0:	bmi.w	6832 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    6bf4:	str	r7, [sp, #0]
    6bf6:	mov	r2, fp
    6bf8:	mov	r1, r5
    6bfa:	ldr	r0, [sp, #28]
    6bfc:	bl	5478 <FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)>
    6c00:	b.n	6834 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x14>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6c02:	add.w	r8, r8, #4294967295
    6c06:	ands.w	r8, r8, #255	; 0xff
    6c0a:	bne.w	6a26 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x206>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6c0e:	ldr	r3, [r5, #20]
  dir = dirFile->readDirCache();
    6c10:	movs	r1, #0
    6c12:	mov	r0, r5
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6c14:	ubfx	fp, r3, #5, #16
  dir = dirFile->readDirCache();
    6c18:	bl	53a4 <FatFile::readDirCache(bool)>
  if (!dir) {
    6c1c:	mov	r4, r0
    6c1e:	cmp	r0, #0
    6c20:	beq.w	6832 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
    6c24:	movs	r2, #32
    6c26:	movs	r1, #0
    6c28:	bl	caa8 <memset>
  memcpy(dir->name, fname->sfn, 11);
    6c2c:	mov	r3, r9

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    6c2e:	ldr	r2, [pc, #76]	; (6c7c <FatFile::open(FatFile*, fname_t*, unsigned char)+0x45c>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
  memcpy(dir->name, fname->sfn, 11);
    6c30:	ldr.w	r1, [r3, #13]!
    6c34:	ldr	r0, [r3, #4]
    6c36:	str	r0, [r4, #4]
    6c38:	str	r1, [r4, #0]
    6c3a:	ldrh	r1, [r3, #8]
    6c3c:	ldrb	r3, [r3, #10]
    6c3e:	strb	r3, [r4, #10]
    6c40:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6c42:	ldrb.w	r3, [r9]

  // set timestamps
  if (FsDateTime::callback) {
    6c46:	ldr	r2, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6c48:	and.w	r3, r3, #24
    6c4c:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    6c4e:	cbz	r2, 6c6a <FatFile::open(FatFile*, fname_t*, unsigned char)+0x44a>
    // call user date/time function
    FsDateTime::callback(&date, &time);
    6c50:	add.w	r1, sp, #38	; 0x26
    6c54:	add	r0, sp, #36	; 0x24
    6c56:	blx	r2
    setLe16(dir->createDate, date);
    6c58:	ldrh.w	r3, [sp, #36]	; 0x24
    setLe16(dir->createTime, time);
    6c5c:	ldrh.w	r2, [sp, #38]	; 0x26
    6c60:	strh	r3, [r4, #16]
    6c62:	strh	r3, [r4, #18]
    6c64:	strh	r3, [r4, #24]
    6c66:	strh	r2, [r4, #14]
    6c68:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    6c6a:	ldr	r2, [r5, #8]
    6c6c:	ldrb.w	r3, [r2, #36]	; 0x24
    6c70:	orr.w	r3, r3, #1
    6c74:	strb.w	r3, [r2, #36]	; 0x24
    6c78:	ldr	r3, [sp, #24]
    6c7a:	b.n	6bf4 <FatFile::open(FatFile*, fname_t*, unsigned char)+0x3d4>
    6c7c:	.word	0x20020360

00006c80 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    6c80:	ldrb	r0, [r0, #16]
    6c82:	bx	lr

00006c84 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    6c84:	ldrb	r0, [r0, #18]
    6c86:	bx	lr

00006c88 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    6c88:	ldrb	r0, [r0, #19]
    6c8a:	bx	lr

00006c8c <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    6c8c:	bx	lr
    6c8e:	nop

00006c90 <SdSpiCard::~SdSpiCard()>:
    6c90:	push	{r4, lr}
    6c92:	movs	r1, #20
    6c94:	mov	r4, r0
    6c96:	bl	b0a8 <operator delete(void*, unsigned int)>
    6c9a:	mov	r0, r4
    6c9c:	pop	{r4, pc}
    6c9e:	nop

00006ca0 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6ca0:	push	{r4, r5, r6, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    6ca2:	ldrb	r6, [r0, #17]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6ca4:	mov	r5, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    6ca6:	cbnz	r6, 6cbc <SdSpiCard::isBusy()+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
    6ca8:	ldr	r0, [r0, #12]
    6caa:	bl	91a4 <SdSpiAltDriver::activate()>
    6cae:	ldr	r3, [r5, #12]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
    6cb0:	mov	r1, r6
    6cb2:	ldrb	r0, [r3, #8]
    6cb4:	bl	9b00 <digitalWrite>
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    6cb8:	movs	r3, #1
    6cba:	strb	r3, [r5, #17]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6cbc:	movs	r4, #8
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6cbe:	ldr	r0, [r5, #12]
    6cc0:	bl	927c <SdSpiAltDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    6cc4:	cmp	r0, #255	; 0xff
    6cc6:	add.w	r3, r4, #4294967295
    6cca:	beq.n	6cfc <SdSpiCard::isBusy()+0x5c>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    6ccc:	ands.w	r4, r3, #255	; 0xff
    6cd0:	bne.n	6cbe <SdSpiCard::isBusy()+0x1e>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    6cd2:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    6cd4:	cbnz	r6, 6cda <SdSpiCard::isBusy()+0x3a>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6cd6:	ldrb	r3, [r5, #17]
    6cd8:	cbnz	r3, 6cde <SdSpiCard::isBusy()+0x3e>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    6cda:	mov	r0, r4
    6cdc:	pop	{r4, r5, r6, pc}
    6cde:	ldr	r3, [r5, #12]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
    6ce0:	movs	r1, #1
    6ce2:	ldrb	r0, [r3, #8]
    6ce4:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6ce8:	movs	r1, #255	; 0xff
    6cea:	ldr	r0, [r5, #12]
    6cec:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6cf0:	ldr	r0, [r5, #12]
    6cf2:	bl	9234 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6cf6:	strb	r6, [r5, #17]
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    6cf8:	mov	r0, r4
    6cfa:	pop	{r4, r5, r6, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    6cfc:	movs	r4, #0
    6cfe:	b.n	6cd4 <SdSpiCard::isBusy()+0x34>

00006d00 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    6d00:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d02:	ldr	r7, [pc, #136]	; (6d8c <SdSpiCard::writeStop()+0x8c>)
    6d04:	sub	sp, #12
    6d06:	ldr	r3, [r7, #0]
    6d08:	str	r3, [sp, #4]
	return ret;
    6d0a:	ldr	r6, [sp, #4]
    6d0c:	mov	r5, r0
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    6d0e:	uxth	r6, r6
    6d10:	b.n	6d22 <SdSpiCard::writeStop()+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d12:	ldr	r3, [r7, #0]
    6d14:	str	r3, [sp, #0]
	return ret;
    6d16:	ldr	r3, [sp, #0]
    6d18:	uxth	r3, r3
    6d1a:	subs	r3, r3, r6
    6d1c:	cmp.w	r3, #600	; 0x258
    6d20:	bgt.n	6d42 <SdSpiCard::writeStop()+0x42>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6d22:	ldr	r0, [r5, #12]
    6d24:	bl	927c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    6d28:	cmp	r0, #255	; 0xff
    6d2a:	mov	r4, r0
    6d2c:	bne.n	6d12 <SdSpiCard::writeStop()+0x12>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6d2e:	movs	r1, #253	; 0xfd
    6d30:	ldr	r0, [r5, #12]
    6d32:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6d36:	ldrb	r6, [r5, #17]
    6d38:	cbnz	r6, 6d6e <SdSpiCard::writeStop()+0x6e>
    6d3a:	movs	r6, #1

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    6d3c:	mov	r0, r6
    6d3e:	add	sp, #12
    6d40:	pop	{r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6d42:	ldrb	r6, [r5, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6d44:	movs	r3, #29
    6d46:	strb	r3, [r5, #16]
    6d48:	cmp	r6, #0
    6d4a:	beq.n	6d3c <SdSpiCard::writeStop()+0x3c>
    6d4c:	ldr	r3, [r5, #12]
    6d4e:	movs	r1, #1
    6d50:	ldrb	r0, [r3, #8]
    6d52:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6d56:	movs	r1, #255	; 0xff
    6d58:	ldr	r0, [r5, #12]
    6d5a:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6d5e:	ldr	r0, [r5, #12]
    6d60:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6d64:	movs	r6, #0

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    6d66:	mov	r0, r6
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6d68:	strb	r6, [r5, #17]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    6d6a:	add	sp, #12
    6d6c:	pop	{r4, r5, r6, r7, pc}
    6d6e:	ldr	r3, [r5, #12]
    6d70:	movs	r1, #1
    6d72:	ldrb	r0, [r3, #8]
    6d74:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6d78:	mov	r1, r4
    6d7a:	ldr	r0, [r5, #12]
    6d7c:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6d80:	ldr	r0, [r5, #12]
    6d82:	bl	9234 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6d86:	movs	r3, #0
    6d88:	strb	r3, [r5, #17]
    6d8a:	b.n	6d3c <SdSpiCard::writeStop()+0x3c>
    6d8c:	.word	0x200203bc

00006d90 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    6d90:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d94:	ldr	r7, [pc, #192]	; (6e58 <SdSpiCard::writeData(unsigned char const*)+0xc8>)
    6d96:	sub	sp, #8
    6d98:	ldr	r3, [r7, #0]
    6d9a:	str	r3, [sp, #4]
	return ret;
    6d9c:	ldr	r6, [sp, #4]
    6d9e:	mov	r5, r0
    6da0:	mov	r8, r1
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    6da2:	uxth	r6, r6
    6da4:	b.n	6db6 <SdSpiCard::writeData(unsigned char const*)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6da6:	ldr	r3, [r7, #0]
    6da8:	str	r3, [sp, #0]
	return ret;
    6daa:	ldr	r3, [sp, #0]
    6dac:	uxth	r3, r3
    6dae:	subs	r3, r3, r6
    6db0:	cmp.w	r3, #600	; 0x258
    6db4:	bgt.n	6e06 <SdSpiCard::writeData(unsigned char const*)+0x76>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6db6:	ldr	r0, [r5, #12]
    6db8:	bl	927c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    6dbc:	cmp	r0, #255	; 0xff
    6dbe:	mov	r4, r0
    6dc0:	bne.n	6da6 <SdSpiCard::writeData(unsigned char const*)+0x16>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6dc2:	movs	r1, #252	; 0xfc
    6dc4:	ldr	r0, [r5, #12]
    6dc6:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
    6dca:	mov.w	r2, #512	; 0x200
    6dce:	mov	r1, r8
    6dd0:	ldr	r0, [r5, #12]
    6dd2:	bl	92d0 <SdSpiAltDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6dd6:	mov	r1, r4
    6dd8:	ldr	r0, [r5, #12]
    6dda:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
    6dde:	mov	r1, r4
    6de0:	ldr	r0, [r5, #12]
    6de2:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6de6:	ldr	r0, [r5, #12]
    6de8:	bl	927c <SdSpiAltDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    6dec:	and.w	r3, r0, #31
    6df0:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    6df2:	strb	r0, [r5, #18]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    6df4:	beq.n	6e32 <SdSpiCard::writeData(unsigned char const*)+0xa2>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6df6:	ldrb	r3, [r5, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6df8:	movs	r2, #30
    6dfa:	strb	r2, [r5, #16]
    6dfc:	cbnz	r3, 6e3a <SdSpiCard::writeData(unsigned char const*)+0xaa>
  }
  return true;

fail:
  spiStop();
  return false;
    6dfe:	movs	r0, #0
}
    6e00:	add	sp, #8
    6e02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6e06:	ldrb	r3, [r5, #17]
    6e08:	movs	r2, #33	; 0x21
    6e0a:	strb	r2, [r5, #16]
    6e0c:	cmp	r3, #0
    6e0e:	beq.n	6dfe <SdSpiCard::writeData(unsigned char const*)+0x6e>
    6e10:	ldr	r3, [r5, #12]
    6e12:	movs	r1, #1
    6e14:	ldrb	r0, [r3, #8]
    6e16:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6e1a:	movs	r1, #255	; 0xff
    6e1c:	ldr	r0, [r5, #12]
    6e1e:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6e22:	ldr	r0, [r5, #12]
    6e24:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6e28:	movs	r0, #0
    6e2a:	strb	r0, [r5, #17]
  return true;

fail:
  spiStop();
  return false;
}
    6e2c:	add	sp, #8
    6e2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    goto fail;
  }
  return true;
    6e32:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    6e34:	add	sp, #8
    6e36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e3a:	ldr	r3, [r5, #12]
    6e3c:	movs	r1, #1
    6e3e:	ldrb	r0, [r3, #8]
    6e40:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6e44:	mov	r1, r4
    6e46:	ldr	r0, [r5, #12]
    6e48:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6e4c:	ldr	r0, [r5, #12]
    6e4e:	bl	9234 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6e52:	movs	r3, #0
    6e54:	strb	r3, [r5, #17]
    6e56:	b.n	6dfe <SdSpiCard::writeData(unsigned char const*)+0x6e>
    6e58:	.word	0x200203bc

00006e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6e5c:	push	{r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
    6e5e:	ldrb	r5, [r0, #17]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6e60:	sub	sp, #20
    6e62:	mov	r4, r0
    6e64:	mov	r7, r1
    6e66:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    6e68:	cbnz	r5, 6e7e <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
    6e6a:	ldr	r0, [r0, #12]
    6e6c:	bl	91a4 <SdSpiAltDriver::activate()>
    6e70:	ldr	r3, [r4, #12]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
    6e72:	mov	r1, r5
    6e74:	ldrb	r0, [r3, #8]
    6e76:	bl	9b00 <digitalWrite>
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    6e7a:	movs	r3, #1
    6e7c:	strb	r3, [r4, #17]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6e7e:	ldr	r6, [pc, #128]	; (6f00 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>)
    6e80:	ldr	r3, [r6, #0]
    6e82:	str	r3, [sp, #12]
	return ret;
    6e84:	ldr	r5, [sp, #12]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    6e86:	uxth	r5, r5
    6e88:	b.n	6e9a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x3e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6e8a:	ldr	r3, [r6, #0]
    6e8c:	str	r3, [sp, #8]
	return ret;
    6e8e:	ldr	r3, [sp, #8]
    6e90:	uxth	r3, r3
    6e92:	subs	r3, r3, r5
    6e94:	cmp.w	r3, #600	; 0x258
    6e98:	bgt.n	6ea4 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6e9a:	ldr	r0, [r4, #12]
    6e9c:	bl	927c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    6ea0:	cmp	r0, #255	; 0xff
    6ea2:	bne.n	6e8a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6ea4:	orr.w	r1, r7, #64	; 0x40
    6ea8:	ldr	r0, [r4, #12]
    6eaa:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
    6eae:	add	r6, sp, #4
    6eb0:	add	r5, sp, #8
    6eb2:	ldrb.w	r1, [r5, #-1]!
    6eb6:	ldr	r0, [r4, #12]
    6eb8:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    6ebc:	cmp	r5, r6
    6ebe:	bne.n	6eb2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x56>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    6ec0:	cbz	r7, 6eec <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x90>
    6ec2:	movs	r1, #135	; 0x87
    6ec4:	ldr	r0, [r4, #12]
    6ec6:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
    6eca:	cmp	r7, #12
    6ecc:	beq.n	6ef6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6ece:	movs	r5, #0
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6ed0:	ldr	r0, [r4, #12]
    6ed2:	bl	927c <SdSpiAltDriver::receive()>
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
    6ed6:	lsls	r3, r0, #24
    6ed8:	strb	r0, [r4, #18]
    6eda:	bmi.n	6ee0 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x84>
  }
  return m_status;
}
    6edc:	add	sp, #20
    6ede:	pop	{r4, r5, r6, r7, pc}
    6ee0:	adds	r5, #1
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
    6ee2:	cmp.w	r5, #256	; 0x100
    6ee6:	bne.n	6ed0 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
  }
  return m_status;
}
    6ee8:	add	sp, #20
    6eea:	pop	{r4, r5, r6, r7, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6eec:	movs	r1, #149	; 0x95
    6eee:	ldr	r0, [r4, #12]
    6ef0:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
    6ef4:	b.n	6ece <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x72>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    6ef6:	ldr	r0, [r4, #12]
    6ef8:	bl	927c <SdSpiAltDriver::receive()>
    6efc:	b.n	6ece <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x72>
    6efe:	nop
    6f00:	.word	0x200203bc

00006f04 <SdSpiCard::readOCR(unsigned long*)>:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    6f04:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6f06:	push	{r4, r5, r6, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    6f08:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6f0a:	mov	r4, r0
    6f0c:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    6f0e:	blx	r3
  if (cardCommand(CMD58, 0)) {
    6f10:	mov	r0, r4
    6f12:	movs	r2, #0
    6f14:	movs	r1, #58	; 0x3a
    6f16:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6f1a:	cbnz	r0, 6f36 <SdSpiCard::readOCR(unsigned long*)+0x32>
    6f1c:	adds	r5, r6, #4
    6f1e:	ldr	r0, [r4, #12]
    6f20:	bl	927c <SdSpiAltDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    6f24:	strb.w	r0, [r5, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    6f28:	cmp	r5, r6
    6f2a:	bne.n	6f1e <SdSpiCard::readOCR(unsigned long*)+0x1a>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6f2c:	ldrb	r5, [r4, #17]
    6f2e:	cbnz	r5, 6f60 <SdSpiCard::readOCR(unsigned long*)+0x5c>
    6f30:	movs	r5, #1
  return true;

fail:
  spiStop();
  return false;
}
    6f32:	mov	r0, r5
    6f34:	pop	{r4, r5, r6, pc}
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6f36:	ldrb	r5, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6f38:	movs	r3, #18
    6f3a:	strb	r3, [r4, #16]
    6f3c:	cmp	r5, #0
    6f3e:	beq.n	6f32 <SdSpiCard::readOCR(unsigned long*)+0x2e>
    6f40:	ldr	r3, [r4, #12]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
    6f42:	movs	r1, #1
    6f44:	ldrb	r0, [r3, #8]
    6f46:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6f4a:	movs	r1, #255	; 0xff
    6f4c:	ldr	r0, [r4, #12]
    6f4e:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6f52:	movs	r5, #0
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6f54:	ldr	r0, [r4, #12]
    6f56:	bl	9234 <SdSpiAltDriver::deactivate()>
    6f5a:	strb	r5, [r4, #17]
  return true;

fail:
  spiStop();
  return false;
}
    6f5c:	mov	r0, r5
    6f5e:	pop	{r4, r5, r6, pc}
    6f60:	ldr	r3, [r4, #12]
    6f62:	movs	r1, #1
    6f64:	ldrb	r0, [r3, #8]
    6f66:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6f6a:	movs	r1, #255	; 0xff
    6f6c:	ldr	r0, [r4, #12]
    6f6e:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6f72:	ldr	r0, [r4, #12]
    6f74:	bl	9234 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6f78:	movs	r3, #0
    6f7a:	strb	r3, [r4, #17]
  return true;

fail:
  spiStop();
  return false;
}
    6f7c:	mov	r0, r5
    6f7e:	pop	{r4, r5, r6, pc}

00006f80 <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    6f80:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    6f82:	ldr	r3, [r0, #0]
    6f84:	ldr	r5, [pc, #88]	; (6fe0 <SdSpiCard::writeStart(unsigned long)+0x60>)
    6f86:	ldr	r3, [r3, #64]	; 0x40
    6f88:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    6f8a:	sub	sp, #12
    6f8c:	mov	r4, r0
    6f8e:	mov	r2, r1
    6f90:	bne.n	6fd6 <SdSpiCard::writeStart(unsigned long)+0x56>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    6f92:	ldrb	r0, [r0, #19]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    6f94:	cmp	r0, #3
    sector <<= 9;
    6f96:	it	ne
    6f98:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    6f9a:	movs	r1, #25
    6f9c:	mov	r0, r4
    6f9e:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6fa2:	cbz	r0, 6fd0 <SdSpiCard::writeStart(unsigned long)+0x50>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6fa4:	ldrb	r0, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6fa6:	movs	r3, #14
    6fa8:	strb	r3, [r4, #16]
    6faa:	cbnz	r0, 6fb0 <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    6fac:	add	sp, #12
    6fae:	pop	{r4, r5, pc}
    6fb0:	ldr	r3, [r4, #12]
    6fb2:	movs	r1, #1
    6fb4:	ldrb	r0, [r3, #8]
    6fb6:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    6fba:	movs	r1, #255	; 0xff
    6fbc:	ldr	r0, [r4, #12]
    6fbe:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    6fc2:	ldr	r0, [r4, #12]
    6fc4:	bl	9234 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6fc8:	movs	r0, #0
    6fca:	strb	r0, [r4, #17]
  return true;

fail:
  spiStop();
  return false;
}
    6fcc:	add	sp, #12
    6fce:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    6fd0:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    6fd2:	add	sp, #12
    6fd4:	pop	{r4, r5, pc}
    6fd6:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    6fd8:	blx	r3
    6fda:	ldr	r2, [sp, #4]
    6fdc:	b.n	6f94 <SdSpiCard::writeStart(unsigned long)+0x14>
    6fde:	nop
    6fe0:	.word	0x00006c89

00006fe4 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    6fe4:	push	{r4, r5, r6, r7, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    6fe6:	ldrb	r5, [r0, #8]
    6fe8:	cmp	r5, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    6fea:	sub	sp, #12
    6fec:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    6fee:	beq.n	6ffe <SdSpiCard::syncDevice()+0x1a>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    6ff0:	cmp	r5, #2
    6ff2:	beq.n	701c <SdSpiCard::syncDevice()+0x38>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    6ff4:	movs	r3, #0
#endif  // ENABLE_DEDICATED_SPI
  return true;
    6ff6:	movs	r0, #1
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    6ff8:	strb	r3, [r4, #8]
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    6ffa:	add	sp, #12
    6ffc:	pop	{r4, r5, r6, r7, pc}
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    6ffe:	movs	r2, #0
    7000:	movs	r1, #12
    7002:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7006:	ldrb	r3, [r4, #17]
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7008:	mov	r6, r0
    700a:	cmp	r0, #0
    700c:	beq.n	7098 <SdSpiCard::syncDevice()+0xb4>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    700e:	movs	r2, #9
    7010:	strb	r2, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7012:	cmp	r3, #0
    7014:	bne.n	70b8 <SdSpiCard::syncDevice()+0xd4>
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
      return false;
    7016:	movs	r0, #0
    }
  }
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    7018:	add	sp, #12
    701a:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    701c:	ldr	r7, [pc, #160]	; (70c0 <SdSpiCard::syncDevice()+0xdc>)
    701e:	ldr	r3, [r7, #0]
    7020:	str	r3, [sp, #4]
	return ret;
    7022:	ldr	r6, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7024:	uxth	r6, r6
    7026:	b.n	7038 <SdSpiCard::syncDevice()+0x54>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7028:	ldr	r3, [r7, #0]
    702a:	str	r3, [sp, #0]
	return ret;
    702c:	ldr	r3, [sp, #0]
    702e:	uxth	r3, r3
    7030:	subs	r3, r3, r6
    7032:	cmp.w	r3, #600	; 0x258
    7036:	bgt.n	7070 <SdSpiCard::syncDevice()+0x8c>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7038:	ldr	r0, [r4, #12]
    703a:	bl	927c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    703e:	cmp	r0, #255	; 0xff
    7040:	mov	r5, r0
    7042:	bne.n	7028 <SdSpiCard::syncDevice()+0x44>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7044:	movs	r1, #253	; 0xfd
    7046:	ldr	r0, [r4, #12]
    7048:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    704c:	ldrb	r3, [r4, #17]
    704e:	cmp	r3, #0
    7050:	beq.n	6ff4 <SdSpiCard::syncDevice()+0x10>
    7052:	ldr	r3, [r4, #12]
    7054:	movs	r1, #1
    7056:	ldrb	r0, [r3, #8]
    7058:	bl	9b00 <digitalWrite>
    705c:	mov	r1, r5
    705e:	ldr	r0, [r4, #12]
    7060:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7064:	ldr	r0, [r4, #12]
    7066:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    706a:	movs	r3, #0
    706c:	strb	r3, [r4, #17]
    706e:	b.n	6ff4 <SdSpiCard::syncDevice()+0x10>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7070:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7072:	movs	r2, #29
    7074:	strb	r2, [r4, #16]
    7076:	cmp	r3, #0
    7078:	beq.n	7016 <SdSpiCard::syncDevice()+0x32>
    707a:	ldr	r3, [r4, #12]
    707c:	movs	r1, #1
    707e:	ldrb	r0, [r3, #8]
    7080:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7084:	movs	r1, #255	; 0xff
    7086:	ldr	r0, [r4, #12]
    7088:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    708c:	ldr	r0, [r4, #12]
    708e:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7092:	movs	r3, #0
    7094:	strb	r3, [r4, #17]
    7096:	b.n	7016 <SdSpiCard::syncDevice()+0x32>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7098:	cmp	r3, #0
    709a:	beq.n	6ff4 <SdSpiCard::syncDevice()+0x10>
    709c:	ldr	r3, [r4, #12]
    709e:	mov	r1, r5
    70a0:	ldrb	r0, [r3, #8]
    70a2:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    70a6:	movs	r1, #255	; 0xff
    70a8:	ldr	r0, [r4, #12]
    70aa:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    70ae:	ldr	r0, [r4, #12]
    70b0:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    70b4:	strb	r6, [r4, #17]
    70b6:	b.n	6ff4 <SdSpiCard::syncDevice()+0x10>
    70b8:	ldr	r3, [r4, #12]
    70ba:	mov	r1, r5
    70bc:	b.n	707e <SdSpiCard::syncDevice()+0x9a>
    70be:	nop
    70c0:	.word	0x200203bc

000070c4 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    70c4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    70c8:	ldr	r3, [r0, #0]
    70ca:	ldr	r6, [pc, #264]	; (71d4 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x110>)
    70cc:	ldr	r5, [r3, #12]
    70ce:	cmp	r5, r6
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    70d0:	sub	sp, #8
    70d2:	bne.n	71b2 <SdSpiCard::readSector(unsigned long, unsigned char*)+0xee>
    70d4:	mov	r7, r2
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    70d6:	ldrb	r2, [r0, #8]
    70d8:	cmp	r2, #1
    70da:	mov	r4, r0
    70dc:	mov	r8, r1
    70de:	beq.n	70f2 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x2e>
    if (!syncDevice()) {
    70e0:	ldr	r3, [r3, #20]
    70e2:	mov	r0, r4
    70e4:	blx	r3
    70e6:	cmp	r0, #0
    70e8:	bne.n	714c <SdSpiCard::readSector(unsigned long, unsigned char*)+0x88>
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    70ea:	movs	r0, #0
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  //  ENABLE_DEDICATED_SPI
  }
    70ec:	add	sp, #8
    70ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    70f2:	ldr	r2, [r0, #4]
    70f4:	cmp	r1, r2
    70f6:	bne.n	70e0 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    70f8:	ldr	r6, [pc, #220]	; (71d8 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x114>)
    70fa:	ldr	r3, [r6, #0]
    70fc:	str	r3, [sp, #4]
	return ret;
    70fe:	ldr	r5, [sp, #4]
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    7100:	uxth	r5, r5
    7102:	b.n	7114 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x50>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7104:	ldr	r3, [r6, #0]
    7106:	str	r3, [sp, #0]
	return ret;
    7108:	ldr	r3, [sp, #0]
    710a:	uxth	r3, r3
    710c:	subs	r3, r3, r5
    710e:	cmp.w	r3, #300	; 0x12c
    7112:	bgt.n	7178 <SdSpiCard::readSector(unsigned long, unsigned char*)+0xb4>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7114:	ldr	r0, [r4, #12]
    7116:	bl	927c <SdSpiAltDriver::receive()>
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    711a:	cmp	r0, #255	; 0xff
    711c:	strb	r0, [r4, #18]
    711e:	beq.n	7104 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x40>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_SECTOR) {
    7120:	cmp	r0, #254	; 0xfe
    7122:	beq.n	717e <SdSpiCard::readSector(unsigned long, unsigned char*)+0xba>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7124:	movs	r3, #23
    7126:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7128:	ldrb	r3, [r4, #17]
    712a:	cmp	r3, #0
    712c:	beq.n	70ea <SdSpiCard::readSector(unsigned long, unsigned char*)+0x26>
    712e:	ldr	r3, [r4, #12]
    7130:	movs	r1, #1
    7132:	ldrb	r0, [r3, #8]
    7134:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7138:	movs	r1, #255	; 0xff
    713a:	ldr	r0, [r4, #12]
    713c:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7140:	ldr	r0, [r4, #12]
    7142:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7146:	movs	r3, #0
    7148:	strb	r3, [r4, #17]
    714a:	b.n	70ea <SdSpiCard::readSector(unsigned long, unsigned char*)+0x26>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    714c:	ldr	r3, [r4, #0]
    714e:	ldr	r2, [pc, #140]	; (71dc <SdSpiCard::readSector(unsigned long, unsigned char*)+0x118>)
    7150:	ldr	r3, [r3, #64]	; 0x40
    7152:	cmp	r3, r2
    7154:	bne.n	71c2 <SdSpiCard::readSector(unsigned long, unsigned char*)+0xfe>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    7156:	ldrb	r0, [r4, #19]
    7158:	cmp	r0, #3
    sector <<= 9;
    715a:	ite	ne
    715c:	movne.w	r2, r8, lsl #9
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    7160:	moveq	r2, r8
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    7162:	movs	r1, #18
    7164:	mov	r0, r4
    7166:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    716a:	cbz	r0, 71b8 <SdSpiCard::readSector(unsigned long, unsigned char*)+0xf4>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    716c:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    716e:	movs	r2, #12
    7170:	strb	r2, [r4, #16]
    7172:	cmp	r3, #0
    7174:	beq.n	70ea <SdSpiCard::readSector(unsigned long, unsigned char*)+0x26>
    7176:	b.n	712e <SdSpiCard::readSector(unsigned long, unsigned char*)+0x6a>
    7178:	movs	r3, #28
    717a:	strb	r3, [r4, #16]
    717c:	b.n	7128 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x64>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
    717e:	mov	r1, r7
    7180:	mov.w	r2, #512	; 0x200
    7184:	ldr	r0, [r4, #12]
    7186:	bl	9298 <SdSpiAltDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    718a:	strb	r0, [r4, #18]
    718c:	cbz	r0, 7194 <SdSpiCard::readSector(unsigned long, unsigned char*)+0xd0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    718e:	movs	r3, #34	; 0x22
    7190:	strb	r3, [r4, #16]
    7192:	b.n	7128 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x64>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7194:	ldr	r0, [r4, #12]
    7196:	bl	927c <SdSpiAltDriver::receive()>
    719a:	ldr	r0, [r4, #12]
    719c:	bl	927c <SdSpiAltDriver::receive()>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    71a0:	ldr	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    71a2:	ldrb	r2, [r4, #9]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    71a4:	adds	r3, #1
    71a6:	str	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    71a8:	cbnz	r2, 71c8 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x104>
    71aa:	movs	r0, #1
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  //  ENABLE_DEDICATED_SPI
  }
    71ac:	add	sp, #8
    71ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    71b2:	movs	r3, #1
    71b4:	blx	r5
    71b6:	b.n	70ec <SdSpiCard::readSector(unsigned long, unsigned char*)+0x28>
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    71b8:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    71ba:	str.w	r8, [r4, #4]
    m_curState = READ_STATE;
    71be:	strb	r3, [r4, #8]
    71c0:	b.n	70f8 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x34>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    71c2:	mov	r0, r4
    71c4:	blx	r3
    71c6:	b.n	7158 <SdSpiCard::readSector(unsigned long, unsigned char*)+0x94>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    71c8:	ldr	r3, [r4, #0]
    71ca:	mov	r0, r4
    71cc:	ldr	r3, [r3, #20]
    71ce:	blx	r3
    71d0:	b.n	70ec <SdSpiCard::readSector(unsigned long, unsigned char*)+0x28>
    71d2:	nop
    71d4:	.word	0x00007349
    71d8:	.word	0x200203bc
    71dc:	.word	0x00006c89

000071e0 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    71e0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    71e4:	ldr	r3, [r0, #0]
    71e6:	ldr	r6, [pc, #332]	; (7334 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x154>)
    71e8:	ldr	r5, [r3, #28]
    71ea:	cmp	r5, r6
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    71ec:	sub	sp, #8
    71ee:	bne.w	7308 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x128>
    71f2:	mov	r8, r2
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    71f4:	ldrb	r2, [r0, #8]
    71f6:	cmp	r2, #2
    71f8:	mov	r4, r0
    71fa:	mov	r7, r1
    71fc:	beq.n	7210 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    if (!syncDevice()) {
    71fe:	ldr	r3, [r3, #20]
    7200:	mov	r0, r4
    7202:	blx	r3
    7204:	cmp	r0, #0
    7206:	bne.n	72a2 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xc2>
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    7208:	movs	r0, #0
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    720a:	add	sp, #8
    720c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7210:	ldr	r2, [r0, #4]
    7212:	cmp	r1, r2
    7214:	bne.n	71fe <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x1e>
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
    7216:	ldr	r3, [r3, #68]	; 0x44
    7218:	ldr	r2, [pc, #284]	; (7338 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x158>)
    721a:	cmp	r3, r2
    721c:	bne.n	72d4 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xf4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    721e:	ldr	r7, [pc, #284]	; (733c <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x15c>)
    7220:	ldr	r3, [r7, #0]
    7222:	str	r3, [sp, #4]
	return ret;
    7224:	ldr	r6, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7226:	uxth	r6, r6
    7228:	b.n	723a <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    722a:	ldr	r3, [r7, #0]
    722c:	str	r3, [sp, #0]
	return ret;
    722e:	ldr	r3, [sp, #0]
    7230:	uxth	r3, r3
    7232:	subs	r3, r3, r6
    7234:	cmp.w	r3, #600	; 0x258
    7238:	bgt.n	72f0 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x110>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    723a:	ldr	r0, [r4, #12]
    723c:	bl	927c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7240:	cmp	r0, #255	; 0xff
    7242:	mov	r5, r0
    7244:	bne.n	722a <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x4a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7246:	movs	r1, #252	; 0xfc
    7248:	ldr	r0, [r4, #12]
    724a:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
    724e:	mov.w	r2, #512	; 0x200
    7252:	mov	r1, r8
    7254:	ldr	r0, [r4, #12]
    7256:	bl	92d0 <SdSpiAltDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    725a:	mov	r1, r5
    725c:	ldr	r0, [r4, #12]
    725e:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
    7262:	mov	r1, r5
    7264:	ldr	r0, [r4, #12]
    7266:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    726a:	ldr	r0, [r4, #12]
    726c:	bl	927c <SdSpiAltDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7270:	and.w	r3, r0, #31
    7274:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    7276:	strb	r0, [r4, #18]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7278:	beq.n	72de <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xfe>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    727a:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    727c:	movs	r2, #30
    727e:	strb	r2, [r4, #16]
    7280:	cmp	r3, #0
    7282:	beq.n	7208 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
    7284:	ldr	r3, [r4, #12]
    7286:	movs	r1, #1
    7288:	ldrb	r0, [r3, #8]
    728a:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    728e:	mov	r1, r5
    7290:	ldr	r0, [r4, #12]
    7292:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7296:	ldr	r0, [r4, #12]
    7298:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    729c:	movs	r3, #0
    729e:	strb	r3, [r4, #17]
    72a0:	b.n	7208 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    72a2:	ldr	r3, [r4, #0]
    72a4:	ldr	r1, [pc, #152]	; (7340 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x160>)
    72a6:	ldr	r2, [r3, #72]	; 0x48
    72a8:	cmp	r2, r1
    72aa:	bne.n	730e <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x12e>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    72ac:	ldr	r3, [r3, #64]	; 0x40
    72ae:	ldr	r2, [pc, #148]	; (7344 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x164>)
    72b0:	cmp	r3, r2
    72b2:	bne.n	732e <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x14e>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    72b4:	ldrb	r0, [r4, #19]
    72b6:	cmp	r0, #3
    sector <<= 9;
    72b8:	ite	ne
    72ba:	lslne	r2, r7, #9
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    72bc:	moveq	r2, r7
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    72be:	movs	r1, #25
    72c0:	mov	r0, r4
    72c2:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    72c6:	cbz	r0, 731a <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x13a>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    72c8:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    72ca:	movs	r2, #14
    72cc:	strb	r2, [r4, #16]
    72ce:	cmp	r3, #0
    72d0:	beq.n	7208 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
    72d2:	b.n	72fa <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x11a>
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
    72d4:	mov	r1, r8
    72d6:	mov	r0, r4
    72d8:	blx	r3
    72da:	cmp	r0, #0
    72dc:	beq.n	7208 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
      return false;
    }
  }
  m_curSector += ns;
    72de:	ldr	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    72e0:	ldrb	r2, [r4, #9]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    72e2:	adds	r3, #1
    72e4:	str	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    72e6:	cbnz	r2, 7324 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x144>
    72e8:	movs	r0, #1
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    72ea:	add	sp, #8
    72ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    72f0:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    72f2:	movs	r2, #33	; 0x21
    72f4:	strb	r2, [r4, #16]
    72f6:	cmp	r3, #0
    72f8:	beq.n	7208 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
    72fa:	ldr	r3, [r4, #12]
    72fc:	movs	r1, #1
    72fe:	ldrb	r0, [r3, #8]
    7300:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7304:	movs	r1, #255	; 0xff
    7306:	b.n	7290 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xb0>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    7308:	movs	r3, #1
    730a:	blx	r5
    730c:	b.n	720a <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x2a>
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    730e:	mov	r1, r7
    7310:	mov	r0, r4
    7312:	blx	r2
    7314:	cmp	r0, #0
    7316:	beq.w	7208 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    731a:	movs	r3, #2
    731c:	strb	r3, [r4, #8]
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    731e:	str	r7, [r4, #4]
    7320:	ldr	r3, [r4, #0]
    7322:	b.n	7216 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x36>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7324:	ldr	r3, [r4, #0]
    7326:	mov	r0, r4
    7328:	ldr	r3, [r3, #20]
    732a:	blx	r3
    732c:	b.n	720a <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x2a>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    732e:	mov	r0, r4
    7330:	blx	r3
    7332:	b.n	72b6 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xd6>
    7334:	.word	0x00007465
    7338:	.word	0x00006d91
    733c:	.word	0x200203bc
    7340:	.word	0x00006f81
    7344:	.word	0x00006c89

00007348 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    7348:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    734c:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    734e:	ldrb	r1, [r0, #8]
    7350:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    7352:	sub	sp, #12
    7354:	mov	r4, r0
    7356:	mov	r8, r2
    7358:	mov	r9, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    735a:	beq.n	7370 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!syncDevice()) {
    735c:	ldr	r3, [r4, #0]
    735e:	mov	r0, r4
    7360:	ldr	r3, [r3, #20]
    7362:	blx	r3
    7364:	cmp	r0, #0
    7366:	bne.n	73d8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x90>
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    7368:	movs	r0, #0
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    736a:	add	sp, #12
    736c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7370:	ldr	r3, [r0, #4]
    7372:	cmp	r3, r5
    7374:	bne.n	735c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x14>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7376:	cmp.w	r9, #0
    737a:	beq.n	7458 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x110>
    737c:	ldr	r6, [pc, #220]	; (745c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x114>)
    737e:	movs	r7, #0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7380:	ldr	r3, [r6, #0]
    7382:	str	r3, [sp, #4]
	return ret;
    7384:	ldr	r5, [sp, #4]
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    7386:	uxth	r5, r5
    7388:	b.n	739a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x52>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    738a:	ldr	r3, [r6, #0]
    738c:	str	r3, [sp, #0]
	return ret;
    738e:	ldr	r3, [sp, #0]
    7390:	uxth	r3, r3
    7392:	subs	r3, r3, r5
    7394:	cmp.w	r3, #300	; 0x12c
    7398:	bgt.n	73d2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x8a>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    739a:	ldr	r0, [r4, #12]
    739c:	bl	927c <SdSpiAltDriver::receive()>
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    73a0:	cmp	r0, #255	; 0xff
    73a2:	strb	r0, [r4, #18]
    73a4:	beq.n	738a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_SECTOR) {
    73a6:	cmp	r0, #254	; 0xfe
    73a8:	beq.n	7402 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xba>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    73aa:	movs	r3, #23
    73ac:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    73ae:	ldrb	r3, [r4, #17]
    73b0:	cmp	r3, #0
    73b2:	beq.n	7368 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
    73b4:	ldr	r3, [r4, #12]
    73b6:	movs	r1, #1
    73b8:	ldrb	r0, [r3, #8]
    73ba:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    73be:	movs	r1, #255	; 0xff
    73c0:	ldr	r0, [r4, #12]
    73c2:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    73c6:	ldr	r0, [r4, #12]
    73c8:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    73cc:	movs	r3, #0
    73ce:	strb	r3, [r4, #17]
    73d0:	b.n	7368 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    73d2:	movs	r3, #28
    73d4:	strb	r3, [r4, #16]
    73d6:	b.n	73ae <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x66>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    73d8:	ldr	r3, [r4, #0]
    73da:	ldr	r2, [pc, #132]	; (7460 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x118>)
    73dc:	ldr	r3, [r3, #64]	; 0x40
    73de:	cmp	r3, r2
    73e0:	bne.n	7448 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x100>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    73e2:	ldrb	r0, [r4, #19]
    73e4:	cmp	r0, #3
    sector <<= 9;
    73e6:	ite	ne
    73e8:	lslne	r2, r5, #9
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    73ea:	moveq	r2, r5
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    73ec:	movs	r1, #18
    73ee:	mov	r0, r4
    73f0:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    73f4:	cbz	r0, 7440 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xf8>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    73f6:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    73f8:	movs	r2, #12
    73fa:	strb	r2, [r4, #16]
    73fc:	cmp	r3, #0
    73fe:	beq.n	7368 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
    7400:	b.n	73b4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6c>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
    7402:	mov.w	r2, #512	; 0x200
    7406:	mov	r1, r8
    7408:	ldr	r0, [r4, #12]
    740a:	bl	9298 <SdSpiAltDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    740e:	strb	r0, [r4, #18]
    7410:	cbz	r0, 7418 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xd0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7412:	movs	r3, #34	; 0x22
    7414:	strb	r3, [r4, #16]
    7416:	b.n	73ae <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x66>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7418:	ldr	r0, [r4, #12]
    741a:	bl	927c <SdSpiAltDriver::receive()>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    741e:	adds	r7, #1
    7420:	ldr	r0, [r4, #12]
    7422:	bl	927c <SdSpiAltDriver::receive()>
    7426:	cmp	r9, r7
    7428:	add.w	r8, r8, #512	; 0x200
    742c:	bne.n	7380 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    742e:	ldr	r3, [r4, #4]
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7430:	ldrb	r2, [r4, #9]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    7432:	add	r3, r9
    7434:	str	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    7436:	cbnz	r2, 744e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x106>
    7438:	movs	r0, #1
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    743a:	add	sp, #12
    743c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    7440:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    7442:	str	r5, [r4, #4]
    m_curState = READ_STATE;
    7444:	strb	r3, [r4, #8]
    7446:	b.n	7376 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  SD_TRACE("RS", sector);
  if (type() != SD_CARD_TYPE_SDHC) {
    7448:	mov	r0, r4
    744a:	blx	r3
    744c:	b.n	73e4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x9c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    744e:	ldr	r3, [r4, #0]
    7450:	mov	r0, r4
    7452:	ldr	r3, [r3, #20]
    7454:	blx	r3
    7456:	b.n	736a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7458:	mov	r3, r5
    745a:	b.n	7430 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xe8>
    745c:	.word	0x200203bc
    7460:	.word	0x00006c89

00007464 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    7464:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7468:	mov	r5, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    746a:	ldrb	r1, [r0, #8]
    746c:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    746e:	sub	sp, #12
    7470:	mov	r4, r0
    7472:	mov	r8, r2
    7474:	mov	r9, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7476:	beq.n	748c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!syncDevice()) {
    7478:	ldr	r3, [r4, #0]
    747a:	mov	r0, r4
    747c:	ldr	r3, [r3, #20]
    747e:	blx	r3
    7480:	cmp	r0, #0
    7482:	bne.n	756c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x108>
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    7484:	movs	r0, #0

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    7486:	add	sp, #12
    7488:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    748c:	ldr	r3, [r0, #4]
    748e:	cmp	r3, r5
    7490:	bne.n	7478 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7492:	cmp.w	r9, #0
    7496:	beq.w	75c4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x160>
    749a:	ldr.w	sl, [pc, #312]	; 75d4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x170>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    749e:	ldr	r6, [pc, #296]	; (75c8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x164>)
    74a0:	movs	r7, #0
    if (!writeData(src)) {
    74a2:	ldr	r3, [r4, #0]
    74a4:	ldr	r3, [r3, #68]	; 0x44
    74a6:	cmp	r3, sl
    74a8:	bne.n	752c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc8>
    74aa:	ldr	r3, [r6, #0]
    74ac:	str	r3, [sp, #4]
	return ret;
    74ae:	ldr	r5, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    74b0:	uxth	r5, r5
    74b2:	b.n	74c4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x60>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    74b4:	ldr	r3, [r6, #0]
    74b6:	str	r3, [sp, #0]
	return ret;
    74b8:	ldr	r3, [sp, #0]
    74ba:	uxth	r3, r3
    74bc:	subs	r3, r3, r5
    74be:	cmp.w	r3, #600	; 0x258
    74c2:	bgt.n	7554 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xf0>
    74c4:	ldr	r0, [r4, #12]
    74c6:	bl	927c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    74ca:	cmp	r0, #255	; 0xff
    74cc:	mov	fp, r0
    74ce:	bne.n	74b4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    74d0:	movs	r1, #252	; 0xfc
    74d2:	ldr	r0, [r4, #12]
    74d4:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
    74d8:	mov.w	r2, #512	; 0x200
    74dc:	mov	r1, r8
    74de:	ldr	r0, [r4, #12]
    74e0:	bl	92d0 <SdSpiAltDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    74e4:	mov	r1, fp
    74e6:	ldr	r0, [r4, #12]
    74e8:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
    74ec:	mov	r1, fp
    74ee:	ldr	r0, [r4, #12]
    74f0:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    74f4:	ldr	r0, [r4, #12]
    74f6:	bl	927c <SdSpiAltDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    74fa:	and.w	r3, r0, #31
    74fe:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    7500:	strb	r0, [r4, #18]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7502:	beq.n	7536 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd2>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7504:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7506:	movs	r2, #30
    7508:	strb	r2, [r4, #16]
    750a:	cmp	r3, #0
    750c:	beq.n	7484 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
    750e:	ldr	r3, [r4, #12]
    7510:	movs	r1, #1
    7512:	ldrb	r0, [r3, #8]
    7514:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7518:	mov	r1, fp
    751a:	ldr	r0, [r4, #12]
    751c:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7520:	ldr	r0, [r4, #12]
    7522:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7526:	movs	r3, #0
    7528:	strb	r3, [r4, #17]
    752a:	b.n	7484 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
    752c:	mov	r1, r8
    752e:	mov	r0, r4
    7530:	blx	r3
    7532:	cmp	r0, #0
    7534:	beq.n	7484 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7536:	adds	r7, #1
    7538:	cmp	r9, r7
    753a:	add.w	r8, r8, #512	; 0x200
    753e:	bne.n	74a2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    7540:	ldr	r3, [r4, #4]
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7542:	ldrb	r2, [r4, #9]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    7544:	add	r3, r9
    7546:	str	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    7548:	cmp	r2, #0
    754a:	bne.n	75b4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x150>
    754c:	movs	r0, #1

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    754e:	add	sp, #12
    7550:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7554:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7556:	movs	r2, #33	; 0x21
    7558:	strb	r2, [r4, #16]
    755a:	cmp	r3, #0
    755c:	beq.n	7484 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
    755e:	ldr	r3, [r4, #12]
    7560:	movs	r1, #1
    7562:	ldrb	r0, [r3, #8]
    7564:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7568:	movs	r1, #255	; 0xff
    756a:	b.n	751a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xb6>
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    756c:	ldr	r3, [r4, #0]
    756e:	ldr	r1, [pc, #92]	; (75cc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x168>)
    7570:	ldr	r2, [r3, #72]	; 0x48
    7572:	cmp	r2, r1
    7574:	bne.n	75a0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x13c>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7576:	ldr	r3, [r3, #64]	; 0x40
    7578:	ldr	r2, [pc, #84]	; (75d0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16c>)
    757a:	cmp	r3, r2
    757c:	bne.n	75be <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x15a>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    757e:	ldrb	r0, [r4, #19]
    7580:	cmp	r0, #3
    sector <<= 9;
    7582:	ite	ne
    7584:	lslne	r2, r5, #9
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7586:	moveq	r2, r5
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    7588:	movs	r1, #25
    758a:	mov	r0, r4
    758c:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7590:	cbz	r0, 75ac <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x148>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7592:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7594:	movs	r2, #14
    7596:	strb	r2, [r4, #16]
    7598:	cmp	r3, #0
    759a:	beq.w	7484 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
    759e:	b.n	755e <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xfa>
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    75a0:	mov	r1, r5
    75a2:	mov	r0, r4
    75a4:	blx	r2
    75a6:	cmp	r0, #0
    75a8:	beq.w	7484 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    75ac:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    75ae:	str	r5, [r4, #4]
    m_curState = WRITE_STATE;
    75b0:	strb	r3, [r4, #8]
    75b2:	b.n	7492 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    75b4:	ldr	r3, [r4, #0]
    75b6:	mov	r0, r4
    75b8:	ldr	r3, [r3, #20]
    75ba:	blx	r3
    75bc:	b.n	7486 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    75be:	mov	r0, r4
    75c0:	blx	r3
    75c2:	b.n	7580 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x11c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    75c4:	mov	r3, r5
    75c6:	b.n	7542 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xde>
    75c8:	.word	0x200203bc
    75cc:	.word	0x00006f81
    75d0:	.word	0x00006c89
    75d4:	.word	0x00006d91

000075d8 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    75d8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    75dc:	ldr	r5, [pc, #160]	; (7680 <SdSpiCard::readData(unsigned char*, unsigned int)+0xa8>)
    75de:	sub	sp, #8
    75e0:	ldr	r3, [r5, #0]
    75e2:	str	r3, [sp, #0]
	return ret;
    75e4:	ldr	r4, [sp, #0]
    75e6:	mov	r8, r0
    75e8:	mov	r6, r1
    75ea:	mov	r7, r2
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    75ec:	uxth	r4, r4
    75ee:	b.n	7600 <SdSpiCard::readData(unsigned char*, unsigned int)+0x28>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    75f0:	ldr	r3, [r5, #0]
    75f2:	str	r3, [sp, #4]
	return ret;
    75f4:	ldr	r3, [sp, #4]
    75f6:	uxth	r3, r3
    75f8:	subs	r3, r3, r4
    75fa:	cmp.w	r3, #300	; 0x12c
    75fe:	bgt.n	764a <SdSpiCard::readData(unsigned char*, unsigned int)+0x72>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7600:	ldr.w	r0, [r8, #12]
    7604:	bl	927c <SdSpiAltDriver::receive()>
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start sector token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    7608:	cmp	r0, #255	; 0xff
    760a:	strb.w	r0, [r8, #18]
    760e:	beq.n	75f0 <SdSpiCard::readData(unsigned char*, unsigned int)+0x18>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_SECTOR) {
    7610:	cmp	r0, #254	; 0xfe
    7612:	beq.n	7652 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7614:	movs	r3, #23
    7616:	strb.w	r3, [r8, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    761a:	ldrb.w	r0, [r8, #17]
    761e:	cbz	r0, 7644 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6c>
    7620:	ldr.w	r3, [r8, #12]
    7624:	movs	r1, #1
    7626:	ldrb	r0, [r3, #8]
    7628:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    762c:	movs	r1, #255	; 0xff
    762e:	ldr.w	r0, [r8, #12]
    7632:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7636:	ldr.w	r0, [r8, #12]
    763a:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    763e:	movs	r0, #0
    7640:	strb.w	r0, [r8, #17]
  return true;

fail:
  spiStop();
  return false;
}
    7644:	add	sp, #8
    7646:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    764a:	movs	r3, #28
    764c:	strb.w	r3, [r8, #16]
    7650:	b.n	761a <SdSpiCard::readData(unsigned char*, unsigned int)+0x42>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
    7652:	mov	r2, r7
    7654:	mov	r1, r6
    7656:	ldr.w	r0, [r8, #12]
    765a:	bl	9298 <SdSpiAltDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    765e:	strb.w	r0, [r8, #18]
    7662:	cbz	r0, 766c <SdSpiCard::readData(unsigned char*, unsigned int)+0x94>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7664:	movs	r3, #34	; 0x22
    7666:	strb.w	r3, [r8, #16]
    766a:	b.n	761a <SdSpiCard::readData(unsigned char*, unsigned int)+0x42>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    766c:	ldr.w	r0, [r8, #12]
    7670:	bl	927c <SdSpiAltDriver::receive()>
    7674:	ldr.w	r0, [r8, #12]
    7678:	bl	927c <SdSpiAltDriver::receive()>
#else
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    767c:	movs	r0, #1
    767e:	b.n	7644 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6c>
    7680:	.word	0x200203bc

00007684 <SdSpiCard::readCID(CID*)>:
   *
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    7684:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7688:	ldr	r3, [r0, #0]
    768a:	ldr	r2, [pc, #332]	; (77d8 <SdSpiCard::readCID(CID*)+0x154>)
    768c:	ldr	r3, [r3, #20]
    768e:	cmp	r3, r2
    7690:	sub	sp, #8
    7692:	mov	r4, r0
    7694:	mov	r6, r1
    7696:	bne.n	7710 <SdSpiCard::readCID(CID*)+0x8c>
#endif  // ENABLE_DEDICATED_SPI
}
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    7698:	ldrb	r5, [r0, #8]
    769a:	cmp	r5, #1
    769c:	beq.n	7714 <SdSpiCard::readCID(CID*)+0x90>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    769e:	cmp	r5, #2
    76a0:	beq.n	7732 <SdSpiCard::readCID(CID*)+0xae>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    76a2:	movs	r3, #0
    76a4:	strb	r3, [r4, #8]
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
  if (cardCommand(cmd, 0)) {
    76a6:	movs	r2, #0
    76a8:	movs	r1, #10
    76aa:	mov	r0, r4
    76ac:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    76b0:	mov	r5, r0
    76b2:	cbz	r0, 76de <SdSpiCard::readCID(CID*)+0x5a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    76b4:	movs	r3, #26
    76b6:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    76b8:	ldrb	r0, [r4, #17]
    76ba:	cbz	r0, 76d8 <SdSpiCard::readCID(CID*)+0x54>
    76bc:	ldr	r3, [r4, #12]
    76be:	movs	r1, #1
    76c0:	ldrb	r0, [r3, #8]
    76c2:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    76c6:	movs	r1, #255	; 0xff
    76c8:	ldr	r0, [r4, #12]
    76ca:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    76ce:	ldr	r0, [r4, #12]
    76d0:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    76d4:	movs	r0, #0
    76d6:	strb	r0, [r4, #17]
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
  }
    76d8:	add	sp, #8
    76da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    76de:	mov	r1, r6
    76e0:	movs	r2, #16
    76e2:	mov	r0, r4
    76e4:	bl	75d8 <SdSpiCard::readData(unsigned char*, unsigned int)>
    76e8:	cmp	r0, #0
    76ea:	beq.n	76b8 <SdSpiCard::readCID(CID*)+0x34>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    76ec:	ldrb	r6, [r4, #17]
    76ee:	cmp	r6, #0
    76f0:	beq.n	76d8 <SdSpiCard::readCID(CID*)+0x54>
    76f2:	ldr	r3, [r4, #12]
    76f4:	movs	r1, #1
    76f6:	ldrb	r0, [r3, #8]
    76f8:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    76fc:	movs	r1, #255	; 0xff
    76fe:	ldr	r0, [r4, #12]
    7700:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7704:	ldr	r0, [r4, #12]
    7706:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    770a:	strb	r5, [r4, #17]
    770c:	mov	r0, r6
    770e:	b.n	76d8 <SdSpiCard::readCID(CID*)+0x54>
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7710:	blx	r3
    7712:	b.n	76a6 <SdSpiCard::readCID(CID*)+0x22>
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7714:	movs	r2, #0
    7716:	movs	r1, #12
    7718:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    771c:	ldrb	r3, [r4, #17]
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    771e:	mov	r7, r0
    7720:	cmp	r0, #0
    7722:	beq.n	77b4 <SdSpiCard::readCID(CID*)+0x130>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7724:	movs	r2, #9
    7726:	strb	r2, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7728:	cmp	r3, #0
    772a:	beq.n	76a6 <SdSpiCard::readCID(CID*)+0x22>
    772c:	ldr	r3, [r4, #12]
    772e:	mov	r1, r5
    7730:	b.n	779a <SdSpiCard::readCID(CID*)+0x116>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7732:	ldr.w	r8, [pc, #168]	; 77dc <SdSpiCard::readCID(CID*)+0x158>
    7736:	ldr.w	r3, [r8]
    773a:	str	r3, [sp, #4]
	return ret;
    773c:	ldr	r7, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    773e:	uxth	r7, r7
    7740:	b.n	7754 <SdSpiCard::readCID(CID*)+0xd0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7742:	ldr.w	r3, [r8]
    7746:	str	r3, [sp, #0]
	return ret;
    7748:	ldr	r3, [sp, #0]
    774a:	uxth	r3, r3
    774c:	subs	r3, r3, r7
    774e:	cmp.w	r3, #600	; 0x258
    7752:	bgt.n	778c <SdSpiCard::readCID(CID*)+0x108>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7754:	ldr	r0, [r4, #12]
    7756:	bl	927c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    775a:	cmp	r0, #255	; 0xff
    775c:	mov	r5, r0
    775e:	bne.n	7742 <SdSpiCard::readCID(CID*)+0xbe>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7760:	movs	r1, #253	; 0xfd
    7762:	ldr	r0, [r4, #12]
    7764:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7768:	ldrb	r3, [r4, #17]
    776a:	cmp	r3, #0
    776c:	beq.n	76a2 <SdSpiCard::readCID(CID*)+0x1e>
    776e:	ldr	r3, [r4, #12]
    7770:	movs	r1, #1
    7772:	ldrb	r0, [r3, #8]
    7774:	bl	9b00 <digitalWrite>
    7778:	mov	r1, r5
    777a:	ldr	r0, [r4, #12]
    777c:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7780:	ldr	r0, [r4, #12]
    7782:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7786:	movs	r3, #0
    7788:	strb	r3, [r4, #17]
    778a:	b.n	76a2 <SdSpiCard::readCID(CID*)+0x1e>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    778c:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    778e:	movs	r2, #29
    7790:	strb	r2, [r4, #16]
    7792:	cmp	r3, #0
    7794:	beq.n	76a6 <SdSpiCard::readCID(CID*)+0x22>
    7796:	ldr	r3, [r4, #12]
    7798:	movs	r1, #1
    779a:	ldrb	r0, [r3, #8]
    779c:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    77a0:	movs	r1, #255	; 0xff
    77a2:	ldr	r0, [r4, #12]
    77a4:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    77a8:	ldr	r0, [r4, #12]
    77aa:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    77ae:	movs	r3, #0
    77b0:	strb	r3, [r4, #17]
    77b2:	b.n	76a6 <SdSpiCard::readCID(CID*)+0x22>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    77b4:	cmp	r3, #0
    77b6:	beq.w	76a2 <SdSpiCard::readCID(CID*)+0x1e>
    77ba:	ldr	r3, [r4, #12]
    77bc:	mov	r1, r5
    77be:	ldrb	r0, [r3, #8]
    77c0:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    77c4:	movs	r1, #255	; 0xff
    77c6:	ldr	r0, [r4, #12]
    77c8:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    77cc:	ldr	r0, [r4, #12]
    77ce:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    77d2:	strb	r7, [r4, #17]
    77d4:	b.n	76a2 <SdSpiCard::readCID(CID*)+0x1e>
    77d6:	nop
    77d8:	.word	0x00006fe5
    77dc:	.word	0x200203bc

000077e0 <SdSpiCard::readCSD(csd_t*)>:
   *
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    77e0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    77e4:	ldr	r3, [r0, #0]
    77e6:	ldr	r2, [pc, #332]	; (7934 <SdSpiCard::readCSD(csd_t*)+0x154>)
    77e8:	ldr	r3, [r3, #20]
    77ea:	cmp	r3, r2
    77ec:	sub	sp, #8
    77ee:	mov	r4, r0
    77f0:	mov	r6, r1
    77f2:	bne.n	786c <SdSpiCard::readCSD(csd_t*)+0x8c>
#endif  // ENABLE_DEDICATED_SPI
}
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    77f4:	ldrb	r5, [r0, #8]
    77f6:	cmp	r5, #1
    77f8:	beq.n	7870 <SdSpiCard::readCSD(csd_t*)+0x90>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    77fa:	cmp	r5, #2
    77fc:	beq.n	788e <SdSpiCard::readCSD(csd_t*)+0xae>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    77fe:	movs	r3, #0
    7800:	strb	r3, [r4, #8]
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
  if (cardCommand(cmd, 0)) {
    7802:	movs	r2, #0
    7804:	movs	r1, #9
    7806:	mov	r0, r4
    7808:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    780c:	mov	r5, r0
    780e:	cbz	r0, 783a <SdSpiCard::readCSD(csd_t*)+0x5a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7810:	movs	r3, #26
    7812:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7814:	ldrb	r0, [r4, #17]
    7816:	cbz	r0, 7834 <SdSpiCard::readCSD(csd_t*)+0x54>
    7818:	ldr	r3, [r4, #12]
    781a:	movs	r1, #1
    781c:	ldrb	r0, [r3, #8]
    781e:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7822:	movs	r1, #255	; 0xff
    7824:	ldr	r0, [r4, #12]
    7826:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    782a:	ldr	r0, [r4, #12]
    782c:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7830:	movs	r0, #0
    7832:	strb	r0, [r4, #17]
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
  }
    7834:	add	sp, #8
    7836:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    783a:	mov	r1, r6
    783c:	movs	r2, #16
    783e:	mov	r0, r4
    7840:	bl	75d8 <SdSpiCard::readData(unsigned char*, unsigned int)>
    7844:	cmp	r0, #0
    7846:	beq.n	7814 <SdSpiCard::readCSD(csd_t*)+0x34>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7848:	ldrb	r6, [r4, #17]
    784a:	cmp	r6, #0
    784c:	beq.n	7834 <SdSpiCard::readCSD(csd_t*)+0x54>
    784e:	ldr	r3, [r4, #12]
    7850:	movs	r1, #1
    7852:	ldrb	r0, [r3, #8]
    7854:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7858:	movs	r1, #255	; 0xff
    785a:	ldr	r0, [r4, #12]
    785c:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7860:	ldr	r0, [r4, #12]
    7862:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7866:	strb	r5, [r4, #17]
    7868:	mov	r0, r6
    786a:	b.n	7834 <SdSpiCard::readCSD(csd_t*)+0x54>
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    786c:	blx	r3
    786e:	b.n	7802 <SdSpiCard::readCSD(csd_t*)+0x22>
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7870:	movs	r2, #0
    7872:	movs	r1, #12
    7874:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7878:	ldrb	r3, [r4, #17]
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    787a:	mov	r7, r0
    787c:	cmp	r0, #0
    787e:	beq.n	7910 <SdSpiCard::readCSD(csd_t*)+0x130>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7880:	movs	r2, #9
    7882:	strb	r2, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7884:	cmp	r3, #0
    7886:	beq.n	7802 <SdSpiCard::readCSD(csd_t*)+0x22>
    7888:	ldr	r3, [r4, #12]
    788a:	mov	r1, r5
    788c:	b.n	78f6 <SdSpiCard::readCSD(csd_t*)+0x116>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    788e:	ldr.w	r8, [pc, #168]	; 7938 <SdSpiCard::readCSD(csd_t*)+0x158>
    7892:	ldr.w	r3, [r8]
    7896:	str	r3, [sp, #4]
	return ret;
    7898:	ldr	r7, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    789a:	uxth	r7, r7
    789c:	b.n	78b0 <SdSpiCard::readCSD(csd_t*)+0xd0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    789e:	ldr.w	r3, [r8]
    78a2:	str	r3, [sp, #0]
	return ret;
    78a4:	ldr	r3, [sp, #0]
    78a6:	uxth	r3, r3
    78a8:	subs	r3, r3, r7
    78aa:	cmp.w	r3, #600	; 0x258
    78ae:	bgt.n	78e8 <SdSpiCard::readCSD(csd_t*)+0x108>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    78b0:	ldr	r0, [r4, #12]
    78b2:	bl	927c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    78b6:	cmp	r0, #255	; 0xff
    78b8:	mov	r5, r0
    78ba:	bne.n	789e <SdSpiCard::readCSD(csd_t*)+0xbe>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    78bc:	movs	r1, #253	; 0xfd
    78be:	ldr	r0, [r4, #12]
    78c0:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    78c4:	ldrb	r3, [r4, #17]
    78c6:	cmp	r3, #0
    78c8:	beq.n	77fe <SdSpiCard::readCSD(csd_t*)+0x1e>
    78ca:	ldr	r3, [r4, #12]
    78cc:	movs	r1, #1
    78ce:	ldrb	r0, [r3, #8]
    78d0:	bl	9b00 <digitalWrite>
    78d4:	mov	r1, r5
    78d6:	ldr	r0, [r4, #12]
    78d8:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    78dc:	ldr	r0, [r4, #12]
    78de:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    78e2:	movs	r3, #0
    78e4:	strb	r3, [r4, #17]
    78e6:	b.n	77fe <SdSpiCard::readCSD(csd_t*)+0x1e>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    78e8:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    78ea:	movs	r2, #29
    78ec:	strb	r2, [r4, #16]
    78ee:	cmp	r3, #0
    78f0:	beq.n	7802 <SdSpiCard::readCSD(csd_t*)+0x22>
    78f2:	ldr	r3, [r4, #12]
    78f4:	movs	r1, #1
    78f6:	ldrb	r0, [r3, #8]
    78f8:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    78fc:	movs	r1, #255	; 0xff
    78fe:	ldr	r0, [r4, #12]
    7900:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7904:	ldr	r0, [r4, #12]
    7906:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    790a:	movs	r3, #0
    790c:	strb	r3, [r4, #17]
    790e:	b.n	7802 <SdSpiCard::readCSD(csd_t*)+0x22>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7910:	cmp	r3, #0
    7912:	beq.w	77fe <SdSpiCard::readCSD(csd_t*)+0x1e>
    7916:	ldr	r3, [r4, #12]
    7918:	mov	r1, r5
    791a:	ldrb	r0, [r3, #8]
    791c:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7920:	movs	r1, #255	; 0xff
    7922:	ldr	r0, [r4, #12]
    7924:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7928:	ldr	r0, [r4, #12]
    792a:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    792e:	strb	r7, [r4, #17]
    7930:	b.n	77fe <SdSpiCard::readCSD(csd_t*)+0x1e>
    7932:	nop
    7934:	.word	0x00006fe5
    7938:	.word	0x200203bc

0000793c <SdSpiCard::sectorCount()>:
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
  }
  return m_status;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    793c:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    793e:	ldr	r3, [r0, #0]
    7940:	ldr	r1, [pc, #456]	; (7b0c <SdSpiCard::sectorCount()+0x1d0>)
    7942:	ldr	r2, [r3, #52]	; 0x34
    7944:	cmp	r2, r1
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
  }
  return m_status;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    7946:	sub	sp, #28
    7948:	bne.n	79ce <SdSpiCard::sectorCount()+0x92>
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    794a:	ldr	r3, [r3, #20]
    794c:	ldr	r2, [pc, #448]	; (7b10 <SdSpiCard::sectorCount()+0x1d4>)
    794e:	cmp	r3, r2
    7950:	mov	r4, r0
    7952:	bne.w	7a9c <SdSpiCard::sectorCount()+0x160>
#endif  // ENABLE_DEDICATED_SPI
}
//-----------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    7956:	ldrb	r5, [r0, #8]
    7958:	cmp	r5, #1
    795a:	beq.w	7aa0 <SdSpiCard::sectorCount()+0x164>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    795e:	cmp	r5, #2
    7960:	beq.n	7a46 <SdSpiCard::sectorCount()+0x10a>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    7962:	movs	r3, #0
    7964:	strb	r3, [r4, #8]
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
  if (cardCommand(cmd, 0)) {
    7966:	movs	r2, #0
    7968:	movs	r1, #9
    796a:	mov	r0, r4
    796c:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7970:	mov	r5, r0
    7972:	cbz	r0, 79a0 <SdSpiCard::sectorCount()+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7974:	movs	r3, #26
    7976:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7978:	ldrb	r3, [r4, #17]
    797a:	cbnz	r3, 7982 <SdSpiCard::sectorCount()+0x46>
  return m_status;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    797c:	movs	r0, #0
}
    797e:	add	sp, #28
    7980:	pop	{r4, r5, r6, r7, pc}
    7982:	ldr	r3, [r4, #12]
    7984:	movs	r1, #1
    7986:	ldrb	r0, [r3, #8]
    7988:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    798c:	movs	r1, #255	; 0xff
    798e:	ldr	r0, [r4, #12]
    7990:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7994:	ldr	r0, [r4, #12]
    7996:	bl	9234 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    799a:	movs	r3, #0
    799c:	strb	r3, [r4, #17]
    799e:	b.n	797c <SdSpiCard::sectorCount()+0x40>
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    79a0:	movs	r2, #16
    79a2:	add	r1, sp, #8
    79a4:	mov	r0, r4
    79a6:	bl	75d8 <SdSpiCard::readData(unsigned char*, unsigned int)>
    79aa:	cmp	r0, #0
    79ac:	beq.n	7978 <SdSpiCard::sectorCount()+0x3c>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    79ae:	ldrb	r3, [r4, #17]
    79b0:	cbz	r3, 79d6 <SdSpiCard::sectorCount()+0x9a>
    79b2:	ldr	r3, [r4, #12]
    79b4:	movs	r1, #1
    79b6:	ldrb	r0, [r3, #8]
    79b8:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    79bc:	movs	r1, #255	; 0xff
    79be:	ldr	r0, [r4, #12]
    79c0:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    79c4:	ldr	r0, [r4, #12]
    79c6:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    79ca:	strb	r5, [r4, #17]
    79cc:	b.n	79d6 <SdSpiCard::sectorCount()+0x9a>
  return m_status;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    79ce:	add	r1, sp, #8
    79d0:	blx	r2
    79d2:	cmp	r0, #0
    79d4:	beq.n	797c <SdSpiCard::sectorCount()+0x40>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    79d6:	ldrb.w	r3, [sp, #8]
    79da:	ands.w	r3, r3, #192	; 0xc0
    79de:	beq.n	7a04 <SdSpiCard::sectorCount()+0xc8>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    79e0:	cmp	r3, #64	; 0x40
    79e2:	bne.n	797c <SdSpiCard::sectorCount()+0x40>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    79e4:	ldrb.w	r3, [sp, #17]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    79e8:	ldrb.w	r1, [sp, #15]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    79ec:	ldrb.w	r0, [sp, #16]
    79f0:	adds	r2, r3, #1
    79f2:	and.w	r3, r1, #63	; 0x3f
    79f6:	add.w	r3, r2, r3, lsl #16
    79fa:	add.w	r0, r3, r0, lsl #8
    79fe:	lsls	r0, r0, #10
}
    7a00:	add	sp, #28
    7a02:	pop	{r4, r5, r6, r7, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7a04:	ldrb.w	r4, [sp, #17]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7a08:	ldrb.w	r3, [sp, #14]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7a0c:	ldrb.w	r2, [sp, #15]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7a10:	ldrb.w	r0, [sp, #18]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7a14:	ldrb.w	r1, [sp, #13]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7a18:	ldrb.w	r5, [sp, #16]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7a1c:	and.w	r4, r4, #3
    7a20:	lsls	r4, r4, #1
    7a22:	lsls	r2, r2, #2
    7a24:	and.w	r3, r3, #3
    7a28:	orr.w	r0, r4, r0, lsr #7
    7a2c:	and.w	r1, r1, #15
    7a30:	orr.w	r3, r2, r3, lsl #10
    7a34:	add	r0, r1
    7a36:	orr.w	r3, r3, r5, lsr #6
    7a3a:	adds	r3, #1
    7a3c:	subs	r0, #7
    7a3e:	lsl.w	r0, r3, r0
    7a42:	add	sp, #28
    7a44:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7a46:	ldr	r7, [pc, #204]	; (7b14 <SdSpiCard::sectorCount()+0x1d8>)
    7a48:	ldr	r3, [r7, #0]
    7a4a:	str	r3, [sp, #4]
	return ret;
    7a4c:	ldr	r6, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7a4e:	uxth	r6, r6
    7a50:	b.n	7a62 <SdSpiCard::sectorCount()+0x126>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7a52:	ldr	r3, [r7, #0]
    7a54:	str	r3, [sp, #0]
	return ret;
    7a56:	ldr	r3, [sp, #0]
    7a58:	uxth	r3, r3
    7a5a:	subs	r3, r3, r6
    7a5c:	cmp.w	r3, #600	; 0x258
    7a60:	bgt.n	7ad6 <SdSpiCard::sectorCount()+0x19a>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7a62:	ldr	r0, [r4, #12]
    7a64:	bl	927c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7a68:	cmp	r0, #255	; 0xff
    7a6a:	mov	r5, r0
    7a6c:	bne.n	7a52 <SdSpiCard::sectorCount()+0x116>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7a6e:	movs	r1, #253	; 0xfd
    7a70:	ldr	r0, [r4, #12]
    7a72:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7a76:	ldrb	r3, [r4, #17]
    7a78:	cmp	r3, #0
    7a7a:	beq.w	7962 <SdSpiCard::sectorCount()+0x26>
    7a7e:	ldr	r3, [r4, #12]
    7a80:	movs	r1, #1
    7a82:	ldrb	r0, [r3, #8]
    7a84:	bl	9b00 <digitalWrite>
    7a88:	mov	r1, r5
    7a8a:	ldr	r0, [r4, #12]
    7a8c:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7a90:	ldr	r0, [r4, #12]
    7a92:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7a96:	movs	r3, #0
    7a98:	strb	r3, [r4, #17]
    7a9a:	b.n	7962 <SdSpiCard::sectorCount()+0x26>
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7a9c:	blx	r3
    7a9e:	b.n	7966 <SdSpiCard::sectorCount()+0x2a>
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7aa0:	movs	r2, #0
    7aa2:	movs	r1, #12
    7aa4:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7aa8:	ldrb	r3, [r4, #17]
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7aaa:	mov	r6, r0
    7aac:	cbz	r0, 7ae8 <SdSpiCard::sectorCount()+0x1ac>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7aae:	movs	r2, #9
    7ab0:	strb	r2, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7ab2:	cmp	r3, #0
    7ab4:	beq.w	7966 <SdSpiCard::sectorCount()+0x2a>
    7ab8:	ldr	r3, [r4, #12]
    7aba:	mov	r1, r5
    7abc:	ldrb	r0, [r3, #8]
    7abe:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7ac2:	movs	r1, #255	; 0xff
    7ac4:	ldr	r0, [r4, #12]
    7ac6:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7aca:	ldr	r0, [r4, #12]
    7acc:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7ad0:	movs	r3, #0
    7ad2:	strb	r3, [r4, #17]
    7ad4:	b.n	7966 <SdSpiCard::sectorCount()+0x2a>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7ad6:	ldrb	r3, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7ad8:	movs	r2, #29
    7ada:	strb	r2, [r4, #16]
    7adc:	cmp	r3, #0
    7ade:	beq.w	7966 <SdSpiCard::sectorCount()+0x2a>
    7ae2:	ldr	r3, [r4, #12]
    7ae4:	movs	r1, #1
    7ae6:	b.n	7abc <SdSpiCard::sectorCount()+0x180>
    7ae8:	cmp	r3, #0
    7aea:	beq.w	7962 <SdSpiCard::sectorCount()+0x26>
    7aee:	ldr	r3, [r4, #12]
    7af0:	mov	r1, r5
    7af2:	ldrb	r0, [r3, #8]
    7af4:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7af8:	movs	r1, #255	; 0xff
    7afa:	ldr	r0, [r4, #12]
    7afc:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7b00:	ldr	r0, [r4, #12]
    7b02:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7b06:	strb	r6, [r4, #17]
    7b08:	b.n	7962 <SdSpiCard::sectorCount()+0x26>
    7b0a:	nop
    7b0c:	.word	0x000077e1
    7b10:	.word	0x00006fe5
    7b14:	.word	0x200203bc

00007b18 <SdSpiCard::erase(unsigned long, unsigned long)>:
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7b18:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    7b1c:	ldr	r3, [r0, #0]
    7b1e:	ldr.w	lr, [pc, #360]	; 7c88 <SdSpiCard::erase(unsigned long, unsigned long)+0x170>
    7b22:	ldr	r7, [r3, #52]	; 0x34
    7b24:	cmp	r7, lr
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7b26:	sub	sp, #24
    7b28:	mov	r4, r0
    7b2a:	mov	r5, r1
    7b2c:	mov	r6, r2
    7b2e:	bne.n	7ba0 <SdSpiCard::erase(unsigned long, unsigned long)+0x88>
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7b30:	ldr	r3, [r3, #20]
    7b32:	blx	r3
  if (cardCommand(cmd, 0)) {
    7b34:	movs	r2, #0
    7b36:	movs	r1, #9
    7b38:	mov	r0, r4
    7b3a:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7b3e:	mov	r7, r0
    7b40:	cbz	r0, 7b72 <SdSpiCard::erase(unsigned long, unsigned long)+0x5a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7b42:	movs	r3, #26
    7b44:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7b46:	ldrb	r3, [r4, #17]
    7b48:	cbnz	r3, 7b54 <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    7b4a:	movs	r5, #0
}
    7b4c:	mov	r0, r5
    7b4e:	add	sp, #24
    7b50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b54:	ldr	r3, [r4, #12]
    7b56:	movs	r1, #1
    7b58:	ldrb	r0, [r3, #8]
    7b5a:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7b5e:	movs	r1, #255	; 0xff
    7b60:	ldr	r0, [r4, #12]
    7b62:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7b66:	ldr	r0, [r4, #12]
    7b68:	bl	9234 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7b6c:	movs	r3, #0
    7b6e:	strb	r3, [r4, #17]
    7b70:	b.n	7b4a <SdSpiCard::erase(unsigned long, unsigned long)+0x32>
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    7b72:	movs	r2, #16
    7b74:	add	r1, sp, #8
    7b76:	mov	r0, r4
    7b78:	bl	75d8 <SdSpiCard::readData(unsigned char*, unsigned int)>
    7b7c:	cmp	r0, #0
    7b7e:	beq.n	7b46 <SdSpiCard::erase(unsigned long, unsigned long)+0x2e>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7b80:	ldrb	r3, [r4, #17]
    7b82:	cbz	r3, 7ba6 <SdSpiCard::erase(unsigned long, unsigned long)+0x8e>
    7b84:	ldr	r3, [r4, #12]
    7b86:	movs	r1, #1
    7b88:	ldrb	r0, [r3, #8]
    7b8a:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7b8e:	movs	r1, #255	; 0xff
    7b90:	ldr	r0, [r4, #12]
    7b92:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7b96:	ldr	r0, [r4, #12]
    7b98:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7b9c:	strb	r7, [r4, #17]
    7b9e:	b.n	7ba6 <SdSpiCard::erase(unsigned long, unsigned long)+0x8e>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    7ba0:	add	r1, sp, #8
    7ba2:	blx	r7
    7ba4:	cbz	r0, 7be2 <SdSpiCard::erase(unsigned long, unsigned long)+0xca>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    7ba6:	ldrb.w	r3, [sp, #18]
    7baa:	lsls	r2, r3, #25
    7bac:	bmi.n	7bc4 <SdSpiCard::erase(unsigned long, unsigned long)+0xac>
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7bae:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    7bb2:	ldrb.w	r1, [sp, #19]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7bb6:	lsls	r3, r3, #1
    7bb8:	adds	r2, r6, #1
    7bba:	orr.w	r3, r3, r1, lsr #7
    7bbe:	orrs	r2, r5
    7bc0:	tst	r3, r2
    7bc2:	bne.n	7c0c <SdSpiCard::erase(unsigned long, unsigned long)+0xf4>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    7bc4:	ldrb	r3, [r4, #19]
    7bc6:	cmp	r3, #3
    firstSector <<= 9;
    7bc8:	it	ne
    7bca:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    7bcc:	mov	r2, r5
    7bce:	mov.w	r1, #32
    7bd2:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    7bd4:	it	ne
    7bd6:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    7bd8:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    7bdc:	cbz	r0, 7c12 <SdSpiCard::erase(unsigned long, unsigned long)+0xfa>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7bde:	movs	r3, #35	; 0x23
    7be0:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7be2:	ldrb	r3, [r4, #17]
    7be4:	cmp	r3, #0
    7be6:	beq.n	7b4a <SdSpiCard::erase(unsigned long, unsigned long)+0x32>
    7be8:	ldr	r3, [r4, #12]
    7bea:	movs	r1, #1
    7bec:	ldrb	r0, [r3, #8]
    7bee:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7bf2:	movs	r1, #255	; 0xff
    7bf4:	ldr	r0, [r4, #12]
    7bf6:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7bfa:	ldr	r0, [r4, #12]
    7bfc:	bl	9234 <SdSpiAltDriver::deactivate()>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7c00:	movs	r5, #0
  return true;

fail:
  spiStop();
  return false;
}
    7c02:	mov	r0, r5
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7c04:	strb	r5, [r4, #17]
  return true;

fail:
  spiStop();
  return false;
}
    7c06:	add	sp, #24
    7c08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7c0c:	movs	r3, #36	; 0x24
    7c0e:	strb	r3, [r4, #16]
    7c10:	b.n	7be2 <SdSpiCard::erase(unsigned long, unsigned long)+0xca>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    7c12:	mov	r2, r6
    7c14:	movs	r1, #33	; 0x21
    7c16:	mov	r0, r4
    7c18:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7c1c:	cmp	r0, #0
    7c1e:	bne.n	7bde <SdSpiCard::erase(unsigned long, unsigned long)+0xc6>
      || cardCommand(CMD38, 0)) {
    7c20:	mov	r2, r0
    7c22:	movs	r1, #38	; 0x26
    7c24:	mov	r0, r4
    7c26:	bl	6e5c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7c2a:	cmp	r0, #0
    7c2c:	bne.n	7bde <SdSpiCard::erase(unsigned long, unsigned long)+0xc6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7c2e:	ldr	r7, [pc, #84]	; (7c84 <SdSpiCard::erase(unsigned long, unsigned long)+0x16c>)
    7c30:	ldr	r3, [r7, #0]
    7c32:	str	r3, [sp, #4]
	return ret;
    7c34:	ldr	r5, [sp, #4]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7c36:	movw	r8, #10000	; 0x2710
    7c3a:	uxth	r5, r5
    7c3c:	b.n	7c4c <SdSpiCard::erase(unsigned long, unsigned long)+0x134>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7c3e:	ldr	r3, [r7, #0]
    7c40:	str	r3, [sp, #0]
	return ret;
    7c42:	ldr	r3, [sp, #0]
    7c44:	uxth	r3, r3
    7c46:	subs	r3, r3, r5
    7c48:	cmp	r3, r8
    7c4a:	bgt.n	7c60 <SdSpiCard::erase(unsigned long, unsigned long)+0x148>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
    7c4c:	ldr	r0, [r4, #12]
    7c4e:	bl	927c <SdSpiAltDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7c52:	cmp	r0, #255	; 0xff
    7c54:	mov	r6, r0
    7c56:	bne.n	7c3e <SdSpiCard::erase(unsigned long, unsigned long)+0x126>
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7c58:	ldrb	r5, [r4, #17]
    7c5a:	cbnz	r5, 7c66 <SdSpiCard::erase(unsigned long, unsigned long)+0x14e>
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  spiStop();
  return true;
    7c5c:	movs	r5, #1
    7c5e:	b.n	7b4c <SdSpiCard::erase(unsigned long, unsigned long)+0x34>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7c60:	movs	r3, #37	; 0x25
    7c62:	strb	r3, [r4, #16]
    7c64:	b.n	7be2 <SdSpiCard::erase(unsigned long, unsigned long)+0xca>
    7c66:	ldr	r3, [r4, #12]
    7c68:	movs	r1, #1
    7c6a:	ldrb	r0, [r3, #8]
    7c6c:	bl	9b00 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
    7c70:	mov	r1, r6
    7c72:	ldr	r0, [r4, #12]
    7c74:	bl	92b8 <SdSpiAltDriver::send(unsigned char)>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
    7c78:	ldr	r0, [r4, #12]
    7c7a:	bl	9234 <SdSpiAltDriver::deactivate()>
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7c7e:	movs	r3, #0
    7c80:	strb	r3, [r4, #17]
    7c82:	b.n	7b4c <SdSpiCard::erase(unsigned long, unsigned long)+0x34>
    7c84:	.word	0x200203bc
    7c88:	.word	0x000077e1

00007c8c <m_sdhc_isr()>:
  m_errorLine = line;
  return false;  // setSdErrorCode
}
//=============================================================================
// ISR
static void m_sdhc_isr() {
    7c8c:	push	{r4}
  SDHC_IRQSIGEN = 0;
    7c8e:	ldr	r4, [pc, #28]	; (7cac <m_sdhc_isr()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    7c90:	ldr	r2, [pc, #28]	; (7cb0 <m_sdhc_isr()+0x24>)
    7c92:	ldr	r1, [pc, #32]	; (7cb4 <m_sdhc_isr()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
  m_dmaBusy = false;
    7c94:	ldr	r0, [pc, #32]	; (7cb8 <m_sdhc_isr()+0x2c>)
  return false;  // setSdErrorCode
}
//=============================================================================
// ISR
static void m_sdhc_isr() {
  SDHC_IRQSIGEN = 0;
    7c96:	movs	r3, #0
    7c98:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    7c9a:	ldr	r4, [r2, #0]
    7c9c:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    7c9e:	ldr	r1, [r1, #0]
    7ca0:	str	r1, [r2, #0]
  m_dmaBusy = false;
}
    7ca2:	ldr.w	r4, [sp], #4
// ISR
static void m_sdhc_isr() {
  SDHC_IRQSIGEN = 0;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  m_dmaBusy = false;
    7ca6:	strb	r3, [r0, #0]
}
    7ca8:	bx	lr
    7caa:	nop
    7cac:	.word	0x400b1038
    7cb0:	.word	0x400b1030
    7cb4:	.word	0x20020380
    7cb8:	.word	0x2002039c

00007cbc <isBusyDMA()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//-----------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    7cbc:	ldr	r3, [pc, #4]	; (7cc4 <isBusyDMA()+0x8>)
    7cbe:	ldrb	r0, [r3, #0]
}
    7cc0:	bx	lr
    7cc2:	nop
    7cc4:	.word	0x2002039c

00007cc8 <SdioCard::errorCode() const>:
  }
  return true;
}
//-----------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    7cc8:	ldr	r3, [pc, #4]	; (7cd0 <SdioCard::errorCode() const+0x8>)
}
    7cca:	ldrb	r0, [r3, #0]
    7ccc:	bx	lr
    7cce:	nop
    7cd0:	.word	0x1fff088c

00007cd4 <SdioCard::errorData() const>:
//-----------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    7cd4:	ldr	r3, [pc, #4]	; (7cdc <SdioCard::errorData() const+0x8>)
    7cd6:	ldr	r0, [r3, #0]
}
    7cd8:	bx	lr
    7cda:	nop
    7cdc:	.word	0x20020380

00007ce0 <SdioCard::readCID(CID*)>:
    }
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    7ce0:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    7ce2:	ldr	r4, [pc, #20]	; (7cf8 <SdioCard::readCID(CID*)+0x18>)
    }
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    7ce4:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    7ce6:	ldmia	r4!, {r0, r1, r2, r3}
    7ce8:	str	r0, [r5, #0]
    7cea:	str	r1, [r5, #4]
    7cec:	str	r2, [r5, #8]
    7cee:	str	r3, [r5, #12]
  return true;
}
    7cf0:	movs	r0, #1
    7cf2:	pop	{r4, r5}
    7cf4:	bx	lr
    7cf6:	nop
    7cf8:	.word	0x20020364

00007cfc <SdioCard::readCSD(csd_t*)>:
//-----------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7cfc:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    7cfe:	ldr	r4, [pc, #20]	; (7d14 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7d00:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    7d02:	ldmia	r4!, {r0, r1, r2, r3}
    7d04:	str	r0, [r5, #0]
    7d06:	str	r1, [r5, #4]
    7d08:	str	r2, [r5, #8]
    7d0a:	str	r3, [r5, #12]
  return true;
}
    7d0c:	movs	r0, #1
    7d0e:	pop	{r4, r5}
    7d10:	bx	lr
    7d12:	nop
    7d14:	.word	0x2002038c

00007d18 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    7d18:	ldr	r3, [pc, #8]	; (7d24 <SdioCard::readOCR(unsigned long*)+0xc>)
    7d1a:	ldr	r3, [r3, #0]
    7d1c:	str	r3, [r1, #0]
  return true;
}
    7d1e:	movs	r0, #1
    7d20:	bx	lr
    7d22:	nop
    7d24:	.word	0x20020378

00007d28 <SdioCard::writeStart(unsigned long)>:
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d28:	ldr	r1, [pc, #16]	; (7d3c <SdioCard::writeStart(unsigned long)+0x14>)
  m_errorLine = line;
    7d2a:	ldr	r3, [pc, #20]	; (7d40 <SdioCard::writeStart(unsigned long)+0x18>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d2c:	movs	r0, #40	; 0x28
  m_errorLine = line;
    7d2e:	movw	r2, #1297	; 0x511
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d32:	strb	r0, [r1, #0]
  m_errorLine = line;
    7d34:	str	r2, [r3, #0]
}
//-----------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  // K66/K65 Errata - SDHC: Does not support Infinite Sector Transfer Mode.
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
    7d36:	movs	r0, #0
    7d38:	bx	lr
    7d3a:	nop
    7d3c:	.word	0x1fff088c
    7d40:	.word	0x2002037c

00007d44 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    7d44:	bx	lr
    7d46:	nop

00007d48 <SdioCard::~SdioCard()>:
    7d48:	push	{r4, lr}
    7d4a:	movs	r1, #16
    7d4c:	mov	r4, r0
    7d4e:	bl	b0a8 <operator delete(void*, unsigned int)>
    7d52:	mov	r0, r4
    7d54:	pop	{r4, pc}
    7d56:	nop

00007d58 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    7d58:	ldr	r3, [pc, #20]	; (7d70 <SdioCard::type() const+0x18>)
    7d5a:	ldrb	r3, [r3, #0]
    7d5c:	cbz	r3, 7d6c <SdioCard::type() const+0x14>
    7d5e:	ldr	r3, [pc, #20]	; (7d74 <SdioCard::type() const+0x1c>)
    7d60:	ldrb	r3, [r3, #0]
    7d62:	cmp	r3, #0
    7d64:	ite	ne
    7d66:	movne	r0, #3
    7d68:	moveq	r0, #2
    7d6a:	bx	lr
    7d6c:	movs	r0, #1
}
    7d6e:	bx	lr
    7d70:	.word	0x20020374
    7d74:	.word	0x20020375

00007d78 <SdioCard::sectorCount()>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//-----------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    7d78:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7d7a:	ldr	r1, [pc, #100]	; (7de0 <SdioCard::sectorCount()+0x68>)
    7d7c:	ldrb	r3, [r1, #0]
    7d7e:	ands.w	r3, r3, #192	; 0xc0
    7d82:	beq.n	7da8 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7d84:	cmp	r3, #64	; 0x40
    7d86:	beq.n	7d8e <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    7d88:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    7d8a:	pop	{r4, r5, r6}
    7d8c:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7d8e:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7d90:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7d92:	ldrb	r0, [r1, #8]
    7d94:	adds	r2, r3, #1
    7d96:	and.w	r3, r4, #63	; 0x3f
    7d9a:	add.w	r3, r2, r3, lsl #16
    7d9e:	add.w	r0, r3, r0, lsl #8
    7da2:	lsls	r0, r0, #10
    7da4:	pop	{r4, r5, r6}
    7da6:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7da8:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7daa:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7dac:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7dae:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7db0:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7db2:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7db4:	and.w	r1, r5, #3
    7db8:	lsls	r1, r1, #1
    7dba:	and.w	r3, r3, #3
    7dbe:	lsls	r2, r2, #2
    7dc0:	orr.w	r0, r1, r0, lsr #7
    7dc4:	orr.w	r3, r2, r3, lsl #10
    7dc8:	and.w	r1, r4, #15
    7dcc:	orr.w	r3, r3, r6, lsr #6
    7dd0:	add	r0, r1
    7dd2:	subs	r0, #7
    7dd4:	adds	r3, #1
    7dd6:	lsl.w	r0, r3, r0
    7dda:	pop	{r4, r5, r6}
    7ddc:	bx	lr
    7dde:	nop
    7de0:	.word	0x2002038c

00007de4 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//-----------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7de4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DBG_IRQSTAT();
    7de8:	ldr	r4, [pc, #156]	; (7e88 <cardCommand(unsigned long, unsigned long)+0xa4>)
    7dea:	ldr	r3, [r4, #0]
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//-----------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7dec:	mov	r7, r0
    7dee:	mov	r8, r1
  DBG_IRQSTAT();
    7df0:	cmp	r3, #0
    7df2:	bne.n	7e5a <cardCommand(unsigned long, unsigned long)+0x76>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7df4:	bl	9bc0 <micros>
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT &(SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//-----------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    7df8:	ldr	r4, [pc, #144]	; (7e8c <cardCommand(unsigned long, unsigned long)+0xa8>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7dfa:	ldr	r6, [pc, #148]	; (7e90 <cardCommand(unsigned long, unsigned long)+0xac>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7dfc:	mov	r5, r0
    7dfe:	b.n	7e0a <cardCommand(unsigned long, unsigned long)+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7e00:	bl	9bc0 <micros>
    7e04:	subs	r0, r0, r5
    7e06:	cmp	r0, r6
    7e08:	bhi.n	7e54 <cardCommand(unsigned long, unsigned long)+0x70>
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT &(SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//-----------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    7e0a:	ldr	r3, [r4, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7e0c:	lsls	r1, r3, #31
    7e0e:	bmi.n	7e00 <cardCommand(unsigned long, unsigned long)+0x1c>
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    7e10:	ldr	r2, [pc, #128]	; (7e94 <cardCommand(unsigned long, unsigned long)+0xb0>)
  SDHC_XFERTYP = xfertyp;
    7e12:	ldr	r3, [pc, #132]	; (7e98 <cardCommand(unsigned long, unsigned long)+0xb4>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    7e14:	str.w	r8, [r2]
  SDHC_XFERTYP = xfertyp;
    7e18:	str	r7, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7e1a:	bl	9bc0 <micros>
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//-----------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT &(SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    7e1e:	ldr	r4, [pc, #104]	; (7e88 <cardCommand(unsigned long, unsigned long)+0xa4>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7e20:	ldr	r5, [pc, #108]	; (7e90 <cardCommand(unsigned long, unsigned long)+0xac>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7e22:	mov	r6, r0
    7e24:	b.n	7e30 <cardCommand(unsigned long, unsigned long)+0x4c>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7e26:	bl	9bc0 <micros>
    7e2a:	subs	r0, r0, r6
    7e2c:	cmp	r0, r5
    7e2e:	bhi.n	7e54 <cardCommand(unsigned long, unsigned long)+0x70>
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//-----------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT &(SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    7e30:	ldr	r2, [r4, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7e32:	ldr	r3, [pc, #104]	; (7e9c <cardCommand(unsigned long, unsigned long)+0xb8>)
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//-----------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT &(SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    7e34:	ldr	r1, [pc, #80]	; (7e88 <cardCommand(unsigned long, unsigned long)+0xa4>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7e36:	ands	r3, r2
    7e38:	cmp	r3, #0
    7e3a:	beq.n	7e26 <cardCommand(unsigned long, unsigned long)+0x42>
  SDHC_CMDARG = arg;
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    7e3c:	ldr	r3, [pc, #96]	; (7ea0 <cardCommand(unsigned long, unsigned long)+0xbc>)
    7e3e:	ldr	r2, [r1, #0]
    7e40:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7e42:	ldr	r2, [r3, #0]
    7e44:	str	r2, [r1, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7e46:	ldr	r2, [r3, #0]
    7e48:	lsls	r2, r2, #31
    7e4a:	bpl.n	7e54 <cardCommand(unsigned long, unsigned long)+0x70>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    7e4c:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7e4e:	tst.w	r3, #983040	; 0xf0000
    7e52:	beq.n	7e80 <cardCommand(unsigned long, unsigned long)+0x9c>
    7e54:	movs	r0, #0
    7e56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7e5a:	movw	r1, #527	; 0x20f
    7e5e:	ldr	r0, [pc, #68]	; (7ea4 <cardCommand(unsigned long, unsigned long)+0xc0>)
    7e60:	bl	adbc <Print::print(long)>
    7e64:	movs	r1, #9
    7e66:	ldr	r0, [pc, #64]	; (7ea8 <cardCommand(unsigned long, unsigned long)+0xc4>)
    7e68:	bl	9524 <usb_serial_write>
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//-----------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
    7e6c:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    7e6e:	ldr	r0, [pc, #52]	; (7ea4 <cardCommand(unsigned long, unsigned long)+0xc0>)
    7e70:	movs	r3, #0
    7e72:	movs	r2, #16
    7e74:	bl	aeb8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    7e78:	ldr	r0, [pc, #40]	; (7ea4 <cardCommand(unsigned long, unsigned long)+0xc0>)
    7e7a:	bl	ae6c <Print::println()>
    7e7e:	b.n	7df4 <cardCommand(unsigned long, unsigned long)+0x10>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7e80:	movs	r0, #1
    7e82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e86:	nop
    7e88:	.word	0x400b1030
    7e8c:	.word	0x400b1024
    7e90:	.word	0x000f4240
    7e94:	.word	0x400b1008
    7e98:	.word	0x400b100c
    7e9c:	.word	0x000f0001
    7ea0:	.word	0x20020380
    7ea4:	.word	0x1fff0898
    7ea8:	.word	0x00013ca0

00007eac <isBusyCMD13()>:
//-----------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
    7eac:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    7eae:	ldr	r3, [pc, #28]	; (7ecc <isBusyCMD13()+0x20>)
    7eb0:	ldr	r0, [pc, #28]	; (7ed0 <isBusyCMD13()+0x24>)
    7eb2:	ldr	r1, [r3, #0]
    7eb4:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    7eb8:	cbz	r0, 7ec8 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    7eba:	ldr	r3, [pc, #24]	; (7ed4 <isBusyCMD13()+0x28>)
    7ebc:	ldr	r0, [r3, #0]
    7ebe:	eor.w	r0, r0, #256	; 0x100
    7ec2:	ubfx	r0, r0, #8, #1
    7ec6:	pop	{r3, pc}
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    7ec8:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    7eca:	pop	{r3, pc}
    7ecc:	.word	0x20020384
    7ed0:	.word	0x0d1a0000
    7ed4:	.word	0x400b1010

00007ed8 <SdioCard::status()>:
//-----------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//-----------------------------------------------------------------------------
uint32_t SdioCard::status() {
    7ed8:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//-----------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7eda:	ldr	r3, [pc, #16]	; (7eec <SdioCard::status()+0x14>)
    7edc:	ldr	r0, [pc, #16]	; (7ef0 <SdioCard::status()+0x18>)
    7ede:	ldr	r1, [r3, #0]
    7ee0:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    7ee4:	cbz	r0, 7eea <SdioCard::status()+0x12>
    7ee6:	ldr	r3, [pc, #12]	; (7ef4 <SdioCard::status()+0x1c>)
    7ee8:	ldr	r0, [r3, #0]
  return transferStop();
}
//-----------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    7eea:	pop	{r3, pc}
    7eec:	.word	0x20020384
    7ef0:	.word	0x0d1a0000
    7ef4:	.word	0x400b1010

00007ef8 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//-----------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    7ef8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7efc:	mov	r9, r0
    7efe:	mov	sl, r1
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7f00:	bl	9bc0 <micros>
    7f04:	ldr	r5, [pc, #200]	; (7fd0 <cardCMD6(unsigned long, unsigned char*)+0xd8>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    7f06:	ldr.w	r8, [pc, #264]	; 8010 <cardCMD6(unsigned long, unsigned char*)+0x118>
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7f0a:	ldr	r7, [pc, #200]	; (7fd4 <cardCMD6(unsigned long, unsigned char*)+0xdc>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7f0c:	mov	r6, r0
    7f0e:	b.n	7f1a <cardCMD6(unsigned long, unsigned char*)+0x22>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7f10:	bl	9bc0 <micros>
    7f14:	subs	r0, r0, r6
    7f16:	cmp	r0, r7
    7f18:	bhi.n	7fa0 <cardCMD6(unsigned long, unsigned char*)+0xa8>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    7f1a:	ldr	r1, [r5, #0]
    7f1c:	ldr	r0, [pc, #184]	; (7fd8 <cardCMD6(unsigned long, unsigned char*)+0xe0>)
    7f1e:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    7f22:	mov	r4, r0
    7f24:	cmp	r0, #0
    7f26:	beq.n	7f10 <cardCMD6(unsigned long, unsigned char*)+0x18>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    7f28:	ldr.w	r3, [r8]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7f2c:	lsls	r2, r3, #23
    7f2e:	bpl.n	7f10 <cardCMD6(unsigned long, unsigned char*)+0x18>
	  }
	}		
#endif
//-----------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7f30:	ldr	r5, [pc, #168]	; (7fdc <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  m_irqstat = 0;
    7f32:	ldr	r7, [pc, #172]	; (7fe0 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    7f34:	ldr	r2, [pc, #172]	; (7fe4 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  SDHC_CMDARG = arg;
    7f36:	ldr	r0, [pc, #176]	; (7fe8 <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7f38:	ldr	r1, [pc, #176]	; (7fec <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7f3a:	ldr	r3, [pc, #180]	; (7ff0 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
	  }
	}		
#endif
//-----------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7f3c:	movs	r6, #1
    7f3e:	strb	r6, [r5, #0]
  m_irqstat = 0;
    7f40:	movs	r6, #0
    7f42:	str	r6, [r7, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_CMDARG = arg;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7f44:	ldr	r6, [pc, #172]	; (7ff4 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    7f46:	str.w	sl, [r2]
  SDHC_CMDARG = arg;
    7f4a:	str.w	r9, [r0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7f4e:	str	r6, [r1, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7f50:	ldr	r0, [pc, #164]	; (7ff8 <cardCMD6(unsigned long, unsigned char*)+0x100>)
  SDHC_XFERTYP = CMD6_XFERTYP;
    7f52:	ldr	r1, [pc, #168]	; (7ffc <cardCMD6(unsigned long, unsigned char*)+0x104>)
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    7f54:	ldr.w	r9, [pc, #188]	; 8014 <cardCMD6(unsigned long, unsigned char*)+0x11c>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_CMDARG = arg;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7f58:	str	r0, [r3, #0]
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    7f5a:	ldr	r3, [pc, #164]	; (8000 <cardCMD6(unsigned long, unsigned char*)+0x108>)
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_CMDARG = arg;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = CMD6_XFERTYP;
    7f5c:	str	r1, [r2, #12]
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    7f5e:	str.w	r3, [r9]
  uint32_t m = micros();
    7f62:	bl	9bc0 <micros>
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//-----------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    7f66:	ldrb	r3, [r5, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
    7f68:	mov	r6, r0
  while (fcn()) {
    7f6a:	cbz	r3, 7fb6 <cardCMD6(unsigned long, unsigned char*)+0xbe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7f6c:	ldr.w	r8, [pc, #100]	; 7fd4 <cardCMD6(unsigned long, unsigned char*)+0xdc>
    7f70:	b.n	7f7a <cardCMD6(unsigned long, unsigned char*)+0x82>
      m_busyFcn = 0;
      return true;
    }
    yield();
    7f72:	bl	1708 <yield>
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//-----------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    7f76:	ldrb	r3, [r5, #0]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    7f78:	cbz	r3, 7fb6 <cardCMD6(unsigned long, unsigned char*)+0xbe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7f7a:	bl	9bc0 <micros>
    7f7e:	subs	r0, r0, r6
    7f80:	cmp	r0, r8
    7f82:	bls.n	7f72 <cardCMD6(unsigned long, unsigned char*)+0x7a>
      m_busyFcn = 0;
    7f84:	movs	r3, #0
    7f86:	str.w	r3, [r9]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f8a:	ldr	r1, [pc, #120]	; (8004 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
  m_errorLine = line;
    7f8c:	ldr	r3, [pc, #120]	; (8008 <cardCMD6(unsigned long, unsigned char*)+0x110>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f8e:	movs	r0, #4
  m_errorLine = line;
    7f90:	mov.w	r2, #556	; 0x22c
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f94:	strb	r0, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = CMD6_XFERTYP;

  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_CMD6);
    7f96:	movs	r4, #0
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7f98:	str	r2, [r3, #0]

  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  return true;
}
    7f9a:	mov	r0, r4
    7f9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fa0:	ldr	r1, [pc, #96]	; (8004 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
  m_errorLine = line;
    7fa2:	ldr	r3, [pc, #100]	; (8008 <cardCMD6(unsigned long, unsigned char*)+0x110>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fa4:	movs	r0, #10
  m_errorLine = line;
    7fa6:	movw	r2, #546	; 0x222
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7faa:	strb	r0, [r1, #0]
  m_errorLine = line;
    7fac:	str	r2, [r3, #0]
}
//-----------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7fae:	movs	r4, #0

  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  return true;
}
    7fb0:	mov	r0, r4
    7fb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7fb6:	ldr	r3, [r7, #0]
    7fb8:	ldr	r1, [pc, #36]	; (7fe0 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    7fba:	movs	r2, #0
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7fbc:	lsls	r3, r3, #30
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    7fbe:	str.w	r2, [r9]
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7fc2:	bpl.n	7f8a <cardCMD6(unsigned long, unsigned char*)+0x92>
    7fc4:	ldr	r2, [r1, #0]
    7fc6:	ldr	r3, [pc, #68]	; (800c <cardCMD6(unsigned long, unsigned char*)+0x114>)
    7fc8:	ands	r3, r2
    7fca:	cmp	r3, #0
    7fcc:	bne.n	7f8a <cardCMD6(unsigned long, unsigned char*)+0x92>
    7fce:	b.n	7fb0 <cardCMD6(unsigned long, unsigned char*)+0xb8>
    7fd0:	.word	0x20020384
    7fd4:	.word	0x000f4240
    7fd8:	.word	0x0d1a0000
    7fdc:	.word	0x2002039c
    7fe0:	.word	0x20020380
    7fe4:	.word	0x400b1000
    7fe8:	.word	0x400b1008
    7fec:	.word	0x400b1004
    7ff0:	.word	0x400b1038
    7ff4:	.word	0x00010040
    7ff8:	.word	0x117f0002
    7ffc:	.word	0x063a0011
    8000:	.word	0x00007cbd
    8004:	.word	0x1fff088c
    8008:	.word	0x2002037c
    800c:	.word	0x117f0000
    8010:	.word	0x400b1010
    8014:	.word	0x200203a0

00008018 <SdioCard::erase(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//-----------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8018:	push	{r3, r4, r5, r6, r7, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    801a:	ldr	r6, [pc, #200]	; (80e4 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    801c:	ldrb	r3, [r6, #10]
    801e:	and.w	r4, r3, #64	; 0x40
//-----------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//-----------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8022:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8024:	cbnz	r4, 803e <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8026:	and.w	r3, r3, #63	; 0x3f
//-----------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    802a:	ldrb	r2, [r6, #11]
    802c:	and.w	r0, r4, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8030:	lsls	r3, r3, #1
    8032:	adds	r4, r5, #1
    8034:	orr.w	r3, r3, r2, lsr #7
    8038:	orrs	r4, r1
    803a:	tst	r3, r4
    803c:	bne.n	807a <SdioCard::erase(unsigned long, unsigned long)+0x62>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    803e:	ldr	r3, [pc, #168]	; (80e8 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    8040:	ldrb	r3, [r3, #0]
    8042:	cbnz	r3, 8048 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    8044:	lsls	r1, r1, #9
    lastSector <<= 9;
    8046:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    8048:	ldr	r0, [pc, #160]	; (80ec <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    804a:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    804e:	cbnz	r0, 8060 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8050:	ldr	r1, [pc, #156]	; (80f0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    8052:	ldr	r3, [pc, #160]	; (80f4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8054:	movs	r4, #15
  m_errorLine = line;
    8056:	movw	r2, #999	; 0x3e7
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    805a:	strb	r4, [r1, #0]
  m_errorLine = line;
    805c:	str	r2, [r3, #0]
    805e:	pop	{r3, r4, r5, r6, r7, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    8060:	mov	r1, r5
    8062:	ldr	r0, [pc, #148]	; (80f8 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    8064:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    8068:	cbnz	r0, 808a <SdioCard::erase(unsigned long, unsigned long)+0x72>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    806a:	ldr	r1, [pc, #132]	; (80f0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    806c:	ldr	r3, [pc, #132]	; (80f4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    806e:	movs	r4, #16
  m_errorLine = line;
    8070:	movw	r2, #1002	; 0x3ea
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8074:	strb	r4, [r1, #0]
  m_errorLine = line;
    8076:	str	r2, [r3, #0]
    8078:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    807a:	ldr	r1, [pc, #116]	; (80f0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    807c:	ldr	r3, [pc, #116]	; (80f4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    807e:	movs	r4, #36	; 0x24
  m_errorLine = line;
    8080:	movw	r2, #991	; 0x3df
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8084:	strb	r4, [r1, #0]
  m_errorLine = line;
    8086:	str	r2, [r3, #0]
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    8088:	pop	{r3, r4, r5, r6, r7, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    808a:	movs	r1, #0
    808c:	ldr	r0, [pc, #108]	; (80fc <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    808e:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    8092:	cbnz	r0, 80a4 <SdioCard::erase(unsigned long, unsigned long)+0x8c>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8094:	ldr	r1, [pc, #88]	; (80f0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    8096:	ldr	r3, [pc, #92]	; (80f4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8098:	movs	r4, #17
  m_errorLine = line;
    809a:	movw	r2, #1005	; 0x3ed
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    809e:	strb	r4, [r1, #0]
  m_errorLine = line;
    80a0:	str	r2, [r3, #0]
    80a2:	pop	{r3, r4, r5, r6, r7, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    80a4:	bl	9bc0 <micros>
    80a8:	ldr	r4, [pc, #84]	; (8100 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    80aa:	ldr	r7, [pc, #88]	; (8104 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    80ac:	ldr	r6, [pc, #88]	; (8108 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    80ae:	mov	r5, r0
    80b0:	b.n	80bc <SdioCard::erase(unsigned long, unsigned long)+0xa4>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    80b2:	bl	9bc0 <micros>
    80b6:	subs	r0, r0, r5
    80b8:	cmp	r0, r6
    80ba:	bhi.n	80d0 <SdioCard::erase(unsigned long, unsigned long)+0xb8>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    80bc:	ldr	r1, [r4, #0]
    80be:	ldr	r0, [pc, #76]	; (810c <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
    80c0:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    80c4:	cmp	r0, #0
    80c6:	beq.n	80b2 <SdioCard::erase(unsigned long, unsigned long)+0x9a>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    80c8:	ldr	r3, [r7, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    80ca:	lsls	r3, r3, #23
    80cc:	bpl.n	80b2 <SdioCard::erase(unsigned long, unsigned long)+0x9a>
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    80ce:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    80d0:	ldr	r1, [pc, #28]	; (80f0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    80d2:	ldr	r3, [pc, #32]	; (80f4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    80d4:	movs	r0, #37	; 0x25
  m_errorLine = line;
    80d6:	mov.w	r2, #1008	; 0x3f0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    80da:	strb	r0, [r1, #0]
  m_errorLine = line;
    80dc:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    80de:	movs	r0, #0
    80e0:	b.n	80ce <SdioCard::erase(unsigned long, unsigned long)+0xb6>
    80e2:	nop
    80e4:	.word	0x2002038c
    80e8:	.word	0x20020375
    80ec:	.word	0x201a0000
    80f0:	.word	0x1fff088c
    80f4:	.word	0x2002037c
    80f8:	.word	0x211a0000
    80fc:	.word	0x261b0000
    8100:	.word	0x20020384
    8104:	.word	0x400b1010
    8108:	.word	0x000f4240
    810c:	.word	0x0d1a0000

00008110 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//-----------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    8110:	tst.w	r2, #3
    8114:	bne.n	8118 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    8116:	cbnz	r3, 812a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8118:	ldr	r1, [pc, #252]	; (8218 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>)
  m_errorLine = line;
    811a:	ldr	r3, [pc, #256]	; (821c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10c>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    811c:	movs	r0, #34	; 0x22
  m_errorLine = line;
    811e:	movw	r2, #755	; 0x2f3
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8122:	strb	r0, [r1, #0]
  m_errorLine = line;
    8124:	str	r2, [r3, #0]
}
//-----------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
    8126:	movs	r0, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = xfertyp;

  return waitDmaStatus();
}
    8128:	bx	lr
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//-----------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    812a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    812e:	ldr.w	fp, [pc, #296]	; 8258 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>
    8132:	ldr	r4, [pc, #236]	; (8220 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x110>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8134:	ldr.w	sl, [pc, #292]	; 825c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8138:	ldr	r6, [pc, #232]	; (8224 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x114>)
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//-----------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    813a:	sub	sp, #12
    813c:	mov	r7, r3
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    813e:	ldr	r3, [pc, #232]	; (8228 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x118>)
    8140:	str	r0, [sp, #4]
    8142:	mov	r9, r1
    8144:	mov	r8, r2
    8146:	str.w	r3, [fp]
  uint32_t m = micros();
    814a:	bl	9bc0 <micros>
    814e:	mov	r5, r0
    8150:	b.n	8160 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x50>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8152:	bl	9bc0 <micros>
    8156:	subs	r0, r0, r5
    8158:	cmp	r0, r6
    815a:	bhi.n	81dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xcc>
      m_busyFcn = 0;
      return true;
    }
    yield();
    815c:	bl	1708 <yield>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    8160:	ldr	r1, [r4, #0]
    8162:	ldr	r0, [pc, #200]	; (822c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x11c>)
    8164:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    8168:	cmp	r0, #0
    816a:	beq.n	8152 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x42>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    816c:	ldr.w	r3, [sl]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8170:	lsls	r3, r3, #23
    8172:	bpl.n	8152 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x42>
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
    8174:	ldr	r3, [pc, #184]	; (8230 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
	  }
	}		
#endif
//-----------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8176:	ldr	r4, [pc, #188]	; (8234 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
  m_irqstat = 0;
    8178:	ldr	r5, [pc, #188]	; (8238 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    817a:	ldr	r2, [pc, #192]	; (823c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
    817c:	ldrb	r3, [r3, #0]
	  }
	}		
#endif
//-----------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    817e:	movs	r1, #1
    8180:	strb	r1, [r4, #0]
  m_irqstat = 0;
    8182:	movs	r1, #0
    8184:	str	r1, [r5, #0]
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    8186:	str.w	r8, [r2]
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
    818a:	cmp	r3, #0
    818c:	bne.n	8214 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    818e:	mov.w	r1, r9, lsl #9
    8192:	ldr	r3, [pc, #172]	; (8240 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8194:	ldr	r0, [pc, #172]	; (8244 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
    8196:	str	r1, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8198:	lsls	r7, r7, #16
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = xfertyp;
    819a:	ldr	r2, [pc, #172]	; (8248 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    819c:	ldr	r1, [pc, #172]	; (824c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    819e:	orr.w	r7, r7, #512	; 0x200
    81a2:	str	r7, [r0, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    81a4:	str	r1, [r3, #48]	; 0x30
  SDHC_XFERTYP = xfertyp;
    81a6:	ldr	r1, [sp, #4]
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    81a8:	ldr	r3, [pc, #164]	; (8250 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = xfertyp;
    81aa:	str	r1, [r2, #0]
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    81ac:	str.w	r3, [fp]
  uint32_t m = micros();
    81b0:	bl	9bc0 <micros>
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//-----------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    81b4:	ldrb	r3, [r4, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
    81b6:	mov	r6, r0
  while (fcn()) {
    81b8:	cbz	r3, 81f6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe6>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    81ba:	ldr	r7, [pc, #104]	; (8224 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x114>)
    81bc:	b.n	81c6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb6>
      m_busyFcn = 0;
      return true;
    }
    yield();
    81be:	bl	1708 <yield>
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//-----------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    81c2:	ldrb	r3, [r4, #0]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    81c4:	cbz	r3, 81f6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe6>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    81c6:	bl	9bc0 <micros>
    81ca:	subs	r0, r0, r6
    81cc:	cmp	r0, r7
    81ce:	bls.n	81be <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
      m_busyFcn = 0;
    81d0:	movs	r0, #0
    81d2:	str.w	r0, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = xfertyp;

  return waitDmaStatus();
}
    81d6:	add	sp, #12
    81d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81dc:	ldr	r1, [pc, #56]	; (8218 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>)
  m_errorLine = line;
    81de:	ldr	r3, [pc, #60]	; (821c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10c>)
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    81e0:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81e2:	movs	r4, #10
  m_errorLine = line;
    81e4:	movw	r2, #758	; 0x2f6
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81e8:	strb	r4, [r1, #0]
  m_errorLine = line;
    81ea:	str	r2, [r3, #0]
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    81ec:	str.w	r0, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  SDHC_XFERTYP = xfertyp;

  return waitDmaStatus();
}
    81f0:	add	sp, #12
    81f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    81f6:	ldr	r0, [r5, #0]
    81f8:	ldr	r2, [pc, #60]	; (8238 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    81fa:	movs	r3, #0
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    81fc:	ands.w	r0, r0, #2
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    8200:	str.w	r3, [fp]
//-----------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8204:	beq.n	81d6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xc6>
    8206:	ldr	r3, [r2, #0]
    8208:	ldr	r0, [pc, #72]	; (8254 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    820a:	ands	r0, r3
    820c:	clz	r0, r0
    8210:	lsrs	r0, r0, #5
    8212:	b.n	81d6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xc6>
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_CMDARG = m_highCapacity ? sector : 512*sector;
    8214:	mov	r1, r9
    8216:	b.n	8192 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    8218:	.word	0x1fff088c
    821c:	.word	0x2002037c
    8220:	.word	0x20020384
    8224:	.word	0x000f4240
    8228:	.word	0x00007ead
    822c:	.word	0x0d1a0000
    8230:	.word	0x20020375
    8234:	.word	0x2002039c
    8238:	.word	0x20020380
    823c:	.word	0x400b1000
    8240:	.word	0x400b1008
    8244:	.word	0x400b1004
    8248:	.word	0x400b100c
    824c:	.word	0x117f0002
    8250:	.word	0x00007cbd
    8254:	.word	0x117f0000
    8258:	.word	0x200203a0
    825c:	.word	0x400b1010

00008260 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    }
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8260:	push	{r3, r4, r5, r6, r7, lr}
    8262:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    8264:	ldrb	r0, [r0, #12]
    8266:	lsls	r0, r0, #31
    }
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8268:	mov	r4, r1
    826a:	mov	r5, r2
    826c:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    826e:	bmi.n	8298 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    8270:	cbz	r3, 8294 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8272:	add	r7, r1
    8274:	b.n	827a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    8276:	cmp	r4, r7
    8278:	beq.n	8294 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    827a:	ldr	r3, [r6, #0]
    827c:	mov	r2, r5
    827e:	mov	r1, r4
    8280:	ldr	r3, [r3, #8]
    8282:	mov	r0, r6
    8284:	blx	r3
    8286:	adds	r4, #1
    8288:	add.w	r5, r5, #512	; 0x200
    828c:	cmp	r0, #0
    828e:	bne.n	8276 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    8290:	movs	r0, #0
    8292:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    8294:	movs	r0, #1
    8296:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    8298:	lsls	r0, r2, #30
    829a:	beq.n	82c2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    829c:	cmp	r3, #0
    829e:	beq.n	8294 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    82a0:	add	r7, r1
    82a2:	b.n	82a8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    82a4:	cmp	r7, r4
    82a6:	beq.n	8294 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    82a8:	ldr	r3, [r6, #0]
    82aa:	mov	r2, r5
    82ac:	mov	r1, r4
    82ae:	ldr	r3, [r3, #8]
    82b0:	mov	r0, r6
    82b2:	blx	r3
}
//-----------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    82b4:	adds	r4, #1
    82b6:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    82ba:	cmp	r0, #0
    82bc:	bne.n	82a4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    82be:	movs	r0, #0
    82c0:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    82c2:	ldr	r0, [pc, #24]	; (82dc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    82c4:	bl	8110 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    82c8:	cmp	r0, #0
    82ca:	bne.n	8294 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82cc:	ldr	r1, [pc, #16]	; (82e0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    82ce:	ldr	r3, [pc, #20]	; (82e4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82d0:	movs	r4, #12
  m_errorLine = line;
    82d2:	movw	r2, #1078	; 0x436
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82d6:	strb	r4, [r1, #0]
  m_errorLine = line;
    82d8:	str	r2, [r3, #0]
    82da:	pop	{r3, r4, r5, r6, r7, pc}
    82dc:	.word	0x123a0037
    82e0:	.word	0x1fff088c
    82e4:	.word	0x2002037c

000082e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    82e8:	push	{r3, r4, r5, r6, r7, lr}
    82ea:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    82ec:	ldrb	r0, [r0, #12]
    82ee:	lsls	r0, r0, #31
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    82f0:	mov	r4, r1
    82f2:	mov	r5, r2
    82f4:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    82f6:	bmi.n	8320 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
  for (size_t i = 0; i < n; i++) {
    82f8:	cbz	r3, 831c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    82fa:	add	r7, r1
    82fc:	b.n	8302 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    82fe:	cmp	r4, r7
    8300:	beq.n	831c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!writeSector(sector + i, src + i*512UL)) {
    8302:	ldr	r3, [r6, #0]
    8304:	mov	r2, r5
    8306:	mov	r1, r4
    8308:	ldr	r3, [r3, #24]
    830a:	mov	r0, r6
    830c:	blx	r3
    830e:	adds	r4, #1
    8310:	add.w	r5, r5, #512	; 0x200
    8314:	cmp	r0, #0
    8316:	bne.n	82fe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    8318:	movs	r0, #0
    831a:	pop	{r3, r4, r5, r6, r7, pc}
    if (!writeSector(sector + i, src + i*512UL)) {
      return false;
    }
  }
  }
  return true;
    831c:	movs	r0, #1
    831e:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    8320:	lsls	r0, r2, #30
    8322:	beq.n	834a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    8324:	cmp	r3, #0
    8326:	beq.n	831c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    8328:	add	r7, r1
    832a:	b.n	8330 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    832c:	cmp	r7, r4
    832e:	beq.n	831c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    8330:	ldr	r3, [r6, #0]
    8332:	mov	r2, r5
    8334:	mov	r1, r4
    8336:	ldr	r3, [r3, #24]
    8338:	mov	r0, r6
    833a:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    833c:	adds	r4, #1
    833e:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    8342:	cmp	r0, #0
    8344:	bne.n	832c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    8346:	movs	r0, #0
    8348:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    834a:	ldr	r0, [pc, #24]	; (8364 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    834c:	bl	8110 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8350:	cmp	r0, #0
    8352:	bne.n	831c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8354:	ldr	r1, [pc, #16]	; (8368 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    8356:	ldr	r3, [pc, #20]	; (836c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8358:	movs	r4, #14
  m_errorLine = line;
    835a:	movw	r2, #1250	; 0x4e2
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    835e:	strb	r4, [r1, #0]
  m_errorLine = line;
    8360:	str	r2, [r3, #0]
    8362:	pop	{r3, r4, r5, r6, r7, pc}
    8364:	.word	0x193a0027
    8368:	.word	0x1fff088c
    836c:	.word	0x2002037c

00008370 <SdioCard::writeData(unsigned char const*)>:
  }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8370:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DBG_IRQSTAT();
    8374:	ldr	r4, [pc, #360]	; (84e0 <SdioCard::writeData(unsigned char const*)+0x170>)
    8376:	ldr	r3, [r4, #0]
  }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8378:	mov	r6, r1
  DBG_IRQSTAT();
    837a:	cmp	r3, #0
    837c:	bne.w	84b8 <SdioCard::writeData(unsigned char const*)+0x148>
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8380:	ldr	r3, [pc, #352]	; (84e4 <SdioCard::writeData(unsigned char const*)+0x174>)
    8382:	ldr	r3, [r3, #0]
    8384:	lsls	r2, r3, #23
    8386:	bmi.n	83b0 <SdioCard::writeData(unsigned char const*)+0x40>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8388:	ldr	r3, [pc, #348]	; (84e8 <SdioCard::writeData(unsigned char const*)+0x178>)
    // Don't stop at sector gap if last sector.  Allows auto CMD12.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    838a:	ldr	r1, [pc, #352]	; (84ec <SdioCard::writeData(unsigned char const*)+0x17c>)
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    838c:	ldr	r2, [r3, #0]
    838e:	bic.w	r2, r2, #65536	; 0x10000
    8392:	str	r2, [r3, #0]
    // Don't stop at sector gap if last sector.  Allows auto CMD12.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    8394:	ldr	r2, [r1, #0]
    8396:	lsrs	r2, r2, #16
    8398:	lsls	r2, r2, #16
    839a:	cmp.w	r2, #65536	; 0x10000
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    839e:	ldr	r2, [r3, #0]
    83a0:	orr.w	r2, r2, #131072	; 0x20000
    83a4:	str	r2, [r3, #0]
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    // Don't stop at sector gap if last sector.  Allows auto CMD12.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    83a6:	beq.n	83b0 <SdioCard::writeData(unsigned char const*)+0x40>
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    } else {
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
      SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    83a8:	ldr	r2, [r3, #0]
    83aa:	orr.w	r2, r2, #65536	; 0x10000
    83ae:	str	r2, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    83b0:	bl	9bc0 <micros>
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
}
//-----------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    83b4:	ldr	r5, [pc, #300]	; (84e4 <SdioCard::writeData(unsigned char const*)+0x174>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    83b6:	ldr.w	r8, [pc, #316]	; 84f4 <SdioCard::writeData(unsigned char const*)+0x184>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    83ba:	mov	r7, r0
    83bc:	b.n	83c8 <SdioCard::writeData(unsigned char const*)+0x58>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    83be:	bl	9bc0 <micros>
    83c2:	subs	r0, r0, r7
    83c4:	cmp	r0, r8
    83c6:	bhi.n	8490 <SdioCard::writeData(unsigned char const*)+0x120>
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
}
//-----------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    83c8:	ldr	r0, [r5, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    83ca:	ands.w	r4, r0, #1024	; 0x400
    83ce:	beq.n	83be <SdioCard::writeData(unsigned char const*)+0x4e>
  }
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    83d0:	ldr	r0, [pc, #272]	; (84e4 <SdioCard::writeData(unsigned char const*)+0x174>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    83d2:	ldr	r1, [pc, #284]	; (84f0 <SdioCard::writeData(unsigned char const*)+0x180>)
    83d4:	add.w	r2, r6, #64	; 0x40
    83d8:	add.w	r6, r6, #576	; 0x240
  }
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    83dc:	ldr	r3, [r0, #0]
    83de:	lsls	r3, r3, #21
    83e0:	bpl.n	83dc <SdioCard::writeData(unsigned char const*)+0x6c>
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    83e2:	ldr.w	r3, [r2, #-64]
    83e6:	str	r3, [r1, #0]
    83e8:	ldr.w	r3, [r2, #-60]
    83ec:	str	r3, [r1, #0]
    83ee:	ldr.w	r3, [r2, #-56]
    83f2:	str	r3, [r1, #0]
    83f4:	ldr.w	r3, [r2, #-52]
    83f8:	str	r3, [r1, #0]
    83fa:	ldr.w	r3, [r2, #-48]
    83fe:	str	r3, [r1, #0]
    8400:	ldr.w	r3, [r2, #-44]
    8404:	str	r3, [r1, #0]
    8406:	ldr.w	r3, [r2, #-40]
    840a:	str	r3, [r1, #0]
    840c:	ldr.w	r3, [r2, #-36]
    8410:	str	r3, [r1, #0]
    8412:	ldr.w	r3, [r2, #-32]
    8416:	str	r3, [r1, #0]
    8418:	ldr.w	r3, [r2, #-28]
    841c:	str	r3, [r1, #0]
    841e:	ldr.w	r3, [r2, #-24]
    8422:	str	r3, [r1, #0]
    8424:	ldr.w	r3, [r2, #-20]
    8428:	str	r3, [r1, #0]
    842a:	ldr.w	r3, [r2, #-16]
    842e:	str	r3, [r1, #0]
    8430:	ldr.w	r3, [r2, #-12]
    8434:	str	r3, [r1, #0]
    8436:	ldr.w	r3, [r2, #-8]
    843a:	str	r3, [r1, #0]
    843c:	ldr.w	r3, [r2, #-4]
    8440:	str	r3, [r1, #0]
    8442:	adds	r2, #64	; 0x40
    }
  }
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8444:	cmp	r2, r6
    8446:	bne.n	83dc <SdioCard::writeData(unsigned char const*)+0x6c>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8448:	bl	9bc0 <micros>
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    844c:	ldr	r5, [pc, #144]	; (84e0 <SdioCard::writeData(unsigned char const*)+0x170>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    844e:	ldr	r7, [pc, #164]	; (84f4 <SdioCard::writeData(unsigned char const*)+0x184>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8450:	mov	r6, r0
    8452:	b.n	845e <SdioCard::writeData(unsigned char const*)+0xee>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8454:	bl	9bc0 <micros>
    8458:	subs	r0, r0, r6
    845a:	cmp	r0, r7
    845c:	bhi.n	84a4 <SdioCard::writeData(unsigned char const*)+0x134>
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    845e:	ldr	r3, [r5, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8460:	ldr	r4, [pc, #148]	; (84f8 <SdioCard::writeData(unsigned char const*)+0x188>)
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8462:	ldr	r2, [pc, #124]	; (84e0 <SdioCard::writeData(unsigned char const*)+0x170>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8464:	ands	r4, r3
    8466:	cmp	r4, #0
    8468:	beq.n	8454 <SdioCard::writeData(unsigned char const*)+0xe4>
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    846a:	ldr	r1, [pc, #144]	; (84fc <SdioCard::writeData(unsigned char const*)+0x18c>)
    846c:	ldr	r3, [r2, #0]
    846e:	str	r3, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    8470:	ldr	r3, [r1, #0]
    8472:	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8474:	ldr	r3, [r1, #0]
    8476:	ands.w	r0, r3, #2
    847a:	beq.n	848c <SdioCard::writeData(unsigned char const*)+0x11c>
    847c:	ldr	r3, [r1, #0]
    847e:	ldr	r0, [pc, #128]	; (8500 <SdioCard::writeData(unsigned char const*)+0x190>)
    8480:	ands	r0, r3
    8482:	clz	r0, r0
    8486:	lsrs	r0, r0, #5
    8488:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
    848c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8490:	ldr	r1, [pc, #112]	; (8504 <SdioCard::writeData(unsigned char const*)+0x194>)
  m_errorLine = line;
    8492:	ldr	r3, [pc, #116]	; (8508 <SdioCard::writeData(unsigned char const*)+0x198>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8494:	movs	r5, #31
  m_errorLine = line;
    8496:	movw	r2, #1277	; 0x4fd
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    849a:	strb	r5, [r1, #0]
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
      SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    }
  }
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    849c:	mov	r0, r4
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    849e:	str	r2, [r3, #0]
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
      SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    }
  }
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    84a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84a4:	ldr	r1, [pc, #92]	; (8504 <SdioCard::writeData(unsigned char const*)+0x194>)
  m_errorLine = line;
    84a6:	ldr	r3, [pc, #96]	; (8508 <SdioCard::writeData(unsigned char const*)+0x198>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84a8:	movs	r5, #33	; 0x21
  m_errorLine = line;
    84aa:	mov.w	r2, #1288	; 0x508
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84ae:	strb	r5, [r1, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    84b0:	mov	r0, r4
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    84b2:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    84b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    84b8:	movw	r1, #1263	; 0x4ef
    84bc:	ldr	r0, [pc, #76]	; (850c <SdioCard::writeData(unsigned char const*)+0x19c>)
    84be:	bl	adbc <Print::print(long)>
    84c2:	movs	r1, #9
    84c4:	ldr	r0, [pc, #72]	; (8510 <SdioCard::writeData(unsigned char const*)+0x1a0>)
    84c6:	bl	9524 <usb_serial_write>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
    84ca:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    84cc:	ldr	r0, [pc, #60]	; (850c <SdioCard::writeData(unsigned char const*)+0x19c>)
    84ce:	movs	r3, #0
    84d0:	movs	r2, #16
    84d2:	bl	aeb8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    84d6:	ldr	r0, [pc, #52]	; (850c <SdioCard::writeData(unsigned char const*)+0x19c>)
    84d8:	bl	ae6c <Print::println()>
    84dc:	b.n	8380 <SdioCard::writeData(unsigned char const*)+0x10>
    84de:	nop
    84e0:	.word	0x400b1030
    84e4:	.word	0x400b1024
    84e8:	.word	0x400b1028
    84ec:	.word	0x400b1004
    84f0:	.word	0x400b1020
    84f4:	.word	0x000f4240
    84f8:	.word	0x117f0002
    84fc:	.word	0x20020380
    8500:	.word	0x117f0000
    8504:	.word	0x1fff088c
    8508:	.word	0x2002037c
    850c:	.word	0x1fff0898
    8510:	.word	0x00013ca0

00008514 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//-----------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8514:	ldr	r3, [pc, #44]	; (8544 <SdioCard::isBusy()+0x30>)
    8516:	ldr	r3, [r3, #0]
    8518:	cbz	r3, 851c <SdioCard::isBusy()+0x8>
    851a:	bx	r3
    851c:	ldr	r3, [pc, #40]	; (8548 <SdioCard::isBusy()+0x34>)
//-----------------------------------------------------------------------------
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//-----------------------------------------------------------------------------
bool SdioCard::isBusy() {
    851e:	push	{r4, lr}
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8520:	ldrb	r4, [r3, #0]
    8522:	cbnz	r4, 8528 <SdioCard::isBusy()+0x14>
}
    8524:	mov	r0, r4
    8526:	pop	{r4, pc}
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    8528:	ldr	r3, [pc, #32]	; (854c <SdioCard::isBusy()+0x38>)
    852a:	ldr	r0, [pc, #36]	; (8550 <SdioCard::isBusy()+0x3c>)
    852c:	ldr	r1, [r3, #0]
    852e:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    8532:	cmp	r0, #0
    8534:	beq.n	8524 <SdioCard::isBusy()+0x10>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8536:	ldr	r3, [pc, #28]	; (8554 <SdioCard::isBusy()+0x40>)
    8538:	ldr	r4, [r3, #0]
    853a:	eor.w	r4, r4, #256	; 0x100
    853e:	ubfx	r4, r4, #8, #1
    8542:	b.n	8524 <SdioCard::isBusy()+0x10>
    8544:	.word	0x200203a0
    8548:	.word	0x20020388
    854c:	.word	0x20020384
    8550:	.word	0x0d1a0000
    8554:	.word	0x400b1010

00008558 <transferStop()>:
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
	#endif
}
//-----------------------------------------------------------------------------
static bool transferStop() {
    8558:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DBG_IRQSTAT();
    855c:	ldr	r4, [pc, #188]	; (861c <transferStop()+0xc4>)
    855e:	ldr	r3, [r4, #0]
    8560:	cmp	r3, #0
    8562:	bne.n	85dc <transferStop()+0x84>

  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8564:	movs	r1, #0
    8566:	ldr	r0, [pc, #184]	; (8620 <transferStop()+0xc8>)
    8568:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    856c:	cbnz	r0, 8580 <transferStop()+0x28>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    856e:	ldr	r1, [pc, #180]	; (8624 <transferStop()+0xcc>)
  m_errorLine = line;
    8570:	ldr	r3, [pc, #180]	; (8628 <transferStop()+0xd0>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8572:	movs	r4, #9
  m_errorLine = line;
    8574:	movw	r2, #830	; 0x33e
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8578:	strb	r4, [r1, #0]
  m_errorLine = line;
    857a:	str	r2, [r3, #0]
//-----------------------------------------------------------------------------
static bool transferStop() {
  DBG_IRQSTAT();

  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
    857c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    8580:	ldr.w	r8, [pc, #208]	; 8654 <transferStop()+0xfc>
    8584:	ldr	r3, [pc, #164]	; (862c <transferStop()+0xd4>)
    8586:	str.w	r3, [r8]
  uint32_t m = micros();
    858a:	bl	9bc0 <micros>
    858e:	ldr	r4, [pc, #160]	; (8630 <transferStop()+0xd8>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8590:	ldr	r7, [pc, #160]	; (8634 <transferStop()+0xdc>)
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8592:	ldr	r6, [pc, #164]	; (8638 <transferStop()+0xe0>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
    8594:	mov	r5, r0
    8596:	b.n	85a6 <transferStop()+0x4e>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8598:	bl	9bc0 <micros>
    859c:	subs	r0, r0, r5
    859e:	cmp	r0, r6
    85a0:	bhi.n	8602 <transferStop()+0xaa>
      m_busyFcn = 0;
      return true;
    }
    yield();
    85a2:	bl	1708 <yield>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    85a6:	ldr	r1, [r4, #0]
    85a8:	ldr	r0, [pc, #144]	; (863c <transferStop()+0xe4>)
    85aa:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    85ae:	cmp	r0, #0
    85b0:	beq.n	8598 <transferStop()+0x40>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    85b2:	ldr	r3, [r7, #0]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    85b4:	lsls	r3, r3, #23
    85b6:	bpl.n	8598 <transferStop()+0x40>
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    85b8:	ldr	r4, [pc, #132]	; (8640 <transferStop()+0xe8>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    85ba:	ldr	r1, [pc, #136]	; (8644 <transferStop()+0xec>)

  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    85bc:	ldr	r5, [pc, #136]	; (8648 <transferStop()+0xf0>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    85be:	ldr	r6, [r4, #0]
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    85c0:	movs	r3, #0
    85c2:	str.w	r3, [r8]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    85c6:	ldr	r3, [r1, #0]

  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    85c8:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    85ca:	bic.w	r3, r3, #65536	; 0x10000

  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    85ce:	orr.w	r2, r2, #67108864	; 0x4000000
    85d2:	str	r2, [r5, #0]

  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    85d4:	str	r6, [r4, #0]
  SDHC_PROCTL = proctl;
    85d6:	str	r3, [r1, #0]

  return true;
}
    85d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    85dc:	movw	r1, #827	; 0x33b
    85e0:	ldr	r0, [pc, #104]	; (864c <transferStop()+0xf4>)
    85e2:	bl	adbc <Print::print(long)>
    85e6:	movs	r1, #9
    85e8:	ldr	r0, [pc, #100]	; (8650 <transferStop()+0xf8>)
    85ea:	bl	9524 <usb_serial_write>
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
	#endif
}
//-----------------------------------------------------------------------------
static bool transferStop() {
  DBG_IRQSTAT();
    85ee:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    85f0:	ldr	r0, [pc, #88]	; (864c <transferStop()+0xf4>)
    85f2:	movs	r3, #0
    85f4:	movs	r2, #16
    85f6:	bl	aeb8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    85fa:	ldr	r0, [pc, #80]	; (864c <transferStop()+0xf4>)
    85fc:	bl	ae6c <Print::println()>
    8600:	b.n	8564 <transferStop()+0xc>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8602:	ldr	r1, [pc, #32]	; (8624 <transferStop()+0xcc>)
  m_errorLine = line;
    8604:	ldr	r3, [pc, #32]	; (8628 <transferStop()+0xd0>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8606:	movs	r4, #10
  m_errorLine = line;
    8608:	movw	r2, #833	; 0x341
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    860c:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    860e:	strb	r4, [r1, #0]
  m_errorLine = line;
    8610:	str	r2, [r3, #0]
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    8612:	str.w	r0, [r8]

  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8616:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    861a:	nop
    861c:	.word	0x400b1030
    8620:	.word	0x0cdb0000
    8624:	.word	0x1fff088c
    8628:	.word	0x2002037c
    862c:	.word	0x00007ead
    8630:	.word	0x20020384
    8634:	.word	0x400b1010
    8638:	.word	0x000f4240
    863c:	.word	0x0d1a0000
    8640:	.word	0x400b1034
    8644:	.word	0x400b1028
    8648:	.word	0x400b102c
    864c:	.word	0x1fff0898
    8650:	.word	0x00013ca0
    8654:	.word	0x200203a0

00008658 <SdioCard::readStop()>:
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    8658:	b.w	8558 <transferStop()>

0000865c <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    865c:	ldrb	r3, [r0, #13]
    865e:	subs	r3, #1
    8660:	cmp	r3, #1
    8662:	bls.n	8668 <SdioCard::syncDevice()+0xc>
    if (!SdioCard::writeStop()) {
      return false;
    }
  }
  return true;
}
    8664:	movs	r0, #1
    8666:	bx	lr
  return statusCMD13();
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    8668:	movs	r3, #0
    866a:	strb	r3, [r0, #13]
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    866c:	b.w	8558 <transferStop()>

00008670 <SdioCard::begin(SdioConfig)>:
    }
  }
  return false;  // Caller will set errorCode.
}
//=============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8670:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8674:	ldr	r4, [pc, #544]	; (8898 <SdioCard::begin(SdioConfig)+0x228>)

	static void initClock()
	{
		#ifdef HAS_KINETIS_MPU
		  // Allow SDHC Bus Master access.
		  MPU_RGDAAC0 |= 0x0C000000;
    8676:	ldr.w	lr, [pc, #648]	; 8900 <SdioCard::begin(SdioConfig)+0x290>
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    867a:	ldr	r7, [pc, #544]	; (889c <SdioCard::begin(SdioConfig)+0x22c>)
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    867c:	ldr	r6, [pc, #544]	; (88a0 <SdioCard::begin(SdioConfig)+0x230>)
  m_version2 = false;
    867e:	ldr	r5, [pc, #548]	; (88a4 <SdioCard::begin(SdioConfig)+0x234>)
}
//=============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    8680:	strb	r1, [r0, #12]
  m_curState = IDLE_STATE;
    8682:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8684:	strb	r3, [r4, #0]
//=============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    8686:	strb	r3, [r0, #13]
  m_initDone = false;
    8688:	strb	r3, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    868a:	strb	r3, [r6, #0]
  m_version2 = false;
    868c:	strb	r3, [r5, #0]

	static void initClock()
	{
		#ifdef HAS_KINETIS_MPU
		  // Allow SDHC Bus Master access.
		  MPU_RGDAAC0 |= 0x0C000000;
    868e:	ldr.w	r3, [lr]
		#endif
		// Enable SDHC clock.
		SIM_SCGC3 |= SIM_SCGC3_SDHC; 
    8692:	ldr	r2, [pc, #532]	; (88a8 <SdioCard::begin(SdioConfig)+0x238>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8694:	ldr	r0, [pc, #532]	; (88ac <SdioCard::begin(SdioConfig)+0x23c>)
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8696:	ldr	r1, [pc, #536]	; (88b0 <SdioCard::begin(SdioConfig)+0x240>)
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8698:	ldr.w	ip, [pc, #616]	; 8904 <SdioCard::begin(SdioConfig)+0x294>

	static void initClock()
	{
		#ifdef HAS_KINETIS_MPU
		  // Allow SDHC Bus Master access.
		  MPU_RGDAAC0 |= 0x0C000000;
    869c:	orr.w	r3, r3, #201326592	; 0xc000000
    86a0:	str.w	r3, [lr]
		#endif
		// Enable SDHC clock.
		SIM_SCGC3 |= SIM_SCGC3_SDHC; 
    86a4:	ldr	r3, [r2, #0]
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    86a6:	add.w	lr, lr, #260096	; 0x3f800
		#ifdef HAS_KINETIS_MPU
		  // Allow SDHC Bus Master access.
		  MPU_RGDAAC0 |= 0x0C000000;
		#endif
		// Enable SDHC clock.
		SIM_SCGC3 |= SIM_SCGC3_SDHC; 
    86aa:	orr.w	r3, r3, #131072	; 0x20000
    86ae:	str	r3, [r2, #0]
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    86b0:	add.w	lr, lr, #12

  // Disable GPIO clock.
  enableGPIO(false);

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL = SDHC_SYSCTL_RSTA;
    86b4:	add.w	r2, r2, #428032	; 0x68800
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    86b8:	movw	r3, #259	; 0x103

  // Disable GPIO clock.
  enableGPIO(false);

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL = SDHC_SYSCTL_RSTA;
    86bc:	addw	r2, r2, #2044	; 0x7fc
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    86c0:	str	r3, [r0, #0]
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    86c2:	str.w	r3, [ip]
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    86c6:	str	r3, [r1, #0]
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    86c8:	str.w	r3, [lr]
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    86cc:	str	r3, [r0, #16]

  // Disable GPIO clock.
  enableGPIO(false);

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL = SDHC_SYSCTL_RSTA;
    86ce:	mov.w	r0, #16777216	; 0x1000000
	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    86d2:	str	r3, [r1, #12]
    }
  }
  return false;  // Caller will set errorCode.
}
//=============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    86d4:	sub	sp, #76	; 0x4c
  // Disable GPIO clock.
  enableGPIO(false);

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL = SDHC_SYSCTL_RSTA;
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    86d6:	mov	r1, r2

  // Disable GPIO clock.
  enableGPIO(false);

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL = SDHC_SYSCTL_RSTA;
    86d8:	str	r0, [r2, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    86da:	ldr	r3, [r1, #0]
    86dc:	ldr	r2, [pc, #468]	; (88b4 <SdioCard::begin(SdioConfig)+0x244>)
    86de:	lsls	r3, r3, #7
    86e0:	bmi.n	86da <SdioCard::begin(SdioConfig)+0x6a>
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = f_pll/(1000*sdclkfs*dvs);
    86e2:	ldr.w	r8, [pc, #548]	; 8908 <SdioCard::begin(SdioConfig)+0x298>

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    86e6:	ldr	r1, [pc, #464]	; (88b8 <SdioCard::begin(SdioConfig)+0x248>)
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = f_pll/(1000*sdclkfs*dvs);
    86e8:	mov.w	r3, #400	; 0x190
    86ec:	str.w	r3, [r8]
  sdclkfs >>= 1;
  dvs--;

	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Disable SDHC clock.
		SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    86f0:	ldr	r3, [r2, #0]
    86f2:	bic.w	r3, r3, #8
    86f6:	str	r3, [r2, #0]
	#endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    86f8:	ldr	r3, [r2, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    86fa:	bic.w	r3, r3, #1044480	; 0xff000
    86fe:	bic.w	r3, r3, #4080	; 0xff0

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8702:	orr.w	r3, r3, #917504	; 0xe0000
    8706:	orr.w	r3, r3, #2272	; 0x8e0
    870a:	str	r3, [r2, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    870c:	ldr	r3, [r1, #0]
    870e:	lsls	r0, r3, #28
    8710:	bpl.n	870c <SdioCard::begin(SdioConfig)+0x9c>
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    8712:	ldr.w	r9, [pc, #416]	; 88b4 <SdioCard::begin(SdioConfig)+0x244>
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8716:	ldr.w	ip, [pc, #404]	; 88ac <SdioCard::begin(SdioConfig)+0x23c>
  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    871a:	ldr.w	r3, [r9]
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    871e:	ldr.w	lr, [pc, #484]	; 8904 <SdioCard::begin(SdioConfig)+0x294>
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8722:	ldr	r0, [pc, #396]	; (88b0 <SdioCard::begin(SdioConfig)+0x240>)
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8724:	ldr	r1, [pc, #404]	; (88bc <SdioCard::begin(SdioConfig)+0x24c>)
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8726:	ldr	r2, [pc, #408]	; (88c0 <SdioCard::begin(SdioConfig)+0x250>)
  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    8728:	orr.w	r3, r3, #8
    872c:	str.w	r3, [r9]
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8730:	movw	r3, #1091	; 0x443
    8734:	str.w	r3, [ip]
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8738:	str.w	r3, [lr]
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    873c:	mov.w	lr, #1088	; 0x440
    8740:	str.w	lr, [r0]
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8744:	str	r3, [r1, #0]
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8746:	str	r3, [r2, #0]
  setSdclk(400);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
	SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8748:	add.w	r1, r1, #409600	; 0x64000
	SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    874c:	add.w	r2, r2, #409600	; 0x64000
    8750:	adds	r2, #40	; 0x28
  setSdclk(400);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
	SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8752:	adds	r1, #40	; 0x28
	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8754:	str	r3, [r0, #12]

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
	SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
	SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8756:	ldr	r3, [pc, #364]	; (88c4 <SdioCard::begin(SdioConfig)+0x254>)
  setSdclk(400);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
	SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8758:	ldr	r0, [pc, #364]	; (88c8 <SdioCard::begin(SdioConfig)+0x258>)
    875a:	str	r0, [r1, #0]
	SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    875c:	str	r3, [r2, #0]
//		SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL;

	#endif
		

  attachInterruptVector(IRQ_SDHC, m_sdhc_isr);
    875e:	ldr	r1, [pc, #364]	; (88cc <SdioCard::begin(SdioConfig)+0x25c>)
    8760:	movs	r0, #81	; 0x51
    8762:	bl	9858 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8766:	ldr	r3, [pc, #360]	; (88d0 <SdioCard::begin(SdioConfig)+0x260>)

	#endif
		

  attachInterruptVector(IRQ_SDHC, m_sdhc_isr);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8768:	ldr	r1, [pc, #360]	; (88d4 <SdioCard::begin(SdioConfig)+0x264>)
    876a:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    876c:	mov.w	r2, #131072	; 0x20000

	#endif
		

  attachInterruptVector(IRQ_SDHC, m_sdhc_isr);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8770:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8772:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    8774:	ldr.w	r3, [r9]
    8778:	orr.w	r3, r3, #134217728	; 0x8000000
    877c:	str.w	r3, [r9]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    8780:	mov	r3, r9
    8782:	ldr	r1, [r3, #0]
    8784:	ands.w	r1, r1, #134217728	; 0x8000000
    8788:	bne.n	8782 <SdioCard::begin(SdioConfig)+0x112>
  m_version2 = false;

  // initialize controller.
  initSDHC();
  
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    878a:	mov	r0, r1
    878c:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    8790:	mov	r9, r0
    8792:	cmp	r0, #0
    8794:	beq.n	883c <SdioCard::begin(SdioConfig)+0x1cc>
    8796:	mov.w	r9, #10
    return sdError(SD_CARD_ERROR_CMD0);
  }
  
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    879a:	mov.w	r1, #426	; 0x1aa
    879e:	ldr	r0, [pc, #312]	; (88d8 <SdioCard::begin(SdioConfig)+0x268>)
    87a0:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    87a4:	cmp	r0, #0
    87a6:	bne.n	886c <SdioCard::begin(SdioConfig)+0x1fc>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    87a8:	subs.w	r9, r9, #1
    87ac:	bne.n	879a <SdioCard::begin(SdioConfig)+0x12a>
      m_version2 = true;
      break;
    }
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
    87ae:	ldrb	r2, [r5, #0]
    87b0:	ldr	r3, [pc, #296]	; (88dc <SdioCard::begin(SdioConfig)+0x26c>)
    87b2:	cmp	r2, #0
    87b4:	ite	eq
    87b6:	moveq.w	r9, #3145728	; 0x300000
    87ba:	movne	r9, r3
  uint32_t m = micros();
    87bc:	bl	9bc0 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    87c0:	ldr	r5, [pc, #284]	; (88e0 <SdioCard::begin(SdioConfig)+0x270>)
      break;
    }
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
    87c2:	mov	sl, r0
  m_dmaBusy = false;
}
//=============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    87c4:	movs	r1, #0
    87c6:	ldr	r0, [pc, #284]	; (88e4 <SdioCard::begin(SdioConfig)+0x274>)
    87c8:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    87cc:	cbnz	r0, 87e6 <SdioCard::begin(SdioConfig)+0x176>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    87ce:	ldr	r2, [pc, #280]	; (88e8 <SdioCard::begin(SdioConfig)+0x278>)
    87d0:	movw	r1, #915	; 0x393
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    87d4:	movs	r3, #22
  m_errorLine = line;
    87d6:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    87d8:	strb	r3, [r4, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    87da:	mov.w	r9, #0

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    87de:	mov	r0, r9
    87e0:	add	sp, #76	; 0x4c
    87e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_dmaBusy = false;
}
//=============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    87e6:	mov	r1, r9
    87e8:	ldr	r0, [pc, #256]	; (88ec <SdioCard::begin(SdioConfig)+0x27c>)
    87ea:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    87ee:	cmp	r0, #0
    87f0:	beq.n	87ce <SdioCard::begin(SdioConfig)+0x15e>
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    87f2:	bl	9bc0 <micros>
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    87f6:	ldr	r3, [pc, #248]	; (88f0 <SdioCard::begin(SdioConfig)+0x280>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    87f8:	ldr	r2, [pc, #228]	; (88e0 <SdioCard::begin(SdioConfig)+0x270>)
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    87fa:	rsb	r0, sl, r0
    87fe:	cmp	r0, r3
    8800:	bhi.n	87ce <SdioCard::begin(SdioConfig)+0x15e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8802:	ldr	r3, [r5, #0]
    }
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
  uint32_t m = micros();
  do {
    8804:	cmp	r3, #0
    8806:	bge.n	87c4 <SdioCard::begin(SdioConfig)+0x154>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);

  m_ocr = SDHC_CMDRSP0;
    8808:	ldr	r3, [pc, #232]	; (88f4 <SdioCard::begin(SdioConfig)+0x284>)
    880a:	ldr	r1, [r2, #0]
    880c:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    880e:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8810:	ldr	r0, [pc, #228]	; (88f8 <SdioCard::begin(SdioConfig)+0x288>)
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);

  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    8812:	lsls	r1, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    8814:	it	mi
    8816:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8818:	mov.w	r1, #0
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);

  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    881c:	it	mi
    881e:	strbmi	r3, [r6, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8820:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    8824:	mov	r9, r0
    8826:	cbnz	r0, 8850 <SdioCard::begin(SdioConfig)+0x1e0>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8828:	ldr	r2, [pc, #188]	; (88e8 <SdioCard::begin(SdioConfig)+0x278>)
    882a:	movw	r1, #925	; 0x39d
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    882e:	movs	r3, #2

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8830:	mov	r0, r9
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8832:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8834:	strb	r3, [r4, #0]

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8836:	add	sp, #76	; 0x4c
    8838:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    883c:	ldr	r2, [pc, #168]	; (88e8 <SdioCard::begin(SdioConfig)+0x278>)
    883e:	mov.w	r1, #896	; 0x380
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8842:	movs	r3, #1

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8844:	mov	r0, r9
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8846:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8848:	strb	r3, [r4, #0]

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    884a:	add	sp, #76	; 0x4c
    884c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    8850:	movs	r1, #0
    8852:	ldr	r0, [pc, #168]	; (88fc <SdioCard::begin(SdioConfig)+0x28c>)
    8854:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    8858:	mov	r9, r0
    885a:	cmp	r0, #0
    885c:	bne.n	890c <SdioCard::begin(SdioConfig)+0x29c>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    885e:	ldr	r2, [pc, #136]	; (88e8 <SdioCard::begin(SdioConfig)+0x278>)
    8860:	mov.w	r1, #928	; 0x3a0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8864:	movs	r3, #3
  m_errorLine = line;
    8866:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8868:	strb	r3, [r4, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    886a:	b.n	87de <SdioCard::begin(SdioConfig)+0x16e>
  }
  
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    886c:	ldr	r3, [pc, #112]	; (88e0 <SdioCard::begin(SdioConfig)+0x270>)
    886e:	ldr	r3, [r3, #0]
    8870:	cmp.w	r3, #426	; 0x1aa
    8874:	beq.n	888e <SdioCard::begin(SdioConfig)+0x21e>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8876:	ldr	r2, [pc, #112]	; (88e8 <SdioCard::begin(SdioConfig)+0x278>)
  
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    8878:	mov.w	r9, #0
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    887c:	movw	r1, #903	; 0x387
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8880:	movs	r3, #6

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8882:	mov	r0, r9
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8884:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8886:	strb	r3, [r4, #0]

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8888:	add	sp, #76	; 0x4c
    888a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
    888e:	movs	r3, #1
    8890:	strb	r3, [r5, #0]
      break;
    }
  }
  
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8892:	ldr.w	r9, [pc, #72]	; 88dc <SdioCard::begin(SdioConfig)+0x26c>
    8896:	b.n	87bc <SdioCard::begin(SdioConfig)+0x14c>
    8898:	.word	0x1fff088c
    889c:	.word	0x20020388
    88a0:	.word	0x20020375
    88a4:	.word	0x20020374
    88a8:	.word	0x40048030
    88ac:	.word	0x4004d000
    88b0:	.word	0x4004d008
    88b4:	.word	0x400b102c
    88b8:	.word	0x400b1024
    88bc:	.word	0x4004d00c
    88c0:	.word	0x4004d010
    88c4:	.word	0x117f0002
    88c8:	.word	0x117f000b
    88cc:	.word	0x00007c8d
    88d0:	.word	0xe000e108
    88d4:	.word	0xe000e451
    88d8:	.word	0x081a0000
    88dc:	.word	0x40300000
    88e0:	.word	0x400b1010
    88e4:	.word	0x371a0000
    88e8:	.word	0x2002037c
    88ec:	.word	0x29020000
    88f0:	.word	0x000f4240
    88f4:	.word	0x20020378
    88f8:	.word	0x02090000
    88fc:	.word	0x031a0000
    8900:	.word	0x4000d800
    8904:	.word	0x4004d004
    8908:	.word	0x200203a4
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    890c:	ldr	r6, [pc, #620]	; (8b7c <SdioCard::begin(SdioConfig)+0x50c>)
    890e:	ldr	r5, [pc, #624]	; (8b80 <SdioCard::begin(SdioConfig)+0x510>)
    8910:	ldr	r3, [r6, #0]
}
//-----------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8912:	ldr	r0, [pc, #624]	; (8b84 <SdioCard::begin(SdioConfig)+0x514>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8914:	lsrs	r3, r3, #16
    8916:	lsls	r3, r3, #16
}
//-----------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8918:	mov	r1, r3
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    891a:	str	r3, [r5, #0]
}
//-----------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    891c:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    8920:	mov	r9, r0
    8922:	cmp	r0, #0
    8924:	beq.w	8a44 <SdioCard::begin(SdioConfig)+0x3d4>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8928:	ldr	r2, [pc, #604]	; (8b88 <SdioCard::begin(SdioConfig)+0x518>)
    892a:	ldr.w	r9, [r6]
    892e:	ldr	r1, [r2, #0]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8930:	ldr.w	lr, [pc, #676]	; 8bd8 <SdioCard::begin(SdioConfig)+0x568>
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8934:	ldr	r3, [pc, #596]	; (8b8c <SdioCard::begin(SdioConfig)+0x51c>)
    8936:	ldr.w	fp, [pc, #676]	; 8bdc <SdioCard::begin(SdioConfig)+0x56c>
    893a:	ldr	r0, [r3, #0]
    893c:	ldr.w	ip, [fp]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8940:	strb.w	r9, [lr, #14]
    8944:	mov.w	sl, r1, lsr #8
    8948:	strb.w	sl, [lr, #9]
    894c:	mov.w	sl, r9, lsr #8
    8950:	strb.w	sl, [lr, #13]
    8954:	mov.w	sl, r9, lsr #16
    8958:	mov.w	r9, r9, lsr #24
    895c:	strb.w	r9, [lr, #11]
    8960:	mov.w	r9, r1, lsr #16
    8964:	strb.w	r1, [lr, #10]
    8968:	strb.w	sl, [lr, #12]
    896c:	lsrs	r1, r1, #24
    896e:	mov.w	sl, r0, lsr #8
    8972:	strb.w	r9, [lr, #8]
    8976:	mov.w	r9, r0, lsr #16
    897a:	strb.w	r0, [lr, #6]
    897e:	strb.w	r1, [lr, #7]
    8982:	strb.w	sl, [lr, #5]
    8986:	lsrs	r1, r0, #24
    8988:	strb.w	r9, [lr, #4]
    898c:	mov.w	r0, ip, lsr #8
    8990:	mov.w	r9, ip, lsr #16
  }
  d[15] = 0;
    8994:	mov.w	sl, #0
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8998:	strb.w	r1, [lr, #3]
    899c:	strb.w	r0, [lr, #1]
    89a0:	strb.w	r9, [lr]
    89a4:	strb.w	ip, [lr, #2]
}
//-----------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    89a8:	ldr	r1, [r5, #0]
    89aa:	ldr	r0, [pc, #484]	; (8b90 <SdioCard::begin(SdioConfig)+0x520>)
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    89ac:	strb.w	sl, [lr, #15]
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    89b0:	str	r2, [sp, #4]
    89b2:	str	r3, [sp, #0]
}
//-----------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    89b4:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    89b8:	mov	r9, r0
    89ba:	cmp	r0, #0
    89bc:	beq.n	8a52 <SdioCard::begin(SdioConfig)+0x3e2>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    89be:	ldr	r2, [sp, #4]
    89c0:	ldr	r3, [sp, #0]
    89c2:	ldr	r0, [r6, #0]
    89c4:	ldr	r6, [r2, #0]
    89c6:	ldr	r2, [r3, #0]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    89c8:	ldr	r3, [pc, #456]	; (8b94 <SdioCard::begin(SdioConfig)+0x524>)
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    89ca:	ldr.w	ip, [fp]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    89ce:	strb.w	sl, [r3, #15]
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    89d2:	mov.w	lr, r0, lsr #8
    89d6:	mov.w	sl, r6, lsr #8
    89da:	mov.w	r9, r6, lsr #16
    89de:	strb.w	lr, [r3, #13]
    89e2:	mov.w	lr, r0, lsr #16
    89e6:	strb	r0, [r3, #14]
    89e8:	strb	r6, [r3, #10]
    89ea:	lsrs	r0, r0, #24
    89ec:	strb	r2, [r3, #6]
    89ee:	strb.w	lr, [r3, #12]
    89f2:	mov.w	fp, r2, lsr #8
    89f6:	mov.w	lr, r6, lsr #24
    89fa:	strb.w	sl, [r3, #9]
    89fe:	strb.w	r9, [r3, #8]
    8a02:	mov.w	sl, r2, lsr #16
    8a06:	mov.w	r9, ip, lsr #8
    8a0a:	lsrs	r2, r2, #24
    8a0c:	mov.w	r6, ip, lsr #16
    8a10:	strb	r0, [r3, #11]
    8a12:	strb.w	r9, [r3, #1]
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8a16:	ldr	r1, [r5, #0]
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8a18:	strb.w	ip, [r3, #2]
    8a1c:	strb.w	lr, [r3, #7]
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8a20:	ldr	r0, [pc, #372]	; (8b98 <SdioCard::begin(SdioConfig)+0x528>)
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8a22:	strb.w	fp, [r3, #5]
    8a26:	strb.w	sl, [r3, #4]
    8a2a:	strb	r2, [r3, #3]
    8a2c:	strb	r6, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8a2e:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    8a32:	mov	r9, r0
    8a34:	cbnz	r0, 8a60 <SdioCard::begin(SdioConfig)+0x3f0>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8a36:	ldr	r2, [pc, #356]	; (8b9c <SdioCard::begin(SdioConfig)+0x52c>)
    8a38:	movw	r1, #939	; 0x3ab
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a3c:	movs	r3, #5
  m_errorLine = line;
    8a3e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a40:	strb	r3, [r4, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    8a42:	b.n	87de <SdioCard::begin(SdioConfig)+0x16e>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8a44:	ldr	r2, [pc, #340]	; (8b9c <SdioCard::begin(SdioConfig)+0x52c>)
    8a46:	movw	r1, #933	; 0x3a5
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a4a:	movs	r3, #7
  m_errorLine = line;
    8a4c:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a4e:	strb	r3, [r4, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    8a50:	b.n	87de <SdioCard::begin(SdioConfig)+0x16e>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8a52:	ldr	r2, [pc, #328]	; (8b9c <SdioCard::begin(SdioConfig)+0x52c>)
    8a54:	mov.w	r1, #936	; 0x3a8
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a58:	movs	r3, #8
  m_errorLine = line;
    8a5a:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a5c:	strb	r3, [r4, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    8a5e:	b.n	87de <SdioCard::begin(SdioConfig)+0x16e>
  m_dmaBusy = false;
}
//=============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8a60:	ldr	r1, [r5, #0]
    8a62:	ldr	r0, [pc, #316]	; (8ba0 <SdioCard::begin(SdioConfig)+0x530>)
    8a64:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    8a68:	cbnz	r0, 8a7c <SdioCard::begin(SdioConfig)+0x40c>
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8a6a:	ldr	r2, [pc, #304]	; (8b9c <SdioCard::begin(SdioConfig)+0x52c>)
    8a6c:	mov.w	r1, #944	; 0x3b0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a70:	movs	r3, #20
  m_errorLine = line;
    8a72:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a74:	strb	r3, [r4, #0]
    return sdError(SD_CARD_ERROR_CMD7);
  }
  
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    8a76:	mov.w	r9, #0
    8a7a:	b.n	87de <SdioCard::begin(SdioConfig)+0x16e>
  m_dmaBusy = false;
}
//=============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8a7c:	movs	r1, #2
    8a7e:	ldr	r0, [pc, #292]	; (8ba4 <SdioCard::begin(SdioConfig)+0x534>)
    8a80:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    8a84:	mov	r9, r0
    8a86:	cmp	r0, #0
    8a88:	beq.n	8a6a <SdioCard::begin(SdioConfig)+0x3fa>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8a8a:	ldr	r3, [pc, #284]	; (8ba8 <SdioCard::begin(SdioConfig)+0x538>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
    8a8c:	ldr	r0, [pc, #284]	; (8bac <SdioCard::begin(SdioConfig)+0x53c>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8a8e:	ldr	r2, [r3, #0]
    8a90:	bic.w	r2, r2, #6
    8a94:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8a96:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
    8a98:	mov.w	r4, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8a9c:	orr.w	r2, r2, #2
    8aa0:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
  
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) //|| defined(__IMXRT1052__)
  // Determine if High Speed mode is supported and set frequency.
	  uint8_t status[64];
	  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8aa2:	add	r1, sp, #8
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
    8aa4:	str	r4, [r0, #0]
  
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) //|| defined(__IMXRT1052__)
  // Determine if High Speed mode is supported and set frequency.
	  uint8_t status[64];
	  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8aa6:	mvn.w	r0, #4278190080	; 0xff000000
    8aaa:	bl	7ef8 <cardCMD6(unsigned long, unsigned char*)>
		  cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8aae:	cbz	r0, 8ab8 <SdioCard::begin(SdioConfig)+0x448>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
  
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) //|| defined(__IMXRT1052__)
  // Determine if High Speed mode is supported and set frequency.
	  uint8_t status[64];
	  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8ab0:	ldrb.w	r3, [sp, #21]
    8ab4:	lsls	r2, r3, #30
    8ab6:	bmi.n	8b44 <SdioCard::begin(SdioConfig)+0x4d4>
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8ab8:	ldr	r2, [pc, #244]	; (8bb0 <SdioCard::begin(SdioConfig)+0x540>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8aba:	ldr	r6, [pc, #248]	; (8bb4 <SdioCard::begin(SdioConfig)+0x544>)
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8abc:	ldr	r5, [pc, #248]	; (8bb8 <SdioCard::begin(SdioConfig)+0x548>)
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8abe:	ldr	r4, [pc, #252]	; (8bbc <SdioCard::begin(SdioConfig)+0x54c>)
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8ac0:	ldr	r0, [pc, #252]	; (8bc0 <SdioCard::begin(SdioConfig)+0x550>)
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8ac2:	ldr	r1, [pc, #256]	; (8bc4 <SdioCard::begin(SdioConfig)+0x554>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8ac4:	movw	r3, #259	; 0x103
    8ac8:	str	r3, [r6, #0]
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8aca:	str	r3, [r5, #0]
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8acc:	str	r3, [r4, #0]
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8ace:	str	r3, [r2, #0]
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8ad0:	str	r3, [r0, #0]
	
  while ((f_pll/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    8ad2:	movs	r2, #4
	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8ad4:	str	r3, [r1, #0]
  sdclkfs >>= 1;
  dvs--;

	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Disable SDHC clock.
		SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    8ad6:	ldr	r1, [pc, #240]	; (8bc8 <SdioCard::begin(SdioConfig)+0x558>)
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = f_pll/(1000*sdclkfs*dvs);
    8ad8:	ldr	r3, [pc, #240]	; (8bcc <SdioCard::begin(SdioConfig)+0x55c>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8ada:	ldr	r0, [pc, #244]	; (8bd0 <SdioCard::begin(SdioConfig)+0x560>)
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = f_pll/(1000*sdclkfs*dvs);
    8adc:	mov.w	r4, #1000	; 0x3e8
    8ae0:	mul.w	r4, r4, r2
    8ae4:	udiv	r3, r3, r4
    8ae8:	str.w	r3, [r8]
  sdclkfs >>= 1;
  dvs--;

	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Disable SDHC clock.
		SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    8aec:	ldr	r3, [r1, #0]
    8aee:	bic.w	r3, r3, #8
    8af2:	str	r3, [r1, #0]
	#endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8af4:	ldr	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8af6:	bic.w	r3, r3, #1044480	; 0xff000
    8afa:	bic.w	r3, r3, #4080	; 0xff0
    8afe:	subs	r2, #1
    8b00:	orr.w	r3, r3, #917504	; 0xe0000
    8b04:	orr.w	r3, r3, r2, lsl #4
    8b08:	str	r3, [r1, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8b0a:	ldr	r3, [r0, #0]
    8b0c:	lsls	r3, r3, #28
    8b0e:	bpl.n	8b0a <SdioCard::begin(SdioConfig)+0x49a>
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    8b10:	ldr	r2, [pc, #180]	; (8bc8 <SdioCard::begin(SdioConfig)+0x558>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8b12:	ldr.w	lr, [pc, #160]	; 8bb4 <SdioCard::begin(SdioConfig)+0x544>
  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    8b16:	ldr	r3, [r2, #0]
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8b18:	ldr	r6, [pc, #156]	; (8bb8 <SdioCard::begin(SdioConfig)+0x548>)
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8b1a:	ldr	r5, [pc, #160]	; (8bbc <SdioCard::begin(SdioConfig)+0x54c>)
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8b1c:	ldr	r4, [pc, #144]	; (8bb0 <SdioCard::begin(SdioConfig)+0x540>)
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8b1e:	ldr	r0, [pc, #160]	; (8bc0 <SdioCard::begin(SdioConfig)+0x550>)
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8b20:	ldr	r1, [pc, #160]	; (8bc4 <SdioCard::begin(SdioConfig)+0x554>)
  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
  }
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) 
		// Enable the SDHC clock.
		SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    8b22:	orr.w	r3, r3, #8
    8b26:	str	r3, [r2, #0]
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8b28:	movw	r3, #1091	; 0x443
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8b2c:	mov.w	r2, #1088	; 0x440
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8b30:	str.w	r3, [lr]
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8b34:	str	r3, [r6, #0]
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8b36:	str	r2, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
    8b38:	movs	r2, #1
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8b3a:	str	r3, [r4, #0]
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8b3c:	str	r3, [r0, #0]
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8b3e:	str	r3, [r1, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // enable GPIO
  enableGPIO(true);
  m_initDone = true;
    8b40:	strb	r2, [r7, #0]
  return true;
    8b42:	b.n	87de <SdioCard::begin(SdioConfig)+0x16e>
  
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) //|| defined(__IMXRT1052__)
  // Determine if High Speed mode is supported and set frequency.
	  uint8_t status[64];
	  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
		  cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8b44:	add	r1, sp, #8
    8b46:	ldr	r0, [pc, #140]	; (8bd4 <SdioCard::begin(SdioConfig)+0x564>)
    8b48:	bl	7ef8 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML); 
  
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__) //|| defined(__IMXRT1052__)
  // Determine if High Speed mode is supported and set frequency.
	  uint8_t status[64];
	  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8b4c:	cmp	r0, #0
    8b4e:	beq.n	8ab8 <SdioCard::begin(SdioConfig)+0x448>
		  cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8b50:	ldrb.w	r3, [sp, #24]
    8b54:	and.w	r3, r3, #15
    8b58:	cmp	r3, #1
    8b5a:	bne.n	8ab8 <SdioCard::begin(SdioConfig)+0x448>
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8b5c:	ldr	r2, [pc, #80]	; (8bb0 <SdioCard::begin(SdioConfig)+0x540>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8b5e:	ldr	r6, [pc, #84]	; (8bb4 <SdioCard::begin(SdioConfig)+0x544>)
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8b60:	ldr	r5, [pc, #84]	; (8bb8 <SdioCard::begin(SdioConfig)+0x548>)
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8b62:	ldr	r4, [pc, #88]	; (8bbc <SdioCard::begin(SdioConfig)+0x54c>)
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8b64:	ldr	r0, [pc, #88]	; (8bc0 <SdioCard::begin(SdioConfig)+0x550>)
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8b66:	ldr	r1, [pc, #92]	; (8bc4 <SdioCard::begin(SdioConfig)+0x554>)
	static void enableGPIO(bool enable) {
	  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE; 				// high drive strentth
	  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS; 	// with pull-up
	  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8b68:	movw	r3, #259	; 0x103
    8b6c:	str	r3, [r6, #0]
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8b6e:	str	r3, [r5, #0]
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8b70:	str	r3, [r4, #0]
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8b72:	str	r3, [r2, #0]
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8b74:	str	r3, [r0, #0]
	
  while ((f_pll/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    8b76:	movs	r2, #2
	  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
	  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
	  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
	  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
	  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
	  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8b78:	str	r3, [r1, #0]
    8b7a:	b.n	8ad6 <SdioCard::begin(SdioConfig)+0x466>
    8b7c:	.word	0x400b1010
    8b80:	.word	0x20020384
    8b84:	.word	0x09090000
    8b88:	.word	0x400b1014
    8b8c:	.word	0x400b1018
    8b90:	.word	0x0a090000
    8b94:	.word	0x20020364
    8b98:	.word	0x071b0000
    8b9c:	.word	0x2002037c
    8ba0:	.word	0x371a0000
    8ba4:	.word	0x061a0000
    8ba8:	.word	0x400b1028
    8bac:	.word	0x400b1044
    8bb0:	.word	0x4004d00c
    8bb4:	.word	0x4004d000
    8bb8:	.word	0x4004d004
    8bbc:	.word	0x4004d008
    8bc0:	.word	0x4004d010
    8bc4:	.word	0x4004d014
    8bc8:	.word	0x400b102c
    8bcc:	.word	0x05b8d800
    8bd0:	.word	0x400b1024
    8bd4:	.word	0x80fffff1
    8bd8:	.word	0x2002038c
    8bdc:	.word	0x400b101c

00008be0 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    8be0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DBG_IRQSTAT();
    8be4:	ldr	r4, [pc, #376]	; (8d60 <SdioCard::readData(unsigned char*)+0x180>)
    8be6:	ldr	r3, [r4, #0]
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    8be8:	mov	r6, r1
  DBG_IRQSTAT();
    8bea:	cmp	r3, #0
    8bec:	bne.w	8d2e <SdioCard::readData(unsigned char*)+0x14e>
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    8bf0:	ldr	r3, [pc, #368]	; (8d64 <SdioCard::readData(unsigned char*)+0x184>)
    8bf2:	ldr	r3, [r3, #0]
    8bf4:	lsls	r2, r3, #22
    8bf6:	bmi.n	8c26 <SdioCard::readData(unsigned char*)+0x46>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8bf8:	ldr	r3, [pc, #364]	; (8d68 <SdioCard::readData(unsigned char*)+0x188>)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    8bfa:	ldr	r1, [pc, #368]	; (8d6c <SdioCard::readData(unsigned char*)+0x18c>)
//-----------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8bfc:	ldr	r2, [r3, #0]
    8bfe:	bic.w	r2, r2, #65536	; 0x10000
    8c02:	str	r2, [r3, #0]
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    8c04:	ldr	r2, [r1, #0]
    8c06:	lsrs	r2, r2, #16
    8c08:	lsls	r2, r2, #16
    8c0a:	cmp.w	r2, #65536	; 0x10000
    8c0e:	beq.w	8d54 <SdioCard::readData(unsigned char*)+0x174>
    // Don't stop at sector gap if last sector.  Allows auto CMD12.
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    } else {
      noInterrupts();
    8c12:	cpsid	i
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8c14:	ldr	r2, [r3, #0]
    8c16:	orr.w	r2, r2, #131072	; 0x20000
    8c1a:	str	r2, [r3, #0]
      SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8c1c:	ldr	r2, [r3, #0]
    8c1e:	orr.w	r2, r2, #65536	; 0x10000
    8c22:	str	r2, [r3, #0]
      interrupts();
    8c24:	cpsie	i
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8c26:	bl	9bc0 <micros>
static bool isBusyDMA() {
  return m_dmaBusy;
}
//-----------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    8c2a:	ldr	r5, [pc, #312]	; (8d64 <SdioCard::readData(unsigned char*)+0x184>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8c2c:	ldr.w	r8, [pc, #324]	; 8d74 <SdioCard::readData(unsigned char*)+0x194>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8c30:	mov	r7, r0
    8c32:	b.n	8c3e <SdioCard::readData(unsigned char*)+0x5e>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8c34:	bl	9bc0 <micros>
    8c38:	subs	r0, r0, r7
    8c3a:	cmp	r0, r8
    8c3c:	bhi.n	8d06 <SdioCard::readData(unsigned char*)+0x126>
static bool isBusyDMA() {
  return m_dmaBusy;
}
//-----------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    8c3e:	ldr	r0, [r5, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8c40:	ands.w	r4, r0, #2048	; 0x800
    8c44:	beq.n	8c34 <SdioCard::readData(unsigned char*)+0x54>
*/
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    8c46:	ldr	r0, [pc, #284]	; (8d64 <SdioCard::readData(unsigned char*)+0x184>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    8c48:	ldr	r1, [pc, #292]	; (8d70 <SdioCard::readData(unsigned char*)+0x190>)
    8c4a:	add.w	r2, r6, #64	; 0x40
    8c4e:	add.w	r6, r6, #576	; 0x240
*/
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    8c52:	ldr	r3, [r0, #0]
    8c54:	lsls	r3, r3, #20
    8c56:	bpl.n	8c52 <SdioCard::readData(unsigned char*)+0x72>
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    8c58:	ldr	r3, [r1, #0]
    8c5a:	str.w	r3, [r2, #-64]
    8c5e:	ldr	r3, [r1, #0]
    8c60:	str.w	r3, [r2, #-60]
    8c64:	ldr	r3, [r1, #0]
    8c66:	str.w	r3, [r2, #-56]
    8c6a:	ldr	r3, [r1, #0]
    8c6c:	str.w	r3, [r2, #-52]
    8c70:	ldr	r3, [r1, #0]
    8c72:	str.w	r3, [r2, #-48]
    8c76:	ldr	r3, [r1, #0]
    8c78:	str.w	r3, [r2, #-44]
    8c7c:	ldr	r3, [r1, #0]
    8c7e:	str.w	r3, [r2, #-40]
    8c82:	ldr	r3, [r1, #0]
    8c84:	str.w	r3, [r2, #-36]
    8c88:	ldr	r3, [r1, #0]
    8c8a:	str.w	r3, [r2, #-32]
    8c8e:	ldr	r3, [r1, #0]
    8c90:	str.w	r3, [r2, #-28]
    8c94:	ldr	r3, [r1, #0]
    8c96:	str.w	r3, [r2, #-24]
    8c9a:	ldr	r3, [r1, #0]
    8c9c:	str.w	r3, [r2, #-20]
    8ca0:	ldr	r3, [r1, #0]
    8ca2:	str.w	r3, [r2, #-16]
    8ca6:	ldr	r3, [r1, #0]
    8ca8:	str.w	r3, [r2, #-12]
    8cac:	ldr	r3, [r1, #0]
    8cae:	str.w	r3, [r2, #-8]
    8cb2:	ldr	r3, [r1, #0]
    8cb4:	str.w	r3, [r2, #-4]
    8cb8:	adds	r2, #64	; 0x40
													);
*/
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8cba:	cmp	r2, r6
    8cbc:	bne.n	8c52 <SdioCard::readData(unsigned char*)+0x72>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8cbe:	bl	9bc0 <micros>
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8cc2:	ldr	r5, [pc, #156]	; (8d60 <SdioCard::readData(unsigned char*)+0x180>)
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8cc4:	ldr	r7, [pc, #172]	; (8d74 <SdioCard::readData(unsigned char*)+0x194>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8cc6:	mov	r6, r0
    8cc8:	b.n	8cd4 <SdioCard::readData(unsigned char*)+0xf4>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8cca:	bl	9bc0 <micros>
    8cce:	subs	r0, r0, r6
    8cd0:	cmp	r0, r7
    8cd2:	bhi.n	8d1a <SdioCard::readData(unsigned char*)+0x13a>
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8cd4:	ldr	r3, [r5, #0]
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8cd6:	ldr	r4, [pc, #160]	; (8d78 <SdioCard::readData(unsigned char*)+0x198>)
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//-----------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8cd8:	ldr	r2, [pc, #132]	; (8d60 <SdioCard::readData(unsigned char*)+0x180>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8cda:	ands	r4, r3
    8cdc:	cmp	r4, #0
    8cde:	beq.n	8cca <SdioCard::readData(unsigned char*)+0xea>
//	Serial.println(";");
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    8ce0:	ldr	r1, [pc, #152]	; (8d7c <SdioCard::readData(unsigned char*)+0x19c>)
    8ce2:	ldr	r3, [r2, #0]
    8ce4:	str	r3, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    8ce6:	ldr	r3, [r1, #0]
    8ce8:	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8cea:	ldr	r3, [r1, #0]
    8cec:	ands.w	r0, r3, #2
    8cf0:	beq.n	8d02 <SdioCard::readData(unsigned char*)+0x122>
    8cf2:	ldr	r3, [r1, #0]
    8cf4:	ldr	r0, [pc, #136]	; (8d80 <SdioCard::readData(unsigned char*)+0x1a0>)
    8cf6:	ands	r0, r3
    8cf8:	clz	r0, r0
    8cfc:	lsrs	r0, r0, #5
    8cfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
    8d02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d06:	ldr	r1, [pc, #124]	; (8d84 <SdioCard::readData(unsigned char*)+0x1a4>)
  m_errorLine = line;
    8d08:	ldr	r3, [pc, #124]	; (8d88 <SdioCard::readData(unsigned char*)+0x1a8>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d0a:	movs	r5, #25
  m_errorLine = line;
    8d0c:	movw	r2, #1124	; 0x464
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d10:	strb	r5, [r1, #0]
													SDHC_PRSSTAT & SDHC_PRSSTAT_HCKOFF,
													SDHC_PRSSTAT & SDHC_PRSSTAT_SDOFF
													);
*/
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    8d12:	mov	r0, r4
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8d14:	str	r2, [r3, #0]
													SDHC_PRSSTAT & SDHC_PRSSTAT_HCKOFF,
													SDHC_PRSSTAT & SDHC_PRSSTAT_SDOFF
													);
*/
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    8d16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d1a:	ldr	r1, [pc, #104]	; (8d84 <SdioCard::readData(unsigned char*)+0x1a4>)
  m_errorLine = line;
    8d1c:	ldr	r3, [pc, #104]	; (8d88 <SdioCard::readData(unsigned char*)+0x1a8>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d1e:	movs	r5, #28
  m_errorLine = line;
    8d20:	movw	r2, #1138	; 0x472
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d24:	strb	r5, [r1, #0]
    }
    p32 += FIFO_WML;
//	Serial.println(";");
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    8d26:	mov	r0, r4
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8d28:	str	r2, [r3, #0]
    }
    p32 += FIFO_WML;
//	Serial.println(";");
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    8d2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8d2e:	movw	r1, #1101	; 0x44d
    8d32:	ldr	r0, [pc, #88]	; (8d8c <SdioCard::readData(unsigned char*)+0x1ac>)
    8d34:	bl	adbc <Print::print(long)>
    8d38:	movs	r1, #9
    8d3a:	ldr	r0, [pc, #84]	; (8d90 <SdioCard::readData(unsigned char*)+0x1b0>)
    8d3c:	bl	9524 <usb_serial_write>
  memcpy(csd, &m_csd, 16);
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
  DBG_IRQSTAT();
    8d40:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    8d42:	ldr	r0, [pc, #72]	; (8d8c <SdioCard::readData(unsigned char*)+0x1ac>)
    8d44:	movs	r3, #0
    8d46:	movs	r2, #16
    8d48:	bl	aeb8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    8d4c:	ldr	r0, [pc, #60]	; (8d8c <SdioCard::readData(unsigned char*)+0x1ac>)
    8d4e:	bl	ae6c <Print::println()>
    8d52:	b.n	8bf0 <SdioCard::readData(unsigned char*)+0x10>
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0X10000) {
    // Don't stop at sector gap if last sector.  Allows auto CMD12.
      SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8d54:	ldr	r2, [r3, #0]
    8d56:	orr.w	r2, r2, #131072	; 0x20000
    8d5a:	str	r2, [r3, #0]
    8d5c:	b.n	8c26 <SdioCard::readData(unsigned char*)+0x46>
    8d5e:	nop
    8d60:	.word	0x400b1030
    8d64:	.word	0x400b1024
    8d68:	.word	0x400b1028
    8d6c:	.word	0x400b1004
    8d70:	.word	0x400b1020
    8d74:	.word	0x000f4240
    8d78:	.word	0x117f0002
    8d7c:	.word	0x20020380
    8d80:	.word	0x117f0000
    8d84:	.word	0x1fff088c
    8d88:	.word	0x2002037c
    8d8c:	.word	0x1fff0898
    8d90:	.word	0x00013ca0

00008d94 <SdioCard::readStart(unsigned long, unsigned long)>:
  // K66/K65 Errata - SDHC: Does not support Infinite Sector Transfer Mode.
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector, uint32_t count) {
    8d94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DBG_IRQSTAT();
    8d98:	ldr	r4, [pc, #228]	; (8e80 <SdioCard::readStart(unsigned long, unsigned long)+0xec>)
    8d9a:	ldr	r3, [r4, #0]
  // K66/K65 Errata - SDHC: Does not support Infinite Sector Transfer Mode.
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector, uint32_t count) {
    8d9c:	mov	r9, r1
    8d9e:	mov	r7, r2
  DBG_IRQSTAT();
    8da0:	cmp	r3, #0
    8da2:	bne.n	8e3a <SdioCard::readStart(unsigned long, unsigned long)+0xa6>
  if (count > 0XFFFF) {
    8da4:	cmp.w	r7, #65536	; 0x10000
    8da8:	bcc.n	8dbe <SdioCard::readStart(unsigned long, unsigned long)+0x2a>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8daa:	ldr	r1, [pc, #216]	; (8e84 <SdioCard::readStart(unsigned long, unsigned long)+0xf0>)
  m_errorLine = line;
    8dac:	ldr	r3, [pc, #216]	; (8e88 <SdioCard::readStart(unsigned long, unsigned long)+0xf4>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8dae:	movs	r0, #27
  m_errorLine = line;
    8db0:	movw	r2, #1159	; 0x487
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8db4:	strb	r0, [r1, #0]
  m_errorLine = line;
    8db6:	str	r2, [r3, #0]
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector, uint32_t count) {
  DBG_IRQSTAT();
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_READ_START);
    8db8:	movs	r0, #0
    8dba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    8dbe:	ldr.w	sl, [pc, #244]	; 8eb4 <SdioCard::readStart(unsigned long, unsigned long)+0x120>
    8dc2:	ldr	r3, [pc, #200]	; (8e8c <SdioCard::readStart(unsigned long, unsigned long)+0xf8>)
    8dc4:	str.w	r3, [sl]
  uint32_t m = micros();
    8dc8:	bl	9bc0 <micros>
    8dcc:	ldr	r4, [pc, #192]	; (8e90 <SdioCard::readStart(unsigned long, unsigned long)+0xfc>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8dce:	ldr.w	r8, [pc, #232]	; 8eb8 <SdioCard::readStart(unsigned long, unsigned long)+0x124>
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8dd2:	ldr	r6, [pc, #192]	; (8e94 <SdioCard::readStart(unsigned long, unsigned long)+0x100>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
    8dd4:	mov	r5, r0
    8dd6:	b.n	8de6 <SdioCard::readStart(unsigned long, unsigned long)+0x52>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8dd8:	bl	9bc0 <micros>
    8ddc:	subs	r0, r0, r5
    8dde:	cmp	r0, r6
    8de0:	bhi.n	8e66 <SdioCard::readStart(unsigned long, unsigned long)+0xd2>
      m_busyFcn = 0;
      return true;
    }
    yield();
    8de2:	bl	1708 <yield>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    8de6:	ldr	r1, [r4, #0]
    8de8:	ldr	r0, [pc, #172]	; (8e98 <SdioCard::readStart(unsigned long, unsigned long)+0x104>)
    8dea:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    8dee:	cmp	r0, #0
    8df0:	beq.n	8dd8 <SdioCard::readStart(unsigned long, unsigned long)+0x44>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8df2:	ldr.w	r3, [r8]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8df6:	lsls	r3, r3, #23
    8df8:	bpl.n	8dd8 <SdioCard::readStart(unsigned long, unsigned long)+0x44>
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    8dfa:	movs	r3, #0
    return sdError(SD_CARD_ERROR_READ_START);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    8dfc:	cmp	r7, #1
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    8dfe:	str.w	r3, [sl]
    return sdError(SD_CARD_ERROR_READ_START);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    8e02:	bls.n	8e0e <SdioCard::readStart(unsigned long, unsigned long)+0x7a>
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8e04:	ldr	r2, [pc, #148]	; (8e9c <SdioCard::readStart(unsigned long, unsigned long)+0x108>)
    8e06:	ldr	r3, [r2, #0]
    8e08:	orr.w	r3, r3, #65536	; 0x10000
    8e0c:	str	r3, [r2, #0]
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8e0e:	ldr	r3, [pc, #144]	; (8ea0 <SdioCard::readStart(unsigned long, unsigned long)+0x10c>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    8e10:	ldr	r2, [pc, #144]	; (8ea4 <SdioCard::readStart(unsigned long, unsigned long)+0x110>)
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8e12:	ldrb	r3, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    8e14:	lsls	r7, r7, #16
    8e16:	orr.w	r7, r7, #512	; 0x200
    8e1a:	str	r7, [r2, #0]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8e1c:	cbz	r3, 8e60 <SdioCard::readStart(unsigned long, unsigned long)+0xcc>
    8e1e:	mov	r1, r9
    8e20:	ldr	r0, [pc, #132]	; (8ea8 <SdioCard::readStart(unsigned long, unsigned long)+0x114>)
    8e22:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    8e26:	cbnz	r0, 8e36 <SdioCard::readStart(unsigned long, unsigned long)+0xa2>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e28:	ldr	r1, [pc, #88]	; (8e84 <SdioCard::readStart(unsigned long, unsigned long)+0xf0>)
  m_errorLine = line;
    8e2a:	ldr	r3, [pc, #92]	; (8e88 <SdioCard::readStart(unsigned long, unsigned long)+0xf4>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e2c:	movs	r4, #12
  m_errorLine = line;
    8e2e:	movw	r2, #1169	; 0x491
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e32:	strb	r4, [r1, #0]
  m_errorLine = line;
    8e34:	str	r2, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    8e36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8e3a:	movw	r1, #1157	; 0x485
    8e3e:	ldr	r0, [pc, #108]	; (8eac <SdioCard::readStart(unsigned long, unsigned long)+0x118>)
    8e40:	bl	adbc <Print::print(long)>
    8e44:	movs	r1, #9
    8e46:	ldr	r0, [pc, #104]	; (8eb0 <SdioCard::readStart(unsigned long, unsigned long)+0x11c>)
    8e48:	bl	9524 <usb_serial_write>
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector, uint32_t count) {
  DBG_IRQSTAT();
    8e4c:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    8e4e:	ldr	r0, [pc, #92]	; (8eac <SdioCard::readStart(unsigned long, unsigned long)+0x118>)
    8e50:	movs	r3, #0
    8e52:	movs	r2, #16
    8e54:	bl	aeb8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    8e58:	ldr	r0, [pc, #80]	; (8eac <SdioCard::readStart(unsigned long, unsigned long)+0x118>)
    8e5a:	bl	ae6c <Print::println()>
    8e5e:	b.n	8da4 <SdioCard::readStart(unsigned long, unsigned long)+0x10>
  }
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8e60:	mov.w	r1, r9, lsl #9
    8e64:	b.n	8e20 <SdioCard::readStart(unsigned long, unsigned long)+0x8c>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e66:	ldr	r1, [pc, #28]	; (8e84 <SdioCard::readStart(unsigned long, unsigned long)+0xf0>)
  m_errorLine = line;
    8e68:	ldr	r3, [pc, #28]	; (8e88 <SdioCard::readStart(unsigned long, unsigned long)+0xf4>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e6a:	movs	r4, #10
  m_errorLine = line;
    8e6c:	movw	r2, #1162	; 0x48a
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    8e70:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e72:	strb	r4, [r1, #0]
  m_errorLine = line;
    8e74:	str	r2, [r3, #0]
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    8e76:	str.w	r0, [sl]
  DBG_IRQSTAT();
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_READ_START);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8e7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8e7e:	nop
    8e80:	.word	0x400b1030
    8e84:	.word	0x1fff088c
    8e88:	.word	0x2002037c
    8e8c:	.word	0x00007ead
    8e90:	.word	0x20020384
    8e94:	.word	0x000f4240
    8e98:	.word	0x0d1a0000
    8e9c:	.word	0x400b1028
    8ea0:	.word	0x20020375
    8ea4:	.word	0x400b1004
    8ea8:	.word	0x123a0036
    8eac:	.word	0x1fff0898
    8eb0:	.word	0x00013ca0
    8eb4:	.word	0x200203a0
    8eb8:	.word	0x400b1010

00008ebc <SdioCard::readSector(unsigned long, unsigned char*)>:
//-----------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//-----------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    8ebc:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    8ebe:	ldrb	r3, [r0, #12]
    8ec0:	lsls	r4, r3, #31
//-----------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//-----------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    8ec2:	sub.w	sp, sp, #512	; 0x200
    8ec6:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    8ec8:	bpl.n	8ef0 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    8eca:	lsls	r3, r2, #30
    8ecc:	beq.n	8f46 <SdioCard::readSector(unsigned long, unsigned char*)+0x8a>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    8ece:	mov	r2, sp
    8ed0:	movs	r3, #1
    8ed2:	ldr	r0, [pc, #196]	; (8f98 <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    8ed4:	bl	8110 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8ed8:	cmp	r0, #0
    8eda:	beq.n	8f52 <SdioCard::readSector(unsigned long, unsigned char*)+0x96>
      return sdError(SD_CARD_ERROR_CMD17); 
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    8edc:	mov	r1, sp
    8ede:	mov	r0, r6
    8ee0:	mov.w	r2, #512	; 0x200
    8ee4:	bl	9324 <memcpy>
    m_curSector++;
    if (m_curSector >= m_limitSector) {
      m_curState = IDLE_STATE;
    }
  }
  return true;
    8ee8:	movs	r0, #1
}
    8eea:	add.w	sp, sp, #512	; 0x200
    8eee:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    8ef0:	ldrb	r3, [r0, #13]
    8ef2:	cmp	r3, #1
    8ef4:	mov	r4, r0
    8ef6:	mov	r5, r1
    8ef8:	beq.n	8f68 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      if (!syncDevice()) {
    8efa:	ldr	r2, [r0, #0]
    8efc:	ldr	r1, [pc, #156]	; (8f9c <SdioCard::readSector(unsigned long, unsigned char*)+0xe0>)
    8efe:	ldr	r2, [r2, #20]
    8f00:	cmp	r2, r1
    8f02:	bne.n	8f78 <SdioCard::readSector(unsigned long, unsigned char*)+0xbc>
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    if (!SdioCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    8f04:	cmp	r3, #2
    8f06:	beq.n	8f88 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      } 
      m_limitSector = (sector + MAX_SDHC_COUNT) & ~RU_MASK;
    8f08:	add.w	r2, r5, #65280	; 0xff00
    8f0c:	adds	r2, #255	; 0xff
    8f0e:	bic.w	r2, r2, #1020	; 0x3fc
    8f12:	bic.w	r2, r2, #3
    8f16:	str	r2, [r4, #8]
      if (!SdioCard::readStart(sector, m_limitSector - sector)) {
    8f18:	mov	r1, r5
    8f1a:	subs	r2, r2, r5
    8f1c:	mov	r0, r4
    8f1e:	bl	8d94 <SdioCard::readStart(unsigned long, unsigned long)>
    8f22:	cbz	r0, 8f80 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    8f24:	movs	r3, #1
      } 
      m_limitSector = (sector + MAX_SDHC_COUNT) & ~RU_MASK;
      if (!SdioCard::readStart(sector, m_limitSector - sector)) {
        return false;
      }
      m_curSector = sector;
    8f26:	str	r5, [r4, #4]
      m_curState = READ_STATE;
    8f28:	strb	r3, [r4, #13]
    }
    if (!SdioCard::readData(dst)) {
    8f2a:	mov	r1, r6
    8f2c:	mov	r0, r4
    8f2e:	bl	8be0 <SdioCard::readData(unsigned char*)>
    8f32:	cbz	r0, 8f80 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      return false;
    }
    m_curSector++;
    8f34:	ldr	r3, [r4, #4]
    if (m_curSector >= m_limitSector) {
    8f36:	ldr	r2, [r4, #8]
      m_curState = READ_STATE;
    }
    if (!SdioCard::readData(dst)) {
      return false;
    }
    m_curSector++;
    8f38:	adds	r3, #1
    if (m_curSector >= m_limitSector) {
    8f3a:	cmp	r3, r2
      m_curState = READ_STATE;
    }
    if (!SdioCard::readData(dst)) {
      return false;
    }
    m_curSector++;
    8f3c:	str	r3, [r4, #4]
    if (m_curSector >= m_limitSector) {
    8f3e:	bcc.n	8f62 <SdioCard::readSector(unsigned long, unsigned char*)+0xa6>
      m_curState = IDLE_STATE;
    8f40:	movs	r3, #0
    8f42:	strb	r3, [r4, #13]
    8f44:	b.n	8f62 <SdioCard::readSector(unsigned long, unsigned char*)+0xa6>
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    8f46:	movs	r3, #1
    8f48:	ldr	r0, [pc, #76]	; (8f98 <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    8f4a:	bl	8110 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8f4e:	cmp	r0, #0
    8f50:	bne.n	8ee8 <SdioCard::readSector(unsigned long, unsigned char*)+0x2c>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f52:	ldr	r1, [pc, #76]	; (8fa0 <SdioCard::readSector(unsigned long, unsigned char*)+0xe4>)
  m_errorLine = line;
    8f54:	ldr	r3, [pc, #76]	; (8fa4 <SdioCard::readSector(unsigned long, unsigned char*)+0xe8>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f56:	movs	r0, #11
  m_errorLine = line;
    8f58:	movw	r2, #1039	; 0x40f
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f5c:	strb	r0, [r1, #0]
  m_errorLine = line;
    8f5e:	str	r2, [r3, #0]
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17); 
    8f60:	movs	r0, #0
    if (m_curSector >= m_limitSector) {
      m_curState = IDLE_STATE;
    }
  }
  return true;
}
    8f62:	add.w	sp, sp, #512	; 0x200
    8f66:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    8f68:	ldr	r3, [r0, #4]
    8f6a:	cmp	r1, r3
    8f6c:	beq.n	8f2a <SdioCard::readSector(unsigned long, unsigned char*)+0x6e>
      if (!syncDevice()) {
    8f6e:	ldr	r2, [r0, #0]
    8f70:	ldr	r3, [pc, #40]	; (8f9c <SdioCard::readSector(unsigned long, unsigned char*)+0xe0>)
    8f72:	ldr	r2, [r2, #20]
    8f74:	cmp	r2, r3
    8f76:	beq.n	8f88 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
    8f78:	mov	r0, r4
    8f7a:	blx	r2
    8f7c:	cmp	r0, #0
    8f7e:	bne.n	8f08 <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
        return false;
    8f80:	movs	r0, #0
    if (m_curSector >= m_limitSector) {
      m_curState = IDLE_STATE;
    }
  }
  return true;
}
    8f82:	add.w	sp, sp, #512	; 0x200
    8f86:	pop	{r4, r5, r6, pc}
  return statusCMD13();
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    8f88:	movs	r3, #0
    8f8a:	strb	r3, [r4, #13]
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    8f8c:	bl	8558 <transferStop()>
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    if (!SdioCard::readStop()) {
    8f90:	cmp	r0, #0
    8f92:	bne.n	8f08 <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
    8f94:	b.n	8f80 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
    8f96:	nop
    8f98:	.word	0x113a0011
    8f9c:	.word	0x0000865d
    8fa0:	.word	0x1fff088c
    8fa4:	.word	0x2002037c

00008fa8 <SdioCard::writeStart(unsigned long, unsigned long)>:
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::writeStart(uint32_t sector, uint32_t count) {
  if (count > 0XFFFF) {
    8fa8:	cmp.w	r2, #65536	; 0x10000
    8fac:	bcs.n	903a <SdioCard::writeStart(unsigned long, unsigned long)+0x92>
  // K66/K65 Errata - SDHC: Does not support Infinite Sector Transfer Mode.
  return sdError(SD_CARD_ERROR_FUNCTION_NOT_SUPPORTED);
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::writeStart(uint32_t sector, uint32_t count) {
    8fae:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_WRITE_START);
  }
  DBG_IRQSTAT();
    8fb2:	ldr	r4, [pc, #220]	; (9090 <SdioCard::writeStart(unsigned long, unsigned long)+0xe8>)
    8fb4:	ldr	r3, [r4, #0]
    8fb6:	mov	r9, r1
    8fb8:	mov	r7, r2
    8fba:	cmp	r3, #0
    8fbc:	bne.n	906a <SdioCard::writeStart(unsigned long, unsigned long)+0xc2>
  return true;
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    8fbe:	ldr.w	sl, [pc, #260]	; 90c4 <SdioCard::writeStart(unsigned long, unsigned long)+0x11c>
    8fc2:	ldr	r3, [pc, #208]	; (9094 <SdioCard::writeStart(unsigned long, unsigned long)+0xec>)
    8fc4:	str.w	r3, [sl]
  uint32_t m = micros();
    8fc8:	bl	9bc0 <micros>
    8fcc:	ldr	r4, [pc, #200]	; (9098 <SdioCard::writeStart(unsigned long, unsigned long)+0xf0>)
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8fce:	ldr.w	r8, [pc, #248]	; 90c8 <SdioCard::writeStart(unsigned long, unsigned long)+0x120>
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8fd2:	ldr	r6, [pc, #200]	; (909c <SdioCard::writeStart(unsigned long, unsigned long)+0xf4>)
}
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
    8fd4:	mov	r5, r0
    8fd6:	b.n	8fe6 <SdioCard::writeStart(unsigned long, unsigned long)+0x3e>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8fd8:	bl	9bc0 <micros>
    8fdc:	subs	r0, r0, r5
    8fde:	cmp	r0, r6
    8fe0:	bhi.n	904c <SdioCard::writeStart(unsigned long, unsigned long)+0xa4>
      m_busyFcn = 0;
      return true;
    }
    yield();
    8fe2:	bl	1708 <yield>
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//-----------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    8fe6:	ldr	r1, [r4, #0]
    8fe8:	ldr	r0, [pc, #180]	; (90a0 <SdioCard::writeStart(unsigned long, unsigned long)+0xf8>)
    8fea:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    8fee:	cmp	r0, #0
    8ff0:	beq.n	8fd8 <SdioCard::writeStart(unsigned long, unsigned long)+0x30>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8ff2:	ldr.w	r3, [r8]
//-----------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8ff6:	lsls	r3, r3, #23
    8ff8:	bpl.n	8fd8 <SdioCard::writeStart(unsigned long, unsigned long)+0x30>
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    8ffa:	movs	r3, #0
  }
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    8ffc:	cmp	r7, #1
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    8ffe:	str.w	r3, [sl]
  }
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    9002:	bls.n	900e <SdioCard::writeStart(unsigned long, unsigned long)+0x66>
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9004:	ldr	r2, [pc, #156]	; (90a4 <SdioCard::writeStart(unsigned long, unsigned long)+0xfc>)
    9006:	ldr	r3, [r2, #0]
    9008:	orr.w	r3, r3, #65536	; 0x10000
    900c:	str	r3, [r2, #0]
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    900e:	ldr	r3, [pc, #152]	; (90a8 <SdioCard::writeStart(unsigned long, unsigned long)+0x100>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    9010:	ldr	r2, [pc, #152]	; (90ac <SdioCard::writeStart(unsigned long, unsigned long)+0x104>)

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9012:	ldrb	r3, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    9014:	lsls	r7, r7, #16
    9016:	orr.w	r7, r7, #512	; 0x200
    901a:	str	r7, [r2, #0]

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    901c:	cbz	r3, 9064 <SdioCard::writeStart(unsigned long, unsigned long)+0xbc>
    901e:	mov	r1, r9
    9020:	ldr	r0, [pc, #140]	; (90b0 <SdioCard::writeStart(unsigned long, unsigned long)+0x108>)
    9022:	bl	7de4 <cardCommand(unsigned long, unsigned long)>
    9026:	cbnz	r0, 9036 <SdioCard::writeStart(unsigned long, unsigned long)+0x8e>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9028:	ldr	r1, [pc, #136]	; (90b4 <SdioCard::writeStart(unsigned long, unsigned long)+0x10c>)
  m_errorLine = line;
    902a:	ldr	r3, [pc, #140]	; (90b8 <SdioCard::writeStart(unsigned long, unsigned long)+0x110>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    902c:	movs	r4, #14
  m_errorLine = line;
    902e:	movw	r2, #1315	; 0x523
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9032:	strb	r4, [r1, #0]
  m_errorLine = line;
    9034:	str	r2, [r3, #0]

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    9036:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    903a:	ldr	r1, [pc, #120]	; (90b4 <SdioCard::writeStart(unsigned long, unsigned long)+0x10c>)
  m_errorLine = line;
    903c:	ldr	r3, [pc, #120]	; (90b8 <SdioCard::writeStart(unsigned long, unsigned long)+0x110>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    903e:	movs	r0, #32
  m_errorLine = line;
    9040:	movw	r2, #1303	; 0x517
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9044:	strb	r0, [r1, #0]
  m_errorLine = line;
    9046:	str	r2, [r3, #0]
}
//-----------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::writeStart(uint32_t sector, uint32_t count) {
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_WRITE_START);
    9048:	movs	r0, #0

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    904a:	bx	lr
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    904c:	ldr	r1, [pc, #100]	; (90b4 <SdioCard::writeStart(unsigned long, unsigned long)+0x10c>)
  m_errorLine = line;
    904e:	ldr	r3, [pc, #104]	; (90b8 <SdioCard::writeStart(unsigned long, unsigned long)+0x110>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9050:	movs	r4, #10
  m_errorLine = line;
    9052:	movw	r2, #1307	; 0x51b
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    9056:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9058:	strb	r4, [r1, #0]
  m_errorLine = line;
    905a:	str	r2, [r3, #0]
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    905c:	str.w	r0, [sl]
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_WRITE_START);
  }
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    9060:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (count > 1) {
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  }
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);

  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9064:	mov.w	r1, r9, lsl #9
    9068:	b.n	9020 <SdioCard::writeStart(unsigned long, unsigned long)+0x78>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    906a:	movw	r1, #1305	; 0x519
    906e:	ldr	r0, [pc, #76]	; (90bc <SdioCard::writeStart(unsigned long, unsigned long)+0x114>)
    9070:	bl	adbc <Print::print(long)>
    9074:	movs	r1, #9
    9076:	ldr	r0, [pc, #72]	; (90c0 <SdioCard::writeStart(unsigned long, unsigned long)+0x118>)
    9078:	bl	9524 <usb_serial_write>
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::writeStart(uint32_t sector, uint32_t count) {
  if (count > 0XFFFF) {
    return sdError(SD_CARD_ERROR_WRITE_START);
  }
  DBG_IRQSTAT();
    907c:	ldr	r1, [r4, #0]

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    907e:	ldr	r0, [pc, #60]	; (90bc <SdioCard::writeStart(unsigned long, unsigned long)+0x114>)
    9080:	movs	r3, #0
    9082:	movs	r2, #16
    9084:	bl	aeb8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    9088:	ldr	r0, [pc, #48]	; (90bc <SdioCard::writeStart(unsigned long, unsigned long)+0x114>)
    908a:	bl	ae6c <Print::println()>
    908e:	b.n	8fbe <SdioCard::writeStart(unsigned long, unsigned long)+0x16>
    9090:	.word	0x400b1030
    9094:	.word	0x00007ead
    9098:	.word	0x20020384
    909c:	.word	0x000f4240
    90a0:	.word	0x0d1a0000
    90a4:	.word	0x400b1028
    90a8:	.word	0x20020375
    90ac:	.word	0x400b1004
    90b0:	.word	0x193a0026
    90b4:	.word	0x1fff088c
    90b8:	.word	0x2002037c
    90bc:	.word	0x1fff0898
    90c0:	.word	0x00013ca0
    90c4:	.word	0x200203a0
    90c8:	.word	0x400b1010

000090cc <SdioCard::writeSector(unsigned long, unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    90cc:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    90ce:	ldrb	r3, [r0, #12]
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    90d0:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    90d2:	lsls	r2, r3, #31
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    90d4:	sub.w	sp, sp, #512	; 0x200
    90d8:	mov	r5, r1
  if (m_sdioConfig.useDma()) {
    90da:	bpl.n	9110 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    90dc:	lsls	r3, r6, #30
    90de:	beq.n	90ee <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    90e0:	mov	r1, r6
    90e2:	mov	r0, sp
    90e4:	mov.w	r2, #512	; 0x200
    90e8:	bl	9324 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    90ec:	mov	r6, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    90ee:	mov	r2, r6
    90f0:	mov	r1, r5
    90f2:	movs	r3, #1
    90f4:	ldr	r0, [pc, #156]	; (9194 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>)
    90f6:	bl	8110 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    90fa:	cbnz	r0, 910a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    90fc:	ldr	r1, [pc, #152]	; (9198 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xcc>)
  m_errorLine = line;
    90fe:	ldr	r3, [pc, #156]	; (919c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd0>)
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9100:	movs	r4, #13
  m_errorLine = line;
    9102:	movw	r2, #1213	; 0x4bd
#endif  // USE_DEBUG_MODE
//=============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9106:	strb	r4, [r1, #0]
  m_errorLine = line;
    9108:	str	r2, [r3, #0]
    if (m_curSector >= m_limitSector) {
      m_curState = IDLE_STATE;
    }
  }
  return true;
}
    910a:	add.w	sp, sp, #512	; 0x200
    910e:	pop	{r4, r5, r6, pc}
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9110:	ldrb	r3, [r0, #13]
    9112:	cmp	r3, #2
    9114:	mov	r4, r0
    9116:	beq.n	9166 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9a>
      if (!syncDevice()) {
    9118:	ldr	r2, [r0, #0]
    911a:	ldr	r1, [pc, #132]	; (91a0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd4>)
    911c:	ldr	r2, [r2, #20]
    911e:	cmp	r2, r1
    9120:	bne.n	9176 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xaa>
uint32_t SdioCard::status() {
  return statusCMD13();
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    9122:	subs	r3, #1
    9124:	cmp	r3, #1
    9126:	bls.n	9186 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      m_limitSector = (sector + MAX_SDHC_COUNT) & ~RU_MASK;
    9128:	add.w	r2, r5, #65280	; 0xff00
    912c:	adds	r2, #255	; 0xff
    912e:	bic.w	r2, r2, #1020	; 0x3fc
    9132:	bic.w	r2, r2, #3
    9136:	str	r2, [r4, #8]
      if (!SdioCard::writeStart(sector , m_limitSector - sector)) {
    9138:	mov	r1, r5
    913a:	subs	r2, r2, r5
    913c:	mov	r0, r4
    913e:	bl	8fa8 <SdioCard::writeStart(unsigned long, unsigned long)>
    9142:	cbz	r0, 917e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    9144:	movs	r3, #2
      }
      m_limitSector = (sector + MAX_SDHC_COUNT) & ~RU_MASK;
      if (!SdioCard::writeStart(sector , m_limitSector - sector)) {
        return false;
      }
      m_curSector = sector;
    9146:	str	r5, [r4, #4]
      m_curState = WRITE_STATE;
    9148:	strb	r3, [r4, #13]
    }
    if (!SdioCard::writeData(src)) {
    914a:	mov	r1, r6
    914c:	mov	r0, r4
    914e:	bl	8370 <SdioCard::writeData(unsigned char const*)>
    9152:	cbz	r0, 917e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      return false;
    }
    m_curSector++;
    9154:	ldr	r3, [r4, #4]
    if (m_curSector >= m_limitSector) {
    9156:	ldr	r2, [r4, #8]
      m_curState = WRITE_STATE;
    }
    if (!SdioCard::writeData(src)) {
      return false;
    }
    m_curSector++;
    9158:	adds	r3, #1
    if (m_curSector >= m_limitSector) {
    915a:	cmp	r3, r2
      m_curState = WRITE_STATE;
    }
    if (!SdioCard::writeData(src)) {
      return false;
    }
    m_curSector++;
    915c:	str	r3, [r4, #4]
    if (m_curSector >= m_limitSector) {
    915e:	bcc.n	910a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      m_curState = IDLE_STATE;
    9160:	movs	r3, #0
    9162:	strb	r3, [r4, #13]
    9164:	b.n	910a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9166:	ldr	r3, [r0, #4]
    9168:	cmp	r1, r3
    916a:	beq.n	914a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7e>
      if (!syncDevice()) {
    916c:	ldr	r2, [r0, #0]
    916e:	ldr	r3, [pc, #48]	; (91a0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd4>)
    9170:	ldr	r2, [r2, #20]
    9172:	cmp	r2, r3
    9174:	beq.n	9186 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
    9176:	mov	r0, r4
    9178:	blx	r2
    917a:	cmp	r0, #0
    917c:	bne.n	9128 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
        return false;
    917e:	movs	r0, #0
    if (m_curSector >= m_limitSector) {
      m_curState = IDLE_STATE;
    }
  }
  return true;
}
    9180:	add.w	sp, sp, #512	; 0x200
    9184:	pop	{r4, r5, r6, pc}
  return statusCMD13();
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    9186:	movs	r3, #0
    9188:	strb	r3, [r4, #13]
  }
  return true;
}
//-----------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    918a:	bl	8558 <transferStop()>
}
//-----------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    if (!SdioCard::readStop()) {
    918e:	cmp	r0, #0
    9190:	bne.n	9128 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
    9192:	b.n	917e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
    9194:	.word	0x183a0001
    9198:	.word	0x1fff088c
    919c:	.word	0x2002037c
    91a0:	.word	0x0000865d

000091a4 <SdSpiAltDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiAltDriver::activate() {
    91a4:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    91a6:	ldr	r3, [r0, #0]
    91a8:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    91aa:	ldrb	r1, [r3, #11]
    91ac:	cbz	r1, 91ee <SdSpiAltDriver::activate()+0x4a>
			__disable_irq();
    91ae:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    91b0:	ldrb	r1, [r3, #11]
    91b2:	lsls	r0, r1, #31
    91b4:	bpl.n	91c4 <SdSpiAltDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    91b6:	ldr	r0, [pc, #100]	; (921c <SdSpiAltDriver::activate()+0x78>)
    91b8:	ldr	r1, [r3, #12]
    91ba:	ldr	r4, [r0, #0]
    91bc:	ands	r1, r4
    91be:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    91c0:	str	r1, [r0, #0]
    91c2:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    91c4:	lsls	r4, r1, #30
    91c6:	bpl.n	91d6 <SdSpiAltDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    91c8:	ldr	r0, [pc, #84]	; (9220 <SdSpiAltDriver::activate()+0x7c>)
    91ca:	ldr	r1, [r3, #16]
    91cc:	ldr	r4, [r0, #0]
    91ce:	ands	r1, r4
    91d0:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    91d2:	str	r1, [r0, #0]
    91d4:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    91d6:	lsls	r0, r1, #29
    91d8:	bpl.n	91e8 <SdSpiAltDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    91da:	ldr	r0, [pc, #72]	; (9224 <SdSpiAltDriver::activate()+0x80>)
    91dc:	ldr	r1, [r3, #20]
    91de:	ldr	r4, [r0, #0]
    91e0:	ands	r1, r4
    91e2:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    91e4:	str	r1, [r0, #0]
    91e6:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    91e8:	lsls	r1, r1, #28
    91ea:	bmi.n	920c <SdSpiAltDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    91ec:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    91ee:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    91f0:	ldr	r1, [r3, #12]
    91f2:	cmp	r1, r2
    91f4:	beq.n	9206 <SdSpiAltDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    91f6:	ldr	r0, [pc, #48]	; (9228 <SdSpiAltDriver::activate()+0x84>)
    91f8:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    91fa:	ldr	r1, [pc, #48]	; (922c <SdSpiAltDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    91fc:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    91fe:	orr.w	r0, r2, #1073741824	; 0x40000000
    9202:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    9204:	str	r1, [r3, #0]
}
    9206:	ldr.w	r4, [sp], #4
    920a:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    920c:	ldr	r0, [pc, #32]	; (9230 <SdSpiAltDriver::activate()+0x8c>)
    920e:	ldr	r1, [r3, #24]
    9210:	ldr	r4, [r0, #0]
    9212:	ands	r1, r4
    9214:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    9216:	str	r1, [r0, #0]
    9218:	b.n	91ec <SdSpiAltDriver::activate()+0x48>
    921a:	nop
    921c:	.word	0xe000e180
    9220:	.word	0xe000e184
    9224:	.word	0xe000e188
    9228:	.word	0x003f4001
    922c:	.word	0x803f0000
    9230:	.word	0xe000e18c

00009234 <SdSpiAltDriver::deactivate()>:
  digitalWrite(m_csPin, HIGH);
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
    9234:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    9236:	ldrb	r3, [r2, #11]
    9238:	cbz	r3, 9268 <SdSpiAltDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    923a:	lsls	r1, r3, #31
    923c:	bpl.n	9246 <SdSpiAltDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    923e:	ldr	r3, [pc, #44]	; (926c <SdSpiAltDriver::deactivate()+0x38>)
    9240:	ldr	r1, [r2, #28]
    9242:	str	r1, [r3, #0]
    9244:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    9246:	lsls	r0, r3, #30
    9248:	bpl.n	9252 <SdSpiAltDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    924a:	ldr	r3, [pc, #36]	; (9270 <SdSpiAltDriver::deactivate()+0x3c>)
    924c:	ldr	r1, [r2, #32]
    924e:	str	r1, [r3, #0]
    9250:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    9252:	lsls	r1, r3, #29
    9254:	bpl.n	925e <SdSpiAltDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    9256:	ldr	r3, [pc, #28]	; (9274 <SdSpiAltDriver::deactivate()+0x40>)
    9258:	ldr	r1, [r2, #36]	; 0x24
    925a:	str	r1, [r3, #0]
    925c:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    925e:	lsls	r3, r3, #28
    9260:	bpl.n	9268 <SdSpiAltDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    9262:	ldr	r3, [pc, #20]	; (9278 <SdSpiAltDriver::deactivate()+0x44>)
    9264:	ldr	r2, [r2, #40]	; 0x28
    9266:	str	r2, [r3, #0]
    9268:	bx	lr
    926a:	nop
    926c:	.word	0xe000e100
    9270:	.word	0xe000e104
    9274:	.word	0xe000e108
    9278:	.word	0xe000e10c

0000927c <SdSpiAltDriver::receive()>:
//------------------------------------------------------------------------------
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
    927c:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    927e:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    9280:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    9284:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    9286:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    9288:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    928a:	ldr	r3, [r2, #44]	; 0x2c
    928c:	cmp	r3, #0
    928e:	bge.n	928a <SdSpiAltDriver::receive()+0xe>
		return port().POPR;
    9290:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    9292:	uxtb	r0, r0
    9294:	bx	lr
    9296:	nop

00009298 <SdSpiAltDriver::receive(unsigned char*, unsigned int)>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
    9298:	push	{r4, r5, r6, lr}
    929a:	mov	r5, r0
    929c:	mov	r4, r1
    929e:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, n);
    92a0:	mov	r0, r1
    92a2:	movs	r1, #255	; 0xff
    92a4:	bl	caa8 <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    92a8:	ldr	r0, [r5, #0]
    92aa:	mov	r3, r6
    92ac:	mov	r2, r4
    92ae:	mov	r1, r4
    92b0:	bl	2cbc <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < n; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    92b4:	movs	r0, #0
    92b6:	pop	{r4, r5, r6, pc}

000092b8 <SdSpiAltDriver::send(unsigned char)>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
    92b8:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    92ba:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    92bc:	mov.w	r3, #2147483648	; 0x80000000
    92c0:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    92c2:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    92c4:	ldr	r3, [r2, #44]	; 0x2c
    92c6:	cmp	r3, #0
    92c8:	bge.n	92c4 <SdSpiAltDriver::send(unsigned char)+0xc>
		return port().POPR;
    92ca:	ldr	r3, [r2, #56]	; 0x38
    92cc:	bx	lr
    92ce:	nop

000092d0 <SdSpiAltDriver::send(unsigned char const*, unsigned int)>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
    92d0:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < n && n <= 512) {
    92d2:	subs	r5, r2, #1
    92d4:	cmp.w	r5, #512	; 0x200
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
    92d8:	sub.w	sp, sp, #516	; 0x204
    92dc:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < n && n <= 512) {
    92de:	bcc.n	9306 <SdSpiAltDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, n);
    m_spi->transfer(tmp, n);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < n; i++) {
    92e0:	cbz	r2, 9300 <SdSpiAltDriver::send(unsigned char const*, unsigned int)+0x30>
    92e2:	ldr	r2, [r0, #0]
    92e4:	ldr	r2, [r2, #0]
    92e6:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    92e8:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    92ec:	ldrb.w	r3, [r1], #1
    92f0:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    92f2:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    92f4:	ldr	r3, [r2, #44]	; 0x2c
    92f6:	cmp	r3, #0
    92f8:	bge.n	92f4 <SdSpiAltDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, n);
    m_spi->transfer(tmp, n);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < n; i++) {
    92fa:	cmp	r1, r0
		return port().POPR;
    92fc:	ldr	r3, [r2, #56]	; 0x38
    92fe:	bne.n	92ec <SdSpiAltDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    9300:	add.w	sp, sp, #516	; 0x204
    9304:	pop	{r4, r5, pc}
    9306:	mov	r5, r0
    9308:	mov	r4, r2
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < n && n <= 512) {
    memcpy(tmp, buf, n);
    930a:	mov	r0, sp
    930c:	bl	9324 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    9310:	mov	r3, r4
    9312:	mov	r2, sp
    9314:	mov	r1, sp
    9316:	ldr	r0, [r5, #0]
    9318:	bl	2cbc <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < n; i++) {
    m_spi->transfer(buf[i]);
  }
}
    931c:	add.w	sp, sp, #516	; 0x204
    9320:	pop	{r4, r5, pc}
    9322:	nop

00009324 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9324:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9326:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    932a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    932e:	bne.n	940c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9330:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9332:	bcc.n	93b8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9334:	ldr.w	r3, [r1], #4
    9338:	str.w	r3, [r0], #4
    933c:	ldr.w	r3, [r1], #4
    9340:	str.w	r3, [r0], #4
    9344:	ldr.w	r3, [r1], #4
    9348:	str.w	r3, [r0], #4
    934c:	ldr.w	r3, [r1], #4
    9350:	str.w	r3, [r0], #4
    9354:	ldr.w	r3, [r1], #4
    9358:	str.w	r3, [r0], #4
    935c:	ldr.w	r3, [r1], #4
    9360:	str.w	r3, [r0], #4
    9364:	ldr.w	r3, [r1], #4
    9368:	str.w	r3, [r0], #4
    936c:	ldr.w	r3, [r1], #4
    9370:	str.w	r3, [r0], #4
    9374:	ldr.w	r3, [r1], #4
    9378:	str.w	r3, [r0], #4
    937c:	ldr.w	r3, [r1], #4
    9380:	str.w	r3, [r0], #4
    9384:	ldr.w	r3, [r1], #4
    9388:	str.w	r3, [r0], #4
    938c:	ldr.w	r3, [r1], #4
    9390:	str.w	r3, [r0], #4
    9394:	ldr.w	r3, [r1], #4
    9398:	str.w	r3, [r0], #4
    939c:	ldr.w	r3, [r1], #4
    93a0:	str.w	r3, [r0], #4
    93a4:	ldr.w	r3, [r1], #4
    93a8:	str.w	r3, [r0], #4
    93ac:	ldr.w	r3, [r1], #4
    93b0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    93b4:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    93b6:	bcs.n	9334 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    93b8:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    93ba:	bcc.n	93e0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    93bc:	ldr.w	r3, [r1], #4
    93c0:	str.w	r3, [r0], #4
    93c4:	ldr.w	r3, [r1], #4
    93c8:	str.w	r3, [r0], #4
    93cc:	ldr.w	r3, [r1], #4
    93d0:	str.w	r3, [r0], #4
    93d4:	ldr.w	r3, [r1], #4
    93d8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    93dc:	subs	r2, #16
	bhs	.Lmid_block_loop
    93de:	bcs.n	93bc <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    93e0:	adds	r2, #12
	blo	.Lcopy_less_than_4
    93e2:	bcc.n	93f0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    93e4:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    93e8:	str.w	r3, [r0], #4
	subs	r2, #4
    93ec:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    93ee:	bcs.n	93e4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    93f0:	adds	r2, #4
	beq	.Ldone
    93f2:	beq.n	9406 <memcpy+0xe2>

	lsls	r2, r2, #31
    93f4:	lsls	r2, r2, #31
	itt ne
    93f6:	itt	ne
	ldrbne  r3, [r1], #1
    93f8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    93fc:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9400:	bcc.n	9406 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9402:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9404:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9406:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9408:	bx	lr
    940a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    940c:	cmp	r2, #8
	blo	.Lbyte_copy
    940e:	bcc.n	9438 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9410:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9412:	beq.n	9330 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9414:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9418:	beq.n	9330 <memcpy+0xc>

	rsb	r3, #4
    941a:	rsb	r3, r3, #4
	subs	r2, r3
    941e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9420:	lsls	r3, r3, #31
	itt ne
    9422:	itt	ne
	ldrbne  r3, [r1], #1
    9424:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9428:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    942c:	bcc.n	9330 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    942e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9432:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9436:	b.n	9330 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9438:	subs	r2, #4
	blo	.Lcopy_less_than_4
    943a:	bcc.n	93f0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    943c:	subs	r2, #1
	ldrb    r3, [r1], #1
    943e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9442:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9446:	bcs.n	943c <memcpy+0x118>

	ldrb	r3, [r1]
    9448:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    944a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    944c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    944e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9450:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9452:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9454:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9456:	bx	lr

00009458 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    9458:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    945a:	ldr	r5, [pc, #60]	; (9498 <usb_serial_getchar+0x40>)
    945c:	ldr	r0, [r5, #0]
    945e:	cbz	r0, 9480 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    9460:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    9462:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    9464:	adds	r1, r0, r3
    9466:	adds	r3, #1
	if (i >= rx_packet->len) {
    9468:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    946a:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    946c:	bcs.n	9474 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    946e:	strh	r3, [r0, #2]
	}
	return c;
    9470:	mov	r0, r4
}
    9472:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    9474:	bl	9ce0 <usb_free>
		rx_packet = NULL;
    9478:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    947a:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    947c:	str	r3, [r5, #0]
    947e:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9480:	ldr	r3, [pc, #24]	; (949c <usb_serial_getchar+0x44>)
    9482:	ldrb	r3, [r3, #0]
    9484:	cbz	r3, 9492 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    9486:	movs	r0, #3
    9488:	bl	9d2c <usb_rx>
    948c:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    948e:	cmp	r0, #0
    9490:	bne.n	9460 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9492:	mov.w	r0, #4294967295
    9496:	pop	{r3, r4, r5, pc}
    9498:	.word	0x200203b4
    949c:	.word	0x200204a0

000094a0 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    94a0:	push	{r4, lr}
	if (!rx_packet) {
    94a2:	ldr	r4, [pc, #36]	; (94c8 <usb_serial_peekchar+0x28>)
    94a4:	ldr	r0, [r4, #0]
    94a6:	cbz	r0, 94b0 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    94a8:	ldrh	r3, [r0, #2]
    94aa:	add	r0, r3
    94ac:	ldrb	r0, [r0, #8]
}
    94ae:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    94b0:	ldr	r3, [pc, #24]	; (94cc <usb_serial_peekchar+0x2c>)
    94b2:	ldrb	r3, [r3, #0]
    94b4:	cbz	r3, 94c2 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    94b6:	movs	r0, #3
    94b8:	bl	9d2c <usb_rx>
    94bc:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    94be:	cmp	r0, #0
    94c0:	bne.n	94a8 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    94c2:	mov.w	r0, #4294967295
    94c6:	pop	{r4, pc}
    94c8:	.word	0x200203b4
    94cc:	.word	0x200204a0

000094d0 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    94d0:	ldr	r3, [pc, #16]	; (94e4 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    94d2:	ldr	r2, [pc, #20]	; (94e8 <usb_serial_available+0x18>)
    94d4:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    94d6:	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    94d8:	cbz	r3, 94e2 <usb_serial_available+0x12>
    94da:	ldrh	r2, [r3, #0]
    94dc:	ldrh	r3, [r3, #2]
    94de:	subs	r3, r2, r3
    94e0:	add	r0, r3
	return count;
}
    94e2:	bx	lr
    94e4:	.word	0x200203b4
    94e8:	.word	0x20020534

000094ec <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    94ec:	ldr	r3, [pc, #44]	; (951c <usb_serial_flush_input+0x30>)
    94ee:	ldrb	r3, [r3, #0]
    94f0:	cbz	r3, 951a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    94f2:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    94f4:	ldr	r4, [pc, #40]	; (9520 <usb_serial_flush_input+0x34>)
    94f6:	ldr	r0, [r4, #0]
    94f8:	cbz	r0, 950e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    94fa:	bl	9ce0 <usb_free>
		rx_packet = NULL;
    94fe:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    9500:	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    9502:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    9504:	bl	9d2c <usb_rx>
		if (!rx) break;
    9508:	cbz	r0, 9518 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    950a:	bl	9ce0 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    950e:	movs	r0, #3
    9510:	bl	9d2c <usb_rx>
		if (!rx) break;
    9514:	cmp	r0, #0
    9516:	bne.n	950a <usb_serial_flush_input+0x1e>
    9518:	pop	{r4, pc}
    951a:	bx	lr
    951c:	.word	0x200204a0
    9520:	.word	0x200203b4

00009524 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    9524:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    9528:	ldr	r2, [pc, #396]	; (96b8 <usb_serial_write+0x194>)
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    952a:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    952c:	movs	r3, #1
    952e:	strb	r3, [r2, #0]
	while (size > 0) {
    9530:	str	r1, [sp, #4]
    9532:	cmp	r1, #0
    9534:	beq.n	9610 <usb_serial_write+0xec>
    9536:	ldr.w	r8, [pc, #400]	; 96c8 <usb_serial_write+0x1a4>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    953a:	ldr	r7, [pc, #384]	; (96bc <usb_serial_write+0x198>)
    953c:	mov	r4, r0
    953e:	ldr.w	r0, [r8]
    9542:	mov	r6, r1
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
    9544:	cmp	r0, #0
    9546:	beq.w	964c <usb_serial_write+0x128>
    954a:	ldr	r5, [pc, #372]	; (96c0 <usb_serial_write+0x19c>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    954c:	ldrh	r3, [r0, #2]
    954e:	rsb	r1, r3, #64	; 0x40
    9552:	cmp	r1, r6
    9554:	it	cs
    9556:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    9558:	add.w	r9, r3, r1
    955c:	uxth.w	r9, r9
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    9560:	add.w	r2, r0, #8
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    9564:	mov.w	lr, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    9568:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    956a:	strh.w	r9, [r0, #2]
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    956e:	add.w	ip, r1, #4294967295
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    9572:	add	r2, r3
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    9574:	strb.w	lr, [r5]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    9578:	cmp	r1, #0
    957a:	beq.n	9600 <usb_serial_write+0xdc>
    957c:	add.w	r5, r3, #8
    9580:	adds	r3, #12
    9582:	add	r3, r0
    9584:	add	r5, r0
    9586:	add.w	r9, r4, #4
    958a:	cmp	r5, r9
    958c:	it	cc
    958e:	cmpcc	r4, r3
    9590:	ite	cs
    9592:	movcs	r3, #1
    9594:	movcc	r3, #0
    9596:	cmp	r1, #9
    9598:	ite	ls
    959a:	movls	r3, #0
    959c:	andhi.w	r3, r3, #1
    95a0:	cmp	r3, #0
    95a2:	beq.n	963a <usb_serial_write+0x116>
    95a4:	orr.w	r3, r4, r5
    95a8:	lsls	r3, r3, #30
    95aa:	bne.n	963a <usb_serial_write+0x116>
    95ac:	subs	r3, r1, #4
    95ae:	lsrs	r3, r3, #2
    95b0:	adds	r3, #1
    95b2:	cmp.w	ip, #2
    95b6:	mov.w	r9, r3, lsl #2
    95ba:	bls.n	9636 <usb_serial_write+0x112>
    95bc:	sub.w	sl, r4, #4
    95c0:	mov	fp, r3
    95c2:	add.w	lr, lr, #1
    95c6:	ldr.w	r3, [sl, #4]!
    95ca:	str.w	r3, [r5], #4
    95ce:	cmp	fp, lr
    95d0:	bhi.n	95c2 <usb_serial_write+0x9e>
    95d2:	cmp	r1, r9
    95d4:	add	r2, r9
    95d6:	rsb	ip, r9, ip
    95da:	add.w	r3, r4, r9
    95de:	beq.n	96a4 <usb_serial_write+0x180>
    95e0:	ldrb	r5, [r3, #0]
    95e2:	strb	r5, [r2, #0]
    95e4:	cmp.w	ip, #0
    95e8:	beq.n	9632 <usb_serial_write+0x10e>
    95ea:	ldrb	r5, [r3, #1]
    95ec:	strb	r5, [r2, #1]
    95ee:	cmp.w	ip, #1
    95f2:	beq.n	9632 <usb_serial_write+0x10e>
    95f4:	ldrb	r3, [r3, #2]
    95f6:	strb	r3, [r2, #2]
    95f8:	add	r1, r4
    95fa:	ldrh.w	r9, [r0, #2]
    95fe:	mov	r4, r1
		if (tx_packet->index >= CDC_TX_SIZE) {
    9600:	cmp.w	r9, #63	; 0x3f
    9604:	bhi.n	961e <usb_serial_write+0xfa>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    9606:	ldr	r3, [pc, #188]	; (96c4 <usb_serial_write+0x1a0>)
    9608:	movs	r2, #5
    960a:	strb	r2, [r3, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    960c:	cmp	r6, #0
    960e:	bne.n	9544 <usb_serial_write+0x20>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    9610:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    9612:	ldr	r2, [pc, #164]	; (96b8 <usb_serial_write+0x194>)
    9614:	movs	r3, #0
    9616:	strb	r3, [r2, #0]
	return ret;
}
    9618:	add	sp, #12
    961a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    961e:	movs	r3, #64	; 0x40
    9620:	strh	r3, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9622:	mov	r1, r0
    9624:	movs	r0, #4
    9626:	bl	9e5c <usb_tx>
			tx_packet = NULL;
    962a:	movs	r0, #0
    962c:	str.w	r0, [r8]
    9630:	b.n	9606 <usb_serial_write+0xe2>
    9632:	add	r1, r4
    9634:	b.n	95fa <usb_serial_write+0xd6>
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    9636:	mov	r3, r4
    9638:	b.n	95e0 <usb_serial_write+0xbc>
    963a:	subs	r2, #1
    963c:	add	r1, r4
    963e:	ldrb.w	r3, [r4], #1
    9642:	strb.w	r3, [r2, #1]!
    9646:	cmp	r4, r1
    9648:	bne.n	963e <usb_serial_write+0x11a>
    964a:	b.n	95fa <usb_serial_write+0xd6>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    964c:	ldrb	r3, [r7, #0]
    964e:	cbz	r3, 96a8 <usb_serial_write+0x184>
    9650:	ldr	r5, [pc, #108]	; (96c0 <usb_serial_write+0x19c>)
    9652:	movw	r9, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    9656:	mov.w	sl, #1
    965a:	b.n	966e <usb_serial_write+0x14a>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    965c:	subs.w	r9, r9, #1
    9660:	beq.n	9696 <usb_serial_write+0x172>
    9662:	ldrb	r3, [r5, #0]
    9664:	cbnz	r3, 9696 <usb_serial_write+0x172>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    9666:	bl	1708 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    966a:	ldrb	r3, [r7, #0]
    966c:	cbz	r3, 96a8 <usb_serial_write+0x184>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    966e:	movs	r0, #4
    9670:	bl	9d68 <usb_tx_packet_count>
    9674:	cmp	r0, #7
    9676:	bhi.n	965c <usb_serial_write+0x138>
					tx_noautoflush = 1;
    9678:	ldr	r3, [pc, #60]	; (96b8 <usb_serial_write+0x194>)
    967a:	strb.w	sl, [r3]
					tx_packet = usb_malloc();
    967e:	bl	9ca0 <usb_malloc>
    9682:	str.w	r0, [r8]
					if (tx_packet) break;
    9686:	cmp	r0, #0
    9688:	bne.w	954c <usb_serial_write+0x28>
					tx_noautoflush = 0;
    968c:	ldr	r3, [pc, #40]	; (96b8 <usb_serial_write+0x194>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    968e:	subs.w	r9, r9, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    9692:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9694:	bne.n	9662 <usb_serial_write+0x13e>
					transmit_previous_timeout = 1;
    9696:	movs	r3, #1
					return -1;
    9698:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    969c:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    969e:	add	sp, #12
    96a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96a4:	mov	r1, r3
    96a6:	b.n	95fa <usb_serial_write+0xd6>
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    96a8:	ldr	r2, [pc, #12]	; (96b8 <usb_serial_write+0x194>)
    96aa:	movs	r3, #0
					return -1;
    96ac:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    96b0:	strb	r3, [r2, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    96b2:	add	sp, #12
    96b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96b8:	.word	0x200203a9
    96bc:	.word	0x200204a0
    96c0:	.word	0x200203b0
    96c4:	.word	0x200203a8
    96c8:	.word	0x200203ac

000096cc <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    96cc:	push	{lr}
    96ce:	sub	sp, #12
    96d0:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    96d2:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    96d4:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    96d8:	mov	r0, r3
    96da:	bl	9524 <usb_serial_write>
}
    96de:	add	sp, #12
    96e0:	ldr.w	pc, [sp], #4

000096e4 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    96e4:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    96e6:	ldr	r5, [pc, #56]	; (9720 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    96e8:	ldr	r4, [pc, #56]	; (9724 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    96ea:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    96ec:	movs	r3, #1
    96ee:	strb	r3, [r4, #0]
	if (!tx_packet) {
    96f0:	cbz	r0, 96fe <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    96f2:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    96f4:	movs	r3, #0
    96f6:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    96f8:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    96fc:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    96fe:	ldr	r3, [pc, #40]	; (9728 <usb_serial_write_buffer_free+0x44>)
    9700:	ldrb	r3, [r3, #0]
    9702:	cbnz	r3, 970a <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    9704:	movs	r0, #0
    9706:	strb	r0, [r4, #0]
			return 0;
    9708:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    970a:	movs	r0, #4
    970c:	bl	9d68 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    9710:	cmp	r0, #7
    9712:	bhi.n	9704 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    9714:	bl	9ca0 <usb_malloc>
    9718:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    971a:	cmp	r0, #0
    971c:	bne.n	96f2 <usb_serial_write_buffer_free+0xe>
    971e:	b.n	9704 <usb_serial_write_buffer_free+0x20>
    9720:	.word	0x200203ac
    9724:	.word	0x200203a9
    9728:	.word	0x200204a0

0000972c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    972c:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    972e:	ldr	r3, [pc, #68]	; (9774 <usb_serial_flush_output+0x48>)
    9730:	ldrb	r3, [r3, #0]
    9732:	cbz	r3, 9758 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    9734:	ldr	r6, [pc, #64]	; (9778 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    9736:	ldr	r5, [pc, #68]	; (977c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    9738:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    973a:	movs	r7, #1
    973c:	strb	r7, [r5, #0]
	if (tx_packet) {
    973e:	cbz	r4, 975a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    9740:	ldr	r2, [pc, #60]	; (9780 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    9742:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    9744:	movs	r7, #0
    9746:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9748:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    974a:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    974c:	movs	r0, #4
    974e:	bl	9e5c <usb_tx>
		tx_packet = NULL;
    9752:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    9754:	movs	r3, #0
    9756:	strb	r3, [r5, #0]
    9758:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    975a:	bl	9ca0 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    975e:	ldr	r3, [pc, #32]	; (9780 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    9760:	cbz	r0, 976e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    9762:	mov	r1, r0
    9764:	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    9766:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    9768:	bl	9e5c <usb_tx>
    976c:	b.n	9754 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    976e:	strb	r7, [r3, #0]
    9770:	b.n	9754 <usb_serial_flush_output+0x28>
    9772:	nop
    9774:	.word	0x200204a0
    9778:	.word	0x200203ac
    977c:	.word	0x200203a9
    9780:	.word	0x200203a8

00009784 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    9784:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    9786:	ldr	r3, [pc, #56]	; (97c0 <usb_serial_flush_callback+0x3c>)
    9788:	ldrb	r3, [r3, #0]
    978a:	cbnz	r3, 97aa <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    978c:	ldr	r4, [pc, #52]	; (97c4 <usb_serial_flush_callback+0x40>)
    978e:	ldr	r1, [r4, #0]
    9790:	cbz	r1, 97ac <usb_serial_flush_callback+0x28>
    9792:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    9796:	ldrh	r3, [r1, #2]
    9798:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    979a:	movs	r0, #4
    979c:	bl	9e5c <usb_tx>
		tx_packet = NULL;
    97a0:	str	r5, [r4, #0]
    97a2:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    97a4:	ldr	r3, [pc, #32]	; (97c8 <usb_serial_flush_callback+0x44>)
    97a6:	movs	r2, #1
    97a8:	strb	r2, [r3, #0]
    97aa:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    97ac:	bl	9ca0 <usb_malloc>
		if (tx) {
    97b0:	cmp	r0, #0
    97b2:	beq.n	97a4 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    97b4:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    97b6:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    97ba:	movs	r0, #4
    97bc:	b.w	9e5c <usb_tx>
    97c0:	.word	0x200203a9
    97c4:	.word	0x200203ac
    97c8:	.word	0x200203a8

000097cc <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    97cc:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    97ce:	ldr	r4, [pc, #64]	; (9810 <fault_isr+0x44>)
    97d0:	b.n	97e4 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    97d2:	ldr	r3, [r4, #0]
    97d4:	lsls	r1, r3, #21
    97d6:	bmi.n	97f4 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    97d8:	ldr	r3, [r4, #0]
    97da:	lsls	r2, r3, #20
    97dc:	bmi.n	97fe <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    97de:	ldr	r3, [r4, #0]
    97e0:	lsls	r3, r3, #19
    97e2:	bmi.n	9808 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    97e4:	ldr	r3, [r4, #0]
    97e6:	lsls	r0, r3, #13
    97e8:	bpl.n	97d2 <fault_isr+0x6>
    97ea:	bl	9ee0 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    97ee:	ldr	r3, [r4, #0]
    97f0:	lsls	r1, r3, #21
    97f2:	bpl.n	97d8 <fault_isr+0xc>
    97f4:	bl	9814 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    97f8:	ldr	r3, [r4, #0]
    97fa:	lsls	r2, r3, #20
    97fc:	bpl.n	97de <fault_isr+0x12>
    97fe:	bl	9814 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    9802:	ldr	r3, [r4, #0]
    9804:	lsls	r3, r3, #19
    9806:	bpl.n	97e4 <fault_isr+0x18>
    9808:	bl	9814 <unused_isr>
    980c:	b.n	97e4 <fault_isr+0x18>
    980e:	nop
    9810:	.word	0x40048034

00009814 <unused_isr>:
	}
}

void unused_isr(void)
{
    9814:	push	{r3, lr}
	fault_isr();
    9816:	bl	97cc <fault_isr>
    981a:	nop

0000981c <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    981c:	ldr	r3, [pc, #4]	; (9824 <startup_early_hook+0x8>)
    981e:	movs	r2, #16
    9820:	strh	r2, [r3, #0]
    9822:	bx	lr
    9824:	.word	0x40052000

00009828 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    9828:	bx	lr
    982a:	nop

0000982c <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    982c:	ldr	r1, [pc, #36]	; (9854 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    982e:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    9830:	ldr	r3, [r1, #0]
	if (incr != 0) {
    9832:	cbz	r0, 9842 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    9834:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    9836:	add	r0, r3
    9838:	sub.w	r2, r2, #8192	; 0x2000
    983c:	cmp	r0, r2
    983e:	bcs.n	9846 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    9840:	str	r0, [r1, #0]
	}
	return prev;
    9842:	mov	r0, r3
}
    9844:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    9846:	bl	c314 <__errno>
    984a:	movs	r3, #12
    984c:	str	r3, [r0, #0]
			return (void *)-1;
    984e:	mov.w	r0, #4294967295
    9852:	pop	{r3, pc}
    9854:	.word	0x1fff0890

00009858 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    9858:	adds	r0, #16
    985a:	ldr	r3, [pc, #8]	; (9864 <attachInterruptVector+0xc>)
    985c:	str.w	r1, [r3, r0, lsl #2]
    9860:	bx	lr
    9862:	nop
    9864:	.word	0x1fff0200

00009868 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    9868:	push	{r4, r5}
	RTC_SR = 0;
    986a:	ldr	r3, [pc, #20]	; (9880 <rtc_set+0x18>)
	RTC_TPR = 0;
    986c:	ldr	r5, [pc, #20]	; (9884 <rtc_set+0x1c>)
	RTC_TSR = t;
    986e:	ldr	r4, [pc, #24]	; (9888 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9870:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    9872:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9874:	str	r2, [r3, #0]
	RTC_TPR = 0;
    9876:	str	r2, [r5, #0]
	RTC_TSR = t;
    9878:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    987a:	str	r1, [r3, #0]
}
    987c:	pop	{r4, r5}
    987e:	bx	lr
    9880:	.word	0x4003d014
    9884:	.word	0x4003d004
    9888:	.word	0x4003d000

0000988c <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    988c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9890:	ldr	r3, [pc, #556]	; (9ac0 <_init_Teensyduino_internal_+0x234>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    9892:	ldr	r0, [pc, #560]	; (9ac4 <_init_Teensyduino_internal_+0x238>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    9894:	ldr.w	ip, [pc, #608]	; 9af8 <_init_Teensyduino_internal_+0x26c>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    9898:	ldr	r4, [pc, #556]	; (9ac8 <_init_Teensyduino_internal_+0x23c>)
	FTM0_C2SC = 0x28;
    989a:	ldr	r1, [pc, #560]	; (9acc <_init_Teensyduino_internal_+0x240>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    989c:	ldr.w	lr, [pc, #604]	; 9afc <_init_Teensyduino_internal_+0x270>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    98a0:	ldr	r6, [pc, #556]	; (9ad0 <_init_Teensyduino_internal_+0x244>)
	FTM0_C4SC = 0x28;
    98a2:	ldr	r5, [pc, #560]	; (9ad4 <_init_Teensyduino_internal_+0x248>)
	FTM0_C5SC = 0x28;
    98a4:	ldr	r7, [pc, #560]	; (9ad8 <_init_Teensyduino_internal_+0x24c>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    98a6:	mov.w	r2, #134217728	; 0x8000000
    98aa:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    98ac:	mov.w	r2, #268435456	; 0x10000000
    98b0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    98b2:	mov.w	r2, #536870912	; 0x20000000
    98b6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    98b8:	mov.w	r2, #1073741824	; 0x40000000
    98bc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    98be:	mov.w	r2, #2147483648	; 0x80000000
    98c2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    98c4:	movs	r2, #0
    98c6:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    98c8:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    98ca:	movw	r0, #49151	; 0xbfff
    98ce:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    98d2:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    98d6:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    98d8:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    98dc:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    98de:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    98e0:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    98e2:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    98e6:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    98e8:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    98ec:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    98ee:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    98f2:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    98f4:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    98f8:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    98fc:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    9900:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    9904:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    9908:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    990a:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    990e:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    9910:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    9912:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    9914:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    9918:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    991a:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    991c:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    991e:	ldr	r4, [pc, #444]	; (9adc <_init_Teensyduino_internal_+0x250>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    9920:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    9922:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9924:	movs	r1, #9
    9926:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    9928:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    992c:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    9930:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    9932:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    9934:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    9936:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    9938:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    993a:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    993c:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    9940:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    9944:	add.w	r7, r7, #520192	; 0x7f000
    9948:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    994a:	addw	r4, r4, #2044	; 0x7fc
    994e:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    9950:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    9952:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    9954:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9956:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    995a:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    995c:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    9960:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    9964:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9966:	sub.w	r4, r4, #460800	; 0x70800
    996a:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    996e:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    9970:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9972:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9976:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9978:	ldr	r0, [pc, #356]	; (9ae0 <_init_Teensyduino_internal_+0x254>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    997a:	orr.w	r1, r1, #512	; 0x200
    997e:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9980:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9982:	ldr	r4, [pc, #352]	; (9ae4 <_init_Teensyduino_internal_+0x258>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    9984:	add.w	lr, lr, #65280	; 0xff00
    9988:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    998c:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    9990:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    9994:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9998:	orr.w	r1, r1, #33554432	; 0x2000000
    999c:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    999e:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    99a2:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    99a6:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    99a8:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    99aa:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    99ac:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    99ae:	str	r2, [r4, #0]
#endif
	analog_init();
    99b0:	bl	b0ac <analog_init>

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    99b4:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    99b6:	ldr	r5, [pc, #304]	; (9ae8 <_init_Teensyduino_internal_+0x25c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    99b8:	ldr	r3, [pc, #304]	; (9aec <_init_Teensyduino_internal_+0x260>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    99ba:	ldr	r2, [pc, #308]	; (9af0 <_init_Teensyduino_internal_+0x264>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    99bc:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    99be:	ldr	r4, [r5, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    99c0:	ldr	r2, [r2, #0]
	__enable_irq();
    99c2:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    99c4:	lsls	r1, r2, #5
    99c6:	bpl.n	99ce <_init_Teensyduino_internal_+0x142>
    99c8:	cmp	r3, #50	; 0x32
    99ca:	it	hi
    99cc:	addhi	r4, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    99ce:	rsb	r3, r3, #95744	; 0x17600
    99d2:	ldr	r7, [pc, #288]	; (9af4 <_init_Teensyduino_internal_+0x268>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    99d4:	ldr.w	r9, [pc, #276]	; 9aec <_init_Teensyduino_internal_+0x260>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    99d8:	ldr.w	r8, [pc, #276]	; 9af0 <_init_Teensyduino_internal_+0x264>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    99dc:	adds	r3, #255	; 0xff
    99de:	mov.w	r2, #1000	; 0x3e8
    99e2:	umull	r1, r3, r7, r3
    99e6:	mul.w	r4, r2, r4
    99ea:	add.w	r4, r4, r3, lsr #6
    99ee:	movs	r6, #25

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    99f0:	cpsid	i
	current = SYST_CVR;
    99f2:	ldr.w	r1, [r9]
	count = systick_millis_count;
    99f6:	ldr	r2, [r5, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    99f8:	ldr.w	lr, [r8]
	__enable_irq();
    99fc:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    99fe:	rsb	r3, r1, #95744	; 0x17600
    9a02:	adds	r3, #255	; 0xff
    9a04:	umull	r0, r3, r7, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9a08:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9a0c:	rsb	r3, r4, r3, lsr #6
    9a10:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9a14:	beq.n	9a1c <_init_Teensyduino_internal_+0x190>
    9a16:	cmp	r1, #50	; 0x32
    9a18:	it	hi
    9a1a:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9a1c:	mla	r3, r0, r2, r3
    9a20:	cmp.w	r3, #1000	; 0x3e8
    9a24:	bcc.n	9a30 <_init_Teensyduino_internal_+0x1a4>
				ms--;
				if (ms == 0) return;
    9a26:	subs	r6, #1
    9a28:	beq.n	9a36 <_init_Teensyduino_internal_+0x1aa>
				start += 1000;
    9a2a:	add.w	r4, r4, #1000	; 0x3e8
    9a2e:	b.n	99f0 <_init_Teensyduino_internal_+0x164>
			}
			yield();
    9a30:	bl	1708 <yield>
    9a34:	b.n	99f0 <_init_Teensyduino_internal_+0x164>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
    9a36:	bl	a994 <usb_init>

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9a3a:	cpsid	i
	current = SYST_CVR;
    9a3c:	ldr	r3, [pc, #172]	; (9aec <_init_Teensyduino_internal_+0x260>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9a3e:	ldr	r2, [pc, #176]	; (9af0 <_init_Teensyduino_internal_+0x264>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9a40:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9a42:	ldr	r4, [r5, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9a44:	ldr	r2, [r2, #0]
	__enable_irq();
    9a46:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9a48:	lsls	r2, r2, #5
    9a4a:	bpl.n	9a52 <_init_Teensyduino_internal_+0x1c6>
    9a4c:	cmp	r3, #50	; 0x32
    9a4e:	it	hi
    9a50:	addhi	r4, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9a52:	rsb	r3, r3, #95744	; 0x17600
    9a56:	ldr	r7, [pc, #156]	; (9af4 <_init_Teensyduino_internal_+0x268>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9a58:	ldr.w	r9, [pc, #144]	; 9aec <_init_Teensyduino_internal_+0x260>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9a5c:	ldr.w	r8, [pc, #144]	; 9af0 <_init_Teensyduino_internal_+0x264>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9a60:	adds	r3, #255	; 0xff
    9a62:	mov.w	r2, #1000	; 0x3e8
    9a66:	umull	r1, r3, r7, r3
    9a6a:	mul.w	r4, r2, r4
    9a6e:	add.w	r4, r4, r3, lsr #6
    9a72:	movw	r6, #275	; 0x113

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9a76:	cpsid	i
	current = SYST_CVR;
    9a78:	ldr.w	r1, [r9]
	count = systick_millis_count;
    9a7c:	ldr	r2, [r5, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9a7e:	ldr.w	lr, [r8]
	__enable_irq();
    9a82:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9a84:	rsb	r3, r1, #95744	; 0x17600
    9a88:	adds	r3, #255	; 0xff
    9a8a:	umull	r0, r3, r7, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9a8e:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9a92:	rsb	r3, r4, r3, lsr #6
    9a96:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9a9a:	beq.n	9aa2 <_init_Teensyduino_internal_+0x216>
    9a9c:	cmp	r1, #50	; 0x32
    9a9e:	it	hi
    9aa0:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9aa2:	mla	r3, r0, r2, r3
    9aa6:	cmp.w	r3, #1000	; 0x3e8
    9aaa:	bcc.n	9ab6 <_init_Teensyduino_internal_+0x22a>
				ms--;
				if (ms == 0) return;
    9aac:	subs	r6, #1
    9aae:	beq.n	9abc <_init_Teensyduino_internal_+0x230>
				start += 1000;
    9ab0:	add.w	r4, r4, #1000	; 0x3e8
    9ab4:	b.n	9a76 <_init_Teensyduino_internal_+0x1ea>
			}
			yield();
    9ab6:	bl	1708 <yield>
    9aba:	b.n	9a76 <_init_Teensyduino_internal_+0x1ea>
    9abc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9ac0:	.word	0xe000e104
    9ac4:	.word	0x40038004
    9ac8:	.word	0x40038014
    9acc:	.word	0x4003801c
    9ad0:	.word	0x40038024
    9ad4:	.word	0x4003802c
    9ad8:	.word	0x40038034
    9adc:	.word	0x40038000
    9ae0:	.word	0x40048004
    9ae4:	.word	0x400c9000
    9ae8:	.word	0x200203bc
    9aec:	.word	0xe000e018
    9af0:	.word	0xe000ed04
    9af4:	.word	0xaaaaaaab
    9af8:	.word	0x40038008
    9afc:	.word	0x4003800c

00009b00 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    9b00:	cmp	r0, #63	; 0x3f
    9b02:	bhi.n	9b1e <digitalWrite+0x1e>


// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
    9b04:	push	{r4}
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    9b06:	ldr	r3, [pc, #60]	; (9b44 <digitalWrite+0x44>)
    9b08:	ldr.w	r2, [r3, r0, lsl #3]
    9b0c:	ldrb.w	r4, [r2, #640]	; 0x280
    9b10:	cbz	r4, 9b20 <digitalWrite+0x20>
		if (val) {
			*portSetRegister(pin) = 1;
    9b12:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    9b14:	cbz	r1, 9b36 <digitalWrite+0x36>
			*portSetRegister(pin) = 1;
    9b16:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9b1a:	ldr.w	r4, [sp], #4
    9b1e:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    9b20:	add.w	r0, r3, r0, lsl #3
    9b24:	ldr	r3, [r0, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9b26:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    9b28:	cbnz	r1, 9b3c <digitalWrite+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    9b2a:	bic.w	r2, r2, #2
    9b2e:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9b30:	ldr.w	r4, [sp], #4
    9b34:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    9b36:	strb.w	r3, [r2, #256]	; 0x100
    9b3a:	b.n	9b30 <digitalWrite+0x30>
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9b3c:	orr.w	r2, r2, #3
    9b40:	str	r2, [r3, #0]
    9b42:	b.n	9b30 <digitalWrite+0x30>
    9b44:	.word	0x00013cac

00009b48 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    9b48:	cmp	r0, #63	; 0x3f
    9b4a:	bhi.n	9b8e <pinMode+0x46>
	config = portConfigRegister(pin);
    9b4c:	ldr	r2, [pc, #108]	; (9bbc <pinMode+0x74>)
    9b4e:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9b52:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    9b54:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9b56:	beq.n	9b78 <pinMode+0x30>
    9b58:	cmp	r1, #4
    9b5a:	beq.n	9b98 <pinMode+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    9b5c:	ldr.w	r0, [r2, r0, lsl #3]
    9b60:	movs	r2, #0
    9b62:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    9b66:	cbz	r1, 9b90 <pinMode+0x48>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    9b68:	cmp	r1, #2
    9b6a:	beq.n	9bb2 <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    9b6c:	cmp	r1, #3
    9b6e:	bne.n	9b8c <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    9b70:	mov.w	r2, #258	; 0x102
    9b74:	str	r2, [r3, #0]
    9b76:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9b78:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9b7c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9b80:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9b84:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    9b86:	ldr	r2, [r3, #0]
    9b88:	bic.w	r2, r2, #32
    9b8c:	str	r2, [r3, #0]
    9b8e:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    9b90:	mov.w	r2, #256	; 0x100
    9b94:	str	r2, [r3, #0]
    9b96:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9b98:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9b9c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9ba0:	movs	r0, #1
    9ba2:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9ba6:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    9ba8:	ldr	r2, [r3, #0]
    9baa:	orr.w	r2, r2, #32
    9bae:	str	r2, [r3, #0]
    9bb0:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    9bb2:	movw	r2, #259	; 0x103
    9bb6:	str	r2, [r3, #0]
    9bb8:	bx	lr
    9bba:	nop
    9bbc:	.word	0x00013cac

00009bc0 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9bc0:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9bc2:	ldr	r1, [pc, #48]	; (9bf4 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9bc4:	ldr	r3, [pc, #48]	; (9bf8 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9bc6:	ldr	r2, [pc, #52]	; (9bfc <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9bc8:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9bca:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9bcc:	ldr	r2, [r2, #0]
	__enable_irq();
    9bce:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9bd0:	lsls	r2, r2, #5
    9bd2:	bpl.n	9bda <micros+0x1a>
    9bd4:	cmp	r3, #50	; 0x32
    9bd6:	it	hi
    9bd8:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9bda:	ldr	r1, [pc, #36]	; (9c00 <micros+0x40>)
    9bdc:	rsb	r3, r3, #95744	; 0x17600
    9be0:	mov.w	r2, #1000	; 0x3e8
    9be4:	adds	r3, #255	; 0xff
    9be6:	umull	r1, r3, r1, r3
    9bea:	mul.w	r0, r2, r0
}
    9bee:	add.w	r0, r0, r3, lsr #6
    9bf2:	bx	lr
    9bf4:	.word	0x200203bc
    9bf8:	.word	0xe000e018
    9bfc:	.word	0xe000ed04
    9c00:	.word	0xaaaaaaab

00009c04 <delay>:

void delay(uint32_t ms)
{
    9c04:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9c08:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9c0a:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9c0c:	ldr	r7, [pc, #128]	; (9c90 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9c0e:	ldr	r3, [pc, #132]	; (9c94 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9c10:	ldr	r2, [pc, #132]	; (9c98 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9c12:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9c14:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9c16:	ldr	r2, [r2, #0]
	__enable_irq();
    9c18:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9c1a:	lsls	r2, r2, #5
    9c1c:	bpl.n	9c24 <delay+0x20>
    9c1e:	cmp	r3, #50	; 0x32
    9c20:	it	hi
    9c22:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    9c24:	cbz	r5, 9c8c <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9c26:	rsb	r3, r3, #95744	; 0x17600
    9c2a:	ldr	r6, [pc, #112]	; (9c9c <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9c2c:	ldr.w	r9, [pc, #100]	; 9c94 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9c30:	ldr.w	r8, [pc, #100]	; 9c98 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9c34:	adds	r3, #255	; 0xff
    9c36:	mov.w	r2, #1000	; 0x3e8
    9c3a:	umull	r1, r3, r6, r3
    9c3e:	mul.w	r4, r2, r4
    9c42:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9c46:	cpsid	i
	current = SYST_CVR;
    9c48:	ldr.w	r1, [r9]
	count = systick_millis_count;
    9c4c:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9c4e:	ldr.w	lr, [r8]
	__enable_irq();
    9c52:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9c54:	rsb	r3, r1, #95744	; 0x17600
    9c58:	adds	r3, #255	; 0xff
    9c5a:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9c5e:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9c62:	rsb	r3, r4, r3, lsr #6
    9c66:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9c6a:	beq.n	9c72 <delay+0x6e>
    9c6c:	cmp	r1, #50	; 0x32
    9c6e:	it	hi
    9c70:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9c72:	mla	r3, r0, r2, r3
    9c76:	cmp.w	r3, #1000	; 0x3e8
    9c7a:	bcc.n	9c86 <delay+0x82>
				ms--;
				if (ms == 0) return;
    9c7c:	subs	r5, #1
    9c7e:	beq.n	9c8c <delay+0x88>
				start += 1000;
    9c80:	add.w	r4, r4, #1000	; 0x3e8
    9c84:	b.n	9c46 <delay+0x42>
			}
			yield();
    9c86:	bl	1708 <yield>
		}
    9c8a:	b.n	9c46 <delay+0x42>
    9c8c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9c90:	.word	0x200203bc
    9c94:	.word	0xe000e018
    9c98:	.word	0xe000ed04
    9c9c:	.word	0xaaaaaaab

00009ca0 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    9ca0:	cpsid	i
	avail = usb_buffer_available;
    9ca2:	ldr	r0, [pc, #52]	; (9cd8 <usb_malloc+0x38>)
    9ca4:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    9ca6:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    9caa:	cmp	r3, #11
    9cac:	bgt.n	9cd0 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    9cae:	mov.w	r1, #2147483648	; 0x80000000
    9cb2:	lsrs	r1, r3
    9cb4:	bic.w	r2, r2, r1
    9cb8:	str	r2, [r0, #0]
	__enable_irq();
    9cba:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    9cbc:	ldr	r0, [pc, #28]	; (9cdc <usb_malloc+0x3c>)
    9cbe:	add.w	r3, r3, r3, lsl #3
    9cc2:	lsls	r3, r3, #3
    9cc4:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    9cc6:	movs	r1, #0
    9cc8:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    9cca:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    9ccc:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    9cce:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    9cd0:	cpsie	i
		return NULL;
    9cd2:	movs	r0, #0
    9cd4:	bx	lr
    9cd6:	nop
    9cd8:	.word	0x1fff0894
    9cdc:	.word	0x1fff03d0

00009ce0 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    9ce0:	ldr	r3, [pc, #52]	; (9d18 <usb_free+0x38>)
    9ce2:	ldr	r2, [pc, #56]	; (9d1c <usb_free+0x3c>)
    9ce4:	subs	r3, r0, r3
    9ce6:	umull	r2, r3, r2, r3
    9cea:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    9cec:	cmp	r3, #11
    9cee:	bhi.n	9d0a <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9cf0:	ldr	r2, [pc, #44]	; (9d20 <usb_free+0x40>)
    9cf2:	ldrb	r2, [r2, #0]
    9cf4:	cbnz	r2, 9d0c <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    9cf6:	cpsid	i
	usb_buffer_available |= mask;
    9cf8:	ldr	r0, [pc, #40]	; (9d24 <usb_free+0x44>)
    9cfa:	mov.w	r1, #2147483648	; 0x80000000
    9cfe:	ldr	r2, [r0, #0]
    9d00:	lsr.w	r3, r1, r3
    9d04:	orrs	r2, r3
    9d06:	str	r2, [r0, #0]
	__enable_irq();
    9d08:	cpsie	i
    9d0a:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9d0c:	ldr	r2, [pc, #24]	; (9d28 <usb_free+0x48>)
    9d0e:	ldrb	r2, [r2, #0]
    9d10:	cmp	r2, #0
    9d12:	beq.n	9cf6 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    9d14:	b.w	9d94 <usb_rx_memory>
    9d18:	.word	0x1fff03d0
    9d1c:	.word	0x38e38e39
    9d20:	.word	0x20020495
    9d24:	.word	0x1fff0894
    9d28:	.word	0x200204a0

00009d2c <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    9d2c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9d2e:	cmp	r3, #3
    9d30:	bhi.n	9d5c <usb_rx+0x30>
	__disable_irq();
    9d32:	cpsid	i
	ret = rx_first[endpoint];
    9d34:	ldr	r1, [pc, #40]	; (9d60 <usb_rx+0x34>)
    9d36:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    9d3a:	cbz	r0, 9d58 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    9d3c:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9d3e:	ldr	r4, [pc, #36]	; (9d64 <usb_rx+0x38>)
    9d40:	ldrh	r5, [r0, #0]
    9d42:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    9d46:	ldr	r6, [r0, #4]
    9d48:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9d4c:	subs	r2, r2, r5
    9d4e:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    9d52:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9d54:	pop	{r4, r5, r6}
    9d56:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    9d58:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9d5a:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9d5c:	movs	r0, #0
    9d5e:	bx	lr
    9d60:	.word	0x20020418
    9d64:	.word	0x20020534

00009d68 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    9d68:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    9d6a:	cmp	r0, #3
    9d6c:	bhi.n	9d86 <usb_tx_packet_count+0x1e>
	__disable_irq();
    9d6e:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    9d70:	ldr	r3, [pc, #28]	; (9d90 <usb_tx_packet_count+0x28>)
    9d72:	ldr.w	r3, [r3, r0, lsl #2]
    9d76:	cbz	r3, 9d8a <usb_tx_packet_count+0x22>
    9d78:	movs	r0, #0
    9d7a:	ldr	r3, [r3, #4]
    9d7c:	adds	r0, #1
    9d7e:	cmp	r3, #0
    9d80:	bne.n	9d7a <usb_tx_packet_count+0x12>
	__enable_irq();
    9d82:	cpsie	i
	return count;
    9d84:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    9d86:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    9d88:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    9d8a:	mov	r0, r3
    9d8c:	b.n	9d82 <usb_tx_packet_count+0x1a>
    9d8e:	nop
    9d90:	.word	0x2002046c

00009d94 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    9d94:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    9d96:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9d98:	ldr	r2, [pc, #172]	; (9e48 <usb_rx_memory+0xb4>)
    9d9a:	ldrb	r3, [r2, #0]
    9d9c:	lsls	r5, r3, #28
    9d9e:	bpl.n	9dae <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9da0:	ldr	r3, [pc, #168]	; (9e4c <usb_rx_memory+0xb8>)
    9da2:	ldr	r1, [r3, #32]
    9da4:	cmp	r1, #0
    9da6:	beq.n	9e16 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9da8:	ldr	r1, [r3, #40]	; 0x28
    9daa:	cmp	r1, #0
    9dac:	beq.n	9e32 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9dae:	ldrb	r3, [r2, #1]
    9db0:	lsls	r4, r3, #28
    9db2:	bpl.n	9dc2 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9db4:	ldr	r3, [pc, #148]	; (9e4c <usb_rx_memory+0xb8>)
    9db6:	ldr	r1, [r3, #64]	; 0x40
    9db8:	cmp	r1, #0
    9dba:	beq.n	9e3a <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9dbc:	ldr	r1, [r3, #72]	; 0x48
    9dbe:	cmp	r1, #0
    9dc0:	beq.n	9e36 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9dc2:	ldrb	r3, [r2, #2]
    9dc4:	lsls	r1, r3, #28
    9dc6:	bpl.n	9dd4 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9dc8:	ldr	r3, [pc, #128]	; (9e4c <usb_rx_memory+0xb8>)
    9dca:	ldr	r1, [r3, #96]	; 0x60
    9dcc:	cmp	r1, #0
    9dce:	beq.n	9e3e <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9dd0:	ldr	r1, [r3, #104]	; 0x68
    9dd2:	cbz	r1, 9df8 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9dd4:	ldrb	r3, [r2, #3]
    9dd6:	lsls	r3, r3, #28
    9dd8:	bpl.n	9dea <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9dda:	ldr	r3, [pc, #112]	; (9e4c <usb_rx_memory+0xb8>)
    9ddc:	ldr.w	r2, [r3, #128]	; 0x80
    9de0:	cbz	r2, 9e42 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9de2:	ldr.w	r2, [r3, #136]	; 0x88
    9de6:	movs	r1, #17
    9de8:	cbz	r2, 9dfa <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    9dea:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    9dec:	ldr	r3, [pc, #96]	; (9e50 <usb_rx_memory+0xbc>)
    9dee:	movs	r2, #0
    9df0:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    9df2:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    9df4:	b.w	9ce0 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9df8:	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9dfa:	ldr	r4, [pc, #84]	; (9e50 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9dfc:	ldr	r5, [pc, #84]	; (9e54 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    9dfe:	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9e00:	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9e04:	add.w	r3, r3, r1, lsl #3
    9e08:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9e0a:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9e0c:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9e0e:	strb	r2, [r4, #0]
				__enable_irq();
    9e10:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    9e12:	pop	{r4, r5}
    9e14:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9e16:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9e18:	ldr	r4, [pc, #52]	; (9e50 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9e1a:	ldr	r5, [pc, #60]	; (9e58 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    9e1c:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9e1e:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9e22:	add.w	r3, r3, r2, lsl #3
    9e26:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9e28:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9e2a:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9e2c:	strb	r2, [r4, #0]
				__enable_irq();
    9e2e:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    9e30:	b.n	9e12 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9e32:	movs	r1, #5
    9e34:	b.n	9dfa <usb_rx_memory+0x66>
    9e36:	movs	r1, #9
    9e38:	b.n	9dfa <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9e3a:	movs	r2, #8
    9e3c:	b.n	9e18 <usb_rx_memory+0x84>
    9e3e:	movs	r2, #12
    9e40:	b.n	9e18 <usb_rx_memory+0x84>
    9e42:	movs	r2, #16
    9e44:	b.n	9e18 <usb_rx_memory+0x84>
    9e46:	nop
    9e48:	.word	0x00013ed8
    9e4c:	.word	0x1fff0000
    9e50:	.word	0x20020495
    9e54:	.word	0x004000c8
    9e58:	.word	0x00400088

00009e5c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    9e5c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    9e5e:	cmp	r3, #3
    9e60:	bhi.n	9e9e <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    9e62:	ldr	r2, [pc, #108]	; (9ed0 <usb_tx+0x74>)
    9e64:	lsls	r0, r0, #5
    9e66:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    9e6a:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    9e6c:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    9e6e:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    9e70:	ldr	r4, [pc, #96]	; (9ed4 <usb_tx+0x78>)
    9e72:	ldrb	r2, [r4, r3]
    9e74:	cmp	r2, #3
    9e76:	bhi.n	9eb0 <usb_tx+0x54>
    9e78:	tbb	[pc, r2]
    9e7c:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    9e80:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9e82:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    9e84:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9e86:	tst.w	r0, #8
    9e8a:	ite	ne
    9e8c:	movne	r3, #200	; 0xc8
    9e8e:	moveq	r3, #136	; 0x88
    9e90:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    9e94:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9e96:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    9e98:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    9e9a:	cpsie	i
}
    9e9c:	pop	{r4, r5}
    9e9e:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    9ea0:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    9ea2:	movs	r2, #2
		break;
    9ea4:	b.n	9e82 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    9ea6:	movs	r2, #5
    9ea8:	b.n	9e82 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    9eaa:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    9eac:	movs	r2, #4
		break;
    9eae:	b.n	9e82 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    9eb0:	ldr	r2, [pc, #36]	; (9ed8 <usb_tx+0x7c>)
    9eb2:	ldr.w	r0, [r2, r3, lsl #2]
    9eb6:	cbz	r0, 9ec8 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    9eb8:	ldr	r2, [pc, #32]	; (9edc <usb_tx+0x80>)
    9eba:	ldr.w	r0, [r2, r3, lsl #2]
    9ebe:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    9ec0:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    9ec4:	cpsie	i
		return;
    9ec6:	b.n	9e9c <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    9ec8:	str.w	r1, [r2, r3, lsl #2]
    9ecc:	ldr	r2, [pc, #12]	; (9edc <usb_tx+0x80>)
    9ece:	b.n	9ec0 <usb_tx+0x64>
    9ed0:	.word	0x1fff0000
    9ed4:	.word	0x200204a4
    9ed8:	.word	0x2002046c
    9edc:	.word	0x2002047c

00009ee0 <usb_isr>:
}



void usb_isr(void)
{
    9ee0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    9ee4:	ldr.w	fp, [pc, #780]	; a1f4 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    9ee8:	ldr.w	sl, [pc, #780]	; a1f8 <usb_isr+0x318>
}



void usb_isr(void)
{
    9eec:	sub	sp, #28
    9eee:	b.n	9f7a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    9ef0:	ldr	r7, [pc, #684]	; (a1a0 <usb_isr+0x2c0>)
    9ef2:	mov.w	r8, r3, lsr #2
    9ef6:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    9efa:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    9efc:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9f00:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    9f04:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    9f06:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9f0a:	and.w	r4, r3, #255	; 0xff
    9f0e:	cmp	r3, #0
    9f10:	bne.w	a118 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    9f14:	ldr.w	r3, [r7, r8, lsl #3]
    9f18:	lsrs	r3, r3, #16
    9f1a:	uxth	r1, r3
    9f1c:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    9f20:	cmp	r3, #0
    9f22:	beq.w	a106 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    9f26:	ldr	r3, [pc, #636]	; (a1a4 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    9f28:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    9f2c:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    9f30:	ldr.w	r2, [r3, r6, lsl #2]
    9f34:	cmp	r2, #0
    9f36:	beq.w	a4c4 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    9f3a:	ldr	r5, [pc, #620]	; (a1a8 <usb_isr+0x2c8>)
    9f3c:	ldr.w	r3, [r5, r6, lsl #2]
    9f40:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    9f42:	ldr	r4, [pc, #616]	; (a1ac <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    9f44:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    9f48:	ldrh.w	r3, [r4, r6, lsl #1]
    9f4c:	add	r1, r3
    9f4e:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    9f52:	bl	9ca0 <usb_malloc>
					if (packet) {
    9f56:	cmp	r0, #0
    9f58:	beq.w	a4b6 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    9f5c:	ldr	r2, [pc, #592]	; (a1b0 <usb_isr+0x2d0>)
    9f5e:	ldr	r3, [pc, #596]	; (a1b4 <usb_isr+0x2d4>)
    9f60:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    9f64:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    9f68:	it	ne
    9f6a:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    9f6c:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    9f70:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    9f74:	movs	r3, #8
    9f76:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    9f7a:	ldrb.w	r4, [fp]
    9f7e:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    9f80:	lsls	r1, r4, #29
    9f82:	bpl.n	9fba <usb_isr+0xda>
		if (usb_configuration) {
    9f84:	ldr	r3, [pc, #560]	; (a1b8 <usb_isr+0x2d8>)
    9f86:	ldrb	r3, [r3, #0]
    9f88:	cbz	r3, 9fb4 <usb_isr+0xd4>
			t = usb_reboot_timer;
    9f8a:	ldr	r1, [pc, #560]	; (a1bc <usb_isr+0x2dc>)
    9f8c:	ldrb	r2, [r1, #0]
			if (t) {
    9f8e:	and.w	r3, r2, #255	; 0xff
    9f92:	cbz	r2, 9f9e <usb_isr+0xbe>
				usb_reboot_timer = --t;
    9f94:	subs	r3, #1
    9f96:	uxtb	r3, r3
    9f98:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    9f9a:	cbnz	r3, 9f9e <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    9f9c:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    9f9e:	ldr	r1, [pc, #544]	; (a1c0 <usb_isr+0x2e0>)
    9fa0:	ldrb	r2, [r1, #0]
			if (t) {
    9fa2:	and.w	r3, r2, #255	; 0xff
    9fa6:	cbz	r2, 9fb4 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    9fa8:	subs	r3, #1
    9faa:	uxtb	r3, r3
    9fac:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    9fae:	cmp	r3, #0
    9fb0:	beq.w	a462 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    9fb4:	movs	r3, #4
    9fb6:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    9fba:	and.w	r3, r4, #8
    9fbe:	and.w	r2, r3, #255	; 0xff
    9fc2:	cmp	r3, #0
    9fc4:	beq.w	a160 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    9fc8:	ldrb.w	r3, [sl]
    9fcc:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    9fce:	lsrs	r6, r3, #4
    9fd0:	bne.n	9ef0 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    9fd2:	lsrs	r4, r3, #2
    9fd4:	ldr.w	r9, [pc, #456]	; a1a0 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9fd8:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    9fdc:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9fe0:	ubfx	r2, r2, #2, #4
    9fe4:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    9fe6:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9fe8:	cmp	r2, #12
    9fea:	bhi.w	a0fe <usb_isr+0x21e>
    9fee:	tbb	[pc, r2]
    9ff2:	.short	0x7c7c
    9ff4:	.word	0x86868686
    9ff8:	.word	0x86478686
    9ffc:	.short	0x8686
    9ffe:	.byte	0x07
    9fff:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    a000:	ldr	r0, [r1, #0]
    a002:	ldr	r5, [pc, #448]	; (a1c4 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    a004:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a006:	ldr	r7, [pc, #448]	; (a1c8 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a008:	ldr	r6, [pc, #448]	; (a1cc <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    a00a:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a00c:	uxth	r1, r0
    a00e:	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a012:	ldr	r3, [pc, #412]	; (a1b0 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    a014:	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a016:	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a01a:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a01c:	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a01e:	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a022:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    a024:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    a028:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a02c:	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    a030:	ldr	r4, [pc, #364]	; (a1a0 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a032:	bhi.w	a1fc <usb_isr+0x31c>
    a036:	cmp.w	r1, #1664	; 0x680
    a03a:	bcs.w	a6ca <usb_isr+0x7ea>
    a03e:	cmp.w	r1, #258	; 0x102
    a042:	beq.w	a63e <usb_isr+0x75e>
    a046:	bhi.w	a564 <usb_isr+0x684>
    a04a:	cmp	r1, #128	; 0x80
    a04c:	beq.w	a73e <usb_isr+0x85e>
    a050:	cmp	r1, #130	; 0x82
    a052:	bne.w	a64a <usb_isr+0x76a>
    a056:	ldrh	r1, [r5, #4]
    a058:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    a05c:	cmp	r1, #4
    a05e:	bhi.w	a64a <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a062:	ldr	r0, [pc, #364]	; (a1d0 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a064:	ldr	r4, [pc, #364]	; (a1d4 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a066:	lsls	r1, r1, #2
    a068:	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a06a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a06c:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a06e:	ldrb	r2, [r0, #0]
    a070:	lsls	r3, r2, #30
    a072:	bpl.w	a920 <usb_isr+0xa40>
    a076:	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    a07a:	mov.w	lr, #2
    a07e:	b.n	a706 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    a080:	ldr	r7, [pc, #324]	; (a1c8 <usb_isr+0x2e8>)
    a082:	ldr	r2, [r7, #0]
		if (data) {
    a084:	cbz	r2, a0d4 <usb_isr+0x1f4>
			size = ep0_tx_len;
    a086:	ldr	r3, [pc, #336]	; (a1d8 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a088:	ldr	r6, [pc, #320]	; (a1cc <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a08a:	ldr	r1, [pc, #336]	; (a1dc <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    a08c:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a08e:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a090:	ldrb	r5, [r1, #0]
    a092:	cmp	r0, #64	; 0x40
    a094:	mov	lr, r0
    a096:	orr.w	r8, r5, #2
    a09a:	it	cs
    a09c:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a0a0:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    a0a2:	eor.w	r4, r4, #1
    a0a6:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a0a8:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a0ac:	ite	eq
    a0ae:	moveq	r4, #136	; 0x88
    a0b0:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a0b2:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a0b6:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a0b8:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a0bc:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a0c0:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a0c2:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a0c4:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    a0c8:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a0ca:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    a0cc:	cmp	r0, #0
    a0ce:	beq.w	a35c <usb_isr+0x47c>
    a0d2:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    a0d4:	ldr	r3, [pc, #236]	; (a1c4 <usb_isr+0x2e4>)
    a0d6:	ldrh	r2, [r3, #0]
    a0d8:	cmp.w	r2, #1280	; 0x500
    a0dc:	bne.n	a0fe <usb_isr+0x21e>
			setup.bRequest = 0;
    a0de:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    a0e0:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    a0e2:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    a0e4:	ldr	r3, [pc, #248]	; (a1e0 <usb_isr+0x300>)
    a0e6:	strb	r2, [r3, #0]
    a0e8:	b.n	a0fe <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    a0ea:	ldr	r2, [pc, #216]	; (a1c4 <usb_isr+0x2e4>)
    a0ec:	ldrh	r0, [r2, #0]
    a0ee:	movw	r2, #8225	; 0x2021
    a0f2:	cmp	r0, r2
    a0f4:	beq.w	a366 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a0f8:	ldr	r2, [pc, #180]	; (a1b0 <usb_isr+0x2d0>)
    a0fa:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a0fe:	ldr	r2, [pc, #228]	; (a1e4 <usb_isr+0x304>)
    a100:	movs	r3, #1
    a102:	strb	r3, [r2, #0]
    a104:	b.n	9f74 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a106:	ldr	r2, [pc, #168]	; (a1b0 <usb_isr+0x2d0>)
    a108:	ldr	r3, [pc, #168]	; (a1b4 <usb_isr+0x2d4>)
    a10a:	tst.w	r9, #8
    a10e:	it	ne
    a110:	movne	r3, r2
    a112:	str.w	r3, [r7, r8, lsl #3]
    a116:	b.n	9f74 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    a118:	bl	9ce0 <usb_free>
				packet = tx_first[endpoint];
    a11c:	ldr	r2, [pc, #200]	; (a1e8 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    a11e:	ldr	r1, [pc, #204]	; (a1ec <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    a120:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    a124:	cmp	r3, #0
    a126:	beq.w	a4cc <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    a12a:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    a12c:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    a12e:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    a132:	add.w	r2, r3, #8
    a136:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    a13a:	cmp	r4, #3
    a13c:	bhi.n	a14a <usb_isr+0x26a>
    a13e:	tbb	[pc, r4]
    a142:	.short	0x022c
    a144:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    a146:	movs	r2, #2
    a148:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    a14a:	ldrh	r2, [r3, #0]
    a14c:	tst.w	r9, #8
    a150:	ite	eq
    a152:	moveq	r3, #136	; 0x88
    a154:	movne	r3, #200	; 0xc8
    a156:	orr.w	r3, r3, r2, lsl #16
    a15a:	str.w	r3, [r7, r8, lsl #3]
    a15e:	b.n	9f74 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    a160:	lsls	r0, r4, #31
    a162:	bmi.w	a468 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    a166:	lsls	r1, r4, #24
    a168:	bmi.w	a550 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    a16c:	lsls	r2, r4, #30
    a16e:	bpl.n	a17e <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    a170:	ldr	r2, [pc, #124]	; (a1f0 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a172:	ldr	r1, [pc, #128]	; (a1f4 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    a174:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a176:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    a178:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    a17a:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a17c:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    a17e:	lsls	r3, r4, #27
    a180:	bpl.n	a188 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    a182:	ldr	r3, [pc, #112]	; (a1f4 <usb_isr+0x314>)
    a184:	movs	r2, #16
    a186:	strb	r2, [r3, #0]
	}

}
    a188:	add	sp, #28
    a18a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    a18e:	movs	r2, #4
    a190:	strb	r2, [r1, r6]
						break;
    a192:	b.n	a14a <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    a194:	movs	r2, #5
    a196:	strb	r2, [r1, r6]
						break;
    a198:	b.n	a14a <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    a19a:	movs	r2, #3
    a19c:	strb	r2, [r1, r6]
						break;
    a19e:	b.n	a14a <usb_isr+0x26a>
    a1a0:	.word	0x1fff0000
    a1a4:	.word	0x20020418
    a1a8:	.word	0x200203c4
    a1ac:	.word	0x20020534
    a1b0:	.word	0x004000c8
    a1b4:	.word	0x00400088
    a1b8:	.word	0x200204a0
    a1bc:	.word	0x20020429
    a1c0:	.word	0x200203a8
    a1c4:	.word	0x2002048c
    a1c8:	.word	0x200203c0
    a1cc:	.word	0x20020428
    a1d0:	.word	0x400720c0
    a1d4:	.word	0x20020498
    a1d8:	.word	0x200203d4
    a1dc:	.word	0x20020494
    a1e0:	.word	0x40072098
    a1e4:	.word	0x40072094
    a1e8:	.word	0x2002046c
    a1ec:	.word	0x200204a4
    a1f0:	.word	0x40072088
    a1f4:	.word	0x40072080
    a1f8:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a1fc:	movw	r0, #8225	; 0x2021
    a200:	cmp	r1, r0
    a202:	beq.w	a45a <usb_isr+0x57a>
    a206:	bhi.w	a3ba <usb_isr+0x4da>
    a20a:	cmp.w	r1, #2176	; 0x880
    a20e:	beq.w	a6fe <usb_isr+0x81e>
    a212:	cmp.w	r1, #2304	; 0x900
    a216:	bne.w	a64a <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    a21a:	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    a21c:	ldr	r1, [pc, #716]	; (a4ec <usb_isr+0x60c>)
    a21e:	ldrb	r0, [r5, #2]
    a220:	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    a222:	lsls	r2, r2, #24
    a224:	bmi.w	a896 <usb_isr+0x9b6>
    a228:	ldr.w	r2, [r9, #40]	; 0x28
    a22c:	ldr	r1, [pc, #704]	; (a4f0 <usb_isr+0x610>)
    a22e:	lsls	r3, r2, #24
    a230:	bmi.w	a88c <usb_isr+0x9ac>
    a234:	ldr.w	r2, [r9, #48]	; 0x30
    a238:	ldr	r1, [pc, #692]	; (a4f0 <usb_isr+0x610>)
    a23a:	lsls	r5, r2, #24
    a23c:	bmi.w	a83e <usb_isr+0x95e>
    a240:	ldr.w	r2, [r9, #56]	; 0x38
    a244:	ldr	r1, [pc, #680]	; (a4f0 <usb_isr+0x610>)
    a246:	lsls	r4, r2, #24
    a248:	bmi.w	a834 <usb_isr+0x954>
    a24c:	ldr.w	r2, [r9, #64]	; 0x40
    a250:	ldr	r1, [pc, #668]	; (a4f0 <usb_isr+0x610>)
    a252:	lsls	r0, r2, #24
    a254:	bmi.w	a8e6 <usb_isr+0xa06>
    a258:	ldr.w	r2, [r9, #72]	; 0x48
    a25c:	ldr	r1, [pc, #656]	; (a4f0 <usb_isr+0x610>)
    a25e:	lsls	r2, r2, #24
    a260:	bmi.w	a8dc <usb_isr+0x9fc>
    a264:	ldr.w	r2, [r9, #80]	; 0x50
    a268:	ldr	r1, [pc, #644]	; (a4f0 <usb_isr+0x610>)
    a26a:	lsls	r3, r2, #24
    a26c:	bmi.w	a8d2 <usb_isr+0x9f2>
    a270:	ldr.w	r2, [r9, #88]	; 0x58
    a274:	ldr	r1, [pc, #632]	; (a4f0 <usb_isr+0x610>)
    a276:	lsls	r5, r2, #24
    a278:	bmi.w	a8c8 <usb_isr+0x9e8>
    a27c:	ldr.w	r2, [r9, #96]	; 0x60
    a280:	ldr	r1, [pc, #620]	; (a4f0 <usb_isr+0x610>)
    a282:	lsls	r4, r2, #24
    a284:	bmi.w	a8be <usb_isr+0x9de>
    a288:	ldr.w	r2, [r9, #104]	; 0x68
    a28c:	ldr	r1, [pc, #608]	; (a4f0 <usb_isr+0x610>)
    a28e:	lsls	r0, r2, #24
    a290:	bmi.w	a8b4 <usb_isr+0x9d4>
    a294:	ldr.w	r2, [r9, #112]	; 0x70
    a298:	ldr	r1, [pc, #596]	; (a4f0 <usb_isr+0x610>)
    a29a:	lsls	r2, r2, #24
    a29c:	bmi.w	a8aa <usb_isr+0x9ca>
    a2a0:	ldr.w	r2, [r9, #120]	; 0x78
    a2a4:	ldr	r1, [pc, #584]	; (a4f0 <usb_isr+0x610>)
    a2a6:	lsls	r3, r2, #24
    a2a8:	bmi.w	a8a0 <usb_isr+0x9c0>
    a2ac:	ldr.w	r2, [r9, #128]	; 0x80
    a2b0:	ldr	r1, [pc, #572]	; (a4f0 <usb_isr+0x610>)
    a2b2:	lsls	r5, r2, #24
    a2b4:	bmi.w	a914 <usb_isr+0xa34>
    a2b8:	ldr.w	r2, [r9, #136]	; 0x88
    a2bc:	ldr	r1, [pc, #560]	; (a4f0 <usb_isr+0x610>)
    a2be:	lsls	r4, r2, #24
    a2c0:	bmi.w	a908 <usb_isr+0xa28>
    a2c4:	ldr.w	r2, [r9, #144]	; 0x90
    a2c8:	ldr	r1, [pc, #548]	; (a4f0 <usb_isr+0x610>)
    a2ca:	lsls	r0, r2, #24
    a2cc:	bmi.w	a8fc <usb_isr+0xa1c>
    a2d0:	ldr.w	r2, [r9, #152]	; 0x98
    a2d4:	ldr	r1, [pc, #536]	; (a4f0 <usb_isr+0x610>)
    a2d6:	lsls	r2, r2, #24
    a2d8:	bmi.w	a8f0 <usb_isr+0xa10>
    a2dc:	ldr	r0, [pc, #532]	; (a4f4 <usb_isr+0x614>)
    a2de:	ldr	r2, [pc, #536]	; (a4f8 <usb_isr+0x618>)
    a2e0:	ldr	r1, [pc, #536]	; (a4fc <usb_isr+0x61c>)
    a2e2:	str	r0, [sp, #4]
    a2e4:	ldr	r0, [pc, #536]	; (a500 <usb_isr+0x620>)
    a2e6:	ldr	r4, [pc, #540]	; (a504 <usb_isr+0x624>)
    a2e8:	ldr	r5, [pc, #540]	; (a508 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a2ea:	str	r4, [sp, #8]
}



void usb_isr(void)
{
    a2ec:	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a2ee:	str	r7, [sp, #16]
    a2f0:	str	r6, [sp, #20]
    a2f2:	mov	r8, r0
    a2f4:	mov	r4, r3
    a2f6:	mov	r7, r1
    a2f8:	mov	r6, r2
    a2fa:	str	r5, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    a2fc:	ldr	r0, [r6, #0]
			while (p) {
    a2fe:	cbz	r0, a30c <usb_isr+0x42c>
				n = p->next;
    a300:	ldr	r5, [r0, #4]
				usb_free(p);
    a302:	bl	9ce0 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    a306:	mov	r0, r5
    a308:	cmp	r5, #0
    a30a:	bne.n	a300 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    a30c:	movs	r3, #0
    a30e:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    a310:	ldr	r3, [sp, #12]
			p = tx_first[i];
    a312:	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    a314:	mov	r2, r3
    a316:	movs	r3, #0
    a318:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    a31c:	cbz	r0, a32a <usb_isr+0x44a>
				n = p->next;
    a31e:	ldr	r5, [r0, #4]
				usb_free(p);
    a320:	bl	9ce0 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    a324:	mov	r0, r5
    a326:	cmp	r5, #0
    a328:	bne.n	a31e <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    a32a:	movs	r2, #0
    a32c:	str	r2, [r7, #0]
			tx_last[i] = NULL;
    a32e:	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    a330:	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    a334:	mov	r1, r2
    a336:	movs	r2, #0
    a338:	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    a33c:	ldr	r2, [sp, #8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    a33e:	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    a340:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    a342:	mov.w	r1, #0
    a346:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    a34a:	cmp	r3, #3
    a34c:	bhi.w	a5a6 <usb_isr+0x6c6>
    a350:	tbh	[pc, r3, lsl #1]
    a354:	.word	0x01250170
    a358:	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    a35c:	cmp.w	lr, #64	; 0x40
    a360:	it	ne
    a362:	movne	r2, #0
    a364:	b.n	a0d2 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    a366:	ldr	r2, [pc, #420]	; (a50c <usb_isr+0x62c>)
    a368:	ldrb	r5, [r1, #0]
    a36a:	ldrb	r0, [r1, #1]
    a36c:	strb	r5, [r2, #0]
    a36e:	strb	r0, [r2, #1]
    a370:	ldrb	r5, [r1, #2]
    a372:	ldrb	r0, [r1, #3]
    a374:	strb	r5, [r2, #2]
    a376:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    a378:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    a37a:	ldrb	r5, [r1, #4]
    a37c:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    a37e:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    a380:	ldrb	r5, [r1, #5]
    a382:	ldrb	r1, [r1, #6]
    a384:	strb	r5, [r2, #5]
    a386:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    a388:	beq.w	a6c2 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a38c:	ldr	r1, [pc, #384]	; (a510 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a38e:	ldr	r6, [pc, #388]	; (a514 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a390:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a392:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a394:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a398:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a39a:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a39e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a3a0:	ite	eq
    a3a2:	moveq	r1, #136	; 0x88
    a3a4:	movne	r1, #200	; 0xc8
    a3a6:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a3aa:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a3ae:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a3b2:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a3b4:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a3b6:	str	r1, [r2, #4]
    a3b8:	b.n	a0f8 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a3ba:	movw	r0, #8737	; 0x2221
    a3be:	cmp	r1, r0
    a3c0:	bne.w	a75a <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a3c4:	ldr	r3, [pc, #336]	; (a518 <usb_isr+0x638>)
    a3c6:	ldr	r4, [pc, #340]	; (a51c <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    a3c8:	ldr	r1, [pc, #340]	; (a520 <usb_isr+0x640>)
    a3ca:	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a3cc:	ldr	r5, [r3, #0]
    a3ce:	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    a3d0:	str.w	lr, [sp, #4]
    a3d4:	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a3d6:	movs	r0, #0
    a3d8:	str	r0, [sp, #8]
    a3da:	mov	r8, r0
    a3dc:	mov	ip, r0
    a3de:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a3e0:	ldr	r1, [pc, #300]	; (a510 <usb_isr+0x630>)
    a3e2:	ldrb	r5, [r1, #0]
    a3e4:	orr.w	lr, r5, #2
    a3e8:	add.w	r3, r9, lr, lsl #3
    a3ec:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a3ee:	ldr	r3, [sp, #4]
    a3f0:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a3f2:	ldr	r3, [sp, #12]
    a3f4:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a3f6:	ite	eq
    a3f8:	moveq	r4, #136	; 0x88
    a3fa:	movne	r4, #200	; 0xc8
    a3fc:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a400:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a404:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    a408:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    a40a:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a40c:	ldr.w	lr, [pc, #224]	; a4f0 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    a410:	ldr	r3, [pc, #256]	; (a514 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    a412:	ldr.w	r8, [pc, #252]	; a510 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    a416:	cmp	r0, #0
    a418:	bne.w	a658 <usb_isr+0x778>
    a41c:	cmp.w	ip, #64	; 0x40
    a420:	bne.n	a45a <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a422:	orr.w	ip, r4, #2
    a426:	add.w	r3, r9, ip, lsl #3
    a42a:	ldr	r4, [sp, #8]
    a42c:	ldr.w	lr, [pc, #192]	; a4f0 <usb_isr+0x610>
    a430:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a432:	cmp	r2, #0
    a434:	bne.w	a684 <usb_isr+0x7a4>
    a438:	lsls	r2, r0, #16
    a43a:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    a43e:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a442:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a446:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a448:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    a44a:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a44c:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    a44e:	cmp	r0, #64	; 0x40
    a450:	bne.n	a45a <usb_isr+0x57a>
    a452:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    a454:	ldr	r2, [pc, #204]	; (a524 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    a456:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    a458:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a45a:	ldr	r2, [pc, #204]	; (a528 <usb_isr+0x648>)
    a45c:	movs	r3, #1
    a45e:	strb	r3, [r2, #0]
    a460:	b.n	a0fe <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    a462:	bl	9784 <usb_serial_flush_callback>
    a466:	b.n	9fb4 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    a468:	ldr	r3, [pc, #132]	; (a4f0 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    a46a:	ldr	r0, [pc, #188]	; (a528 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    a46c:	ldr	r1, [pc, #160]	; (a510 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    a46e:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    a470:	mov.w	lr, #2
    a474:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a478:	ldr	r7, [pc, #176]	; (a52c <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    a47a:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    a47c:	ldr	r1, [pc, #176]	; (a530 <usb_isr+0x650>)
    a47e:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    a480:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    a482:	ldr	r6, [pc, #176]	; (a534 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    a484:	ldr	r5, [pc, #176]	; (a538 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    a486:	ldr	r4, [pc, #180]	; (a53c <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    a488:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a48a:	movs	r1, #13
    a48c:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    a48e:	movs	r1, #255	; 0xff
    a490:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    a492:	ldr.w	lr, [pc, #184]	; a54c <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    a496:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    a498:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    a49a:	ldr	r5, [pc, #164]	; (a540 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    a49c:	ldr	r2, [pc, #164]	; (a544 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    a49e:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    a4a2:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    a4a4:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    a4a6:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    a4aa:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    a4ac:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    a4ae:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    a4b0:	add	sp, #28
    a4b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    a4b6:	ldr	r2, [pc, #144]	; (a548 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    a4b8:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    a4bc:	ldrb	r3, [r2, #0]
    a4be:	adds	r3, #1
    a4c0:	strb	r3, [r2, #0]
    a4c2:	b.n	9f74 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    a4c4:	str.w	r0, [r3, r6, lsl #2]
    a4c8:	ldr	r5, [pc, #60]	; (a508 <usb_isr+0x628>)
    a4ca:	b.n	9f42 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    a4cc:	ldrb	r3, [r1, r6]
    a4ce:	cmp	r3, #3
    a4d0:	bhi.w	a6b4 <usb_isr+0x7d4>
    a4d4:	add	r2, pc, #4	; (adr r2, a4dc <usb_isr+0x5fc>)
    a4d6:	ldr.w	pc, [r2, r3, lsl #2]
    a4da:	nop
    a4dc:	.word	0x00009f75
    a4e0:	.word	0x00009f75
    a4e4:	.word	0x0000a599
    a4e8:	.word	0x0000a593
    a4ec:	.word	0x200204a0
    a4f0:	.word	0x1fff0000
    a4f4:	.word	0x2002047c
    a4f8:	.word	0x20020418
    a4fc:	.word	0x2002046c
    a500:	.word	0x200204a4
    a504:	.word	0x20020534
    a508:	.word	0x200203c4
    a50c:	.word	0x20020528
    a510:	.word	0x20020494
    a514:	.word	0x20020428
    a518:	.word	0x200203bc
    a51c:	.word	0x20020530
    a520:	.word	0x200203b8
    a524:	.word	0x200203d4
    a528:	.word	0x40072094
    a52c:	.word	0x400720c0
    a530:	.word	0x00400088
    a534:	.word	0x40072088
    a538:	.word	0x40072080
    a53c:	.word	0x40072098
    a540:	.word	0x200203d8
    a544:	.word	0x2002042c
    a548:	.word	0x20020495
    a54c:	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a550:	ldr	r1, [pc, #756]	; (a848 <usb_isr+0x968>)
		USB0_ISTAT = USB_ISTAT_STALL;
    a552:	ldr	r3, [pc, #760]	; (a84c <usb_isr+0x96c>)
    a554:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a556:	movs	r0, #13
    a558:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    a55a:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    a55c:	lsls	r2, r4, #30
    a55e:	bpl.w	a17e <usb_isr+0x29e>
    a562:	b.n	a170 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a564:	movw	r2, #770	; 0x302
    a568:	cmp	r1, r2
    a56a:	bne.w	a74a <usb_isr+0x86a>
    a56e:	ldrh	r1, [r5, #4]
    a570:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a574:	cmp	r1, #4
    a576:	bhi.n	a64a <usb_isr+0x76a>
    a578:	ldrh	r2, [r5, #2]
    a57a:	cmp	r2, #0
    a57c:	bne.n	a64a <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    a57e:	ldr	r0, [pc, #712]	; (a848 <usb_isr+0x968>)
    a580:	str.w	lr, [sp, #4]
    a584:	lsls	r1, r1, #2
    a586:	add	r0, r1
    a588:	ldrb	r1, [r0, #0]
    a58a:	orr.w	r1, r1, #2
    a58e:	strb	r1, [r0, #0]
    a590:	b.n	a3d6 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a592:	movs	r3, #1
    a594:	strb	r3, [r1, r6]
						break;
    a596:	b.n	9f74 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    a598:	movs	r3, #0
    a59a:	strb	r3, [r1, r6]
						break;
    a59c:	b.n	9f74 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a59e:	mov.w	r3, #1
    a5a2:	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    a5a6:	adds	r4, #1
    a5a8:	cmp	r4, #4
    a5aa:	add.w	r6, r6, #4
    a5ae:	add.w	r7, r7, #4
    a5b2:	add.w	r8, r8, #1
    a5b6:	bne.w	a2fc <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a5ba:	ldr	r4, [pc, #660]	; (a850 <usb_isr+0x970>)
			*reg = epconf;
    a5bc:	ldr	r3, [pc, #660]	; (a854 <usb_isr+0x974>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a5be:	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    a5c0:	ldr	r5, [pc, #660]	; (a858 <usb_isr+0x978>)
    a5c2:	ldr	r7, [sp, #16]
    a5c4:	ldr	r6, [sp, #20]
    a5c6:	movs	r1, #0
    a5c8:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a5ca:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a5cc:	lsls	r3, r2, #28
    a5ce:	bmi.w	a7dc <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a5d2:	ldrb	r2, [r4, #1]
			*reg = epconf;
    a5d4:	ldr	r1, [pc, #644]	; (a85c <usb_isr+0x97c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a5d6:	ldr.w	r8, [pc, #656]	; a868 <usb_isr+0x988>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a5da:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a5dc:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a5de:	mov.w	r1, #0
    a5e2:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    a5e6:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a5ea:	bmi.w	a7b0 <usb_isr+0x8d0>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a5ee:	ldr	r1, [pc, #624]	; (a860 <usb_isr+0x980>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a5f0:	ldrb	r2, [r4, #2]
			*reg = epconf;
    a5f2:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a5f4:	movs	r1, #0
    a5f6:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    a5fa:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a5fe:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a600:	ldr.w	r8, [pc, #612]	; a868 <usb_isr+0x988>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a604:	bmi.w	a808 <usb_isr+0x928>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a608:	ldrb	r2, [r4, #3]
			*reg = epconf;
    a60a:	ldr	r1, [pc, #600]	; (a864 <usb_isr+0x984>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a60c:	ldr	r4, [pc, #600]	; (a868 <usb_isr+0x988>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a60e:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a610:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a612:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a614:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    a618:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a61c:	bmi.w	a780 <usb_isr+0x8a0>
    a620:	ldrb	r3, [r6, #0]
    a622:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a624:	movs	r1, #0
    a626:	eor.w	r2, r3, #1
    a62a:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    a62e:	str.w	r1, [r9, #152]	; 0x98
    a632:	b.n	a3d6 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    a634:	mov.w	r3, #0
    a638:	strb.w	r3, [r8]
    a63c:	b.n	a5a6 <usb_isr+0x6c6>
    a63e:	ldrh	r1, [r5, #4]
    a640:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a644:	cmp	r1, #4
    a646:	bls.w	a764 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a64a:	ldr	r2, [pc, #508]	; (a848 <usb_isr+0x968>)
    a64c:	movs	r3, #15
    a64e:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a650:	ldr	r2, [pc, #536]	; (a86c <usb_isr+0x98c>)
    a652:	movs	r3, #1
    a654:	strb	r3, [r2, #0]
    a656:	b.n	a0fe <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    a658:	cmp	r0, #64	; 0x40
    a65a:	bls.w	a422 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a65e:	orr.w	r4, r4, #2
    a662:	add.w	r1, lr, r4, lsl #3
    a666:	ldr	r6, [sp, #8]
    a668:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a66a:	cbz	r2, a69c <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    a66c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a670:	ldr	r2, [pc, #508]	; (a870 <usb_isr+0x990>)
	ep0_tx_data_toggle ^= 1;
    a672:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a674:	mov	r3, r6
    a676:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a678:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a67c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a67e:	str.w	r2, [lr, r4, lsl #3]
    a682:	b.n	a454 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    a684:	ldrb.w	r3, [sp, #4]
    a688:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a68a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a68c:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a68e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a690:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a694:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a696:	str.w	r2, [lr, ip, lsl #3]
    a69a:	b.n	a44e <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    a69c:	ldrb.w	r1, [sp, #4]
    a6a0:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a6a2:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a6a4:	ldr	r2, [pc, #460]	; (a874 <usb_isr+0x994>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a6a6:	strb.w	r5, [r8]
    a6aa:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a6ac:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a6ae:	str.w	r2, [lr, r4, lsl #3]
    a6b2:	b.n	a454 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    a6b4:	tst.w	r9, #8
    a6b8:	ite	eq
    a6ba:	moveq	r3, #2
    a6bc:	movne	r3, #3
    a6be:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    a6c0:	b.n	9f74 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    a6c2:	ldr	r2, [pc, #436]	; (a878 <usb_isr+0x998>)
    a6c4:	movs	r1, #15
    a6c6:	strb	r1, [r2, #0]
    a6c8:	b.n	a38c <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    a6ca:	ldr	r2, [pc, #432]	; (a87c <usb_isr+0x99c>)
    a6cc:	ldr	r4, [r2, #4]
    a6ce:	cmp	r4, #0
    a6d0:	beq.n	a64a <usb_isr+0x76a>
    a6d2:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a6d4:	ldrh.w	lr, [r5, #4]
    a6d8:	b.n	a6e2 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    a6da:	adds	r2, #12
			if (list->addr == NULL) break;
    a6dc:	ldr	r4, [r2, #4]
    a6de:	cmp	r4, #0
    a6e0:	beq.n	a64a <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a6e2:	ldrh	r3, [r2, #0]
    a6e4:	cmp	r3, r0
    a6e6:	bne.n	a6da <usb_isr+0x7fa>
    a6e8:	ldrh	r3, [r2, #2]
    a6ea:	cmp	r3, lr
    a6ec:	bne.n	a6da <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    a6ee:	lsrs	r0, r0, #8
    a6f0:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    a6f2:	ite	eq
    a6f4:	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    a6f8:	ldrhne.w	lr, [r2, #8]
    a6fc:	b.n	a706 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a6fe:	ldr	r2, [pc, #384]	; (a880 <usb_isr+0x9a0>)
    a700:	ldr	r4, [pc, #384]	; (a884 <usb_isr+0x9a4>)
    a702:	ldrb	r2, [r2, #0]
    a704:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a706:	ldrh	r0, [r5, #6]
    a708:	cmp	r0, lr
    a70a:	bcs.w	a970 <usb_isr+0xa90>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a70e:	ldr	r1, [pc, #376]	; (a888 <usb_isr+0x9a8>)
    a710:	ldrb	r5, [r1, #0]
    a712:	cmp	r0, #64	; 0x40
    a714:	mov	ip, r0
    a716:	orr.w	lr, r5, #2
    a71a:	it	cs
    a71c:	movcs.w	ip, #64	; 0x40
    a720:	add.w	r3, r4, ip
    a724:	add.w	r2, r9, lr, lsl #3
    a728:	str	r3, [sp, #8]
    a72a:	movs	r3, #1
    a72c:	str	r4, [r2, #4]
    a72e:	rsb	r0, ip, r0
    a732:	mov.w	r8, ip, lsl #16
    a736:	movs	r2, #0
    a738:	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a73a:	movs	r4, #200	; 0xc8
    a73c:	b.n	a3fc <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a73e:	ldr	r4, [pc, #324]	; (a884 <usb_isr+0x9a4>)
		reply_buffer[1] = 0;
		datalen = 2;
    a740:	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a744:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a746:	strb	r2, [r4, #1]
    a748:	b.n	a706 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a74a:	cmp.w	r1, #1280	; 0x500
    a74e:	bne.w	a64a <usb_isr+0x76a>
    a752:	movs	r3, #1
    a754:	movs	r2, #0
    a756:	str	r3, [sp, #4]
    a758:	b.n	a3d6 <usb_isr+0x4f6>
    a75a:	movw	r2, #8993	; 0x2321
    a75e:	cmp	r1, r2
    a760:	beq.n	a752 <usb_isr+0x872>
    a762:	b.n	a64a <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a764:	ldrh	r2, [r5, #2]
    a766:	cmp	r2, #0
    a768:	bne.w	a64a <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    a76c:	ldr	r0, [pc, #216]	; (a848 <usb_isr+0x968>)
    a76e:	str.w	lr, [sp, #4]
    a772:	lsls	r1, r1, #2
    a774:	add	r0, r1
    a776:	ldrb	r1, [r0, #0]
    a778:	bic.w	r1, r1, #2
    a77c:	strb	r1, [r0, #0]
    a77e:	b.n	a3d6 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a780:	bl	9ca0 <usb_malloc>
				if (p) {
    a784:	cmp	r0, #0
    a786:	beq.w	a956 <usb_isr+0xa76>
					table[index(i, RX, EVEN)].addr = p->buf;
    a78a:	adds	r0, #8
    a78c:	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a790:	ldr	r0, [pc, #224]	; (a874 <usb_isr+0x994>)
    a792:	str.w	r0, [r9, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a796:	bl	9ca0 <usb_malloc>
    a79a:	ldr	r2, [pc, #204]	; (a868 <usb_isr+0x988>)
				if (p) {
    a79c:	cmp	r0, #0
    a79e:	beq.w	a94a <usb_isr+0xa6a>
					table[index(i, RX, ODD)].addr = p->buf;
    a7a2:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a7a4:	ldr	r1, [pc, #200]	; (a870 <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a7a6:	str.w	r0, [r2, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a7aa:	str.w	r1, [r2, #136]	; 0x88
    a7ae:	b.n	a620 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a7b0:	bl	9ca0 <usb_malloc>
				if (p) {
    a7b4:	cmp	r0, #0
    a7b6:	beq.w	a930 <usb_isr+0xa50>
					table[index(i, RX, EVEN)].addr = p->buf;
    a7ba:	adds	r0, #8
    a7bc:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a7c0:	ldr	r0, [pc, #176]	; (a874 <usb_isr+0x994>)
    a7c2:	str.w	r0, [r9, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a7c6:	bl	9ca0 <usb_malloc>
    a7ca:	ldr	r2, [pc, #156]	; (a868 <usb_isr+0x988>)
				if (p) {
    a7cc:	cmp	r0, #0
    a7ce:	beq.w	a926 <usb_isr+0xa46>
					table[index(i, RX, ODD)].addr = p->buf;
    a7d2:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a7d4:	ldr	r1, [pc, #152]	; (a870 <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a7d6:	str	r0, [r2, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a7d8:	str	r1, [r2, #72]	; 0x48
    a7da:	b.n	a5ee <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a7dc:	bl	9ca0 <usb_malloc>
				if (p) {
    a7e0:	cmp	r0, #0
    a7e2:	beq.w	a968 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    a7e6:	adds	r0, #8
    a7e8:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a7ec:	ldr	r0, [pc, #132]	; (a874 <usb_isr+0x994>)
    a7ee:	str.w	r0, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a7f2:	bl	9ca0 <usb_malloc>
    a7f6:	ldr	r2, [pc, #112]	; (a868 <usb_isr+0x988>)
				if (p) {
    a7f8:	cmp	r0, #0
    a7fa:	beq.w	a95e <usb_isr+0xa7e>
					table[index(i, RX, ODD)].addr = p->buf;
    a7fe:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a800:	ldr	r1, [pc, #108]	; (a870 <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a802:	str	r0, [r2, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a804:	str	r1, [r2, #40]	; 0x28
    a806:	b.n	a5d2 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a808:	bl	9ca0 <usb_malloc>
				if (p) {
    a80c:	cmp	r0, #0
    a80e:	beq.w	a942 <usb_isr+0xa62>
					table[index(i, RX, EVEN)].addr = p->buf;
    a812:	adds	r0, #8
    a814:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a818:	ldr	r0, [pc, #88]	; (a874 <usb_isr+0x994>)
    a81a:	str.w	r0, [r9, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a81e:	bl	9ca0 <usb_malloc>
    a822:	ldr	r2, [pc, #68]	; (a868 <usb_isr+0x988>)
				if (p) {
    a824:	cmp	r0, #0
    a826:	beq.w	a938 <usb_isr+0xa58>
					table[index(i, RX, ODD)].addr = p->buf;
    a82a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a82c:	ldr	r1, [pc, #64]	; (a870 <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a82e:	str	r0, [r2, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a830:	str	r1, [r2, #104]	; 0x68
    a832:	b.n	a608 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    a834:	ldr	r0, [r1, #60]	; 0x3c
    a836:	subs	r0, #8
    a838:	bl	9ce0 <usb_free>
    a83c:	b.n	a24c <usb_isr+0x36c>
    a83e:	ldr	r0, [r1, #52]	; 0x34
    a840:	subs	r0, #8
    a842:	bl	9ce0 <usb_free>
    a846:	b.n	a240 <usb_isr+0x360>
    a848:	.word	0x400720c0
    a84c:	.word	0x40072080
    a850:	.word	0x00013ed8
    a854:	.word	0x400720c4
    a858:	.word	0x20020495
    a85c:	.word	0x400720c8
    a860:	.word	0x400720cc
    a864:	.word	0x400720d0
    a868:	.word	0x1fff0000
    a86c:	.word	0x40072094
    a870:	.word	0x004000c8
    a874:	.word	0x00400088
    a878:	.word	0x20020429
    a87c:	.word	0x00013edc
    a880:	.word	0x200204a0
    a884:	.word	0x20020498
    a888:	.word	0x20020494
    a88c:	ldr	r0, [r1, #44]	; 0x2c
    a88e:	subs	r0, #8
    a890:	bl	9ce0 <usb_free>
    a894:	b.n	a234 <usb_isr+0x354>
    a896:	ldr	r0, [r4, #36]	; 0x24
    a898:	subs	r0, #8
    a89a:	bl	9ce0 <usb_free>
    a89e:	b.n	a228 <usb_isr+0x348>
    a8a0:	ldr	r0, [r1, #124]	; 0x7c
    a8a2:	subs	r0, #8
    a8a4:	bl	9ce0 <usb_free>
    a8a8:	b.n	a2ac <usb_isr+0x3cc>
    a8aa:	ldr	r0, [r1, #116]	; 0x74
    a8ac:	subs	r0, #8
    a8ae:	bl	9ce0 <usb_free>
    a8b2:	b.n	a2a0 <usb_isr+0x3c0>
    a8b4:	ldr	r0, [r1, #108]	; 0x6c
    a8b6:	subs	r0, #8
    a8b8:	bl	9ce0 <usb_free>
    a8bc:	b.n	a294 <usb_isr+0x3b4>
    a8be:	ldr	r0, [r1, #100]	; 0x64
    a8c0:	subs	r0, #8
    a8c2:	bl	9ce0 <usb_free>
    a8c6:	b.n	a288 <usb_isr+0x3a8>
    a8c8:	ldr	r0, [r1, #92]	; 0x5c
    a8ca:	subs	r0, #8
    a8cc:	bl	9ce0 <usb_free>
    a8d0:	b.n	a27c <usb_isr+0x39c>
    a8d2:	ldr	r0, [r1, #84]	; 0x54
    a8d4:	subs	r0, #8
    a8d6:	bl	9ce0 <usb_free>
    a8da:	b.n	a270 <usb_isr+0x390>
    a8dc:	ldr	r0, [r1, #76]	; 0x4c
    a8de:	subs	r0, #8
    a8e0:	bl	9ce0 <usb_free>
    a8e4:	b.n	a264 <usb_isr+0x384>
    a8e6:	ldr	r0, [r1, #68]	; 0x44
    a8e8:	subs	r0, #8
    a8ea:	bl	9ce0 <usb_free>
    a8ee:	b.n	a258 <usb_isr+0x378>
    a8f0:	ldr.w	r0, [r1, #156]	; 0x9c
    a8f4:	subs	r0, #8
    a8f6:	bl	9ce0 <usb_free>
    a8fa:	b.n	a2dc <usb_isr+0x3fc>
    a8fc:	ldr.w	r0, [r1, #148]	; 0x94
    a900:	subs	r0, #8
    a902:	bl	9ce0 <usb_free>
    a906:	b.n	a2d0 <usb_isr+0x3f0>
    a908:	ldr.w	r0, [r1, #140]	; 0x8c
    a90c:	subs	r0, #8
    a90e:	bl	9ce0 <usb_free>
    a912:	b.n	a2c4 <usb_isr+0x3e4>
    a914:	ldr.w	r0, [r1, #132]	; 0x84
    a918:	subs	r0, #8
    a91a:	bl	9ce0 <usb_free>
    a91e:	b.n	a2b8 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    a920:	mov.w	lr, #2
    a924:	b.n	a706 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a926:	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a928:	str	r0, [r2, #72]	; 0x48
					usb_rx_memory_needed++;
    a92a:	adds	r2, r1, #1
    a92c:	strb	r2, [r5, #0]
    a92e:	b.n	a5ee <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a930:	ldrb	r2, [r5, #0]
    a932:	adds	r2, #1
    a934:	strb	r2, [r5, #0]
    a936:	b.n	a7c2 <usb_isr+0x8e2>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a938:	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a93a:	str	r0, [r2, #104]	; 0x68
					usb_rx_memory_needed++;
    a93c:	adds	r2, r1, #1
    a93e:	strb	r2, [r5, #0]
    a940:	b.n	a608 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a942:	ldrb	r2, [r5, #0]
    a944:	adds	r2, #1
    a946:	strb	r2, [r5, #0]
    a948:	b.n	a81a <usb_isr+0x93a>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a94a:	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a94c:	str.w	r0, [r2, #136]	; 0x88
					usb_rx_memory_needed++;
    a950:	adds	r2, r1, #1
    a952:	strb	r2, [r5, #0]
    a954:	b.n	a620 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a956:	ldrb	r2, [r5, #0]
    a958:	adds	r2, #1
    a95a:	strb	r2, [r5, #0]
    a95c:	b.n	a792 <usb_isr+0x8b2>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a95e:	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a960:	str	r0, [r2, #40]	; 0x28
					usb_rx_memory_needed++;
    a962:	adds	r2, r1, #1
    a964:	strb	r2, [r5, #0]
    a966:	b.n	a5d2 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a968:	ldrb	r2, [r5, #0]
    a96a:	adds	r2, #1
    a96c:	strb	r2, [r5, #0]
    a96e:	b.n	a7ee <usb_isr+0x90e>
    a970:	cmp.w	lr, #64	; 0x40
    a974:	mov	ip, lr
    a976:	it	cs
    a978:	movcs.w	ip, #64	; 0x40
    a97c:	add.w	r3, r4, ip
    a980:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a982:	movs	r3, #1
    a984:	rsb	r0, ip, lr
    a988:	mov.w	r8, ip, lsl #16
    a98c:	movs	r2, #0
    a98e:	str	r3, [sp, #4]
    a990:	b.n	a3e0 <usb_isr+0x500>
    a992:	nop

0000a994 <usb_init>:
}



void usb_init(void)
{
    a994:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    a998:	bl	b18c <usb_init_serialnumber>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a99c:	ldr	r4, [pc, #188]	; (aa5c <usb_init+0xc8>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a99e:	ldr	r3, [pc, #192]	; (aa60 <usb_init+0xcc>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a9a0:	ldr	r0, [pc, #192]	; (aa64 <usb_init+0xd0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    a9a2:	ldr.w	r8, [pc, #216]	; aa7c <usb_init+0xe8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a9a6:	ldr	r7, [pc, #192]	; (aa68 <usb_init+0xd4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a9a8:	ldr	r5, [pc, #192]	; (aa6c <usb_init+0xd8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    a9aa:	ldr	r6, [pc, #196]	; (aa70 <usb_init+0xdc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a9ac:	ldr.w	ip, [pc, #208]	; aa80 <usb_init+0xec>
	USB0_ERRSTAT = 0xFF;
    a9b0:	ldr.w	lr, [pc, #208]	; aa84 <usb_init+0xf0>
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9b4:	movs	r2, #0
    a9b6:	str	r2, [r3, #0]
		table[i].addr = 0;
    a9b8:	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9ba:	str	r2, [r3, #8]
		table[i].addr = 0;
    a9bc:	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9be:	str	r2, [r3, #16]
		table[i].addr = 0;
    a9c0:	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9c2:	str	r2, [r3, #24]
		table[i].addr = 0;
    a9c4:	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9c6:	str	r2, [r3, #32]
		table[i].addr = 0;
    a9c8:	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9ca:	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    a9cc:	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9ce:	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    a9d0:	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9d2:	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    a9d4:	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9d6:	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    a9d8:	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9da:	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    a9dc:	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9de:	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    a9e0:	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9e2:	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    a9e4:	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9e6:	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    a9e8:	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9ea:	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    a9ec:	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9ee:	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    a9f0:	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9f2:	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    a9f4:	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a9f6:	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a9fa:	ldr	r1, [r4, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    a9fc:	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    aa00:	orr.w	r1, r1, #262144	; 0x40000
    aa04:	str	r1, [r4, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    aa06:	ldr	r1, [r0, #0]
    aa08:	orr.w	r1, r1, #50331648	; 0x3000000
    aa0c:	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    aa0e:	ubfx	r1, r3, #8, #8
    aa12:	strb.w	r1, [r8]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    aa16:	add.w	r4, r4, #172032	; 0x2a000
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    aa1a:	ubfx	r1, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    aa1e:	lsrs	r3, r3, #24
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    aa20:	strb	r1, [r7, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    aa22:	adds	r4, #204	; 0xcc
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    aa24:	strb	r3, [r5, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    aa26:	add.w	r0, r0, #2684354560	; 0xa0000000
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    aa2a:	movs	r3, #255	; 0xff
    aa2c:	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    aa30:	ldr	r5, [pc, #64]	; (aa74 <usb_init+0xe0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    aa32:	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    aa36:	addw	r0, r0, #2308	; 0x904
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    aa3a:	strb	r3, [r6, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    aa3c:	ldr	r1, [pc, #56]	; (aa78 <usb_init+0xe4>)
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    aa3e:	movs	r3, #1
    aa40:	strb.w	r3, [r8, #-8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    aa44:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    aa46:	strb	r2, [r4, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    aa48:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    aa4c:	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    aa4e:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    aa52:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    aa54:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    aa56:	strb	r2, [r1, #0]
    aa58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa5c:	.word	0x40048034
    aa60:	.word	0x1fff0000
    aa64:	.word	0x4000d800
    aa68:	.word	0x400720b0
    aa6c:	.word	0x400720b4
    aa70:	.word	0x40072010
    aa74:	.word	0xe000e435
    aa78:	.word	0x40072108
    aa7c:	.word	0x4007209c
    aa80:	.word	0x40072080
    aa84:	.word	0x40072088

0000aa88 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    aa88:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    aa8a:	mrs	r2, PRIMASK
		__disable_irq();
    aa8e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    aa90:	ldrb	r3, [r0, #29]
    aa92:	cbnz	r3, aaa2 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    aa94:	ldrb	r1, [r0, #28]
    aa96:	cmp	r1, #1
    aa98:	beq.n	aaac <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    aa9a:	cmp	r1, #3
    aa9c:	beq.n	aac0 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    aa9e:	movs	r3, #1
    aaa0:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    aaa2:	cbnz	r2, aaa6 <EventResponder::triggerEventNotImmediate()+0x1e>
    aaa4:	cpsie	i
	}
	enableInterrupts(irq);
}
    aaa6:	ldr.w	r4, [sp], #4
    aaaa:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    aaac:	ldr	r4, [pc, #68]	; (aaf4 <EventResponder::triggerEventNotImmediate()+0x6c>)
    aaae:	ldr	r1, [r4, #0]
    aab0:	cbz	r1, aadc <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    aab2:	ldr	r1, [pc, #68]	; (aaf8 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    aab4:	str	r3, [r0, #20]
				_prev = lastYield;
    aab6:	ldr	r3, [r1, #0]
    aab8:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    aaba:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    aabc:	str	r0, [r3, #20]
    aabe:	b.n	aa9e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    aac0:	ldr	r4, [pc, #56]	; (aafc <EventResponder::triggerEventNotImmediate()+0x74>)
    aac2:	ldr	r1, [r4, #0]
    aac4:	cbz	r1, aae8 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    aac6:	ldr	r1, [pc, #56]	; (ab00 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    aac8:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    aaca:	ldr	r3, [r1, #0]
    aacc:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    aace:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    aad0:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    aad2:	ldr	r3, [pc, #48]	; (ab04 <EventResponder::triggerEventNotImmediate()+0x7c>)
    aad4:	mov.w	r1, #268435456	; 0x10000000
    aad8:	str	r1, [r3, #0]
    aada:	b.n	aa9e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    aadc:	ldr	r3, [pc, #24]	; (aaf8 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    aade:	str	r1, [r0, #20]
				_prev = nullptr;
    aae0:	str	r1, [r0, #24]
				firstYield = this;
    aae2:	str	r0, [r4, #0]
				lastYield = this;
    aae4:	str	r0, [r3, #0]
    aae6:	b.n	aa9e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    aae8:	ldr	r3, [pc, #20]	; (ab00 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    aaea:	str	r1, [r0, #20]
				_prev = nullptr;
    aaec:	str	r1, [r0, #24]
				firstInterrupt = this;
    aaee:	str	r0, [r4, #0]
				lastInterrupt = this;
    aaf0:	str	r0, [r3, #0]
    aaf2:	b.n	aad2 <EventResponder::triggerEventNotImmediate()+0x4a>
    aaf4:	.word	0x200204b8
    aaf8:	.word	0x200204b4
    aafc:	.word	0x200204a8
    ab00:	.word	0x200204ac
    ab04:	.word	0xe000ed04

0000ab08 <pendablesrvreq_isr>:
	}
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
    ab08:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ab0a:	mrs	r2, PRIMASK
		__disable_irq();
    ab0e:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    ab10:	ldr	r4, [pc, #48]	; (ab44 <pendablesrvreq_isr+0x3c>)
    ab12:	ldr	r0, [r4, #0]
		if (first) {
    ab14:	cbz	r0, ab38 <pendablesrvreq_isr+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    ab16:	ldr	r6, [pc, #48]	; (ab48 <pendablesrvreq_isr+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    ab18:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    ab1a:	ldr	r3, [r0, #20]
    ab1c:	str	r3, [r4, #0]
			if (firstInterrupt) {
    ab1e:	cbz	r3, ab3e <pendablesrvreq_isr+0x36>
				firstInterrupt->_prev = nullptr;
    ab20:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ab22:	cbnz	r2, ab26 <pendablesrvreq_isr+0x1e>
    ab24:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    ab26:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    ab28:	ldr	r3, [r0, #8]
    ab2a:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ab2c:	mrs	r2, PRIMASK
		__disable_irq();
    ab30:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    ab32:	ldr	r0, [r4, #0]
		if (first) {
    ab34:	cmp	r0, #0
    ab36:	bne.n	ab1a <pendablesrvreq_isr+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ab38:	cbnz	r2, ab3c <pendablesrvreq_isr+0x34>
    ab3a:	cpsie	i
    ab3c:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    ab3e:	str	r3, [r6, #0]
    ab40:	b.n	ab22 <pendablesrvreq_isr+0x1a>
    ab42:	nop
    ab44:	.word	0x200204a8
    ab48:	.word	0x200204ac

0000ab4c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    ab4c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	MillisTimer *timer = listActive;
    ab50:	ldr	r6, [pc, #484]	; (ad38 <MillisTimer::runFromTimer()+0x1ec>)
    ab52:	ldr	r4, [r6, #0]
	while (timer) {
    ab54:	cmp	r4, #0
    ab56:	beq.n	abbc <MillisTimer::runFromTimer()+0x70>
		if (timer->_ms > 0) {
    ab58:	ldr	r3, [r4, #0]
    ab5a:	cmp	r3, #0
    ab5c:	bne.n	abb8 <MillisTimer::runFromTimer()+0x6c>
    ab5e:	ldr.w	r9, [pc, #492]	; ad4c <MillisTimer::runFromTimer()+0x200>
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    ab62:	ldr	r7, [pc, #472]	; (ad3c <MillisTimer::runFromTimer()+0x1f0>)
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    ab64:	ldr.w	r8, [pc, #488]	; ad50 <MillisTimer::runFromTimer()+0x204>
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    ab68:	mov	r5, r3
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    ab6a:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    ab6c:	cbz	r3, ab70 <MillisTimer::runFromTimer()+0x24>
    ab6e:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    ab70:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    ab72:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    ab74:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    ab76:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    ab78:	ldr	r3, [r3, #0]
    ab7a:	cmp	r3, r9
    ab7c:	bne.n	ac54 <MillisTimer::runFromTimer()+0x108>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    ab7e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    ab80:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    ab82:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    ab84:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    ab86:	beq.n	ac5c <MillisTimer::runFromTimer()+0x110>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ab88:	mrs	r2, PRIMASK
		__disable_irq();
    ab8c:	cpsid	i
// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    ab8e:	ldrb	r3, [r0, #29]
    ab90:	cbnz	r3, aba4 <MillisTimer::runFromTimer()+0x58>
		// not already triggered
		if (_type == EventTypeYield) {
    ab92:	ldrb	r1, [r0, #28]
    ab94:	cmp	r1, #1
    ab96:	beq.w	acba <MillisTimer::runFromTimer()+0x16e>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    ab9a:	cmp	r1, #3
    ab9c:	beq.w	acd2 <MillisTimer::runFromTimer()+0x186>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    aba0:	movs	r3, #1
    aba2:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    aba4:	cbnz	r2, aba8 <MillisTimer::runFromTimer()+0x5c>
    aba6:	cpsie	i
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
			if (timer->_reload) {
    aba8:	ldr	r3, [r4, #4]
    abaa:	cmp	r3, #0
    abac:	bne.n	ac2e <MillisTimer::runFromTimer()+0xe2>
    abae:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    abb0:	cbz	r4, abbc <MillisTimer::runFromTimer()+0x70>
		if (timer->_ms > 0) {
    abb2:	ldr	r3, [r4, #0]
    abb4:	cmp	r3, #0
    abb6:	beq.n	ab6a <MillisTimer::runFromTimer()+0x1e>
			timer->_ms--;
    abb8:	subs	r3, #1
    abba:	str	r3, [r4, #0]
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    abbc:	mrs	r3, PRIMASK
		__disable_irq();
    abc0:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    abc2:	ldr	r2, [pc, #380]	; (ad40 <MillisTimer::runFromTimer()+0x1f4>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    abc4:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    abc6:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    abc8:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    abca:	cbnz	r3, abce <MillisTimer::runFromTimer()+0x82>
    abcc:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    abce:	cmp	r0, #0
    abd0:	beq.w	ad2e <MillisTimer::runFromTimer()+0x1e2>
    abd4:	mov.w	r8, #0
    abd8:	ldr	r5, [r6, #0]
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    abda:	mov	ip, r8
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    abdc:	mov.w	lr, #2
    abe0:	b.n	ac00 <MillisTimer::runFromTimer()+0xb4>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    abe2:	subs	r3, r1, r3
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    abe4:	str	r5, [r0, #8]
		_prev = nullptr;
    abe6:	str.w	ip, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    abea:	mov	r1, r0
    abec:	str	r3, [r5, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    abee:	str	r0, [r5, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    abf0:	mov.w	r8, #1
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    abf4:	strb.w	lr, [r0, #20]
    abf8:	mov	r5, r1
    abfa:	mov	r0, r7
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    abfc:	cmp	r7, #0
    abfe:	beq.n	aca4 <MillisTimer::runFromTimer()+0x158>
		MillisTimer *next = waiting->_next;
    ac00:	ldr	r7, [r0, #8]
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    ac02:	cmp	r5, #0
    ac04:	beq.n	acae <MillisTimer::runFromTimer()+0x162>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    ac06:	ldr	r3, [r0, #0]
    ac08:	ldr	r1, [r5, #0]
    ac0a:	cmp	r3, r1
    ac0c:	bcc.n	abe2 <MillisTimer::runFromTimer()+0x96>
    ac0e:	mov	r4, r5
    ac10:	b.n	ac1a <MillisTimer::runFromTimer()+0xce>
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    ac12:	ldr	r1, [r2, #0]
    ac14:	cmp	r3, r1
    ac16:	mov	r4, r2
    ac18:	bcc.n	ac86 <MillisTimer::runFromTimer()+0x13a>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    ac1a:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    ac1c:	subs	r3, r3, r1
    ac1e:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    ac20:	cmp	r2, #0
    ac22:	bne.n	ac12 <MillisTimer::runFromTimer()+0xc6>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    ac24:	str	r2, [r0, #8]
		_prev = timer;
    ac26:	str	r4, [r0, #12]
		timer->_next = this;
    ac28:	mov	r1, r5
    ac2a:	str	r0, [r4, #8]
    ac2c:	b.n	abf4 <MillisTimer::runFromTimer()+0xa8>
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    ac2e:	ldr	r0, [r6, #0]
    ac30:	ldr	r2, [pc, #260]	; (ad38 <MillisTimer::runFromTimer()+0x1ec>)
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
    ac32:	str	r3, [r4, #0]
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    ac34:	cmp	r0, #0
    ac36:	beq.n	ad0a <MillisTimer::runFromTimer()+0x1be>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    ac38:	ldr	r1, [r0, #0]
    ac3a:	cmp	r3, r1
    ac3c:	bcs.n	ac62 <MillisTimer::runFromTimer()+0x116>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    ac3e:	subs	r3, r1, r3
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    ac40:	str	r0, [r4, #8]
		_prev = nullptr;
    ac42:	str	r5, [r4, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    ac44:	str	r3, [r0, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    ac46:	str	r4, [r0, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    ac48:	str	r4, [r2, #0]
    ac4a:	mov	r0, r4
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    ac4c:	movs	r3, #2
    ac4e:	strb	r3, [r4, #20]
    ac50:	mov	r4, r0
    ac52:	b.n	abb2 <MillisTimer::runFromTimer()+0x66>
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    ac54:	mov	r2, r4
    ac56:	movs	r1, #0
    ac58:	blx	r3
    ac5a:	b.n	aba8 <MillisTimer::runFromTimer()+0x5c>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    ac5c:	ldr	r3, [r0, #8]
    ac5e:	blx	r3
    ac60:	b.n	aba8 <MillisTimer::runFromTimer()+0x5c>
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    ac62:	mov	lr, r0
    ac64:	b.n	ac6e <MillisTimer::runFromTimer()+0x122>
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    ac66:	ldr	r1, [r2, #0]
    ac68:	cmp	r3, r1
    ac6a:	mov	lr, r2
    ac6c:	bcc.n	acec <MillisTimer::runFromTimer()+0x1a0>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    ac6e:	ldr.w	r2, [lr, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    ac72:	subs	r3, r3, r1
    ac74:	str	r3, [r4, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    ac76:	cmp	r2, #0
    ac78:	bne.n	ac66 <MillisTimer::runFromTimer()+0x11a>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    ac7a:	str	r2, [r4, #8]
		_prev = timer;
    ac7c:	str.w	lr, [r4, #12]
		timer->_next = this;
    ac80:	str.w	r4, [lr, #8]
    ac84:	b.n	ac4c <MillisTimer::runFromTimer()+0x100>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    ac86:	ldr	r2, [r2, #12]
    ac88:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    ac8a:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    ac8c:	str	r0, [r4, #12]
				_prev->_next = this;
    ac8e:	ldr	r2, [r0, #12]
				timer->_ms -= _ms;
    ac90:	subs	r3, r1, r3
				_state = TimerActive;
    ac92:	mov	r1, r5
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    ac94:	str	r0, [r2, #8]
    ac96:	mov	r5, r1
				timer->_ms -= _ms;
    ac98:	str	r3, [r4, #0]
				_state = TimerActive;
    ac9a:	strb.w	lr, [r0, #20]
    ac9e:	mov	r0, r7
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    aca0:	cmp	r7, #0
    aca2:	bne.n	ac00 <MillisTimer::runFromTimer()+0xb4>
    aca4:	cmp.w	r8, #0
    aca8:	bne.n	ad32 <MillisTimer::runFromTimer()+0x1e6>
    acaa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    acae:	str	r5, [r0, #8]
		_prev = nullptr;
    acb0:	str	r5, [r0, #12]
    acb2:	mov	r1, r0
    acb4:	mov.w	r8, #1
    acb8:	b.n	abf4 <MillisTimer::runFromTimer()+0xa8>
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    acba:	ldr.w	lr, [pc, #152]	; ad54 <MillisTimer::runFromTimer()+0x208>
    acbe:	ldr.w	r1, [lr]
    acc2:	cbz	r1, ad14 <MillisTimer::runFromTimer()+0x1c8>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    acc4:	ldr	r1, [pc, #124]	; (ad44 <MillisTimer::runFromTimer()+0x1f8>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    acc6:	str	r3, [r0, #20]
				_prev = lastYield;
    acc8:	ldr	r3, [r1, #0]
    acca:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    accc:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    acce:	str	r0, [r3, #20]
    acd0:	b.n	aba0 <MillisTimer::runFromTimer()+0x54>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    acd2:	ldr	r1, [r7, #0]
    acd4:	cbz	r1, ad22 <MillisTimer::runFromTimer()+0x1d6>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    acd6:	ldr	r1, [pc, #112]	; (ad48 <MillisTimer::runFromTimer()+0x1fc>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    acd8:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    acda:	ldr	r3, [r1, #0]
    acdc:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    acde:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    ace0:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    ace2:	mov.w	r3, #268435456	; 0x10000000
    ace6:	str.w	r3, [r8]
    acea:	b.n	aba0 <MillisTimer::runFromTimer()+0x54>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    acec:	ldr	r2, [r2, #12]
    acee:	str	r2, [r4, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    acf0:	str.w	lr, [r4, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    acf4:	str.w	r4, [lr, #12]
				_prev->_next = this;
    acf8:	ldr	r2, [r4, #12]
				timer->_ms -= _ms;
    acfa:	subs	r3, r1, r3
				_state = TimerActive;
    acfc:	movs	r1, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    acfe:	str	r4, [r2, #8]
				timer->_ms -= _ms;
    ad00:	str.w	r3, [lr]
				_state = TimerActive;
    ad04:	strb	r1, [r4, #20]
    ad06:	mov	r4, r0
    ad08:	b.n	abb2 <MillisTimer::runFromTimer()+0x66>

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    ad0a:	str	r0, [r4, #8]
		_prev = nullptr;
    ad0c:	str	r0, [r4, #12]
		listActive = this;
    ad0e:	str	r4, [r2, #0]
    ad10:	mov	r0, r4
    ad12:	b.n	ac4c <MillisTimer::runFromTimer()+0x100>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    ad14:	ldr	r3, [pc, #44]	; (ad44 <MillisTimer::runFromTimer()+0x1f8>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    ad16:	str	r1, [r0, #20]
				_prev = nullptr;
    ad18:	str	r1, [r0, #24]
				firstYield = this;
    ad1a:	str.w	r0, [lr]
				lastYield = this;
    ad1e:	str	r0, [r3, #0]
    ad20:	b.n	aba0 <MillisTimer::runFromTimer()+0x54>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    ad22:	ldr	r3, [pc, #36]	; (ad48 <MillisTimer::runFromTimer()+0x1fc>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    ad24:	str	r1, [r0, #20]
				_prev = nullptr;
    ad26:	str	r1, [r0, #24]
				firstInterrupt = this;
    ad28:	str	r0, [r7, #0]
				lastInterrupt = this;
    ad2a:	str	r0, [r3, #0]
    ad2c:	b.n	ace2 <MillisTimer::runFromTimer()+0x196>
    ad2e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ad32:	str	r1, [r6, #0]
    ad34:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ad38:	.word	0x200204b0
    ad3c:	.word	0x200204a8
    ad40:	.word	0x200204bc
    ad44:	.word	0x200204b4
    ad48:	.word	0x200204ac
    ad4c:	.word	0x00002aa9
    ad50:	.word	0xe000ed04
    ad54:	.word	0x200204b8

0000ad58 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    ad58:	ldr	r2, [pc, #8]	; (ad64 <systick_isr+0xc>)
    ad5a:	ldr	r3, [r2, #0]
    ad5c:	adds	r3, #1
    ad5e:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    ad60:	b.w	ab4c <MillisTimer::runFromTimer()>
    ad64:	.word	0x200203bc

0000ad68 <usb_serial_class::clear()>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    ad68:	b.w	94ec <usb_serial_flush_input>

0000ad6c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    ad6c:	b.w	94a0 <usb_serial_peekchar>

0000ad70 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    ad70:	b.w	9458 <usb_serial_getchar>

0000ad74 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    ad74:	b.w	94d0 <usb_serial_available>

0000ad78 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    ad78:	b.w	972c <usb_serial_flush_output>

0000ad7c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    ad7c:	b.w	96e4 <usb_serial_write_buffer_free>

0000ad80 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ad80:	mov	r0, r1
    ad82:	mov	r1, r2
    ad84:	b.w	9524 <usb_serial_write>

0000ad88 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ad88:	mov	r0, r1
    ad8a:	b.w	96cc <usb_serial_putchar>
    ad8e:	nop

0000ad90 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    ad90:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    ad92:	mov	r6, r1
    ad94:	cbz	r1, adb4 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    ad96:	cbz	r2, adb8 <Print::write(unsigned char const*, unsigned int)+0x28>
    ad98:	mov	r7, r0
    ad9a:	mov	r4, r2
    ad9c:	movs	r5, #0
    ad9e:	ldr	r3, [r7, #0]
    ada0:	ldrb.w	r1, [r6], #1
    ada4:	ldr	r3, [r3, #0]
    ada6:	mov	r0, r7
    ada8:	blx	r3
    adaa:	subs	r4, #1
    adac:	add	r5, r0
    adae:	bne.n	ad9e <Print::write(unsigned char const*, unsigned int)+0xe>
    adb0:	mov	r0, r5
    adb2:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    adb4:	mov	r0, r1
    adb6:	pop	{r3, r4, r5, r6, r7, pc}
    adb8:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    adba:	pop	{r3, r4, r5, r6, r7, pc}

0000adbc <Print::print(long)>:
	return count;
}


size_t Print::print(long n)
{
    adbc:	push	{r4, r5, r6, lr}
	uint8_t sign=0;

	if (n < 0) {
    adbe:	cmp	r1, #0
	return count;
}


size_t Print::print(long n)
{
    adc0:	sub	sp, #40	; 0x28
	uint8_t sign=0;

	if (n < 0) {
    adc2:	blt.n	adde <Print::print(long)+0x22>
	} else if (base == 1) {
		base = 10;
	}


	if (n == 0) {
    adc4:	bne.n	ae38 <Print::print(long)+0x7c>
		buf[sizeof(buf) - 1] = '0';
    adc6:	movs	r3, #48	; 0x30
    adc8:	strb.w	r3, [sp, #37]	; 0x25
    adcc:	movs	r2, #1
    adce:	movs	r1, #33	; 0x21
	}
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
    add0:	ldr	r3, [r0, #0]
    add2:	add	r4, sp, #4
    add4:	ldr	r3, [r3, #4]
    add6:	add	r1, r4
    add8:	blx	r3
	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
}
    adda:	add	sp, #40	; 0x28
    addc:	pop	{r4, r5, r6, pc}
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    adde:	ldr	r3, [pc, #136]	; (ae68 <Print::print(long)+0xac>)

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    ade0:	negs	r1, r1
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ade2:	umull	r2, r3, r3, r1
    ade6:	lsrs	r3, r3, #3
    ade8:	add.w	r2, r3, r3, lsl #2
    adec:	sub.w	r1, r1, r2, lsl #1
    adf0:	adds	r1, #48	; 0x30
    adf2:	strb.w	r1, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
    adf6:	cbz	r3, ae5a <Print::print(long)+0x9e>
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    adf8:	movs	r6, #45	; 0x2d
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    adfa:	ldr	r5, [pc, #108]	; (ae68 <Print::print(long)+0xac>)
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    adfc:	movs	r2, #33	; 0x21
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    adfe:	umull	r4, r1, r5, r3
    ae02:	lsrs	r1, r1, #3
    ae04:	add.w	r4, r1, r1, lsl #2
			n /= base;
			if (n == 0) break;
			i--;
    ae08:	subs	r2, #1
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ae0a:	sub.w	r3, r3, r4, lsl #1
			n /= base;
			if (n == 0) break;
			i--;
    ae0e:	uxtb	r2, r2
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ae10:	add	r4, sp, #40	; 0x28
    ae12:	add	r4, r2
    ae14:	adds	r3, #48	; 0x30
    ae16:	strb.w	r3, [r4, #-36]
			n /= base;
			if (n == 0) break;
    ae1a:	mov	r3, r1
    ae1c:	cmp	r1, #0
    ae1e:	bne.n	adfe <Print::print(long)+0x42>
			i--;
		}
	}
	if (sign) {
    ae20:	cbz	r6, ae5e <Print::print(long)+0xa2>
		i--;
    ae22:	subs	r2, #1
    ae24:	uxtb	r2, r2
		buf[i] = '-';
    ae26:	add	r3, sp, #40	; 0x28
    ae28:	add	r3, r2
    ae2a:	mov	r1, r2
    ae2c:	movs	r2, #45	; 0x2d
    ae2e:	strb.w	r2, [r3, #-36]
    ae32:	rsb	r2, r1, #34	; 0x22
    ae36:	b.n	add0 <Print::print(long)+0x14>
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ae38:	ldr	r3, [pc, #44]	; (ae68 <Print::print(long)+0xac>)
    ae3a:	umull	r2, r3, r3, r1
    ae3e:	lsrs	r3, r3, #3
    ae40:	add.w	r2, r3, r3, lsl #2
    ae44:	sub.w	r1, r1, r2, lsl #1
    ae48:	adds	r1, #48	; 0x30
    ae4a:	strb.w	r1, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
    ae4e:	cbz	r3, ae54 <Print::print(long)+0x98>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    ae50:	movs	r6, #0
    ae52:	b.n	adfa <Print::print(long)+0x3e>
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    ae54:	movs	r2, #1
    ae56:	movs	r1, #33	; 0x21
    ae58:	b.n	add0 <Print::print(long)+0x14>
    ae5a:	movs	r2, #33	; 0x21
    ae5c:	b.n	ae22 <Print::print(long)+0x66>
    ae5e:	mov	r1, r2
    ae60:	rsb	r2, r2, #34	; 0x22
    ae64:	b.n	add0 <Print::print(long)+0x14>
    ae66:	nop
    ae68:	.word	0xcccccccd

0000ae6c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    ae6c:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    ae6e:	ldr	r2, [pc, #24]	; (ae88 <Print::println()+0x1c>)
	return write(buf, 2);
    ae70:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    ae72:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    ae74:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    ae76:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    ae78:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    ae7a:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    ae7e:	movs	r2, #2
    ae80:	blx	r3
}
    ae82:	add	sp, #12
    ae84:	ldr.w	pc, [sp], #4
    ae88:	.word	0x00013ed4

0000ae8c <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    ae8c:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    ae8e:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    ae90:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    ae92:	ldr	r3, [r3, #4]
    ae94:	blx	r3
	return len;
}
    ae96:	mov	r0, r4
    ae98:	pop	{r4, pc}
    ae9a:	nop

0000ae9c <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    ae9c:	push	{r1, r2, r3}
    ae9e:	push	{lr}
    aea0:	sub	sp, #8
    aea2:	add	r2, sp, #12
    aea4:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    aea8:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    aeaa:	bl	108c8 <vdprintf>
#endif
}
    aeae:	add	sp, #8
    aeb0:	ldr.w	lr, [sp], #4
    aeb4:	add	sp, #12
    aeb6:	bx	lr

0000aeb8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    aeb8:	push	{r4, r5, r6, r7, lr}
    aeba:	mov	r7, r0
    aebc:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    aebe:	cmp	r2, #0
    aec0:	beq.n	af2a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    aec2:	cmp	r2, #1
    aec4:	it	eq
    aec6:	moveq	r2, #10
	}


	if (n == 0) {
    aec8:	cbz	r1, af20 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    aeca:	movs	r4, #33	; 0x21
    aecc:	b.n	aed0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    aece:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    aed0:	udiv	r5, r1, r2
    aed4:	mls	r1, r2, r5, r1
    aed8:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    aeda:	cmp	r1, #9
    aedc:	add.w	r1, r0, #48	; 0x30
    aee0:	it	ls
    aee2:	uxtbls	r0, r1
    aee4:	add	r1, sp, #40	; 0x28
    aee6:	it	hi
    aee8:	addhi	r0, #55	; 0x37
    aeea:	add	r1, r4
    aeec:	it	hi
    aeee:	uxtbhi	r0, r0
    aef0:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    aef4:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    aef6:	mov	r1, r5
    aef8:	cmp	r5, #0
    aefa:	bne.n	aece <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    aefc:	cbz	r3, af0c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    aefe:	subs	r4, #1
    af00:	uxtb	r4, r4
		buf[i] = '-';
    af02:	add	r3, sp, #40	; 0x28
    af04:	add	r3, r4
    af06:	movs	r2, #45	; 0x2d
    af08:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    af0c:	ldr	r3, [r7, #0]
    af0e:	add	r2, sp, #4
    af10:	adds	r1, r2, r4
    af12:	ldr	r3, [r3, #4]
    af14:	mov	r0, r7
    af16:	rsb	r2, r4, #34	; 0x22
    af1a:	blx	r3
}
    af1c:	add	sp, #44	; 0x2c
    af1e:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    af20:	movs	r2, #48	; 0x30
    af22:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    af26:	movs	r4, #33	; 0x21
    af28:	b.n	aefc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    af2a:	ldr	r3, [r0, #0]
    af2c:	uxtb	r1, r1
    af2e:	ldr	r3, [r3, #0]
    af30:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    af32:	add	sp, #44	; 0x2c
    af34:	pop	{r4, r5, r6, r7, pc}
    af36:	nop

0000af38 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    af38:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    af3a:	bl	2170 <setup>
	while (1) {
		loop();
    af3e:	bl	2644 <loop>
		yield();
    af42:	bl	1708 <yield>
    af46:	b.n	af3e <main+0x6>

0000af48 <software_isr>:

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    af48:	ldr	r1, [pc, #104]	; (afb4 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    af4a:	ldr	r2, [pc, #108]	; (afb8 <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    af4c:	ldr	r0, [pc, #108]	; (afbc <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    af4e:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    af50:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    af52:	ldr	r5, [pc, #108]	; (afc0 <software_isr+0x78>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    af54:	ldr	r4, [r0, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    af56:	orr.w	r3, r3, #16777216	; 0x1000000
    af5a:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    af5c:	ldr	r3, [r2, #0]
    af5e:	orr.w	r3, r3, #1
    af62:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    af64:	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    af66:	cbnz	r4, af6e <software_isr+0x26>
    af68:	b.n	af96 <software_isr+0x4e>
    af6a:	ldr	r4, [r4, #20]
    af6c:	cbz	r4, af96 <software_isr+0x4e>
		if (p->active) {
    af6e:	ldrb	r3, [r4, #8]
    af70:	cmp	r3, #0
    af72:	beq.n	af6a <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    af74:	ldr	r3, [r4, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    af76:	ldr	r7, [r5, #0]
			p->update();
    af78:	ldr	r3, [r3, #0]
    af7a:	mov	r0, r4
    af7c:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    af7e:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    af80:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    af82:	subs	r3, r3, r7
    af84:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    af86:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    af88:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    af8a:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    af8c:	it	hi
    af8e:	strhhi	r2, [r4, #6]

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    af90:	ldr	r4, [r4, #20]
    af92:	cmp	r4, #0
    af94:	bne.n	af6e <software_isr+0x26>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    af96:	ldr	r3, [pc, #40]	; (afc0 <software_isr+0x78>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    af98:	ldr	r2, [pc, #40]	; (afc4 <software_isr+0x7c>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    af9a:	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    af9c:	ldrh	r0, [r2, #0]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    af9e:	ldr	r4, [pc, #40]	; (afc8 <software_isr+0x80>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    afa0:	subs	r3, r3, r6
    afa2:	lsrs	r3, r3, #4
	AudioStream::cpu_cycles_total = totalcycles;
    afa4:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    afa6:	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    afa8:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    afaa:	bls.n	afb0 <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    afac:	strh	r1, [r2, #0]
    afae:	pop	{r3, r4, r5, r6, r7, pc}
    afb0:	pop	{r3, r4, r5, r6, r7, pc}
    afb2:	nop
    afb4:	.word	0xe000edfc
    afb8:	.word	0xe0001000
    afbc:	.word	0x200204c0
    afc0:	.word	0xe0001004
    afc4:	.word	0x200204c4
    afc8:	.word	0x200204c6

0000afcc <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    afcc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    afd0:	ldr	r5, [pc, #200]	; (b09c <Stream::parseInt(char)+0xd0>)
    afd2:	sub	sp, #20
    afd4:	mov	r4, r0
    afd6:	mov	r7, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    afd8:	ldr	r3, [r5, #0]
    afda:	str	r3, [sp, #4]
	return ret;
    afdc:	ldr	r6, [sp, #4]
    afde:	b.n	aff2 <Stream::parseInt(char)+0x26>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    afe0:	bl	1708 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    afe4:	ldr	r3, [r5, #0]
    afe6:	str	r3, [sp, #0]
	return ret;
    afe8:	ldr	r3, [sp, #0]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    afea:	ldr	r2, [r4, #8]
    afec:	subs	r3, r3, r6
    afee:	cmp	r3, r2
    aff0:	bcs.n	b014 <Stream::parseInt(char)+0x48>
    c = peek();
    aff2:	ldr	r3, [r4, #0]
    aff4:	mov	r0, r4
    aff6:	ldr	r3, [r3, #24]
    aff8:	blx	r3
    if (c >= 0) return c;
    affa:	cmp	r0, #0
    affc:	blt.n	afe0 <Stream::parseInt(char)+0x14>
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    affe:	cmp	r0, #45	; 0x2d
    b000:	beq.n	b01c <Stream::parseInt(char)+0x50>
    if (c >= '0' && c <= '9') return c;
    b002:	sub.w	r3, r0, #48	; 0x30
    b006:	cmp	r3, #9
    b008:	bls.n	b01c <Stream::parseInt(char)+0x50>
    read();  // discard non-numeric
    b00a:	ldr	r3, [r4, #0]
    b00c:	mov	r0, r4
    b00e:	ldr	r3, [r3, #20]
    b010:	blx	r3
    b012:	b.n	afd8 <Stream::parseInt(char)+0xc>
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    b014:	movs	r0, #0
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    b016:	add	sp, #20
    b018:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b01c:	mov.w	r8, #0
    b020:	mov	r9, r8
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    b022:	cmp	r0, r7
    b024:	beq.n	b03e <Stream::parseInt(char)+0x72>
      ; // ignore this charactor
    else if(c == '-')
    b026:	cmp	r0, #45	; 0x2d
    b028:	beq.n	b07c <Stream::parseInt(char)+0xb0>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    b02a:	sub.w	r3, r0, #48	; 0x30
    b02e:	cmp	r3, #9
    b030:	bhi.n	b03e <Stream::parseInt(char)+0x72>
      value = value * 10 + c - '0';
    b032:	add.w	r8, r8, r8, lsl #2
    b036:	add.w	r8, r0, r8, lsl #1
    b03a:	sub.w	r8, r8, #48	; 0x30
    read();  // consume the character we got with peek
    b03e:	ldr	r3, [r4, #0]
    b040:	mov	r0, r4
    b042:	ldr	r3, [r3, #20]
    b044:	blx	r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b046:	ldr	r3, [r5, #0]
    b048:	str	r3, [sp, #12]
	return ret;
    b04a:	ldr	r6, [sp, #12]
    b04c:	b.n	b060 <Stream::parseInt(char)+0x94>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    b04e:	bl	1708 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b052:	ldr	r3, [r5, #0]
    b054:	str	r3, [sp, #8]
	return ret;
    b056:	ldr	r3, [sp, #8]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    b058:	ldr	r2, [r4, #8]
    b05a:	subs	r3, r3, r6
    b05c:	cmp	r3, r2
    b05e:	bcs.n	b082 <Stream::parseInt(char)+0xb6>
    c = peek();
    b060:	ldr	r3, [r4, #0]
    b062:	mov	r0, r4
    b064:	ldr	r3, [r3, #24]
    b066:	blx	r3
    if (c >= 0) return c;
    b068:	cmp	r0, #0
    b06a:	blt.n	b04e <Stream::parseInt(char)+0x82>
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    b06c:	sub.w	r3, r0, #48	; 0x30
    b070:	cmp	r3, #9
    b072:	bls.n	b022 <Stream::parseInt(char)+0x56>
    b074:	cmp	r0, r7
    b076:	bne.n	b082 <Stream::parseInt(char)+0xb6>
    b078:	mov	r0, r7
    b07a:	b.n	b022 <Stream::parseInt(char)+0x56>

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    b07c:	mov.w	r9, #1
    b080:	b.n	b03e <Stream::parseInt(char)+0x72>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    b082:	cmp.w	r9, #0
    b086:	beq.n	b092 <Stream::parseInt(char)+0xc6>
    value = -value;
    b088:	rsb	r0, r8, #0
  return value;
}
    b08c:	add	sp, #20
    b08e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b092:	mov	r0, r8
    b094:	add	sp, #20
    b096:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b09a:	nop
    b09c:	.word	0x200203bc

0000b0a0 <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    b0a0:	movs	r1, #1
    b0a2:	b.w	afcc <Stream::parseInt(char)>
    b0a6:	nop

0000b0a8 <operator delete(void*, unsigned int)>:
    b0a8:	b.w	c3d0 <free>

0000b0ac <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    b0ac:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b0ae:	ldr	r0, [pc, #164]	; (b154 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b0b0:	ldr	r2, [pc, #164]	; (b158 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    b0b2:	ldr	r3, [pc, #168]	; (b15c <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b0b4:	ldr	r5, [pc, #168]	; (b160 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b0b6:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b0b8:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b0ba:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b0bc:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    b0be:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b0c0:	ldr	r4, [pc, #160]	; (b164 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    b0c2:	cmp	r3, #8
    b0c4:	beq.n	b128 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    b0c6:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b0c8:	ldr	r0, [pc, #156]	; (b168 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b0ca:	ldr	r1, [pc, #160]	; (b16c <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    b0cc:	beq.n	b13e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    b0ce:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    b0d0:	ite	eq
    b0d2:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b0d4:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b0d6:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b0d8:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b0da:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b0dc:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b0de:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b0e0:	ldr	r3, [pc, #140]	; (b170 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b0e2:	ldr	r1, [pc, #144]	; (b174 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b0e4:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b0e6:	ldr	r2, [pc, #144]	; (b178 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b0e8:	cbz	r3, b11a <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b0ea:	movs	r3, #1
    b0ec:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b0ee:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    b0f0:	ldr	r3, [pc, #136]	; (b17c <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    b0f2:	ldr	r1, [pc, #140]	; (b180 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    b0f4:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    b0f6:	ldr	r2, [pc, #140]	; (b184 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    b0f8:	cmp	r3, #1
    b0fa:	bls.n	b14a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    b0fc:	cmp	r3, #4
    b0fe:	bls.n	b120 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    b100:	cmp	r3, #8
    b102:	bls.n	b142 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    b104:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    b106:	ite	ls
    b108:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    b10a:	movhi	r3, #135	; 0x87
    b10c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    b10e:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    b110:	ldr	r3, [pc, #116]	; (b188 <analog_init+0xdc>)
    b112:	movs	r2, #1
    b114:	strb	r2, [r3, #0]
}
    b116:	pop	{r4, r5}
    b118:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    b11a:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    b11c:	str	r3, [r2, #0]
    b11e:	b.n	b0f0 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    b120:	movs	r3, #132	; 0x84
    b122:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    b124:	str	r3, [r2, #0]
    b126:	b.n	b110 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b128:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b12c:	ldr	r1, [pc, #60]	; (b16c <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b12e:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b130:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b132:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b134:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b136:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b138:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b13a:	str	r3, [r1, #0]
    b13c:	b.n	b0e0 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b13e:	movs	r2, #57	; 0x39
    b140:	b.n	b132 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    b142:	movs	r3, #133	; 0x85
    b144:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    b146:	str	r3, [r2, #0]
    b148:	b.n	b110 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    b14a:	movs	r3, #128	; 0x80
    b14c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    b14e:	str	r3, [r2, #0]
    b150:	b.n	b110 <analog_init+0x64>
    b152:	nop
    b154:	.word	0x40074000
    b158:	.word	0x40074001
    b15c:	.word	0x1fff08a8
    b160:	.word	0x4003b008
    b164:	.word	0x4003b00c
    b168:	.word	0x400bb008
    b16c:	.word	0x400bb00c
    b170:	.word	0x200204c9
    b174:	.word	0x4003b020
    b178:	.word	0x400bb020
    b17c:	.word	0x1fff08a9
    b180:	.word	0x4003b024
    b184:	.word	0x400bb024
    b188:	.word	0x200204c8

0000b18c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    b18c:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    b18e:	ldr	r2, [pc, #196]	; (b254 <usb_init_serialnumber+0xc8>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b190:	ldr	r3, [pc, #196]	; (b258 <usb_init_serialnumber+0xcc>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    b192:	ldr	r1, [pc, #200]	; (b25c <usb_init_serialnumber+0xd0>)
    b194:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b196:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    b198:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b19a:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    b19c:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    b19e:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    b1a0:	ldrb	r3, [r2, #0]
    b1a2:	lsls	r3, r3, #24
    b1a4:	bpl.n	b1a0 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b1a6:	push	{lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    b1a8:	ldr	r3, [pc, #180]	; (b260 <usb_init_serialnumber+0xd4>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b1aa:	sub	sp, #20
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    b1ac:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    b1ae:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b1b0:	ldr	r3, [pc, #176]	; (b264 <usb_init_serialnumber+0xd8>)
    b1b2:	cmp	r0, r3
    b1b4:	it	ls
    b1b6:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    b1ba:	mov.w	r2, #10
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b1be:	it	ls
    b1c0:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    b1c2:	add	r1, sp, #4
    b1c4:	bl	b26c <ultoa>
	for (i=0; i<10; i++) {
		char c = buf[i];
    b1c8:	ldrb.w	r2, [sp, #4]
    b1cc:	ldr	r3, [pc, #152]	; (b268 <usb_init_serialnumber+0xdc>)
		if (!c) break;
    b1ce:	cbz	r2, b228 <usb_init_serialnumber+0x9c>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b1d0:	ldrb.w	r1, [sp, #5]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b1d4:	strh	r2, [r3, #2]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b1d6:	cbz	r1, b236 <usb_init_serialnumber+0xaa>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b1d8:	ldrb.w	r2, [sp, #6]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b1dc:	strh	r1, [r3, #4]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b1de:	cbz	r2, b23a <usb_init_serialnumber+0xae>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b1e0:	ldrb.w	r1, [sp, #7]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b1e4:	strh	r2, [r3, #6]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b1e6:	cbz	r1, b23e <usb_init_serialnumber+0xb2>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b1e8:	ldrb.w	r2, [sp, #8]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b1ec:	strh	r1, [r3, #8]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b1ee:	cbz	r2, b242 <usb_init_serialnumber+0xb6>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b1f0:	ldrb.w	r1, [sp, #9]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b1f4:	strh	r2, [r3, #10]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b1f6:	cbz	r1, b246 <usb_init_serialnumber+0xba>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b1f8:	ldrb.w	r2, [sp, #10]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b1fc:	strh	r1, [r3, #12]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b1fe:	cbz	r2, b24a <usb_init_serialnumber+0xbe>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b200:	ldrb.w	r1, [sp, #11]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b204:	strh	r2, [r3, #14]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b206:	cbz	r1, b24e <usb_init_serialnumber+0xc2>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b208:	ldrb.w	r2, [sp, #12]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b20c:	strh	r1, [r3, #16]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    b20e:	cbz	r2, b226 <usb_init_serialnumber+0x9a>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    b210:	ldrb.w	r1, [sp, #13]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b214:	strh	r2, [r3, #18]
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b216:	movs	r2, #9
		char c = buf[i];
		if (!c) break;
    b218:	cbz	r1, b228 <usb_init_serialnumber+0x9c>
    b21a:	movs	r2, #22
		usb_string_serial_number_default.wString[i] = c;
    b21c:	strh	r1, [r3, #20]
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b21e:	strb	r2, [r3, #0]
}
    b220:	add	sp, #20
    b222:	ldr.w	pc, [sp], #4
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b226:	movs	r2, #8
    b228:	adds	r2, #1
    b22a:	lsls	r2, r2, #1
    b22c:	uxtb	r2, r2
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b22e:	strb	r2, [r3, #0]
}
    b230:	add	sp, #20
    b232:	ldr.w	pc, [sp], #4
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b236:	movs	r2, #1
    b238:	b.n	b228 <usb_init_serialnumber+0x9c>
    b23a:	movs	r2, #2
    b23c:	b.n	b228 <usb_init_serialnumber+0x9c>
    b23e:	movs	r2, #3
    b240:	b.n	b228 <usb_init_serialnumber+0x9c>
    b242:	movs	r2, #4
    b244:	b.n	b228 <usb_init_serialnumber+0x9c>
    b246:	movs	r2, #5
    b248:	b.n	b228 <usb_init_serialnumber+0x9c>
    b24a:	movs	r2, #6
    b24c:	b.n	b228 <usb_init_serialnumber+0x9c>
    b24e:	movs	r2, #7
    b250:	b.n	b228 <usb_init_serialnumber+0x9c>
    b252:	nop
    b254:	.word	0x40020004
    b258:	.word	0x40020000
    b25c:	.word	0x41070000
    b260:	.word	0x4002000c
    b264:	.word	0x0098967f
    b268:	.word	0x1fff0938

0000b26c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    b26c:	push	{r4, r5, r6, r7}
    b26e:	subs	r5, r1, #1
    b270:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    b272:	movs	r4, #0
    b274:	b.n	b278 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    b276:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    b278:	udiv	r3, r0, r2
    b27c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b280:	cmp	r0, #9
    b282:	add.w	r7, r0, #48	; 0x30
    b286:	itet	hi
    b288:	addhi	r0, #55	; 0x37
    b28a:	uxtbls	r0, r7
    b28c:	uxtbhi	r0, r0
    b28e:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    b292:	mov	r0, r3
    b294:	cmp	r3, #0
    b296:	bne.n	b276 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    b298:	adds	r2, r1, r4
    b29a:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    b29c:	cbz	r4, b2b2 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    b29e:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    b2a0:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    b2a4:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b2a6:	adds	r3, #1
    b2a8:	subs	r0, r4, r3
    b2aa:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    b2ac:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b2b0:	blt.n	b29e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    b2b2:	mov	r0, r1
    b2b4:	pop	{r4, r5, r6, r7}
    b2b6:	bx	lr

0000b2b8 <__aeabi_drsub>:
    b2b8:	eor.w	r1, r1, #2147483648	; 0x80000000
    b2bc:	b.n	b2c4 <__adddf3>
    b2be:	nop

0000b2c0 <__aeabi_dsub>:
    b2c0:	eor.w	r3, r3, #2147483648	; 0x80000000

0000b2c4 <__adddf3>:
    b2c4:	push	{r4, r5, lr}
    b2c6:	mov.w	r4, r1, lsl #1
    b2ca:	mov.w	r5, r3, lsl #1
    b2ce:	teq	r4, r5
    b2d2:	it	eq
    b2d4:	teqeq	r0, r2
    b2d8:	itttt	ne
    b2da:	orrsne.w	ip, r4, r0
    b2de:	orrsne.w	ip, r5, r2
    b2e2:	mvnsne.w	ip, r4, asr #21
    b2e6:	mvnsne.w	ip, r5, asr #21
    b2ea:	beq.w	b4b2 <__adddf3+0x1ee>
    b2ee:	mov.w	r4, r4, lsr #21
    b2f2:	rsbs	r5, r4, r5, lsr #21
    b2f6:	it	lt
    b2f8:	neglt	r5, r5
    b2fa:	ble.n	b316 <__adddf3+0x52>
    b2fc:	add	r4, r5
    b2fe:	eor.w	r2, r0, r2
    b302:	eor.w	r3, r1, r3
    b306:	eor.w	r0, r2, r0
    b30a:	eor.w	r1, r3, r1
    b30e:	eor.w	r2, r0, r2
    b312:	eor.w	r3, r1, r3
    b316:	cmp	r5, #54	; 0x36
    b318:	it	hi
    b31a:	pophi	{r4, r5, pc}
    b31c:	tst.w	r1, #2147483648	; 0x80000000
    b320:	mov.w	r1, r1, lsl #12
    b324:	mov.w	ip, #1048576	; 0x100000
    b328:	orr.w	r1, ip, r1, lsr #12
    b32c:	beq.n	b334 <__adddf3+0x70>
    b32e:	negs	r0, r0
    b330:	sbc.w	r1, r1, r1, lsl #1
    b334:	tst.w	r3, #2147483648	; 0x80000000
    b338:	mov.w	r3, r3, lsl #12
    b33c:	orr.w	r3, ip, r3, lsr #12
    b340:	beq.n	b348 <__adddf3+0x84>
    b342:	negs	r2, r2
    b344:	sbc.w	r3, r3, r3, lsl #1
    b348:	teq	r4, r5
    b34c:	beq.w	b49e <__adddf3+0x1da>
    b350:	sub.w	r4, r4, #1
    b354:	rsbs	lr, r5, #32
    b358:	blt.n	b376 <__adddf3+0xb2>
    b35a:	lsl.w	ip, r2, lr
    b35e:	lsr.w	r2, r2, r5
    b362:	adds	r0, r0, r2
    b364:	adc.w	r1, r1, #0
    b368:	lsl.w	r2, r3, lr
    b36c:	adds	r0, r0, r2
    b36e:	asr.w	r3, r3, r5
    b372:	adcs	r1, r3
    b374:	b.n	b394 <__adddf3+0xd0>
    b376:	sub.w	r5, r5, #32
    b37a:	add.w	lr, lr, #32
    b37e:	cmp	r2, #1
    b380:	lsl.w	ip, r3, lr
    b384:	it	cs
    b386:	orrcs.w	ip, ip, #2
    b38a:	asr.w	r3, r3, r5
    b38e:	adds	r0, r0, r3
    b390:	adcs.w	r1, r1, r3, asr #31
    b394:	and.w	r5, r1, #2147483648	; 0x80000000
    b398:	bpl.n	b3aa <__adddf3+0xe6>
    b39a:	mov.w	lr, #0
    b39e:	rsbs	ip, ip, #0
    b3a2:	sbcs.w	r0, lr, r0
    b3a6:	sbc.w	r1, lr, r1
    b3aa:	cmp.w	r1, #1048576	; 0x100000
    b3ae:	bcc.n	b3e8 <__adddf3+0x124>
    b3b0:	cmp.w	r1, #2097152	; 0x200000
    b3b4:	bcc.n	b3d0 <__adddf3+0x10c>
    b3b6:	lsrs	r1, r1, #1
    b3b8:	movs.w	r0, r0, rrx
    b3bc:	mov.w	ip, ip, rrx
    b3c0:	add.w	r4, r4, #1
    b3c4:	mov.w	r2, r4, lsl #21
    b3c8:	cmn.w	r2, #4194304	; 0x400000
    b3cc:	bcs.w	b504 <__adddf3+0x240>
    b3d0:	cmp.w	ip, #2147483648	; 0x80000000
    b3d4:	it	eq
    b3d6:	movseq.w	ip, r0, lsr #1
    b3da:	adcs.w	r0, r0, #0
    b3de:	adc.w	r1, r1, r4, lsl #20
    b3e2:	orr.w	r1, r1, r5
    b3e6:	pop	{r4, r5, pc}
    b3e8:	movs.w	ip, ip, lsl #1
    b3ec:	adcs	r0, r0
    b3ee:	adc.w	r1, r1, r1
    b3f2:	tst.w	r1, #1048576	; 0x100000
    b3f6:	sub.w	r4, r4, #1
    b3fa:	bne.n	b3d0 <__adddf3+0x10c>
    b3fc:	teq	r1, #0
    b400:	itt	eq
    b402:	moveq	r1, r0
    b404:	moveq	r0, #0
    b406:	clz	r3, r1
    b40a:	it	eq
    b40c:	addeq	r3, #32
    b40e:	sub.w	r3, r3, #11
    b412:	subs.w	r2, r3, #32
    b416:	bge.n	b432 <__adddf3+0x16e>
    b418:	adds	r2, #12
    b41a:	ble.n	b42e <__adddf3+0x16a>
    b41c:	add.w	ip, r2, #20
    b420:	rsb	r2, r2, #12
    b424:	lsl.w	r0, r1, ip
    b428:	lsr.w	r1, r1, r2
    b42c:	b.n	b448 <__adddf3+0x184>
    b42e:	add.w	r2, r2, #20
    b432:	it	le
    b434:	rsble	ip, r2, #32
    b438:	lsl.w	r1, r1, r2
    b43c:	lsr.w	ip, r0, ip
    b440:	itt	le
    b442:	orrle.w	r1, r1, ip
    b446:	lslle	r0, r2
    b448:	subs	r4, r4, r3
    b44a:	ittt	ge
    b44c:	addge.w	r1, r1, r4, lsl #20
    b450:	orrge	r1, r5
    b452:	popge	{r4, r5, pc}
    b454:	mvn.w	r4, r4
    b458:	subs	r4, #31
    b45a:	bge.n	b496 <__adddf3+0x1d2>
    b45c:	adds	r4, #12
    b45e:	bgt.n	b47e <__adddf3+0x1ba>
    b460:	add.w	r4, r4, #20
    b464:	rsb	r2, r4, #32
    b468:	lsr.w	r0, r0, r4
    b46c:	lsl.w	r3, r1, r2
    b470:	orr.w	r0, r0, r3
    b474:	lsr.w	r3, r1, r4
    b478:	orr.w	r1, r5, r3
    b47c:	pop	{r4, r5, pc}
    b47e:	rsb	r4, r4, #12
    b482:	rsb	r2, r4, #32
    b486:	lsr.w	r0, r0, r2
    b48a:	lsl.w	r3, r1, r4
    b48e:	orr.w	r0, r0, r3
    b492:	mov	r1, r5
    b494:	pop	{r4, r5, pc}
    b496:	lsr.w	r0, r1, r4
    b49a:	mov	r1, r5
    b49c:	pop	{r4, r5, pc}
    b49e:	teq	r4, #0
    b4a2:	eor.w	r3, r3, #1048576	; 0x100000
    b4a6:	itte	eq
    b4a8:	eoreq.w	r1, r1, #1048576	; 0x100000
    b4ac:	addeq	r4, #1
    b4ae:	subne	r5, #1
    b4b0:	b.n	b350 <__adddf3+0x8c>
    b4b2:	mvns.w	ip, r4, asr #21
    b4b6:	it	ne
    b4b8:	mvnsne.w	ip, r5, asr #21
    b4bc:	beq.n	b512 <__adddf3+0x24e>
    b4be:	teq	r4, r5
    b4c2:	it	eq
    b4c4:	teqeq	r0, r2
    b4c8:	beq.n	b4d6 <__adddf3+0x212>
    b4ca:	orrs.w	ip, r4, r0
    b4ce:	itt	eq
    b4d0:	moveq	r1, r3
    b4d2:	moveq	r0, r2
    b4d4:	pop	{r4, r5, pc}
    b4d6:	teq	r1, r3
    b4da:	ittt	ne
    b4dc:	movne	r1, #0
    b4de:	movne	r0, #0
    b4e0:	popne	{r4, r5, pc}
    b4e2:	movs.w	ip, r4, lsr #21
    b4e6:	bne.n	b4f4 <__adddf3+0x230>
    b4e8:	lsls	r0, r0, #1
    b4ea:	adcs	r1, r1
    b4ec:	it	cs
    b4ee:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b4f2:	pop	{r4, r5, pc}
    b4f4:	adds.w	r4, r4, #4194304	; 0x400000
    b4f8:	itt	cc
    b4fa:	addcc.w	r1, r1, #1048576	; 0x100000
    b4fe:	popcc	{r4, r5, pc}
    b500:	and.w	r5, r1, #2147483648	; 0x80000000
    b504:	orr.w	r1, r5, #2130706432	; 0x7f000000
    b508:	orr.w	r1, r1, #15728640	; 0xf00000
    b50c:	mov.w	r0, #0
    b510:	pop	{r4, r5, pc}
    b512:	mvns.w	ip, r4, asr #21
    b516:	itte	ne
    b518:	movne	r1, r3
    b51a:	movne	r0, r2
    b51c:	mvnseq.w	ip, r5, asr #21
    b520:	itt	ne
    b522:	movne	r3, r1
    b524:	movne	r2, r0
    b526:	orrs.w	r4, r0, r1, lsl #12
    b52a:	itte	eq
    b52c:	orrseq.w	r5, r2, r3, lsl #12
    b530:	teqeq	r1, r3
    b534:	orrne.w	r1, r1, #524288	; 0x80000
    b538:	pop	{r4, r5, pc}
    b53a:	nop

0000b53c <__aeabi_ui2d>:
    b53c:	teq	r0, #0
    b540:	itt	eq
    b542:	moveq	r1, #0
    b544:	bxeq	lr
    b546:	push	{r4, r5, lr}
    b548:	mov.w	r4, #1024	; 0x400
    b54c:	add.w	r4, r4, #50	; 0x32
    b550:	mov.w	r5, #0
    b554:	mov.w	r1, #0
    b558:	b.n	b3fc <__adddf3+0x138>
    b55a:	nop

0000b55c <__aeabi_i2d>:
    b55c:	teq	r0, #0
    b560:	itt	eq
    b562:	moveq	r1, #0
    b564:	bxeq	lr
    b566:	push	{r4, r5, lr}
    b568:	mov.w	r4, #1024	; 0x400
    b56c:	add.w	r4, r4, #50	; 0x32
    b570:	ands.w	r5, r0, #2147483648	; 0x80000000
    b574:	it	mi
    b576:	negmi	r0, r0
    b578:	mov.w	r1, #0
    b57c:	b.n	b3fc <__adddf3+0x138>
    b57e:	nop

0000b580 <__aeabi_f2d>:
    b580:	lsls	r2, r0, #1
    b582:	mov.w	r1, r2, asr #3
    b586:	mov.w	r1, r1, rrx
    b58a:	mov.w	r0, r2, lsl #28
    b58e:	itttt	ne
    b590:	andsne.w	r3, r2, #4278190080	; 0xff000000
    b594:	teqne	r3, #4278190080	; 0xff000000
    b598:	eorne.w	r1, r1, #939524096	; 0x38000000
    b59c:	bxne	lr
    b59e:	teq	r2, #0
    b5a2:	ite	ne
    b5a4:	teqne	r3, #4278190080	; 0xff000000
    b5a8:	bxeq	lr
    b5aa:	push	{r4, r5, lr}
    b5ac:	mov.w	r4, #896	; 0x380
    b5b0:	and.w	r5, r1, #2147483648	; 0x80000000
    b5b4:	bic.w	r1, r1, #2147483648	; 0x80000000
    b5b8:	b.n	b3fc <__adddf3+0x138>
    b5ba:	nop

0000b5bc <__aeabi_ul2d>:
    b5bc:	orrs.w	r2, r0, r1
    b5c0:	it	eq
    b5c2:	bxeq	lr
    b5c4:	push	{r4, r5, lr}
    b5c6:	mov.w	r5, #0
    b5ca:	b.n	b5e2 <__aeabi_l2d+0x16>

0000b5cc <__aeabi_l2d>:
    b5cc:	orrs.w	r2, r0, r1
    b5d0:	it	eq
    b5d2:	bxeq	lr
    b5d4:	push	{r4, r5, lr}
    b5d6:	ands.w	r5, r1, #2147483648	; 0x80000000
    b5da:	bpl.n	b5e2 <__aeabi_l2d+0x16>
    b5dc:	negs	r0, r0
    b5de:	sbc.w	r1, r1, r1, lsl #1
    b5e2:	mov.w	r4, #1024	; 0x400
    b5e6:	add.w	r4, r4, #50	; 0x32
    b5ea:	movs.w	ip, r1, lsr #22
    b5ee:	beq.w	b3aa <__adddf3+0xe6>
    b5f2:	mov.w	r2, #3
    b5f6:	movs.w	ip, ip, lsr #3
    b5fa:	it	ne
    b5fc:	addne	r2, #3
    b5fe:	movs.w	ip, ip, lsr #3
    b602:	it	ne
    b604:	addne	r2, #3
    b606:	add.w	r2, r2, ip, lsr #3
    b60a:	rsb	r3, r2, #32
    b60e:	lsl.w	ip, r0, r3
    b612:	lsr.w	r0, r0, r2
    b616:	lsl.w	lr, r1, r3
    b61a:	orr.w	r0, r0, lr
    b61e:	lsr.w	r1, r1, r2
    b622:	add	r4, r2
    b624:	b.n	b3aa <__adddf3+0xe6>
    b626:	nop

0000b628 <__aeabi_dmul>:
    b628:	push	{r4, r5, r6, lr}
    b62a:	mov.w	ip, #255	; 0xff
    b62e:	orr.w	ip, ip, #1792	; 0x700
    b632:	ands.w	r4, ip, r1, lsr #20
    b636:	ittte	ne
    b638:	andsne.w	r5, ip, r3, lsr #20
    b63c:	teqne	r4, ip
    b640:	teqne	r5, ip
    b644:	bleq	b804 <__aeabi_dmul+0x1dc>
    b648:	add	r4, r5
    b64a:	eor.w	r6, r1, r3
    b64e:	bic.w	r1, r1, ip, lsl #21
    b652:	bic.w	r3, r3, ip, lsl #21
    b656:	orrs.w	r5, r0, r1, lsl #12
    b65a:	it	ne
    b65c:	orrsne.w	r5, r2, r3, lsl #12
    b660:	orr.w	r1, r1, #1048576	; 0x100000
    b664:	orr.w	r3, r3, #1048576	; 0x100000
    b668:	beq.n	b6dc <__aeabi_dmul+0xb4>
    b66a:	umull	ip, lr, r0, r2
    b66e:	mov.w	r5, #0
    b672:	umlal	lr, r5, r1, r2
    b676:	and.w	r2, r6, #2147483648	; 0x80000000
    b67a:	umlal	lr, r5, r0, r3
    b67e:	mov.w	r6, #0
    b682:	umlal	r5, r6, r1, r3
    b686:	teq	ip, #0
    b68a:	it	ne
    b68c:	orrne.w	lr, lr, #1
    b690:	sub.w	r4, r4, #255	; 0xff
    b694:	cmp.w	r6, #512	; 0x200
    b698:	sbc.w	r4, r4, #768	; 0x300
    b69c:	bcs.n	b6a8 <__aeabi_dmul+0x80>
    b69e:	movs.w	lr, lr, lsl #1
    b6a2:	adcs	r5, r5
    b6a4:	adc.w	r6, r6, r6
    b6a8:	orr.w	r1, r2, r6, lsl #11
    b6ac:	orr.w	r1, r1, r5, lsr #21
    b6b0:	mov.w	r0, r5, lsl #11
    b6b4:	orr.w	r0, r0, lr, lsr #21
    b6b8:	mov.w	lr, lr, lsl #11
    b6bc:	subs.w	ip, r4, #253	; 0xfd
    b6c0:	it	hi
    b6c2:	cmphi.w	ip, #1792	; 0x700
    b6c6:	bhi.n	b706 <__aeabi_dmul+0xde>
    b6c8:	cmp.w	lr, #2147483648	; 0x80000000
    b6cc:	it	eq
    b6ce:	movseq.w	lr, r0, lsr #1
    b6d2:	adcs.w	r0, r0, #0
    b6d6:	adc.w	r1, r1, r4, lsl #20
    b6da:	pop	{r4, r5, r6, pc}
    b6dc:	and.w	r6, r6, #2147483648	; 0x80000000
    b6e0:	orr.w	r1, r6, r1
    b6e4:	orr.w	r0, r0, r2
    b6e8:	eor.w	r1, r1, r3
    b6ec:	subs.w	r4, r4, ip, lsr #1
    b6f0:	ittt	gt
    b6f2:	rsbsgt	r5, r4, ip
    b6f6:	orrgt.w	r1, r1, r4, lsl #20
    b6fa:	popgt	{r4, r5, r6, pc}
    b6fc:	orr.w	r1, r1, #1048576	; 0x100000
    b700:	mov.w	lr, #0
    b704:	subs	r4, #1
    b706:	bgt.w	b860 <__aeabi_dmul+0x238>
    b70a:	cmn.w	r4, #54	; 0x36
    b70e:	ittt	le
    b710:	movle	r0, #0
    b712:	andle.w	r1, r1, #2147483648	; 0x80000000
    b716:	pople	{r4, r5, r6, pc}
    b718:	rsb	r4, r4, #0
    b71c:	subs	r4, #32
    b71e:	bge.n	b78c <__aeabi_dmul+0x164>
    b720:	adds	r4, #12
    b722:	bgt.n	b75c <__aeabi_dmul+0x134>
    b724:	add.w	r4, r4, #20
    b728:	rsb	r5, r4, #32
    b72c:	lsl.w	r3, r0, r5
    b730:	lsr.w	r0, r0, r4
    b734:	lsl.w	r2, r1, r5
    b738:	orr.w	r0, r0, r2
    b73c:	and.w	r2, r1, #2147483648	; 0x80000000
    b740:	bic.w	r1, r1, #2147483648	; 0x80000000
    b744:	adds.w	r0, r0, r3, lsr #31
    b748:	lsr.w	r6, r1, r4
    b74c:	adc.w	r1, r2, r6
    b750:	orrs.w	lr, lr, r3, lsl #1
    b754:	it	eq
    b756:	biceq.w	r0, r0, r3, lsr #31
    b75a:	pop	{r4, r5, r6, pc}
    b75c:	rsb	r4, r4, #12
    b760:	rsb	r5, r4, #32
    b764:	lsl.w	r3, r0, r4
    b768:	lsr.w	r0, r0, r5
    b76c:	lsl.w	r2, r1, r4
    b770:	orr.w	r0, r0, r2
    b774:	and.w	r1, r1, #2147483648	; 0x80000000
    b778:	adds.w	r0, r0, r3, lsr #31
    b77c:	adc.w	r1, r1, #0
    b780:	orrs.w	lr, lr, r3, lsl #1
    b784:	it	eq
    b786:	biceq.w	r0, r0, r3, lsr #31
    b78a:	pop	{r4, r5, r6, pc}
    b78c:	rsb	r5, r4, #32
    b790:	lsl.w	r2, r0, r5
    b794:	orr.w	lr, lr, r2
    b798:	lsr.w	r3, r0, r4
    b79c:	lsl.w	r2, r1, r5
    b7a0:	orr.w	r3, r3, r2
    b7a4:	lsr.w	r0, r1, r4
    b7a8:	and.w	r1, r1, #2147483648	; 0x80000000
    b7ac:	lsr.w	r2, r1, r4
    b7b0:	bic.w	r0, r0, r2
    b7b4:	add.w	r0, r0, r3, lsr #31
    b7b8:	orrs.w	lr, lr, r3, lsl #1
    b7bc:	it	eq
    b7be:	biceq.w	r0, r0, r3, lsr #31
    b7c2:	pop	{r4, r5, r6, pc}
    b7c4:	teq	r4, #0
    b7c8:	bne.n	b7ea <__aeabi_dmul+0x1c2>
    b7ca:	and.w	r6, r1, #2147483648	; 0x80000000
    b7ce:	lsls	r0, r0, #1
    b7d0:	adc.w	r1, r1, r1
    b7d4:	tst.w	r1, #1048576	; 0x100000
    b7d8:	it	eq
    b7da:	subeq	r4, #1
    b7dc:	beq.n	b7ce <__aeabi_dmul+0x1a6>
    b7de:	orr.w	r1, r1, r6
    b7e2:	teq	r5, #0
    b7e6:	it	ne
    b7e8:	bxne	lr
    b7ea:	and.w	r6, r3, #2147483648	; 0x80000000
    b7ee:	lsls	r2, r2, #1
    b7f0:	adc.w	r3, r3, r3
    b7f4:	tst.w	r3, #1048576	; 0x100000
    b7f8:	it	eq
    b7fa:	subeq	r5, #1
    b7fc:	beq.n	b7ee <__aeabi_dmul+0x1c6>
    b7fe:	orr.w	r3, r3, r6
    b802:	bx	lr
    b804:	teq	r4, ip
    b808:	and.w	r5, ip, r3, lsr #20
    b80c:	it	ne
    b80e:	teqne	r5, ip
    b812:	beq.n	b82e <__aeabi_dmul+0x206>
    b814:	orrs.w	r6, r0, r1, lsl #1
    b818:	it	ne
    b81a:	orrsne.w	r6, r2, r3, lsl #1
    b81e:	bne.n	b7c4 <__aeabi_dmul+0x19c>
    b820:	eor.w	r1, r1, r3
    b824:	and.w	r1, r1, #2147483648	; 0x80000000
    b828:	mov.w	r0, #0
    b82c:	pop	{r4, r5, r6, pc}
    b82e:	orrs.w	r6, r0, r1, lsl #1
    b832:	itte	eq
    b834:	moveq	r0, r2
    b836:	moveq	r1, r3
    b838:	orrsne.w	r6, r2, r3, lsl #1
    b83c:	beq.n	b872 <__aeabi_dmul+0x24a>
    b83e:	teq	r4, ip
    b842:	bne.n	b84a <__aeabi_dmul+0x222>
    b844:	orrs.w	r6, r0, r1, lsl #12
    b848:	bne.n	b872 <__aeabi_dmul+0x24a>
    b84a:	teq	r5, ip
    b84e:	bne.n	b85c <__aeabi_dmul+0x234>
    b850:	orrs.w	r6, r2, r3, lsl #12
    b854:	itt	ne
    b856:	movne	r0, r2
    b858:	movne	r1, r3
    b85a:	bne.n	b872 <__aeabi_dmul+0x24a>
    b85c:	eor.w	r1, r1, r3
    b860:	and.w	r1, r1, #2147483648	; 0x80000000
    b864:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b868:	orr.w	r1, r1, #15728640	; 0xf00000
    b86c:	mov.w	r0, #0
    b870:	pop	{r4, r5, r6, pc}
    b872:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b876:	orr.w	r1, r1, #16252928	; 0xf80000
    b87a:	pop	{r4, r5, r6, pc}

0000b87c <__aeabi_ddiv>:
    b87c:	push	{r4, r5, r6, lr}
    b87e:	mov.w	ip, #255	; 0xff
    b882:	orr.w	ip, ip, #1792	; 0x700
    b886:	ands.w	r4, ip, r1, lsr #20
    b88a:	ittte	ne
    b88c:	andsne.w	r5, ip, r3, lsr #20
    b890:	teqne	r4, ip
    b894:	teqne	r5, ip
    b898:	bleq	b9ea <__aeabi_ddiv+0x16e>
    b89c:	sub.w	r4, r4, r5
    b8a0:	eor.w	lr, r1, r3
    b8a4:	orrs.w	r5, r2, r3, lsl #12
    b8a8:	mov.w	r1, r1, lsl #12
    b8ac:	beq.w	b9c0 <__aeabi_ddiv+0x144>
    b8b0:	mov.w	r3, r3, lsl #12
    b8b4:	mov.w	r5, #268435456	; 0x10000000
    b8b8:	orr.w	r3, r5, r3, lsr #4
    b8bc:	orr.w	r3, r3, r2, lsr #24
    b8c0:	mov.w	r2, r2, lsl #8
    b8c4:	orr.w	r5, r5, r1, lsr #4
    b8c8:	orr.w	r5, r5, r0, lsr #24
    b8cc:	mov.w	r6, r0, lsl #8
    b8d0:	and.w	r1, lr, #2147483648	; 0x80000000
    b8d4:	cmp	r5, r3
    b8d6:	it	eq
    b8d8:	cmpeq	r6, r2
    b8da:	adc.w	r4, r4, #253	; 0xfd
    b8de:	add.w	r4, r4, #768	; 0x300
    b8e2:	bcs.n	b8ea <__aeabi_ddiv+0x6e>
    b8e4:	lsrs	r3, r3, #1
    b8e6:	mov.w	r2, r2, rrx
    b8ea:	subs	r6, r6, r2
    b8ec:	sbc.w	r5, r5, r3
    b8f0:	lsrs	r3, r3, #1
    b8f2:	mov.w	r2, r2, rrx
    b8f6:	mov.w	r0, #1048576	; 0x100000
    b8fa:	mov.w	ip, #524288	; 0x80000
    b8fe:	subs.w	lr, r6, r2
    b902:	sbcs.w	lr, r5, r3
    b906:	ittt	cs
    b908:	subcs	r6, r6, r2
    b90a:	movcs	r5, lr
    b90c:	orrcs.w	r0, r0, ip
    b910:	lsrs	r3, r3, #1
    b912:	mov.w	r2, r2, rrx
    b916:	subs.w	lr, r6, r2
    b91a:	sbcs.w	lr, r5, r3
    b91e:	ittt	cs
    b920:	subcs	r6, r6, r2
    b922:	movcs	r5, lr
    b924:	orrcs.w	r0, r0, ip, lsr #1
    b928:	lsrs	r3, r3, #1
    b92a:	mov.w	r2, r2, rrx
    b92e:	subs.w	lr, r6, r2
    b932:	sbcs.w	lr, r5, r3
    b936:	ittt	cs
    b938:	subcs	r6, r6, r2
    b93a:	movcs	r5, lr
    b93c:	orrcs.w	r0, r0, ip, lsr #2
    b940:	lsrs	r3, r3, #1
    b942:	mov.w	r2, r2, rrx
    b946:	subs.w	lr, r6, r2
    b94a:	sbcs.w	lr, r5, r3
    b94e:	ittt	cs
    b950:	subcs	r6, r6, r2
    b952:	movcs	r5, lr
    b954:	orrcs.w	r0, r0, ip, lsr #3
    b958:	orrs.w	lr, r5, r6
    b95c:	beq.n	b990 <__aeabi_ddiv+0x114>
    b95e:	mov.w	r5, r5, lsl #4
    b962:	orr.w	r5, r5, r6, lsr #28
    b966:	mov.w	r6, r6, lsl #4
    b96a:	mov.w	r3, r3, lsl #3
    b96e:	orr.w	r3, r3, r2, lsr #29
    b972:	mov.w	r2, r2, lsl #3
    b976:	movs.w	ip, ip, lsr #4
    b97a:	bne.n	b8fe <__aeabi_ddiv+0x82>
    b97c:	tst.w	r1, #1048576	; 0x100000
    b980:	bne.n	b99a <__aeabi_ddiv+0x11e>
    b982:	orr.w	r1, r1, r0
    b986:	mov.w	r0, #0
    b98a:	mov.w	ip, #2147483648	; 0x80000000
    b98e:	b.n	b8fe <__aeabi_ddiv+0x82>
    b990:	tst.w	r1, #1048576	; 0x100000
    b994:	itt	eq
    b996:	orreq	r1, r0
    b998:	moveq	r0, #0
    b99a:	subs.w	ip, r4, #253	; 0xfd
    b99e:	it	hi
    b9a0:	cmphi.w	ip, #1792	; 0x700
    b9a4:	bhi.w	b706 <__aeabi_dmul+0xde>
    b9a8:	subs.w	ip, r5, r3
    b9ac:	itt	eq
    b9ae:	subseq.w	ip, r6, r2
    b9b2:	movseq.w	ip, r0, lsr #1
    b9b6:	adcs.w	r0, r0, #0
    b9ba:	adc.w	r1, r1, r4, lsl #20
    b9be:	pop	{r4, r5, r6, pc}
    b9c0:	and.w	lr, lr, #2147483648	; 0x80000000
    b9c4:	orr.w	r1, lr, r1, lsr #12
    b9c8:	adds.w	r4, r4, ip, lsr #1
    b9cc:	ittt	gt
    b9ce:	rsbsgt	r5, r4, ip
    b9d2:	orrgt.w	r1, r1, r4, lsl #20
    b9d6:	popgt	{r4, r5, r6, pc}
    b9d8:	orr.w	r1, r1, #1048576	; 0x100000
    b9dc:	mov.w	lr, #0
    b9e0:	subs	r4, #1
    b9e2:	b.n	b706 <__aeabi_dmul+0xde>
    b9e4:	orr.w	lr, r5, r6
    b9e8:	b.n	b706 <__aeabi_dmul+0xde>
    b9ea:	and.w	r5, ip, r3, lsr #20
    b9ee:	teq	r4, ip
    b9f2:	it	eq
    b9f4:	teqeq	r5, ip
    b9f8:	beq.w	b872 <__aeabi_dmul+0x24a>
    b9fc:	teq	r4, ip
    ba00:	bne.n	ba18 <__aeabi_ddiv+0x19c>
    ba02:	orrs.w	r4, r0, r1, lsl #12
    ba06:	bne.w	b872 <__aeabi_dmul+0x24a>
    ba0a:	teq	r5, ip
    ba0e:	bne.w	b85c <__aeabi_dmul+0x234>
    ba12:	mov	r0, r2
    ba14:	mov	r1, r3
    ba16:	b.n	b872 <__aeabi_dmul+0x24a>
    ba18:	teq	r5, ip
    ba1c:	bne.n	ba2c <__aeabi_ddiv+0x1b0>
    ba1e:	orrs.w	r5, r2, r3, lsl #12
    ba22:	beq.w	b820 <__aeabi_dmul+0x1f8>
    ba26:	mov	r0, r2
    ba28:	mov	r1, r3
    ba2a:	b.n	b872 <__aeabi_dmul+0x24a>
    ba2c:	orrs.w	r6, r0, r1, lsl #1
    ba30:	it	ne
    ba32:	orrsne.w	r6, r2, r3, lsl #1
    ba36:	bne.w	b7c4 <__aeabi_dmul+0x19c>
    ba3a:	orrs.w	r4, r0, r1, lsl #1
    ba3e:	bne.w	b85c <__aeabi_dmul+0x234>
    ba42:	orrs.w	r5, r2, r3, lsl #1
    ba46:	bne.w	b820 <__aeabi_dmul+0x1f8>
    ba4a:	b.n	b872 <__aeabi_dmul+0x24a>

0000ba4c <__gedf2>:
    ba4c:	mov.w	ip, #4294967295
    ba50:	b.n	ba60 <__cmpdf2+0x4>
    ba52:	nop

0000ba54 <__ledf2>:
    ba54:	mov.w	ip, #1
    ba58:	b.n	ba60 <__cmpdf2+0x4>
    ba5a:	nop

0000ba5c <__cmpdf2>:
    ba5c:	mov.w	ip, #1
    ba60:	str.w	ip, [sp, #-4]!
    ba64:	mov.w	ip, r1, lsl #1
    ba68:	mvns.w	ip, ip, asr #21
    ba6c:	mov.w	ip, r3, lsl #1
    ba70:	it	ne
    ba72:	mvnsne.w	ip, ip, asr #21
    ba76:	beq.n	bab0 <__cmpdf2+0x54>
    ba78:	add	sp, #4
    ba7a:	orrs.w	ip, r0, r1, lsl #1
    ba7e:	ite	eq
    ba80:	orrseq.w	ip, r2, r3, lsl #1
    ba84:	teqne	r1, r3
    ba88:	ittt	eq
    ba8a:	teqeq	r0, r2
    ba8e:	moveq	r0, #0
    ba90:	bxeq	lr
    ba92:	cmn.w	r0, #0
    ba96:	teq	r1, r3
    ba9a:	it	pl
    ba9c:	cmppl	r1, r3
    ba9e:	it	eq
    baa0:	cmpeq	r0, r2
    baa2:	ite	cs
    baa4:	asrcs	r0, r3, #31
    baa6:	mvncc.w	r0, r3, asr #31
    baaa:	orr.w	r0, r0, #1
    baae:	bx	lr
    bab0:	mov.w	ip, r1, lsl #1
    bab4:	mvns.w	ip, ip, asr #21
    bab8:	bne.n	bac0 <__cmpdf2+0x64>
    baba:	orrs.w	ip, r0, r1, lsl #12
    babe:	bne.n	bad0 <__cmpdf2+0x74>
    bac0:	mov.w	ip, r3, lsl #1
    bac4:	mvns.w	ip, ip, asr #21
    bac8:	bne.n	ba78 <__cmpdf2+0x1c>
    baca:	orrs.w	ip, r2, r3, lsl #12
    bace:	beq.n	ba78 <__cmpdf2+0x1c>
    bad0:	ldr.w	r0, [sp], #4
    bad4:	bx	lr
    bad6:	nop

0000bad8 <__aeabi_cdrcmple>:
    bad8:	mov	ip, r0
    bada:	mov	r0, r2
    badc:	mov	r2, ip
    bade:	mov	ip, r1
    bae0:	mov	r1, r3
    bae2:	mov	r3, ip
    bae4:	b.n	bae8 <__aeabi_cdcmpeq>
    bae6:	nop

0000bae8 <__aeabi_cdcmpeq>:
    bae8:	push	{r0, lr}
    baea:	bl	ba5c <__cmpdf2>
    baee:	cmp	r0, #0
    baf0:	it	mi
    baf2:	cmnmi.w	r0, #0
    baf6:	pop	{r0, pc}

0000baf8 <__aeabi_dcmpeq>:
    baf8:	str.w	lr, [sp, #-8]!
    bafc:	bl	bae8 <__aeabi_cdcmpeq>
    bb00:	ite	eq
    bb02:	moveq	r0, #1
    bb04:	movne	r0, #0
    bb06:	ldr.w	pc, [sp], #8
    bb0a:	nop

0000bb0c <__aeabi_dcmplt>:
    bb0c:	str.w	lr, [sp, #-8]!
    bb10:	bl	bae8 <__aeabi_cdcmpeq>
    bb14:	ite	cc
    bb16:	movcc	r0, #1
    bb18:	movcs	r0, #0
    bb1a:	ldr.w	pc, [sp], #8
    bb1e:	nop

0000bb20 <__aeabi_dcmple>:
    bb20:	str.w	lr, [sp, #-8]!
    bb24:	bl	bae8 <__aeabi_cdcmpeq>
    bb28:	ite	ls
    bb2a:	movls	r0, #1
    bb2c:	movhi	r0, #0
    bb2e:	ldr.w	pc, [sp], #8
    bb32:	nop

0000bb34 <__aeabi_dcmpge>:
    bb34:	str.w	lr, [sp, #-8]!
    bb38:	bl	bad8 <__aeabi_cdrcmple>
    bb3c:	ite	ls
    bb3e:	movls	r0, #1
    bb40:	movhi	r0, #0
    bb42:	ldr.w	pc, [sp], #8
    bb46:	nop

0000bb48 <__aeabi_dcmpgt>:
    bb48:	str.w	lr, [sp, #-8]!
    bb4c:	bl	bad8 <__aeabi_cdrcmple>
    bb50:	ite	cc
    bb52:	movcc	r0, #1
    bb54:	movcs	r0, #0
    bb56:	ldr.w	pc, [sp], #8
    bb5a:	nop

0000bb5c <__aeabi_dcmpun>:
    bb5c:	mov.w	ip, r1, lsl #1
    bb60:	mvns.w	ip, ip, asr #21
    bb64:	bne.n	bb6c <__aeabi_dcmpun+0x10>
    bb66:	orrs.w	ip, r0, r1, lsl #12
    bb6a:	bne.n	bb82 <__aeabi_dcmpun+0x26>
    bb6c:	mov.w	ip, r3, lsl #1
    bb70:	mvns.w	ip, ip, asr #21
    bb74:	bne.n	bb7c <__aeabi_dcmpun+0x20>
    bb76:	orrs.w	ip, r2, r3, lsl #12
    bb7a:	bne.n	bb82 <__aeabi_dcmpun+0x26>
    bb7c:	mov.w	r0, #0
    bb80:	bx	lr
    bb82:	mov.w	r0, #1
    bb86:	bx	lr

0000bb88 <__aeabi_d2iz>:
    bb88:	mov.w	r2, r1, lsl #1
    bb8c:	adds.w	r2, r2, #2097152	; 0x200000
    bb90:	bcs.n	bbbe <__aeabi_d2iz+0x36>
    bb92:	bpl.n	bbb8 <__aeabi_d2iz+0x30>
    bb94:	mvn.w	r3, #992	; 0x3e0
    bb98:	subs.w	r2, r3, r2, asr #21
    bb9c:	bls.n	bbc4 <__aeabi_d2iz+0x3c>
    bb9e:	mov.w	r3, r1, lsl #11
    bba2:	orr.w	r3, r3, #2147483648	; 0x80000000
    bba6:	orr.w	r3, r3, r0, lsr #21
    bbaa:	tst.w	r1, #2147483648	; 0x80000000
    bbae:	lsr.w	r0, r3, r2
    bbb2:	it	ne
    bbb4:	negne	r0, r0
    bbb6:	bx	lr
    bbb8:	mov.w	r0, #0
    bbbc:	bx	lr
    bbbe:	orrs.w	r0, r0, r1, lsl #12
    bbc2:	bne.n	bbd0 <__aeabi_d2iz+0x48>
    bbc4:	ands.w	r0, r1, #2147483648	; 0x80000000
    bbc8:	it	eq
    bbca:	mvneq.w	r0, #2147483648	; 0x80000000
    bbce:	bx	lr
    bbd0:	mov.w	r0, #0
    bbd4:	bx	lr
    bbd6:	nop

0000bbd8 <__aeabi_d2uiz>:
    bbd8:	lsls	r2, r1, #1
    bbda:	bcs.n	bc00 <__aeabi_d2uiz+0x28>
    bbdc:	adds.w	r2, r2, #2097152	; 0x200000
    bbe0:	bcs.n	bc06 <__aeabi_d2uiz+0x2e>
    bbe2:	bpl.n	bc00 <__aeabi_d2uiz+0x28>
    bbe4:	mvn.w	r3, #992	; 0x3e0
    bbe8:	subs.w	r2, r3, r2, asr #21
    bbec:	bmi.n	bc0c <__aeabi_d2uiz+0x34>
    bbee:	mov.w	r3, r1, lsl #11
    bbf2:	orr.w	r3, r3, #2147483648	; 0x80000000
    bbf6:	orr.w	r3, r3, r0, lsr #21
    bbfa:	lsr.w	r0, r3, r2
    bbfe:	bx	lr
    bc00:	mov.w	r0, #0
    bc04:	bx	lr
    bc06:	orrs.w	r0, r0, r1, lsl #12
    bc0a:	bne.n	bc12 <__aeabi_d2uiz+0x3a>
    bc0c:	mov.w	r0, #4294967295
    bc10:	bx	lr
    bc12:	mov.w	r0, #0
    bc16:	bx	lr

0000bc18 <__aeabi_d2f>:
    bc18:	mov.w	r2, r1, lsl #1
    bc1c:	subs.w	r3, r2, #1879048192	; 0x70000000
    bc20:	itt	cs
    bc22:	subscs.w	ip, r3, #2097152	; 0x200000
    bc26:	rsbscs	ip, ip, #532676608	; 0x1fc00000
    bc2a:	bls.n	bc48 <__aeabi_d2f+0x30>
    bc2c:	and.w	ip, r1, #2147483648	; 0x80000000
    bc30:	mov.w	r2, r0, lsl #3
    bc34:	orr.w	r0, ip, r0, lsr #29
    bc38:	cmp.w	r2, #2147483648	; 0x80000000
    bc3c:	adc.w	r0, r0, r3, lsl #2
    bc40:	it	eq
    bc42:	biceq.w	r0, r0, #1
    bc46:	bx	lr
    bc48:	tst.w	r1, #1073741824	; 0x40000000
    bc4c:	bne.n	bc92 <__aeabi_d2f+0x7a>
    bc4e:	adds.w	r2, r3, #48234496	; 0x2e00000
    bc52:	itt	lt
    bc54:	andlt.w	r0, r1, #2147483648	; 0x80000000
    bc58:	bxlt	lr
    bc5a:	orr.w	r1, r1, #1048576	; 0x100000
    bc5e:	mov.w	r2, r2, lsr #21
    bc62:	rsb	r2, r2, #24
    bc66:	rsb	ip, r2, #32
    bc6a:	lsls.w	r3, r0, ip
    bc6e:	lsr.w	r0, r0, r2
    bc72:	it	ne
    bc74:	orrne.w	r0, r0, #1
    bc78:	mov.w	r3, r1, lsl #11
    bc7c:	mov.w	r3, r3, lsr #11
    bc80:	lsl.w	ip, r3, ip
    bc84:	orr.w	r0, r0, ip
    bc88:	lsr.w	r3, r3, r2
    bc8c:	mov.w	r3, r3, lsl #1
    bc90:	b.n	bc2c <__aeabi_d2f+0x14>
    bc92:	mvns.w	r3, r2, asr #21
    bc96:	bne.n	bca8 <__aeabi_d2f+0x90>
    bc98:	orrs.w	r3, r0, r1, lsl #12
    bc9c:	ittt	ne
    bc9e:	movne.w	r0, #2130706432	; 0x7f000000
    bca2:	orrne.w	r0, r0, #12582912	; 0xc00000
    bca6:	bxne	lr
    bca8:	and.w	r0, r1, #2147483648	; 0x80000000
    bcac:	orr.w	r0, r0, #2130706432	; 0x7f000000
    bcb0:	orr.w	r0, r0, #8388608	; 0x800000
    bcb4:	bx	lr
    bcb6:	nop

0000bcb8 <__aeabi_frsub>:
    bcb8:	eor.w	r0, r0, #2147483648	; 0x80000000
    bcbc:	b.n	bcc4 <__addsf3>
    bcbe:	nop

0000bcc0 <__aeabi_fsub>:
    bcc0:	eor.w	r1, r1, #2147483648	; 0x80000000

0000bcc4 <__addsf3>:
    bcc4:	lsls	r2, r0, #1
    bcc6:	itttt	ne
    bcc8:	movsne.w	r3, r1, lsl #1
    bccc:	teqne	r2, r3
    bcd0:	mvnsne.w	ip, r2, asr #24
    bcd4:	mvnsne.w	ip, r3, asr #24
    bcd8:	beq.n	bdb0 <__addsf3+0xec>
    bcda:	mov.w	r2, r2, lsr #24
    bcde:	rsbs	r3, r2, r3, lsr #24
    bce2:	itttt	gt
    bce4:	addgt	r2, r2, r3
    bce6:	eorgt	r1, r0
    bce8:	eorgt	r0, r1
    bcea:	eorgt	r1, r0
    bcec:	it	lt
    bcee:	neglt	r3, r3
    bcf0:	cmp	r3, #25
    bcf2:	it	hi
    bcf4:	bxhi	lr
    bcf6:	tst.w	r0, #2147483648	; 0x80000000
    bcfa:	orr.w	r0, r0, #8388608	; 0x800000
    bcfe:	bic.w	r0, r0, #4278190080	; 0xff000000
    bd02:	it	ne
    bd04:	negne	r0, r0
    bd06:	tst.w	r1, #2147483648	; 0x80000000
    bd0a:	orr.w	r1, r1, #8388608	; 0x800000
    bd0e:	bic.w	r1, r1, #4278190080	; 0xff000000
    bd12:	it	ne
    bd14:	negne	r1, r1
    bd16:	teq	r2, r3
    bd1a:	beq.n	bd9c <__addsf3+0xd8>
    bd1c:	sub.w	r2, r2, #1
    bd20:	asr.w	ip, r1, r3
    bd24:	adds.w	r0, r0, ip
    bd28:	rsb	r3, r3, #32
    bd2c:	lsl.w	r1, r1, r3
    bd30:	and.w	r3, r0, #2147483648	; 0x80000000
    bd34:	bpl.n	bd3c <__addsf3+0x78>
    bd36:	negs	r1, r1
    bd38:	sbc.w	r0, r0, r0, lsl #1
    bd3c:	cmp.w	r0, #8388608	; 0x800000
    bd40:	bcc.n	bd6a <__addsf3+0xa6>
    bd42:	cmp.w	r0, #16777216	; 0x1000000
    bd46:	bcc.n	bd56 <__addsf3+0x92>
    bd48:	lsrs	r0, r0, #1
    bd4a:	mov.w	r1, r1, rrx
    bd4e:	add.w	r2, r2, #1
    bd52:	cmp	r2, #254	; 0xfe
    bd54:	bcs.n	bdfa <__addsf3+0x136>
    bd56:	cmp.w	r1, #2147483648	; 0x80000000
    bd5a:	adc.w	r0, r0, r2, lsl #23
    bd5e:	it	eq
    bd60:	biceq.w	r0, r0, #1
    bd64:	orr.w	r0, r0, r3
    bd68:	bx	lr
    bd6a:	lsls	r1, r1, #1
    bd6c:	adc.w	r0, r0, r0
    bd70:	tst.w	r0, #8388608	; 0x800000
    bd74:	sub.w	r2, r2, #1
    bd78:	bne.n	bd56 <__addsf3+0x92>
    bd7a:	clz	ip, r0
    bd7e:	sub.w	ip, ip, #8
    bd82:	subs.w	r2, r2, ip
    bd86:	lsl.w	r0, r0, ip
    bd8a:	itet	ge
    bd8c:	addge.w	r0, r0, r2, lsl #23
    bd90:	neglt	r2, r2
    bd92:	orrge	r0, r3
    bd94:	itt	lt
    bd96:	lsrlt	r0, r2
    bd98:	orrlt	r0, r3
    bd9a:	bx	lr
    bd9c:	teq	r2, #0
    bda0:	eor.w	r1, r1, #8388608	; 0x800000
    bda4:	itte	eq
    bda6:	eoreq.w	r0, r0, #8388608	; 0x800000
    bdaa:	addeq	r2, #1
    bdac:	subne	r3, #1
    bdae:	b.n	bd1c <__addsf3+0x58>
    bdb0:	mov.w	r3, r1, lsl #1
    bdb4:	mvns.w	ip, r2, asr #24
    bdb8:	it	ne
    bdba:	mvnsne.w	ip, r3, asr #24
    bdbe:	beq.n	be04 <__addsf3+0x140>
    bdc0:	teq	r2, r3
    bdc4:	beq.n	bdd0 <__addsf3+0x10c>
    bdc6:	teq	r2, #0
    bdca:	it	eq
    bdcc:	moveq	r0, r1
    bdce:	bx	lr
    bdd0:	teq	r0, r1
    bdd4:	itt	ne
    bdd6:	movne	r0, #0
    bdd8:	bxne	lr
    bdda:	tst.w	r2, #4278190080	; 0xff000000
    bdde:	bne.n	bdea <__addsf3+0x126>
    bde0:	lsls	r0, r0, #1
    bde2:	it	cs
    bde4:	orrcs.w	r0, r0, #2147483648	; 0x80000000
    bde8:	bx	lr
    bdea:	adds.w	r2, r2, #33554432	; 0x2000000
    bdee:	itt	cc
    bdf0:	addcc.w	r0, r0, #8388608	; 0x800000
    bdf4:	bxcc	lr
    bdf6:	and.w	r3, r0, #2147483648	; 0x80000000
    bdfa:	orr.w	r0, r3, #2130706432	; 0x7f000000
    bdfe:	orr.w	r0, r0, #8388608	; 0x800000
    be02:	bx	lr
    be04:	mvns.w	r2, r2, asr #24
    be08:	itet	ne
    be0a:	movne	r0, r1
    be0c:	mvnseq.w	r3, r3, asr #24
    be10:	movne	r1, r0
    be12:	lsls	r2, r0, #9
    be14:	itte	eq
    be16:	movseq.w	r3, r1, lsl #9
    be1a:	teqeq	r0, r1
    be1e:	orrne.w	r0, r0, #4194304	; 0x400000
    be22:	bx	lr

0000be24 <__aeabi_ui2f>:
    be24:	mov.w	r3, #0
    be28:	b.n	be34 <__aeabi_i2f+0x8>
    be2a:	nop

0000be2c <__aeabi_i2f>:
    be2c:	ands.w	r3, r0, #2147483648	; 0x80000000
    be30:	it	mi
    be32:	negmi	r0, r0
    be34:	movs.w	ip, r0
    be38:	it	eq
    be3a:	bxeq	lr
    be3c:	orr.w	r3, r3, #1258291200	; 0x4b000000
    be40:	mov	r1, r0
    be42:	mov.w	r0, #0
    be46:	b.n	be82 <__aeabi_l2f+0x2a>

0000be48 <__aeabi_ul2f>:
    be48:	orrs.w	r2, r0, r1
    be4c:	it	eq
    be4e:	bxeq	lr
    be50:	mov.w	r3, #0
    be54:	b.n	be6c <__aeabi_l2f+0x14>
    be56:	nop

0000be58 <__aeabi_l2f>:
    be58:	orrs.w	r2, r0, r1
    be5c:	it	eq
    be5e:	bxeq	lr
    be60:	ands.w	r3, r1, #2147483648	; 0x80000000
    be64:	bpl.n	be6c <__aeabi_l2f+0x14>
    be66:	negs	r0, r0
    be68:	sbc.w	r1, r1, r1, lsl #1
    be6c:	movs.w	ip, r1
    be70:	ittt	eq
    be72:	moveq	ip, r0
    be74:	moveq	r1, r0
    be76:	moveq	r0, #0
    be78:	orr.w	r3, r3, #1526726656	; 0x5b000000
    be7c:	it	eq
    be7e:	subeq.w	r3, r3, #268435456	; 0x10000000
    be82:	sub.w	r3, r3, #8388608	; 0x800000
    be86:	clz	r2, ip
    be8a:	subs	r2, #8
    be8c:	sub.w	r3, r3, r2, lsl #23
    be90:	blt.n	beb4 <__aeabi_l2f+0x5c>
    be92:	lsl.w	ip, r1, r2
    be96:	add	r3, ip
    be98:	lsl.w	ip, r0, r2
    be9c:	rsb	r2, r2, #32
    bea0:	cmp.w	ip, #2147483648	; 0x80000000
    bea4:	lsr.w	r2, r0, r2
    bea8:	adc.w	r0, r3, r2
    beac:	it	eq
    beae:	biceq.w	r0, r0, #1
    beb2:	bx	lr
    beb4:	add.w	r2, r2, #32
    beb8:	lsl.w	ip, r1, r2
    bebc:	rsb	r2, r2, #32
    bec0:	orrs.w	r0, r0, ip, lsl #1
    bec4:	lsr.w	r2, r1, r2
    bec8:	adc.w	r0, r3, r2
    becc:	it	eq
    bece:	biceq.w	r0, r0, ip, lsr #31
    bed2:	bx	lr

0000bed4 <__aeabi_ldivmod>:
    bed4:	cbnz	r3, bef6 <__aeabi_ldivmod+0x22>
    bed6:	cbnz	r2, bef6 <__aeabi_ldivmod+0x22>
    bed8:	cmp	r1, #0
    beda:	ittt	lt
    bedc:	movlt	r0, #0
    bede:	movlt.w	r1, #2147483648	; 0x80000000
    bee2:	blt.n	bef2 <__aeabi_ldivmod+0x1e>
    bee4:	it	eq
    bee6:	cmpeq	r0, #0
    bee8:	itt	ne
    beea:	mvnne.w	r1, #2147483648	; 0x80000000
    beee:	movne.w	r0, #4294967295
    bef2:	b.w	c2f8 <__aeabi_idiv0>
    bef6:	sub.w	ip, sp, #8
    befa:	strd	ip, lr, [sp, #-16]!
    befe:	cmp	r1, #0
    bf00:	blt.n	bf16 <__aeabi_ldivmod+0x42>
    bf02:	cmp	r3, #0
    bf04:	blt.n	bf3c <__aeabi_ldivmod+0x68>
    bf06:	bl	c014 <__udivmoddi4>
    bf0a:	ldr.w	lr, [sp, #4]
    bf0e:	ldrd	r2, r3, [sp, #8]
    bf12:	add	sp, #16
    bf14:	bx	lr
    bf16:	negs	r0, r0
    bf18:	sbc.w	r1, r1, r1, lsl #1
    bf1c:	cmp	r3, #0
    bf1e:	blt.n	bf58 <__aeabi_ldivmod+0x84>
    bf20:	bl	c014 <__udivmoddi4>
    bf24:	ldr.w	lr, [sp, #4]
    bf28:	ldrd	r2, r3, [sp, #8]
    bf2c:	add	sp, #16
    bf2e:	negs	r0, r0
    bf30:	sbc.w	r1, r1, r1, lsl #1
    bf34:	negs	r2, r2
    bf36:	sbc.w	r3, r3, r3, lsl #1
    bf3a:	bx	lr
    bf3c:	negs	r2, r2
    bf3e:	sbc.w	r3, r3, r3, lsl #1
    bf42:	bl	c014 <__udivmoddi4>
    bf46:	ldr.w	lr, [sp, #4]
    bf4a:	ldrd	r2, r3, [sp, #8]
    bf4e:	add	sp, #16
    bf50:	negs	r0, r0
    bf52:	sbc.w	r1, r1, r1, lsl #1
    bf56:	bx	lr
    bf58:	negs	r2, r2
    bf5a:	sbc.w	r3, r3, r3, lsl #1
    bf5e:	bl	c014 <__udivmoddi4>
    bf62:	ldr.w	lr, [sp, #4]
    bf66:	ldrd	r2, r3, [sp, #8]
    bf6a:	add	sp, #16
    bf6c:	negs	r2, r2
    bf6e:	sbc.w	r3, r3, r3, lsl #1
    bf72:	bx	lr

0000bf74 <__aeabi_uldivmod>:
    bf74:	cbnz	r3, bf8c <__aeabi_uldivmod+0x18>
    bf76:	cbnz	r2, bf8c <__aeabi_uldivmod+0x18>
    bf78:	cmp	r1, #0
    bf7a:	it	eq
    bf7c:	cmpeq	r0, #0
    bf7e:	itt	ne
    bf80:	movne.w	r1, #4294967295
    bf84:	movne.w	r0, #4294967295
    bf88:	b.w	c2f8 <__aeabi_idiv0>
    bf8c:	sub.w	ip, sp, #8
    bf90:	strd	ip, lr, [sp, #-16]!
    bf94:	bl	c014 <__udivmoddi4>
    bf98:	ldr.w	lr, [sp, #4]
    bf9c:	ldrd	r2, r3, [sp, #8]
    bfa0:	add	sp, #16
    bfa2:	bx	lr

0000bfa4 <__aeabi_f2lz>:
    bfa4:	vmov	s15, r0
    bfa8:	vcmpe.f32	s15, #0.0
    bfac:	vmrs	APSR_nzcv, fpscr
    bfb0:	bmi.n	bfb6 <__aeabi_f2lz+0x12>
    bfb2:	b.w	bfc8 <__aeabi_f2ulz>
    bfb6:	push	{r3, lr}
    bfb8:	eor.w	r0, r0, #2147483648	; 0x80000000
    bfbc:	bl	bfc8 <__aeabi_f2ulz>
    bfc0:	negs	r0, r0
    bfc2:	sbc.w	r1, r1, r1, lsl #1
    bfc6:	pop	{r3, pc}

0000bfc8 <__aeabi_f2ulz>:
    bfc8:	push	{r4, r6, r7, lr}
    bfca:	bl	b580 <__aeabi_f2d>
    bfce:	movs	r2, #0
    bfd0:	ldr	r3, [pc, #56]	; (c00c <__aeabi_f2ulz+0x44>)
    bfd2:	mov	r6, r0
    bfd4:	mov	r7, r1
    bfd6:	bl	b628 <__aeabi_dmul>
    bfda:	bl	bbd8 <__aeabi_d2uiz>
    bfde:	mov	r4, r0
    bfe0:	bl	b53c <__aeabi_ui2d>
    bfe4:	movs	r2, #0
    bfe6:	ldr	r3, [pc, #40]	; (c010 <__aeabi_f2ulz+0x48>)
    bfe8:	bl	b628 <__aeabi_dmul>
    bfec:	mov	r2, r0
    bfee:	mov	r3, r1
    bff0:	mov	r0, r6
    bff2:	mov	r1, r7
    bff4:	bl	b2c0 <__aeabi_dsub>
    bff8:	bl	bbd8 <__aeabi_d2uiz>
    bffc:	mov	r3, r4
    bffe:	movs	r2, #0
    c000:	orr.w	r2, r2, r0
    c004:	mov	r0, r2
    c006:	mov	r1, r3
    c008:	pop	{r4, r6, r7, pc}
    c00a:	nop
    c00c:	.word	0x3df00000
    c010:	.word	0x41f00000

0000c014 <__udivmoddi4>:
    c014:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c018:	mov	ip, r1
    c01a:	mov	r6, r1
    c01c:	mov	r4, r0
    c01e:	ldr	r5, [sp, #32]
    c020:	cmp	r3, #0
    c022:	bne.n	c0c6 <__udivmoddi4+0xb2>
    c024:	cmp	r2, r1
    c026:	mov	r7, r2
    c028:	bls.n	c104 <__udivmoddi4+0xf0>
    c02a:	clz	lr, r2
    c02e:	cmp.w	lr, #0
    c032:	beq.n	c04c <__udivmoddi4+0x38>
    c034:	rsb	r4, lr, #32
    c038:	lsr.w	r4, r0, r4
    c03c:	lsl.w	r6, r1, lr
    c040:	orr.w	ip, r4, r6
    c044:	lsl.w	r7, r2, lr
    c048:	lsl.w	r4, r0, lr
    c04c:	mov.w	r9, r7, lsr #16
    c050:	lsrs	r2, r4, #16
    c052:	udiv	r0, ip, r9
    c056:	uxth.w	r8, r7
    c05a:	mls	r6, r9, r0, ip
    c05e:	orr.w	r6, r2, r6, lsl #16
    c062:	mul.w	r3, r0, r8
    c066:	cmp	r3, r6
    c068:	bls.n	c07e <__udivmoddi4+0x6a>
    c06a:	adds	r6, r6, r7
    c06c:	add.w	r2, r0, #4294967295
    c070:	bcs.w	c2b8 <__udivmoddi4+0x2a4>
    c074:	cmp	r3, r6
    c076:	bls.w	c2b8 <__udivmoddi4+0x2a4>
    c07a:	subs	r0, #2
    c07c:	add	r6, r7
    c07e:	subs	r6, r6, r3
    c080:	uxth	r2, r4
    c082:	udiv	r3, r6, r9
    c086:	mls	r6, r9, r3, r6
    c08a:	orr.w	r4, r2, r6, lsl #16
    c08e:	mul.w	r8, r3, r8
    c092:	cmp	r8, r4
    c094:	bls.n	c0aa <__udivmoddi4+0x96>
    c096:	adds	r4, r4, r7
    c098:	add.w	r2, r3, #4294967295
    c09c:	bcs.w	c2b4 <__udivmoddi4+0x2a0>
    c0a0:	cmp	r8, r4
    c0a2:	bls.w	c2b4 <__udivmoddi4+0x2a0>
    c0a6:	subs	r3, #2
    c0a8:	add	r4, r7
    c0aa:	rsb	r4, r8, r4
    c0ae:	orr.w	r0, r3, r0, lsl #16
    c0b2:	movs	r1, #0
    c0b4:	cmp	r5, #0
    c0b6:	beq.n	c17e <__udivmoddi4+0x16a>
    c0b8:	lsr.w	r4, r4, lr
    c0bc:	movs	r3, #0
    c0be:	str	r4, [r5, #0]
    c0c0:	str	r3, [r5, #4]
    c0c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c0c6:	cmp	r3, r1
    c0c8:	bls.n	c0da <__udivmoddi4+0xc6>
    c0ca:	cmp	r5, #0
    c0cc:	beq.n	c17a <__udivmoddi4+0x166>
    c0ce:	movs	r1, #0
    c0d0:	stmia.w	r5, {r0, r6}
    c0d4:	mov	r0, r1
    c0d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c0da:	clz	r1, r3
    c0de:	cmp	r1, #0
    c0e0:	bne.w	c204 <__udivmoddi4+0x1f0>
    c0e4:	cmp	r3, r6
    c0e6:	bcc.n	c0ee <__udivmoddi4+0xda>
    c0e8:	cmp	r2, r0
    c0ea:	bhi.w	c2de <__udivmoddi4+0x2ca>
    c0ee:	subs	r4, r0, r2
    c0f0:	sbc.w	r6, r6, r3
    c0f4:	movs	r0, #1
    c0f6:	mov	ip, r6
    c0f8:	cmp	r5, #0
    c0fa:	beq.n	c17e <__udivmoddi4+0x16a>
    c0fc:	stmia.w	r5, {r4, ip}
    c100:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c104:	cbnz	r2, c10c <__udivmoddi4+0xf8>
    c106:	movs	r7, #1
    c108:	udiv	r7, r7, r2
    c10c:	clz	lr, r7
    c110:	cmp.w	lr, #0
    c114:	bne.n	c182 <__udivmoddi4+0x16e>
    c116:	subs	r3, r6, r7
    c118:	mov.w	r8, r7, lsr #16
    c11c:	uxth.w	ip, r7
    c120:	movs	r1, #1
    c122:	udiv	r0, r3, r8
    c126:	lsrs	r2, r4, #16
    c128:	mls	r6, r8, r0, r3
    c12c:	orr.w	r6, r2, r6, lsl #16
    c130:	mul.w	r3, ip, r0
    c134:	cmp	r3, r6
    c136:	bls.n	c148 <__udivmoddi4+0x134>
    c138:	adds	r6, r6, r7
    c13a:	add.w	r2, r0, #4294967295
    c13e:	bcs.n	c146 <__udivmoddi4+0x132>
    c140:	cmp	r3, r6
    c142:	bhi.w	c2e2 <__udivmoddi4+0x2ce>
    c146:	mov	r0, r2
    c148:	subs	r6, r6, r3
    c14a:	uxth	r2, r4
    c14c:	udiv	r3, r6, r8
    c150:	mls	r6, r8, r3, r6
    c154:	orr.w	r4, r2, r6, lsl #16
    c158:	mul.w	ip, ip, r3
    c15c:	cmp	ip, r4
    c15e:	bls.n	c170 <__udivmoddi4+0x15c>
    c160:	adds	r4, r4, r7
    c162:	add.w	r2, r3, #4294967295
    c166:	bcs.n	c16e <__udivmoddi4+0x15a>
    c168:	cmp	ip, r4
    c16a:	bhi.w	c2d8 <__udivmoddi4+0x2c4>
    c16e:	mov	r3, r2
    c170:	rsb	r4, ip, r4
    c174:	orr.w	r0, r3, r0, lsl #16
    c178:	b.n	c0b4 <__udivmoddi4+0xa0>
    c17a:	mov	r1, r5
    c17c:	mov	r0, r5
    c17e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c182:	rsb	r1, lr, #32
    c186:	lsl.w	r3, r6, lr
    c18a:	lsl.w	r7, r7, lr
    c18e:	lsr.w	r9, r0, r1
    c192:	mov.w	r8, r7, lsr #16
    c196:	lsrs	r6, r1
    c198:	orr.w	r9, r9, r3
    c19c:	udiv	sl, r6, r8
    c1a0:	mov.w	r4, r9, lsr #16
    c1a4:	mls	r6, r8, sl, r6
    c1a8:	uxth.w	ip, r7
    c1ac:	orr.w	r3, r4, r6, lsl #16
    c1b0:	mul.w	r2, sl, ip
    c1b4:	cmp	r2, r3
    c1b6:	lsl.w	r4, r0, lr
    c1ba:	bls.n	c1d2 <__udivmoddi4+0x1be>
    c1bc:	adds	r3, r3, r7
    c1be:	add.w	r1, sl, #4294967295
    c1c2:	bcs.w	c2d4 <__udivmoddi4+0x2c0>
    c1c6:	cmp	r2, r3
    c1c8:	bls.w	c2d4 <__udivmoddi4+0x2c0>
    c1cc:	sub.w	sl, sl, #2
    c1d0:	add	r3, r7
    c1d2:	subs	r3, r3, r2
    c1d4:	uxth.w	r9, r9
    c1d8:	udiv	r1, r3, r8
    c1dc:	mls	r3, r8, r1, r3
    c1e0:	orr.w	r3, r9, r3, lsl #16
    c1e4:	mul.w	r6, r1, ip
    c1e8:	cmp	r6, r3
    c1ea:	bls.n	c1fc <__udivmoddi4+0x1e8>
    c1ec:	adds	r3, r3, r7
    c1ee:	add.w	r2, r1, #4294967295
    c1f2:	bcs.n	c2cc <__udivmoddi4+0x2b8>
    c1f4:	cmp	r6, r3
    c1f6:	bls.n	c2cc <__udivmoddi4+0x2b8>
    c1f8:	subs	r1, #2
    c1fa:	add	r3, r7
    c1fc:	subs	r3, r3, r6
    c1fe:	orr.w	r1, r1, sl, lsl #16
    c202:	b.n	c122 <__udivmoddi4+0x10e>
    c204:	rsb	lr, r1, #32
    c208:	lsr.w	r4, r2, lr
    c20c:	lsls	r3, r1
    c20e:	orrs	r3, r4
    c210:	lsr.w	r7, r0, lr
    c214:	lsl.w	r4, r6, r1
    c218:	mov.w	ip, r3, lsr #16
    c21c:	lsr.w	r6, r6, lr
    c220:	orrs	r4, r7
    c222:	udiv	r9, r6, ip
    c226:	lsrs	r7, r4, #16
    c228:	mls	r6, ip, r9, r6
    c22c:	uxth.w	r8, r3
    c230:	orr.w	r6, r7, r6, lsl #16
    c234:	mul.w	r7, r9, r8
    c238:	cmp	r7, r6
    c23a:	lsl.w	r2, r2, r1
    c23e:	lsl.w	sl, r0, r1
    c242:	bls.n	c256 <__udivmoddi4+0x242>
    c244:	adds	r6, r6, r3
    c246:	add.w	r0, r9, #4294967295
    c24a:	bcs.n	c2d0 <__udivmoddi4+0x2bc>
    c24c:	cmp	r7, r6
    c24e:	bls.n	c2d0 <__udivmoddi4+0x2bc>
    c250:	sub.w	r9, r9, #2
    c254:	add	r6, r3
    c256:	subs	r6, r6, r7
    c258:	uxth	r0, r4
    c25a:	udiv	r4, r6, ip
    c25e:	mls	r6, ip, r4, r6
    c262:	orr.w	r7, r0, r6, lsl #16
    c266:	mul.w	r8, r4, r8
    c26a:	cmp	r8, r7
    c26c:	bls.n	c27e <__udivmoddi4+0x26a>
    c26e:	adds	r7, r7, r3
    c270:	add.w	r0, r4, #4294967295
    c274:	bcs.n	c2c8 <__udivmoddi4+0x2b4>
    c276:	cmp	r8, r7
    c278:	bls.n	c2c8 <__udivmoddi4+0x2b4>
    c27a:	subs	r4, #2
    c27c:	add	r7, r3
    c27e:	orr.w	r0, r4, r9, lsl #16
    c282:	rsb	r7, r8, r7
    c286:	umull	r8, r9, r0, r2
    c28a:	cmp	r7, r9
    c28c:	mov	r4, r8
    c28e:	mov	r6, r9
    c290:	bcc.n	c2bc <__udivmoddi4+0x2a8>
    c292:	beq.n	c2e8 <__udivmoddi4+0x2d4>
    c294:	cbz	r5, c2f0 <__udivmoddi4+0x2dc>
    c296:	subs.w	r3, sl, r4
    c29a:	sbc.w	r7, r7, r6
    c29e:	lsl.w	lr, r7, lr
    c2a2:	lsrs	r3, r1
    c2a4:	lsrs	r7, r1
    c2a6:	orr.w	r3, lr, r3
    c2aa:	stmia.w	r5, {r3, r7}
    c2ae:	movs	r1, #0
    c2b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c2b4:	mov	r3, r2
    c2b6:	b.n	c0aa <__udivmoddi4+0x96>
    c2b8:	mov	r0, r2
    c2ba:	b.n	c07e <__udivmoddi4+0x6a>
    c2bc:	subs.w	r4, r8, r2
    c2c0:	sbc.w	r6, r9, r3
    c2c4:	subs	r0, #1
    c2c6:	b.n	c294 <__udivmoddi4+0x280>
    c2c8:	mov	r4, r0
    c2ca:	b.n	c27e <__udivmoddi4+0x26a>
    c2cc:	mov	r1, r2
    c2ce:	b.n	c1fc <__udivmoddi4+0x1e8>
    c2d0:	mov	r9, r0
    c2d2:	b.n	c256 <__udivmoddi4+0x242>
    c2d4:	mov	sl, r1
    c2d6:	b.n	c1d2 <__udivmoddi4+0x1be>
    c2d8:	subs	r3, #2
    c2da:	add	r4, r7
    c2dc:	b.n	c170 <__udivmoddi4+0x15c>
    c2de:	mov	r0, r1
    c2e0:	b.n	c0f8 <__udivmoddi4+0xe4>
    c2e2:	subs	r0, #2
    c2e4:	add	r6, r7
    c2e6:	b.n	c148 <__udivmoddi4+0x134>
    c2e8:	cmp	sl, r8
    c2ea:	bcc.n	c2bc <__udivmoddi4+0x2a8>
    c2ec:	mov	r6, r7
    c2ee:	b.n	c294 <__udivmoddi4+0x280>
    c2f0:	mov	r1, r5
    c2f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c2f6:	nop

0000c2f8 <__aeabi_idiv0>:
    c2f8:	bx	lr
    c2fa:	nop

0000c2fc <__aeabi_atexit>:
    c2fc:	mov	r3, r1
    c2fe:	mov	r1, r0
    c300:	mov	r0, r3
    c302:	b.w	c308 <__cxa_atexit>
    c306:	nop

0000c308 <__cxa_atexit>:
    c308:	mov	r3, r2
    c30a:	mov	r2, r1
    c30c:	mov	r1, r0
    c30e:	movs	r0, #2
    c310:	b.w	10928 <__register_exitproc>

0000c314 <__errno>:
    c314:	ldr	r3, [pc, #4]	; (c31c <__errno+0x8>)
    c316:	ldr	r0, [r3, #0]
    c318:	bx	lr
    c31a:	nop
    c31c:	.word	0x1fff0d78

0000c320 <__libc_init_array>:
    c320:	push	{r4, r5, r6, lr}
    c322:	ldr	r6, [pc, #60]	; (c360 <__libc_init_array+0x40>)
    c324:	ldr	r5, [pc, #60]	; (c364 <__libc_init_array+0x44>)
    c326:	subs	r6, r6, r5
    c328:	asrs	r6, r6, #2
    c32a:	it	ne
    c32c:	movne	r4, #0
    c32e:	beq.n	c33c <__libc_init_array+0x1c>
    c330:	adds	r4, #1
    c332:	ldr.w	r3, [r5], #4
    c336:	blx	r3
    c338:	cmp	r6, r4
    c33a:	bne.n	c330 <__libc_init_array+0x10>
    c33c:	ldr	r6, [pc, #40]	; (c368 <__libc_init_array+0x48>)
    c33e:	ldr	r5, [pc, #44]	; (c36c <__libc_init_array+0x4c>)
    c340:	subs	r6, r6, r5
    c342:	bl	1434c <_init>
    c346:	asrs	r6, r6, #2
    c348:	it	ne
    c34a:	movne	r4, #0
    c34c:	beq.n	c35c <__libc_init_array+0x3c>
    c34e:	adds	r4, #1
    c350:	ldr.w	r3, [r5], #4
    c354:	blx	r3
    c356:	cmp	r6, r4
    c358:	bne.n	c34e <__libc_init_array+0x2e>
    c35a:	pop	{r4, r5, r6, pc}
    c35c:	pop	{r4, r5, r6, pc}
    c35e:	nop
    c360:	.word	0x00014358
    c364:	.word	0x00014358
    c368:	.word	0x00014364
    c36c:	.word	0x00014358

0000c370 <__get_current_locale>:
    c370:	ldr	r2, [pc, #12]	; (c380 <__get_current_locale+0x10>)
    c372:	ldr	r3, [pc, #16]	; (c384 <__get_current_locale+0x14>)
    c374:	ldr	r2, [r2, #0]
    c376:	ldr	r0, [r2, #52]	; 0x34
    c378:	cmp	r0, #0
    c37a:	it	eq
    c37c:	moveq	r0, r3
    c37e:	bx	lr
    c380:	.word	0x1fff0d78
    c384:	.word	0x1fff0d7c

0000c388 <__locale_mb_cur_max>:
    c388:	ldr	r3, [pc, #16]	; (c39c <__locale_mb_cur_max+0x14>)
    c38a:	ldr	r2, [pc, #20]	; (c3a0 <__locale_mb_cur_max+0x18>)
    c38c:	ldr	r3, [r3, #0]
    c38e:	ldr	r3, [r3, #52]	; 0x34
    c390:	cmp	r3, #0
    c392:	it	eq
    c394:	moveq	r3, r2
    c396:	ldrb.w	r0, [r3, #296]	; 0x128
    c39a:	bx	lr
    c39c:	.word	0x1fff0d78
    c3a0:	.word	0x1fff0d7c

0000c3a4 <__locale_ctype_ptr_l>:
    c3a4:	ldr.w	r0, [r0, #236]	; 0xec
    c3a8:	bx	lr
    c3aa:	nop

0000c3ac <__locale_ctype_ptr>:
    c3ac:	push	{r3, lr}
    c3ae:	ldr	r3, [pc, #12]	; (c3bc <__locale_ctype_ptr+0x10>)
    c3b0:	ldr	r0, [r3, #0]
    c3b2:	bl	c370 <__get_current_locale>
    c3b6:	ldr.w	r0, [r0, #236]	; 0xec
    c3ba:	pop	{r3, pc}
    c3bc:	.word	0x1fff0d78

0000c3c0 <malloc>:
    c3c0:	ldr	r3, [pc, #8]	; (c3cc <malloc+0xc>)
    c3c2:	mov	r1, r0
    c3c4:	ldr	r0, [r3, #0]
    c3c6:	b.w	c3e0 <_malloc_r>
    c3ca:	nop
    c3cc:	.word	0x1fff0d78

0000c3d0 <free>:
    c3d0:	ldr	r3, [pc, #8]	; (c3dc <free+0xc>)
    c3d2:	mov	r1, r0
    c3d4:	ldr	r0, [r3, #0]
    c3d6:	b.w	11a10 <_free_r>
    c3da:	nop
    c3dc:	.word	0x1fff0d78

0000c3e0 <_malloc_r>:
    c3e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c3e4:	add.w	r5, r1, #11
    c3e8:	cmp	r5, #22
    c3ea:	sub	sp, #12
    c3ec:	mov	r6, r0
    c3ee:	bls.w	c530 <_malloc_r+0x150>
    c3f2:	bics.w	r5, r5, #7
    c3f6:	bmi.w	c578 <_malloc_r+0x198>
    c3fa:	cmp	r1, r5
    c3fc:	bhi.w	c578 <_malloc_r+0x198>
    c400:	bl	cb44 <__malloc_lock>
    c404:	cmp.w	r5, #504	; 0x1f8
    c408:	bcc.w	c944 <_malloc_r+0x564>
    c40c:	lsrs	r3, r5, #9
    c40e:	beq.w	c586 <_malloc_r+0x1a6>
    c412:	cmp	r3, #4
    c414:	bhi.w	c71e <_malloc_r+0x33e>
    c418:	lsrs	r0, r5, #6
    c41a:	add.w	lr, r0, #57	; 0x39
    c41e:	mov.w	r3, lr, lsl #1
    c422:	adds	r0, #56	; 0x38
    c424:	ldr	r7, [pc, #784]	; (c738 <_malloc_r+0x358>)
    c426:	add.w	r3, r7, r3, lsl #2
    c42a:	sub.w	r1, r3, #8
    c42e:	ldr	r4, [r3, #4]
    c430:	cmp	r1, r4
    c432:	bne.n	c444 <_malloc_r+0x64>
    c434:	b.n	c590 <_malloc_r+0x1b0>
    c436:	cmp	r2, #0
    c438:	bge.w	c594 <_malloc_r+0x1b4>
    c43c:	ldr	r4, [r4, #12]
    c43e:	cmp	r1, r4
    c440:	beq.w	c590 <_malloc_r+0x1b0>
    c444:	ldr	r3, [r4, #4]
    c446:	bic.w	r3, r3, #3
    c44a:	subs	r2, r3, r5
    c44c:	cmp	r2, #15
    c44e:	ble.n	c436 <_malloc_r+0x56>
    c450:	ldr	r1, [pc, #740]	; (c738 <_malloc_r+0x358>)
    c452:	ldr	r4, [r7, #16]
    c454:	add.w	lr, r1, #8
    c458:	cmp	r4, lr
    c45a:	beq.w	c7c4 <_malloc_r+0x3e4>
    c45e:	ldr	r3, [r4, #4]
    c460:	bic.w	r3, r3, #3
    c464:	subs	r2, r3, r5
    c466:	cmp	r2, #15
    c468:	bgt.w	c79e <_malloc_r+0x3be>
    c46c:	cmp	r2, #0
    c46e:	str.w	lr, [r1, #20]
    c472:	str.w	lr, [r1, #16]
    c476:	bge.w	c5b6 <_malloc_r+0x1d6>
    c47a:	cmp.w	r3, #512	; 0x200
    c47e:	bcs.w	c750 <_malloc_r+0x370>
    c482:	lsrs	r3, r3, #3
    c484:	add.w	ip, r3, #1
    c488:	movs	r2, #1
    c48a:	asrs	r3, r3, #2
    c48c:	lsl.w	r3, r2, r3
    c490:	ldr	r2, [r1, #4]
    c492:	ldr.w	r8, [r1, ip, lsl #3]
    c496:	str.w	r8, [r4, #8]
    c49a:	add.w	r9, r1, ip, lsl #3
    c49e:	orrs	r2, r3
    c4a0:	sub.w	r3, r9, #8
    c4a4:	str	r3, [r4, #12]
    c4a6:	str	r2, [r1, #4]
    c4a8:	str.w	r4, [r1, ip, lsl #3]
    c4ac:	str.w	r4, [r8, #12]
    c4b0:	asrs	r3, r0, #2
    c4b2:	movs	r4, #1
    c4b4:	lsls	r4, r3
    c4b6:	cmp	r4, r2
    c4b8:	bhi.w	c5d0 <_malloc_r+0x1f0>
    c4bc:	tst	r4, r2
    c4be:	bne.n	c4ce <_malloc_r+0xee>
    c4c0:	bic.w	r0, r0, #3
    c4c4:	lsls	r4, r4, #1
    c4c6:	tst	r4, r2
    c4c8:	add.w	r0, r0, #4
    c4cc:	beq.n	c4c4 <_malloc_r+0xe4>
    c4ce:	add.w	r9, r7, r0, lsl #3
    c4d2:	mov	ip, r9
    c4d4:	mov	r8, r0
    c4d6:	ldr.w	r1, [ip, #12]
    c4da:	cmp	ip, r1
    c4dc:	bne.n	c4ee <_malloc_r+0x10e>
    c4de:	b.n	c7c8 <_malloc_r+0x3e8>
    c4e0:	cmp	r2, #0
    c4e2:	bge.w	c7e8 <_malloc_r+0x408>
    c4e6:	ldr	r1, [r1, #12]
    c4e8:	cmp	ip, r1
    c4ea:	beq.w	c7c8 <_malloc_r+0x3e8>
    c4ee:	ldr	r3, [r1, #4]
    c4f0:	bic.w	r3, r3, #3
    c4f4:	subs	r2, r3, r5
    c4f6:	cmp	r2, #15
    c4f8:	ble.n	c4e0 <_malloc_r+0x100>
    c4fa:	mov	r4, r1
    c4fc:	ldr.w	ip, [r1, #12]
    c500:	ldr.w	r8, [r4, #8]!
    c504:	adds	r3, r1, r5
    c506:	orr.w	r5, r5, #1
    c50a:	str	r5, [r1, #4]
    c50c:	orr.w	r1, r2, #1
    c510:	str.w	ip, [r8, #12]
    c514:	mov	r0, r6
    c516:	str.w	r8, [ip, #8]
    c51a:	str	r3, [r7, #20]
    c51c:	str	r3, [r7, #16]
    c51e:	str.w	lr, [r3, #12]
    c522:	str.w	lr, [r3, #8]
    c526:	str	r1, [r3, #4]
    c528:	str	r2, [r3, r2]
    c52a:	bl	cb48 <__malloc_unlock>
    c52e:	b.n	c570 <_malloc_r+0x190>
    c530:	cmp	r1, #16
    c532:	bhi.n	c578 <_malloc_r+0x198>
    c534:	bl	cb44 <__malloc_lock>
    c538:	movs	r5, #16
    c53a:	movs	r3, #6
    c53c:	movs	r0, #2
    c53e:	ldr	r7, [pc, #504]	; (c738 <_malloc_r+0x358>)
    c540:	add.w	r3, r7, r3, lsl #2
    c544:	sub.w	r2, r3, #8
    c548:	ldr	r4, [r3, #4]
    c54a:	cmp	r4, r2
    c54c:	beq.w	c7da <_malloc_r+0x3fa>
    c550:	ldr	r3, [r4, #4]
    c552:	ldr	r1, [r4, #12]
    c554:	ldr	r5, [r4, #8]
    c556:	bic.w	r3, r3, #3
    c55a:	add	r3, r4
    c55c:	mov	r0, r6
    c55e:	ldr	r2, [r3, #4]
    c560:	str	r1, [r5, #12]
    c562:	orr.w	r2, r2, #1
    c566:	str	r5, [r1, #8]
    c568:	str	r2, [r3, #4]
    c56a:	bl	cb48 <__malloc_unlock>
    c56e:	adds	r4, #8
    c570:	mov	r0, r4
    c572:	add	sp, #12
    c574:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c578:	movs	r4, #0
    c57a:	movs	r3, #12
    c57c:	mov	r0, r4
    c57e:	str	r3, [r6, #0]
    c580:	add	sp, #12
    c582:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c586:	movs	r3, #128	; 0x80
    c588:	mov.w	lr, #64	; 0x40
    c58c:	movs	r0, #63	; 0x3f
    c58e:	b.n	c424 <_malloc_r+0x44>
    c590:	mov	r0, lr
    c592:	b.n	c450 <_malloc_r+0x70>
    c594:	add	r3, r4
    c596:	ldr	r1, [r4, #12]
    c598:	ldr	r2, [r3, #4]
    c59a:	ldr	r5, [r4, #8]
    c59c:	orr.w	r2, r2, #1
    c5a0:	str	r1, [r5, #12]
    c5a2:	mov	r0, r6
    c5a4:	str	r5, [r1, #8]
    c5a6:	str	r2, [r3, #4]
    c5a8:	bl	cb48 <__malloc_unlock>
    c5ac:	adds	r4, #8
    c5ae:	mov	r0, r4
    c5b0:	add	sp, #12
    c5b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5b6:	add	r3, r4
    c5b8:	mov	r0, r6
    c5ba:	ldr	r2, [r3, #4]
    c5bc:	orr.w	r2, r2, #1
    c5c0:	str	r2, [r3, #4]
    c5c2:	bl	cb48 <__malloc_unlock>
    c5c6:	adds	r4, #8
    c5c8:	mov	r0, r4
    c5ca:	add	sp, #12
    c5cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5d0:	ldr	r4, [r7, #8]
    c5d2:	ldr	r3, [r4, #4]
    c5d4:	bic.w	r8, r3, #3
    c5d8:	cmp	r8, r5
    c5da:	bcc.n	c5e6 <_malloc_r+0x206>
    c5dc:	rsb	r3, r5, r8
    c5e0:	cmp	r3, #15
    c5e2:	bgt.w	c6fe <_malloc_r+0x31e>
    c5e6:	ldr	r3, [pc, #340]	; (c73c <_malloc_r+0x35c>)
    c5e8:	ldr.w	r9, [pc, #352]	; c74c <_malloc_r+0x36c>
    c5ec:	ldr	r2, [r3, #0]
    c5ee:	ldr.w	r3, [r9]
    c5f2:	adds	r3, #1
    c5f4:	add	r2, r5
    c5f6:	add.w	sl, r4, r8
    c5fa:	beq.w	c8be <_malloc_r+0x4de>
    c5fe:	add.w	r2, r2, #4096	; 0x1000
    c602:	adds	r2, #15
    c604:	bic.w	r2, r2, #4080	; 0xff0
    c608:	bic.w	r2, r2, #15
    c60c:	mov	r1, r2
    c60e:	mov	r0, r6
    c610:	str	r2, [sp, #4]
    c612:	bl	cf2c <_sbrk_r>
    c616:	cmp.w	r0, #4294967295
    c61a:	mov	fp, r0
    c61c:	ldr	r2, [sp, #4]
    c61e:	beq.w	c8d2 <_malloc_r+0x4f2>
    c622:	cmp	sl, r0
    c624:	bhi.w	c820 <_malloc_r+0x440>
    c628:	ldr	r3, [pc, #276]	; (c740 <_malloc_r+0x360>)
    c62a:	ldr	r1, [r3, #0]
    c62c:	cmp	sl, fp
    c62e:	add	r1, r2
    c630:	str	r1, [r3, #0]
    c632:	beq.w	c8dc <_malloc_r+0x4fc>
    c636:	ldr.w	r0, [r9]
    c63a:	ldr.w	lr, [pc, #272]	; c74c <_malloc_r+0x36c>
    c63e:	adds	r0, #1
    c640:	ittet	ne
    c642:	rsbne	sl, sl, fp
    c646:	addne	r1, sl
    c648:	streq.w	fp, [lr]
    c64c:	strne	r1, [r3, #0]
    c64e:	ands.w	r1, fp, #7
    c652:	beq.w	c884 <_malloc_r+0x4a4>
    c656:	rsb	r0, r1, #8
    c65a:	rsb	r1, r1, #4096	; 0x1000
    c65e:	add	fp, r0
    c660:	adds	r1, #8
    c662:	add	r2, fp
    c664:	ubfx	r2, r2, #0, #12
    c668:	rsb	r9, r2, r1
    c66c:	mov	r1, r9
    c66e:	mov	r0, r6
    c670:	str	r3, [sp, #4]
    c672:	bl	cf2c <_sbrk_r>
    c676:	adds	r3, r0, #1
    c678:	ldr	r3, [sp, #4]
    c67a:	beq.w	c8fc <_malloc_r+0x51c>
    c67e:	rsb	r2, fp, r0
    c682:	add	r2, r9
    c684:	orr.w	r2, r2, #1
    c688:	ldr	r1, [r3, #0]
    c68a:	str.w	fp, [r7, #8]
    c68e:	add	r1, r9
    c690:	cmp	r4, r7
    c692:	str.w	r2, [fp, #4]
    c696:	str	r1, [r3, #0]
    c698:	ldr.w	r9, [pc, #164]	; c740 <_malloc_r+0x360>
    c69c:	beq.n	c6cc <_malloc_r+0x2ec>
    c69e:	cmp.w	r8, #15
    c6a2:	bls.w	c8a0 <_malloc_r+0x4c0>
    c6a6:	ldr	r2, [r4, #4]
    c6a8:	sub.w	r3, r8, #12
    c6ac:	bic.w	r3, r3, #7
    c6b0:	adds	r0, r4, r3
    c6b2:	and.w	r2, r2, #1
    c6b6:	mov.w	lr, #5
    c6ba:	orrs	r2, r3
    c6bc:	cmp	r3, #15
    c6be:	str	r2, [r4, #4]
    c6c0:	str.w	lr, [r0, #4]
    c6c4:	str.w	lr, [r0, #8]
    c6c8:	bhi.w	c904 <_malloc_r+0x524>
    c6cc:	ldr	r3, [pc, #116]	; (c744 <_malloc_r+0x364>)
    c6ce:	ldr	r4, [r7, #8]
    c6d0:	ldr	r2, [r3, #0]
    c6d2:	cmp	r1, r2
    c6d4:	it	hi
    c6d6:	strhi	r1, [r3, #0]
    c6d8:	ldr	r3, [pc, #108]	; (c748 <_malloc_r+0x368>)
    c6da:	ldr	r2, [r3, #0]
    c6dc:	cmp	r1, r2
    c6de:	ldr	r2, [r4, #4]
    c6e0:	it	hi
    c6e2:	strhi	r1, [r3, #0]
    c6e4:	bic.w	r2, r2, #3
    c6e8:	cmp	r5, r2
    c6ea:	sub.w	r3, r2, r5
    c6ee:	bhi.n	c6f4 <_malloc_r+0x314>
    c6f0:	cmp	r3, #15
    c6f2:	bgt.n	c6fe <_malloc_r+0x31e>
    c6f4:	mov	r0, r6
    c6f6:	bl	cb48 <__malloc_unlock>
    c6fa:	movs	r4, #0
    c6fc:	b.n	c570 <_malloc_r+0x190>
    c6fe:	adds	r2, r4, r5
    c700:	orr.w	r3, r3, #1
    c704:	orr.w	r5, r5, #1
    c708:	str	r5, [r4, #4]
    c70a:	mov	r0, r6
    c70c:	str	r2, [r7, #8]
    c70e:	str	r3, [r2, #4]
    c710:	bl	cb48 <__malloc_unlock>
    c714:	adds	r4, #8
    c716:	mov	r0, r4
    c718:	add	sp, #12
    c71a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c71e:	cmp	r3, #20
    c720:	bls.n	c806 <_malloc_r+0x426>
    c722:	cmp	r3, #84	; 0x54
    c724:	bhi.w	c870 <_malloc_r+0x490>
    c728:	lsrs	r0, r5, #12
    c72a:	add.w	lr, r0, #111	; 0x6f
    c72e:	mov.w	r3, lr, lsl #1
    c732:	adds	r0, #110	; 0x6e
    c734:	b.n	c424 <_malloc_r+0x44>
    c736:	nop
    c738:	.word	0x1fff0ee8
    c73c:	.word	0x200204d4
    c740:	.word	0x200204d8
    c744:	.word	0x200204d0
    c748:	.word	0x200204cc
    c74c:	.word	0x1fff12f4
    c750:	lsrs	r2, r3, #9
    c752:	cmp	r2, #4
    c754:	bls.n	c814 <_malloc_r+0x434>
    c756:	cmp	r2, #20
    c758:	bhi.w	c8c2 <_malloc_r+0x4e2>
    c75c:	add.w	r1, r2, #92	; 0x5c
    c760:	lsls	r1, r1, #1
    c762:	adds	r2, #91	; 0x5b
    c764:	add.w	ip, r7, r1, lsl #2
    c768:	ldr.w	r1, [r7, r1, lsl #2]
    c76c:	ldr.w	r8, [pc, #476]	; c94c <_malloc_r+0x56c>
    c770:	sub.w	ip, ip, #8
    c774:	cmp	ip, r1
    c776:	beq.w	c88a <_malloc_r+0x4aa>
    c77a:	ldr	r2, [r1, #4]
    c77c:	bic.w	r2, r2, #3
    c780:	cmp	r3, r2
    c782:	bcs.n	c78a <_malloc_r+0x3aa>
    c784:	ldr	r1, [r1, #8]
    c786:	cmp	ip, r1
    c788:	bne.n	c77a <_malloc_r+0x39a>
    c78a:	ldr.w	ip, [r1, #12]
    c78e:	ldr	r2, [r7, #4]
    c790:	str.w	ip, [r4, #12]
    c794:	str	r1, [r4, #8]
    c796:	str.w	r4, [ip, #8]
    c79a:	str	r4, [r1, #12]
    c79c:	b.n	c4b0 <_malloc_r+0xd0>
    c79e:	adds	r3, r4, r5
    c7a0:	orr.w	r7, r2, #1
    c7a4:	orr.w	r5, r5, #1
    c7a8:	str	r5, [r4, #4]
    c7aa:	mov	r0, r6
    c7ac:	str	r3, [r1, #20]
    c7ae:	str	r3, [r1, #16]
    c7b0:	str.w	lr, [r3, #12]
    c7b4:	str.w	lr, [r3, #8]
    c7b8:	str	r7, [r3, #4]
    c7ba:	str	r2, [r3, r2]
    c7bc:	adds	r4, #8
    c7be:	bl	cb48 <__malloc_unlock>
    c7c2:	b.n	c570 <_malloc_r+0x190>
    c7c4:	ldr	r2, [r1, #4]
    c7c6:	b.n	c4b0 <_malloc_r+0xd0>
    c7c8:	add.w	r8, r8, #1
    c7cc:	tst.w	r8, #3
    c7d0:	add.w	ip, ip, #8
    c7d4:	bne.w	c4d6 <_malloc_r+0xf6>
    c7d8:	b.n	c83c <_malloc_r+0x45c>
    c7da:	ldr	r4, [r3, #12]
    c7dc:	cmp	r3, r4
    c7de:	it	eq
    c7e0:	addeq	r0, #2
    c7e2:	beq.w	c450 <_malloc_r+0x70>
    c7e6:	b.n	c550 <_malloc_r+0x170>
    c7e8:	add	r3, r1
    c7ea:	mov	r4, r1
    c7ec:	ldr	r2, [r3, #4]
    c7ee:	ldr	r1, [r1, #12]
    c7f0:	ldr.w	r5, [r4, #8]!
    c7f4:	orr.w	r2, r2, #1
    c7f8:	str	r2, [r3, #4]
    c7fa:	mov	r0, r6
    c7fc:	str	r1, [r5, #12]
    c7fe:	str	r5, [r1, #8]
    c800:	bl	cb48 <__malloc_unlock>
    c804:	b.n	c570 <_malloc_r+0x190>
    c806:	add.w	lr, r3, #92	; 0x5c
    c80a:	add.w	r0, r3, #91	; 0x5b
    c80e:	mov.w	r3, lr, lsl #1
    c812:	b.n	c424 <_malloc_r+0x44>
    c814:	lsrs	r2, r3, #6
    c816:	add.w	r1, r2, #57	; 0x39
    c81a:	lsls	r1, r1, #1
    c81c:	adds	r2, #56	; 0x38
    c81e:	b.n	c764 <_malloc_r+0x384>
    c820:	cmp	r4, r7
    c822:	ldr	r3, [pc, #296]	; (c94c <_malloc_r+0x56c>)
    c824:	beq.w	c628 <_malloc_r+0x248>
    c828:	ldr	r4, [r3, #8]
    c82a:	ldr	r2, [r4, #4]
    c82c:	bic.w	r2, r2, #3
    c830:	b.n	c6e8 <_malloc_r+0x308>
    c832:	ldr.w	r3, [r9], #-8
    c836:	cmp	r9, r3
    c838:	bne.w	c940 <_malloc_r+0x560>
    c83c:	tst.w	r0, #3
    c840:	add.w	r0, r0, #4294967295
    c844:	bne.n	c832 <_malloc_r+0x452>
    c846:	ldr	r3, [r7, #4]
    c848:	bic.w	r3, r3, r4
    c84c:	str	r3, [r7, #4]
    c84e:	lsls	r4, r4, #1
    c850:	cmp	r4, r3
    c852:	bhi.w	c5d0 <_malloc_r+0x1f0>
    c856:	cmp	r4, #0
    c858:	beq.w	c5d0 <_malloc_r+0x1f0>
    c85c:	tst	r4, r3
    c85e:	mov	r0, r8
    c860:	bne.w	c4ce <_malloc_r+0xee>
    c864:	lsls	r4, r4, #1
    c866:	tst	r4, r3
    c868:	add.w	r0, r0, #4
    c86c:	beq.n	c864 <_malloc_r+0x484>
    c86e:	b.n	c4ce <_malloc_r+0xee>
    c870:	cmp.w	r3, #340	; 0x154
    c874:	bhi.n	c8a8 <_malloc_r+0x4c8>
    c876:	lsrs	r0, r5, #15
    c878:	add.w	lr, r0, #120	; 0x78
    c87c:	mov.w	r3, lr, lsl #1
    c880:	adds	r0, #119	; 0x77
    c882:	b.n	c424 <_malloc_r+0x44>
    c884:	mov.w	r1, #4096	; 0x1000
    c888:	b.n	c662 <_malloc_r+0x282>
    c88a:	movs	r1, #1
    c88c:	ldr.w	r3, [r8, #4]
    c890:	asrs	r2, r2, #2
    c892:	lsl.w	r2, r1, r2
    c896:	orrs	r2, r3
    c898:	str.w	r2, [r8, #4]
    c89c:	mov	r1, ip
    c89e:	b.n	c790 <_malloc_r+0x3b0>
    c8a0:	movs	r3, #1
    c8a2:	str.w	r3, [fp, #4]
    c8a6:	b.n	c6f4 <_malloc_r+0x314>
    c8a8:	movw	r2, #1364	; 0x554
    c8ac:	cmp	r3, r2
    c8ae:	bhi.n	c8f2 <_malloc_r+0x512>
    c8b0:	lsrs	r0, r5, #18
    c8b2:	add.w	lr, r0, #125	; 0x7d
    c8b6:	mov.w	r3, lr, lsl #1
    c8ba:	adds	r0, #124	; 0x7c
    c8bc:	b.n	c424 <_malloc_r+0x44>
    c8be:	adds	r2, #16
    c8c0:	b.n	c60c <_malloc_r+0x22c>
    c8c2:	cmp	r2, #84	; 0x54
    c8c4:	bhi.n	c914 <_malloc_r+0x534>
    c8c6:	lsrs	r2, r3, #12
    c8c8:	add.w	r1, r2, #111	; 0x6f
    c8cc:	lsls	r1, r1, #1
    c8ce:	adds	r2, #110	; 0x6e
    c8d0:	b.n	c764 <_malloc_r+0x384>
    c8d2:	ldr	r4, [r7, #8]
    c8d4:	ldr	r2, [r4, #4]
    c8d6:	bic.w	r2, r2, #3
    c8da:	b.n	c6e8 <_malloc_r+0x308>
    c8dc:	ubfx	r0, sl, #0, #12
    c8e0:	cmp	r0, #0
    c8e2:	bne.w	c636 <_malloc_r+0x256>
    c8e6:	add	r2, r8
    c8e8:	ldr	r3, [r7, #8]
    c8ea:	orr.w	r2, r2, #1
    c8ee:	str	r2, [r3, #4]
    c8f0:	b.n	c6cc <_malloc_r+0x2ec>
    c8f2:	movs	r3, #254	; 0xfe
    c8f4:	mov.w	lr, #127	; 0x7f
    c8f8:	movs	r0, #126	; 0x7e
    c8fa:	b.n	c424 <_malloc_r+0x44>
    c8fc:	movs	r2, #1
    c8fe:	mov.w	r9, #0
    c902:	b.n	c688 <_malloc_r+0x2a8>
    c904:	add.w	r1, r4, #8
    c908:	mov	r0, r6
    c90a:	bl	11a10 <_free_r>
    c90e:	ldr.w	r1, [r9]
    c912:	b.n	c6cc <_malloc_r+0x2ec>
    c914:	cmp.w	r2, #340	; 0x154
    c918:	bhi.n	c926 <_malloc_r+0x546>
    c91a:	lsrs	r2, r3, #15
    c91c:	add.w	r1, r2, #120	; 0x78
    c920:	lsls	r1, r1, #1
    c922:	adds	r2, #119	; 0x77
    c924:	b.n	c764 <_malloc_r+0x384>
    c926:	movw	r1, #1364	; 0x554
    c92a:	cmp	r2, r1
    c92c:	bhi.n	c93a <_malloc_r+0x55a>
    c92e:	lsrs	r2, r3, #18
    c930:	add.w	r1, r2, #125	; 0x7d
    c934:	lsls	r1, r1, #1
    c936:	adds	r2, #124	; 0x7c
    c938:	b.n	c764 <_malloc_r+0x384>
    c93a:	movs	r1, #254	; 0xfe
    c93c:	movs	r2, #126	; 0x7e
    c93e:	b.n	c764 <_malloc_r+0x384>
    c940:	ldr	r3, [r7, #4]
    c942:	b.n	c84e <_malloc_r+0x46e>
    c944:	lsrs	r0, r5, #3
    c946:	adds	r3, r0, #1
    c948:	lsls	r3, r3, #1
    c94a:	b.n	c53e <_malloc_r+0x15e>
    c94c:	.word	0x1fff0ee8

0000c950 <__ascii_mbtowc>:
    c950:	sub	sp, #8
    c952:	cbz	r1, c968 <__ascii_mbtowc+0x18>
    c954:	cbz	r2, c96e <__ascii_mbtowc+0x1e>
    c956:	cbz	r3, c974 <__ascii_mbtowc+0x24>
    c958:	ldrb	r3, [r2, #0]
    c95a:	str	r3, [r1, #0]
    c95c:	ldrb	r2, [r2, #0]
    c95e:	adds	r0, r2, #0
    c960:	it	ne
    c962:	movne	r0, #1
    c964:	add	sp, #8
    c966:	bx	lr
    c968:	add	r1, sp, #4
    c96a:	cmp	r2, #0
    c96c:	bne.n	c956 <__ascii_mbtowc+0x6>
    c96e:	mov	r0, r2
    c970:	add	sp, #8
    c972:	bx	lr
    c974:	mvn.w	r0, #1
    c978:	b.n	c964 <__ascii_mbtowc+0x14>
    c97a:	nop

0000c97c <memcmp>:
    c97c:	cmp	r2, #3
    c97e:	push	{r4, r5, r6}
    c980:	bls.n	c9d0 <memcmp+0x54>
    c982:	orr.w	r3, r0, r1
    c986:	lsls	r3, r3, #30
    c988:	beq.n	c9ae <memcmp+0x32>
    c98a:	ldrb	r4, [r0, #0]
    c98c:	ldrb	r5, [r1, #0]
    c98e:	cmp	r4, r5
    c990:	bne.n	c9d8 <memcmp+0x5c>
    c992:	add	r2, r0
    c994:	adds	r3, r0, #1
    c996:	b.n	c9a4 <memcmp+0x28>
    c998:	ldrb.w	r4, [r3], #1
    c99c:	ldrb.w	r5, [r1, #1]!
    c9a0:	cmp	r4, r5
    c9a2:	bne.n	c9d8 <memcmp+0x5c>
    c9a4:	cmp	r3, r2
    c9a6:	bne.n	c998 <memcmp+0x1c>
    c9a8:	movs	r0, #0
    c9aa:	pop	{r4, r5, r6}
    c9ac:	bx	lr
    c9ae:	mov	r4, r1
    c9b0:	mov	r3, r0
    c9b2:	ldr	r6, [r3, #0]
    c9b4:	ldr	r5, [r4, #0]
    c9b6:	cmp	r6, r5
    c9b8:	mov	r0, r3
    c9ba:	mov	r1, r4
    c9bc:	add.w	r3, r3, #4
    c9c0:	add.w	r4, r4, #4
    c9c4:	bne.n	c98a <memcmp+0xe>
    c9c6:	subs	r2, #4
    c9c8:	cmp	r2, #3
    c9ca:	mov	r0, r3
    c9cc:	mov	r1, r4
    c9ce:	bhi.n	c9b2 <memcmp+0x36>
    c9d0:	cmp	r2, #0
    c9d2:	bne.n	c98a <memcmp+0xe>
    c9d4:	mov	r0, r2
    c9d6:	b.n	c9aa <memcmp+0x2e>
    c9d8:	subs	r0, r4, r5
    c9da:	pop	{r4, r5, r6}
    c9dc:	bx	lr
    c9de:	nop

0000c9e0 <memmove>:
    c9e0:	cmp	r0, r1
    c9e2:	push	{r4, r5, r6, r7, lr}
    c9e4:	bls.n	ca02 <memmove+0x22>
    c9e6:	adds	r3, r1, r2
    c9e8:	cmp	r0, r3
    c9ea:	bcs.n	ca02 <memmove+0x22>
    c9ec:	adds	r1, r0, r2
    c9ee:	cmp	r2, #0
    c9f0:	beq.n	ca96 <memmove+0xb6>
    c9f2:	subs	r2, r3, r2
    c9f4:	ldrb.w	r4, [r3, #-1]!
    c9f8:	strb.w	r4, [r1, #-1]!
    c9fc:	cmp	r3, r2
    c9fe:	bne.n	c9f4 <memmove+0x14>
    ca00:	pop	{r4, r5, r6, r7, pc}
    ca02:	cmp	r2, #15
    ca04:	bls.n	ca98 <memmove+0xb8>
    ca06:	orr.w	r3, r1, r0
    ca0a:	lsls	r3, r3, #30
    ca0c:	bne.n	ca9c <memmove+0xbc>
    ca0e:	add.w	r4, r0, #16
    ca12:	add.w	r3, r1, #16
    ca16:	mov	r5, r2
    ca18:	ldr.w	r6, [r3, #-16]
    ca1c:	str.w	r6, [r4, #-16]
    ca20:	ldr.w	r6, [r3, #-12]
    ca24:	str.w	r6, [r4, #-12]
    ca28:	ldr.w	r6, [r3, #-8]
    ca2c:	str.w	r6, [r4, #-8]
    ca30:	subs	r5, #16
    ca32:	ldr.w	r6, [r3, #-4]
    ca36:	str.w	r6, [r4, #-4]
    ca3a:	cmp	r5, #15
    ca3c:	add.w	r3, r3, #16
    ca40:	add.w	r4, r4, #16
    ca44:	bhi.n	ca18 <memmove+0x38>
    ca46:	sub.w	r3, r2, #16
    ca4a:	bic.w	r3, r3, #15
    ca4e:	and.w	lr, r2, #15
    ca52:	adds	r3, #16
    ca54:	cmp.w	lr, #3
    ca58:	add	r1, r3
    ca5a:	add	r3, r0
    ca5c:	bls.n	caa2 <memmove+0xc2>
    ca5e:	subs	r6, r3, #4
    ca60:	mov	r5, r1
    ca62:	mov	r4, lr
    ca64:	subs	r4, #4
    ca66:	ldr.w	r7, [r5], #4
    ca6a:	str.w	r7, [r6, #4]!
    ca6e:	cmp	r4, #3
    ca70:	bhi.n	ca64 <memmove+0x84>
    ca72:	sub.w	r4, lr, #4
    ca76:	bic.w	r4, r4, #3
    ca7a:	adds	r4, #4
    ca7c:	add	r3, r4
    ca7e:	add	r1, r4
    ca80:	and.w	r2, r2, #3
    ca84:	cbz	r2, caa0 <memmove+0xc0>
    ca86:	subs	r3, #1
    ca88:	add	r2, r1
    ca8a:	ldrb.w	r4, [r1], #1
    ca8e:	strb.w	r4, [r3, #1]!
    ca92:	cmp	r2, r1
    ca94:	bne.n	ca8a <memmove+0xaa>
    ca96:	pop	{r4, r5, r6, r7, pc}
    ca98:	mov	r3, r0
    ca9a:	b.n	ca84 <memmove+0xa4>
    ca9c:	mov	r3, r0
    ca9e:	b.n	ca86 <memmove+0xa6>
    caa0:	pop	{r4, r5, r6, r7, pc}
    caa2:	mov	r2, lr
    caa4:	b.n	ca84 <memmove+0xa4>
    caa6:	nop

0000caa8 <memset>:
    caa8:	push	{r4, r5, r6}
    caaa:	lsls	r4, r0, #30
    caac:	beq.n	cb3c <memset+0x94>
    caae:	subs	r4, r2, #1
    cab0:	cmp	r2, #0
    cab2:	beq.n	cb38 <memset+0x90>
    cab4:	uxtb	r5, r1
    cab6:	mov	r3, r0
    cab8:	b.n	cac0 <memset+0x18>
    caba:	subs	r2, r4, #1
    cabc:	cbz	r4, cb38 <memset+0x90>
    cabe:	mov	r4, r2
    cac0:	strb.w	r5, [r3], #1
    cac4:	lsls	r2, r3, #30
    cac6:	bne.n	caba <memset+0x12>
    cac8:	cmp	r4, #3
    caca:	bls.n	cb2a <memset+0x82>
    cacc:	uxtb	r5, r1
    cace:	orr.w	r5, r5, r5, lsl #8
    cad2:	cmp	r4, #15
    cad4:	orr.w	r5, r5, r5, lsl #16
    cad8:	bls.n	cb0e <memset+0x66>
    cada:	add.w	r2, r3, #16
    cade:	mov	r6, r4
    cae0:	subs	r6, #16
    cae2:	cmp	r6, #15
    cae4:	str.w	r5, [r2, #-16]
    cae8:	str.w	r5, [r2, #-12]
    caec:	str.w	r5, [r2, #-8]
    caf0:	str.w	r5, [r2, #-4]
    caf4:	add.w	r2, r2, #16
    caf8:	bhi.n	cae0 <memset+0x38>
    cafa:	sub.w	r2, r4, #16
    cafe:	bic.w	r2, r2, #15
    cb02:	and.w	r4, r4, #15
    cb06:	adds	r2, #16
    cb08:	cmp	r4, #3
    cb0a:	add	r3, r2
    cb0c:	bls.n	cb2a <memset+0x82>
    cb0e:	mov	r6, r3
    cb10:	mov	r2, r4
    cb12:	subs	r2, #4
    cb14:	cmp	r2, #3
    cb16:	str.w	r5, [r6], #4
    cb1a:	bhi.n	cb12 <memset+0x6a>
    cb1c:	subs	r2, r4, #4
    cb1e:	bic.w	r2, r2, #3
    cb22:	adds	r2, #4
    cb24:	add	r3, r2
    cb26:	and.w	r4, r4, #3
    cb2a:	cbz	r4, cb38 <memset+0x90>
    cb2c:	uxtb	r1, r1
    cb2e:	add	r4, r3
    cb30:	strb.w	r1, [r3], #1
    cb34:	cmp	r3, r4
    cb36:	bne.n	cb30 <memset+0x88>
    cb38:	pop	{r4, r5, r6}
    cb3a:	bx	lr
    cb3c:	mov	r4, r2
    cb3e:	mov	r3, r0
    cb40:	b.n	cac8 <memset+0x20>
    cb42:	nop

0000cb44 <__malloc_lock>:
    cb44:	bx	lr
    cb46:	nop

0000cb48 <__malloc_unlock>:
    cb48:	bx	lr
    cb4a:	nop

0000cb4c <_realloc_r>:
    cb4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb50:	mov	r7, r2
    cb52:	sub	sp, #12
    cb54:	cmp	r1, #0
    cb56:	beq.w	ccdc <_realloc_r+0x190>
    cb5a:	mov	r6, r1
    cb5c:	mov	r9, r0
    cb5e:	add.w	r5, r7, #11
    cb62:	bl	cb44 <__malloc_lock>
    cb66:	ldr.w	lr, [r6, #-4]
    cb6a:	cmp	r5, #22
    cb6c:	bic.w	r4, lr, #3
    cb70:	sub.w	r8, r6, #8
    cb74:	bhi.n	cbf8 <_realloc_r+0xac>
    cb76:	movs	r2, #16
    cb78:	mov	r5, r2
    cb7a:	cmp	r7, r5
    cb7c:	bhi.n	cc02 <_realloc_r+0xb6>
    cb7e:	cmp	r4, r2
    cb80:	bge.n	cc6e <_realloc_r+0x122>
    cb82:	ldr	r3, [pc, #804]	; (cea8 <_realloc_r+0x35c>)
    cb84:	ldr	r1, [r3, #8]
    cb86:	add.w	r0, r8, r4
    cb8a:	cmp	r0, r1
    cb8c:	ldr	r1, [r0, #4]
    cb8e:	beq.w	cd44 <_realloc_r+0x1f8>
    cb92:	bic.w	r3, r1, #1
    cb96:	add	r3, r0
    cb98:	ldr	r3, [r3, #4]
    cb9a:	lsls	r3, r3, #31
    cb9c:	bpl.n	cc9a <_realloc_r+0x14e>
    cb9e:	tst.w	lr, #1
    cba2:	beq.n	cc10 <_realloc_r+0xc4>
    cba4:	mov	r1, r7
    cba6:	mov	r0, r9
    cba8:	bl	c3e0 <_malloc_r>
    cbac:	mov	r7, r0
    cbae:	cbz	r0, cbea <_realloc_r+0x9e>
    cbb0:	ldr.w	r3, [r6, #-4]
    cbb4:	bic.w	r3, r3, #1
    cbb8:	add	r3, r8
    cbba:	sub.w	r2, r0, #8
    cbbe:	cmp	r2, r3
    cbc0:	beq.w	ce4c <_realloc_r+0x300>
    cbc4:	subs	r2, r4, #4
    cbc6:	cmp	r2, #36	; 0x24
    cbc8:	bhi.w	ce2e <_realloc_r+0x2e2>
    cbcc:	cmp	r2, #19
    cbce:	bhi.w	cdda <_realloc_r+0x28e>
    cbd2:	mov	r3, r0
    cbd4:	mov	r2, r6
    cbd6:	ldr	r1, [r2, #0]
    cbd8:	str	r1, [r3, #0]
    cbda:	ldr	r1, [r2, #4]
    cbdc:	str	r1, [r3, #4]
    cbde:	ldr	r2, [r2, #8]
    cbe0:	str	r2, [r3, #8]
    cbe2:	mov	r1, r6
    cbe4:	mov	r0, r9
    cbe6:	bl	11a10 <_free_r>
    cbea:	mov	r0, r9
    cbec:	bl	cb48 <__malloc_unlock>
    cbf0:	mov	r0, r7
    cbf2:	add	sp, #12
    cbf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbf8:	bic.w	r5, r5, #7
    cbfc:	cmp	r5, #0
    cbfe:	mov	r2, r5
    cc00:	bge.n	cb7a <_realloc_r+0x2e>
    cc02:	movs	r3, #12
    cc04:	movs	r0, #0
    cc06:	str.w	r3, [r9]
    cc0a:	add	sp, #12
    cc0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc10:	ldr.w	r3, [r6, #-8]
    cc14:	rsb	sl, r3, r8
    cc18:	ldr.w	r3, [sl, #4]
    cc1c:	bic.w	ip, r3, #3
    cc20:	add.w	r3, r4, ip
    cc24:	cmp	r3, r2
    cc26:	blt.n	cba4 <_realloc_r+0x58>
    cc28:	mov	r7, sl
    cc2a:	ldr.w	r1, [sl, #12]
    cc2e:	ldr.w	r0, [r7, #8]!
    cc32:	subs	r2, r4, #4
    cc34:	cmp	r2, #36	; 0x24
    cc36:	str	r1, [r0, #12]
    cc38:	str	r0, [r1, #8]
    cc3a:	bhi.w	ce6c <_realloc_r+0x320>
    cc3e:	cmp	r2, #19
    cc40:	bls.w	ce68 <_realloc_r+0x31c>
    cc44:	ldr	r1, [r6, #0]
    cc46:	str.w	r1, [sl, #8]
    cc4a:	ldr	r1, [r6, #4]
    cc4c:	str.w	r1, [sl, #12]
    cc50:	cmp	r2, #27
    cc52:	bhi.w	ceac <_realloc_r+0x360>
    cc56:	adds	r6, #8
    cc58:	add.w	r2, sl, #16
    cc5c:	ldr	r1, [r6, #0]
    cc5e:	str	r1, [r2, #0]
    cc60:	ldr	r1, [r6, #4]
    cc62:	str	r1, [r2, #4]
    cc64:	ldr	r1, [r6, #8]
    cc66:	str	r1, [r2, #8]
    cc68:	mov	r6, r7
    cc6a:	mov	r4, r3
    cc6c:	mov	r8, sl
    cc6e:	subs	r3, r4, r5
    cc70:	cmp	r3, #15
    cc72:	bhi.n	ccb0 <_realloc_r+0x164>
    cc74:	ldr.w	r3, [r8, #4]
    cc78:	and.w	r3, r3, #1
    cc7c:	orrs	r3, r4
    cc7e:	add	r4, r8
    cc80:	str.w	r3, [r8, #4]
    cc84:	ldr	r3, [r4, #4]
    cc86:	orr.w	r3, r3, #1
    cc8a:	str	r3, [r4, #4]
    cc8c:	mov	r0, r9
    cc8e:	bl	cb48 <__malloc_unlock>
    cc92:	mov	r0, r6
    cc94:	add	sp, #12
    cc96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc9a:	bic.w	r1, r1, #3
    cc9e:	add	r1, r4
    cca0:	cmp	r1, r2
    cca2:	blt.n	cce8 <_realloc_r+0x19c>
    cca4:	ldr	r3, [r0, #12]
    cca6:	ldr	r2, [r0, #8]
    cca8:	mov	r4, r1
    ccaa:	str	r3, [r2, #12]
    ccac:	str	r2, [r3, #8]
    ccae:	b.n	cc6e <_realloc_r+0x122>
    ccb0:	ldr.w	r2, [r8, #4]
    ccb4:	add.w	r1, r8, r5
    ccb8:	and.w	r2, r2, #1
    ccbc:	orrs	r5, r2
    ccbe:	orr.w	r2, r3, #1
    ccc2:	add	r3, r1
    ccc4:	str.w	r5, [r8, #4]
    ccc8:	str	r2, [r1, #4]
    ccca:	ldr	r2, [r3, #4]
    cccc:	orr.w	r2, r2, #1
    ccd0:	adds	r1, #8
    ccd2:	str	r2, [r3, #4]
    ccd4:	mov	r0, r9
    ccd6:	bl	11a10 <_free_r>
    ccda:	b.n	cc8c <_realloc_r+0x140>
    ccdc:	mov	r1, r2
    ccde:	add	sp, #12
    cce0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cce4:	b.w	c3e0 <_malloc_r>
    cce8:	tst.w	lr, #1
    ccec:	bne.w	cba4 <_realloc_r+0x58>
    ccf0:	ldr.w	r3, [r6, #-8]
    ccf4:	rsb	sl, r3, r8
    ccf8:	ldr.w	r3, [sl, #4]
    ccfc:	bic.w	ip, r3, #3
    cd00:	add.w	lr, r1, ip
    cd04:	cmp	lr, r2
    cd06:	blt.n	cc20 <_realloc_r+0xd4>
    cd08:	ldr	r3, [r0, #12]
    cd0a:	ldr	r2, [r0, #8]
    cd0c:	mov	r7, sl
    cd0e:	str	r3, [r2, #12]
    cd10:	str	r2, [r3, #8]
    cd12:	ldr.w	r1, [r7, #8]!
    cd16:	ldr.w	r3, [sl, #12]
    cd1a:	str	r3, [r1, #12]
    cd1c:	subs	r2, r4, #4
    cd1e:	cmp	r2, #36	; 0x24
    cd20:	str	r1, [r3, #8]
    cd22:	bhi.w	ce58 <_realloc_r+0x30c>
    cd26:	cmp	r2, #19
    cd28:	bls.n	cdf0 <_realloc_r+0x2a4>
    cd2a:	ldr	r3, [r6, #0]
    cd2c:	str.w	r3, [sl, #8]
    cd30:	ldr	r3, [r6, #4]
    cd32:	str.w	r3, [sl, #12]
    cd36:	cmp	r2, #27
    cd38:	bhi.w	ce7c <_realloc_r+0x330>
    cd3c:	adds	r6, #8
    cd3e:	add.w	r3, sl, #16
    cd42:	b.n	cdf2 <_realloc_r+0x2a6>
    cd44:	bic.w	fp, r1, #3
    cd48:	add	fp, r4
    cd4a:	add.w	r0, r5, #16
    cd4e:	cmp	fp, r0
    cd50:	bge.n	ce06 <_realloc_r+0x2ba>
    cd52:	tst.w	lr, #1
    cd56:	bne.w	cba4 <_realloc_r+0x58>
    cd5a:	ldr.w	r1, [r6, #-8]
    cd5e:	rsb	sl, r1, r8
    cd62:	ldr.w	r1, [sl, #4]
    cd66:	bic.w	ip, r1, #3
    cd6a:	add	fp, ip
    cd6c:	cmp	r0, fp
    cd6e:	bgt.w	cc20 <_realloc_r+0xd4>
    cd72:	mov	r7, sl
    cd74:	ldr.w	r1, [sl, #12]
    cd78:	ldr.w	r0, [r7, #8]!
    cd7c:	subs	r2, r4, #4
    cd7e:	cmp	r2, #36	; 0x24
    cd80:	str	r1, [r0, #12]
    cd82:	str	r0, [r1, #8]
    cd84:	bhi.w	cef0 <_realloc_r+0x3a4>
    cd88:	cmp	r2, #19
    cd8a:	bls.w	ced8 <_realloc_r+0x38c>
    cd8e:	ldr	r1, [r6, #0]
    cd90:	str.w	r1, [sl, #8]
    cd94:	ldr	r1, [r6, #4]
    cd96:	str.w	r1, [sl, #12]
    cd9a:	cmp	r2, #27
    cd9c:	bhi.w	cefe <_realloc_r+0x3b2>
    cda0:	adds	r6, #8
    cda2:	add.w	r2, sl, #16
    cda6:	ldr	r1, [r6, #0]
    cda8:	str	r1, [r2, #0]
    cdaa:	ldr	r1, [r6, #4]
    cdac:	str	r1, [r2, #4]
    cdae:	ldr	r1, [r6, #8]
    cdb0:	str	r1, [r2, #8]
    cdb2:	add.w	r1, sl, r5
    cdb6:	rsb	r2, r5, fp
    cdba:	orr.w	r2, r2, #1
    cdbe:	str	r1, [r3, #8]
    cdc0:	str	r2, [r1, #4]
    cdc2:	ldr.w	r3, [sl, #4]
    cdc6:	and.w	r3, r3, #1
    cdca:	orrs	r5, r3
    cdcc:	mov	r0, r9
    cdce:	str.w	r5, [sl, #4]
    cdd2:	bl	cb48 <__malloc_unlock>
    cdd6:	mov	r0, r7
    cdd8:	b.n	cc94 <_realloc_r+0x148>
    cdda:	ldr	r3, [r6, #0]
    cddc:	str	r3, [r0, #0]
    cdde:	ldr	r3, [r6, #4]
    cde0:	str	r3, [r0, #4]
    cde2:	cmp	r2, #27
    cde4:	bhi.n	ce36 <_realloc_r+0x2ea>
    cde6:	add.w	r3, r0, #8
    cdea:	add.w	r2, r6, #8
    cdee:	b.n	cbd6 <_realloc_r+0x8a>
    cdf0:	mov	r3, r7
    cdf2:	ldr	r2, [r6, #0]
    cdf4:	str	r2, [r3, #0]
    cdf6:	ldr	r2, [r6, #4]
    cdf8:	str	r2, [r3, #4]
    cdfa:	ldr	r2, [r6, #8]
    cdfc:	str	r2, [r3, #8]
    cdfe:	mov	r6, r7
    ce00:	mov	r4, lr
    ce02:	mov	r8, sl
    ce04:	b.n	cc6e <_realloc_r+0x122>
    ce06:	add.w	r1, r8, r5
    ce0a:	rsb	fp, r5, fp
    ce0e:	orr.w	r2, fp, #1
    ce12:	str	r1, [r3, #8]
    ce14:	str	r2, [r1, #4]
    ce16:	ldr.w	r3, [r6, #-4]
    ce1a:	and.w	r3, r3, #1
    ce1e:	orrs	r5, r3
    ce20:	mov	r0, r9
    ce22:	str.w	r5, [r6, #-4]
    ce26:	bl	cb48 <__malloc_unlock>
    ce2a:	mov	r0, r6
    ce2c:	b.n	cc94 <_realloc_r+0x148>
    ce2e:	mov	r1, r6
    ce30:	bl	c9e0 <memmove>
    ce34:	b.n	cbe2 <_realloc_r+0x96>
    ce36:	ldr	r3, [r6, #8]
    ce38:	str	r3, [r0, #8]
    ce3a:	ldr	r3, [r6, #12]
    ce3c:	str	r3, [r0, #12]
    ce3e:	cmp	r2, #36	; 0x24
    ce40:	beq.n	ce94 <_realloc_r+0x348>
    ce42:	add.w	r3, r0, #16
    ce46:	add.w	r2, r6, #16
    ce4a:	b.n	cbd6 <_realloc_r+0x8a>
    ce4c:	ldr.w	r3, [r0, #-4]
    ce50:	bic.w	r3, r3, #3
    ce54:	add	r4, r3
    ce56:	b.n	cc6e <_realloc_r+0x122>
    ce58:	mov	r1, r6
    ce5a:	mov	r0, r7
    ce5c:	mov	r4, lr
    ce5e:	mov	r8, sl
    ce60:	bl	c9e0 <memmove>
    ce64:	mov	r6, r7
    ce66:	b.n	cc6e <_realloc_r+0x122>
    ce68:	mov	r2, r7
    ce6a:	b.n	cc5c <_realloc_r+0x110>
    ce6c:	mov	r1, r6
    ce6e:	mov	r0, r7
    ce70:	mov	r4, r3
    ce72:	mov	r8, sl
    ce74:	bl	c9e0 <memmove>
    ce78:	mov	r6, r7
    ce7a:	b.n	cc6e <_realloc_r+0x122>
    ce7c:	ldr	r3, [r6, #8]
    ce7e:	str.w	r3, [sl, #16]
    ce82:	ldr	r3, [r6, #12]
    ce84:	str.w	r3, [sl, #20]
    ce88:	cmp	r2, #36	; 0x24
    ce8a:	beq.n	cec4 <_realloc_r+0x378>
    ce8c:	adds	r6, #16
    ce8e:	add.w	r3, sl, #24
    ce92:	b.n	cdf2 <_realloc_r+0x2a6>
    ce94:	ldr	r3, [r6, #16]
    ce96:	str	r3, [r0, #16]
    ce98:	ldr	r3, [r6, #20]
    ce9a:	str	r3, [r0, #20]
    ce9c:	add.w	r2, r6, #24
    cea0:	add.w	r3, r0, #24
    cea4:	b.n	cbd6 <_realloc_r+0x8a>
    cea6:	nop
    cea8:	.word	0x1fff0ee8
    ceac:	ldr	r1, [r6, #8]
    ceae:	str.w	r1, [sl, #16]
    ceb2:	ldr	r1, [r6, #12]
    ceb4:	str.w	r1, [sl, #20]
    ceb8:	cmp	r2, #36	; 0x24
    ceba:	beq.n	cedc <_realloc_r+0x390>
    cebc:	adds	r6, #16
    cebe:	add.w	r2, sl, #24
    cec2:	b.n	cc5c <_realloc_r+0x110>
    cec4:	ldr	r3, [r6, #16]
    cec6:	str.w	r3, [sl, #24]
    ceca:	ldr	r3, [r6, #20]
    cecc:	str.w	r3, [sl, #28]
    ced0:	adds	r6, #24
    ced2:	add.w	r3, sl, #32
    ced6:	b.n	cdf2 <_realloc_r+0x2a6>
    ced8:	mov	r2, r7
    ceda:	b.n	cda6 <_realloc_r+0x25a>
    cedc:	ldr	r2, [r6, #16]
    cede:	str.w	r2, [sl, #24]
    cee2:	ldr	r2, [r6, #20]
    cee4:	str.w	r2, [sl, #28]
    cee8:	adds	r6, #24
    ceea:	add.w	r2, sl, #32
    ceee:	b.n	cc5c <_realloc_r+0x110>
    cef0:	mov	r1, r6
    cef2:	mov	r0, r7
    cef4:	str	r3, [sp, #4]
    cef6:	bl	c9e0 <memmove>
    cefa:	ldr	r3, [sp, #4]
    cefc:	b.n	cdb2 <_realloc_r+0x266>
    cefe:	ldr	r1, [r6, #8]
    cf00:	str.w	r1, [sl, #16]
    cf04:	ldr	r1, [r6, #12]
    cf06:	str.w	r1, [sl, #20]
    cf0a:	cmp	r2, #36	; 0x24
    cf0c:	beq.n	cf16 <_realloc_r+0x3ca>
    cf0e:	adds	r6, #16
    cf10:	add.w	r2, sl, #24
    cf14:	b.n	cda6 <_realloc_r+0x25a>
    cf16:	ldr	r2, [r6, #16]
    cf18:	str.w	r2, [sl, #24]
    cf1c:	ldr	r2, [r6, #20]
    cf1e:	str.w	r2, [sl, #28]
    cf22:	adds	r6, #24
    cf24:	add.w	r2, sl, #32
    cf28:	b.n	cda6 <_realloc_r+0x25a>
    cf2a:	nop

0000cf2c <_sbrk_r>:
    cf2c:	push	{r3, r4, r5, lr}
    cf2e:	ldr	r4, [pc, #28]	; (cf4c <_sbrk_r+0x20>)
    cf30:	movs	r3, #0
    cf32:	mov	r5, r0
    cf34:	mov	r0, r1
    cf36:	str	r3, [r4, #0]
    cf38:	bl	982c <_sbrk>
    cf3c:	adds	r3, r0, #1
    cf3e:	beq.n	cf42 <_sbrk_r+0x16>
    cf40:	pop	{r3, r4, r5, pc}
    cf42:	ldr	r3, [r4, #0]
    cf44:	cmp	r3, #0
    cf46:	beq.n	cf40 <_sbrk_r+0x14>
    cf48:	str	r3, [r5, #0]
    cf4a:	pop	{r3, r4, r5, pc}
    cf4c:	.word	0x2002053c

0000cf50 <sprintf>:
    cf50:	push	{r1, r2, r3}
    cf52:	push	{r4, r5, r6, r7, lr}
    cf54:	sub	sp, #112	; 0x70
    cf56:	add	r3, sp, #132	; 0x84
    cf58:	ldr	r1, [pc, #60]	; (cf98 <sprintf+0x48>)
    cf5a:	ldr.w	r2, [r3], #4
    cf5e:	str	r3, [sp, #4]
    cf60:	mov	r5, r0
    cf62:	mvn.w	r4, #2147483648	; 0x80000000
    cf66:	ldr	r0, [r1, #0]
    cf68:	str	r5, [sp, #8]
    cf6a:	mov.w	r7, #520	; 0x208
    cf6e:	movw	r6, #65535	; 0xffff
    cf72:	add	r1, sp, #8
    cf74:	str	r5, [sp, #24]
    cf76:	strh.w	r7, [sp, #20]
    cf7a:	str	r4, [sp, #16]
    cf7c:	str	r4, [sp, #28]
    cf7e:	strh.w	r6, [sp, #22]
    cf82:	bl	e310 <_svfprintf_r>
    cf86:	ldr	r3, [sp, #8]
    cf88:	movs	r2, #0
    cf8a:	strb	r2, [r3, #0]
    cf8c:	add	sp, #112	; 0x70
    cf8e:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    cf92:	add	sp, #12
    cf94:	bx	lr
    cf96:	nop
    cf98:	.word	0x1fff0d78

0000cf9c <sscanf>:
    cf9c:	push	{r1, r2, r3}
    cf9e:	push	{r4, r5, r6, r7, lr}
    cfa0:	sub	sp, #112	; 0x70
    cfa2:	add	r4, sp, #132	; 0x84
    cfa4:	mov.w	r2, #516	; 0x204
    cfa8:	ldr.w	r6, [r4], #4
    cfac:	strh.w	r2, [sp, #20]
    cfb0:	str	r0, [sp, #8]
    cfb2:	str	r0, [sp, #24]
    cfb4:	bl	d100 <strlen>
    cfb8:	ldr	r3, [pc, #48]	; (cfec <sscanf+0x50>)
    cfba:	str	r4, [sp, #4]
    cfbc:	mov	r5, r0
    cfbe:	mov	r2, r6
    cfc0:	ldr	r7, [pc, #44]	; (cff0 <sscanf+0x54>)
    cfc2:	ldr	r0, [r3, #0]
    cfc4:	str	r5, [sp, #12]
    cfc6:	mov	r3, r4
    cfc8:	movw	r6, #65535	; 0xffff
    cfcc:	movs	r4, #0
    cfce:	add	r1, sp, #8
    cfd0:	str	r5, [sp, #28]
    cfd2:	str	r7, [sp, #40]	; 0x28
    cfd4:	str	r4, [sp, #56]	; 0x38
    cfd6:	str	r4, [sp, #76]	; 0x4c
    cfd8:	strh.w	r6, [sp, #22]
    cfdc:	bl	f9f4 <__ssvfscanf_r>
    cfe0:	add	sp, #112	; 0x70
    cfe2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    cfe6:	add	sp, #12
    cfe8:	bx	lr
    cfea:	nop
    cfec:	.word	0x1fff0d78
    cff0:	.word	0x0000cff5

0000cff4 <__seofread>:
    cff4:	movs	r0, #0
    cff6:	bx	lr

0000cff8 <strchr>:
    cff8:	push	{r4, r5, r6}
    cffa:	ands.w	r4, r1, #255	; 0xff
    cffe:	beq.n	d06a <strchr+0x72>
    d000:	lsls	r5, r0, #30
    d002:	beq.n	d024 <strchr+0x2c>
    d004:	ldrb	r3, [r0, #0]
    d006:	cmp	r3, #0
    d008:	beq.n	d0c0 <strchr+0xc8>
    d00a:	cmp	r4, r3
    d00c:	beq.n	d066 <strchr+0x6e>
    d00e:	adds	r3, r0, #1
    d010:	b.n	d01e <strchr+0x26>
    d012:	ldrb.w	r2, [r3], #1
    d016:	cmp	r2, #0
    d018:	beq.n	d0ba <strchr+0xc2>
    d01a:	cmp	r4, r2
    d01c:	beq.n	d066 <strchr+0x6e>
    d01e:	lsls	r2, r3, #30
    d020:	mov	r0, r3
    d022:	bne.n	d012 <strchr+0x1a>
    d024:	lsls	r6, r1, #8
    d026:	and.w	r6, r6, #65280	; 0xff00
    d02a:	orrs	r6, r4
    d02c:	ldr	r3, [r0, #0]
    d02e:	orr.w	r6, r6, r6, lsl #16
    d032:	b.n	d038 <strchr+0x40>
    d034:	ldr.w	r3, [r0, #4]!
    d038:	eor.w	r5, r6, r3
    d03c:	sub.w	r2, r5, #16843009	; 0x1010101
    d040:	sub.w	r1, r3, #16843009	; 0x1010101
    d044:	bic.w	r2, r2, r5
    d048:	bic.w	r3, r1, r3
    d04c:	orrs	r3, r2
    d04e:	tst.w	r3, #2155905152	; 0x80808080
    d052:	beq.n	d034 <strchr+0x3c>
    d054:	ldrb	r3, [r0, #0]
    d056:	cbnz	r3, d062 <strchr+0x6a>
    d058:	b.n	d0c0 <strchr+0xc8>
    d05a:	ldrb.w	r3, [r0, #1]!
    d05e:	cmp	r3, #0
    d060:	beq.n	d0c0 <strchr+0xc8>
    d062:	cmp	r4, r3
    d064:	bne.n	d05a <strchr+0x62>
    d066:	pop	{r4, r5, r6}
    d068:	bx	lr
    d06a:	lsls	r4, r0, #30
    d06c:	beq.n	d086 <strchr+0x8e>
    d06e:	ldrb	r3, [r0, #0]
    d070:	cmp	r3, #0
    d072:	beq.n	d066 <strchr+0x6e>
    d074:	adds	r3, r0, #1
    d076:	b.n	d080 <strchr+0x88>
    d078:	ldrb	r2, [r0, #0]
    d07a:	adds	r3, #1
    d07c:	cmp	r2, #0
    d07e:	beq.n	d066 <strchr+0x6e>
    d080:	lsls	r1, r3, #30
    d082:	mov	r0, r3
    d084:	bne.n	d078 <strchr+0x80>
    d086:	ldr	r2, [r0, #0]
    d088:	sub.w	r3, r2, #16843009	; 0x1010101
    d08c:	bic.w	r3, r3, r2
    d090:	tst.w	r3, #2155905152	; 0x80808080
    d094:	bne.n	d0a8 <strchr+0xb0>
    d096:	ldr.w	r2, [r0, #4]!
    d09a:	sub.w	r3, r2, #16843009	; 0x1010101
    d09e:	bic.w	r3, r3, r2
    d0a2:	tst.w	r3, #2155905152	; 0x80808080
    d0a6:	beq.n	d096 <strchr+0x9e>
    d0a8:	ldrb	r3, [r0, #0]
    d0aa:	cmp	r3, #0
    d0ac:	beq.n	d066 <strchr+0x6e>
    d0ae:	ldrb.w	r3, [r0, #1]!
    d0b2:	cmp	r3, #0
    d0b4:	bne.n	d0ae <strchr+0xb6>
    d0b6:	pop	{r4, r5, r6}
    d0b8:	bx	lr
    d0ba:	mov	r0, r2
    d0bc:	pop	{r4, r5, r6}
    d0be:	bx	lr
    d0c0:	mov	r0, r3
    d0c2:	pop	{r4, r5, r6}
    d0c4:	bx	lr
    d0c6:	nop
    d0c8:			; <UNDEFINED> instruction: 0xffffffff
    d0cc:			; <UNDEFINED> instruction: 0xffffffff
    d0d0:			; <UNDEFINED> instruction: 0xffffffff
    d0d4:			; <UNDEFINED> instruction: 0xffffffff
    d0d8:			; <UNDEFINED> instruction: 0xffffffff
    d0dc:			; <UNDEFINED> instruction: 0xffffffff
    d0e0:			; <UNDEFINED> instruction: 0xffffffff
    d0e4:			; <UNDEFINED> instruction: 0xffffffff
    d0e8:			; <UNDEFINED> instruction: 0xffffffff
    d0ec:			; <UNDEFINED> instruction: 0xffffffff
    d0f0:			; <UNDEFINED> instruction: 0xffffffff
    d0f4:			; <UNDEFINED> instruction: 0xffffffff
    d0f8:			; <UNDEFINED> instruction: 0xffffffff
    d0fc:			; <UNDEFINED> instruction: 0xffffffff

0000d100 <strlen>:
    d100:	pld	[r0]
    d104:	strd	r4, r5, [sp, #-8]!
    d108:	bic.w	r1, r0, #7
    d10c:	mvn.w	ip, #0
    d110:	ands.w	r4, r0, #7
    d114:	pld	[r1, #32]
    d118:	bne.w	d1ae <strlen+0xae>
    d11c:	mov.w	r4, #0
    d120:	mvn.w	r0, #7
    d124:	ldrd	r2, r3, [r1]
    d128:	pld	[r1, #64]	; 0x40
    d12c:	add.w	r0, r0, #8
    d130:	uadd8	r2, r2, ip
    d134:	sel	r2, r4, ip
    d138:	uadd8	r3, r3, ip
    d13c:	sel	r3, r2, ip
    d140:	cbnz	r3, d196 <strlen+0x96>
    d142:	ldrd	r2, r3, [r1, #8]
    d146:	uadd8	r2, r2, ip
    d14a:	add.w	r0, r0, #8
    d14e:	sel	r2, r4, ip
    d152:	uadd8	r3, r3, ip
    d156:	sel	r3, r2, ip
    d15a:	cbnz	r3, d196 <strlen+0x96>
    d15c:	ldrd	r2, r3, [r1, #16]
    d160:	uadd8	r2, r2, ip
    d164:	add.w	r0, r0, #8
    d168:	sel	r2, r4, ip
    d16c:	uadd8	r3, r3, ip
    d170:	sel	r3, r2, ip
    d174:	cbnz	r3, d196 <strlen+0x96>
    d176:	ldrd	r2, r3, [r1, #24]
    d17a:	add.w	r1, r1, #32
    d17e:	uadd8	r2, r2, ip
    d182:	add.w	r0, r0, #8
    d186:	sel	r2, r4, ip
    d18a:	uadd8	r3, r3, ip
    d18e:	sel	r3, r2, ip
    d192:	cmp	r3, #0
    d194:	beq.n	d124 <strlen+0x24>
    d196:	cmp	r2, #0
    d198:	itt	eq
    d19a:	addeq	r0, #4
    d19c:	moveq	r2, r3
    d19e:	rev	r2, r2
    d1a0:	clz	r2, r2
    d1a4:	ldrd	r4, r5, [sp], #8
    d1a8:	add.w	r0, r0, r2, lsr #3
    d1ac:	bx	lr
    d1ae:	ldrd	r2, r3, [r1]
    d1b2:	and.w	r5, r4, #3
    d1b6:	rsb	r0, r4, #0
    d1ba:	mov.w	r5, r5, lsl #3
    d1be:	tst.w	r4, #4
    d1c2:	pld	[r1, #64]	; 0x40
    d1c6:	lsl.w	r5, ip, r5
    d1ca:	orn	r2, r2, r5
    d1ce:	itt	ne
    d1d0:	ornne	r3, r3, r5
    d1d4:	movne	r2, ip
    d1d6:	mov.w	r4, #0
    d1da:	b.n	d130 <strlen+0x30>

0000d1dc <strncmp>:
    d1dc:	cmp	r2, #0
    d1de:	beq.n	d264 <strncmp+0x88>
    d1e0:	orr.w	r3, r0, r1
    d1e4:	ands.w	r3, r3, #3
    d1e8:	push	{r4, r5, r6, r7}
    d1ea:	bne.n	d238 <strncmp+0x5c>
    d1ec:	cmp	r2, #3
    d1ee:	bls.n	d238 <strncmp+0x5c>
    d1f0:	ldr	r4, [r0, #0]
    d1f2:	ldr	r5, [r1, #0]
    d1f4:	cmp	r4, r5
    d1f6:	bne.n	d238 <strncmp+0x5c>
    d1f8:	subs	r2, #4
    d1fa:	beq.n	d268 <strncmp+0x8c>
    d1fc:	sub.w	r5, r4, #16843009	; 0x1010101
    d200:	bic.w	r4, r5, r4
    d204:	tst.w	r4, #2155905152	; 0x80808080
    d208:	bne.n	d26e <strncmp+0x92>
    d20a:	adds	r7, r0, #4
    d20c:	adds	r5, r1, #4
    d20e:	b.n	d22c <strncmp+0x50>
    d210:	ldr.w	r3, [r7], #4
    d214:	ldr	r6, [r1, #0]
    d216:	sub.w	r4, r3, #16843009	; 0x1010101
    d21a:	cmp	r3, r6
    d21c:	bic.w	r4, r4, r3
    d220:	bne.n	d238 <strncmp+0x5c>
    d222:	subs	r2, #4
    d224:	beq.n	d268 <strncmp+0x8c>
    d226:	tst.w	r4, #2155905152	; 0x80808080
    d22a:	bne.n	d274 <strncmp+0x98>
    d22c:	cmp	r2, #3
    d22e:	mov	r1, r5
    d230:	mov	r0, r7
    d232:	add.w	r5, r5, #4
    d236:	bhi.n	d210 <strncmp+0x34>
    d238:	ldrb	r3, [r0, #0]
    d23a:	ldrb	r4, [r1, #0]
    d23c:	cmp	r4, r3
    d23e:	add.w	r2, r2, #4294967295
    d242:	bne.n	d25e <strncmp+0x82>
    d244:	cbz	r2, d268 <strncmp+0x8c>
    d246:	cbnz	r4, d24e <strncmp+0x72>
    d248:	b.n	d278 <strncmp+0x9c>
    d24a:	cbz	r2, d268 <strncmp+0x8c>
    d24c:	cbz	r3, d26e <strncmp+0x92>
    d24e:	ldrb.w	r3, [r0, #1]!
    d252:	ldrb.w	r4, [r1, #1]!
    d256:	cmp	r3, r4
    d258:	add.w	r2, r2, #4294967295
    d25c:	beq.n	d24a <strncmp+0x6e>
    d25e:	subs	r0, r3, r4
    d260:	pop	{r4, r5, r6, r7}
    d262:	bx	lr
    d264:	mov	r0, r2
    d266:	bx	lr
    d268:	mov	r0, r2
    d26a:	pop	{r4, r5, r6, r7}
    d26c:	bx	lr
    d26e:	mov	r0, r3
    d270:	pop	{r4, r5, r6, r7}
    d272:	bx	lr
    d274:	movs	r0, #0
    d276:	b.n	d260 <strncmp+0x84>
    d278:	mov	r0, r4
    d27a:	b.n	d260 <strncmp+0x84>

0000d27c <sulp>:
    d27c:	push	{r4, r5, r6, lr}
    d27e:	mov	r4, r0
    d280:	mov	r5, r1
    d282:	vmov	d0, r4, r5
    d286:	mov	r6, r2
    d288:	bl	12a80 <__ulp>
    d28c:	vmov	r0, r1, d0
    d290:	cbz	r6, d2b2 <sulp+0x36>
    d292:	ubfx	r3, r5, #20, #11
    d296:	rsb	r3, r3, #107	; 0x6b
    d29a:	cmp	r3, #0
    d29c:	ble.n	d2b2 <sulp+0x36>
    d29e:	lsls	r3, r3, #20
    d2a0:	add.w	r5, r3, #1069547520	; 0x3fc00000
    d2a4:	movs	r4, #0
    d2a6:	add.w	r5, r5, #3145728	; 0x300000
    d2aa:	mov	r2, r4
    d2ac:	mov	r3, r5
    d2ae:	bl	b628 <__aeabi_dmul>
    d2b2:	pop	{r4, r5, r6, pc}
    d2b4:			; <UNDEFINED> instruction: 0xffffffff

0000d2b8 <_strtod_l>:
    d2b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2bc:	mov	r5, r3
    d2be:	sub	sp, #132	; 0x84
    d2c0:	movs	r3, #0
    d2c2:	mov	fp, r0
    d2c4:	mov	r0, r5
    d2c6:	mov	r6, r1
    d2c8:	str	r2, [sp, #24]
    d2ca:	str	r3, [sp, #112]	; 0x70
    d2cc:	bl	12364 <__localeconv_l>
    d2d0:	movs	r4, #0
    d2d2:	movs	r3, #0
    d2d4:	mov	sl, r0
    d2d6:	ldr	r0, [r0, #0]
    d2d8:	strd	r3, r4, [sp, #16]
    d2dc:	bl	d100 <strlen>
    d2e0:	str	r6, [sp, #108]	; 0x6c
    d2e2:	mov	r9, r0
    d2e4:	mov	r2, r6
    d2e6:	mov	r4, r2
    d2e8:	ldrb.w	r7, [r2], #1
    d2ec:	cmp	r7, #45	; 0x2d
    d2ee:	bhi.w	d450 <_strtod_l+0x198>
    d2f2:	tbb	[pc, r7]
    d2f6:	.short	0xad17
    d2f8:	.word	0xadadadad
    d2fc:	.word	0x81adadad
    d300:	.word	0x81818181
    d304:	.word	0xadadadad
    d308:	.word	0xadadadad
    d30c:	.word	0xadadadad
    d310:	.word	0xadadadad
    d314:	.word	0xad81adad
    d318:	.word	0xadadadad
    d31c:	.word	0xadadadad
    d320:	.word	0x7ead2bad
    d324:	ldr	r3, [sp, #24]
    d326:	mov.w	r8, #0
    d32a:	mov.w	r9, #0
    d32e:	cbz	r3, d342 <_strtod_l+0x8a>
    d330:	movs	r3, #0
    d332:	str	r3, [sp, #28]
    d334:	ldr	r3, [sp, #24]
    d336:	str	r6, [r3, #0]
    d338:	ldr	r3, [sp, #28]
    d33a:	cbz	r3, d342 <_strtod_l+0x8a>
    d33c:	add.w	r3, r9, #2147483648	; 0x80000000
    d340:	mov	r9, r3
    d342:	vmov	d0, r8, r9
    d346:	add	sp, #132	; 0x84
    d348:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d34c:	movs	r3, #0
    d34e:	str	r3, [sp, #28]
    d350:	adds	r2, r4, #1
    d352:	str	r2, [sp, #108]	; 0x6c
    d354:	ldrb	r7, [r4, #1]
    d356:	cmp	r7, #0
    d358:	beq.n	d324 <_strtod_l+0x6c>
    d35a:	cmp	r7, #48	; 0x30
    d35c:	mov	r4, r2
    d35e:	beq.n	d458 <_strtod_l+0x1a0>
    d360:	movs	r3, #0
    d362:	str	r4, [sp, #32]
    d364:	str	r3, [sp, #40]	; 0x28
    d366:	sub.w	r3, r7, #48	; 0x30
    d36a:	cmp	r3, #9
    d36c:	bhi.w	db7e <_strtod_l+0x8c6>
    d370:	mov.w	r8, #0
    d374:	mov	r0, r4
    d376:	mov	r5, r8
    d378:	mov	r4, r8
    d37a:	cmp	r4, #8
    d37c:	it	gt
    d37e:	addgt.w	r8, r8, r8, lsl #2
    d382:	add.w	r3, r5, r5, lsl #2
    d386:	add.w	r0, r0, #1
    d38a:	add.w	r3, r7, r3, lsl #1
    d38e:	str	r0, [sp, #108]	; 0x6c
    d390:	itt	gt
    d392:	addgt.w	r7, r7, r8, lsl #1
    d396:	subgt.w	r8, r7, #48	; 0x30
    d39a:	ldrb	r7, [r0, #0]
    d39c:	it	le
    d39e:	suble.w	r5, r3, #48	; 0x30
    d3a2:	sub.w	r3, r7, #48	; 0x30
    d3a6:	cmp	r3, #9
    d3a8:	add.w	r4, r4, #1
    d3ac:	bls.n	d37a <_strtod_l+0xc2>
    d3ae:	ldr.w	r1, [sl]
    d3b2:	mov	r2, r9
    d3b4:	bl	d1dc <strncmp>
    d3b8:	cbz	r0, d3fc <_strtod_l+0x144>
    d3ba:	movs	r0, #0
    d3bc:	mov	r3, r7
    d3be:	mov	r9, r0
    d3c0:	mov	r7, r0
    d3c2:	mov	sl, r4
    d3c4:	cmp	r3, #101	; 0x65
    d3c6:	beq.w	d52e <_strtod_l+0x276>
    d3ca:	cmp	r3, #69	; 0x45
    d3cc:	beq.w	d52e <_strtod_l+0x276>
    d3d0:	movs	r2, #0
    d3d2:	cmp	r4, #0
    d3d4:	bne.n	d47c <_strtod_l+0x1c4>
    d3d6:	cbnz	r0, d3e0 <_strtod_l+0x128>
    d3d8:	ldr	r2, [sp, #40]	; 0x28
    d3da:	cmp	r2, #0
    d3dc:	beq.w	d982 <_strtod_l+0x6ca>
    d3e0:	mov.w	r8, #0
    d3e4:	mov.w	r9, #0
    d3e8:	ldr	r3, [sp, #24]
    d3ea:	cmp	r3, #0
    d3ec:	beq.n	d338 <_strtod_l+0x80>
    d3ee:	ldr	r6, [sp, #108]	; 0x6c
    d3f0:	b.n	d334 <_strtod_l+0x7c>
    d3f2:	movs	r3, #1
    d3f4:	str	r3, [sp, #28]
    d3f6:	b.n	d350 <_strtod_l+0x98>
    d3f8:	str	r2, [sp, #108]	; 0x6c
    d3fa:	b.n	d2e6 <_strtod_l+0x2e>
    d3fc:	ldr	r3, [sp, #108]	; 0x6c
    d3fe:	add.w	r2, r3, r9
    d402:	str	r2, [sp, #108]	; 0x6c
    d404:	ldrb.w	r3, [r3, r9]
    d408:	mov	r7, r0
    d40a:	mov	sl, r4
    d40c:	sub.w	r2, r3, #48	; 0x30
    d410:	cmp	r2, #9
    d412:	bhi.w	d908 <_strtod_l+0x650>
    d416:	adds	r1, r0, #1
    d418:	mov	r3, r2
    d41a:	cmp	r2, #0
    d41c:	beq.w	e15e <_strtod_l+0xea6>
    d420:	cmp	r1, #1
    d422:	add	r7, r1
    d424:	it	ne
    d426:	addne	r0, r0, r4
    d428:	bne.n	d436 <_strtod_l+0x17e>
    d42a:	b.w	e156 <_strtod_l+0xe9e>
    d42e:	lsls	r5, r1, #1
    d430:	cmp	r4, r0
    d432:	beq.w	ddac <_strtod_l+0xaf4>
    d436:	adds	r4, #1
    d438:	subs	r1, r4, #1
    d43a:	cmp	r1, #8
    d43c:	add.w	r1, r5, r5, lsl #2
    d440:	ble.n	d42e <_strtod_l+0x176>
    d442:	cmp	r4, #16
    d444:	itt	le
    d446:	addle.w	r8, r8, r8, lsl #2
    d44a:	movle.w	r8, r8, lsl #1
    d44e:	b.n	d430 <_strtod_l+0x178>
    d450:	movs	r3, #0
    d452:	cmp	r7, #48	; 0x30
    d454:	str	r3, [sp, #28]
    d456:	bne.n	d360 <_strtod_l+0xa8>
    d458:	ldrb	r3, [r4, #1]
    d45a:	cmp	r3, #88	; 0x58
    d45c:	beq.w	db46 <_strtod_l+0x88e>
    d460:	cmp	r3, #120	; 0x78
    d462:	beq.w	db46 <_strtod_l+0x88e>
    d466:	adds	r4, #1
    d468:	str	r4, [sp, #108]	; 0x6c
    d46a:	ldrb	r7, [r4, #0]
    d46c:	cmp	r7, #48	; 0x30
    d46e:	beq.n	d466 <_strtod_l+0x1ae>
    d470:	cmp	r7, #0
    d472:	beq.n	d3e0 <_strtod_l+0x128>
    d474:	movs	r3, #1
    d476:	str	r4, [sp, #32]
    d478:	str	r3, [sp, #40]	; 0x28
    d47a:	b.n	d366 <_strtod_l+0xae>
    d47c:	cmp	r4, #16
    d47e:	sub.w	r3, r2, r7
    d482:	mov	r0, r5
    d484:	mov	r9, r4
    d486:	str	r3, [sp, #44]	; 0x2c
    d488:	it	ge
    d48a:	movge.w	r9, #16
    d48e:	bl	b53c <__aeabi_ui2d>
    d492:	cmp.w	sl, #0
    d496:	it	eq
    d498:	moveq	sl, r4
    d49a:	cmp.w	r9, #9
    d49e:	strd	r0, r1, [sp, #16]
    d4a2:	ble.n	d4cc <_strtod_l+0x214>
    d4a4:	ldr	r3, [pc, #292]	; (d5cc <_strtod_l+0x314>)
    d4a6:	add.w	r3, r3, r9, lsl #3
    d4aa:	ldrd	r2, r3, [r3, #-72]	; 0x48
    d4ae:	bl	b628 <__aeabi_dmul>
    d4b2:	mov	r6, r0
    d4b4:	mov	r0, r8
    d4b6:	mov	r7, r1
    d4b8:	bl	b53c <__aeabi_ui2d>
    d4bc:	mov	r2, r0
    d4be:	mov	r3, r1
    d4c0:	mov	r0, r6
    d4c2:	mov	r1, r7
    d4c4:	bl	b2c4 <__adddf3>
    d4c8:	strd	r0, r1, [sp, #16]
    d4cc:	cmp	r4, #15
    d4ce:	bgt.w	d5dc <_strtod_l+0x324>
    d4d2:	ldr	r3, [sp, #44]	; 0x2c
    d4d4:	cmp	r3, #0
    d4d6:	beq.n	d528 <_strtod_l+0x270>
    d4d8:	ble.w	df14 <_strtod_l+0xc5c>
    d4dc:	ldr	r3, [sp, #44]	; 0x2c
    d4de:	cmp	r3, #22
    d4e0:	bgt.w	dde0 <_strtod_l+0xb28>
    d4e4:	ldr	r7, [pc, #228]	; (d5cc <_strtod_l+0x314>)
    d4e6:	add.w	r7, r7, r3, lsl #3
    d4ea:	ldrd	r0, r1, [r7]
    d4ee:	ldrd	r2, r3, [sp, #16]
    d4f2:	bl	b628 <__aeabi_dmul>
    d4f6:	mov	r8, r0
    d4f8:	mov	r9, r1
    d4fa:	b.n	d3e8 <_strtod_l+0x130>
    d4fc:	add	r0, sp, #108	; 0x6c
    d4fe:	ldr	r1, [pc, #208]	; (d5d0 <_strtod_l+0x318>)
    d500:	bl	12198 <__match>
    d504:	cmp	r0, #0
    d506:	beq.w	d324 <_strtod_l+0x6c>
    d50a:	ldr	r3, [sp, #108]	; 0x6c
    d50c:	ldr	r1, [pc, #196]	; (d5d4 <_strtod_l+0x31c>)
    d50e:	subs	r3, #1
    d510:	add	r0, sp, #108	; 0x6c
    d512:	str	r3, [sp, #108]	; 0x6c
    d514:	bl	12198 <__match>
    d518:	cbnz	r0, d520 <_strtod_l+0x268>
    d51a:	ldr	r3, [sp, #108]	; 0x6c
    d51c:	adds	r3, #1
    d51e:	str	r3, [sp, #108]	; 0x6c
    d520:	ldr	r3, [pc, #180]	; (d5d8 <_strtod_l+0x320>)
    d522:	str	r3, [sp, #20]
    d524:	movs	r3, #0
    d526:	str	r3, [sp, #16]
    d528:	ldrd	r8, r9, [sp, #16]
    d52c:	b.n	d3e8 <_strtod_l+0x130>
    d52e:	cmp	r4, #0
    d530:	beq.w	d8c8 <_strtod_l+0x610>
    d534:	ldr	r6, [sp, #108]	; 0x6c
    d536:	adds	r3, r6, #1
    d538:	str	r3, [sp, #108]	; 0x6c
    d53a:	ldrb	r3, [r6, #1]
    d53c:	cmp	r3, #43	; 0x2b
    d53e:	beq.w	dafc <_strtod_l+0x844>
    d542:	cmp	r3, #45	; 0x2d
    d544:	beq.w	d972 <_strtod_l+0x6ba>
    d548:	mov.w	ip, #0
    d54c:	sub.w	r2, r3, #48	; 0x30
    d550:	cmp	r2, #9
    d552:	bhi.w	daf6 <_strtod_l+0x83e>
    d556:	cmp	r3, #48	; 0x30
    d558:	bne.n	d566 <_strtod_l+0x2ae>
    d55a:	ldr	r2, [sp, #108]	; 0x6c
    d55c:	adds	r2, #1
    d55e:	str	r2, [sp, #108]	; 0x6c
    d560:	ldrb	r3, [r2, #0]
    d562:	cmp	r3, #48	; 0x30
    d564:	beq.n	d55c <_strtod_l+0x2a4>
    d566:	sub.w	r2, r3, #49	; 0x31
    d56a:	cmp	r2, #8
    d56c:	bhi.w	d3d0 <_strtod_l+0x118>
    d570:	ldr	r2, [sp, #108]	; 0x6c
    d572:	str	r2, [sp, #48]	; 0x30
    d574:	adds	r1, r2, #1
    d576:	subs	r3, #48	; 0x30
    d578:	str	r1, [sp, #108]	; 0x6c
    d57a:	str	r3, [sp, #44]	; 0x2c
    d57c:	ldrb	r3, [r2, #1]
    d57e:	sub.w	lr, r3, #48	; 0x30
    d582:	cmp.w	lr, #9
    d586:	bhi.n	d5a8 <_strtod_l+0x2f0>
    d588:	ldr	r2, [sp, #44]	; 0x2c
    d58a:	adds	r1, #1
    d58c:	str	r1, [sp, #108]	; 0x6c
    d58e:	add.w	r2, r2, r2, lsl #2
    d592:	add.w	r2, r3, r2, lsl #1
    d596:	ldrb	r3, [r1, #0]
    d598:	sub.w	lr, r3, #48	; 0x30
    d59c:	cmp.w	lr, #9
    d5a0:	sub.w	r2, r2, #48	; 0x30
    d5a4:	bls.n	d58a <_strtod_l+0x2d2>
    d5a6:	str	r2, [sp, #44]	; 0x2c
    d5a8:	ldr	r2, [sp, #48]	; 0x30
    d5aa:	subs	r1, r1, r2
    d5ac:	cmp	r1, #8
    d5ae:	bgt.w	ddce <_strtod_l+0xb16>
    d5b2:	ldr	r2, [sp, #44]	; 0x2c
    d5b4:	movw	r1, #19999	; 0x4e1f
    d5b8:	cmp	r2, r1
    d5ba:	it	ge
    d5bc:	movge	r2, r1
    d5be:	cmp.w	ip, #0
    d5c2:	beq.w	d3d2 <_strtod_l+0x11a>
    d5c6:	negs	r2, r2
    d5c8:	b.n	d3d2 <_strtod_l+0x11a>
    d5ca:	nop
    d5cc:	.word	0x00014250
    d5d0:	.word	0x00013f58
    d5d4:	.word	0x00013f5c
    d5d8:	.word	0x7ff00000
    d5dc:	ldr	r3, [sp, #44]	; 0x2c
    d5de:	rsb	r9, r9, r4
    d5e2:	add	r9, r3
    d5e4:	cmp.w	r9, #0
    d5e8:	ble.w	dcfa <_strtod_l+0xa42>
    d5ec:	ands.w	r1, r9, #15
    d5f0:	beq.n	d608 <_strtod_l+0x350>
    d5f2:	ldr	r3, [pc, #756]	; (d8e8 <_strtod_l+0x630>)
    d5f4:	add.w	r1, r3, r1, lsl #3
    d5f8:	ldrd	r0, r1, [r1]
    d5fc:	ldrd	r2, r3, [sp, #16]
    d600:	bl	b628 <__aeabi_dmul>
    d604:	strd	r0, r1, [sp, #16]
    d608:	bics.w	r6, r9, #15
    d60c:	bne.w	da30 <_strtod_l+0x778>
    d610:	movs	r3, #0
    d612:	str	r3, [sp, #40]	; 0x28
    d614:	str	r5, [sp, #0]
    d616:	mov	r3, r4
    d618:	mov	r2, sl
    d61a:	ldr	r1, [sp, #32]
    d61c:	mov	r0, fp
    d61e:	bl	12560 <__s2b>
    d622:	str	r0, [sp, #72]	; 0x48
    d624:	cmp	r0, #0
    d626:	beq.w	dc76 <_strtod_l+0x9be>
    d62a:	ldr	r2, [sp, #44]	; 0x2c
    d62c:	movs	r7, #0
    d62e:	cmp	r2, #0
    d630:	rsb	r3, r2, #0
    d634:	it	ge
    d636:	movge	r3, r7
    d638:	str	r3, [sp, #48]	; 0x30
    d63a:	bic.w	r3, r2, r2, asr #31
    d63e:	str	r3, [sp, #44]	; 0x2c
    d640:	mov	sl, r7
    d642:	ldr	r4, [sp, #72]	; 0x48
    d644:	mov	r0, fp
    d646:	ldr	r1, [r4, #4]
    d648:	bl	12480 <_Balloc>
    d64c:	mov	r6, r0
    d64e:	cmp	r0, #0
    d650:	beq.w	db08 <_strtod_l+0x850>
    d654:	ldr	r2, [r4, #16]
    d656:	vldr	d7, [sp, #16]
    d65a:	adds	r2, #2
    d65c:	lsls	r2, r2, #2
    d65e:	add.w	r1, r4, #12
    d662:	adds	r0, #12
    d664:	vstr	d7, [sp, #32]
    d668:	bl	9324 <memcpy>
    d66c:	vldr	d0, [sp, #32]
    d670:	add	r2, sp, #120	; 0x78
    d672:	add	r1, sp, #116	; 0x74
    d674:	mov	r0, fp
    d676:	bl	12ba4 <__d2b>
    d67a:	str	r0, [sp, #112]	; 0x70
    d67c:	cmp	r0, #0
    d67e:	beq.w	db0a <_strtod_l+0x852>
    d682:	movs	r1, #1
    d684:	mov	r0, fp
    d686:	bl	12694 <__i2b>
    d68a:	mov	sl, r0
    d68c:	cmp	r0, #0
    d68e:	beq.w	db08 <_strtod_l+0x850>
    d692:	ldr	r2, [sp, #116]	; 0x74
    d694:	cmp	r2, #0
    d696:	blt.w	d900 <_strtod_l+0x648>
    d69a:	ldr	r3, [sp, #48]	; 0x30
    d69c:	ldr	r4, [sp, #44]	; 0x2c
    d69e:	adds	r5, r3, r2
    d6a0:	ldr	r0, [sp, #40]	; 0x28
    d6a2:	ldr	r3, [sp, #120]	; 0x78
    d6a4:	ldr	r1, [pc, #580]	; (d8ec <_strtod_l+0x634>)
    d6a6:	subs	r2, r2, r0
    d6a8:	add	r2, r3
    d6aa:	subs	r2, #1
    d6ac:	cmp	r2, r1
    d6ae:	rsb	r3, r3, #54	; 0x36
    d6b2:	bge.w	d892 <_strtod_l+0x5da>
    d6b6:	subs	r1, r1, r2
    d6b8:	cmp	r1, #31
    d6ba:	sub.w	r3, r3, r1
    d6be:	bgt.w	d90e <_strtod_l+0x656>
    d6c2:	movs	r2, #1
    d6c4:	lsls	r2, r1
    d6c6:	str	r2, [sp, #56]	; 0x38
    d6c8:	movs	r2, #0
    d6ca:	str	r2, [sp, #76]	; 0x4c
    d6cc:	add.w	r9, r5, r3
    d6d0:	add	r4, r3
    d6d2:	ldr	r3, [sp, #40]	; 0x28
    d6d4:	cmp	r5, r9
    d6d6:	mov	r2, r5
    d6d8:	add	r4, r3
    d6da:	it	ge
    d6dc:	movge	r2, r9
    d6de:	cmp	r2, r4
    d6e0:	it	ge
    d6e2:	movge	r2, r4
    d6e4:	cmp	r2, #0
    d6e6:	ble.n	d6f0 <_strtod_l+0x438>
    d6e8:	rsb	r9, r2, r9
    d6ec:	subs	r4, r4, r2
    d6ee:	subs	r5, r5, r2
    d6f0:	ldr	r3, [sp, #48]	; 0x30
    d6f2:	cbz	r3, d724 <_strtod_l+0x46c>
    d6f4:	mov	r1, sl
    d6f6:	mov	r2, r3
    d6f8:	mov	r0, fp
    d6fa:	bl	127d8 <__pow5mult>
    d6fe:	mov	sl, r0
    d700:	cmp	r0, #0
    d702:	beq.w	db08 <_strtod_l+0x850>
    d706:	mov	r1, r0
    d708:	ldr	r2, [sp, #112]	; 0x70
    d70a:	mov	r0, fp
    d70c:	bl	126a8 <__multiply>
    d710:	cmp	r0, #0
    d712:	beq.w	db08 <_strtod_l+0x850>
    d716:	str	r0, [sp, #52]	; 0x34
    d718:	ldr	r1, [sp, #112]	; 0x70
    d71a:	mov	r0, fp
    d71c:	bl	124cc <_Bfree>
    d720:	ldr	r2, [sp, #52]	; 0x34
    d722:	str	r2, [sp, #112]	; 0x70
    d724:	cmp.w	r9, #0
    d728:	ble.n	d73c <_strtod_l+0x484>
    d72a:	mov	r2, r9
    d72c:	ldr	r1, [sp, #112]	; 0x70
    d72e:	mov	r0, fp
    d730:	bl	12878 <__lshift>
    d734:	str	r0, [sp, #112]	; 0x70
    d736:	cmp	r0, #0
    d738:	beq.w	db0a <_strtod_l+0x852>
    d73c:	ldr	r3, [sp, #44]	; 0x2c
    d73e:	cbz	r3, d752 <_strtod_l+0x49a>
    d740:	mov	r1, r6
    d742:	ldr	r2, [sp, #44]	; 0x2c
    d744:	mov	r0, fp
    d746:	bl	127d8 <__pow5mult>
    d74a:	mov	r6, r0
    d74c:	cmp	r0, #0
    d74e:	beq.w	db08 <_strtod_l+0x850>
    d752:	cmp	r4, #0
    d754:	ble.n	d768 <_strtod_l+0x4b0>
    d756:	mov	r1, r6
    d758:	mov	r2, r4
    d75a:	mov	r0, fp
    d75c:	bl	12878 <__lshift>
    d760:	mov	r6, r0
    d762:	cmp	r0, #0
    d764:	beq.w	db08 <_strtod_l+0x850>
    d768:	cmp	r5, #0
    d76a:	ble.n	d77e <_strtod_l+0x4c6>
    d76c:	mov	r1, sl
    d76e:	mov	r2, r5
    d770:	mov	r0, fp
    d772:	bl	12878 <__lshift>
    d776:	mov	sl, r0
    d778:	cmp	r0, #0
    d77a:	beq.w	db08 <_strtod_l+0x850>
    d77e:	mov	r2, r6
    d780:	ldr	r1, [sp, #112]	; 0x70
    d782:	mov	r0, fp
    d784:	bl	1296c <__mdiff>
    d788:	mov	r7, r0
    d78a:	cmp	r0, #0
    d78c:	beq.w	db08 <_strtod_l+0x850>
    d790:	movs	r3, #0
    d792:	ldr	r2, [r0, #12]
    d794:	str	r3, [r0, #12]
    d796:	mov	r1, sl
    d798:	str	r2, [sp, #52]	; 0x34
    d79a:	bl	12928 <__mcmp>
    d79e:	cmp	r0, #0
    d7a0:	blt.w	dfbe <_strtod_l+0xd06>
    d7a4:	beq.w	df38 <_strtod_l+0xc80>
    d7a8:	mov	r1, sl
    d7aa:	mov	r0, r7
    d7ac:	bl	12c60 <__ratio>
    d7b0:	vmov	r4, r5, d0
    d7b4:	movs	r2, #0
    d7b6:	mov.w	r3, #1073741824	; 0x40000000
    d7ba:	vmov	r0, s0
    d7be:	mov	r1, r5
    d7c0:	bl	bb20 <__aeabi_dcmple>
    d7c4:	cmp	r0, #0
    d7c6:	beq.n	d89c <_strtod_l+0x5e4>
    d7c8:	ldr	r3, [sp, #52]	; 0x34
    d7ca:	cmp	r3, #0
    d7cc:	beq.w	d91e <_strtod_l+0x666>
    d7d0:	vldr	d7, [pc, #260]	; d8d8 <_strtod_l+0x620>
    d7d4:	ldr	r3, [sp, #20]
    d7d6:	ldr	r5, [pc, #280]	; (d8f0 <_strtod_l+0x638>)
    d7d8:	vstr	d7, [sp, #56]	; 0x38
    d7dc:	movs	r4, #0
    d7de:	mov	r8, r3
    d7e0:	ldr.w	r9, [pc, #276]	; d8f8 <_strtod_l+0x640>
    d7e4:	ldr	r3, [pc, #268]	; (d8f4 <_strtod_l+0x63c>)
    d7e6:	and.w	r9, r8, r9
    d7ea:	cmp	r9, r3
    d7ec:	beq.w	dc1c <_strtod_l+0x964>
    d7f0:	ldr	r3, [sp, #40]	; 0x28
    d7f2:	cbz	r3, d840 <_strtod_l+0x588>
    d7f4:	cmp.w	r9, #111149056	; 0x6a00000
    d7f8:	bhi.n	d840 <_strtod_l+0x588>
    d7fa:	add	r3, pc, #228	; (adr r3, d8e0 <_strtod_l+0x628>)
    d7fc:	ldrd	r2, r3, [r3]
    d800:	ldrd	r0, r1, [sp, #56]	; 0x38
    d804:	bl	bb20 <__aeabi_dcmple>
    d808:	cbz	r0, d838 <_strtod_l+0x580>
    d80a:	ldrd	r0, r1, [sp, #56]	; 0x38
    d80e:	bl	bbd8 <__aeabi_d2uiz>
    d812:	cmp	r0, #0
    d814:	beq.w	de98 <_strtod_l+0xbe0>
    d818:	bl	b53c <__aeabi_ui2d>
    d81c:	strd	r0, r1, [sp, #56]	; 0x38
    d820:	ldr	r3, [sp, #52]	; 0x34
    d822:	cmp	r3, #0
    d824:	bne.w	de8e <_strtod_l+0xbd6>
    d828:	ldrd	r1, r2, [sp, #56]	; 0x38
    d82c:	add.w	r3, r2, #2147483648	; 0x80000000
    d830:	str	r1, [sp, #80]	; 0x50
    d832:	str	r3, [sp, #84]	; 0x54
    d834:	ldrd	r4, r5, [sp, #80]	; 0x50
    d838:	add.w	r3, r5, #112197632	; 0x6b00000
    d83c:	rsb	r5, r9, r3
    d840:	vldr	d0, [sp, #32]
    d844:	bl	12a80 <__ulp>
    d848:	mov	r0, r4
    d84a:	vmov	r2, r3, d0
    d84e:	mov	r1, r5
    d850:	bl	b628 <__aeabi_dmul>
    d854:	ldrd	r2, r3, [sp, #32]
    d858:	bl	b2c4 <__adddf3>
    d85c:	strd	r0, r1, [sp, #16]
    d860:	mov	r4, r1
    d862:	ldr	r3, [sp, #40]	; 0x28
    d864:	cbnz	r3, d870 <_strtod_l+0x5b8>
    d866:	ldr	r3, [pc, #144]	; (d8f8 <_strtod_l+0x640>)
    d868:	ands	r3, r4
    d86a:	cmp	r9, r3
    d86c:	beq.w	dc8c <_strtod_l+0x9d4>
    d870:	ldr	r1, [sp, #112]	; 0x70
    d872:	mov	r0, fp
    d874:	bl	124cc <_Bfree>
    d878:	mov	r1, r6
    d87a:	mov	r0, fp
    d87c:	bl	124cc <_Bfree>
    d880:	mov	r1, sl
    d882:	mov	r0, fp
    d884:	bl	124cc <_Bfree>
    d888:	mov	r1, r7
    d88a:	mov	r0, fp
    d88c:	bl	124cc <_Bfree>
    d890:	b.n	d642 <_strtod_l+0x38a>
    d892:	movs	r2, #0
    d894:	str	r2, [sp, #76]	; 0x4c
    d896:	movs	r2, #1
    d898:	str	r2, [sp, #56]	; 0x38
    d89a:	b.n	d6cc <_strtod_l+0x414>
    d89c:	ldr	r3, [pc, #92]	; (d8fc <_strtod_l+0x644>)
    d89e:	mov	r0, r4
    d8a0:	mov	r1, r5
    d8a2:	movs	r2, #0
    d8a4:	bl	b628 <__aeabi_dmul>
    d8a8:	ldr	r3, [sp, #52]	; 0x34
    d8aa:	strd	r0, r1, [sp, #56]	; 0x38
    d8ae:	cmp	r3, #0
    d8b0:	bne.n	d968 <_strtod_l+0x6b0>
    d8b2:	add.w	r3, r1, #2147483648	; 0x80000000
    d8b6:	str	r0, [sp, #64]	; 0x40
    d8b8:	str	r3, [sp, #68]	; 0x44
    d8ba:	ldr	r3, [sp, #20]
    d8bc:	ldrd	r4, r5, [sp, #64]	; 0x40
    d8c0:	mov	r8, r3
    d8c2:	b.n	d7e0 <_strtod_l+0x528>
    d8c4:	mov.w	r9, #1
    d8c8:	cmp	r0, #0
    d8ca:	bne.n	d97e <_strtod_l+0x6c6>
    d8cc:	ldr	r3, [sp, #40]	; 0x28
    d8ce:	cmp	r3, #0
    d8d0:	beq.w	d324 <_strtod_l+0x6c>
    d8d4:	mov	r4, r0
    d8d6:	b.n	d534 <_strtod_l+0x27c>
    d8d8:	.word	0x00000000
    d8dc:	.word	0x3ff00000
    d8e0:	.word	0xffc00000
    d8e4:	.word	0x41dfffff
    d8e8:	.word	0x00014250
    d8ec:	.word	0xfffffc02
    d8f0:	.word	0x3ff00000
    d8f4:	.word	0x7fe00000
    d8f8:	.word	0x7ff00000
    d8fc:	.word	0x3fe00000
    d900:	ldr	r3, [sp, #44]	; 0x2c
    d902:	ldr	r5, [sp, #48]	; 0x30
    d904:	subs	r4, r3, r2
    d906:	b.n	d6a0 <_strtod_l+0x3e8>
    d908:	mov.w	r9, #1
    d90c:	b.n	d3c4 <_strtod_l+0x10c>
    d90e:	ldr	r1, [pc, #736]	; (dbf0 <_strtod_l+0x938>)
    d910:	subs	r1, r1, r2
    d912:	movs	r2, #1
    d914:	lsl.w	r1, r2, r1
    d918:	str	r1, [sp, #76]	; 0x4c
    d91a:	str	r2, [sp, #56]	; 0x38
    d91c:	b.n	d6cc <_strtod_l+0x414>
    d91e:	ldrd	r1, r2, [sp, #16]
    d922:	cmp	r1, #0
    d924:	bne.w	daba <_strtod_l+0x802>
    d928:	ubfx	r3, r2, #0, #20
    d92c:	mov	r8, r2
    d92e:	cmp	r3, #0
    d930:	bne.w	dac6 <_strtod_l+0x80e>
    d934:	movs	r2, #0
    d936:	ldr	r3, [pc, #700]	; (dbf4 <_strtod_l+0x93c>)
    d938:	mov	r0, r4
    d93a:	mov	r1, r5
    d93c:	bl	bb0c <__aeabi_dcmplt>
    d940:	cmp	r0, #0
    d942:	bne.w	e042 <_strtod_l+0xd8a>
    d946:	movs	r2, #0
    d948:	ldr	r3, [pc, #684]	; (dbf8 <_strtod_l+0x940>)
    d94a:	mov	r0, r4
    d94c:	mov	r1, r5
    d94e:	bl	b628 <__aeabi_dmul>
    d952:	mov	r2, r1
    d954:	mov	r1, r0
    d956:	strd	r1, r2, [sp, #56]	; 0x38
    d95a:	add.w	r3, r2, #2147483648	; 0x80000000
    d95e:	str	r0, [sp, #96]	; 0x60
    d960:	str	r3, [sp, #100]	; 0x64
    d962:	ldrd	r4, r5, [sp, #96]	; 0x60
    d966:	b.n	d7e0 <_strtod_l+0x528>
    d968:	vldr	d7, [sp, #56]	; 0x38
    d96c:	vstr	d7, [sp, #64]	; 0x40
    d970:	b.n	d8ba <_strtod_l+0x602>
    d972:	mov.w	ip, #1
    d976:	adds	r3, r6, #2
    d978:	str	r3, [sp, #108]	; 0x6c
    d97a:	ldrb	r3, [r6, #2]
    d97c:	b.n	d54c <_strtod_l+0x294>
    d97e:	movs	r4, #0
    d980:	b.n	d534 <_strtod_l+0x27c>
    d982:	cmp.w	r9, #0
    d986:	bne.w	d324 <_strtod_l+0x6c>
    d98a:	subs	r3, #73	; 0x49
    d98c:	cmp	r3, #37	; 0x25
    d98e:	bhi.w	d324 <_strtod_l+0x6c>
    d992:	add	r2, pc, #4	; (adr r2, d998 <_strtod_l+0x6e0>)
    d994:	ldr.w	pc, [r2, r3, lsl #2]
    d998:	.word	0x0000d4fd
    d99c:	.word	0x0000d325
    d9a0:	.word	0x0000d325
    d9a4:	.word	0x0000d325
    d9a8:	.word	0x0000d325
    d9ac:	.word	0x0000dad5
    d9b0:	.word	0x0000d325
    d9b4:	.word	0x0000d325
    d9b8:	.word	0x0000d325
    d9bc:	.word	0x0000d325
    d9c0:	.word	0x0000d325
    d9c4:	.word	0x0000d325
    d9c8:	.word	0x0000d325
    d9cc:	.word	0x0000d325
    d9d0:	.word	0x0000d325
    d9d4:	.word	0x0000d325
    d9d8:	.word	0x0000d325
    d9dc:	.word	0x0000d325
    d9e0:	.word	0x0000d325
    d9e4:	.word	0x0000d325
    d9e8:	.word	0x0000d325
    d9ec:	.word	0x0000d325
    d9f0:	.word	0x0000d325
    d9f4:	.word	0x0000d325
    d9f8:	.word	0x0000d325
    d9fc:	.word	0x0000d325
    da00:	.word	0x0000d325
    da04:	.word	0x0000d325
    da08:	.word	0x0000d325
    da0c:	.word	0x0000d325
    da10:	.word	0x0000d325
    da14:	.word	0x0000d325
    da18:	.word	0x0000d4fd
    da1c:	.word	0x0000d325
    da20:	.word	0x0000d325
    da24:	.word	0x0000d325
    da28:	.word	0x0000d325
    da2c:	.word	0x0000dad5
    da30:	cmp.w	r6, #308	; 0x134
    da34:	bgt.w	dc76 <_strtod_l+0x9be>
    da38:	asrs	r6, r6, #4
    da3a:	cmp	r6, #1
    da3c:	ldr.w	r9, [pc, #472]	; dc18 <_strtod_l+0x960>
    da40:	ble.w	e076 <_strtod_l+0xdbe>
    da44:	ldrd	r0, r1, [sp, #16]
    da48:	movs	r3, #0
    da4a:	mov	r7, r9
    da4c:	mov	r8, r3
    da4e:	tst.w	r6, #1
    da52:	add.w	r8, r8, #1
    da56:	mov.w	r6, r6, asr #1
    da5a:	beq.n	da66 <_strtod_l+0x7ae>
    da5c:	ldrd	r2, r3, [r7]
    da60:	bl	b628 <__aeabi_dmul>
    da64:	movs	r3, #1
    da66:	cmp	r6, #1
    da68:	add.w	r7, r7, #8
    da6c:	bne.n	da4e <_strtod_l+0x796>
    da6e:	cmp	r3, #0
    da70:	bne.w	e13a <_strtod_l+0xe82>
    da74:	ldr	r3, [sp, #20]
    da76:	sub.w	r3, r3, #55574528	; 0x3500000
    da7a:	str	r3, [sp, #20]
    da7c:	add.w	r8, r9, r8, lsl #3
    da80:	ldrd	r2, r3, [sp, #16]
    da84:	ldrd	r0, r1, [r8]
    da88:	bl	b628 <__aeabi_dmul>
    da8c:	bic.w	r3, r1, #2147483648	; 0x80000000
    da90:	lsrs	r3, r3, #20
    da92:	ldr	r2, [pc, #360]	; (dbfc <_strtod_l+0x944>)
    da94:	lsls	r3, r3, #20
    da96:	cmp	r3, r2
    da98:	strd	r0, r1, [sp, #16]
    da9c:	bhi.w	dc76 <_strtod_l+0x9be>
    daa0:	sub.w	r2, r2, #1048576	; 0x100000
    daa4:	cmp	r3, r2
    daa6:	bls.w	e038 <_strtod_l+0xd80>
    daaa:	ldr	r3, [pc, #340]	; (dc00 <_strtod_l+0x948>)
    daac:	str	r3, [sp, #20]
    daae:	movs	r3, #0
    dab0:	str	r3, [sp, #40]	; 0x28
    dab2:	mov.w	r3, #4294967295
    dab6:	str	r3, [sp, #16]
    dab8:	b.n	d614 <_strtod_l+0x35c>
    daba:	ldrd	r1, r2, [sp, #16]
    dabe:	cmp	r1, #1
    dac0:	beq.w	dea2 <_strtod_l+0xbea>
    dac4:	mov	r8, r2
    dac6:	vldr	d7, [pc, #288]	; dbe8 <_strtod_l+0x930>
    daca:	movs	r4, #0
    dacc:	ldr	r5, [pc, #308]	; (dc04 <_strtod_l+0x94c>)
    dace:	vstr	d7, [sp, #56]	; 0x38
    dad2:	b.n	d7e0 <_strtod_l+0x528>
    dad4:	add	r0, sp, #108	; 0x6c
    dad6:	ldr	r1, [pc, #304]	; (dc08 <_strtod_l+0x950>)
    dad8:	bl	12198 <__match>
    dadc:	cmp	r0, #0
    dade:	beq.w	d324 <_strtod_l+0x6c>
    dae2:	ldr	r3, [sp, #108]	; 0x6c
    dae4:	ldrb	r3, [r3, #0]
    dae6:	cmp	r3, #40	; 0x28
    dae8:	beq.w	e0f0 <_strtod_l+0xe38>
    daec:	ldr	r3, [pc, #284]	; (dc0c <_strtod_l+0x954>)
    daee:	str	r3, [sp, #20]
    daf0:	movs	r3, #0
    daf2:	str	r3, [sp, #16]
    daf4:	b.n	d528 <_strtod_l+0x270>
    daf6:	str	r6, [sp, #108]	; 0x6c
    daf8:	movs	r2, #0
    dafa:	b.n	d3d2 <_strtod_l+0x11a>
    dafc:	mov.w	ip, #0
    db00:	b.n	d976 <_strtod_l+0x6be>
    db02:	adds	r3, #1
    db04:	bne.w	e0d6 <_strtod_l+0xe1e>
    db08:	ldr	r0, [sp, #112]	; 0x70
    db0a:	ldr	r3, [pc, #260]	; (dc10 <_strtod_l+0x958>)
    db0c:	str	r3, [sp, #20]
    db0e:	movs	r2, #0
    db10:	str	r2, [sp, #16]
    db12:	ldrd	r8, r9, [sp, #16]
    db16:	movs	r3, #34	; 0x22
    db18:	str.w	r3, [fp]
    db1c:	mov	r1, r0
    db1e:	mov	r0, fp
    db20:	bl	124cc <_Bfree>
    db24:	mov	r1, r6
    db26:	mov	r0, fp
    db28:	bl	124cc <_Bfree>
    db2c:	mov	r1, sl
    db2e:	mov	r0, fp
    db30:	bl	124cc <_Bfree>
    db34:	ldr	r1, [sp, #72]	; 0x48
    db36:	mov	r0, fp
    db38:	bl	124cc <_Bfree>
    db3c:	mov	r1, r7
    db3e:	mov	r0, fp
    db40:	bl	124cc <_Bfree>
    db44:	b.n	d3e8 <_strtod_l+0x130>
    db46:	ldr	r2, [sp, #28]
    db48:	str	r5, [sp, #8]
    db4a:	add	r3, sp, #112	; 0x70
    db4c:	str	r2, [sp, #4]
    db4e:	str	r3, [sp, #0]
    db50:	ldr	r2, [pc, #192]	; (dc14 <_strtod_l+0x95c>)
    db52:	add	r3, sp, #116	; 0x74
    db54:	add	r1, sp, #108	; 0x6c
    db56:	mov	r0, fp
    db58:	bl	11c88 <__gethex>
    db5c:	ands.w	r6, r0, #7
    db60:	mov	r5, r0
    db62:	beq.w	d3e0 <_strtod_l+0x128>
    db66:	cmp	r6, #6
    db68:	bne.w	de18 <_strtod_l+0xb60>
    db6c:	adds	r4, #1
    db6e:	movs	r3, #0
    db70:	str	r4, [sp, #108]	; 0x6c
    db72:	mov.w	r8, #0
    db76:	mov.w	r9, #0
    db7a:	str	r3, [sp, #28]
    db7c:	b.n	d3e8 <_strtod_l+0x130>
    db7e:	ldr.w	r1, [sl]
    db82:	mov	r0, r4
    db84:	mov	r2, r9
    db86:	bl	d1dc <strncmp>
    db8a:	cbz	r0, dba0 <_strtod_l+0x8e8>
    db8c:	mov.w	sl, #0
    db90:	mov	r3, r7
    db92:	mov	r8, sl
    db94:	mov	r5, sl
    db96:	mov	r0, sl
    db98:	mov	r7, sl
    db9a:	mov	r4, sl
    db9c:	mov	r9, sl
    db9e:	b.n	d3c4 <_strtod_l+0x10c>
    dba0:	ldr	r3, [sp, #108]	; 0x6c
    dba2:	add.w	r2, r3, r9
    dba6:	str	r2, [sp, #108]	; 0x6c
    dba8:	ldrb.w	r3, [r3, r9]
    dbac:	cmp	r3, #48	; 0x30
    dbae:	bne.n	dbbe <_strtod_l+0x906>
    dbb0:	adds	r2, #1
    dbb2:	str	r2, [sp, #108]	; 0x6c
    dbb4:	ldrb	r3, [r2, #0]
    dbb6:	cmp	r3, #48	; 0x30
    dbb8:	add.w	r0, r0, #1
    dbbc:	beq.n	dbb0 <_strtod_l+0x8f8>
    dbbe:	sub.w	r2, r3, #49	; 0x31
    dbc2:	cmp	r2, #8
    dbc4:	bls.w	dec0 <_strtod_l+0xc08>
    dbc8:	mov.w	sl, #0
    dbcc:	cmp	r3, #101	; 0x65
    dbce:	mov	r8, sl
    dbd0:	mov	r5, sl
    dbd2:	mov	r7, sl
    dbd4:	beq.w	d8c4 <_strtod_l+0x60c>
    dbd8:	mov	r4, sl
    dbda:	mov.w	r9, #1
    dbde:	b.w	d3ca <_strtod_l+0x112>
    dbe2:	nop
    dbe4:	nop.w
    dbe8:	.word	0x00000000
    dbec:	.word	0x3ff00000
    dbf0:	.word	0xfffffbe2
    dbf4:	.word	0x3ff00000
    dbf8:	.word	0x3fe00000
    dbfc:	.word	0x7ca00000
    dc00:	.word	0x7fefffff
    dc04:	.word	0xbff00000
    dc08:	.word	0x00013f64
    dc0c:	.word	0xfff80000
    dc10:	.word	0x7ff00000
    dc14:	.word	0x00013f44
    dc18:	.word	0x00014318
    dc1c:	sub.w	r3, r8, #55574528	; 0x3500000
    dc20:	str	r3, [sp, #20]
    dc22:	vldr	d7, [sp, #16]
    dc26:	vmov.f32	s0, s14
    dc2a:	vmov.f32	s1, s15
    dc2e:	bl	12a80 <__ulp>
    dc32:	mov	r0, r4
    dc34:	vmov	r2, r3, d0
    dc38:	mov	r1, r5
    dc3a:	bl	b628 <__aeabi_dmul>
    dc3e:	ldrd	r2, r3, [sp, #16]
    dc42:	bl	b2c4 <__adddf3>
    dc46:	bic.w	r3, r1, #2147483648	; 0x80000000
    dc4a:	strd	r0, r1, [sp, #16]
    dc4e:	lsrs	r3, r3, #20
    dc50:	ldr	r2, [pc, #684]	; (df00 <_strtod_l+0xc48>)
    dc52:	ldrd	r0, r1, [sp, #32]
    dc56:	lsls	r3, r3, #20
    dc58:	cmp	r3, r2
    dc5a:	strd	r0, r1, [sp, #88]	; 0x58
    dc5e:	bls.w	ddd6 <_strtod_l+0xb1e>
    dc62:	ldr	r3, [pc, #672]	; (df04 <_strtod_l+0xc4c>)
    dc64:	cmp	r1, r3
    dc66:	beq.w	e02e <_strtod_l+0xd76>
    dc6a:	ldr	r3, [pc, #664]	; (df04 <_strtod_l+0xc4c>)
    dc6c:	str	r3, [sp, #20]
    dc6e:	mov.w	r3, #4294967295
    dc72:	str	r3, [sp, #16]
    dc74:	b.n	d870 <_strtod_l+0x5b8>
    dc76:	ldr	r3, [pc, #656]	; (df08 <_strtod_l+0xc50>)
    dc78:	str	r3, [sp, #20]
    dc7a:	movs	r2, #0
    dc7c:	movs	r3, #34	; 0x22
    dc7e:	str	r2, [sp, #16]
    dc80:	ldrd	r8, r9, [sp, #16]
    dc84:	str.w	r3, [fp]
    dc88:	b.w	d3e8 <_strtod_l+0x130>
    dc8c:	ldrd	r8, r9, [sp, #56]	; 0x38
    dc90:	mov	r1, r9
    dc92:	mov	r0, r8
    dc94:	bl	bb88 <__aeabi_d2iz>
    dc98:	bl	b55c <__aeabi_i2d>
    dc9c:	mov	r3, r1
    dc9e:	mov	r2, r0
    dca0:	mov	r1, r9
    dca2:	mov	r0, r8
    dca4:	bl	b2c0 <__aeabi_dsub>
    dca8:	ldr	r3, [sp, #52]	; 0x34
    dcaa:	mov	r8, r0
    dcac:	mov	r9, r1
    dcae:	cbnz	r3, dcd2 <_strtod_l+0xa1a>
    dcb0:	ldr	r3, [sp, #16]
    dcb2:	cbnz	r3, dcd2 <_strtod_l+0xa1a>
    dcb4:	ubfx	r4, r4, #0, #20
    dcb8:	cbnz	r4, dcd2 <_strtod_l+0xa1a>
    dcba:	add	r3, pc, #548	; (adr r3, dee0 <_strtod_l+0xc28>)
    dcbc:	ldrd	r2, r3, [r3]
    dcc0:	bl	bb0c <__aeabi_dcmplt>
    dcc4:	cmp	r0, #0
    dcc6:	beq.w	d870 <_strtod_l+0x5b8>
    dcca:	ldrd	r8, r9, [sp, #16]
    dcce:	ldr	r0, [sp, #112]	; 0x70
    dcd0:	b.n	db1c <_strtod_l+0x864>
    dcd2:	add	r3, pc, #532	; (adr r3, dee8 <_strtod_l+0xc30>)
    dcd4:	ldrd	r2, r3, [r3]
    dcd8:	mov	r0, r8
    dcda:	mov	r1, r9
    dcdc:	bl	bb0c <__aeabi_dcmplt>
    dce0:	cmp	r0, #0
    dce2:	bne.n	dcca <_strtod_l+0xa12>
    dce4:	mov	r0, r8
    dce6:	mov	r1, r9
    dce8:	add	r3, pc, #516	; (adr r3, def0 <_strtod_l+0xc38>)
    dcea:	ldrd	r2, r3, [r3]
    dcee:	bl	bb48 <__aeabi_dcmpgt>
    dcf2:	cmp	r0, #0
    dcf4:	beq.w	d870 <_strtod_l+0x5b8>
    dcf8:	b.n	dcca <_strtod_l+0xa12>
    dcfa:	beq.w	d610 <_strtod_l+0x358>
    dcfe:	rsb	r6, r9, #0
    dd02:	ands.w	r2, r6, #15
    dd06:	beq.n	dd1e <_strtod_l+0xa66>
    dd08:	ldr	r3, [pc, #512]	; (df0c <_strtod_l+0xc54>)
    dd0a:	add.w	r3, r3, r2, lsl #3
    dd0e:	ldrd	r0, r1, [sp, #16]
    dd12:	ldrd	r2, r3, [r3]
    dd16:	bl	b87c <__aeabi_ddiv>
    dd1a:	strd	r0, r1, [sp, #16]
    dd1e:	asrs	r6, r6, #4
    dd20:	beq.w	d610 <_strtod_l+0x358>
    dd24:	cmp	r6, #31
    dd26:	bgt.n	dd9a <_strtod_l+0xae2>
    dd28:	ands.w	r3, r6, #16
    dd2c:	beq.w	e0a0 <_strtod_l+0xde8>
    dd30:	movs	r3, #106	; 0x6a
    dd32:	cmp	r6, #0
    dd34:	str	r3, [sp, #40]	; 0x28
    dd36:	ble.n	dd60 <_strtod_l+0xaa8>
    dd38:	ldrd	r0, r1, [sp, #16]
    dd3c:	ldr	r7, [pc, #464]	; (df10 <_strtod_l+0xc58>)
    dd3e:	movs	r3, #0
    dd40:	lsls	r2, r6, #31
    dd42:	bpl.n	dd4e <_strtod_l+0xa96>
    dd44:	ldrd	r2, r3, [r7]
    dd48:	bl	b628 <__aeabi_dmul>
    dd4c:	movs	r3, #1
    dd4e:	asrs	r6, r6, #1
    dd50:	add.w	r7, r7, #8
    dd54:	bne.n	dd40 <_strtod_l+0xa88>
    dd56:	cmp	r3, #0
    dd58:	bne.w	e140 <_strtod_l+0xe88>
    dd5c:	ldr	r3, [sp, #40]	; 0x28
    dd5e:	cbz	r3, dd88 <_strtod_l+0xad0>
    dd60:	ldrd	r1, r2, [sp, #16]
    dd64:	ubfx	r3, r2, #20, #11
    dd68:	rsb	r3, r3, #107	; 0x6b
    dd6c:	cmp	r3, #0
    dd6e:	mov	r1, r2
    dd70:	ble.n	dd88 <_strtod_l+0xad0>
    dd72:	cmp	r3, #31
    dd74:	ble.w	e12a <_strtod_l+0xe72>
    dd78:	movs	r2, #0
    dd7a:	cmp	r3, #52	; 0x34
    dd7c:	str	r2, [sp, #16]
    dd7e:	ble.w	e146 <_strtod_l+0xe8e>
    dd82:	mov.w	r3, #57671680	; 0x3700000
    dd86:	str	r3, [sp, #20]
    dd88:	movs	r2, #0
    dd8a:	movs	r3, #0
    dd8c:	ldrd	r0, r1, [sp, #16]
    dd90:	bl	baf8 <__aeabi_dcmpeq>
    dd94:	cmp	r0, #0
    dd96:	beq.w	d614 <_strtod_l+0x35c>
    dd9a:	movs	r3, #34	; 0x22
    dd9c:	str.w	r3, [fp]
    dda0:	mov.w	r8, #0
    dda4:	mov.w	r9, #0
    dda8:	b.w	d3e8 <_strtod_l+0x130>
    ddac:	ldr	r1, [sp, #108]	; 0x6c
    ddae:	adds	r4, #1
    ddb0:	cmp	r0, #8
    ddb2:	ble.w	ded2 <_strtod_l+0xc1a>
    ddb6:	cmp	r4, #16
    ddb8:	itt	le
    ddba:	addle.w	r8, r8, r8, lsl #2
    ddbe:	addle.w	r8, r2, r8, lsl #1
    ddc2:	movs	r0, #0
    ddc4:	adds	r3, r1, #1
    ddc6:	str	r3, [sp, #108]	; 0x6c
    ddc8:	ldrb	r3, [r1, #1]
    ddca:	b.w	d40c <_strtod_l+0x154>
    ddce:	movw	r2, #19999	; 0x4e1f
    ddd2:	b.w	d5be <_strtod_l+0x306>
    ddd6:	ldr	r3, [sp, #20]
    ddd8:	add.w	r4, r3, #55574528	; 0x3500000
    dddc:	str	r4, [sp, #20]
    ddde:	b.n	d862 <_strtod_l+0x5aa>
    dde0:	ldr	r6, [sp, #44]	; 0x2c
    dde2:	rsb	r3, r4, #37	; 0x25
    dde6:	cmp	r6, r3
    dde8:	bgt.w	d5dc <_strtod_l+0x324>
    ddec:	ldr	r5, [pc, #284]	; (df0c <_strtod_l+0xc54>)
    ddee:	rsb	r4, r4, #15
    ddf2:	add.w	r1, r5, r4, lsl #3
    ddf6:	subs	r4, r6, r4
    ddf8:	ldrd	r2, r3, [sp, #16]
    ddfc:	ldrd	r0, r1, [r1]
    de00:	add.w	r5, r5, r4, lsl #3
    de04:	bl	b628 <__aeabi_dmul>
    de08:	ldrd	r2, r3, [r5]
    de0c:	bl	b628 <__aeabi_dmul>
    de10:	mov	r8, r0
    de12:	mov	r9, r1
    de14:	b.w	d3e8 <_strtod_l+0x130>
    de18:	ldr	r2, [sp, #112]	; 0x70
    de1a:	cbz	r2, de2c <_strtod_l+0xb74>
    de1c:	movs	r1, #53	; 0x35
    de1e:	add	r0, sp, #120	; 0x78
    de20:	bl	12cc0 <__copybits>
    de24:	mov	r0, fp
    de26:	ldr	r1, [sp, #112]	; 0x70
    de28:	bl	124cc <_Bfree>
    de2c:	cmp	r6, #6
    de2e:	bhi.n	de48 <_strtod_l+0xb90>
    de30:	tbb	[pc, r6]
    de34:	.word	0x1318211d
    de38:	.short	0x2104
    de3a:	.byte	0x1d
    de3b:	.byte	0x00
    de3c:	mvn.w	r3, #2147483648	; 0x80000000
    de40:	str	r3, [sp, #20]
    de42:	mov.w	r3, #4294967295
    de46:	str	r3, [sp, #16]
    de48:	lsls	r1, r5, #28
    de4a:	bpl.w	d528 <_strtod_l+0x270>
    de4e:	ldr	r3, [sp, #20]
    de50:	orr.w	r3, r3, #2147483648	; 0x80000000
    de54:	str	r3, [sp, #20]
    de56:	b.w	d528 <_strtod_l+0x270>
    de5a:	ldr	r3, [pc, #172]	; (df08 <_strtod_l+0xc50>)
    de5c:	str	r3, [sp, #20]
    de5e:	movs	r3, #0
    de60:	str	r3, [sp, #16]
    de62:	b.n	de48 <_strtod_l+0xb90>
    de64:	ldr	r3, [sp, #120]	; 0x78
    de66:	str	r3, [sp, #16]
    de68:	ldr	r3, [sp, #124]	; 0x7c
    de6a:	str	r3, [sp, #20]
    de6c:	b.n	de48 <_strtod_l+0xb90>
    de6e:	movs	r3, #0
    de70:	str	r3, [sp, #20]
    de72:	str	r3, [sp, #16]
    de74:	b.n	de48 <_strtod_l+0xb90>
    de76:	ldr	r2, [sp, #116]	; 0x74
    de78:	ldr	r3, [sp, #124]	; 0x7c
    de7a:	ldr	r1, [sp, #120]	; 0x78
    de7c:	str	r1, [sp, #16]
    de7e:	addw	r2, r2, #1075	; 0x433
    de82:	bic.w	r3, r3, #1048576	; 0x100000
    de86:	orr.w	r3, r3, r2, lsl #20
    de8a:	str	r3, [sp, #20]
    de8c:	b.n	de48 <_strtod_l+0xb90>
    de8e:	vldr	d7, [sp, #56]	; 0x38
    de92:	vstr	d7, [sp, #80]	; 0x50
    de96:	b.n	d834 <_strtod_l+0x57c>
    de98:	vldr	d7, [pc, #92]	; def8 <_strtod_l+0xc40>
    de9c:	vstr	d7, [sp, #56]	; 0x38
    dea0:	b.n	d820 <_strtod_l+0x568>
    dea2:	ldrd	r1, r2, [sp, #16]
    dea6:	mov	r8, r2
    dea8:	cmp	r2, #0
    deaa:	bne.w	dac6 <_strtod_l+0x80e>
    deae:	movs	r3, #34	; 0x22
    deb0:	str.w	r3, [fp]
    deb4:	ldr	r0, [sp, #112]	; 0x70
    deb6:	mov.w	r8, #0
    deba:	mov.w	r9, #0
    debe:	b.n	db1c <_strtod_l+0x864>
    dec0:	ldr	r2, [sp, #108]	; 0x6c
    dec2:	str	r2, [sp, #32]
    dec4:	movs	r5, #0
    dec6:	subs	r3, #48	; 0x30
    dec8:	adds	r7, r0, #1
    deca:	mov	r1, r2
    decc:	mov	sl, r5
    dece:	mov	r8, r5
    ded0:	movs	r4, #1
    ded2:	add.w	r5, r5, r5, lsl #2
    ded6:	add.w	r5, r3, r5, lsl #1
    deda:	movs	r0, #0
    dedc:	b.n	ddc4 <_strtod_l+0xb0c>
    dede:	nop
    dee0:	.word	0x94a03595
    dee4:	.word	0x3fcfffff
    dee8:	.word	0x94a03595
    deec:	.word	0x3fdfffff
    def0:	.word	0x35afe535
    def4:	.word	0x3fe00000
    def8:	.word	0x00000000
    defc:	.word	0x3ff00000
    df00:	.word	0x7c9fffff
    df04:	.word	0x7fefffff
    df08:	.word	0x7ff00000
    df0c:	.word	0x00014250
    df10:	.word	0x00013f80
    df14:	ldr	r1, [sp, #44]	; 0x2c
    df16:	cmn.w	r1, #22
    df1a:	blt.w	d5dc <_strtod_l+0x324>
    df1e:	ldr	r2, [pc, #600]	; (e178 <_strtod_l+0xec0>)
    df20:	sub.w	r2, r2, r1, lsl #3
    df24:	ldrd	r2, r3, [r2]
    df28:	ldrd	r0, r1, [sp, #16]
    df2c:	bl	b87c <__aeabi_ddiv>
    df30:	mov	r8, r0
    df32:	mov	r9, r1
    df34:	b.w	d3e8 <_strtod_l+0x130>
    df38:	ldr	r3, [sp, #52]	; 0x34
    df3a:	ldrd	r8, r9, [sp, #32]
    df3e:	cmp	r3, #0
    df40:	beq.w	e054 <_strtod_l+0xd9c>
    df44:	ldrd	r4, r5, [sp, #16]
    df48:	ldr	r3, [pc, #560]	; (e17c <_strtod_l+0xec4>)
    df4a:	ubfx	r1, r5, #0, #20
    df4e:	cmp	r1, r3
    df50:	mov	r2, r5
    df52:	beq.w	e0aa <_strtod_l+0xdf2>
    df56:	ldr	r3, [sp, #76]	; 0x4c
    df58:	cmp	r3, #0
    df5a:	beq.w	e06c <_strtod_l+0xdb4>
    df5e:	ldr	r2, [sp, #20]
    df60:	tst	r3, r2
    df62:	beq.n	df86 <_strtod_l+0xcce>
    df64:	ldr	r3, [sp, #52]	; 0x34
    df66:	ldr	r2, [sp, #40]	; 0x28
    df68:	ldrd	r0, r1, [sp, #16]
    df6c:	cmp	r3, #0
    df6e:	beq.w	e07c <_strtod_l+0xdc4>
    df72:	bl	d27c <sulp>
    df76:	mov	r2, r0
    df78:	mov	r3, r1
    df7a:	mov	r0, r8
    df7c:	mov	r1, r9
    df7e:	bl	b2c4 <__adddf3>
    df82:	mov	r8, r0
    df84:	mov	r9, r1
    df86:	ldr	r3, [sp, #40]	; 0x28
    df88:	cbz	r3, dfba <_strtod_l+0xd02>
    df8a:	ldr	r3, [pc, #500]	; (e180 <_strtod_l+0xec8>)
    df8c:	str	r3, [sp, #92]	; 0x5c
    df8e:	movs	r3, #0
    df90:	str	r3, [sp, #88]	; 0x58
    df92:	ldrd	r2, r3, [sp, #88]	; 0x58
    df96:	mov	r0, r8
    df98:	mov	r1, r9
    df9a:	bl	b628 <__aeabi_dmul>
    df9e:	mov	r3, r0
    dfa0:	mov	r4, r1
    dfa2:	mov	r8, r0
    dfa4:	mov	r9, r1
    dfa6:	strd	r3, r4, [sp, #16]
    dfaa:	cbnz	r1, dfba <_strtod_l+0xd02>
    dfac:	ldr	r3, [sp, #16]
    dfae:	cbnz	r3, dfba <_strtod_l+0xd02>
    dfb0:	movs	r3, #34	; 0x22
    dfb2:	ldr	r0, [sp, #112]	; 0x70
    dfb4:	str.w	r3, [fp]
    dfb8:	b.n	db1c <_strtod_l+0x864>
    dfba:	ldr	r0, [sp, #112]	; 0x70
    dfbc:	b.n	db1c <_strtod_l+0x864>
    dfbe:	ldr	r3, [sp, #52]	; 0x34
    dfc0:	ldrd	r8, r9, [sp, #32]
    dfc4:	cmp	r3, #0
    dfc6:	bne.n	df86 <_strtod_l+0xcce>
    dfc8:	ldrd	r1, r2, [sp, #16]
    dfcc:	cmp	r1, #0
    dfce:	bne.n	df86 <_strtod_l+0xcce>
    dfd0:	ubfx	r3, r2, #0, #20
    dfd4:	mov	r4, r2
    dfd6:	cmp	r3, #0
    dfd8:	bne.n	df86 <_strtod_l+0xcce>
    dfda:	bic.w	r3, r2, #2147483648	; 0x80000000
    dfde:	lsrs	r3, r3, #20
    dfe0:	lsls	r3, r3, #20
    dfe2:	cmp.w	r3, #112197632	; 0x6b00000
    dfe6:	bls.n	df86 <_strtod_l+0xcce>
    dfe8:	ldr	r3, [r7, #20]
    dfea:	cbnz	r3, dff2 <_strtod_l+0xd3a>
    dfec:	ldr	r3, [r7, #16]
    dfee:	cmp	r3, #1
    dff0:	ble.n	df86 <_strtod_l+0xcce>
    dff2:	mov	r1, r7
    dff4:	movs	r2, #1
    dff6:	mov	r0, fp
    dff8:	bl	12878 <__lshift>
    dffc:	mov	r1, sl
    dffe:	mov	r7, r0
    e000:	bl	12928 <__mcmp>
    e004:	cmp	r0, #0
    e006:	ble.n	df86 <_strtod_l+0xcce>
    e008:	ldr	r3, [sp, #40]	; 0x28
    e00a:	cmp	r3, #0
    e00c:	bne.w	e114 <_strtod_l+0xe5c>
    e010:	ldr	r3, [pc, #368]	; (e184 <_strtod_l+0xecc>)
    e012:	ands	r3, r4
    e014:	sub.w	r3, r3, #1048576	; 0x100000
    e018:	mvn.w	r3, r3, lsr #20
    e01c:	mvn.w	r3, r3, lsl #20
    e020:	str	r3, [sp, #20]
    e022:	mov.w	r3, #4294967295
    e026:	str	r3, [sp, #16]
    e028:	ldrd	r8, r9, [sp, #16]
    e02c:	b.n	df86 <_strtod_l+0xcce>
    e02e:	ldr	r3, [sp, #88]	; 0x58
    e030:	adds	r3, #1
    e032:	bne.w	dc6a <_strtod_l+0x9b2>
    e036:	b.n	db08 <_strtod_l+0x850>
    e038:	add.w	r3, r1, #55574528	; 0x3500000
    e03c:	str	r3, [sp, #20]
    e03e:	b.w	d610 <_strtod_l+0x358>
    e042:	vldr	d7, [pc, #292]	; e168 <_strtod_l+0xeb0>
    e046:	vstr	d7, [sp, #96]	; 0x60
    e04a:	vldr	d7, [pc, #292]	; e170 <_strtod_l+0xeb8>
    e04e:	vstr	d7, [sp, #56]	; 0x38
    e052:	b.n	d962 <_strtod_l+0x6aa>
    e054:	ldrd	r1, r2, [sp, #16]
    e058:	ubfx	r3, r2, #0, #20
    e05c:	mov	r4, r2
    e05e:	cmp	r3, #0
    e060:	bne.w	df56 <_strtod_l+0xc9e>
    e064:	cmp	r1, #0
    e066:	bne.w	df56 <_strtod_l+0xc9e>
    e06a:	b.n	e008 <_strtod_l+0xd50>
    e06c:	ldr	r3, [sp, #56]	; 0x38
    e06e:	ldr	r2, [sp, #16]
    e070:	tst	r3, r2
    e072:	beq.n	df86 <_strtod_l+0xcce>
    e074:	b.n	df64 <_strtod_l+0xcac>
    e076:	mov.w	r8, #0
    e07a:	b.n	da74 <_strtod_l+0x7bc>
    e07c:	bl	d27c <sulp>
    e080:	mov	r2, r0
    e082:	mov	r3, r1
    e084:	mov	r0, r8
    e086:	mov	r1, r9
    e088:	bl	b2c0 <__aeabi_dsub>
    e08c:	movs	r2, #0
    e08e:	movs	r3, #0
    e090:	mov	r8, r0
    e092:	mov	r9, r1
    e094:	bl	baf8 <__aeabi_dcmpeq>
    e098:	cmp	r0, #0
    e09a:	bne.w	deae <_strtod_l+0xbf6>
    e09e:	b.n	df86 <_strtod_l+0xcce>
    e0a0:	cmp	r6, #0
    e0a2:	str	r3, [sp, #40]	; 0x28
    e0a4:	bgt.w	dd38 <_strtod_l+0xa80>
    e0a8:	b.n	dd88 <_strtod_l+0xad0>
    e0aa:	ldr	r3, [sp, #40]	; 0x28
    e0ac:	ldr	r1, [sp, #16]
    e0ae:	cbz	r3, e0ea <_strtod_l+0xe32>
    e0b0:	ldr	r3, [pc, #208]	; (e184 <_strtod_l+0xecc>)
    e0b2:	ands	r3, r5
    e0b4:	cmp.w	r3, #111149056	; 0x6a00000
    e0b8:	bhi.n	e0ea <_strtod_l+0xe32>
    e0ba:	lsrs	r3, r3, #20
    e0bc:	rsb	r3, r3, #107	; 0x6b
    e0c0:	mov.w	r0, #4294967295
    e0c4:	lsl.w	r3, r0, r3
    e0c8:	cmp	r3, r1
    e0ca:	bne.w	df56 <_strtod_l+0xc9e>
    e0ce:	ldr	r1, [pc, #184]	; (e188 <_strtod_l+0xed0>)
    e0d0:	cmp	r2, r1
    e0d2:	beq.w	db02 <_strtod_l+0x84a>
    e0d6:	ldr	r3, [pc, #172]	; (e184 <_strtod_l+0xecc>)
    e0d8:	ands	r3, r2
    e0da:	add.w	r3, r3, #1048576	; 0x100000
    e0de:	str	r3, [sp, #20]
    e0e0:	movs	r3, #0
    e0e2:	str	r3, [sp, #16]
    e0e4:	ldrd	r8, r9, [sp, #16]
    e0e8:	b.n	df86 <_strtod_l+0xcce>
    e0ea:	mov.w	r3, #4294967295
    e0ee:	b.n	e0c8 <_strtod_l+0xe10>
    e0f0:	add	r0, sp, #108	; 0x6c
    e0f2:	add	r2, sp, #120	; 0x78
    e0f4:	ldr	r1, [pc, #148]	; (e18c <_strtod_l+0xed4>)
    e0f6:	bl	121c8 <__hexnan>
    e0fa:	cmp	r0, #5
    e0fc:	bne.w	daec <_strtod_l+0x834>
    e100:	ldr	r3, [sp, #124]	; 0x7c
    e102:	orr.w	r3, r3, #2139095040	; 0x7f800000
    e106:	orr.w	r3, r3, #7340032	; 0x700000
    e10a:	str	r3, [sp, #20]
    e10c:	ldr	r3, [sp, #120]	; 0x78
    e10e:	str	r3, [sp, #16]
    e110:	b.w	d528 <_strtod_l+0x270>
    e114:	ldr	r3, [pc, #108]	; (e184 <_strtod_l+0xecc>)
    e116:	ands	r3, r4
    e118:	cmp.w	r3, #112197632	; 0x6b00000
    e11c:	bgt.w	e014 <_strtod_l+0xd5c>
    e120:	cmp.w	r3, #57671680	; 0x3700000
    e124:	bgt.w	df8a <_strtod_l+0xcd2>
    e128:	b.n	deae <_strtod_l+0xbf6>
    e12a:	mov.w	r2, #4294967295
    e12e:	lsl.w	r3, r2, r3
    e132:	ldr	r2, [sp, #16]
    e134:	ands	r2, r3
    e136:	str	r2, [sp, #16]
    e138:	b.n	dd88 <_strtod_l+0xad0>
    e13a:	strd	r0, r1, [sp, #16]
    e13e:	b.n	da74 <_strtod_l+0x7bc>
    e140:	strd	r0, r1, [sp, #16]
    e144:	b.n	dd5c <_strtod_l+0xaa4>
    e146:	subs	r3, #32
    e148:	mov.w	r2, #4294967295
    e14c:	lsl.w	r3, r2, r3
    e150:	ands	r3, r1
    e152:	str	r3, [sp, #20]
    e154:	b.n	dd88 <_strtod_l+0xad0>
    e156:	mov	r0, r4
    e158:	ldr	r1, [sp, #108]	; 0x6c
    e15a:	adds	r4, #1
    e15c:	b.n	ddb0 <_strtod_l+0xaf8>
    e15e:	mov	r0, r1
    e160:	ldr	r1, [sp, #108]	; 0x6c
    e162:	b.n	ddc4 <_strtod_l+0xb0c>
    e164:	nop.w
    e168:	.word	0x00000000
    e16c:	.word	0xbfe00000
    e170:	.word	0x00000000
    e174:	.word	0x3fe00000
    e178:	.word	0x00014250
    e17c:	.word	0x000fffff
    e180:	.word	0x39500000
    e184:	.word	0x7ff00000
    e188:	.word	0x7fefffff
    e18c:	.word	0x00013f68

0000e190 <_strtod_r>:
    e190:	ldr	r3, [pc, #20]	; (e1a8 <_strtod_r+0x18>)
    e192:	ldr	r3, [r3, #0]
    e194:	push	{r4}
    e196:	ldr	r3, [r3, #52]	; 0x34
    e198:	ldr	r4, [pc, #16]	; (e1ac <_strtod_r+0x1c>)
    e19a:	cmp	r3, #0
    e19c:	it	eq
    e19e:	moveq	r3, r4
    e1a0:	ldr.w	r4, [sp], #4
    e1a4:	b.w	d2b8 <_strtod_l>
    e1a8:	.word	0x1fff0d78
    e1ac:	.word	0x1fff0d7c

0000e1b0 <_strtol_l.isra.0>:
    e1b0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1b4:	ldr.w	r9, [sp, #40]	; 0x28
    e1b8:	mov	r7, r1
    e1ba:	mov	r8, r0
    e1bc:	mov	r6, r2
    e1be:	mov	r5, r3
    e1c0:	mov	fp, r1
    e1c2:	b.n	e1c6 <_strtol_l.isra.0+0x16>
    e1c4:	mov	fp, r4
    e1c6:	mov	r4, fp
    e1c8:	mov	r0, r9
    e1ca:	ldrb.w	sl, [r4], #1
    e1ce:	bl	c3a4 <__locale_ctype_ptr_l>
    e1d2:	add	r0, sl
    e1d4:	ldrb	r1, [r0, #1]
    e1d6:	and.w	r1, r1, #8
    e1da:	and.w	ip, r1, #255	; 0xff
    e1de:	cmp	r1, #0
    e1e0:	bne.n	e1c4 <_strtol_l.isra.0+0x14>
    e1e2:	mov	r2, sl
    e1e4:	cmp	r2, #45	; 0x2d
    e1e6:	beq.n	e2ac <_strtol_l.isra.0+0xfc>
    e1e8:	cmp	r2, #43	; 0x2b
    e1ea:	itt	eq
    e1ec:	ldrbeq.w	r2, [fp, #1]
    e1f0:	addeq.w	r4, fp, #2
    e1f4:	cmp	r5, #0
    e1f6:	beq.n	e280 <_strtol_l.isra.0+0xd0>
    e1f8:	cmp	r5, #16
    e1fa:	beq.n	e2c8 <_strtol_l.isra.0+0x118>
    e1fc:	mov	r9, r5
    e1fe:	cmp.w	ip, #0
    e202:	ite	eq
    e204:	mvneq.w	sl, #2147483648	; 0x80000000
    e208:	movne.w	sl, #2147483648	; 0x80000000
    e20c:	movs	r1, #0
    e20e:	udiv	lr, sl, r9
    e212:	mov	r0, r1
    e214:	mls	sl, r9, lr, sl
    e218:	b.n	e226 <_strtol_l.isra.0+0x76>
    e21a:	beq.n	e270 <_strtol_l.isra.0+0xc0>
    e21c:	mla	r0, r9, r0, r3
    e220:	movs	r1, #1
    e222:	ldrb.w	r2, [r4], #1
    e226:	sub.w	r3, r2, #48	; 0x30
    e22a:	cmp	r3, #9
    e22c:	bls.n	e23a <_strtol_l.isra.0+0x8a>
    e22e:	sub.w	r3, r2, #65	; 0x41
    e232:	cmp	r3, #25
    e234:	bhi.n	e24c <_strtol_l.isra.0+0x9c>
    e236:	sub.w	r3, r2, #55	; 0x37
    e23a:	cmp	r5, r3
    e23c:	ble.n	e25c <_strtol_l.isra.0+0xac>
    e23e:	adds	r2, r1, #1
    e240:	beq.n	e222 <_strtol_l.isra.0+0x72>
    e242:	cmp	lr, r0
    e244:	bcs.n	e21a <_strtol_l.isra.0+0x6a>
    e246:	mov.w	r1, #4294967295
    e24a:	b.n	e222 <_strtol_l.isra.0+0x72>
    e24c:	sub.w	r3, r2, #97	; 0x61
    e250:	cmp	r3, #25
    e252:	bhi.n	e25c <_strtol_l.isra.0+0xac>
    e254:	sub.w	r3, r2, #87	; 0x57
    e258:	cmp	r5, r3
    e25a:	bgt.n	e23e <_strtol_l.isra.0+0x8e>
    e25c:	adds	r3, r1, #1
    e25e:	beq.n	e28c <_strtol_l.isra.0+0xdc>
    e260:	cmp.w	ip, #0
    e264:	bne.n	e288 <_strtol_l.isra.0+0xd8>
    e266:	cbz	r6, e27c <_strtol_l.isra.0+0xcc>
    e268:	cbnz	r1, e2a4 <_strtol_l.isra.0+0xf4>
    e26a:	str	r7, [r6, #0]
    e26c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e270:	cmp	sl, r3
    e272:	bge.n	e21c <_strtol_l.isra.0+0x6c>
    e274:	mov	r0, lr
    e276:	mov.w	r1, #4294967295
    e27a:	b.n	e222 <_strtol_l.isra.0+0x72>
    e27c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e280:	cmp	r2, #48	; 0x30
    e282:	beq.n	e2ba <_strtol_l.isra.0+0x10a>
    e284:	movs	r5, #10
    e286:	b.n	e1fc <_strtol_l.isra.0+0x4c>
    e288:	negs	r0, r0
    e28a:	b.n	e266 <_strtol_l.isra.0+0xb6>
    e28c:	cmp.w	ip, #0
    e290:	mov.w	r3, #34	; 0x22
    e294:	ite	eq
    e296:	mvneq.w	r0, #2147483648	; 0x80000000
    e29a:	movne.w	r0, #2147483648	; 0x80000000
    e29e:	str.w	r3, [r8]
    e2a2:	cbz	r6, e2e2 <_strtol_l.isra.0+0x132>
    e2a4:	subs	r7, r4, #1
    e2a6:	str	r7, [r6, #0]
    e2a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2ac:	add.w	r4, fp, #2
    e2b0:	ldrb.w	r2, [fp, #1]
    e2b4:	mov.w	ip, #1
    e2b8:	b.n	e1f4 <_strtol_l.isra.0+0x44>
    e2ba:	ldrb	r3, [r4, #0]
    e2bc:	and.w	r3, r3, #223	; 0xdf
    e2c0:	cmp	r3, #88	; 0x58
    e2c2:	beq.n	e2d6 <_strtol_l.isra.0+0x126>
    e2c4:	movs	r5, #8
    e2c6:	b.n	e1fc <_strtol_l.isra.0+0x4c>
    e2c8:	cmp	r2, #48	; 0x30
    e2ca:	bne.n	e1fc <_strtol_l.isra.0+0x4c>
    e2cc:	ldrb	r3, [r4, #0]
    e2ce:	and.w	r3, r3, #223	; 0xdf
    e2d2:	cmp	r3, #88	; 0x58
    e2d4:	bne.n	e1fc <_strtol_l.isra.0+0x4c>
    e2d6:	mov.w	r9, #16
    e2da:	ldrb	r2, [r4, #1]
    e2dc:	mov	r5, r9
    e2de:	adds	r4, #2
    e2e0:	b.n	e1fe <_strtol_l.isra.0+0x4e>
    e2e2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2e6:	nop

0000e2e8 <_strtol_r>:
    e2e8:	push	{r4, r5, lr}
    e2ea:	ldr	r4, [pc, #24]	; (e304 <_strtol_r+0x1c>)
    e2ec:	ldr	r5, [pc, #24]	; (e308 <_strtol_r+0x20>)
    e2ee:	ldr	r4, [r4, #0]
    e2f0:	ldr	r4, [r4, #52]	; 0x34
    e2f2:	sub	sp, #12
    e2f4:	cmp	r4, #0
    e2f6:	it	eq
    e2f8:	moveq	r4, r5
    e2fa:	str	r4, [sp, #0]
    e2fc:	bl	e1b0 <_strtol_l.isra.0>
    e300:	add	sp, #12
    e302:	pop	{r4, r5, pc}
    e304:	.word	0x1fff0d78
    e308:	.word	0x1fff0d7c
    e30c:	.word	0xffffffff

0000e310 <_svfprintf_r>:
    e310:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e314:	sub	sp, #260	; 0x104
    e316:	mov	r4, r1
    e318:	str	r1, [sp, #20]
    e31a:	mov	r5, r2
    e31c:	str	r3, [sp, #40]	; 0x28
    e31e:	str	r0, [sp, #24]
    e320:	bl	12368 <_localeconv_r>
    e324:	ldr	r3, [r0, #0]
    e326:	str	r3, [sp, #76]	; 0x4c
    e328:	mov	r0, r3
    e32a:	bl	d100 <strlen>
    e32e:	ldrh	r3, [r4, #12]
    e330:	str	r0, [sp, #72]	; 0x48
    e332:	lsls	r6, r3, #24
    e334:	bpl.n	e33e <_svfprintf_r+0x2e>
    e336:	ldr	r3, [r4, #16]
    e338:	cmp	r3, #0
    e33a:	beq.w	f5a0 <_svfprintf_r+0x1290>
    e33e:	vldr	d7, [pc, #664]	; e5d8 <_svfprintf_r+0x2c8>
    e342:	movs	r3, #0
    e344:	vstr	d7, [sp, #64]	; 0x40
    e348:	str	r3, [sp, #56]	; 0x38
    e34a:	str	r3, [sp, #148]	; 0x94
    e34c:	str	r3, [sp, #144]	; 0x90
    e34e:	str	r3, [sp, #84]	; 0x54
    e350:	str	r3, [sp, #28]
    e352:	ldr.w	sl, [pc, #656]	; e5e4 <_svfprintf_r+0x2d4>
    e356:	add	r3, sp, #192	; 0xc0
    e358:	str	r3, [sp, #140]	; 0x8c
    e35a:	mov	r9, r3
    e35c:	mov	r8, r5
    e35e:	ldrb.w	r3, [r8]
    e362:	mov	r4, r8
    e364:	cbz	r3, e3a2 <_svfprintf_r+0x92>
    e366:	cmp	r3, #37	; 0x25
    e368:	bne.n	e370 <_svfprintf_r+0x60>
    e36a:	b.n	e3a2 <_svfprintf_r+0x92>
    e36c:	cmp	r3, #37	; 0x25
    e36e:	beq.n	e378 <_svfprintf_r+0x68>
    e370:	ldrb.w	r3, [r4, #1]!
    e374:	cmp	r3, #0
    e376:	bne.n	e36c <_svfprintf_r+0x5c>
    e378:	rsb	r5, r8, r4
    e37c:	cbz	r5, e3a2 <_svfprintf_r+0x92>
    e37e:	ldr	r3, [sp, #144]	; 0x90
    e380:	ldr	r2, [sp, #148]	; 0x94
    e382:	str.w	r8, [r9]
    e386:	adds	r3, #1
    e388:	add	r2, r5
    e38a:	cmp	r3, #7
    e38c:	str.w	r5, [r9, #4]
    e390:	str	r2, [sp, #148]	; 0x94
    e392:	str	r3, [sp, #144]	; 0x90
    e394:	bgt.w	e4e4 <_svfprintf_r+0x1d4>
    e398:	add.w	r9, r9, #8
    e39c:	ldr	r3, [sp, #28]
    e39e:	add	r3, r5
    e3a0:	str	r3, [sp, #28]
    e3a2:	ldrb	r3, [r4, #0]
    e3a4:	cmp	r3, #0
    e3a6:	beq.w	e4f6 <_svfprintf_r+0x1e6>
    e3aa:	movs	r3, #0
    e3ac:	mov	r2, r3
    e3ae:	strb.w	r3, [sp, #111]	; 0x6f
    e3b2:	mov	r1, r3
    e3b4:	str	r3, [sp, #32]
    e3b6:	str	r3, [sp, #12]
    e3b8:	mov.w	fp, #4294967295
    e3bc:	ldrb	r3, [r4, #1]
    e3be:	add.w	r8, r4, #1
    e3c2:	mov	r5, fp
    e3c4:	add.w	r8, r8, #1
    e3c8:	sub.w	r0, r3, #32
    e3cc:	cmp	r0, #88	; 0x58
    e3ce:	bhi.w	ec3a <_svfprintf_r+0x92a>
    e3d2:	tbh	[pc, r0, lsl #1]
    e3d6:	.short	0x03a0
    e3d8:	.word	0x04320432
    e3dc:	.word	0x043203a8
    e3e0:	.word	0x04320432
    e3e4:	.word	0x04320432
    e3e8:	.word	0x03af0432
    e3ec:	.word	0x043203bd
    e3f0:	.word	0x00e2005d
    e3f4:	.word	0x01090432
    e3f8:	.word	0x01100110
    e3fc:	.word	0x01100110
    e400:	.word	0x01100110
    e404:	.word	0x01100110
    e408:	.word	0x04320110
    e40c:	.word	0x04320432
    e410:	.word	0x04320432
    e414:	.word	0x04320432
    e418:	.word	0x04320432
    e41c:	.word	0x01200432
    e420:	.word	0x04320286
    e424:	.word	0x04320286
    e428:	.word	0x04320432
    e42c:	.word	0x02d40432
    e430:	.word	0x04320432
    e434:	.word	0x043202e5
    e438:	.word	0x04320432
    e43c:	.word	0x04320432
    e440:	.word	0x0432030f
    e444:	.word	0x033d0432
    e448:	.word	0x04320432
    e44c:	.word	0x04320432
    e450:	.word	0x04320432
    e454:	.word	0x04320432
    e458:	.word	0x04320432
    e45c:	.word	0x0391037e
    e460:	.word	0x02860286
    e464:	.word	0x03990286
    e468:	.word	0x04320391
    e46c:	.word	0x04070432
    e470:	.word	0x04120432
    e474:	.word	0x006400a3
    e478:	.word	0x043203c2
    e47c:	.word	0x043203c9
    e480:	.word	0x043203ea
    e484:	.word	0x03f20432
    e488:	ldr	r0, [sp, #32]
    e48a:	str	r3, [sp, #40]	; 0x28
    e48c:	negs	r0, r0
    e48e:	str	r0, [sp, #32]
    e490:	ldr	r3, [sp, #12]
    e492:	orr.w	r3, r3, #4
    e496:	str	r3, [sp, #12]
    e498:	ldrb.w	r3, [r8]
    e49c:	b.n	e3c4 <_svfprintf_r+0xb4>
    e49e:	ldr	r0, [sp, #40]	; 0x28
    e4a0:	mov	fp, r5
    e4a2:	movs	r1, #0
    e4a4:	ldr	r4, [r0, #0]
    e4a6:	strb.w	r1, [sp, #111]	; 0x6f
    e4aa:	adds	r7, r0, #4
    e4ac:	ldr	r0, [sp, #12]
    e4ae:	movs	r3, #48	; 0x30
    e4b0:	movs	r2, #120	; 0x78
    e4b2:	cmp	fp, r1
    e4b4:	strb.w	r3, [sp, #112]	; 0x70
    e4b8:	mov.w	r5, #0
    e4bc:	strb.w	r2, [sp, #113]	; 0x71
    e4c0:	orr.w	r3, r0, #2
    e4c4:	blt.w	ec74 <_svfprintf_r+0x964>
    e4c8:	bic.w	r3, r0, #128	; 0x80
    e4cc:	orr.w	r3, r3, #2
    e4d0:	str	r3, [sp, #12]
    e4d2:	orrs.w	r3, r4, r5
    e4d6:	str	r7, [sp, #40]	; 0x28
    e4d8:	beq.w	ec20 <_svfprintf_r+0x910>
    e4dc:	mov	r7, r1
    e4de:	str	r2, [sp, #52]	; 0x34
    e4e0:	ldr	r0, [pc, #252]	; (e5e0 <_svfprintf_r+0x2d0>)
    e4e2:	b.n	eab2 <_svfprintf_r+0x7a2>
    e4e4:	add	r2, sp, #140	; 0x8c
    e4e6:	ldr	r1, [sp, #20]
    e4e8:	ldr	r0, [sp, #24]
    e4ea:	bl	13354 <__ssprint_r>
    e4ee:	cbnz	r0, e504 <_svfprintf_r+0x1f4>
    e4f0:	add.w	r9, sp, #192	; 0xc0
    e4f4:	b.n	e39c <_svfprintf_r+0x8c>
    e4f6:	ldr	r3, [sp, #148]	; 0x94
    e4f8:	cbz	r3, e504 <_svfprintf_r+0x1f4>
    e4fa:	ldr	r0, [sp, #24]
    e4fc:	ldr	r1, [sp, #20]
    e4fe:	add	r2, sp, #140	; 0x8c
    e500:	bl	13354 <__ssprint_r>
    e504:	ldr	r3, [sp, #20]
    e506:	ldrh	r3, [r3, #12]
    e508:	tst.w	r3, #64	; 0x40
    e50c:	ldr	r3, [sp, #28]
    e50e:	it	ne
    e510:	movne.w	r3, #4294967295
    e514:	mov	r0, r3
    e516:	add	sp, #260	; 0x104
    e518:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e51c:	str	r3, [sp, #52]	; 0x34
    e51e:	mov	fp, r5
    e520:	cmp	r2, #0
    e522:	bne.w	f98c <_svfprintf_r+0x167c>
    e526:	ldr	r2, [sp, #12]
    e528:	ands.w	r3, r2, #32
    e52c:	beq.w	e9bc <_svfprintf_r+0x6ac>
    e530:	ldr	r7, [sp, #40]	; 0x28
    e532:	adds	r7, #7
    e534:	bic.w	r3, r7, #7
    e538:	movs	r7, #0
    e53a:	add.w	r1, r3, #8
    e53e:	cmp	fp, r7
    e540:	str	r1, [sp, #40]	; 0x28
    e542:	ldrd	r4, r5, [r3]
    e546:	strb.w	r7, [sp, #111]	; 0x6f
    e54a:	blt.w	f412 <_svfprintf_r+0x1102>
    e54e:	bic.w	r3, r2, #128	; 0x80
    e552:	str	r3, [sp, #12]
    e554:	orrs.w	r3, r4, r5
    e558:	beq.w	ec64 <_svfprintf_r+0x954>
    e55c:	add	r6, sp, #192	; 0xc0
    e55e:	lsrs	r2, r4, #3
    e560:	orr.w	r2, r2, r5, lsl #29
    e564:	lsrs	r1, r5, #3
    e566:	and.w	r3, r4, #7
    e56a:	mov	r5, r1
    e56c:	mov	r4, r2
    e56e:	adds	r3, #48	; 0x30
    e570:	orrs.w	r2, r4, r5
    e574:	strb.w	r3, [r6, #-1]!
    e578:	bne.n	e55e <_svfprintf_r+0x24e>
    e57a:	ldr	r2, [sp, #12]
    e57c:	lsls	r1, r2, #31
    e57e:	bpl.w	e6a0 <_svfprintf_r+0x390>
    e582:	cmp	r3, #48	; 0x30
    e584:	beq.w	e6a0 <_svfprintf_r+0x390>
    e588:	movs	r2, #48	; 0x30
    e58a:	subs	r3, r6, #1
    e58c:	strb.w	r2, [r6, #-1]
    e590:	add	r2, sp, #192	; 0xc0
    e592:	subs	r2, r2, r3
    e594:	str	r2, [sp, #36]	; 0x24
    e596:	mov	r6, r3
    e598:	b.n	e6a6 <_svfprintf_r+0x396>
    e59a:	ldrb.w	r3, [r8]
    e59e:	cmp	r3, #42	; 0x2a
    e5a0:	add.w	r4, r8, #1
    e5a4:	beq.w	f970 <_svfprintf_r+0x1660>
    e5a8:	sub.w	r0, r3, #48	; 0x30
    e5ac:	cmp	r0, #9
    e5ae:	it	ls
    e5b0:	movls	r5, #0
    e5b2:	bhi.w	f8c2 <_svfprintf_r+0x15b2>
    e5b6:	ldrb.w	r3, [r4], #1
    e5ba:	add.w	r5, r5, r5, lsl #2
    e5be:	add.w	r5, r0, r5, lsl #1
    e5c2:	sub.w	r0, r3, #48	; 0x30
    e5c6:	cmp	r0, #9
    e5c8:	bls.n	e5b6 <_svfprintf_r+0x2a6>
    e5ca:	orr.w	r5, r5, r5, asr #31
    e5ce:	mov	r8, r4
    e5d0:	b.n	e3c8 <_svfprintf_r+0xb8>
    e5d2:	nop
    e5d4:	nop.w
	...
    e5e0:	.word	0x00013fdc
    e5e4:	.word	0x00013fa8
    e5e8:	ldr	r3, [sp, #12]
    e5ea:	orr.w	r3, r3, #128	; 0x80
    e5ee:	str	r3, [sp, #12]
    e5f0:	ldrb.w	r3, [r8]
    e5f4:	b.n	e3c4 <_svfprintf_r+0xb4>
    e5f6:	sub.w	r0, r3, #48	; 0x30
    e5fa:	movs	r3, #0
    e5fc:	mov	r4, r3
    e5fe:	ldrb.w	r3, [r8], #1
    e602:	add.w	r4, r4, r4, lsl #2
    e606:	add.w	r4, r0, r4, lsl #1
    e60a:	sub.w	r0, r3, #48	; 0x30
    e60e:	cmp	r0, #9
    e610:	bls.n	e5fe <_svfprintf_r+0x2ee>
    e612:	str	r4, [sp, #32]
    e614:	b.n	e3c8 <_svfprintf_r+0xb8>
    e616:	str	r3, [sp, #52]	; 0x34
    e618:	mov	fp, r5
    e61a:	cmp	r2, #0
    e61c:	bne.w	f9a8 <_svfprintf_r+0x1698>
    e620:	ldr	r3, [sp, #12]
    e622:	orr.w	r3, r3, #16
    e626:	str	r3, [sp, #12]
    e628:	ldr	r3, [sp, #12]
    e62a:	lsls	r4, r3, #26
    e62c:	bpl.w	f09e <_svfprintf_r+0xd8e>
    e630:	ldr	r7, [sp, #40]	; 0x28
    e632:	adds	r7, #7
    e634:	bic.w	r7, r7, #7
    e638:	ldrd	r2, r3, [r7]
    e63c:	add.w	r1, r7, #8
    e640:	str	r1, [sp, #40]	; 0x28
    e642:	mov	r4, r2
    e644:	mov	r5, r3
    e646:	cmp	r2, #0
    e648:	sbcs.w	r3, r3, #0
    e64c:	blt.w	f114 <_svfprintf_r+0xe04>
    e650:	cmp.w	fp, #0
    e654:	ldrb.w	r7, [sp, #111]	; 0x6f
    e658:	blt.w	f0da <_svfprintf_r+0xdca>
    e65c:	ldr	r3, [sp, #12]
    e65e:	bic.w	r3, r3, #128	; 0x80
    e662:	str	r3, [sp, #12]
    e664:	orrs.w	r3, r4, r5
    e668:	beq.w	ea3c <_svfprintf_r+0x72c>
    e66c:	cmp	r5, #0
    e66e:	it	eq
    e670:	cmpeq	r4, #10
    e672:	bcc.w	ea46 <_svfprintf_r+0x736>
    e676:	add	r6, sp, #192	; 0xc0
    e678:	mov	r0, r4
    e67a:	mov	r1, r5
    e67c:	movs	r2, #10
    e67e:	movs	r3, #0
    e680:	bl	bf74 <__aeabi_uldivmod>
    e684:	adds	r2, #48	; 0x30
    e686:	strb.w	r2, [r6, #-1]!
    e68a:	mov	r0, r4
    e68c:	mov	r1, r5
    e68e:	movs	r3, #0
    e690:	movs	r2, #10
    e692:	bl	bf74 <__aeabi_uldivmod>
    e696:	mov	r4, r0
    e698:	mov	r5, r1
    e69a:	orrs.w	r3, r4, r5
    e69e:	bne.n	e678 <_svfprintf_r+0x368>
    e6a0:	add	r3, sp, #192	; 0xc0
    e6a2:	subs	r3, r3, r6
    e6a4:	str	r3, [sp, #36]	; 0x24
    e6a6:	ldr	r3, [sp, #36]	; 0x24
    e6a8:	cmp	r3, fp
    e6aa:	it	lt
    e6ac:	movlt	r3, fp
    e6ae:	str	r3, [sp, #16]
    e6b0:	movs	r3, #0
    e6b2:	str	r3, [sp, #60]	; 0x3c
    e6b4:	cbz	r7, e6bc <_svfprintf_r+0x3ac>
    e6b6:	ldr	r3, [sp, #16]
    e6b8:	adds	r3, #1
    e6ba:	str	r3, [sp, #16]
    e6bc:	ldr	r3, [sp, #12]
    e6be:	ands.w	r3, r3, #2
    e6c2:	str	r3, [sp, #44]	; 0x2c
    e6c4:	beq.n	e6cc <_svfprintf_r+0x3bc>
    e6c6:	ldr	r3, [sp, #16]
    e6c8:	adds	r3, #2
    e6ca:	str	r3, [sp, #16]
    e6cc:	ldr	r3, [sp, #12]
    e6ce:	ands.w	r3, r3, #132	; 0x84
    e6d2:	str	r3, [sp, #48]	; 0x30
    e6d4:	bne.w	ec8e <_svfprintf_r+0x97e>
    e6d8:	ldr	r3, [sp, #32]
    e6da:	ldr	r2, [sp, #16]
    e6dc:	subs	r5, r3, r2
    e6de:	cmp	r5, #0
    e6e0:	ble.w	ec8e <_svfprintf_r+0x97e>
    e6e4:	cmp	r5, #16
    e6e6:	ldr	r1, [sp, #148]	; 0x94
    e6e8:	ldr	r2, [sp, #144]	; 0x90
    e6ea:	ldr	r7, [pc, #672]	; (e98c <_svfprintf_r+0x67c>)
    e6ec:	ble.n	e73e <_svfprintf_r+0x42e>
    e6ee:	str	r6, [sp, #80]	; 0x50
    e6f0:	mov	r0, r9
    e6f2:	movs	r4, #16
    e6f4:	mov	r9, r7
    e6f6:	ldr	r6, [sp, #20]
    e6f8:	mov	r7, r5
    e6fa:	ldr	r5, [sp, #24]
    e6fc:	b.n	e708 <_svfprintf_r+0x3f8>
    e6fe:	subs	r7, #16
    e700:	cmp	r7, #16
    e702:	add.w	r0, r0, #8
    e706:	ble.n	e736 <_svfprintf_r+0x426>
    e708:	adds	r2, #1
    e70a:	ldr	r3, [pc, #640]	; (e98c <_svfprintf_r+0x67c>)
    e70c:	str	r2, [sp, #144]	; 0x90
    e70e:	adds	r1, #16
    e710:	cmp	r2, #7
    e712:	str	r1, [sp, #148]	; 0x94
    e714:	stmia.w	r0, {r3, r4}
    e718:	ble.n	e6fe <_svfprintf_r+0x3ee>
    e71a:	add	r2, sp, #140	; 0x8c
    e71c:	mov	r1, r6
    e71e:	mov	r0, r5
    e720:	bl	13354 <__ssprint_r>
    e724:	cmp	r0, #0
    e726:	bne.w	e504 <_svfprintf_r+0x1f4>
    e72a:	subs	r7, #16
    e72c:	cmp	r7, #16
    e72e:	ldr	r1, [sp, #148]	; 0x94
    e730:	ldr	r2, [sp, #144]	; 0x90
    e732:	add	r0, sp, #192	; 0xc0
    e734:	bgt.n	e708 <_svfprintf_r+0x3f8>
    e736:	ldr	r6, [sp, #80]	; 0x50
    e738:	mov	r5, r7
    e73a:	mov	r7, r9
    e73c:	mov	r9, r0
    e73e:	adds	r2, #1
    e740:	adds	r4, r5, r1
    e742:	cmp	r2, #7
    e744:	str	r4, [sp, #148]	; 0x94
    e746:	str	r2, [sp, #144]	; 0x90
    e748:	str.w	r7, [r9]
    e74c:	str.w	r5, [r9, #4]
    e750:	bgt.w	efae <_svfprintf_r+0xc9e>
    e754:	ldrb.w	r7, [sp, #111]	; 0x6f
    e758:	add.w	r9, r9, #8
    e75c:	cbz	r7, e77c <_svfprintf_r+0x46c>
    e75e:	ldr	r3, [sp, #144]	; 0x90
    e760:	adds	r3, #1
    e762:	adds	r4, #1
    e764:	add.w	r1, sp, #111	; 0x6f
    e768:	movs	r2, #1
    e76a:	cmp	r3, #7
    e76c:	str	r4, [sp, #148]	; 0x94
    e76e:	str	r3, [sp, #144]	; 0x90
    e770:	stmia.w	r9, {r1, r2}
    e774:	bgt.w	eec2 <_svfprintf_r+0xbb2>
    e778:	add.w	r9, r9, #8
    e77c:	ldr	r3, [sp, #44]	; 0x2c
    e77e:	cbz	r3, e79c <_svfprintf_r+0x48c>
    e780:	ldr	r3, [sp, #144]	; 0x90
    e782:	adds	r3, #1
    e784:	adds	r4, #2
    e786:	add	r1, sp, #112	; 0x70
    e788:	movs	r2, #2
    e78a:	cmp	r3, #7
    e78c:	str	r4, [sp, #148]	; 0x94
    e78e:	str	r3, [sp, #144]	; 0x90
    e790:	stmia.w	r9, {r1, r2}
    e794:	bgt.w	eeda <_svfprintf_r+0xbca>
    e798:	add.w	r9, r9, #8
    e79c:	ldr	r3, [sp, #48]	; 0x30
    e79e:	cmp	r3, #128	; 0x80
    e7a0:	beq.w	ed66 <_svfprintf_r+0xa56>
    e7a4:	ldr	r3, [sp, #36]	; 0x24
    e7a6:	rsb	r7, r3, fp
    e7aa:	cmp	r7, #0
    e7ac:	ble.n	e816 <_svfprintf_r+0x506>
    e7ae:	ldr	r2, [pc, #480]	; (e990 <_svfprintf_r+0x680>)
    e7b0:	ldr	r3, [sp, #144]	; 0x90
    e7b2:	str	r2, [sp, #44]	; 0x2c
    e7b4:	cmp	r7, #16
    e7b6:	ble.n	e7fe <_svfprintf_r+0x4ee>
    e7b8:	mov	r2, r4
    e7ba:	mov.w	fp, #16
    e7be:	ldr	r5, [sp, #24]
    e7c0:	ldr	r4, [sp, #20]
    e7c2:	b.n	e7ce <_svfprintf_r+0x4be>
    e7c4:	subs	r7, #16
    e7c6:	cmp	r7, #16
    e7c8:	add.w	r9, r9, #8
    e7cc:	ble.n	e7fc <_svfprintf_r+0x4ec>
    e7ce:	adds	r3, #1
    e7d0:	adds	r2, #16
    e7d2:	cmp	r3, #7
    e7d4:	str	r2, [sp, #148]	; 0x94
    e7d6:	str	r3, [sp, #144]	; 0x90
    e7d8:	stmia.w	r9, {sl, fp}
    e7dc:	ble.n	e7c4 <_svfprintf_r+0x4b4>
    e7de:	add	r2, sp, #140	; 0x8c
    e7e0:	mov	r1, r4
    e7e2:	mov	r0, r5
    e7e4:	bl	13354 <__ssprint_r>
    e7e8:	cmp	r0, #0
    e7ea:	bne.w	e504 <_svfprintf_r+0x1f4>
    e7ee:	subs	r7, #16
    e7f0:	cmp	r7, #16
    e7f2:	ldr	r2, [sp, #148]	; 0x94
    e7f4:	ldr	r3, [sp, #144]	; 0x90
    e7f6:	add.w	r9, sp, #192	; 0xc0
    e7fa:	bgt.n	e7ce <_svfprintf_r+0x4be>
    e7fc:	mov	r4, r2
    e7fe:	adds	r3, #1
    e800:	ldr	r2, [sp, #44]	; 0x2c
    e802:	str	r3, [sp, #144]	; 0x90
    e804:	add	r4, r7
    e806:	cmp	r3, #7
    e808:	str	r4, [sp, #148]	; 0x94
    e80a:	stmia.w	r9, {r2, r7}
    e80e:	bgt.w	eeaa <_svfprintf_r+0xb9a>
    e812:	add.w	r9, r9, #8
    e816:	ldr	r3, [sp, #12]
    e818:	lsls	r2, r3, #23
    e81a:	bmi.w	ec92 <_svfprintf_r+0x982>
    e81e:	ldr	r3, [sp, #144]	; 0x90
    e820:	ldr	r1, [sp, #36]	; 0x24
    e822:	str.w	r6, [r9]
    e826:	adds	r3, #1
    e828:	add	r4, r1
    e82a:	cmp	r3, #7
    e82c:	str	r4, [sp, #148]	; 0x94
    e82e:	str.w	r1, [r9, #4]
    e832:	str	r3, [sp, #144]	; 0x90
    e834:	bgt.w	ee7e <_svfprintf_r+0xb6e>
    e838:	add.w	r9, r9, #8
    e83c:	ldr	r3, [sp, #12]
    e83e:	lsls	r1, r3, #29
    e840:	bpl.n	e8c2 <_svfprintf_r+0x5b2>
    e842:	ldr	r3, [sp, #32]
    e844:	ldr	r2, [sp, #16]
    e846:	subs	r5, r3, r2
    e848:	cmp	r5, #0
    e84a:	ble.n	e8c2 <_svfprintf_r+0x5b2>
    e84c:	cmp	r5, #16
    e84e:	ldr	r3, [sp, #144]	; 0x90
    e850:	ldr	r7, [pc, #312]	; (e98c <_svfprintf_r+0x67c>)
    e852:	ble.n	e89c <_svfprintf_r+0x58c>
    e854:	mov	r2, r4
    e856:	movs	r6, #16
    e858:	ldr.w	fp, [sp, #24]
    e85c:	ldr	r4, [sp, #20]
    e85e:	b.n	e86a <_svfprintf_r+0x55a>
    e860:	subs	r5, #16
    e862:	cmp	r5, #16
    e864:	add.w	r9, r9, #8
    e868:	ble.n	e89a <_svfprintf_r+0x58a>
    e86a:	adds	r3, #1
    e86c:	ldr	r1, [pc, #284]	; (e98c <_svfprintf_r+0x67c>)
    e86e:	str	r3, [sp, #144]	; 0x90
    e870:	adds	r2, #16
    e872:	cmp	r3, #7
    e874:	str	r2, [sp, #148]	; 0x94
    e876:	stmia.w	r9, {r1, r6}
    e87a:	ble.n	e860 <_svfprintf_r+0x550>
    e87c:	add	r2, sp, #140	; 0x8c
    e87e:	mov	r1, r4
    e880:	mov	r0, fp
    e882:	bl	13354 <__ssprint_r>
    e886:	cmp	r0, #0
    e888:	bne.w	e504 <_svfprintf_r+0x1f4>
    e88c:	subs	r5, #16
    e88e:	cmp	r5, #16
    e890:	ldr	r2, [sp, #148]	; 0x94
    e892:	ldr	r3, [sp, #144]	; 0x90
    e894:	add.w	r9, sp, #192	; 0xc0
    e898:	bgt.n	e86a <_svfprintf_r+0x55a>
    e89a:	mov	r4, r2
    e89c:	adds	r3, #1
    e89e:	add	r4, r5
    e8a0:	cmp	r3, #7
    e8a2:	str	r4, [sp, #148]	; 0x94
    e8a4:	str	r3, [sp, #144]	; 0x90
    e8a6:	str.w	r7, [r9]
    e8aa:	str.w	r5, [r9, #4]
    e8ae:	ble.n	e8c2 <_svfprintf_r+0x5b2>
    e8b0:	add	r2, sp, #140	; 0x8c
    e8b2:	ldr	r1, [sp, #20]
    e8b4:	ldr	r0, [sp, #24]
    e8b6:	bl	13354 <__ssprint_r>
    e8ba:	cmp	r0, #0
    e8bc:	bne.w	e504 <_svfprintf_r+0x1f4>
    e8c0:	ldr	r4, [sp, #148]	; 0x94
    e8c2:	ldr	r3, [sp, #28]
    e8c4:	ldr	r2, [sp, #32]
    e8c6:	ldr	r1, [sp, #16]
    e8c8:	cmp	r2, r1
    e8ca:	ite	ge
    e8cc:	addge	r3, r3, r2
    e8ce:	addlt	r3, r3, r1
    e8d0:	str	r3, [sp, #28]
    e8d2:	cmp	r4, #0
    e8d4:	bne.w	ee96 <_svfprintf_r+0xb86>
    e8d8:	movs	r3, #0
    e8da:	str	r3, [sp, #144]	; 0x90
    e8dc:	add.w	r9, sp, #192	; 0xc0
    e8e0:	b.n	e35e <_svfprintf_r+0x4e>
    e8e2:	str	r3, [sp, #52]	; 0x34
    e8e4:	mov	fp, r5
    e8e6:	cmp	r2, #0
    e8e8:	bne.w	f9b0 <_svfprintf_r+0x16a0>
    e8ec:	ldr	r3, [sp, #12]
    e8ee:	ldr	r7, [sp, #40]	; 0x28
    e8f0:	lsls	r2, r3, #28
    e8f2:	add.w	r7, r7, #7
    e8f6:	bpl.w	f3e2 <_svfprintf_r+0x10d2>
    e8fa:	bic.w	r3, r7, #7
    e8fe:	vldr	d7, [r3]
    e902:	vstr	d7, [sp, #64]	; 0x40
    e906:	add.w	r2, r3, #8
    e90a:	str	r2, [sp, #40]	; 0x28
    e90c:	ldrd	r1, r2, [sp, #64]	; 0x40
    e910:	bic.w	r3, r2, #2147483648	; 0x80000000
    e914:	str	r1, [sp, #88]	; 0x58
    e916:	str	r3, [sp, #92]	; 0x5c
    e918:	ldrd	r4, r5, [sp, #88]	; 0x58
    e91c:	mov.w	r2, #4294967295
    e920:	mov	r0, r4
    e922:	mov	r1, r5
    e924:	ldr	r3, [pc, #108]	; (e994 <_svfprintf_r+0x684>)
    e926:	bl	bb5c <__aeabi_dcmpun>
    e92a:	cmp	r0, #0
    e92c:	bne.w	f2e4 <_svfprintf_r+0xfd4>
    e930:	mov.w	r2, #4294967295
    e934:	ldr	r3, [pc, #92]	; (e994 <_svfprintf_r+0x684>)
    e936:	mov	r0, r4
    e938:	mov	r1, r5
    e93a:	bl	bb20 <__aeabi_dcmple>
    e93e:	cmp	r0, #0
    e940:	bne.w	f2e4 <_svfprintf_r+0xfd4>
    e944:	movs	r2, #0
    e946:	movs	r3, #0
    e948:	ldrd	r0, r1, [sp, #64]	; 0x40
    e94c:	bl	bb0c <__aeabi_dcmplt>
    e950:	cmp	r0, #0
    e952:	bne.w	f7fa <_svfprintf_r+0x14ea>
    e956:	ldrb.w	r7, [sp, #111]	; 0x6f
    e95a:	ldr	r6, [pc, #60]	; (e998 <_svfprintf_r+0x688>)
    e95c:	ldr	r3, [pc, #60]	; (e99c <_svfprintf_r+0x68c>)
    e95e:	ldr	r1, [sp, #12]
    e960:	bic.w	r1, r1, #128	; 0x80
    e964:	str	r1, [sp, #12]
    e966:	ldr	r1, [sp, #52]	; 0x34
    e968:	movs	r2, #3
    e96a:	mov.w	fp, #0
    e96e:	str	r2, [sp, #16]
    e970:	cmp	r1, #71	; 0x47
    e972:	it	le
    e974:	movle	r6, r3
    e976:	str	r2, [sp, #36]	; 0x24
    e978:	str.w	fp, [sp, #60]	; 0x3c
    e97c:	b.n	e6b4 <_svfprintf_r+0x3a4>
    e97e:	ldr	r3, [sp, #12]
    e980:	orr.w	r3, r3, #8
    e984:	str	r3, [sp, #12]
    e986:	ldrb.w	r3, [r8]
    e98a:	b.n	e3c4 <_svfprintf_r+0xb4>
    e98c:	.word	0x00013ffc
    e990:	.word	0x00013fa8
    e994:	.word	0x7fefffff
    e998:	.word	0x00013fbc
    e99c:	.word	0x00013fb8
    e9a0:	str	r3, [sp, #52]	; 0x34
    e9a2:	mov	fp, r5
    e9a4:	cmp	r2, #0
    e9a6:	bne.w	f9c8 <_svfprintf_r+0x16b8>
    e9aa:	ldr	r3, [sp, #12]
    e9ac:	orr.w	r3, r3, #16
    e9b0:	str	r3, [sp, #12]
    e9b2:	ldr	r2, [sp, #12]
    e9b4:	ands.w	r3, r2, #32
    e9b8:	bne.w	e530 <_svfprintf_r+0x220>
    e9bc:	ldr	r1, [sp, #12]
    e9be:	ands.w	r2, r1, #16
    e9c2:	beq.w	f27c <_svfprintf_r+0xf6c>
    e9c6:	ldr	r0, [sp, #40]	; 0x28
    e9c8:	strb.w	r3, [sp, #111]	; 0x6f
    e9cc:	cmp.w	fp, #0
    e9d0:	ldr	r4, [r0, #0]
    e9d2:	add.w	r7, r0, #4
    e9d6:	mov.w	r5, #0
    e9da:	blt.w	f410 <_svfprintf_r+0x1100>
    e9de:	mov	r2, r1
    e9e0:	bic.w	r2, r2, #128	; 0x80
    e9e4:	str	r2, [sp, #12]
    e9e6:	orrs.w	r2, r4, r5
    e9ea:	str	r7, [sp, #40]	; 0x28
    e9ec:	beq.w	ec64 <_svfprintf_r+0x954>
    e9f0:	mov	r7, r3
    e9f2:	b.n	e55c <_svfprintf_r+0x24c>
    e9f4:	str	r3, [sp, #52]	; 0x34
    e9f6:	mov	fp, r5
    e9f8:	cmp	r2, #0
    e9fa:	bne.w	f9c0 <_svfprintf_r+0x16b0>
    e9fe:	ldr	r3, [sp, #12]
    ea00:	orr.w	r3, r3, #16
    ea04:	str	r3, [sp, #12]
    ea06:	ldr	r2, [sp, #12]
    ea08:	ands.w	r3, r2, #32
    ea0c:	beq.w	f068 <_svfprintf_r+0xd58>
    ea10:	ldr	r7, [sp, #40]	; 0x28
    ea12:	adds	r7, #7
    ea14:	bic.w	r3, r7, #7
    ea18:	movs	r7, #0
    ea1a:	add.w	r1, r3, #8
    ea1e:	cmp	fp, r7
    ea20:	str	r1, [sp, #40]	; 0x28
    ea22:	ldrd	r4, r5, [r3]
    ea26:	strb.w	r7, [sp, #111]	; 0x6f
    ea2a:	blt.w	f0da <_svfprintf_r+0xdca>
    ea2e:	bic.w	r3, r2, #128	; 0x80
    ea32:	str	r3, [sp, #12]
    ea34:	orrs.w	r3, r4, r5
    ea38:	bne.w	e66c <_svfprintf_r+0x35c>
    ea3c:	cmp.w	fp, #0
    ea40:	beq.w	ec2e <_svfprintf_r+0x91e>
    ea44:	movs	r4, #0
    ea46:	add	r6, sp, #256	; 0x100
    ea48:	adds	r4, #48	; 0x30
    ea4a:	strb.w	r4, [r6, #-65]!
    ea4e:	b.n	e6a0 <_svfprintf_r+0x390>
    ea50:	str	r3, [sp, #52]	; 0x34
    ea52:	mov	fp, r5
    ea54:	cmp	r2, #0
    ea56:	bne.w	f9b8 <_svfprintf_r+0x16a8>
    ea5a:	ldr	r3, [sp, #12]
    ea5c:	ldr	r0, [pc, #700]	; (ed1c <_svfprintf_r+0xa0c>)
    ea5e:	lsls	r5, r3, #26
    ea60:	bpl.w	ebce <_svfprintf_r+0x8be>
    ea64:	ldr	r7, [sp, #40]	; 0x28
    ea66:	adds	r7, #7
    ea68:	bic.w	r3, r7, #7
    ea6c:	ldrd	r4, r5, [r3]
    ea70:	add.w	r2, r3, #8
    ea74:	str	r2, [sp, #40]	; 0x28
    ea76:	ldr	r2, [sp, #12]
    ea78:	ands.w	r7, r2, #1
    ea7c:	beq.w	eef2 <_svfprintf_r+0xbe2>
    ea80:	orrs.w	r3, r4, r5
    ea84:	beq.w	f48c <_svfprintf_r+0x117c>
    ea88:	ldrb.w	r2, [sp, #52]	; 0x34
    ea8c:	strb.w	r2, [sp, #113]	; 0x71
    ea90:	movs	r7, #0
    ea92:	ldr	r2, [sp, #12]
    ea94:	strb.w	r7, [sp, #111]	; 0x6f
    ea98:	movs	r3, #48	; 0x30
    ea9a:	cmp	fp, r7
    ea9c:	strb.w	r3, [sp, #112]	; 0x70
    eaa0:	orr.w	r3, r2, #2
    eaa4:	blt.w	f804 <_svfprintf_r+0x14f4>
    eaa8:	bic.w	r3, r2, #128	; 0x80
    eaac:	orr.w	r3, r3, #2
    eab0:	str	r3, [sp, #12]
    eab2:	add	r6, sp, #192	; 0xc0
    eab4:	lsrs	r3, r4, #4
    eab6:	and.w	r1, r4, #15
    eaba:	orr.w	r3, r3, r5, lsl #28
    eabe:	lsrs	r2, r5, #4
    eac0:	mov	r4, r3
    eac2:	mov	r5, r2
    eac4:	ldrb	r3, [r0, r1]
    eac6:	strb.w	r3, [r6, #-1]!
    eaca:	orrs.w	r3, r4, r5
    eace:	bne.n	eab4 <_svfprintf_r+0x7a4>
    ead0:	b.n	e6a0 <_svfprintf_r+0x390>
    ead2:	ldr	r1, [sp, #40]	; 0x28
    ead4:	str	r3, [sp, #52]	; 0x34
    ead6:	ldr	r2, [r1, #0]
    ead8:	strb.w	r2, [sp, #152]	; 0x98
    eadc:	movs	r3, #0
    eade:	mov	r2, r1
    eae0:	mov	r7, r3
    eae2:	strb.w	r3, [sp, #111]	; 0x6f
    eae6:	adds	r2, #4
    eae8:	movs	r3, #1
    eaea:	str	r3, [sp, #16]
    eaec:	mov	fp, r7
    eaee:	str	r7, [sp, #60]	; 0x3c
    eaf0:	str	r2, [sp, #40]	; 0x28
    eaf2:	str	r3, [sp, #36]	; 0x24
    eaf4:	add	r6, sp, #152	; 0x98
    eaf6:	b.n	e6bc <_svfprintf_r+0x3ac>
    eaf8:	str	r3, [sp, #52]	; 0x34
    eafa:	mov	fp, r5
    eafc:	cmp	r2, #0
    eafe:	beq.w	e628 <_svfprintf_r+0x318>
    eb02:	strb.w	r1, [sp, #111]	; 0x6f
    eb06:	b.n	e628 <_svfprintf_r+0x318>
    eb08:	ldr	r3, [sp, #12]
    eb0a:	orr.w	r3, r3, #64	; 0x40
    eb0e:	str	r3, [sp, #12]
    eb10:	ldrb.w	r3, [r8]
    eb14:	b.n	e3c4 <_svfprintf_r+0xb4>
    eb16:	ldrb.w	r3, [r8]
    eb1a:	cmp	r1, #0
    eb1c:	bne.w	e3c4 <_svfprintf_r+0xb4>
    eb20:	movs	r2, #1
    eb22:	movs	r1, #32
    eb24:	b.n	e3c4 <_svfprintf_r+0xb4>
    eb26:	ldr	r3, [sp, #12]
    eb28:	orr.w	r3, r3, #1
    eb2c:	str	r3, [sp, #12]
    eb2e:	ldrb.w	r3, [r8]
    eb32:	b.n	e3c4 <_svfprintf_r+0xb4>
    eb34:	ldr	r4, [sp, #40]	; 0x28
    eb36:	ldr	r3, [r4, #0]
    eb38:	str	r3, [sp, #32]
    eb3a:	mov	r0, r3
    eb3c:	cmp	r0, #0
    eb3e:	mov	r3, r4
    eb40:	add.w	r3, r3, #4
    eb44:	blt.w	e488 <_svfprintf_r+0x178>
    eb48:	str	r3, [sp, #40]	; 0x28
    eb4a:	ldrb.w	r3, [r8]
    eb4e:	b.n	e3c4 <_svfprintf_r+0xb4>
    eb50:	ldrb.w	r3, [r8]
    eb54:	movs	r2, #1
    eb56:	movs	r1, #43	; 0x2b
    eb58:	b.n	e3c4 <_svfprintf_r+0xb4>
    eb5a:	ldr	r3, [sp, #12]
    eb5c:	orr.w	r3, r3, #32
    eb60:	str	r3, [sp, #12]
    eb62:	ldrb.w	r3, [r8]
    eb66:	b.n	e3c4 <_svfprintf_r+0xb4>
    eb68:	ldr	r2, [sp, #40]	; 0x28
    eb6a:	str	r3, [sp, #52]	; 0x34
    eb6c:	ldr	r6, [r2, #0]
    eb6e:	movs	r4, #0
    eb70:	strb.w	r4, [sp, #111]	; 0x6f
    eb74:	adds	r7, r2, #4
    eb76:	cmp	r6, #0
    eb78:	beq.w	f7b4 <_svfprintf_r+0x14a4>
    eb7c:	cmp	r5, #0
    eb7e:	blt.w	f644 <_svfprintf_r+0x1334>
    eb82:	mov	r2, r5
    eb84:	mov	r1, r4
    eb86:	mov	r0, r6
    eb88:	bl	123e0 <memchr>
    eb8c:	cmp	r0, #0
    eb8e:	beq.w	f858 <_svfprintf_r+0x1548>
    eb92:	subs	r3, r0, r6
    eb94:	str	r3, [sp, #36]	; 0x24
    eb96:	mov	fp, r4
    eb98:	bic.w	r3, r3, r3, asr #31
    eb9c:	str	r7, [sp, #40]	; 0x28
    eb9e:	str	r3, [sp, #16]
    eba0:	str.w	fp, [sp, #60]	; 0x3c
    eba4:	ldrb.w	r7, [sp, #111]	; 0x6f
    eba8:	b.n	e6b4 <_svfprintf_r+0x3a4>
    ebaa:	str	r3, [sp, #52]	; 0x34
    ebac:	mov	fp, r5
    ebae:	cmp	r2, #0
    ebb0:	beq.w	ea06 <_svfprintf_r+0x6f6>
    ebb4:	strb.w	r1, [sp, #111]	; 0x6f
    ebb8:	b.n	ea06 <_svfprintf_r+0x6f6>
    ebba:	str	r3, [sp, #52]	; 0x34
    ebbc:	mov	fp, r5
    ebbe:	cmp	r2, #0
    ebc0:	bne.w	f9e0 <_svfprintf_r+0x16d0>
    ebc4:	ldr	r3, [sp, #12]
    ebc6:	ldr	r0, [pc, #344]	; (ed20 <_svfprintf_r+0xa10>)
    ebc8:	lsls	r5, r3, #26
    ebca:	bmi.w	ea64 <_svfprintf_r+0x754>
    ebce:	ldr	r3, [sp, #12]
    ebd0:	lsls	r4, r3, #27
    ebd2:	bpl.w	f452 <_svfprintf_r+0x1142>
    ebd6:	ldr	r2, [sp, #40]	; 0x28
    ebd8:	mov	r3, r2
    ebda:	adds	r3, #4
    ebdc:	ldr	r4, [r2, #0]
    ebde:	str	r3, [sp, #40]	; 0x28
    ebe0:	movs	r5, #0
    ebe2:	b.n	ea76 <_svfprintf_r+0x766>
    ebe4:	ldrb.w	r3, [r8]
    ebe8:	cmp	r3, #108	; 0x6c
    ebea:	beq.w	f572 <_svfprintf_r+0x1262>
    ebee:	ldr	r0, [sp, #12]
    ebf0:	orr.w	r0, r0, #16
    ebf4:	str	r0, [sp, #12]
    ebf6:	b.w	e3c4 <_svfprintf_r+0xb4>
    ebfa:	cmp	r2, #0
    ebfc:	bne.w	f9d8 <_svfprintf_r+0x16c8>
    ec00:	ldr	r3, [sp, #12]
    ec02:	lsls	r3, r3, #26
    ec04:	bpl.w	f2b6 <_svfprintf_r+0xfa6>
    ec08:	ldr	r2, [sp, #40]	; 0x28
    ec0a:	ldr	r1, [sp, #28]
    ec0c:	ldr	r3, [r2, #0]
    ec0e:	asrs	r5, r1, #31
    ec10:	mov	r0, r1
    ec12:	adds	r2, #4
    ec14:	mov	r1, r5
    ec16:	str	r2, [sp, #40]	; 0x28
    ec18:	strd	r0, r1, [r3]
    ec1c:	b.w	e35e <_svfprintf_r+0x4e>
    ec20:	ldr	r0, [pc, #252]	; (ed20 <_svfprintf_r+0xa10>)
    ec22:	str	r2, [sp, #52]	; 0x34
    ec24:	cmp.w	fp, #0
    ec28:	bne.w	ef14 <_svfprintf_r+0xc04>
    ec2c:	mov	r7, fp
    ec2e:	mov.w	fp, #0
    ec32:	str.w	fp, [sp, #36]	; 0x24
    ec36:	add	r6, sp, #192	; 0xc0
    ec38:	b.n	e6a6 <_svfprintf_r+0x396>
    ec3a:	str	r3, [sp, #52]	; 0x34
    ec3c:	cmp	r2, #0
    ec3e:	bne.w	f9d0 <_svfprintf_r+0x16c0>
    ec42:	ldr	r2, [sp, #52]	; 0x34
    ec44:	cmp	r2, #0
    ec46:	beq.w	e4f6 <_svfprintf_r+0x1e6>
    ec4a:	movs	r3, #0
    ec4c:	movs	r1, #1
    ec4e:	mov	r7, r3
    ec50:	str	r1, [sp, #16]
    ec52:	strb.w	r2, [sp, #152]	; 0x98
    ec56:	strb.w	r3, [sp, #111]	; 0x6f
    ec5a:	mov	fp, r3
    ec5c:	str	r3, [sp, #60]	; 0x3c
    ec5e:	str	r1, [sp, #36]	; 0x24
    ec60:	add	r6, sp, #152	; 0x98
    ec62:	b.n	e6bc <_svfprintf_r+0x3ac>
    ec64:	cmp.w	fp, #0
    ec68:	beq.w	f888 <_svfprintf_r+0x1578>
    ec6c:	movs	r7, #0
    ec6e:	movs	r4, #0
    ec70:	movs	r5, #0
    ec72:	b.n	e55c <_svfprintf_r+0x24c>
    ec74:	ldr	r0, [pc, #168]	; (ed20 <_svfprintf_r+0xa10>)
    ec76:	str	r3, [sp, #12]
    ec78:	str	r2, [sp, #52]	; 0x34
    ec7a:	orrs.w	r3, r4, r5
    ec7e:	str	r7, [sp, #40]	; 0x28
    ec80:	mov.w	r7, #0
    ec84:	bne.w	eab2 <_svfprintf_r+0x7a2>
    ec88:	movs	r4, #0
    ec8a:	movs	r5, #0
    ec8c:	b.n	eab2 <_svfprintf_r+0x7a2>
    ec8e:	ldr	r4, [sp, #148]	; 0x94
    ec90:	b.n	e75c <_svfprintf_r+0x44c>
    ec92:	ldr	r3, [sp, #52]	; 0x34
    ec94:	cmp	r3, #101	; 0x65
    ec96:	ble.w	edee <_svfprintf_r+0xade>
    ec9a:	movs	r2, #0
    ec9c:	movs	r3, #0
    ec9e:	ldrd	r0, r1, [sp, #64]	; 0x40
    eca2:	bl	baf8 <__aeabi_dcmpeq>
    eca6:	cmp	r0, #0
    eca8:	beq.w	ef18 <_svfprintf_r+0xc08>
    ecac:	ldr	r3, [sp, #144]	; 0x90
    ecae:	ldr	r2, [pc, #116]	; (ed24 <_svfprintf_r+0xa14>)
    ecb0:	str.w	r2, [r9]
    ecb4:	adds	r3, #1
    ecb6:	adds	r4, #1
    ecb8:	movs	r2, #1
    ecba:	cmp	r3, #7
    ecbc:	str	r4, [sp, #148]	; 0x94
    ecbe:	str	r3, [sp, #144]	; 0x90
    ecc0:	str.w	r2, [r9, #4]
    ecc4:	bgt.w	f4a4 <_svfprintf_r+0x1194>
    ecc8:	add.w	r9, r9, #8
    eccc:	ldr	r3, [sp, #116]	; 0x74
    ecce:	ldr	r2, [sp, #56]	; 0x38
    ecd0:	cmp	r3, r2
    ecd2:	blt.n	ecdc <_svfprintf_r+0x9cc>
    ecd4:	ldr	r3, [sp, #12]
    ecd6:	lsls	r3, r3, #31
    ecd8:	bpl.w	e83c <_svfprintf_r+0x52c>
    ecdc:	ldr	r3, [sp, #144]	; 0x90
    ecde:	ldr	r1, [sp, #72]	; 0x48
    ece0:	ldr	r2, [sp, #76]	; 0x4c
    ece2:	str.w	r2, [r9]
    ece6:	adds	r3, #1
    ece8:	add	r4, r1
    ecea:	cmp	r3, #7
    ecec:	str	r4, [sp, #148]	; 0x94
    ecee:	str.w	r1, [r9, #4]
    ecf2:	str	r3, [sp, #144]	; 0x90
    ecf4:	bgt.w	f586 <_svfprintf_r+0x1276>
    ecf8:	add.w	r9, r9, #8
    ecfc:	ldr	r3, [sp, #56]	; 0x38
    ecfe:	subs	r5, r3, #1
    ed00:	cmp	r5, #0
    ed02:	ble.w	e83c <_svfprintf_r+0x52c>
    ed06:	ldr	r2, [pc, #32]	; (ed28 <_svfprintf_r+0xa18>)
    ed08:	ldr	r3, [sp, #144]	; 0x90
    ed0a:	str	r2, [sp, #44]	; 0x2c
    ed0c:	cmp	r5, #16
    ed0e:	ble.w	f0e4 <_svfprintf_r+0xdd4>
    ed12:	movs	r6, #16
    ed14:	ldr	r7, [sp, #24]
    ed16:	ldr.w	fp, [sp, #20]
    ed1a:	b.n	ed38 <_svfprintf_r+0xa28>
    ed1c:	.word	0x00013fc8
    ed20:	.word	0x00013fdc
    ed24:	.word	0x00013ff8
    ed28:	.word	0x00013fa8
    ed2c:	add.w	r9, r9, #8
    ed30:	subs	r5, #16
    ed32:	cmp	r5, #16
    ed34:	ble.w	f0e4 <_svfprintf_r+0xdd4>
    ed38:	adds	r3, #1
    ed3a:	adds	r4, #16
    ed3c:	cmp	r3, #7
    ed3e:	str	r4, [sp, #148]	; 0x94
    ed40:	str	r3, [sp, #144]	; 0x90
    ed42:	str.w	sl, [r9]
    ed46:	str.w	r6, [r9, #4]
    ed4a:	ble.n	ed2c <_svfprintf_r+0xa1c>
    ed4c:	add	r2, sp, #140	; 0x8c
    ed4e:	mov	r1, fp
    ed50:	mov	r0, r7
    ed52:	bl	13354 <__ssprint_r>
    ed56:	cmp	r0, #0
    ed58:	bne.w	e504 <_svfprintf_r+0x1f4>
    ed5c:	ldr	r4, [sp, #148]	; 0x94
    ed5e:	ldr	r3, [sp, #144]	; 0x90
    ed60:	add.w	r9, sp, #192	; 0xc0
    ed64:	b.n	ed30 <_svfprintf_r+0xa20>
    ed66:	ldr	r3, [sp, #32]
    ed68:	ldr	r2, [sp, #16]
    ed6a:	subs	r7, r3, r2
    ed6c:	cmp	r7, #0
    ed6e:	ble.w	e7a4 <_svfprintf_r+0x494>
    ed72:	ldr	r2, [pc, #752]	; (f064 <_svfprintf_r+0xd54>)
    ed74:	ldr	r3, [sp, #144]	; 0x90
    ed76:	str	r2, [sp, #44]	; 0x2c
    ed78:	cmp	r7, #16
    ed7a:	ble.n	edd4 <_svfprintf_r+0xac4>
    ed7c:	mov	r2, r9
    ed7e:	mov	r1, r4
    ed80:	mov	r9, r7
    ed82:	movs	r5, #16
    ed84:	mov	r7, r6
    ed86:	ldr	r4, [sp, #24]
    ed88:	ldr	r6, [sp, #20]
    ed8a:	b.n	ed9a <_svfprintf_r+0xa8a>
    ed8c:	sub.w	r9, r9, #16
    ed90:	cmp.w	r9, #16
    ed94:	add.w	r2, r2, #8
    ed98:	ble.n	edcc <_svfprintf_r+0xabc>
    ed9a:	adds	r3, #1
    ed9c:	adds	r1, #16
    ed9e:	cmp	r3, #7
    eda0:	str	r1, [sp, #148]	; 0x94
    eda2:	str	r3, [sp, #144]	; 0x90
    eda4:	str.w	sl, [r2]
    eda8:	str	r5, [r2, #4]
    edaa:	ble.n	ed8c <_svfprintf_r+0xa7c>
    edac:	add	r2, sp, #140	; 0x8c
    edae:	mov	r1, r6
    edb0:	mov	r0, r4
    edb2:	bl	13354 <__ssprint_r>
    edb6:	cmp	r0, #0
    edb8:	bne.w	e504 <_svfprintf_r+0x1f4>
    edbc:	sub.w	r9, r9, #16
    edc0:	cmp.w	r9, #16
    edc4:	ldr	r1, [sp, #148]	; 0x94
    edc6:	ldr	r3, [sp, #144]	; 0x90
    edc8:	add	r2, sp, #192	; 0xc0
    edca:	bgt.n	ed9a <_svfprintf_r+0xa8a>
    edcc:	mov	r6, r7
    edce:	mov	r4, r1
    edd0:	mov	r7, r9
    edd2:	mov	r9, r2
    edd4:	adds	r3, #1
    edd6:	ldr	r2, [sp, #44]	; 0x2c
    edd8:	str	r3, [sp, #144]	; 0x90
    edda:	add	r4, r7
    eddc:	cmp	r3, #7
    edde:	str	r4, [sp, #148]	; 0x94
    ede0:	stmia.w	r9, {r2, r7}
    ede4:	bgt.w	f262 <_svfprintf_r+0xf52>
    ede8:	add.w	r9, r9, #8
    edec:	b.n	e7a4 <_svfprintf_r+0x494>
    edee:	ldr	r3, [sp, #56]	; 0x38
    edf0:	ldr	r5, [sp, #144]	; 0x90
    edf2:	cmp	r3, #1
    edf4:	ble.w	f20c <_svfprintf_r+0xefc>
    edf8:	adds	r5, #1
    edfa:	adds	r4, #1
    edfc:	movs	r3, #1
    edfe:	cmp	r5, #7
    ee00:	str	r4, [sp, #148]	; 0x94
    ee02:	str	r5, [sp, #144]	; 0x90
    ee04:	str.w	r6, [r9]
    ee08:	str.w	r3, [r9, #4]
    ee0c:	bgt.w	f22e <_svfprintf_r+0xf1e>
    ee10:	add.w	r9, r9, #8
    ee14:	ldr	r2, [sp, #72]	; 0x48
    ee16:	ldr	r3, [sp, #76]	; 0x4c
    ee18:	str.w	r3, [r9]
    ee1c:	adds	r5, #1
    ee1e:	add	r4, r2
    ee20:	cmp	r5, #7
    ee22:	str	r4, [sp, #148]	; 0x94
    ee24:	str	r5, [sp, #144]	; 0x90
    ee26:	str.w	r2, [r9, #4]
    ee2a:	bgt.w	f248 <_svfprintf_r+0xf38>
    ee2e:	add.w	r9, r9, #8
    ee32:	movs	r3, #0
    ee34:	movs	r2, #0
    ee36:	ldrd	r0, r1, [sp, #64]	; 0x40
    ee3a:	bl	baf8 <__aeabi_dcmpeq>
    ee3e:	ldr	r3, [sp, #56]	; 0x38
    ee40:	cmp	r0, #0
    ee42:	bne.w	efcc <_svfprintf_r+0xcbc>
    ee46:	subs	r3, #1
    ee48:	adds	r5, #1
    ee4a:	adds	r6, #1
    ee4c:	add	r4, r3
    ee4e:	cmp	r5, #7
    ee50:	str	r5, [sp, #144]	; 0x90
    ee52:	str	r4, [sp, #148]	; 0x94
    ee54:	str.w	r6, [r9]
    ee58:	str.w	r3, [r9, #4]
    ee5c:	bgt.w	f04a <_svfprintf_r+0xd3a>
    ee60:	add.w	r9, r9, #8
    ee64:	ldr	r2, [sp, #84]	; 0x54
    ee66:	str.w	r2, [r9, #4]
    ee6a:	adds	r5, #1
    ee6c:	add	r4, r2
    ee6e:	add	r3, sp, #124	; 0x7c
    ee70:	cmp	r5, #7
    ee72:	str	r4, [sp, #148]	; 0x94
    ee74:	str	r5, [sp, #144]	; 0x90
    ee76:	str.w	r3, [r9]
    ee7a:	ble.w	e838 <_svfprintf_r+0x528>
    ee7e:	add	r2, sp, #140	; 0x8c
    ee80:	ldr	r1, [sp, #20]
    ee82:	ldr	r0, [sp, #24]
    ee84:	bl	13354 <__ssprint_r>
    ee88:	cmp	r0, #0
    ee8a:	bne.w	e504 <_svfprintf_r+0x1f4>
    ee8e:	ldr	r4, [sp, #148]	; 0x94
    ee90:	add.w	r9, sp, #192	; 0xc0
    ee94:	b.n	e83c <_svfprintf_r+0x52c>
    ee96:	add	r2, sp, #140	; 0x8c
    ee98:	ldr	r1, [sp, #20]
    ee9a:	ldr	r0, [sp, #24]
    ee9c:	bl	13354 <__ssprint_r>
    eea0:	cmp	r0, #0
    eea2:	beq.w	e8d8 <_svfprintf_r+0x5c8>
    eea6:	b.w	e504 <_svfprintf_r+0x1f4>
    eeaa:	add	r2, sp, #140	; 0x8c
    eeac:	ldr	r1, [sp, #20]
    eeae:	ldr	r0, [sp, #24]
    eeb0:	bl	13354 <__ssprint_r>
    eeb4:	cmp	r0, #0
    eeb6:	bne.w	e504 <_svfprintf_r+0x1f4>
    eeba:	ldr	r4, [sp, #148]	; 0x94
    eebc:	add.w	r9, sp, #192	; 0xc0
    eec0:	b.n	e816 <_svfprintf_r+0x506>
    eec2:	add	r2, sp, #140	; 0x8c
    eec4:	ldr	r1, [sp, #20]
    eec6:	ldr	r0, [sp, #24]
    eec8:	bl	13354 <__ssprint_r>
    eecc:	cmp	r0, #0
    eece:	bne.w	e504 <_svfprintf_r+0x1f4>
    eed2:	ldr	r4, [sp, #148]	; 0x94
    eed4:	add.w	r9, sp, #192	; 0xc0
    eed8:	b.n	e77c <_svfprintf_r+0x46c>
    eeda:	add	r2, sp, #140	; 0x8c
    eedc:	ldr	r1, [sp, #20]
    eede:	ldr	r0, [sp, #24]
    eee0:	bl	13354 <__ssprint_r>
    eee4:	cmp	r0, #0
    eee6:	bne.w	e504 <_svfprintf_r+0x1f4>
    eeea:	ldr	r4, [sp, #148]	; 0x94
    eeec:	add.w	r9, sp, #192	; 0xc0
    eef0:	b.n	e79c <_svfprintf_r+0x48c>
    eef2:	cmp.w	fp, #0
    eef6:	strb.w	r7, [sp, #111]	; 0x6f
    eefa:	blt.w	f4bc <_svfprintf_r+0x11ac>
    eefe:	bic.w	r3, r2, #128	; 0x80
    ef02:	str	r3, [sp, #12]
    ef04:	orrs.w	r3, r4, r5
    ef08:	bne.w	eab2 <_svfprintf_r+0x7a2>
    ef0c:	cmp.w	fp, #0
    ef10:	beq.w	ec2c <_svfprintf_r+0x91c>
    ef14:	movs	r7, #0
    ef16:	b.n	ec88 <_svfprintf_r+0x978>
    ef18:	ldr	r5, [sp, #116]	; 0x74
    ef1a:	cmp	r5, #0
    ef1c:	ble.w	f4c2 <_svfprintf_r+0x11b2>
    ef20:	ldr	r3, [sp, #60]	; 0x3c
    ef22:	ldr	r2, [sp, #56]	; 0x38
    ef24:	cmp	r3, r2
    ef26:	it	ge
    ef28:	movge	r3, r2
    ef2a:	cmp	r3, #0
    ef2c:	mov	r5, r3
    ef2e:	ble.n	ef4c <_svfprintf_r+0xc3c>
    ef30:	ldr	r3, [sp, #144]	; 0x90
    ef32:	str.w	r6, [r9]
    ef36:	adds	r3, #1
    ef38:	add	r4, r5
    ef3a:	cmp	r3, #7
    ef3c:	str	r4, [sp, #148]	; 0x94
    ef3e:	str.w	r5, [r9, #4]
    ef42:	str	r3, [sp, #144]	; 0x90
    ef44:	bgt.w	f69a <_svfprintf_r+0x138a>
    ef48:	add.w	r9, r9, #8
    ef4c:	ldr	r3, [sp, #60]	; 0x3c
    ef4e:	cmp	r5, #0
    ef50:	it	ge
    ef52:	subge	r3, r3, r5
    ef54:	cmp	r3, #0
    ef56:	mov	r5, r3
    ef58:	ble.w	f14c <_svfprintf_r+0xe3c>
    ef5c:	ldr	r2, [pc, #260]	; (f064 <_svfprintf_r+0xd54>)
    ef5e:	ldr	r3, [sp, #144]	; 0x90
    ef60:	str	r2, [sp, #44]	; 0x2c
    ef62:	cmp	r5, #16
    ef64:	ble.w	f46e <_svfprintf_r+0x115e>
    ef68:	mov	r2, r4
    ef6a:	movs	r7, #16
    ef6c:	ldr.w	fp, [sp, #24]
    ef70:	ldr	r4, [sp, #20]
    ef72:	b.n	ef80 <_svfprintf_r+0xc70>
    ef74:	add.w	r9, r9, #8
    ef78:	subs	r5, #16
    ef7a:	cmp	r5, #16
    ef7c:	ble.w	f46c <_svfprintf_r+0x115c>
    ef80:	adds	r3, #1
    ef82:	adds	r2, #16
    ef84:	cmp	r3, #7
    ef86:	str	r2, [sp, #148]	; 0x94
    ef88:	str	r3, [sp, #144]	; 0x90
    ef8a:	str.w	sl, [r9]
    ef8e:	str.w	r7, [r9, #4]
    ef92:	ble.n	ef74 <_svfprintf_r+0xc64>
    ef94:	add	r2, sp, #140	; 0x8c
    ef96:	mov	r1, r4
    ef98:	mov	r0, fp
    ef9a:	bl	13354 <__ssprint_r>
    ef9e:	cmp	r0, #0
    efa0:	bne.w	e504 <_svfprintf_r+0x1f4>
    efa4:	ldr	r2, [sp, #148]	; 0x94
    efa6:	ldr	r3, [sp, #144]	; 0x90
    efa8:	add.w	r9, sp, #192	; 0xc0
    efac:	b.n	ef78 <_svfprintf_r+0xc68>
    efae:	add	r2, sp, #140	; 0x8c
    efb0:	ldr	r1, [sp, #20]
    efb2:	ldr	r0, [sp, #24]
    efb4:	bl	13354 <__ssprint_r>
    efb8:	cmp	r0, #0
    efba:	bne.w	e504 <_svfprintf_r+0x1f4>
    efbe:	ldrb.w	r7, [sp, #111]	; 0x6f
    efc2:	ldr	r4, [sp, #148]	; 0x94
    efc4:	add.w	r9, sp, #192	; 0xc0
    efc8:	b.w	e75c <_svfprintf_r+0x44c>
    efcc:	subs	r6, r3, #1
    efce:	cmp	r6, #0
    efd0:	ble.w	ee64 <_svfprintf_r+0xb54>
    efd4:	ldr	r3, [pc, #140]	; (f064 <_svfprintf_r+0xd54>)
    efd6:	str	r3, [sp, #44]	; 0x2c
    efd8:	cmp	r6, #16
    efda:	ble.n	f036 <_svfprintf_r+0xd26>
    efdc:	str.w	r8, [sp, #36]	; 0x24
    efe0:	movs	r7, #16
    efe2:	mov	r8, r6
    efe4:	ldr.w	fp, [sp, #24]
    efe8:	ldr	r6, [sp, #20]
    efea:	b.n	effa <_svfprintf_r+0xcea>
    efec:	sub.w	r8, r8, #16
    eff0:	cmp.w	r8, #16
    eff4:	add.w	r9, r9, #8
    eff8:	ble.n	f030 <_svfprintf_r+0xd20>
    effa:	adds	r5, #1
    effc:	adds	r4, #16
    effe:	cmp	r5, #7
    f000:	str	r4, [sp, #148]	; 0x94
    f002:	str	r5, [sp, #144]	; 0x90
    f004:	str.w	sl, [r9]
    f008:	str.w	r7, [r9, #4]
    f00c:	ble.n	efec <_svfprintf_r+0xcdc>
    f00e:	add	r2, sp, #140	; 0x8c
    f010:	mov	r1, r6
    f012:	mov	r0, fp
    f014:	bl	13354 <__ssprint_r>
    f018:	cmp	r0, #0
    f01a:	bne.w	e504 <_svfprintf_r+0x1f4>
    f01e:	sub.w	r8, r8, #16
    f022:	cmp.w	r8, #16
    f026:	ldr	r4, [sp, #148]	; 0x94
    f028:	ldr	r5, [sp, #144]	; 0x90
    f02a:	add.w	r9, sp, #192	; 0xc0
    f02e:	bgt.n	effa <_svfprintf_r+0xcea>
    f030:	mov	r6, r8
    f032:	ldr.w	r8, [sp, #36]	; 0x24
    f036:	ldr	r3, [sp, #44]	; 0x2c
    f038:	adds	r5, #1
    f03a:	add	r4, r6
    f03c:	cmp	r5, #7
    f03e:	str	r4, [sp, #148]	; 0x94
    f040:	str	r5, [sp, #144]	; 0x90
    f042:	stmia.w	r9, {r3, r6}
    f046:	ble.w	ee60 <_svfprintf_r+0xb50>
    f04a:	add	r2, sp, #140	; 0x8c
    f04c:	ldr	r1, [sp, #20]
    f04e:	ldr	r0, [sp, #24]
    f050:	bl	13354 <__ssprint_r>
    f054:	cmp	r0, #0
    f056:	bne.w	e504 <_svfprintf_r+0x1f4>
    f05a:	ldr	r4, [sp, #148]	; 0x94
    f05c:	ldr	r5, [sp, #144]	; 0x90
    f05e:	add.w	r9, sp, #192	; 0xc0
    f062:	b.n	ee64 <_svfprintf_r+0xb54>
    f064:	.word	0x00013fa8
    f068:	ldr	r1, [sp, #12]
    f06a:	ands.w	r2, r1, #16
    f06e:	beq.w	f418 <_svfprintf_r+0x1108>
    f072:	ldr	r0, [sp, #40]	; 0x28
    f074:	strb.w	r3, [sp, #111]	; 0x6f
    f078:	cmp.w	fp, #0
    f07c:	ldr	r4, [r0, #0]
    f07e:	add.w	r7, r0, #4
    f082:	mov.w	r5, #0
    f086:	blt.n	f0d6 <_svfprintf_r+0xdc6>
    f088:	mov	r2, r1
    f08a:	bic.w	r2, r2, #128	; 0x80
    f08e:	str	r2, [sp, #12]
    f090:	orrs.w	r2, r4, r5
    f094:	str	r7, [sp, #40]	; 0x28
    f096:	mov	r7, r3
    f098:	bne.w	e66c <_svfprintf_r+0x35c>
    f09c:	b.n	ea3c <_svfprintf_r+0x72c>
    f09e:	ldr	r3, [sp, #12]
    f0a0:	lsls	r0, r3, #27
    f0a2:	bmi.n	f0fa <_svfprintf_r+0xdea>
    f0a4:	ldr	r3, [sp, #12]
    f0a6:	lsls	r1, r3, #25
    f0a8:	bpl.n	f0fa <_svfprintf_r+0xdea>
    f0aa:	ldr	r1, [sp, #40]	; 0x28
    f0ac:	ldrsh.w	r4, [r1]
    f0b0:	adds	r1, #4
    f0b2:	asrs	r5, r4, #31
    f0b4:	mov	r2, r4
    f0b6:	mov	r3, r5
    f0b8:	str	r1, [sp, #40]	; 0x28
    f0ba:	b.w	e646 <_svfprintf_r+0x336>
    f0be:	ldr	r1, [sp, #40]	; 0x28
    f0c0:	strb.w	r3, [sp, #111]	; 0x6f
    f0c4:	cmp.w	fp, #0
    f0c8:	ldr	r4, [r1, #0]
    f0ca:	add.w	r7, r1, #4
    f0ce:	mov.w	r5, #0
    f0d2:	bge.w	f56e <_svfprintf_r+0x125e>
    f0d6:	str	r7, [sp, #40]	; 0x28
    f0d8:	mov	r7, r3
    f0da:	orrs.w	r3, r4, r5
    f0de:	bne.w	e66c <_svfprintf_r+0x35c>
    f0e2:	b.n	ea46 <_svfprintf_r+0x736>
    f0e4:	adds	r3, #1
    f0e6:	ldr	r2, [sp, #44]	; 0x2c
    f0e8:	str	r3, [sp, #144]	; 0x90
    f0ea:	add	r4, r5
    f0ec:	cmp	r3, #7
    f0ee:	str	r4, [sp, #148]	; 0x94
    f0f0:	stmia.w	r9, {r2, r5}
    f0f4:	ble.w	e838 <_svfprintf_r+0x528>
    f0f8:	b.n	ee7e <_svfprintf_r+0xb6e>
    f0fa:	ldr	r2, [sp, #40]	; 0x28
    f0fc:	ldr	r4, [r2, #0]
    f0fe:	mov	r3, r2
    f100:	adds	r3, #4
    f102:	asrs	r5, r4, #31
    f104:	mov	r2, r4
    f106:	str	r3, [sp, #40]	; 0x28
    f108:	cmp	r2, #0
    f10a:	mov	r3, r5
    f10c:	sbcs.w	r3, r3, #0
    f110:	bge.w	e650 <_svfprintf_r+0x340>
    f114:	negs	r4, r4
    f116:	mov.w	r7, #45	; 0x2d
    f11a:	sbc.w	r5, r5, r5, lsl #1
    f11e:	cmp.w	fp, #0
    f122:	strb.w	r7, [sp, #111]	; 0x6f
    f126:	blt.w	e66c <_svfprintf_r+0x35c>
    f12a:	ldr	r3, [sp, #12]
    f12c:	bic.w	r3, r3, #128	; 0x80
    f130:	str	r3, [sp, #12]
    f132:	b.w	e66c <_svfprintf_r+0x35c>
    f136:	add	r2, sp, #140	; 0x8c
    f138:	ldr	r1, [sp, #20]
    f13a:	ldr	r0, [sp, #24]
    f13c:	bl	13354 <__ssprint_r>
    f140:	cmp	r0, #0
    f142:	bne.w	e504 <_svfprintf_r+0x1f4>
    f146:	ldr	r4, [sp, #148]	; 0x94
    f148:	add.w	r9, sp, #192	; 0xc0
    f14c:	ldr	r2, [sp, #60]	; 0x3c
    f14e:	ldr	r3, [sp, #116]	; 0x74
    f150:	add	r2, r6
    f152:	mov	r7, r2
    f154:	ldr	r2, [sp, #56]	; 0x38
    f156:	cmp	r3, r2
    f158:	blt.n	f1ea <_svfprintf_r+0xeda>
    f15a:	ldr	r2, [sp, #12]
    f15c:	lsls	r5, r2, #31
    f15e:	bmi.n	f1ea <_svfprintf_r+0xeda>
    f160:	ldr	r1, [sp, #56]	; 0x38
    f162:	add	r6, r1
    f164:	subs	r5, r6, r7
    f166:	subs	r3, r1, r3
    f168:	cmp	r5, r3
    f16a:	it	ge
    f16c:	movge	r5, r3
    f16e:	cmp	r5, #0
    f170:	mov	r6, r5
    f172:	ble.n	f190 <_svfprintf_r+0xe80>
    f174:	ldr	r2, [sp, #144]	; 0x90
    f176:	str.w	r7, [r9]
    f17a:	adds	r2, #1
    f17c:	add	r4, r5
    f17e:	cmp	r2, #7
    f180:	str	r4, [sp, #148]	; 0x94
    f182:	str.w	r5, [r9, #4]
    f186:	str	r2, [sp, #144]	; 0x90
    f188:	bgt.w	f788 <_svfprintf_r+0x1478>
    f18c:	add.w	r9, r9, #8
    f190:	cmp	r6, #0
    f192:	ite	ge
    f194:	subge	r5, r3, r6
    f196:	movlt	r5, r3
    f198:	cmp	r5, #0
    f19a:	ble.w	e83c <_svfprintf_r+0x52c>
    f19e:	ldr	r2, [pc, #744]	; (f488 <_svfprintf_r+0x1178>)
    f1a0:	ldr	r3, [sp, #144]	; 0x90
    f1a2:	str	r2, [sp, #44]	; 0x2c
    f1a4:	cmp	r5, #16
    f1a6:	ble.n	f0e4 <_svfprintf_r+0xdd4>
    f1a8:	movs	r6, #16
    f1aa:	ldr	r7, [sp, #24]
    f1ac:	ldr.w	fp, [sp, #20]
    f1b0:	b.n	f1bc <_svfprintf_r+0xeac>
    f1b2:	add.w	r9, r9, #8
    f1b6:	subs	r5, #16
    f1b8:	cmp	r5, #16
    f1ba:	ble.n	f0e4 <_svfprintf_r+0xdd4>
    f1bc:	adds	r3, #1
    f1be:	adds	r4, #16
    f1c0:	cmp	r3, #7
    f1c2:	str	r4, [sp, #148]	; 0x94
    f1c4:	str	r3, [sp, #144]	; 0x90
    f1c6:	str.w	sl, [r9]
    f1ca:	str.w	r6, [r9, #4]
    f1ce:	ble.n	f1b2 <_svfprintf_r+0xea2>
    f1d0:	add	r2, sp, #140	; 0x8c
    f1d2:	mov	r1, fp
    f1d4:	mov	r0, r7
    f1d6:	bl	13354 <__ssprint_r>
    f1da:	cmp	r0, #0
    f1dc:	bne.w	e504 <_svfprintf_r+0x1f4>
    f1e0:	ldr	r4, [sp, #148]	; 0x94
    f1e2:	ldr	r3, [sp, #144]	; 0x90
    f1e4:	add.w	r9, sp, #192	; 0xc0
    f1e8:	b.n	f1b6 <_svfprintf_r+0xea6>
    f1ea:	ldr	r2, [sp, #144]	; 0x90
    f1ec:	ldr	r0, [sp, #72]	; 0x48
    f1ee:	ldr	r1, [sp, #76]	; 0x4c
    f1f0:	str.w	r1, [r9]
    f1f4:	adds	r2, #1
    f1f6:	add	r4, r0
    f1f8:	cmp	r2, #7
    f1fa:	str	r4, [sp, #148]	; 0x94
    f1fc:	str.w	r0, [r9, #4]
    f200:	str	r2, [sp, #144]	; 0x90
    f202:	bgt.w	f76e <_svfprintf_r+0x145e>
    f206:	add.w	r9, r9, #8
    f20a:	b.n	f160 <_svfprintf_r+0xe50>
    f20c:	ldr	r3, [sp, #12]
    f20e:	lsls	r0, r3, #31
    f210:	bmi.w	edf8 <_svfprintf_r+0xae8>
    f214:	adds	r5, #1
    f216:	adds	r4, #1
    f218:	movs	r3, #1
    f21a:	cmp	r5, #7
    f21c:	str	r4, [sp, #148]	; 0x94
    f21e:	str	r5, [sp, #144]	; 0x90
    f220:	str.w	r6, [r9]
    f224:	str.w	r3, [r9, #4]
    f228:	ble.w	ee60 <_svfprintf_r+0xb50>
    f22c:	b.n	f04a <_svfprintf_r+0xd3a>
    f22e:	add	r2, sp, #140	; 0x8c
    f230:	ldr	r1, [sp, #20]
    f232:	ldr	r0, [sp, #24]
    f234:	bl	13354 <__ssprint_r>
    f238:	cmp	r0, #0
    f23a:	bne.w	e504 <_svfprintf_r+0x1f4>
    f23e:	ldr	r4, [sp, #148]	; 0x94
    f240:	ldr	r5, [sp, #144]	; 0x90
    f242:	add.w	r9, sp, #192	; 0xc0
    f246:	b.n	ee14 <_svfprintf_r+0xb04>
    f248:	add	r2, sp, #140	; 0x8c
    f24a:	ldr	r1, [sp, #20]
    f24c:	ldr	r0, [sp, #24]
    f24e:	bl	13354 <__ssprint_r>
    f252:	cmp	r0, #0
    f254:	bne.w	e504 <_svfprintf_r+0x1f4>
    f258:	ldr	r4, [sp, #148]	; 0x94
    f25a:	ldr	r5, [sp, #144]	; 0x90
    f25c:	add.w	r9, sp, #192	; 0xc0
    f260:	b.n	ee32 <_svfprintf_r+0xb22>
    f262:	add	r2, sp, #140	; 0x8c
    f264:	ldr	r1, [sp, #20]
    f266:	ldr	r0, [sp, #24]
    f268:	bl	13354 <__ssprint_r>
    f26c:	cmp	r0, #0
    f26e:	bne.w	e504 <_svfprintf_r+0x1f4>
    f272:	ldr	r4, [sp, #148]	; 0x94
    f274:	add.w	r9, sp, #192	; 0xc0
    f278:	b.w	e7a4 <_svfprintf_r+0x494>
    f27c:	ldr	r1, [sp, #12]
    f27e:	ands.w	r3, r1, #64	; 0x40
    f282:	beq.w	f3f8 <_svfprintf_r+0x10e8>
    f286:	ldr	r0, [sp, #40]	; 0x28
    f288:	strb.w	r2, [sp, #111]	; 0x6f
    f28c:	mov	r3, r0
    f28e:	cmp.w	fp, #0
    f292:	add.w	r3, r3, #4
    f296:	ldrh	r4, [r0, #0]
    f298:	mov.w	r5, #0
    f29c:	blt.w	f620 <_svfprintf_r+0x1310>
    f2a0:	bic.w	r1, r1, #128	; 0x80
    f2a4:	str	r1, [sp, #12]
    f2a6:	orrs.w	r1, r4, r5
    f2aa:	str	r3, [sp, #40]	; 0x28
    f2ac:	beq.w	ec64 <_svfprintf_r+0x954>
    f2b0:	mov	r7, r2
    f2b2:	b.w	e55c <_svfprintf_r+0x24c>
    f2b6:	ldr	r3, [sp, #12]
    f2b8:	lsls	r7, r3, #27
    f2ba:	bmi.n	f2d4 <_svfprintf_r+0xfc4>
    f2bc:	ldr	r3, [sp, #12]
    f2be:	lsls	r6, r3, #25
    f2c0:	bpl.n	f2d4 <_svfprintf_r+0xfc4>
    f2c2:	ldr	r2, [sp, #40]	; 0x28
    f2c4:	ldr	r3, [r2, #0]
    f2c6:	adds	r2, #4
    f2c8:	str	r2, [sp, #40]	; 0x28
    f2ca:	ldrh.w	r2, [sp, #28]
    f2ce:	strh	r2, [r3, #0]
    f2d0:	b.w	e35e <_svfprintf_r+0x4e>
    f2d4:	ldr	r2, [sp, #40]	; 0x28
    f2d6:	ldr	r3, [r2, #0]
    f2d8:	adds	r2, #4
    f2da:	str	r2, [sp, #40]	; 0x28
    f2dc:	ldr	r2, [sp, #28]
    f2de:	str	r2, [r3, #0]
    f2e0:	b.w	e35e <_svfprintf_r+0x4e>
    f2e4:	ldrd	r0, r1, [sp, #64]	; 0x40
    f2e8:	mov	r2, r0
    f2ea:	mov	r3, r1
    f2ec:	bl	bb5c <__aeabi_dcmpun>
    f2f0:	cmp	r0, #0
    f2f2:	bne.w	f8f0 <_svfprintf_r+0x15e0>
    f2f6:	ldr	r3, [sp, #52]	; 0x34
    f2f8:	cmp.w	fp, #4294967295
    f2fc:	bic.w	r7, r3, #32
    f300:	beq.w	f7d2 <_svfprintf_r+0x14c2>
    f304:	cmp	r7, #71	; 0x47
    f306:	beq.w	f60e <_svfprintf_r+0x12fe>
    f30a:	ldr	r3, [sp, #68]	; 0x44
    f30c:	ldr	r2, [sp, #12]
    f30e:	cmp	r3, #0
    f310:	orr.w	r2, r2, #256	; 0x100
    f314:	str	r2, [sp, #44]	; 0x2c
    f316:	blt.w	f80a <_svfprintf_r+0x14fa>
    f31a:	vldr	d7, [sp, #64]	; 0x40
    f31e:	vstr	d7, [sp, #96]	; 0x60
    f322:	movs	r3, #0
    f324:	str	r3, [sp, #16]
    f326:	ldr	r3, [sp, #52]	; 0x34
    f328:	cmp	r3, #102	; 0x66
    f32a:	beq.w	f7d8 <_svfprintf_r+0x14c8>
    f32e:	cmp	r3, #70	; 0x46
    f330:	beq.w	f5be <_svfprintf_r+0x12ae>
    f334:	cmp	r7, #69	; 0x45
    f336:	ite	eq
    f338:	addeq.w	r5, fp, #1
    f33c:	movne	r5, fp
    f33e:	add	r2, sp, #132	; 0x84
    f340:	add	r3, sp, #120	; 0x78
    f342:	str	r2, [sp, #4]
    f344:	str	r3, [sp, #0]
    f346:	mov	r2, r5
    f348:	add	r3, sp, #116	; 0x74
    f34a:	movs	r1, #2
    f34c:	vldr	d0, [sp, #96]	; 0x60
    f350:	ldr	r0, [sp, #24]
    f352:	bl	10b18 <_dtoa_r>
    f356:	ldr	r3, [sp, #52]	; 0x34
    f358:	cmp	r3, #103	; 0x67
    f35a:	mov	r6, r0
    f35c:	bne.w	f836 <_svfprintf_r+0x1526>
    f360:	ldr	r3, [sp, #12]
    f362:	lsls	r2, r3, #31
    f364:	bpl.w	f8da <_svfprintf_r+0x15ca>
    f368:	adds	r4, r6, r5
    f36a:	movs	r2, #0
    f36c:	movs	r3, #0
    f36e:	ldrd	r0, r1, [sp, #96]	; 0x60
    f372:	bl	baf8 <__aeabi_dcmpeq>
    f376:	cmp	r0, #0
    f378:	bne.w	f696 <_svfprintf_r+0x1386>
    f37c:	ldr	r3, [sp, #132]	; 0x84
    f37e:	cmp	r4, r3
    f380:	bls.n	f390 <_svfprintf_r+0x1080>
    f382:	movs	r1, #48	; 0x30
    f384:	adds	r2, r3, #1
    f386:	str	r2, [sp, #132]	; 0x84
    f388:	strb	r1, [r3, #0]
    f38a:	ldr	r3, [sp, #132]	; 0x84
    f38c:	cmp	r4, r3
    f38e:	bhi.n	f384 <_svfprintf_r+0x1074>
    f390:	subs	r3, r3, r6
    f392:	cmp	r7, #71	; 0x47
    f394:	str	r3, [sp, #56]	; 0x38
    f396:	beq.w	f688 <_svfprintf_r+0x1378>
    f39a:	ldr	r3, [sp, #52]	; 0x34
    f39c:	cmp	r3, #101	; 0x65
    f39e:	ble.w	f854 <_svfprintf_r+0x1544>
    f3a2:	ldr	r3, [sp, #52]	; 0x34
    f3a4:	cmp	r3, #102	; 0x66
    f3a6:	ldr	r3, [sp, #116]	; 0x74
    f3a8:	str	r3, [sp, #60]	; 0x3c
    f3aa:	beq.w	f86e <_svfprintf_r+0x155e>
    f3ae:	ldr	r2, [sp, #60]	; 0x3c
    f3b0:	ldr	r1, [sp, #56]	; 0x38
    f3b2:	cmp	r2, r1
    f3b4:	blt.w	f81c <_svfprintf_r+0x150c>
    f3b8:	ldr	r3, [sp, #12]
    f3ba:	lsls	r1, r3, #31
    f3bc:	bmi.w	f8de <_svfprintf_r+0x15ce>
    f3c0:	bic.w	r3, r2, r2, asr #31
    f3c4:	str	r2, [sp, #36]	; 0x24
    f3c6:	movs	r2, #103	; 0x67
    f3c8:	str	r2, [sp, #52]	; 0x34
    f3ca:	ldr	r2, [sp, #16]
    f3cc:	cmp	r2, #0
    f3ce:	bne.w	f630 <_svfprintf_r+0x1320>
    f3d2:	str	r3, [sp, #16]
    f3d4:	ldr	r3, [sp, #44]	; 0x2c
    f3d6:	str	r3, [sp, #12]
    f3d8:	mov	fp, r2
    f3da:	ldrb.w	r7, [sp, #111]	; 0x6f
    f3de:	b.w	e6b4 <_svfprintf_r+0x3a4>
    f3e2:	bic.w	r7, r7, #7
    f3e6:	vldr	d7, [r7]
    f3ea:	add.w	r3, r7, #8
    f3ee:	vstr	d7, [sp, #64]	; 0x40
    f3f2:	str	r3, [sp, #40]	; 0x28
    f3f4:	b.w	e90c <_svfprintf_r+0x5fc>
    f3f8:	ldr	r1, [sp, #40]	; 0x28
    f3fa:	strb.w	r3, [sp, #111]	; 0x6f
    f3fe:	cmp.w	fp, #0
    f402:	ldr	r4, [r1, #0]
    f404:	add.w	r7, r1, #4
    f408:	mov.w	r5, #0
    f40c:	bge.w	f568 <_svfprintf_r+0x1258>
    f410:	str	r7, [sp, #40]	; 0x28
    f412:	movs	r7, #0
    f414:	b.w	e55c <_svfprintf_r+0x24c>
    f418:	ldr	r1, [sp, #12]
    f41a:	ands.w	r3, r1, #64	; 0x40
    f41e:	beq.w	f0be <_svfprintf_r+0xdae>
    f422:	ldr	r0, [sp, #40]	; 0x28
    f424:	strb.w	r2, [sp, #111]	; 0x6f
    f428:	mov	r3, r0
    f42a:	cmp.w	fp, #0
    f42e:	add.w	r3, r3, #4
    f432:	ldrh	r4, [r0, #0]
    f434:	mov.w	r5, #0
    f438:	blt.w	f61a <_svfprintf_r+0x130a>
    f43c:	bic.w	r1, r1, #128	; 0x80
    f440:	str	r1, [sp, #12]
    f442:	orrs.w	r1, r4, r5
    f446:	str	r3, [sp, #40]	; 0x28
    f448:	mov	r7, r2
    f44a:	bne.w	e66c <_svfprintf_r+0x35c>
    f44e:	b.w	ea3c <_svfprintf_r+0x72c>
    f452:	ldr	r3, [sp, #12]
    f454:	ldr	r2, [sp, #40]	; 0x28
    f456:	tst.w	r3, #64	; 0x40
    f45a:	mov	r3, r2
    f45c:	beq.w	f624 <_svfprintf_r+0x1314>
    f460:	adds	r3, #4
    f462:	ldrh	r4, [r2, #0]
    f464:	str	r3, [sp, #40]	; 0x28
    f466:	movs	r5, #0
    f468:	b.w	ea76 <_svfprintf_r+0x766>
    f46c:	mov	r4, r2
    f46e:	adds	r3, #1
    f470:	ldr	r2, [sp, #44]	; 0x2c
    f472:	str	r3, [sp, #144]	; 0x90
    f474:	add	r4, r5
    f476:	cmp	r3, #7
    f478:	str	r4, [sp, #148]	; 0x94
    f47a:	stmia.w	r9, {r2, r5}
    f47e:	bgt.w	f136 <_svfprintf_r+0xe26>
    f482:	add.w	r9, r9, #8
    f486:	b.n	f14c <_svfprintf_r+0xe3c>
    f488:	.word	0x00013fa8
    f48c:	movs	r7, #0
    f48e:	cmp	fp, r7
    f490:	strb.w	r7, [sp, #111]	; 0x6f
    f494:	blt.w	ec88 <_svfprintf_r+0x978>
    f498:	ldr	r3, [sp, #12]
    f49a:	bic.w	r3, r3, #128	; 0x80
    f49e:	str	r3, [sp, #12]
    f4a0:	b.w	ec24 <_svfprintf_r+0x914>
    f4a4:	add	r2, sp, #140	; 0x8c
    f4a6:	ldr	r1, [sp, #20]
    f4a8:	ldr	r0, [sp, #24]
    f4aa:	bl	13354 <__ssprint_r>
    f4ae:	cmp	r0, #0
    f4b0:	bne.w	e504 <_svfprintf_r+0x1f4>
    f4b4:	ldr	r4, [sp, #148]	; 0x94
    f4b6:	add.w	r9, sp, #192	; 0xc0
    f4ba:	b.n	eccc <_svfprintf_r+0x9bc>
    f4bc:	ldr	r7, [sp, #40]	; 0x28
    f4be:	b.w	ec7a <_svfprintf_r+0x96a>
    f4c2:	ldr	r3, [sp, #144]	; 0x90
    f4c4:	ldr	r2, [pc, #736]	; (f7a8 <_svfprintf_r+0x1498>)
    f4c6:	str.w	r2, [r9]
    f4ca:	adds	r3, #1
    f4cc:	adds	r4, #1
    f4ce:	movs	r2, #1
    f4d0:	cmp	r3, #7
    f4d2:	str	r4, [sp, #148]	; 0x94
    f4d4:	str	r3, [sp, #144]	; 0x90
    f4d6:	str.w	r2, [r9, #4]
    f4da:	bgt.w	f5f4 <_svfprintf_r+0x12e4>
    f4de:	add.w	r9, r9, #8
    f4e2:	cbnz	r5, f4f0 <_svfprintf_r+0x11e0>
    f4e4:	ldr	r3, [sp, #56]	; 0x38
    f4e6:	cbnz	r3, f4f0 <_svfprintf_r+0x11e0>
    f4e8:	ldr	r3, [sp, #12]
    f4ea:	lsls	r7, r3, #31
    f4ec:	bpl.w	e83c <_svfprintf_r+0x52c>
    f4f0:	ldr	r3, [sp, #144]	; 0x90
    f4f2:	ldr	r1, [sp, #72]	; 0x48
    f4f4:	ldr	r2, [sp, #76]	; 0x4c
    f4f6:	str.w	r2, [r9]
    f4fa:	adds	r3, #1
    f4fc:	add	r4, r1
    f4fe:	cmp	r3, #7
    f500:	str	r4, [sp, #148]	; 0x94
    f502:	str.w	r1, [r9, #4]
    f506:	str	r3, [sp, #144]	; 0x90
    f508:	bgt.w	f8a6 <_svfprintf_r+0x1596>
    f50c:	add.w	r9, r9, #8
    f510:	negs	r5, r5
    f512:	cmp	r5, #0
    f514:	ble.w	f66c <_svfprintf_r+0x135c>
    f518:	ldr	r2, [pc, #656]	; (f7ac <_svfprintf_r+0x149c>)
    f51a:	str	r2, [sp, #44]	; 0x2c
    f51c:	cmp	r5, #16
    f51e:	ble.w	f6b4 <_svfprintf_r+0x13a4>
    f522:	mov	r2, r4
    f524:	movs	r7, #16
    f526:	ldr.w	fp, [sp, #24]
    f52a:	ldr	r4, [sp, #20]
    f52c:	b.n	f53a <_svfprintf_r+0x122a>
    f52e:	add.w	r9, r9, #8
    f532:	subs	r5, #16
    f534:	cmp	r5, #16
    f536:	ble.w	f6b2 <_svfprintf_r+0x13a2>
    f53a:	adds	r3, #1
    f53c:	adds	r2, #16
    f53e:	cmp	r3, #7
    f540:	str	r2, [sp, #148]	; 0x94
    f542:	str	r3, [sp, #144]	; 0x90
    f544:	str.w	sl, [r9]
    f548:	str.w	r7, [r9, #4]
    f54c:	ble.n	f52e <_svfprintf_r+0x121e>
    f54e:	add	r2, sp, #140	; 0x8c
    f550:	mov	r1, r4
    f552:	mov	r0, fp
    f554:	bl	13354 <__ssprint_r>
    f558:	cmp	r0, #0
    f55a:	bne.w	e504 <_svfprintf_r+0x1f4>
    f55e:	ldr	r2, [sp, #148]	; 0x94
    f560:	ldr	r3, [sp, #144]	; 0x90
    f562:	add.w	r9, sp, #192	; 0xc0
    f566:	b.n	f532 <_svfprintf_r+0x1222>
    f568:	ldr	r2, [sp, #12]
    f56a:	b.w	e9e0 <_svfprintf_r+0x6d0>
    f56e:	ldr	r2, [sp, #12]
    f570:	b.n	f08a <_svfprintf_r+0xd7a>
    f572:	ldr	r3, [sp, #12]
    f574:	orr.w	r3, r3, #32
    f578:	str	r3, [sp, #12]
    f57a:	add.w	r8, r8, #1
    f57e:	ldrb.w	r3, [r8]
    f582:	b.w	e3c4 <_svfprintf_r+0xb4>
    f586:	add	r2, sp, #140	; 0x8c
    f588:	ldr	r1, [sp, #20]
    f58a:	ldr	r0, [sp, #24]
    f58c:	bl	13354 <__ssprint_r>
    f590:	cmp	r0, #0
    f592:	bne.w	e504 <_svfprintf_r+0x1f4>
    f596:	ldr	r4, [sp, #148]	; 0x94
    f598:	add.w	r9, sp, #192	; 0xc0
    f59c:	b.w	ecfc <_svfprintf_r+0x9ec>
    f5a0:	movs	r1, #64	; 0x40
    f5a2:	ldr	r0, [sp, #24]
    f5a4:	bl	c3e0 <_malloc_r>
    f5a8:	ldr	r2, [sp, #20]
    f5aa:	str	r0, [r2, #0]
    f5ac:	str	r0, [r2, #16]
    f5ae:	cmp	r0, #0
    f5b0:	beq.w	f99a <_svfprintf_r+0x168a>
    f5b4:	ldr	r2, [sp, #20]
    f5b6:	movs	r3, #64	; 0x40
    f5b8:	str	r3, [r2, #20]
    f5ba:	b.w	e33e <_svfprintf_r+0x2e>
    f5be:	add	r2, sp, #132	; 0x84
    f5c0:	add	r3, sp, #120	; 0x78
    f5c2:	str	r2, [sp, #4]
    f5c4:	str	r3, [sp, #0]
    f5c6:	mov	r2, fp
    f5c8:	add	r3, sp, #116	; 0x74
    f5ca:	movs	r1, #3
    f5cc:	vldr	d0, [sp, #96]	; 0x60
    f5d0:	ldr	r0, [sp, #24]
    f5d2:	bl	10b18 <_dtoa_r>
    f5d6:	mov	r5, fp
    f5d8:	mov	r6, r0
    f5da:	ldr	r3, [sp, #52]	; 0x34
    f5dc:	cmp	r3, #70	; 0x46
    f5de:	add.w	r4, r6, r5
    f5e2:	bne.w	f36a <_svfprintf_r+0x105a>
    f5e6:	ldrb	r3, [r6, #0]
    f5e8:	cmp	r3, #48	; 0x30
    f5ea:	beq.w	f8fc <_svfprintf_r+0x15ec>
    f5ee:	ldr	r5, [sp, #116]	; 0x74
    f5f0:	add	r4, r5
    f5f2:	b.n	f36a <_svfprintf_r+0x105a>
    f5f4:	add	r2, sp, #140	; 0x8c
    f5f6:	ldr	r1, [sp, #20]
    f5f8:	ldr	r0, [sp, #24]
    f5fa:	bl	13354 <__ssprint_r>
    f5fe:	cmp	r0, #0
    f600:	bne.w	e504 <_svfprintf_r+0x1f4>
    f604:	ldr	r5, [sp, #116]	; 0x74
    f606:	ldr	r4, [sp, #148]	; 0x94
    f608:	add.w	r9, sp, #192	; 0xc0
    f60c:	b.n	f4e2 <_svfprintf_r+0x11d2>
    f60e:	cmp.w	fp, #0
    f612:	it	eq
    f614:	moveq.w	fp, #1
    f618:	b.n	f30a <_svfprintf_r+0xffa>
    f61a:	str	r3, [sp, #40]	; 0x28
    f61c:	mov	r7, r2
    f61e:	b.n	f0da <_svfprintf_r+0xdca>
    f620:	str	r3, [sp, #40]	; 0x28
    f622:	b.n	f412 <_svfprintf_r+0x1102>
    f624:	adds	r3, #4
    f626:	ldr	r4, [r2, #0]
    f628:	str	r3, [sp, #40]	; 0x28
    f62a:	movs	r5, #0
    f62c:	b.w	ea76 <_svfprintf_r+0x766>
    f630:	movs	r7, #45	; 0x2d
    f632:	str	r3, [sp, #16]
    f634:	ldr	r3, [sp, #44]	; 0x2c
    f636:	str	r3, [sp, #12]
    f638:	strb.w	r7, [sp, #111]	; 0x6f
    f63c:	mov.w	fp, #0
    f640:	b.w	e6b6 <_svfprintf_r+0x3a6>
    f644:	mov	r0, r6
    f646:	bl	d100 <strlen>
    f64a:	mov	fp, r4
    f64c:	mov	r3, r0
    f64e:	str	r0, [sp, #36]	; 0x24
    f650:	b.w	eb98 <_svfprintf_r+0x888>
    f654:	add	r2, sp, #140	; 0x8c
    f656:	ldr	r1, [sp, #20]
    f658:	ldr	r0, [sp, #24]
    f65a:	bl	13354 <__ssprint_r>
    f65e:	cmp	r0, #0
    f660:	bne.w	e504 <_svfprintf_r+0x1f4>
    f664:	ldr	r4, [sp, #148]	; 0x94
    f666:	ldr	r3, [sp, #144]	; 0x90
    f668:	add.w	r9, sp, #192	; 0xc0
    f66c:	ldr	r1, [sp, #56]	; 0x38
    f66e:	str.w	r6, [r9]
    f672:	adds	r3, #1
    f674:	add	r4, r1
    f676:	cmp	r3, #7
    f678:	str	r4, [sp, #148]	; 0x94
    f67a:	str	r3, [sp, #144]	; 0x90
    f67c:	str.w	r1, [r9, #4]
    f680:	ble.w	e838 <_svfprintf_r+0x528>
    f684:	b.w	ee7e <_svfprintf_r+0xb6e>
    f688:	ldr	r3, [sp, #116]	; 0x74
    f68a:	adds	r5, r3, #3
    f68c:	blt.n	f6cc <_svfprintf_r+0x13bc>
    f68e:	cmp	fp, r3
    f690:	blt.n	f6cc <_svfprintf_r+0x13bc>
    f692:	str	r3, [sp, #60]	; 0x3c
    f694:	b.n	f3ae <_svfprintf_r+0x109e>
    f696:	mov	r3, r4
    f698:	b.n	f390 <_svfprintf_r+0x1080>
    f69a:	add	r2, sp, #140	; 0x8c
    f69c:	ldr	r1, [sp, #20]
    f69e:	ldr	r0, [sp, #24]
    f6a0:	bl	13354 <__ssprint_r>
    f6a4:	cmp	r0, #0
    f6a6:	bne.w	e504 <_svfprintf_r+0x1f4>
    f6aa:	ldr	r4, [sp, #148]	; 0x94
    f6ac:	add.w	r9, sp, #192	; 0xc0
    f6b0:	b.n	ef4c <_svfprintf_r+0xc3c>
    f6b2:	mov	r4, r2
    f6b4:	adds	r3, #1
    f6b6:	ldr	r2, [sp, #44]	; 0x2c
    f6b8:	str	r3, [sp, #144]	; 0x90
    f6ba:	add	r4, r5
    f6bc:	cmp	r3, #7
    f6be:	str	r4, [sp, #148]	; 0x94
    f6c0:	stmia.w	r9, {r2, r5}
    f6c4:	bgt.n	f654 <_svfprintf_r+0x1344>
    f6c6:	add.w	r9, r9, #8
    f6ca:	b.n	f66c <_svfprintf_r+0x135c>
    f6cc:	ldr	r2, [sp, #52]	; 0x34
    f6ce:	subs	r2, #2
    f6d0:	str	r2, [sp, #52]	; 0x34
    f6d2:	subs	r3, #1
    f6d4:	cmp	r3, #0
    f6d6:	ldrb.w	r2, [sp, #52]	; 0x34
    f6da:	str	r3, [sp, #116]	; 0x74
    f6dc:	it	lt
    f6de:	neglt	r3, r3
    f6e0:	strb.w	r2, [sp, #124]	; 0x7c
    f6e4:	ite	lt
    f6e6:	movlt	r2, #45	; 0x2d
    f6e8:	movge	r2, #43	; 0x2b
    f6ea:	cmp	r3, #9
    f6ec:	strb.w	r2, [sp, #125]	; 0x7d
    f6f0:	ble.w	f8ca <_svfprintf_r+0x15ba>
    f6f4:	add.w	r0, sp, #139	; 0x8b
    f6f8:	mov	r4, r0
    f6fa:	ldr	r2, [pc, #180]	; (f7b0 <_svfprintf_r+0x14a0>)
    f6fc:	smull	r2, r1, r2, r3
    f700:	asrs	r2, r3, #31
    f702:	rsb	r2, r2, r1, asr #2
    f706:	add.w	r1, r2, r2, lsl #2
    f70a:	sub.w	r3, r3, r1, lsl #1
    f70e:	add.w	r1, r3, #48	; 0x30
    f712:	cmp	r2, #9
    f714:	mov	r3, r2
    f716:	strb.w	r1, [r4, #-1]!
    f71a:	bgt.n	f6fa <_svfprintf_r+0x13ea>
    f71c:	mov	r1, r4
    f71e:	adds	r3, #48	; 0x30
    f720:	uxtb	r2, r3
    f722:	strb.w	r2, [r1, #-1]!
    f726:	cmp	r0, r1
    f728:	bls.w	f994 <_svfprintf_r+0x1684>
    f72c:	add.w	r1, sp, #126	; 0x7e
    f730:	mov	r3, r4
    f732:	b.n	f738 <_svfprintf_r+0x1428>
    f734:	ldrb.w	r2, [r3], #1
    f738:	strb.w	r2, [r1], #1
    f73c:	cmp	r0, r3
    f73e:	bne.n	f734 <_svfprintf_r+0x1424>
    f740:	adds	r3, r0, #1
    f742:	subs	r3, r3, r4
    f744:	add.w	r2, sp, #126	; 0x7e
    f748:	add	r3, r2
    f74a:	add	r2, sp, #124	; 0x7c
    f74c:	subs	r3, r3, r2
    f74e:	ldr	r2, [sp, #56]	; 0x38
    f750:	str	r3, [sp, #84]	; 0x54
    f752:	cmp	r2, #1
    f754:	add	r3, r2
    f756:	str	r3, [sp, #36]	; 0x24
    f758:	ble.w	f92a <_svfprintf_r+0x161a>
    f75c:	ldr	r3, [sp, #36]	; 0x24
    f75e:	ldr	r2, [sp, #72]	; 0x48
    f760:	add	r3, r2
    f762:	movs	r2, #0
    f764:	str	r3, [sp, #36]	; 0x24
    f766:	str	r2, [sp, #60]	; 0x3c
    f768:	bic.w	r3, r3, r3, asr #31
    f76c:	b.n	f3ca <_svfprintf_r+0x10ba>
    f76e:	add	r2, sp, #140	; 0x8c
    f770:	ldr	r1, [sp, #20]
    f772:	ldr	r0, [sp, #24]
    f774:	bl	13354 <__ssprint_r>
    f778:	cmp	r0, #0
    f77a:	bne.w	e504 <_svfprintf_r+0x1f4>
    f77e:	ldr	r3, [sp, #116]	; 0x74
    f780:	ldr	r4, [sp, #148]	; 0x94
    f782:	add.w	r9, sp, #192	; 0xc0
    f786:	b.n	f160 <_svfprintf_r+0xe50>
    f788:	add	r2, sp, #140	; 0x8c
    f78a:	ldr	r1, [sp, #20]
    f78c:	ldr	r0, [sp, #24]
    f78e:	bl	13354 <__ssprint_r>
    f792:	cmp	r0, #0
    f794:	bne.w	e504 <_svfprintf_r+0x1f4>
    f798:	ldr	r3, [sp, #116]	; 0x74
    f79a:	ldr	r2, [sp, #56]	; 0x38
    f79c:	ldr	r4, [sp, #148]	; 0x94
    f79e:	subs	r3, r2, r3
    f7a0:	add.w	r9, sp, #192	; 0xc0
    f7a4:	b.n	f190 <_svfprintf_r+0xe80>
    f7a6:	nop
    f7a8:	.word	0x00013ff8
    f7ac:	.word	0x00013fa8
    f7b0:	.word	0x66666667
    f7b4:	cmp	r5, #6
    f7b6:	mov	r3, r5
    f7b8:	it	cs
    f7ba:	movcs	r3, #6
    f7bc:	str	r3, [sp, #36]	; 0x24
    f7be:	bic.w	r3, r3, r3, asr #31
    f7c2:	mov	fp, r6
    f7c4:	str	r7, [sp, #40]	; 0x28
    f7c6:	str	r6, [sp, #60]	; 0x3c
    f7c8:	mov	r7, r6
    f7ca:	str	r3, [sp, #16]
    f7cc:	ldr	r6, [pc, #536]	; (f9e8 <_svfprintf_r+0x16d8>)
    f7ce:	b.w	e6b4 <_svfprintf_r+0x3a4>
    f7d2:	mov.w	fp, #6
    f7d6:	b.n	f30a <_svfprintf_r+0xffa>
    f7d8:	add	r2, sp, #132	; 0x84
    f7da:	add	r3, sp, #120	; 0x78
    f7dc:	str	r2, [sp, #4]
    f7de:	str	r3, [sp, #0]
    f7e0:	mov	r2, fp
    f7e2:	add	r3, sp, #116	; 0x74
    f7e4:	movs	r1, #3
    f7e6:	vldr	d0, [sp, #96]	; 0x60
    f7ea:	ldr	r0, [sp, #24]
    f7ec:	bl	10b18 <_dtoa_r>
    f7f0:	mov	r5, fp
    f7f2:	mov	r6, r0
    f7f4:	add.w	r4, r0, fp
    f7f8:	b.n	f5e6 <_svfprintf_r+0x12d6>
    f7fa:	movs	r7, #45	; 0x2d
    f7fc:	strb.w	r7, [sp, #111]	; 0x6f
    f800:	b.w	e95a <_svfprintf_r+0x64a>
    f804:	str	r3, [sp, #12]
    f806:	b.w	eab2 <_svfprintf_r+0x7a2>
    f80a:	ldrd	r1, r2, [sp, #64]	; 0x40
    f80e:	add.w	r3, r2, #2147483648	; 0x80000000
    f812:	str	r3, [sp, #100]	; 0x64
    f814:	movs	r3, #45	; 0x2d
    f816:	str	r1, [sp, #96]	; 0x60
    f818:	str	r3, [sp, #16]
    f81a:	b.n	f326 <_svfprintf_r+0x1016>
    f81c:	ldr	r2, [sp, #72]	; 0x48
    f81e:	ldr	r3, [sp, #56]	; 0x38
    f820:	add	r3, r2
    f822:	ldr	r2, [sp, #60]	; 0x3c
    f824:	str	r3, [sp, #36]	; 0x24
    f826:	cmp	r2, #0
    f828:	ble.w	f93e <_svfprintf_r+0x162e>
    f82c:	movs	r2, #103	; 0x67
    f82e:	bic.w	r3, r3, r3, asr #31
    f832:	str	r2, [sp, #52]	; 0x34
    f834:	b.n	f3ca <_svfprintf_r+0x10ba>
    f836:	ldr	r3, [sp, #52]	; 0x34
    f838:	cmp	r3, #71	; 0x47
    f83a:	bne.w	f368 <_svfprintf_r+0x1058>
    f83e:	ldr	r3, [sp, #12]
    f840:	lsls	r3, r3, #31
    f842:	bmi.w	f5da <_svfprintf_r+0x12ca>
    f846:	ldr	r3, [sp, #132]	; 0x84
    f848:	cmp	r7, #71	; 0x47
    f84a:	sub.w	r3, r3, r6
    f84e:	str	r3, [sp, #56]	; 0x38
    f850:	beq.w	f688 <_svfprintf_r+0x1378>
    f854:	ldr	r3, [sp, #116]	; 0x74
    f856:	b.n	f6d2 <_svfprintf_r+0x13c2>
    f858:	bic.w	r3, r5, r5, asr #31
    f85c:	str	r7, [sp, #40]	; 0x28
    f85e:	str	r3, [sp, #16]
    f860:	str	r5, [sp, #36]	; 0x24
    f862:	mov	fp, r0
    f864:	str	r0, [sp, #60]	; 0x3c
    f866:	ldrb.w	r7, [sp, #111]	; 0x6f
    f86a:	b.w	e6b4 <_svfprintf_r+0x3a4>
    f86e:	cmp	r3, #0
    f870:	ble.n	f94e <_svfprintf_r+0x163e>
    f872:	cmp.w	fp, #0
    f876:	bne.n	f918 <_svfprintf_r+0x1608>
    f878:	ldr	r2, [sp, #12]
    f87a:	lsls	r4, r2, #31
    f87c:	bmi.n	f918 <_svfprintf_r+0x1608>
    f87e:	mov	r2, r3
    f880:	str	r2, [sp, #36]	; 0x24
    f882:	bic.w	r3, r3, r3, asr #31
    f886:	b.n	f3ca <_svfprintf_r+0x10ba>
    f888:	ldr	r3, [sp, #12]
    f88a:	lsls	r3, r3, #31
    f88c:	mov	r7, fp
    f88e:	bpl.n	f89c <_svfprintf_r+0x158c>
    f890:	add	r6, sp, #256	; 0x100
    f892:	movs	r3, #48	; 0x30
    f894:	strb.w	r3, [r6, #-65]!
    f898:	b.w	e6a0 <_svfprintf_r+0x390>
    f89c:	str.w	fp, [sp, #36]	; 0x24
    f8a0:	add	r6, sp, #192	; 0xc0
    f8a2:	b.w	e6a6 <_svfprintf_r+0x396>
    f8a6:	add	r2, sp, #140	; 0x8c
    f8a8:	ldr	r1, [sp, #20]
    f8aa:	ldr	r0, [sp, #24]
    f8ac:	bl	13354 <__ssprint_r>
    f8b0:	cmp	r0, #0
    f8b2:	bne.w	e504 <_svfprintf_r+0x1f4>
    f8b6:	ldr	r5, [sp, #116]	; 0x74
    f8b8:	ldr	r4, [sp, #148]	; 0x94
    f8ba:	ldr	r3, [sp, #144]	; 0x90
    f8bc:	add.w	r9, sp, #192	; 0xc0
    f8c0:	b.n	f510 <_svfprintf_r+0x1200>
    f8c2:	mov	r8, r4
    f8c4:	movs	r5, #0
    f8c6:	b.w	e3c8 <_svfprintf_r+0xb8>
    f8ca:	adds	r3, #48	; 0x30
    f8cc:	movs	r2, #48	; 0x30
    f8ce:	strb.w	r3, [sp, #127]	; 0x7f
    f8d2:	strb.w	r2, [sp, #126]	; 0x7e
    f8d6:	add	r3, sp, #128	; 0x80
    f8d8:	b.n	f74a <_svfprintf_r+0x143a>
    f8da:	ldr	r3, [sp, #132]	; 0x84
    f8dc:	b.n	f390 <_svfprintf_r+0x1080>
    f8de:	ldr	r2, [sp, #72]	; 0x48
    f8e0:	ldr	r3, [sp, #60]	; 0x3c
    f8e2:	add	r3, r2
    f8e4:	movs	r2, #103	; 0x67
    f8e6:	str	r3, [sp, #36]	; 0x24
    f8e8:	str	r2, [sp, #52]	; 0x34
    f8ea:	bic.w	r3, r3, r3, asr #31
    f8ee:	b.n	f3ca <_svfprintf_r+0x10ba>
    f8f0:	ldr	r6, [pc, #248]	; (f9ec <_svfprintf_r+0x16dc>)
    f8f2:	ldr	r3, [pc, #252]	; (f9f0 <_svfprintf_r+0x16e0>)
    f8f4:	ldrb.w	r7, [sp, #111]	; 0x6f
    f8f8:	b.w	e95e <_svfprintf_r+0x64e>
    f8fc:	movs	r2, #0
    f8fe:	movs	r3, #0
    f900:	ldrd	r0, r1, [sp, #96]	; 0x60
    f904:	bl	baf8 <__aeabi_dcmpeq>
    f908:	cmp	r0, #0
    f90a:	bne.w	f5ee <_svfprintf_r+0x12de>
    f90e:	rsb	r5, r5, #1
    f912:	str	r5, [sp, #116]	; 0x74
    f914:	add	r4, r5
    f916:	b.n	f36a <_svfprintf_r+0x105a>
    f918:	ldr	r3, [sp, #60]	; 0x3c
    f91a:	ldr	r2, [sp, #72]	; 0x48
    f91c:	adds	r5, r3, r2
    f91e:	add.w	r3, r5, fp
    f922:	str	r3, [sp, #36]	; 0x24
    f924:	bic.w	r3, r3, r3, asr #31
    f928:	b.n	f3ca <_svfprintf_r+0x10ba>
    f92a:	ldr	r3, [sp, #12]
    f92c:	ands.w	r3, r3, #1
    f930:	bne.w	f75c <_svfprintf_r+0x144c>
    f934:	str	r3, [sp, #60]	; 0x3c
    f936:	ldr	r3, [sp, #36]	; 0x24
    f938:	bic.w	r3, r3, r3, asr #31
    f93c:	b.n	f3ca <_svfprintf_r+0x10ba>
    f93e:	ldr	r3, [sp, #60]	; 0x3c
    f940:	ldr	r2, [sp, #36]	; 0x24
    f942:	rsb	r3, r3, #1
    f946:	add	r2, r3
    f948:	mov	r3, r2
    f94a:	str	r2, [sp, #36]	; 0x24
    f94c:	b.n	f82c <_svfprintf_r+0x151c>
    f94e:	cmp.w	fp, #0
    f952:	bne.n	f95a <_svfprintf_r+0x164a>
    f954:	ldr	r3, [sp, #12]
    f956:	lsls	r0, r3, #31
    f958:	bpl.n	f96a <_svfprintf_r+0x165a>
    f95a:	ldr	r3, [sp, #72]	; 0x48
    f95c:	adds	r5, r3, #1
    f95e:	add.w	r3, r5, fp
    f962:	str	r3, [sp, #36]	; 0x24
    f964:	bic.w	r3, r3, r3, asr #31
    f968:	b.n	f3ca <_svfprintf_r+0x10ba>
    f96a:	movs	r3, #1
    f96c:	str	r3, [sp, #36]	; 0x24
    f96e:	b.n	f3ca <_svfprintf_r+0x10ba>
    f970:	ldr	r0, [sp, #40]	; 0x28
    f972:	ldrb.w	r3, [r8, #1]
    f976:	ldr	r5, [r0, #0]
    f978:	adds	r0, #4
    f97a:	cmp	r5, #0
    f97c:	str	r0, [sp, #40]	; 0x28
    f97e:	mov	r8, r4
    f980:	bge.w	e3c4 <_svfprintf_r+0xb4>
    f984:	mov.w	r5, #4294967295
    f988:	b.w	e3c4 <_svfprintf_r+0xb4>
    f98c:	strb.w	r1, [sp, #111]	; 0x6f
    f990:	b.w	e526 <_svfprintf_r+0x216>
    f994:	add.w	r3, sp, #126	; 0x7e
    f998:	b.n	f74a <_svfprintf_r+0x143a>
    f99a:	ldr	r2, [sp, #24]
    f99c:	movs	r3, #12
    f99e:	str	r3, [r2, #0]
    f9a0:	mov.w	r0, #4294967295
    f9a4:	b.w	e516 <_svfprintf_r+0x206>
    f9a8:	strb.w	r1, [sp, #111]	; 0x6f
    f9ac:	b.w	e620 <_svfprintf_r+0x310>
    f9b0:	strb.w	r1, [sp, #111]	; 0x6f
    f9b4:	b.w	e8ec <_svfprintf_r+0x5dc>
    f9b8:	strb.w	r1, [sp, #111]	; 0x6f
    f9bc:	b.w	ea5a <_svfprintf_r+0x74a>
    f9c0:	strb.w	r1, [sp, #111]	; 0x6f
    f9c4:	b.w	e9fe <_svfprintf_r+0x6ee>
    f9c8:	strb.w	r1, [sp, #111]	; 0x6f
    f9cc:	b.w	e9aa <_svfprintf_r+0x69a>
    f9d0:	strb.w	r1, [sp, #111]	; 0x6f
    f9d4:	b.w	ec42 <_svfprintf_r+0x932>
    f9d8:	strb.w	r1, [sp, #111]	; 0x6f
    f9dc:	b.w	ec00 <_svfprintf_r+0x8f0>
    f9e0:	strb.w	r1, [sp, #111]	; 0x6f
    f9e4:	b.w	ebc4 <_svfprintf_r+0x8b4>
    f9e8:	.word	0x00013ff0
    f9ec:	.word	0x00013fc4
    f9f0:	.word	0x00013fc0

0000f9f4 <__ssvfscanf_r>:
    f9f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f9f8:	mov	fp, r1
    f9fa:	ldrsh.w	r1, [r1, #12]
    f9fe:	sub.w	sp, sp, #692	; 0x2b4
    fa02:	mov	sl, r0
    fa04:	lsls	r0, r1, #18
    fa06:	mov	r4, r2
    fa08:	str	r3, [sp, #20]
    fa0a:	bmi.n	fa20 <__ssvfscanf_r+0x2c>
    fa0c:	ldr.w	r3, [fp, #100]	; 0x64
    fa10:	orr.w	r1, r1, #8192	; 0x2000
    fa14:	bic.w	r3, r3, #8192	; 0x2000
    fa18:	strh.w	r1, [fp, #12]
    fa1c:	str.w	r3, [fp, #100]	; 0x64
    fa20:	mov	r6, r4
    fa22:	movs	r3, #0
    fa24:	str	r3, [sp, #28]
    fa26:	str	r3, [sp, #16]
    fa28:	mov	r7, r3
    fa2a:	str	r3, [sp, #24]
    fa2c:	ldrb.w	r3, [r6], #1
    fa30:	str	r3, [sp, #68]	; 0x44
    fa32:	cbz	r3, fa90 <__ssvfscanf_r+0x9c>
    fa34:	bl	c3ac <__locale_ctype_ptr>
    fa38:	ldr	r2, [sp, #68]	; 0x44
    fa3a:	add	r0, r2
    fa3c:	ldrb	r3, [r0, #1]
    fa3e:	and.w	r3, r3, #8
    fa42:	and.w	r5, r3, #255	; 0xff
    fa46:	cbz	r3, fa9a <__ssvfscanf_r+0xa6>
    fa48:	ldr.w	r3, [fp, #4]
    fa4c:	b.n	fa72 <__ssvfscanf_r+0x7e>
    fa4e:	bl	c3ac <__locale_ctype_ptr>
    fa52:	ldr.w	r3, [fp]
    fa56:	ldrb	r2, [r3, #0]
    fa58:	add	r0, r2
    fa5a:	adds	r3, #1
    fa5c:	ldrb	r2, [r0, #1]
    fa5e:	lsls	r1, r2, #28
    fa60:	bpl.n	fa82 <__ssvfscanf_r+0x8e>
    fa62:	ldr.w	r2, [fp, #4]
    fa66:	str.w	r3, [fp]
    fa6a:	subs	r3, r2, #1
    fa6c:	adds	r7, #1
    fa6e:	str.w	r3, [fp, #4]
    fa72:	cmp	r3, #0
    fa74:	bgt.n	fa4e <__ssvfscanf_r+0x5a>
    fa76:	mov	r1, fp
    fa78:	mov	r0, sl
    fa7a:	bl	134d8 <__ssrefill_r>
    fa7e:	cmp	r0, #0
    fa80:	beq.n	fa4e <__ssvfscanf_r+0x5a>
    fa82:	mov	r4, r6
    fa84:	mov	r6, r4
    fa86:	ldrb.w	r3, [r6], #1
    fa8a:	str	r3, [sp, #68]	; 0x44
    fa8c:	cmp	r3, #0
    fa8e:	bne.n	fa34 <__ssvfscanf_r+0x40>
    fa90:	ldr	r0, [sp, #24]
    fa92:	add.w	sp, sp, #692	; 0x2b4
    fa96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa9a:	cmp	r2, #37	; 0x25
    fa9c:	bne.w	fba8 <__ssvfscanf_r+0x1b4>
    faa0:	ldrb.w	r8, [r4, #1]
    faa4:	mov	r4, r5
    faa6:	adds	r3, r6, #1
    faa8:	cmp.w	r8, #120	; 0x78
    faac:	bhi.w	ff36 <__ssvfscanf_r+0x542>
    fab0:	tbh	[pc, r8, lsl #1]
    fab4:	.word	0x02410092
    fab8:	.word	0x02410241
    fabc:	.word	0x02410241
    fac0:	.word	0x02410241
    fac4:	.word	0x02410241
    fac8:	.word	0x02410241
    facc:	.word	0x02410241
    fad0:	.word	0x02410241
    fad4:	.word	0x02410241
    fad8:	.word	0x02410241
    fadc:	.word	0x02410241
    fae0:	.word	0x02410241
    fae4:	.word	0x02410241
    fae8:	.word	0x02410241
    faec:	.word	0x02410241
    faf0:	.word	0x02410241
    faf4:	.word	0x02410241
    faf8:	.word	0x02410241
    fafc:	.word	0x00790241
    fb00:	.word	0x02410241
    fb04:	.word	0x02410241
    fb08:	.word	0x024101d8
    fb0c:	.word	0x02410241
    fb10:	.word	0x02410241
    fb14:	.word	0x01cf01cf
    fb18:	.word	0x01cf01cf
    fb1c:	.word	0x01cf01cf
    fb20:	.word	0x01cf01cf
    fb24:	.word	0x01cf01cf
    fb28:	.word	0x02410241
    fb2c:	.word	0x02410241
    fb30:	.word	0x02410241
    fb34:	.word	0x02410241
    fb38:	.word	0x02410241
    fb3c:	.word	0x01b901c1
    fb40:	.word	0x01b90241
    fb44:	.word	0x02410241
    fb48:	.word	0x02410241
    fb4c:	.word	0x024101b3
    fb50:	.word	0x01a30241
    fb54:	.word	0x02410241
    fb58:	.word	0x02410241
    fb5c:	.word	0x02410241
    fb60:	.word	0x02410241
    fb64:	.word	0x02410193
    fb68:	.word	0x01510241
    fb6c:	.word	0x02410241
    fb70:	.word	0x02410241
    fb74:	.word	0x02410241
    fb78:	.word	0x01220241
    fb7c:	.word	0x01b90188
    fb80:	.word	0x01b901b9
    fb84:	.word	0x0098011c
    fb88:	.word	0x02410241
    fb8c:	.word	0x024100d5
    fb90:	.word	0x0101010d
    fb94:	.word	0x024100f3
    fb98:	.word	0x00eb0241
    fb9c:	.word	0x00df0241
    fba0:	.word	0x02410241
    fba4:	.short	0x0193
    fba6:	mov	r6, r3
    fba8:	ldr.w	r3, [fp, #4]
    fbac:	cmp	r3, #0
    fbae:	ble.w	10058 <__ssvfscanf_r+0x664>
    fbb2:	ldr.w	r3, [fp]
    fbb6:	ldrb.w	r2, [r6, #-1]
    fbba:	ldrb	r1, [r3, #0]
    fbbc:	cmp	r1, r2
    fbbe:	bne.w	fa90 <__ssvfscanf_r+0x9c>
    fbc2:	ldr.w	r2, [fp, #4]
    fbc6:	adds	r3, #1
    fbc8:	subs	r2, #1
    fbca:	str.w	r3, [fp]
    fbce:	adds	r7, #1
    fbd0:	str.w	r2, [fp, #4]
    fbd4:	mov	r4, r6
    fbd6:	b.n	fa84 <__ssvfscanf_r+0x90>
    fbd8:	mov.w	r0, #4294967295
    fbdc:	add.w	sp, sp, #692	; 0x2b4
    fbe0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fbe4:	str	r3, [sp, #12]
    fbe6:	ldr.w	r3, [fp, #4]
    fbea:	cmp	r3, #0
    fbec:	ble.w	100b6 <__ssvfscanf_r+0x6c2>
    fbf0:	ldr	r3, [pc, #736]	; (fed4 <__ssvfscanf_r+0x4e0>)
    fbf2:	str	r3, [sp, #28]
    fbf4:	movs	r3, #0
    fbf6:	str	r3, [sp, #16]
    fbf8:	movs	r6, #3
    fbfa:	b.n	fc00 <__ssvfscanf_r+0x20c>
    fbfc:	str.w	lr, [fp]
    fc00:	bl	c3ac <__locale_ctype_ptr>
    fc04:	ldr.w	r2, [fp]
    fc08:	ldrb	r1, [r2, #0]
    fc0a:	add	r0, r1
    fc0c:	add.w	lr, r2, #1
    fc10:	ldrb	r3, [r0, #1]
    fc12:	and.w	r3, r3, #8
    fc16:	and.w	r8, r3, #255	; 0xff
    fc1a:	cmp	r3, #0
    fc1c:	beq.w	1011e <__ssvfscanf_r+0x72a>
    fc20:	ldr.w	r3, [fp, #4]
    fc24:	subs	r3, #1
    fc26:	cmp	r3, #0
    fc28:	add.w	r7, r7, #1
    fc2c:	str.w	r3, [fp, #4]
    fc30:	bgt.n	fbfc <__ssvfscanf_r+0x208>
    fc32:	mov	r1, fp
    fc34:	mov	r0, sl
    fc36:	bl	134d8 <__ssrefill_r>
    fc3a:	cmp	r0, #0
    fc3c:	beq.n	fc00 <__ssvfscanf_r+0x20c>
    fc3e:	ldr	r2, [sp, #24]
    fc40:	cmp	r2, #0
    fc42:	beq.n	fbd8 <__ssvfscanf_r+0x1e4>
    fc44:	ldrh.w	r3, [fp, #12]
    fc48:	tst.w	r3, #64	; 0x40
    fc4c:	mov	r3, r2
    fc4e:	it	ne
    fc50:	movne.w	r3, #4294967295
    fc54:	mov	r0, r3
    fc56:	add.w	sp, sp, #692	; 0x2b4
    fc5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc5e:	ldrb.w	r8, [r6, #1]
    fc62:	cmp.w	r8, #108	; 0x6c
    fc66:	beq.w	1006e <__ssvfscanf_r+0x67a>
    fc6a:	orr.w	r5, r5, #1
    fc6e:	mov	r6, r3
    fc70:	b.n	faa6 <__ssvfscanf_r+0xb2>
    fc72:	str	r3, [sp, #12]
    fc74:	ldr.w	r3, [fp, #4]
    fc78:	cmp	r3, #0
    fc7a:	ble.w	1010e <__ssvfscanf_r+0x71a>
    fc7e:	ldr	r3, [pc, #600]	; (fed8 <__ssvfscanf_r+0x4e4>)
    fc80:	str	r3, [sp, #28]
    fc82:	movs	r3, #10
    fc84:	str	r3, [sp, #16]
    fc86:	movs	r6, #3
    fc88:	b.n	fc00 <__ssvfscanf_r+0x20c>
    fc8a:	str	r3, [sp, #12]
    fc8c:	ldr.w	r3, [fp, #4]
    fc90:	cmp	r3, #0
    fc92:	ble.w	100fe <__ssvfscanf_r+0x70a>
    fc96:	movs	r6, #2
    fc98:	b.n	fc00 <__ssvfscanf_r+0x20c>
    fc9a:	str	r3, [sp, #12]
    fc9c:	ldr.w	r3, [fp, #4]
    fca0:	cmp	r3, #0
    fca2:	orr.w	r5, r5, #544	; 0x220
    fca6:	ble.w	fdea <__ssvfscanf_r+0x3f6>
    fcaa:	ldr	r3, [pc, #556]	; (fed8 <__ssvfscanf_r+0x4e4>)
    fcac:	str	r3, [sp, #28]
    fcae:	movs	r3, #16
    fcb0:	str	r3, [sp, #16]
    fcb2:	movs	r6, #3
    fcb4:	b.n	fc00 <__ssvfscanf_r+0x20c>
    fcb6:	str	r3, [sp, #12]
    fcb8:	ldr.w	r3, [fp, #4]
    fcbc:	cmp	r3, #0
    fcbe:	ble.w	fe0a <__ssvfscanf_r+0x416>
    fcc2:	ldr	r3, [pc, #532]	; (fed8 <__ssvfscanf_r+0x4e4>)
    fcc4:	str	r3, [sp, #28]
    fcc6:	movs	r3, #8
    fcc8:	str	r3, [sp, #16]
    fcca:	movs	r6, #3
    fccc:	b.n	fc00 <__ssvfscanf_r+0x20c>
    fcce:	lsls	r2, r5, #27
    fcd0:	mov	r6, r3
    fcd2:	str	r3, [sp, #12]
    fcd4:	bmi.w	febc <__ssvfscanf_r+0x4c8>
    fcd8:	lsls	r3, r5, #29
    fcda:	bpl.w	10086 <__ssvfscanf_r+0x692>
    fcde:	ldr	r1, [sp, #20]
    fce0:	ldr	r3, [r1, #0]
    fce2:	strh	r7, [r3, #0]
    fce4:	adds	r3, r1, #4
    fce6:	str	r3, [sp, #20]
    fce8:	mov	r4, r6
    fcea:	b.n	fa84 <__ssvfscanf_r+0x90>
    fcec:	ldrb.w	r8, [r6, #1]
    fcf0:	orr.w	r5, r5, #4
    fcf4:	mov	r6, r3
    fcf6:	b.n	faa6 <__ssvfscanf_r+0xb2>
    fcf8:	str	r3, [sp, #12]
    fcfa:	ldr.w	r3, [fp, #4]
    fcfe:	cmp	r3, #0
    fd00:	ble.w	100de <__ssvfscanf_r+0x6ea>
    fd04:	cmp	r4, #0
    fd06:	it	eq
    fd08:	moveq	r4, #1
    fd0a:	ands.w	r3, r5, #1
    fd0e:	bne.w	ff56 <__ssvfscanf_r+0x562>
    fd12:	lsls	r2, r5, #27
    fd14:	bpl.w	1002e <__ssvfscanf_r+0x63a>
    fd18:	mov	r5, r3
    fd1a:	b.n	fd30 <__ssvfscanf_r+0x33c>
    fd1c:	add	r3, r2
    fd1e:	str.w	r3, [fp]
    fd22:	add	r5, r2
    fd24:	subs	r4, r4, r2
    fd26:	bl	134d8 <__ssrefill_r>
    fd2a:	cmp	r0, #0
    fd2c:	bne.w	10026 <__ssvfscanf_r+0x632>
    fd30:	ldr.w	r2, [fp, #4]
    fd34:	ldr.w	r3, [fp]
    fd38:	cmp	r2, r4
    fd3a:	mov	r1, fp
    fd3c:	mov	r0, sl
    fd3e:	blt.n	fd1c <__ssvfscanf_r+0x328>
    fd40:	subs	r2, r2, r4
    fd42:	add	r3, r4
    fd44:	str.w	r2, [fp, #4]
    fd48:	add	r5, r4
    fd4a:	str.w	r3, [fp]
    fd4e:	ldr	r6, [sp, #12]
    fd50:	add	r7, r5
    fd52:	mov	r4, r6
    fd54:	b.n	fa84 <__ssvfscanf_r+0x90>
    fd56:	add.w	r9, sp, #80	; 0x50
    fd5a:	mov	r1, r3
    fd5c:	mov	r0, r9
    fd5e:	bl	12d68 <__sccl>
    fd62:	ldr.w	r3, [fp, #4]
    fd66:	cmp	r3, #0
    fd68:	mov	r6, r0
    fd6a:	ble.w	100ce <__ssvfscanf_r+0x6da>
    fd6e:	cmp	r4, #0
    fd70:	ldr.w	r2, [fp]
    fd74:	it	eq
    fd76:	moveq.w	r4, #4294967295
    fd7a:	lsls	r3, r5, #27
    fd7c:	ldrb	r1, [r2, #0]
    fd7e:	bpl.w	fec2 <__ssvfscanf_r+0x4ce>
    fd82:	mov	r8, r4
    fd84:	movs	r5, #0
    fd86:	b.n	fd8a <__ssvfscanf_r+0x396>
    fd88:	ldrb	r1, [r2, #0]
    fd8a:	ldrb.w	r3, [r9, r1]
    fd8e:	adds	r2, #1
    fd90:	cmp	r3, #0
    fd92:	beq.w	1001c <__ssvfscanf_r+0x628>
    fd96:	ldr.w	r3, [fp, #4]
    fd9a:	str.w	r2, [fp]
    fd9e:	adds	r5, #1
    fda0:	subs	r3, #1
    fda2:	cmp	r5, r4
    fda4:	str.w	r3, [fp, #4]
    fda8:	beq.w	10016 <__ssvfscanf_r+0x622>
    fdac:	cmp	r3, #0
    fdae:	bgt.n	fd88 <__ssvfscanf_r+0x394>
    fdb0:	mov	r1, fp
    fdb2:	mov	r0, sl
    fdb4:	bl	134d8 <__ssrefill_r>
    fdb8:	cmp	r0, #0
    fdba:	bne.w	10014 <__ssvfscanf_r+0x620>
    fdbe:	ldr.w	r2, [fp]
    fdc2:	b.n	fd88 <__ssvfscanf_r+0x394>
    fdc4:	str	r3, [sp, #12]
    fdc6:	ldr.w	r3, [fp, #4]
    fdca:	cmp	r3, #0
    fdcc:	ble.n	fe44 <__ssvfscanf_r+0x450>
    fdce:	ldr	r3, [pc, #260]	; (fed4 <__ssvfscanf_r+0x4e0>)
    fdd0:	str	r3, [sp, #28]
    fdd2:	movs	r3, #10
    fdd4:	str	r3, [sp, #16]
    fdd6:	movs	r6, #3
    fdd8:	b.n	fc00 <__ssvfscanf_r+0x20c>
    fdda:	str	r3, [sp, #12]
    fddc:	ldr.w	r3, [fp, #4]
    fde0:	cmp	r3, #0
    fde2:	orr.w	r5, r5, #512	; 0x200
    fde6:	bgt.w	fcaa <__ssvfscanf_r+0x2b6>
    fdea:	mov	r1, fp
    fdec:	mov	r0, sl
    fdee:	bl	134d8 <__ssrefill_r>
    fdf2:	cmp	r0, #0
    fdf4:	beq.w	fcaa <__ssvfscanf_r+0x2b6>
    fdf8:	b.n	fc3e <__ssvfscanf_r+0x24a>
    fdfa:	str	r3, [sp, #12]
    fdfc:	ldr.w	r3, [fp, #4]
    fe00:	cmp	r3, #0
    fe02:	orr.w	r5, r5, #1
    fe06:	bgt.w	fcc2 <__ssvfscanf_r+0x2ce>
    fe0a:	mov	r1, fp
    fe0c:	mov	r0, sl
    fe0e:	bl	134d8 <__ssrefill_r>
    fe12:	cmp	r0, #0
    fe14:	beq.w	fcc2 <__ssvfscanf_r+0x2ce>
    fe18:	b.n	fc3e <__ssvfscanf_r+0x24a>
    fe1a:	ldrb.w	r8, [r6, #1]
    fe1e:	orr.w	r5, r5, #2
    fe22:	mov	r6, r3
    fe24:	b.n	faa6 <__ssvfscanf_r+0xb2>
    fe26:	str	r3, [sp, #12]
    fe28:	ldr.w	r3, [fp, #4]
    fe2c:	cmp	r3, #0
    fe2e:	ble.w	100ee <__ssvfscanf_r+0x6fa>
    fe32:	movs	r6, #4
    fe34:	b.n	fc00 <__ssvfscanf_r+0x20c>
    fe36:	str	r3, [sp, #12]
    fe38:	ldr.w	r3, [fp, #4]
    fe3c:	cmp	r3, #0
    fe3e:	orr.w	r5, r5, #1
    fe42:	bgt.n	fdce <__ssvfscanf_r+0x3da>
    fe44:	mov	r1, fp
    fe46:	mov	r0, sl
    fe48:	bl	134d8 <__ssrefill_r>
    fe4c:	cmp	r0, #0
    fe4e:	beq.n	fdce <__ssvfscanf_r+0x3da>
    fe50:	b.n	fc3e <__ssvfscanf_r+0x24a>
    fe52:	add.w	r4, r4, r4, lsl #2
    fe56:	add.w	r4, r8, r4, lsl #1
    fe5a:	subs	r4, #48	; 0x30
    fe5c:	ldrb.w	r8, [r6, #1]
    fe60:	mov	r6, r3
    fe62:	b.n	faa6 <__ssvfscanf_r+0xb2>
    fe64:	ldrb.w	r8, [r6, #1]
    fe68:	orr.w	r5, r5, #16
    fe6c:	mov	r6, r3
    fe6e:	b.n	faa6 <__ssvfscanf_r+0xb2>
    fe70:	add	r3, sp, #72	; 0x48
    fe72:	mov	r1, r8
    fe74:	mov	r0, r3
    fe76:	movs	r2, #8
    fe78:	str	r3, [sp, #32]
    fe7a:	bl	caa8 <memset>
    fe7e:	ands.w	r9, r5, #16
    fe82:	bne.w	10748 <__ssvfscanf_r+0xd54>
    fe86:	ldr	r2, [sp, #20]
    fe88:	mov	r3, r2
    fe8a:	adds	r3, #4
    fe8c:	ldr.w	r8, [r2]
    fe90:	str	r3, [sp, #20]
    fe92:	movs	r6, #0
    fe94:	bl	c3ac <__locale_ctype_ptr>
    fe98:	ldr.w	r3, [fp]
    fe9c:	ldrb	r3, [r3, #0]
    fe9e:	add	r0, r3
    fea0:	ldrb	r3, [r0, #1]
    fea2:	lsls	r0, r3, #28
    fea4:	bmi.n	feac <__ssvfscanf_r+0x4b8>
    fea6:	cmp	r4, #0
    fea8:	bne.w	106ac <__ssvfscanf_r+0xcb8>
    feac:	cmp.w	r9, #0
    feb0:	bne.n	febc <__ssvfscanf_r+0x4c8>
    feb2:	str.w	r9, [r8]
    feb6:	ldr	r3, [sp, #24]
    feb8:	adds	r3, #1
    feba:	str	r3, [sp, #24]
    febc:	ldr	r6, [sp, #12]
    febe:	mov	r4, r6
    fec0:	b.n	fa84 <__ssvfscanf_r+0x90>
    fec2:	ldr	r0, [sp, #20]
    fec4:	ldr	r5, [r0, #0]
    fec6:	mov	r3, r0
    fec8:	adds	r3, #4
    feca:	add.w	r8, r5, r4
    fece:	str	r3, [sp, #12]
    fed0:	mov	r4, r5
    fed2:	b.n	fee2 <__ssvfscanf_r+0x4ee>
    fed4:	.word	0x0000e2e9
    fed8:	.word	0x00013121
    fedc:	ldr.w	r2, [fp]
    fee0:	ldrb	r1, [r2, #0]
    fee2:	ldrb.w	r3, [r9, r1]
    fee6:	adds	r0, r2, #1
    fee8:	cbz	r3, ff1c <__ssvfscanf_r+0x528>
    feea:	ldr.w	r3, [fp, #4]
    feee:	str.w	r0, [fp]
    fef2:	subs	r3, #1
    fef4:	str.w	r3, [fp, #4]
    fef8:	ldrb	r3, [r2, #0]
    fefa:	strb.w	r3, [r4], #1
    fefe:	cmp	r8, r4
    ff00:	beq.n	ff1c <__ssvfscanf_r+0x528>
    ff02:	ldr.w	r3, [fp, #4]
    ff06:	cmp	r3, #0
    ff08:	bgt.n	fedc <__ssvfscanf_r+0x4e8>
    ff0a:	mov	r1, fp
    ff0c:	mov	r0, sl
    ff0e:	bl	134d8 <__ssrefill_r>
    ff12:	cmp	r0, #0
    ff14:	beq.n	fedc <__ssvfscanf_r+0x4e8>
    ff16:	cmp	r5, r4
    ff18:	beq.w	fc3e <__ssvfscanf_r+0x24a>
    ff1c:	subs	r5, r4, r5
    ff1e:	beq.w	fa90 <__ssvfscanf_r+0x9c>
    ff22:	ldr	r2, [sp, #24]
    ff24:	adds	r2, #1
    ff26:	movs	r3, #0
    ff28:	str	r2, [sp, #24]
    ff2a:	ldr	r2, [sp, #12]
    ff2c:	str	r2, [sp, #20]
    ff2e:	strb	r3, [r4, #0]
    ff30:	add	r7, r5
    ff32:	mov	r4, r6
    ff34:	b.n	fa84 <__ssvfscanf_r+0x90>
    ff36:	str	r3, [sp, #12]
    ff38:	bl	c3ac <__locale_ctype_ptr>
    ff3c:	add	r0, r8
    ff3e:	ldrb	r3, [r0, #1]
    ff40:	and.w	r3, r3, #3
    ff44:	cmp	r3, #1
    ff46:	ldr.w	r3, [fp, #4]
    ff4a:	beq.w	1007a <__ssvfscanf_r+0x686>
    ff4e:	cmp	r3, #0
    ff50:	bgt.w	fdce <__ssvfscanf_r+0x3da>
    ff54:	b.n	fe44 <__ssvfscanf_r+0x450>
    ff56:	add	r3, sp, #72	; 0x48
    ff58:	mov	r0, r3
    ff5a:	movs	r2, #8
    ff5c:	movs	r1, #0
    ff5e:	str	r3, [sp, #32]
    ff60:	bl	caa8 <memset>
    ff64:	ands.w	r3, r5, #16
    ff68:	str	r3, [sp, #40]	; 0x28
    ff6a:	bne.n	10068 <__ssvfscanf_r+0x674>
    ff6c:	ldr	r2, [sp, #20]
    ff6e:	mov	r3, r2
    ff70:	adds	r3, #4
    ff72:	ldr.w	r9, [r2]
    ff76:	str	r3, [sp, #20]
    ff78:	movs	r5, #0
    ff7a:	add.w	r8, sp, #336	; 0x150
    ff7e:	bl	c388 <__locale_mb_cur_max>
    ff82:	cmp	r0, r5
    ff84:	beq.w	fc3e <__ssvfscanf_r+0x24a>
    ff88:	ldmia.w	fp, {r2, r3}
    ff8c:	ldrb.w	r0, [r2], #1
    ff90:	str.w	r2, [fp]
    ff94:	subs	r3, #1
    ff96:	ldr	r2, [sp, #32]
    ff98:	str	r2, [sp, #0]
    ff9a:	adds	r6, r5, #1
    ff9c:	str.w	r3, [fp, #4]
    ffa0:	mov	r1, r9
    ffa2:	strb.w	r0, [r8, r5]
    ffa6:	mov	r3, r6
    ffa8:	mov	r2, r8
    ffaa:	mov	r0, sl
    ffac:	bl	12384 <_mbrtowc_r>
    ffb0:	adds	r1, r0, #1
    ffb2:	beq.w	fc3e <__ssvfscanf_r+0x24a>
    ffb6:	cbnz	r0, ffe2 <__ssvfscanf_r+0x5ee>
    ffb8:	ldr	r3, [sp, #40]	; 0x28
    ffba:	cbnz	r3, 10002 <__ssvfscanf_r+0x60e>
    ffbc:	str.w	r3, [r9]
    ffc0:	add	r7, r6
    ffc2:	subs	r4, #1
    ffc4:	add.w	r9, r9, #4
    ffc8:	ldr.w	r3, [fp, #4]
    ffcc:	cmp	r3, #0
    ffce:	mov.w	r5, #0
    ffd2:	ble.n	fff0 <__ssvfscanf_r+0x5fc>
    ffd4:	cmp	r4, #0
    ffd6:	bne.n	ff7e <__ssvfscanf_r+0x58a>
    ffd8:	ldr	r3, [sp, #40]	; 0x28
    ffda:	cmp	r3, #0
    ffdc:	beq.w	feb6 <__ssvfscanf_r+0x4c2>
    ffe0:	b.n	febc <__ssvfscanf_r+0x4c8>
    ffe2:	adds	r0, #2
    ffe4:	bne.n	10008 <__ssvfscanf_r+0x614>
    ffe6:	ldr.w	r3, [fp, #4]
    ffea:	cmp	r3, #0
    ffec:	mov	r5, r6
    ffee:	bgt.n	ff7e <__ssvfscanf_r+0x58a>
    fff0:	mov	r1, fp
    fff2:	mov	r0, sl
    fff4:	bl	134d8 <__ssrefill_r>
    fff8:	cmp	r0, #0
    fffa:	beq.n	ffd4 <__ssvfscanf_r+0x5e0>
    fffc:	cmp	r5, #0
    fffe:	beq.n	ffd8 <__ssvfscanf_r+0x5e4>
   10000:	b.n	fc3e <__ssvfscanf_r+0x24a>
   10002:	add	r7, r6
   10004:	subs	r4, #1
   10006:	b.n	ffc8 <__ssvfscanf_r+0x5d4>
   10008:	ldr	r3, [sp, #40]	; 0x28
   1000a:	add	r7, r6
   1000c:	subs	r4, #1
   1000e:	cmp	r3, #0
   10010:	bne.n	ffc8 <__ssvfscanf_r+0x5d4>
   10012:	b.n	ffc4 <__ssvfscanf_r+0x5d0>
   10014:	mov	r8, r5
   10016:	mov	r5, r8
   10018:	add	r7, r5
   1001a:	b.n	ff32 <__ssvfscanf_r+0x53e>
   1001c:	cmp	r5, #0
   1001e:	beq.w	fa90 <__ssvfscanf_r+0x9c>
   10022:	add	r7, r5
   10024:	b.n	ff32 <__ssvfscanf_r+0x53e>
   10026:	cmp	r5, #0
   10028:	bne.w	fd4e <__ssvfscanf_r+0x35a>
   1002c:	b.n	fc3e <__ssvfscanf_r+0x24a>
   1002e:	ldr	r5, [sp, #20]
   10030:	mov	r3, r4
   10032:	ldr	r1, [r5, #0]
   10034:	str.w	fp, [sp]
   10038:	movs	r2, #1
   1003a:	mov	r0, sl
   1003c:	bl	13514 <_sfread_r>
   10040:	adds	r6, r5, #4
   10042:	cmp	r0, #0
   10044:	beq.w	fc3e <__ssvfscanf_r+0x24a>
   10048:	ldr	r3, [sp, #24]
   1004a:	str	r6, [sp, #20]
   1004c:	ldr	r6, [sp, #12]
   1004e:	adds	r3, #1
   10050:	add	r7, r0
   10052:	str	r3, [sp, #24]
   10054:	mov	r4, r6
   10056:	b.n	fa84 <__ssvfscanf_r+0x90>
   10058:	mov	r1, fp
   1005a:	mov	r0, sl
   1005c:	bl	134d8 <__ssrefill_r>
   10060:	cmp	r0, #0
   10062:	beq.w	fbb2 <__ssvfscanf_r+0x1be>
   10066:	b.n	fc3e <__ssvfscanf_r+0x24a>
   10068:	mov.w	r9, #0
   1006c:	b.n	ff78 <__ssvfscanf_r+0x584>
   1006e:	ldrb.w	r8, [r6, #2]
   10072:	orr.w	r5, r5, #2
   10076:	adds	r6, #2
   10078:	b.n	faa6 <__ssvfscanf_r+0xb2>
   1007a:	cmp	r3, #0
   1007c:	orr.w	r5, r5, #1
   10080:	bgt.w	fdce <__ssvfscanf_r+0x3da>
   10084:	b.n	fe44 <__ssvfscanf_r+0x450>
   10086:	lsls	r4, r5, #31
   10088:	bmi.n	100a4 <__ssvfscanf_r+0x6b0>
   1008a:	lsls	r0, r5, #30
   1008c:	bpl.n	100a4 <__ssvfscanf_r+0x6b0>
   1008e:	ldr	r2, [sp, #20]
   10090:	ldr	r6, [sp, #12]
   10092:	ldr	r3, [r2, #0]
   10094:	mov	r0, r7
   10096:	asrs	r1, r7, #31
   10098:	adds	r2, #4
   1009a:	str	r2, [sp, #20]
   1009c:	strd	r0, r1, [r3]
   100a0:	mov	r4, r6
   100a2:	b.n	fa84 <__ssvfscanf_r+0x90>
   100a4:	ldr	r2, [sp, #20]
   100a6:	ldr	r6, [sp, #12]
   100a8:	ldr	r3, [r2, #0]
   100aa:	str	r7, [r3, #0]
   100ac:	mov	r3, r2
   100ae:	adds	r3, #4
   100b0:	str	r3, [sp, #20]
   100b2:	mov	r4, r6
   100b4:	b.n	fa84 <__ssvfscanf_r+0x90>
   100b6:	mov	r1, fp
   100b8:	mov	r0, sl
   100ba:	bl	134d8 <__ssrefill_r>
   100be:	cmp	r0, #0
   100c0:	bne.w	fc3e <__ssvfscanf_r+0x24a>
   100c4:	ldr	r3, [pc, #504]	; (102c0 <__ssvfscanf_r+0x8cc>)
   100c6:	str	r0, [sp, #16]
   100c8:	str	r3, [sp, #28]
   100ca:	movs	r6, #3
   100cc:	b.n	fc00 <__ssvfscanf_r+0x20c>
   100ce:	mov	r1, fp
   100d0:	mov	r0, sl
   100d2:	bl	134d8 <__ssrefill_r>
   100d6:	cmp	r0, #0
   100d8:	beq.w	fd6e <__ssvfscanf_r+0x37a>
   100dc:	b.n	fc3e <__ssvfscanf_r+0x24a>
   100de:	mov	r1, fp
   100e0:	mov	r0, sl
   100e2:	bl	134d8 <__ssrefill_r>
   100e6:	cmp	r0, #0
   100e8:	beq.w	fd04 <__ssvfscanf_r+0x310>
   100ec:	b.n	fc3e <__ssvfscanf_r+0x24a>
   100ee:	mov	r1, fp
   100f0:	mov	r0, sl
   100f2:	bl	134d8 <__ssrefill_r>
   100f6:	cmp	r0, #0
   100f8:	beq.w	fe32 <__ssvfscanf_r+0x43e>
   100fc:	b.n	fc3e <__ssvfscanf_r+0x24a>
   100fe:	mov	r1, fp
   10100:	mov	r0, sl
   10102:	bl	134d8 <__ssrefill_r>
   10106:	cmp	r0, #0
   10108:	beq.w	fc96 <__ssvfscanf_r+0x2a2>
   1010c:	b.n	fc3e <__ssvfscanf_r+0x24a>
   1010e:	mov	r1, fp
   10110:	mov	r0, sl
   10112:	bl	134d8 <__ssrefill_r>
   10116:	cmp	r0, #0
   10118:	beq.w	fc7e <__ssvfscanf_r+0x28a>
   1011c:	b.n	fc3e <__ssvfscanf_r+0x24a>
   1011e:	cmp	r6, #3
   10120:	beq.w	10462 <__ssvfscanf_r+0xa6e>
   10124:	cmp	r6, #4
   10126:	bne.w	105a4 <__ssvfscanf_r+0xbb0>
   1012a:	mov	r0, sl
   1012c:	bl	12368 <_localeconv_r>
   10130:	subs	r3, r4, #1
   10132:	ldr	r2, [r0, #0]
   10134:	str	r2, [sp, #48]	; 0x30
   10136:	cmp.w	r3, #348	; 0x15c
   1013a:	bls.w	1060c <__ssvfscanf_r+0xc18>
   1013e:	mvn.w	r1, #348	; 0x15c
   10142:	adds	r3, r4, r1
   10144:	str	r3, [sp, #56]	; 0x38
   10146:	movw	r4, #349	; 0x15d
   1014a:	add	r3, sp, #336	; 0x150
   1014c:	mov.w	r8, #0
   10150:	mov	r2, r3
   10152:	str	r3, [sp, #40]	; 0x28
   10154:	orr.w	r5, r5, #1920	; 0x780
   10158:	mov	r3, r8
   1015a:	str.w	r8, [sp, #60]	; 0x3c
   1015e:	str.w	r8, [sp, #52]	; 0x34
   10162:	mov	r6, r8
   10164:	str.w	r8, [sp, #44]	; 0x2c
   10168:	mov	r9, r2
   1016a:	ldr.w	r0, [fp]
   1016e:	ldrb	r1, [r0, #0]
   10170:	sub.w	lr, r1, #43	; 0x2b
   10174:	cmp.w	lr, #78	; 0x4e
   10178:	bhi.w	10412 <__ssvfscanf_r+0xa1e>
   1017c:	tbh	[pc, lr, lsl #1]
   10180:	.word	0x0149007a
   10184:	.word	0x0149007a
   10188:	.word	0x006e0149
   1018c:	.word	0x004f004f
   10190:	.word	0x004f004f
   10194:	.word	0x004f004f
   10198:	.word	0x004f004f
   1019c:	.word	0x0149004f
   101a0:	.word	0x01490149
   101a4:	.word	0x01490149
   101a8:	.word	0x01490149
   101ac:	.word	0x01490144
   101b0:	.word	0x01490149
   101b4:	.word	0x0125012c
   101b8:	.word	0x01490149
   101bc:	.word	0x014900a2
   101c0:	.word	0x01490149
   101c4:	.word	0x008b0149
   101c8:	.word	0x01490149
   101cc:	.word	0x01490149
   101d0:	.word	0x00850149
   101d4:	.word	0x01490149
   101d8:	.word	0x01490149
   101dc:	.word	0x0149007f
   101e0:	.word	0x01490149
   101e4:	.word	0x01490149
   101e8:	.word	0x01490149
   101ec:	.word	0x01490144
   101f0:	.word	0x01490149
   101f4:	.word	0x0125012c
   101f8:	.word	0x01490149
   101fc:	.word	0x014900a2
   10200:	.word	0x01490149
   10204:	.word	0x008b0149
   10208:	.word	0x01490149
   1020c:	.word	0x01490149
   10210:	.word	0x00850149
   10214:	.word	0x01490149
   10218:	.word	0x01490149
   1021c:	.short	0x007f
   1021e:	cmn.w	r3, r8
   10222:	bne.n	10252 <__ssvfscanf_r+0x85e>
   10224:	bic.w	r5, r5, #384	; 0x180
   10228:	strb.w	r1, [r9]
   1022c:	add.w	r9, r9, #1
   10230:	ldr.w	r1, [fp, #4]
   10234:	subs	r1, #1
   10236:	cmp	r1, #0
   10238:	add.w	r4, r4, #4294967295
   1023c:	add.w	r7, r7, #1
   10240:	str.w	r1, [fp, #4]
   10244:	ble.w	1042c <__ssvfscanf_r+0xa38>
   10248:	adds	r0, #1
   1024a:	str.w	r0, [fp]
   1024e:	cmp	r4, #0
   10250:	bne.n	1016a <__ssvfscanf_r+0x776>
   10252:	cmp	r6, #0
   10254:	beq.n	102dc <__ssvfscanf_r+0x8e8>
   10256:	bic.w	r5, r5, #256	; 0x100
   1025a:	b.n	102dc <__ssvfscanf_r+0x8e8>
   1025c:	lsls	r2, r5, #23
   1025e:	bpl.n	1021e <__ssvfscanf_r+0x82a>
   10260:	ldr	r2, [sp, #56]	; 0x38
   10262:	bic.w	r5, r5, #128	; 0x80
   10266:	adds	r6, #1
   10268:	cmp	r2, #0
   1026a:	beq.n	10230 <__ssvfscanf_r+0x83c>
   1026c:	subs	r2, #1
   1026e:	str	r2, [sp, #56]	; 0x38
   10270:	adds	r4, #1
   10272:	b.n	10230 <__ssvfscanf_r+0x83c>
   10274:	lsls	r2, r5, #24
   10276:	bpl.n	10252 <__ssvfscanf_r+0x85e>
   10278:	bic.w	r5, r5, #128	; 0x80
   1027c:	b.n	10228 <__ssvfscanf_r+0x834>
   1027e:	cmp.w	r8, #7
   10282:	bne.n	10252 <__ssvfscanf_r+0x85e>
   10284:	mov.w	r8, #8
   10288:	b.n	10228 <__ssvfscanf_r+0x834>
   1028a:	cmp.w	r8, #6
   1028e:	bne.n	10252 <__ssvfscanf_r+0x85e>
   10290:	mov.w	r8, #7
   10294:	b.n	10228 <__ssvfscanf_r+0x834>
   10296:	cmp	r3, #0
   10298:	bne.w	10458 <__ssvfscanf_r+0xa64>
   1029c:	cbnz	r6, 102aa <__ssvfscanf_r+0x8b6>
   1029e:	and.w	lr, r5, #1792	; 0x700
   102a2:	cmp.w	lr, #1792	; 0x700
   102a6:	beq.w	10730 <__ssvfscanf_r+0xd3c>
   102aa:	cmp.w	r8, #1
   102ae:	beq.n	102b6 <__ssvfscanf_r+0x8c2>
   102b0:	cmp.w	r8, #4
   102b4:	bne.n	10252 <__ssvfscanf_r+0x85e>
   102b6:	add.w	r8, r8, #1
   102ba:	uxtb.w	r8, r8
   102be:	b.n	10228 <__ssvfscanf_r+0x834>
   102c0:	.word	0x0000e2e9
   102c4:	cmp.w	r8, #0
   102c8:	bne.w	10446 <__ssvfscanf_r+0xa52>
   102cc:	cmp	r6, #0
   102ce:	bne.n	10256 <__ssvfscanf_r+0x862>
   102d0:	and.w	lr, r5, #1792	; 0x700
   102d4:	cmp.w	lr, #1792	; 0x700
   102d8:	beq.w	10750 <__ssvfscanf_r+0xd5c>
   102dc:	subs	r3, #1
   102de:	cmp	r3, #1
   102e0:	bls.w	107e6 <__ssvfscanf_r+0xdf2>
   102e4:	add.w	r3, r8, #4294967295
   102e8:	cmp	r3, #6
   102ea:	bhi.n	1031a <__ssvfscanf_r+0x926>
   102ec:	cmp.w	r8, #2
   102f0:	bls.w	10834 <__ssvfscanf_r+0xe40>
   102f4:	cmp.w	r8, #3
   102f8:	beq.n	1031a <__ssvfscanf_r+0x926>
   102fa:	sub.w	r4, r8, #4
   102fe:	uxtb	r4, r4
   10300:	mvn.w	r8, r4
   10304:	add	r8, r9
   10306:	ldrb.w	r1, [r9, #-1]!
   1030a:	mov	r2, fp
   1030c:	mov	r0, sl
   1030e:	bl	13454 <_sungetc_r>
   10312:	cmp	r8, r9
   10314:	bne.n	10306 <__ssvfscanf_r+0x912>
   10316:	subs	r7, #1
   10318:	subs	r7, r7, r4
   1031a:	lsls	r1, r5, #23
   1031c:	bpl.n	10358 <__ssvfscanf_r+0x964>
   1031e:	lsls	r2, r5, #21
   10320:	bmi.w	1080a <__ssvfscanf_r+0xe16>
   10324:	ldrb.w	r1, [r9, #-1]
   10328:	cmp	r1, #101	; 0x65
   1032a:	add.w	r4, r9, #4294967295
   1032e:	add.w	r8, r7, #4294967295
   10332:	beq.n	1034c <__ssvfscanf_r+0x958>
   10334:	cmp	r1, #69	; 0x45
   10336:	beq.n	1034c <__ssvfscanf_r+0x958>
   10338:	mov	r2, fp
   1033a:	mov	r0, sl
   1033c:	bl	13454 <_sungetc_r>
   10340:	ldrb.w	r1, [r9, #-2]
   10344:	sub.w	r8, r7, #2
   10348:	sub.w	r4, r9, #2
   1034c:	mov	r2, fp
   1034e:	mov	r0, sl
   10350:	bl	13454 <_sungetc_r>
   10354:	mov	r7, r8
   10356:	mov	r9, r4
   10358:	ands.w	r2, r5, #16
   1035c:	bne.w	febc <__ssvfscanf_r+0x4c8>
   10360:	and.w	r3, r5, #1536	; 0x600
   10364:	cmp.w	r3, #1024	; 0x400
   10368:	strb.w	r2, [r9]
   1036c:	beq.w	1075a <__ssvfscanf_r+0xd66>
   10370:	ldr	r3, [sp, #52]	; 0x34
   10372:	cmp	r3, #0
   10374:	bne.w	1077c <__ssvfscanf_r+0xd88>
   10378:	ldr	r1, [sp, #40]	; 0x28
   1037a:	movs	r2, #0
   1037c:	mov	r0, sl
   1037e:	bl	e190 <_strtod_r>
   10382:	lsls	r3, r5, #31
   10384:	bmi.w	10612 <__ssvfscanf_r+0xc1e>
   10388:	ands.w	r5, r5, #2
   1038c:	bne.w	10612 <__ssvfscanf_r+0xc1e>
   10390:	vmov	r2, r3, d0
   10394:	vmov	r0, r1, d0
   10398:	vstr	d0, [sp, #32]
   1039c:	bl	bb5c <__aeabi_dcmpun>
   103a0:	ldr	r4, [sp, #20]
   103a2:	vldr	d0, [sp, #32]
   103a6:	adds	r6, r4, #4
   103a8:	ldr	r4, [r4, #0]
   103aa:	cmp	r0, #0
   103ac:	bne.w	10868 <__ssvfscanf_r+0xe74>
   103b0:	vmov	r0, r1, d0
   103b4:	bl	bc18 <__aeabi_d2f>
   103b8:	str	r6, [sp, #20]
   103ba:	str	r0, [r4, #0]
   103bc:	ldr	r3, [sp, #24]
   103be:	ldr	r6, [sp, #12]
   103c0:	adds	r3, #1
   103c2:	str	r3, [sp, #24]
   103c4:	mov	r4, r6
   103c6:	b.w	fa84 <__ssvfscanf_r+0x90>
   103ca:	cmp.w	r8, #2
   103ce:	bne.w	10252 <__ssvfscanf_r+0x85e>
   103d2:	mov.w	r8, #3
   103d6:	b.n	10228 <__ssvfscanf_r+0x834>
   103d8:	and.w	lr, r5, #1280	; 0x500
   103dc:	cmp.w	lr, #1024	; 0x400
   103e0:	beq.n	103ee <__ssvfscanf_r+0x9fa>
   103e2:	lsls	r2, r5, #21
   103e4:	bpl.w	10252 <__ssvfscanf_r+0x85e>
   103e8:	cmp	r6, #0
   103ea:	beq.w	102dc <__ssvfscanf_r+0x8e8>
   103ee:	lsls	r2, r5, #22
   103f0:	bmi.n	103fc <__ssvfscanf_r+0xa08>
   103f2:	ldr	r2, [sp, #44]	; 0x2c
   103f4:	str.w	r9, [sp, #60]	; 0x3c
   103f8:	subs	r2, r6, r2
   103fa:	str	r2, [sp, #52]	; 0x34
   103fc:	bic.w	r5, r5, #1920	; 0x780
   10400:	orr.w	r5, r5, #384	; 0x180
   10404:	movs	r6, #0
   10406:	b.n	10228 <__ssvfscanf_r+0x834>
   10408:	cmp	r3, #1
   1040a:	bne.w	10252 <__ssvfscanf_r+0x85e>
   1040e:	movs	r3, #2
   10410:	b.n	10228 <__ssvfscanf_r+0x834>
   10412:	ldr	r2, [sp, #48]	; 0x30
   10414:	ldrb.w	lr, [r2]
   10418:	cmp	lr, r1
   1041a:	bne.w	10252 <__ssvfscanf_r+0x85e>
   1041e:	lsls	r2, r5, #22
   10420:	bpl.w	10252 <__ssvfscanf_r+0x85e>
   10424:	bic.w	r5, r5, #640	; 0x280
   10428:	str	r6, [sp, #44]	; 0x2c
   1042a:	b.n	10228 <__ssvfscanf_r+0x834>
   1042c:	mov	r1, fp
   1042e:	mov	r0, sl
   10430:	str	r3, [sp, #32]
   10432:	bl	134d8 <__ssrefill_r>
   10436:	ldr	r3, [sp, #32]
   10438:	cmp	r0, #0
   1043a:	bne.w	10252 <__ssvfscanf_r+0x85e>
   1043e:	cmp	r4, #0
   10440:	bne.w	1016a <__ssvfscanf_r+0x776>
   10444:	b.n	10252 <__ssvfscanf_r+0x85e>
   10446:	cmp.w	r8, #3
   1044a:	beq.w	102b6 <__ssvfscanf_r+0x8c2>
   1044e:	cmp.w	r8, #5
   10452:	beq.w	102b6 <__ssvfscanf_r+0x8c2>
   10456:	b.n	10252 <__ssvfscanf_r+0x85e>
   10458:	cmp	r3, #2
   1045a:	bne.w	102aa <__ssvfscanf_r+0x8b6>
   1045e:	movs	r3, #3
   10460:	b.n	10228 <__ssvfscanf_r+0x834>
   10462:	subs	r3, r4, #1
   10464:	cmp.w	r3, #348	; 0x15c
   10468:	itte	hi
   1046a:	mvnhi.w	r0, #348	; 0x15c
   1046e:	addhi.w	r9, r4, r0
   10472:	movls	r9, r8
   10474:	add	r3, sp, #336	; 0x150
   10476:	mov	r0, r2
   10478:	mov	r2, r7
   1047a:	mov	r7, r9
   1047c:	ldr.w	r9, [sp, #16]
   10480:	str	r3, [sp, #40]	; 0x28
   10482:	it	hi
   10484:	movwhi	r4, #349	; 0x15d
   10488:	orr.w	r5, r5, #3456	; 0xd80
   1048c:	mov	r6, r3
   1048e:	mov.w	r8, #0
   10492:	sub.w	r3, r1, #43	; 0x2b
   10496:	cmp	r3, #77	; 0x4d
   10498:	bhi.n	1053e <__ssvfscanf_r+0xb4a>
   1049a:	tbb	[pc, r3]
   1049e:	.short	0x507e
   104a0:	.word	0x6f50507e
   104a4:	.word	0x69696969
   104a8:	.word	0x4a696969
   104ac:	.word	0x5050504a
   104b0:	.word	0x50505050
   104b4:	.word	0x44444444
   104b8:	.word	0x50504444
   104bc:	.word	0x50505050
   104c0:	.word	0x50505050
   104c4:	.word	0x50505050
   104c8:	.word	0x27505050
   104cc:	.word	0x50505050
   104d0:	.word	0x50505050
   104d4:	.word	0x44444444
   104d8:	.word	0x50504444
   104dc:	.word	0x50505050
   104e0:	.word	0x50505050
   104e4:	.word	0x50505050
   104e8:	.word	0x27505050
   104ec:	and.w	r3, r5, #1536	; 0x600
   104f0:	cmp.w	r3, #512	; 0x200
   104f4:	bne.n	1053e <__ssvfscanf_r+0xb4a>
   104f6:	bic.w	r5, r5, #512	; 0x200
   104fa:	orr.w	r5, r5, #1280	; 0x500
   104fe:	mov.w	r9, #16
   10502:	strb	r1, [r6, #0]
   10504:	adds	r6, #1
   10506:	ldr.w	r3, [fp, #4]
   1050a:	subs	r3, #1
   1050c:	cmp	r3, #0
   1050e:	str.w	r3, [fp, #4]
   10512:	ble.n	105fa <__ssvfscanf_r+0xc06>
   10514:	adds	r0, #1
   10516:	str.w	r0, [fp]
   1051a:	subs	r4, #1
   1051c:	beq.n	1053e <__ssvfscanf_r+0xb4a>
   1051e:	ldr.w	r0, [fp]
   10522:	ldrb	r1, [r0, #0]
   10524:	b.n	10492 <__ssvfscanf_r+0xa9e>
   10526:	cmp.w	r9, #10
   1052a:	ble.n	1053e <__ssvfscanf_r+0xb4a>
   1052c:	bic.w	r5, r5, #2944	; 0xb80
   10530:	b.n	10502 <__ssvfscanf_r+0xb0e>
   10532:	ldr	r3, [pc, #756]	; (10828 <__ssvfscanf_r+0xe34>)
   10534:	ldrsh.w	r9, [r3, r9, lsl #1]
   10538:	cmp.w	r9, #8
   1053c:	bgt.n	1052c <__ssvfscanf_r+0xb38>
   1053e:	lsls	r1, r5, #23
   10540:	mov	r7, r2
   10542:	str.w	r9, [sp, #16]
   10546:	bpl.n	10558 <__ssvfscanf_r+0xb64>
   10548:	ldr	r3, [sp, #40]	; 0x28
   1054a:	cmp	r6, r3
   1054c:	bhi.w	10738 <__ssvfscanf_r+0xd44>
   10550:	ldr	r3, [sp, #40]	; 0x28
   10552:	cmp	r6, r3
   10554:	beq.w	fa90 <__ssvfscanf_r+0x9c>
   10558:	ands.w	r4, r5, #16
   1055c:	beq.w	10684 <__ssvfscanf_r+0xc90>
   10560:	ldr	r3, [sp, #40]	; 0x28
   10562:	subs	r6, r6, r3
   10564:	add	r6, r8
   10566:	add	r7, r6
   10568:	ldr	r6, [sp, #12]
   1056a:	mov	r4, r6
   1056c:	b.w	fa84 <__ssvfscanf_r+0x90>
   10570:	ldr	r3, [pc, #692]	; (10828 <__ssvfscanf_r+0xe34>)
   10572:	bic.w	r5, r5, #2944	; 0xb80
   10576:	ldrsh.w	r9, [r3, r9, lsl #1]
   1057a:	b.n	10502 <__ssvfscanf_r+0xb0e>
   1057c:	lsls	r3, r5, #20
   1057e:	bpl.n	10502 <__ssvfscanf_r+0xb0e>
   10580:	cmp.w	r9, #0
   10584:	bne.n	1058e <__ssvfscanf_r+0xb9a>
   10586:	orr.w	r5, r5, #512	; 0x200
   1058a:	mov.w	r9, #8
   1058e:	lsls	r3, r5, #21
   10590:	bpl.w	10714 <__ssvfscanf_r+0xd20>
   10594:	bic.w	r5, r5, #1408	; 0x580
   10598:	b.n	10502 <__ssvfscanf_r+0xb0e>
   1059a:	lsls	r3, r5, #24
   1059c:	bpl.n	1053e <__ssvfscanf_r+0xb4a>
   1059e:	bic.w	r5, r5, #128	; 0x80
   105a2:	b.n	10502 <__ssvfscanf_r+0xb0e>
   105a4:	cmp	r4, #0
   105a6:	it	eq
   105a8:	moveq.w	r4, #4294967295
   105ac:	ands.w	r3, r5, #1
   105b0:	bne.w	fe70 <__ssvfscanf_r+0x47c>
   105b4:	lsls	r1, r5, #27
   105b6:	bpl.n	10620 <__ssvfscanf_r+0xc2c>
   105b8:	mov	r5, r3
   105ba:	bl	c3ac <__locale_ctype_ptr>
   105be:	ldr.w	r3, [fp]
   105c2:	ldrb	r2, [r3, #0]
   105c4:	add	r0, r2
   105c6:	adds	r3, #1
   105c8:	ldrb	r2, [r0, #1]
   105ca:	lsls	r2, r2, #28
   105cc:	bmi.w	fd4e <__ssvfscanf_r+0x35a>
   105d0:	ldr.w	r2, [fp, #4]
   105d4:	str.w	r3, [fp]
   105d8:	adds	r5, #1
   105da:	subs	r3, r2, #1
   105dc:	cmp	r4, r5
   105de:	str.w	r3, [fp, #4]
   105e2:	beq.w	fd4e <__ssvfscanf_r+0x35a>
   105e6:	cmp	r3, #0
   105e8:	bgt.n	105ba <__ssvfscanf_r+0xbc6>
   105ea:	mov	r1, fp
   105ec:	mov	r0, sl
   105ee:	bl	134d8 <__ssrefill_r>
   105f2:	cmp	r0, #0
   105f4:	beq.n	105ba <__ssvfscanf_r+0xbc6>
   105f6:	b.w	fd4e <__ssvfscanf_r+0x35a>
   105fa:	mov	r1, fp
   105fc:	mov	r0, sl
   105fe:	str	r2, [sp, #16]
   10600:	bl	134d8 <__ssrefill_r>
   10604:	ldr	r2, [sp, #16]
   10606:	cmp	r0, #0
   10608:	beq.n	1051a <__ssvfscanf_r+0xb26>
   1060a:	b.n	1053e <__ssvfscanf_r+0xb4a>
   1060c:	str.w	r8, [sp, #56]	; 0x38
   10610:	b.n	1014a <__ssvfscanf_r+0x756>
   10612:	ldr	r2, [sp, #20]
   10614:	ldr	r3, [r2, #0]
   10616:	adds	r2, #4
   10618:	str	r2, [sp, #20]
   1061a:	vstr	d0, [r3]
   1061e:	b.n	103bc <__ssvfscanf_r+0x9c8>
   10620:	ldr	r2, [sp, #20]
   10622:	ldr	r5, [r2, #0]
   10624:	adds	r6, r2, #4
   10626:	add	r4, r5
   10628:	mov	r8, r5
   1062a:	bl	c3ac <__locale_ctype_ptr>
   1062e:	ldr.w	r2, [fp]
   10632:	ldrb	r3, [r2, #0]
   10634:	add	r0, r3
   10636:	adds	r1, r2, #1
   10638:	ldrb	r3, [r0, #1]
   1063a:	lsls	r3, r3, #28
   1063c:	bmi.n	1066a <__ssvfscanf_r+0xc76>
   1063e:	ldr.w	r3, [fp, #4]
   10642:	str.w	r1, [fp]
   10646:	subs	r3, #1
   10648:	str.w	r3, [fp, #4]
   1064c:	ldrb	r3, [r2, #0]
   1064e:	strb.w	r3, [r8], #1
   10652:	cmp	r4, r8
   10654:	beq.n	1066c <__ssvfscanf_r+0xc78>
   10656:	ldr.w	r3, [fp, #4]
   1065a:	cmp	r3, #0
   1065c:	bgt.n	1062a <__ssvfscanf_r+0xc36>
   1065e:	mov	r1, fp
   10660:	mov	r0, sl
   10662:	bl	134d8 <__ssrefill_r>
   10666:	cmp	r0, #0
   10668:	beq.n	1062a <__ssvfscanf_r+0xc36>
   1066a:	mov	r4, r8
   1066c:	ldr	r2, [sp, #24]
   1066e:	str	r6, [sp, #20]
   10670:	ldr	r6, [sp, #12]
   10672:	subs	r5, r4, r5
   10674:	movs	r3, #0
   10676:	adds	r2, #1
   10678:	strb	r3, [r4, #0]
   1067a:	add	r7, r5
   1067c:	str	r2, [sp, #24]
   1067e:	mov	r4, r6
   10680:	b.w	fa84 <__ssvfscanf_r+0x90>
   10684:	mov	r2, r4
   10686:	strb	r4, [r6, #0]
   10688:	ldr	r3, [sp, #16]
   1068a:	ldr	r1, [sp, #40]	; 0x28
   1068c:	ldr	r4, [sp, #28]
   1068e:	mov	r0, sl
   10690:	blx	r4
   10692:	lsls	r2, r5, #26
   10694:	bmi.n	10724 <__ssvfscanf_r+0xd30>
   10696:	lsls	r3, r5, #29
   10698:	bpl.n	10792 <__ssvfscanf_r+0xd9e>
   1069a:	ldr	r2, [sp, #20]
   1069c:	ldr	r3, [r2, #0]
   1069e:	adds	r2, #4
   106a0:	str	r2, [sp, #20]
   106a2:	strh	r0, [r3, #0]
   106a4:	ldr	r3, [sp, #24]
   106a6:	adds	r3, #1
   106a8:	str	r3, [sp, #24]
   106aa:	b.n	10560 <__ssvfscanf_r+0xb6c>
   106ac:	bl	c388 <__locale_mb_cur_max>
   106b0:	cmp	r6, r0
   106b2:	beq.w	fc3e <__ssvfscanf_r+0x24a>
   106b6:	ldmia.w	fp, {r2, r3}
   106ba:	ldrb.w	r0, [r2], #1
   106be:	str.w	r2, [fp]
   106c2:	ldr	r2, [sp, #32]
   106c4:	str	r2, [sp, #0]
   106c6:	add	r2, sp, #336	; 0x150
   106c8:	adds	r5, r6, #1
   106ca:	subs	r3, #1
   106cc:	strb	r0, [r2, r6]
   106ce:	str.w	r3, [fp, #4]
   106d2:	mov	r1, r8
   106d4:	mov	r3, r5
   106d6:	mov	r0, sl
   106d8:	bl	12384 <_mbrtowc_r>
   106dc:	adds	r6, r0, #1
   106de:	beq.w	fc3e <__ssvfscanf_r+0x24a>
   106e2:	cmp	r0, #0
   106e4:	bne.n	107be <__ssvfscanf_r+0xdca>
   106e6:	str.w	r0, [r8]
   106ea:	bl	12348 <iswspace>
   106ee:	cmp	r0, #0
   106f0:	beq.w	10852 <__ssvfscanf_r+0xe5e>
   106f4:	cmp	r5, #0
   106f6:	beq.w	feac <__ssvfscanf_r+0x4b8>
   106fa:	add	r3, sp, #336	; 0x150
   106fc:	adds	r4, r3, r5
   106fe:	subs	r5, #1
   10700:	mov	r2, fp
   10702:	ldrb.w	r1, [r4, #-1]!
   10706:	mov	r0, sl
   10708:	bl	13454 <_sungetc_r>
   1070c:	cmp	r5, #0
   1070e:	bne.n	106fe <__ssvfscanf_r+0xd0a>
   10710:	b.w	feac <__ssvfscanf_r+0x4b8>
   10714:	bic.w	r5, r5, #896	; 0x380
   10718:	cbz	r7, 1071e <__ssvfscanf_r+0xd2a>
   1071a:	subs	r7, #1
   1071c:	adds	r4, #1
   1071e:	add.w	r8, r8, #1
   10722:	b.n	10506 <__ssvfscanf_r+0xb12>
   10724:	ldr	r2, [sp, #20]
   10726:	ldr	r3, [r2, #0]
   10728:	adds	r2, #4
   1072a:	str	r2, [sp, #20]
   1072c:	str	r0, [r3, #0]
   1072e:	b.n	106a4 <__ssvfscanf_r+0xcb0>
   10730:	bic.w	r5, r5, #1920	; 0x780
   10734:	movs	r3, #1
   10736:	b.n	10228 <__ssvfscanf_r+0x834>
   10738:	ldrb.w	r1, [r6, #-1]
   1073c:	mov	r2, fp
   1073e:	mov	r0, sl
   10740:	bl	13454 <_sungetc_r>
   10744:	subs	r6, #1
   10746:	b.n	10550 <__ssvfscanf_r+0xb5c>
   10748:	add.w	r8, sp, #68	; 0x44
   1074c:	b.w	fe92 <__ssvfscanf_r+0x49e>
   10750:	bic.w	r5, r5, #1920	; 0x780
   10754:	mov.w	r8, #1
   10758:	b.n	10228 <__ssvfscanf_r+0x834>
   1075a:	ldr	r3, [sp, #44]	; 0x2c
   1075c:	subs	r6, r6, r3
   1075e:	negs	r2, r6
   10760:	cmp	r6, #0
   10762:	beq.w	10378 <__ssvfscanf_r+0x984>
   10766:	addw	r3, sp, #675	; 0x2a3
   1076a:	cmp	r9, r3
   1076c:	it	cs
   1076e:	addwcs	r9, sp, #674	; 0x2a2
   10772:	mov	r0, r9
   10774:	ldr	r1, [pc, #180]	; (1082c <__ssvfscanf_r+0xe38>)
   10776:	bl	cf50 <sprintf>
   1077a:	b.n	10378 <__ssvfscanf_r+0x984>
   1077c:	ldr	r4, [sp, #60]	; 0x3c
   1077e:	mov	r1, r4
   10780:	movs	r3, #10
   10782:	adds	r1, #1
   10784:	mov	r0, sl
   10786:	bl	e2e8 <_strtol_r>
   1078a:	ldr	r3, [sp, #52]	; 0x34
   1078c:	mov	r9, r4
   1078e:	subs	r2, r0, r3
   10790:	b.n	10766 <__ssvfscanf_r+0xd72>
   10792:	ands.w	r2, r5, #1
   10796:	bne.n	10724 <__ssvfscanf_r+0xd30>
   10798:	lsls	r4, r5, #30
   1079a:	bpl.n	10724 <__ssvfscanf_r+0xd30>
   1079c:	ldr	r3, [sp, #28]
   1079e:	mov	r1, r3
   107a0:	ldr	r3, [pc, #140]	; (10830 <__ssvfscanf_r+0xe3c>)
   107a2:	cmp	r1, r3
   107a4:	mov	r0, sl
   107a6:	ldr	r3, [sp, #16]
   107a8:	ldr	r1, [sp, #40]	; 0x28
   107aa:	beq.n	10876 <__ssvfscanf_r+0xe82>
   107ac:	bl	12f94 <_strtoll_r>
   107b0:	ldr	r2, [sp, #20]
   107b2:	ldr	r3, [r2, #0]
   107b4:	adds	r2, #4
   107b6:	str	r2, [sp, #20]
   107b8:	strd	r0, r1, [r3]
   107bc:	b.n	106a4 <__ssvfscanf_r+0xcb0>
   107be:	adds	r0, #2
   107c0:	bne.n	10804 <__ssvfscanf_r+0xe10>
   107c2:	mov	r6, r5
   107c4:	ldr.w	r3, [fp, #4]
   107c8:	cmp	r3, #0
   107ca:	bgt.w	fe94 <__ssvfscanf_r+0x4a0>
   107ce:	mov	r1, fp
   107d0:	mov	r0, sl
   107d2:	bl	134d8 <__ssrefill_r>
   107d6:	cmp	r0, #0
   107d8:	beq.w	fe94 <__ssvfscanf_r+0x4a0>
   107dc:	cmp	r6, #0
   107de:	bne.w	fc3e <__ssvfscanf_r+0x24a>
   107e2:	b.w	feac <__ssvfscanf_r+0x4b8>
   107e6:	ldr	r3, [sp, #40]	; 0x28
   107e8:	cmp	r9, r3
   107ea:	bls.w	fa90 <__ssvfscanf_r+0x9c>
   107ee:	ldrb.w	r1, [r9, #-1]!
   107f2:	mov	r2, fp
   107f4:	mov	r0, sl
   107f6:	bl	13454 <_sungetc_r>
   107fa:	ldr	r3, [sp, #40]	; 0x28
   107fc:	cmp	r9, r3
   107fe:	bne.n	107ee <__ssvfscanf_r+0xdfa>
   10800:	b.w	fa90 <__ssvfscanf_r+0x9c>
   10804:	ldr.w	r0, [r8]
   10808:	b.n	106ea <__ssvfscanf_r+0xcf6>
   1080a:	ldr	r3, [sp, #40]	; 0x28
   1080c:	cmp	r9, r3
   1080e:	bls.w	fa90 <__ssvfscanf_r+0x9c>
   10812:	ldrb.w	r1, [r9, #-1]!
   10816:	mov	r2, fp
   10818:	mov	r0, sl
   1081a:	bl	13454 <_sungetc_r>
   1081e:	ldr	r3, [sp, #40]	; 0x28
   10820:	cmp	r9, r3
   10822:	bne.n	10812 <__ssvfscanf_r+0xe1e>
   10824:	b.w	fa90 <__ssvfscanf_r+0x9c>
   10828:	.word	0x0001400c
   1082c:	.word	0x00014030
   10830:	.word	0x00013121
   10834:	ldr	r3, [sp, #40]	; 0x28
   10836:	cmp	r9, r3
   10838:	bls.w	fa90 <__ssvfscanf_r+0x9c>
   1083c:	ldrb.w	r1, [r9, #-1]!
   10840:	mov	r2, fp
   10842:	mov	r0, sl
   10844:	bl	13454 <_sungetc_r>
   10848:	ldr	r3, [sp, #40]	; 0x28
   1084a:	cmp	r9, r3
   1084c:	bne.n	1083c <__ssvfscanf_r+0xe48>
   1084e:	b.w	fa90 <__ssvfscanf_r+0x9c>
   10852:	add	r7, r5
   10854:	subs	r4, #1
   10856:	cmp.w	r9, #0
   1085a:	bne.n	10864 <__ssvfscanf_r+0xe70>
   1085c:	add.w	r8, r8, #4
   10860:	mov	r6, r9
   10862:	b.n	107c4 <__ssvfscanf_r+0xdd0>
   10864:	mov	r6, r0
   10866:	b.n	107c4 <__ssvfscanf_r+0xdd0>
   10868:	mov	r0, r5
   1086a:	bl	12ddc <nanf>
   1086e:	str	r6, [sp, #20]
   10870:	vstr	s0, [r4]
   10874:	b.n	103bc <__ssvfscanf_r+0x9c8>
   10876:	bl	13330 <_strtoull_r>
   1087a:	b.n	107b0 <__ssvfscanf_r+0xdbc>

0001087c <_vdprintf_r>:
   1087c:	push	{r4, r5, r6, r7, lr}
   1087e:	sub.w	sp, sp, #532	; 0x214
   10882:	add	r5, sp, #16
   10884:	str	r3, [sp, #0]
   10886:	mov	r7, r1
   10888:	mov	r3, r2
   1088a:	mov.w	r4, #512	; 0x200
   1088e:	add	r2, sp, #12
   10890:	mov	r1, r5
   10892:	str	r4, [sp, #12]
   10894:	mov	r6, r0
   10896:	bl	13610 <_vasnprintf_r>
   1089a:	cbz	r0, 108c0 <_vdprintf_r+0x44>
   1089c:	mov	r4, r0
   1089e:	mov	r2, r0
   108a0:	mov	r1, r7
   108a2:	ldr	r3, [sp, #12]
   108a4:	mov	r0, r6
   108a6:	bl	108fc <_write_r>
   108aa:	cmp	r4, r5
   108ac:	str	r0, [sp, #12]
   108ae:	beq.n	108ba <_vdprintf_r+0x3e>
   108b0:	mov	r0, r6
   108b2:	mov	r1, r4
   108b4:	bl	11a10 <_free_r>
   108b8:	ldr	r0, [sp, #12]
   108ba:	add.w	sp, sp, #532	; 0x214
   108be:	pop	{r4, r5, r6, r7, pc}
   108c0:	mov.w	r0, #4294967295
   108c4:	b.n	108ba <_vdprintf_r+0x3e>
   108c6:	nop

000108c8 <vdprintf>:
   108c8:	push	{r4}
   108ca:	ldr	r4, [pc, #16]	; (108dc <vdprintf+0x14>)
   108cc:	mov	r3, r2
   108ce:	mov	r2, r1
   108d0:	mov	r1, r0
   108d2:	ldr	r0, [r4, #0]
   108d4:	ldr.w	r4, [sp], #4
   108d8:	b.w	1087c <_vdprintf_r>
   108dc:	.word	0x1fff0d78

000108e0 <__ascii_wctomb>:
   108e0:	cbz	r1, 108ec <__ascii_wctomb+0xc>
   108e2:	cmp	r2, #255	; 0xff
   108e4:	bhi.n	108f0 <__ascii_wctomb+0x10>
   108e6:	strb	r2, [r1, #0]
   108e8:	movs	r0, #1
   108ea:	bx	lr
   108ec:	mov	r0, r1
   108ee:	bx	lr
   108f0:	movs	r3, #138	; 0x8a
   108f2:	str	r3, [r0, #0]
   108f4:	mov.w	r0, #4294967295
   108f8:	bx	lr
   108fa:	nop

000108fc <_write_r>:
   108fc:	push	{r4, r5, r6, lr}
   108fe:	mov	r5, r1
   10900:	ldr	r4, [pc, #32]	; (10924 <_write_r+0x28>)
   10902:	mov	r1, r2
   10904:	mov	r6, r0
   10906:	mov	r2, r3
   10908:	mov	r0, r5
   1090a:	movs	r3, #0
   1090c:	str	r3, [r4, #0]
   1090e:	bl	ae8c <_write>
   10912:	adds	r3, r0, #1
   10914:	beq.n	10918 <_write_r+0x1c>
   10916:	pop	{r4, r5, r6, pc}
   10918:	ldr	r3, [r4, #0]
   1091a:	cmp	r3, #0
   1091c:	beq.n	10916 <_write_r+0x1a>
   1091e:	str	r3, [r6, #0]
   10920:	pop	{r4, r5, r6, pc}
   10922:	nop
   10924:	.word	0x2002053c

00010928 <__register_exitproc>:
   10928:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1092c:	ldr	r4, [pc, #148]	; (109c4 <__register_exitproc+0x9c>)
   1092e:	ldr	r5, [r4, #0]
   10930:	ldr.w	r4, [r5, #328]	; 0x148
   10934:	mov	r6, r0
   10936:	mov	r8, r1
   10938:	mov	sl, r2
   1093a:	mov	r9, r3
   1093c:	cbz	r4, 109b0 <__register_exitproc+0x88>
   1093e:	ldr	r0, [r4, #4]
   10940:	cmp	r0, #31
   10942:	bgt.n	10974 <__register_exitproc+0x4c>
   10944:	adds	r3, r0, #1
   10946:	cbz	r6, 10966 <__register_exitproc+0x3e>
   10948:	add.w	r5, r4, r0, lsl #2
   1094c:	movs	r2, #1
   1094e:	str.w	sl, [r5, #136]	; 0x88
   10952:	ldr.w	r1, [r4, #392]	; 0x188
   10956:	lsls	r2, r0
   10958:	orrs	r1, r2
   1095a:	cmp	r6, #2
   1095c:	str.w	r1, [r4, #392]	; 0x188
   10960:	str.w	r9, [r5, #264]	; 0x108
   10964:	beq.n	109a4 <__register_exitproc+0x7c>
   10966:	adds	r0, #2
   10968:	str	r3, [r4, #4]
   1096a:	str.w	r8, [r4, r0, lsl #2]
   1096e:	movs	r0, #0
   10970:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10974:	ldr	r3, [pc, #80]	; (109c8 <__register_exitproc+0xa0>)
   10976:	cbz	r3, 109ba <__register_exitproc+0x92>
   10978:	mov.w	r0, #400	; 0x190
   1097c:	bl	c3c0 <malloc>
   10980:	mov	r4, r0
   10982:	cbz	r0, 109ba <__register_exitproc+0x92>
   10984:	ldr.w	r3, [r5, #328]	; 0x148
   10988:	movs	r7, #0
   1098a:	stmia.w	r0, {r3, r7}
   1098e:	str.w	r4, [r5, #328]	; 0x148
   10992:	mov	r0, r7
   10994:	movs	r3, #1
   10996:	str.w	r7, [r4, #392]	; 0x188
   1099a:	str.w	r7, [r4, #396]	; 0x18c
   1099e:	cmp	r6, #0
   109a0:	beq.n	10966 <__register_exitproc+0x3e>
   109a2:	b.n	10948 <__register_exitproc+0x20>
   109a4:	ldr.w	r1, [r4, #396]	; 0x18c
   109a8:	orrs	r2, r1
   109aa:	str.w	r2, [r4, #396]	; 0x18c
   109ae:	b.n	10966 <__register_exitproc+0x3e>
   109b0:	add.w	r4, r5, #332	; 0x14c
   109b4:	str.w	r4, [r5, #328]	; 0x148
   109b8:	b.n	1093e <__register_exitproc+0x16>
   109ba:	mov.w	r0, #4294967295
   109be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   109c2:	nop
   109c4:	.word	0x00013f30
   109c8:	.word	0x0000c3c1

000109cc <register_fini>:
   109cc:	ldr	r3, [pc, #8]	; (109d8 <register_fini+0xc>)
   109ce:	cbz	r3, 109d6 <register_fini+0xa>
   109d0:	ldr	r0, [pc, #8]	; (109dc <register_fini+0x10>)
   109d2:	b.w	109e0 <atexit>
   109d6:	bx	lr
   109d8:	.word	0x00000000
   109dc:	.word	0x0001194d

000109e0 <atexit>:
   109e0:	movs	r3, #0
   109e2:	mov	r1, r0
   109e4:	mov	r2, r3
   109e6:	mov	r0, r3
   109e8:	b.w	10928 <__register_exitproc>

000109ec <quorem>:
   109ec:	ldr	r2, [r0, #16]
   109ee:	ldr	r3, [r1, #16]
   109f0:	cmp	r3, r2
   109f2:	bgt.w	10b10 <quorem+0x124>
   109f6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109fa:	add.w	r8, r3, #4294967295
   109fe:	add.w	r7, r1, #20
   10a02:	add.w	fp, r0, #20
   10a06:	ldr.w	r2, [r7, r8, lsl #2]
   10a0a:	ldr.w	r3, [fp, r8, lsl #2]
   10a0e:	mov.w	r4, r8, lsl #2
   10a12:	sub	sp, #12
   10a14:	adds	r2, #1
   10a16:	udiv	r9, r3, r2
   10a1a:	add.w	r3, fp, r4
   10a1e:	str	r4, [sp, #0]
   10a20:	add.w	sl, r7, r4
   10a24:	str	r3, [sp, #4]
   10a26:	cmp.w	r9, #0
   10a2a:	beq.n	10aa0 <quorem+0xb4>
   10a2c:	movs	r5, #0
   10a2e:	mov	ip, r7
   10a30:	mov	lr, fp
   10a32:	mov	r3, r5
   10a34:	ldr.w	r6, [ip], #4
   10a38:	ldr.w	r2, [lr]
   10a3c:	uxth	r4, r6
   10a3e:	mla	r5, r9, r4, r5
   10a42:	lsrs	r6, r6, #16
   10a44:	lsrs	r4, r5, #16
   10a46:	mla	r4, r9, r6, r4
   10a4a:	uxth	r5, r5
   10a4c:	subs	r3, r3, r5
   10a4e:	uxth	r6, r4
   10a50:	uxtah	r3, r3, r2
   10a54:	rsb	r6, r6, r2, lsr #16
   10a58:	add.w	r6, r6, r3, asr #16
   10a5c:	uxth	r3, r3
   10a5e:	orr.w	r3, r3, r6, lsl #16
   10a62:	cmp	sl, ip
   10a64:	str.w	r3, [lr], #4
   10a68:	mov.w	r5, r4, lsr #16
   10a6c:	mov.w	r3, r6, asr #16
   10a70:	bcs.n	10a34 <quorem+0x48>
   10a72:	ldr	r3, [sp, #0]
   10a74:	ldr.w	r3, [fp, r3]
   10a78:	cbnz	r3, 10aa0 <quorem+0xb4>
   10a7a:	ldr	r4, [sp, #4]
   10a7c:	subs	r3, r4, #4
   10a7e:	cmp	fp, r3
   10a80:	bcs.n	10a9c <quorem+0xb0>
   10a82:	ldr.w	r3, [r4, #-4]
   10a86:	cbnz	r3, 10a9c <quorem+0xb0>
   10a88:	sub.w	r3, r4, #8
   10a8c:	b.n	10a94 <quorem+0xa8>
   10a8e:	ldr	r2, [r3, #0]
   10a90:	subs	r3, #4
   10a92:	cbnz	r2, 10a9c <quorem+0xb0>
   10a94:	cmp	fp, r3
   10a96:	add.w	r8, r8, #4294967295
   10a9a:	bcc.n	10a8e <quorem+0xa2>
   10a9c:	str.w	r8, [r0, #16]
   10aa0:	mov	r4, r0
   10aa2:	bl	12928 <__mcmp>
   10aa6:	cmp	r0, #0
   10aa8:	blt.n	10b08 <quorem+0x11c>
   10aaa:	add.w	r9, r9, #1
   10aae:	mov	r5, fp
   10ab0:	movs	r3, #0
   10ab2:	ldr.w	r1, [r7], #4
   10ab6:	ldr	r0, [r5, #0]
   10ab8:	uxth	r2, r1
   10aba:	subs	r2, r3, r2
   10abc:	lsrs	r1, r1, #16
   10abe:	uxtah	r2, r2, r0
   10ac2:	rsb	r3, r1, r0, lsr #16
   10ac6:	add.w	r3, r3, r2, asr #16
   10aca:	uxth	r1, r2
   10acc:	orr.w	r1, r1, r3, lsl #16
   10ad0:	cmp	sl, r7
   10ad2:	str.w	r1, [r5], #4
   10ad6:	mov.w	r3, r3, asr #16
   10ada:	bcs.n	10ab2 <quorem+0xc6>
   10adc:	ldr.w	r2, [fp, r8, lsl #2]
   10ae0:	add.w	r3, fp, r8, lsl #2
   10ae4:	cbnz	r2, 10b08 <quorem+0x11c>
   10ae6:	subs	r2, r3, #4
   10ae8:	cmp	fp, r2
   10aea:	bcs.n	10b04 <quorem+0x118>
   10aec:	ldr.w	r2, [r3, #-4]
   10af0:	cbnz	r2, 10b04 <quorem+0x118>
   10af2:	subs	r3, #8
   10af4:	b.n	10afc <quorem+0x110>
   10af6:	ldr	r2, [r3, #0]
   10af8:	subs	r3, #4
   10afa:	cbnz	r2, 10b04 <quorem+0x118>
   10afc:	cmp	fp, r3
   10afe:	add.w	r8, r8, #4294967295
   10b02:	bcc.n	10af6 <quorem+0x10a>
   10b04:	str.w	r8, [r4, #16]
   10b08:	mov	r0, r9
   10b0a:	add	sp, #12
   10b0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b10:	movs	r0, #0
   10b12:	bx	lr
   10b14:			; <UNDEFINED> instruction: 0xffffffff

00010b18 <_dtoa_r>:
   10b18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b1c:	vmov	r6, r7, d0
   10b20:	sub	sp, #108	; 0x6c
   10b22:	ldr	r4, [r0, #64]	; 0x40
   10b24:	ldr	r5, [sp, #144]	; 0x90
   10b26:	str	r1, [sp, #0]
   10b28:	mov	r9, r0
   10b2a:	str	r2, [sp, #20]
   10b2c:	str	r3, [sp, #12]
   10b2e:	vmov	sl, s0
   10b32:	mov	fp, r7
   10b34:	cbz	r4, 10b4c <_dtoa_r+0x34>
   10b36:	ldr	r2, [r0, #68]	; 0x44
   10b38:	str	r2, [r4, #4]
   10b3a:	movs	r3, #1
   10b3c:	lsls	r3, r2
   10b3e:	str	r3, [r4, #8]
   10b40:	mov	r1, r4
   10b42:	bl	124cc <_Bfree>
   10b46:	movs	r3, #0
   10b48:	str.w	r3, [r9, #64]	; 0x40
   10b4c:	cmp.w	fp, #0
   10b50:	mov	r4, fp
   10b52:	blt.n	10bbe <_dtoa_r+0xa6>
   10b54:	movs	r3, #0
   10b56:	str	r3, [r5, #0]
   10b58:	ldr	r3, [pc, #644]	; (10de0 <_dtoa_r+0x2c8>)
   10b5a:	mov	r2, r3
   10b5c:	ands	r3, r4
   10b5e:	cmp	r3, r2
   10b60:	beq.n	10b90 <_dtoa_r+0x78>
   10b62:	movs	r2, #0
   10b64:	movs	r3, #0
   10b66:	mov	r0, sl
   10b68:	mov	r1, fp
   10b6a:	bl	baf8 <__aeabi_dcmpeq>
   10b6e:	mov	r6, sl
   10b70:	mov	r7, fp
   10b72:	mov	r8, r0
   10b74:	cbz	r0, 10bca <_dtoa_r+0xb2>
   10b76:	ldr	r2, [sp, #12]
   10b78:	movs	r3, #1
   10b7a:	str	r3, [r2, #0]
   10b7c:	ldr	r3, [sp, #148]	; 0x94
   10b7e:	cmp	r3, #0
   10b80:	beq.w	10d00 <_dtoa_r+0x1e8>
   10b84:	ldr	r0, [pc, #604]	; (10de4 <_dtoa_r+0x2cc>)
   10b86:	str	r0, [r3, #0]
   10b88:	subs	r0, #1
   10b8a:	add	sp, #108	; 0x6c
   10b8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b90:	ldr	r2, [sp, #12]
   10b92:	movw	r3, #9999	; 0x270f
   10b96:	str	r3, [r2, #0]
   10b98:	cmp.w	sl, #0
   10b9c:	beq.w	10cd4 <_dtoa_r+0x1bc>
   10ba0:	ldr	r0, [pc, #580]	; (10de8 <_dtoa_r+0x2d0>)
   10ba2:	ldr	r3, [sp, #148]	; 0x94
   10ba4:	cmp	r3, #0
   10ba6:	beq.n	10b8a <_dtoa_r+0x72>
   10ba8:	ldrb	r3, [r0, #3]
   10baa:	cmp	r3, #0
   10bac:	beq.w	10d04 <_dtoa_r+0x1ec>
   10bb0:	add.w	r3, r0, #8
   10bb4:	ldr	r2, [sp, #148]	; 0x94
   10bb6:	str	r3, [r2, #0]
   10bb8:	add	sp, #108	; 0x6c
   10bba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bbe:	movs	r3, #1
   10bc0:	bic.w	r4, fp, #2147483648	; 0x80000000
   10bc4:	str	r3, [r5, #0]
   10bc6:	mov	fp, r4
   10bc8:	b.n	10b58 <_dtoa_r+0x40>
   10bca:	add	r2, sp, #96	; 0x60
   10bcc:	add	r1, sp, #100	; 0x64
   10bce:	vmov	d0, r6, r7
   10bd2:	mov	r0, r9
   10bd4:	bl	12ba4 <__d2b>
   10bd8:	lsrs	r5, r4, #20
   10bda:	str	r0, [sp, #40]	; 0x28
   10bdc:	bne.w	10ce6 <_dtoa_r+0x1ce>
   10be0:	ldr	r5, [sp, #96]	; 0x60
   10be2:	ldr	r6, [sp, #100]	; 0x64
   10be4:	add	r6, r5
   10be6:	addw	r3, r6, #1074	; 0x432
   10bea:	cmp	r3, #32
   10bec:	ble.w	11100 <_dtoa_r+0x5e8>
   10bf0:	rsb	r3, r3, #64	; 0x40
   10bf4:	addw	r0, r6, #1042	; 0x412
   10bf8:	lsls	r4, r3
   10bfa:	lsr.w	r0, sl, r0
   10bfe:	orrs	r0, r4
   10c00:	bl	b53c <__aeabi_ui2d>
   10c04:	movs	r3, #1
   10c06:	subs	r4, r6, #1
   10c08:	sub.w	r1, r1, #32505856	; 0x1f00000
   10c0c:	str	r3, [sp, #60]	; 0x3c
   10c0e:	movs	r2, #0
   10c10:	ldr	r3, [pc, #472]	; (10dec <_dtoa_r+0x2d4>)
   10c12:	bl	b2c0 <__aeabi_dsub>
   10c16:	add	r3, pc, #432	; (adr r3, 10dc8 <_dtoa_r+0x2b0>)
   10c18:	ldrd	r2, r3, [r3]
   10c1c:	bl	b628 <__aeabi_dmul>
   10c20:	add	r3, pc, #428	; (adr r3, 10dd0 <_dtoa_r+0x2b8>)
   10c22:	ldrd	r2, r3, [r3]
   10c26:	bl	b2c4 <__adddf3>
   10c2a:	mov	r6, r0
   10c2c:	mov	r0, r4
   10c2e:	mov	r7, r1
   10c30:	bl	b55c <__aeabi_i2d>
   10c34:	add	r3, pc, #416	; (adr r3, 10dd8 <_dtoa_r+0x2c0>)
   10c36:	ldrd	r2, r3, [r3]
   10c3a:	bl	b628 <__aeabi_dmul>
   10c3e:	mov	r2, r0
   10c40:	mov	r3, r1
   10c42:	mov	r0, r6
   10c44:	mov	r1, r7
   10c46:	bl	b2c4 <__adddf3>
   10c4a:	mov	r6, r0
   10c4c:	mov	r7, r1
   10c4e:	bl	bb88 <__aeabi_d2iz>
   10c52:	movs	r2, #0
   10c54:	str	r0, [sp, #16]
   10c56:	movs	r3, #0
   10c58:	mov	r0, r6
   10c5a:	mov	r1, r7
   10c5c:	bl	bb0c <__aeabi_dcmplt>
   10c60:	cmp	r0, #0
   10c62:	bne.w	110b6 <_dtoa_r+0x59e>
   10c66:	ldr	r6, [sp, #16]
   10c68:	cmp	r6, #22
   10c6a:	bhi.w	110b0 <_dtoa_r+0x598>
   10c6e:	ldr	r3, [pc, #384]	; (10df0 <_dtoa_r+0x2d8>)
   10c70:	add.w	r3, r3, r6, lsl #3
   10c74:	ldrd	r0, r1, [r3]
   10c78:	mov	r2, sl
   10c7a:	mov	r3, fp
   10c7c:	bl	bb48 <__aeabi_dcmpgt>
   10c80:	cmp	r0, #0
   10c82:	beq.w	1110a <_dtoa_r+0x5f2>
   10c86:	subs	r3, r6, #1
   10c88:	str	r3, [sp, #16]
   10c8a:	movs	r3, #0
   10c8c:	str	r3, [sp, #52]	; 0x34
   10c8e:	subs	r5, r5, r4
   10c90:	subs.w	r8, r5, #1
   10c94:	bmi.w	110ec <_dtoa_r+0x5d4>
   10c98:	movs	r3, #0
   10c9a:	str	r3, [sp, #28]
   10c9c:	ldr	r3, [sp, #16]
   10c9e:	cmp	r3, #0
   10ca0:	blt.w	110da <_dtoa_r+0x5c2>
   10ca4:	add	r8, r3
   10ca6:	str	r3, [sp, #48]	; 0x30
   10ca8:	movs	r3, #0
   10caa:	str	r3, [sp, #24]
   10cac:	ldr	r3, [sp, #0]
   10cae:	cmp	r3, #9
   10cb0:	bhi.n	10d08 <_dtoa_r+0x1f0>
   10cb2:	cmp	r3, #5
   10cb4:	ble.w	11940 <_dtoa_r+0xe28>
   10cb8:	subs	r3, #4
   10cba:	str	r3, [sp, #0]
   10cbc:	movs	r6, #0
   10cbe:	ldr	r3, [sp, #0]
   10cc0:	subs	r3, #2
   10cc2:	cmp	r3, #3
   10cc4:	bhi.w	1190e <_dtoa_r+0xdf6>
   10cc8:	tbh	[pc, r3, lsl #1]
   10ccc:	.word	0x0224032b
   10cd0:	.word	0x04500336
   10cd4:	ldr	r3, [pc, #272]	; (10de8 <_dtoa_r+0x2d0>)
   10cd6:	ldr	r2, [pc, #284]	; (10df4 <_dtoa_r+0x2dc>)
   10cd8:	ubfx	r0, r4, #0, #20
   10cdc:	cmp	r0, #0
   10cde:	ite	ne
   10ce0:	movne	r0, r3
   10ce2:	moveq	r0, r2
   10ce4:	b.n	10ba2 <_dtoa_r+0x8a>
   10ce6:	ubfx	r3, fp, #0, #20
   10cea:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   10cee:	subw	r4, r5, #1023	; 0x3ff
   10cf2:	mov	r0, sl
   10cf4:	str.w	r8, [sp, #60]	; 0x3c
   10cf8:	orr.w	r1, r1, #3145728	; 0x300000
   10cfc:	ldr	r5, [sp, #96]	; 0x60
   10cfe:	b.n	10c0e <_dtoa_r+0xf6>
   10d00:	ldr	r0, [pc, #244]	; (10df8 <_dtoa_r+0x2e0>)
   10d02:	b.n	10b8a <_dtoa_r+0x72>
   10d04:	adds	r3, r0, #3
   10d06:	b.n	10bb4 <_dtoa_r+0x9c>
   10d08:	movs	r1, #0
   10d0a:	str.w	r1, [r9, #68]	; 0x44
   10d0e:	mov	r0, r9
   10d10:	mov	r4, r1
   10d12:	str	r1, [sp, #0]
   10d14:	bl	12480 <_Balloc>
   10d18:	mov.w	r3, #4294967295
   10d1c:	str	r3, [sp, #32]
   10d1e:	str	r3, [sp, #56]	; 0x38
   10d20:	movs	r3, #1
   10d22:	str	r0, [sp, #36]	; 0x24
   10d24:	str.w	r0, [r9, #64]	; 0x40
   10d28:	str	r4, [sp, #20]
   10d2a:	str	r3, [sp, #44]	; 0x2c
   10d2c:	ldr	r3, [sp, #100]	; 0x64
   10d2e:	cmp	r3, #0
   10d30:	blt.w	10ed4 <_dtoa_r+0x3bc>
   10d34:	ldr	r2, [sp, #16]
   10d36:	cmp	r2, #14
   10d38:	bgt.w	10ed4 <_dtoa_r+0x3bc>
   10d3c:	ldr	r3, [pc, #176]	; (10df0 <_dtoa_r+0x2d8>)
   10d3e:	add.w	r3, r3, r2, lsl #3
   10d42:	vldr	d7, [r3]
   10d46:	ldr	r3, [sp, #20]
   10d48:	cmp	r3, #0
   10d4a:	vstr	d7, [sp]
   10d4e:	blt.w	1134e <_dtoa_r+0x836>
   10d52:	mov	r6, sl
   10d54:	mov	r7, fp
   10d56:	ldrd	sl, fp, [sp]
   10d5a:	mov	r0, r6
   10d5c:	mov	r2, sl
   10d5e:	mov	r3, fp
   10d60:	mov	r1, r7
   10d62:	bl	b87c <__aeabi_ddiv>
   10d66:	bl	bb88 <__aeabi_d2iz>
   10d6a:	mov	r4, r0
   10d6c:	bl	b55c <__aeabi_i2d>
   10d70:	mov	r2, sl
   10d72:	mov	r3, fp
   10d74:	bl	b628 <__aeabi_dmul>
   10d78:	mov	r3, r1
   10d7a:	mov	r2, r0
   10d7c:	mov	r1, r7
   10d7e:	mov	r0, r6
   10d80:	bl	b2c0 <__aeabi_dsub>
   10d84:	ldr	r5, [sp, #36]	; 0x24
   10d86:	add.w	r3, r4, #48	; 0x30
   10d8a:	strb	r3, [r5, #0]
   10d8c:	ldr	r3, [sp, #32]
   10d8e:	cmp	r3, #1
   10d90:	mov	r6, r0
   10d92:	mov	r7, r1
   10d94:	add.w	r5, r5, #1
   10d98:	beq.n	10e5e <_dtoa_r+0x346>
   10d9a:	movs	r2, #0
   10d9c:	ldr	r3, [pc, #92]	; (10dfc <_dtoa_r+0x2e4>)
   10d9e:	bl	b628 <__aeabi_dmul>
   10da2:	movs	r2, #0
   10da4:	movs	r3, #0
   10da6:	mov	r6, r0
   10da8:	mov	r7, r1
   10daa:	bl	baf8 <__aeabi_dcmpeq>
   10dae:	cmp	r0, #0
   10db0:	bne.n	10eae <_dtoa_r+0x396>
   10db2:	str.w	r9, [sp, #20]
   10db6:	ldr.w	sl, [sp, #32]
   10dba:	ldr.w	fp, [sp, #36]	; 0x24
   10dbe:	ldrd	r8, r9, [sp]
   10dc2:	b.n	10e16 <_dtoa_r+0x2fe>
   10dc4:	nop.w
   10dc8:	.word	0x636f4361
   10dcc:	.word	0x3fd287a7
   10dd0:	.word	0x8b60c8b3
   10dd4:	.word	0x3fc68a28
   10dd8:	.word	0x509f79fb
   10ddc:	.word	0x3fd34413
   10de0:	.word	0x7ff00000
   10de4:	.word	0x00013ff9
   10de8:	.word	0x00014148
   10dec:	.word	0x3ff80000
   10df0:	.word	0x00014250
   10df4:	.word	0x0001413c
   10df8:	.word	0x00013ff8
   10dfc:	.word	0x40240000
   10e00:	bl	b628 <__aeabi_dmul>
   10e04:	movs	r2, #0
   10e06:	movs	r3, #0
   10e08:	mov	r6, r0
   10e0a:	mov	r7, r1
   10e0c:	bl	baf8 <__aeabi_dcmpeq>
   10e10:	cmp	r0, #0
   10e12:	bne.w	11572 <_dtoa_r+0xa5a>
   10e16:	mov	r2, r8
   10e18:	mov	r3, r9
   10e1a:	mov	r0, r6
   10e1c:	mov	r1, r7
   10e1e:	bl	b87c <__aeabi_ddiv>
   10e22:	bl	bb88 <__aeabi_d2iz>
   10e26:	mov	r4, r0
   10e28:	bl	b55c <__aeabi_i2d>
   10e2c:	mov	r2, r8
   10e2e:	mov	r3, r9
   10e30:	bl	b628 <__aeabi_dmul>
   10e34:	mov	r2, r0
   10e36:	mov	r3, r1
   10e38:	mov	r0, r6
   10e3a:	mov	r1, r7
   10e3c:	bl	b2c0 <__aeabi_dsub>
   10e40:	add.w	lr, r4, #48	; 0x30
   10e44:	strb.w	lr, [r5], #1
   10e48:	rsb	lr, fp, r5
   10e4c:	cmp	lr, sl
   10e4e:	mov	r6, r0
   10e50:	mov	r7, r1
   10e52:	mov.w	r2, #0
   10e56:	ldr	r3, [pc, #696]	; (11110 <_dtoa_r+0x5f8>)
   10e58:	bne.n	10e00 <_dtoa_r+0x2e8>
   10e5a:	ldr.w	r9, [sp, #20]
   10e5e:	mov	r2, r6
   10e60:	mov	r3, r7
   10e62:	mov	r0, r6
   10e64:	mov	r1, r7
   10e66:	bl	b2c4 <__adddf3>
   10e6a:	mov	r6, r0
   10e6c:	mov	r7, r1
   10e6e:	mov	r2, r0
   10e70:	mov	r3, r1
   10e72:	ldrd	r0, r1, [sp]
   10e76:	bl	bb0c <__aeabi_dcmplt>
   10e7a:	cbnz	r0, 10e8e <_dtoa_r+0x376>
   10e7c:	mov	r2, r6
   10e7e:	mov	r3, r7
   10e80:	ldrd	r0, r1, [sp]
   10e84:	bl	baf8 <__aeabi_dcmpeq>
   10e88:	cbz	r0, 10eae <_dtoa_r+0x396>
   10e8a:	lsls	r3, r4, #31
   10e8c:	bpl.n	10eae <_dtoa_r+0x396>
   10e8e:	ldrb.w	r4, [r5, #-1]
   10e92:	ldr	r2, [sp, #36]	; 0x24
   10e94:	subs	r3, r5, #1
   10e96:	b.n	10ea2 <_dtoa_r+0x38a>
   10e98:	cmp	r2, r3
   10e9a:	beq.w	11696 <_dtoa_r+0xb7e>
   10e9e:	ldrb.w	r4, [r3, #-1]!
   10ea2:	cmp	r4, #57	; 0x39
   10ea4:	add.w	r5, r3, #1
   10ea8:	beq.n	10e98 <_dtoa_r+0x380>
   10eaa:	adds	r4, #1
   10eac:	strb	r4, [r3, #0]
   10eae:	ldr	r1, [sp, #40]	; 0x28
   10eb0:	mov	r0, r9
   10eb2:	bl	124cc <_Bfree>
   10eb6:	movs	r2, #0
   10eb8:	ldr	r3, [sp, #16]
   10eba:	strb	r2, [r5, #0]
   10ebc:	ldr	r2, [sp, #12]
   10ebe:	adds	r3, #1
   10ec0:	str	r3, [r2, #0]
   10ec2:	ldr	r3, [sp, #148]	; 0x94
   10ec4:	cmp	r3, #0
   10ec6:	beq.w	11600 <_dtoa_r+0xae8>
   10eca:	ldr	r0, [sp, #36]	; 0x24
   10ecc:	str	r5, [r3, #0]
   10ece:	add	sp, #108	; 0x6c
   10ed0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ed4:	ldr	r2, [sp, #44]	; 0x2c
   10ed6:	cmp	r2, #0
   10ed8:	beq.w	110f8 <_dtoa_r+0x5e0>
   10edc:	ldr	r2, [sp, #0]
   10ede:	cmp	r2, #1
   10ee0:	ble.w	11392 <_dtoa_r+0x87a>
   10ee4:	ldr	r3, [sp, #32]
   10ee6:	ldr	r2, [sp, #24]
   10ee8:	subs	r7, r3, #1
   10eea:	cmp	r2, r7
   10eec:	blt.w	11606 <_dtoa_r+0xaee>
   10ef0:	subs	r7, r2, r7
   10ef2:	ldr	r3, [sp, #32]
   10ef4:	cmp	r3, #0
   10ef6:	blt.w	117fa <_dtoa_r+0xce2>
   10efa:	ldr	r5, [sp, #28]
   10efc:	ldr	r3, [sp, #32]
   10efe:	ldr	r2, [sp, #28]
   10f00:	movs	r1, #1
   10f02:	add	r2, r3
   10f04:	mov	r0, r9
   10f06:	str	r2, [sp, #28]
   10f08:	add	r8, r3
   10f0a:	bl	12694 <__i2b>
   10f0e:	mov	r6, r0
   10f10:	cbz	r5, 10f2c <_dtoa_r+0x414>
   10f12:	cmp.w	r8, #0
   10f16:	ble.n	10f2c <_dtoa_r+0x414>
   10f18:	cmp	r5, r8
   10f1a:	ldr	r2, [sp, #28]
   10f1c:	mov	r3, r5
   10f1e:	it	ge
   10f20:	movge	r3, r8
   10f22:	subs	r2, r2, r3
   10f24:	str	r2, [sp, #28]
   10f26:	subs	r5, r5, r3
   10f28:	rsb	r8, r3, r8
   10f2c:	ldr	r3, [sp, #24]
   10f2e:	cmp	r3, #0
   10f30:	ble.w	1151e <_dtoa_r+0xa06>
   10f34:	ldr	r2, [sp, #44]	; 0x2c
   10f36:	cmp	r2, #0
   10f38:	beq.w	11340 <_dtoa_r+0x828>
   10f3c:	cmp	r7, #0
   10f3e:	beq.w	11340 <_dtoa_r+0x828>
   10f42:	mov	r1, r6
   10f44:	mov	r2, r7
   10f46:	mov	r0, r9
   10f48:	bl	127d8 <__pow5mult>
   10f4c:	ldr	r2, [sp, #40]	; 0x28
   10f4e:	mov	r1, r0
   10f50:	mov	r6, r0
   10f52:	mov	r0, r9
   10f54:	bl	126a8 <__multiply>
   10f58:	ldr	r1, [sp, #40]	; 0x28
   10f5a:	mov	r4, r0
   10f5c:	mov	r0, r9
   10f5e:	bl	124cc <_Bfree>
   10f62:	ldr	r3, [sp, #24]
   10f64:	subs	r3, r3, r7
   10f66:	str	r3, [sp, #24]
   10f68:	bne.w	1133e <_dtoa_r+0x826>
   10f6c:	movs	r1, #1
   10f6e:	mov	r0, r9
   10f70:	bl	12694 <__i2b>
   10f74:	ldr	r3, [sp, #48]	; 0x30
   10f76:	str	r0, [sp, #24]
   10f78:	cmp	r3, #0
   10f7a:	beq.w	113a8 <_dtoa_r+0x890>
   10f7e:	mov	r1, r0
   10f80:	mov	r2, r3
   10f82:	mov	r0, r9
   10f84:	bl	127d8 <__pow5mult>
   10f88:	ldr	r3, [sp, #0]
   10f8a:	str	r0, [sp, #24]
   10f8c:	cmp	r3, #1
   10f8e:	ble.w	11578 <_dtoa_r+0xa60>
   10f92:	movs	r7, #0
   10f94:	ldr	r2, [sp, #24]
   10f96:	ldr	r3, [r2, #16]
   10f98:	add.w	r3, r2, r3, lsl #2
   10f9c:	ldr	r0, [r3, #16]
   10f9e:	bl	125f8 <__hi0bits>
   10fa2:	rsb	r0, r0, #32
   10fa6:	add	r0, r8
   10fa8:	ands.w	r0, r0, #31
   10fac:	beq.w	113a4 <_dtoa_r+0x88c>
   10fb0:	rsb	r3, r0, #32
   10fb4:	cmp	r3, #4
   10fb6:	ble.w	11934 <_dtoa_r+0xe1c>
   10fba:	rsb	r0, r0, #28
   10fbe:	ldr	r3, [sp, #28]
   10fc0:	add	r3, r0
   10fc2:	str	r3, [sp, #28]
   10fc4:	add	r5, r0
   10fc6:	add	r8, r0
   10fc8:	ldr	r3, [sp, #28]
   10fca:	cmp	r3, #0
   10fcc:	ble.n	10fda <_dtoa_r+0x4c2>
   10fce:	mov	r1, r4
   10fd0:	mov	r2, r3
   10fd2:	mov	r0, r9
   10fd4:	bl	12878 <__lshift>
   10fd8:	mov	r4, r0
   10fda:	cmp.w	r8, #0
   10fde:	ble.n	10fec <_dtoa_r+0x4d4>
   10fe0:	mov	r2, r8
   10fe2:	ldr	r1, [sp, #24]
   10fe4:	mov	r0, r9
   10fe6:	bl	12878 <__lshift>
   10fea:	str	r0, [sp, #24]
   10fec:	ldr	r3, [sp, #52]	; 0x34
   10fee:	cmp	r3, #0
   10ff0:	bne.w	114e8 <_dtoa_r+0x9d0>
   10ff4:	ldr	r3, [sp, #32]
   10ff6:	cmp	r3, #0
   10ff8:	ble.w	11522 <_dtoa_r+0xa0a>
   10ffc:	ldr	r3, [sp, #44]	; 0x2c
   10ffe:	cmp	r3, #0
   11000:	bne.w	113ec <_dtoa_r+0x8d4>
   11004:	ldr.w	fp, [sp, #36]	; 0x24
   11008:	ldr	r7, [sp, #32]
   1100a:	ldr.w	r8, [sp, #24]
   1100e:	mov	r5, fp
   11010:	b.n	11018 <_dtoa_r+0x500>
   11012:	bl	124e0 <__multadd>
   11016:	mov	r4, r0
   11018:	mov	r1, r8
   1101a:	mov	r0, r4
   1101c:	bl	109ec <quorem>
   11020:	add.w	sl, r0, #48	; 0x30
   11024:	strb.w	sl, [r5], #1
   11028:	rsb	r3, fp, r5
   1102c:	cmp	r3, r7
   1102e:	mov.w	r2, #10
   11032:	mov.w	r3, #0
   11036:	mov	r1, r4
   11038:	mov	r0, r9
   1103a:	blt.n	11012 <_dtoa_r+0x4fa>
   1103c:	ldr	r3, [sp, #36]	; 0x24
   1103e:	ldr	r2, [sp, #32]
   11040:	cmp	r2, #1
   11042:	ite	ge
   11044:	addge	r3, r3, r2
   11046:	addlt	r3, #1
   11048:	mov	r5, r3
   1104a:	mov.w	fp, #0
   1104e:	mov	r1, r4
   11050:	movs	r2, #1
   11052:	mov	r0, r9
   11054:	bl	12878 <__lshift>
   11058:	ldr	r1, [sp, #24]
   1105a:	str	r0, [sp, #40]	; 0x28
   1105c:	bl	12928 <__mcmp>
   11060:	cmp	r0, #0
   11062:	ble.w	11670 <_dtoa_r+0xb58>
   11066:	ldrb.w	r2, [r5, #-1]
   1106a:	ldr	r1, [sp, #36]	; 0x24
   1106c:	subs	r3, r5, #1
   1106e:	b.n	1107a <_dtoa_r+0x562>
   11070:	cmp	r3, r1
   11072:	beq.w	1155e <_dtoa_r+0xa46>
   11076:	ldrb.w	r2, [r3, #-1]!
   1107a:	cmp	r2, #57	; 0x39
   1107c:	add.w	r5, r3, #1
   11080:	beq.n	11070 <_dtoa_r+0x558>
   11082:	adds	r2, #1
   11084:	strb	r2, [r3, #0]
   11086:	ldr	r1, [sp, #24]
   11088:	mov	r0, r9
   1108a:	bl	124cc <_Bfree>
   1108e:	cmp	r6, #0
   11090:	beq.w	10eae <_dtoa_r+0x396>
   11094:	cmp.w	fp, #0
   11098:	beq.n	110a6 <_dtoa_r+0x58e>
   1109a:	cmp	fp, r6
   1109c:	beq.n	110a6 <_dtoa_r+0x58e>
   1109e:	mov	r1, fp
   110a0:	mov	r0, r9
   110a2:	bl	124cc <_Bfree>
   110a6:	mov	r1, r6
   110a8:	mov	r0, r9
   110aa:	bl	124cc <_Bfree>
   110ae:	b.n	10eae <_dtoa_r+0x396>
   110b0:	movs	r3, #1
   110b2:	str	r3, [sp, #52]	; 0x34
   110b4:	b.n	10c8e <_dtoa_r+0x176>
   110b6:	ldr.w	r8, [sp, #16]
   110ba:	mov	r0, r8
   110bc:	bl	b55c <__aeabi_i2d>
   110c0:	mov	r2, r0
   110c2:	mov	r3, r1
   110c4:	mov	r0, r6
   110c6:	mov	r1, r7
   110c8:	bl	baf8 <__aeabi_dcmpeq>
   110cc:	cmp	r0, #0
   110ce:	bne.w	10c66 <_dtoa_r+0x14e>
   110d2:	add.w	r3, r8, #4294967295
   110d6:	str	r3, [sp, #16]
   110d8:	b.n	10c66 <_dtoa_r+0x14e>
   110da:	ldr	r2, [sp, #28]
   110dc:	ldr	r3, [sp, #16]
   110de:	subs	r2, r2, r3
   110e0:	negs	r3, r3
   110e2:	str	r3, [sp, #24]
   110e4:	movs	r3, #0
   110e6:	str	r2, [sp, #28]
   110e8:	str	r3, [sp, #48]	; 0x30
   110ea:	b.n	10cac <_dtoa_r+0x194>
   110ec:	rsb	r3, r8, #0
   110f0:	str	r3, [sp, #28]
   110f2:	mov.w	r8, #0
   110f6:	b.n	10c9c <_dtoa_r+0x184>
   110f8:	ldr	r7, [sp, #24]
   110fa:	ldr	r5, [sp, #28]
   110fc:	ldr	r6, [sp, #44]	; 0x2c
   110fe:	b.n	10f10 <_dtoa_r+0x3f8>
   11100:	rsb	r4, r3, #32
   11104:	lsl.w	r0, sl, r4
   11108:	b.n	10c00 <_dtoa_r+0xe8>
   1110a:	str	r0, [sp, #52]	; 0x34
   1110c:	b.n	10c8e <_dtoa_r+0x176>
   1110e:	nop
   11110:	.word	0x40240000
   11114:	movs	r3, #0
   11116:	str	r3, [sp, #44]	; 0x2c
   11118:	ldr	r3, [sp, #16]
   1111a:	ldr	r2, [sp, #20]
   1111c:	add	r3, r2
   1111e:	str	r3, [sp, #56]	; 0x38
   11120:	adds	r3, #1
   11122:	cmp	r3, #0
   11124:	str	r3, [sp, #32]
   11126:	ble.w	11624 <_dtoa_r+0xb0c>
   1112a:	ldr	r4, [sp, #32]
   1112c:	mov	r5, r4
   1112e:	movs	r1, #0
   11130:	cmp	r5, #23
   11132:	str.w	r1, [r9, #68]	; 0x44
   11136:	bls.n	11150 <_dtoa_r+0x638>
   11138:	movs	r2, #1
   1113a:	movs	r3, #4
   1113c:	lsls	r3, r3, #1
   1113e:	add.w	r0, r3, #20
   11142:	cmp	r0, r5
   11144:	mov	r1, r2
   11146:	add.w	r2, r2, #1
   1114a:	bls.n	1113c <_dtoa_r+0x624>
   1114c:	str.w	r1, [r9, #68]	; 0x44
   11150:	mov	r0, r9
   11152:	bl	12480 <_Balloc>
   11156:	cmp	r4, #14
   11158:	str	r0, [sp, #36]	; 0x24
   1115a:	str.w	r0, [r9, #64]	; 0x40
   1115e:	bhi.w	10d2c <_dtoa_r+0x214>
   11162:	cmp	r6, #0
   11164:	beq.w	10d2c <_dtoa_r+0x214>
   11168:	ldr	r1, [sp, #16]
   1116a:	cmp	r1, #0
   1116c:	strd	sl, fp, [sp, #64]	; 0x40
   11170:	ble.w	116a8 <_dtoa_r+0xb90>
   11174:	ldr	r3, [pc, #576]	; (113b8 <_dtoa_r+0x8a0>)
   11176:	and.w	r2, r1, #15
   1117a:	asrs	r6, r1, #4
   1117c:	add.w	r3, r3, r2, lsl #3
   11180:	lsls	r0, r6, #27
   11182:	ldrd	r4, r5, [r3]
   11186:	bpl.w	11616 <_dtoa_r+0xafe>
   1118a:	ldr	r3, [pc, #560]	; (113bc <_dtoa_r+0x8a4>)
   1118c:	mov	r0, sl
   1118e:	mov	r1, fp
   11190:	ldrd	r2, r3, [r3, #32]
   11194:	bl	b87c <__aeabi_ddiv>
   11198:	strd	r0, r1, [sp, #72]	; 0x48
   1119c:	and.w	r6, r6, #15
   111a0:	mov.w	sl, #3
   111a4:	cbz	r6, 111c8 <_dtoa_r+0x6b0>
   111a6:	ldr	r7, [pc, #532]	; (113bc <_dtoa_r+0x8a4>)
   111a8:	lsls	r1, r6, #31
   111aa:	bpl.n	111c0 <_dtoa_r+0x6a8>
   111ac:	mov	r0, r4
   111ae:	mov	r1, r5
   111b0:	ldrd	r2, r3, [r7]
   111b4:	bl	b628 <__aeabi_dmul>
   111b8:	add.w	sl, sl, #1
   111bc:	mov	r4, r0
   111be:	mov	r5, r1
   111c0:	asrs	r6, r6, #1
   111c2:	add.w	r7, r7, #8
   111c6:	bne.n	111a8 <_dtoa_r+0x690>
   111c8:	mov	r2, r4
   111ca:	mov	r3, r5
   111cc:	ldrd	r0, r1, [sp, #72]	; 0x48
   111d0:	bl	b87c <__aeabi_ddiv>
   111d4:	mov	r6, r0
   111d6:	mov	r7, r1
   111d8:	ldr	r3, [sp, #52]	; 0x34
   111da:	cbz	r3, 111ee <_dtoa_r+0x6d6>
   111dc:	movs	r2, #0
   111de:	ldr	r3, [pc, #480]	; (113c0 <_dtoa_r+0x8a8>)
   111e0:	mov	r0, r6
   111e2:	mov	r1, r7
   111e4:	bl	bb0c <__aeabi_dcmplt>
   111e8:	cmp	r0, #0
   111ea:	bne.w	11822 <_dtoa_r+0xd0a>
   111ee:	mov	r0, sl
   111f0:	bl	b55c <__aeabi_i2d>
   111f4:	mov	r2, r6
   111f6:	mov	r3, r7
   111f8:	bl	b628 <__aeabi_dmul>
   111fc:	ldr	r3, [pc, #452]	; (113c4 <_dtoa_r+0x8ac>)
   111fe:	movs	r2, #0
   11200:	bl	b2c4 <__adddf3>
   11204:	ldr	r3, [sp, #32]
   11206:	mov	r4, r0
   11208:	sub.w	r5, r1, #54525952	; 0x3400000
   1120c:	cmp	r3, #0
   1120e:	beq.w	115c8 <_dtoa_r+0xab0>
   11212:	ldr	r3, [sp, #16]
   11214:	str	r3, [sp, #88]	; 0x58
   11216:	ldr	r3, [sp, #32]
   11218:	str	r3, [sp, #72]	; 0x48
   1121a:	ldr	r3, [sp, #44]	; 0x2c
   1121c:	cmp	r3, #0
   1121e:	beq.w	1174a <_dtoa_r+0xc32>
   11222:	ldr	r2, [sp, #72]	; 0x48
   11224:	ldr	r3, [pc, #400]	; (113b8 <_dtoa_r+0x8a0>)
   11226:	ldr	r1, [pc, #416]	; (113c8 <_dtoa_r+0x8b0>)
   11228:	add.w	r3, r3, r2, lsl #3
   1122c:	ldrd	r2, r3, [r3, #-8]
   11230:	movs	r0, #0
   11232:	bl	b87c <__aeabi_ddiv>
   11236:	mov	r2, r4
   11238:	mov	r3, r5
   1123a:	bl	b2c0 <__aeabi_dsub>
   1123e:	mov	sl, r0
   11240:	mov	fp, r1
   11242:	mov	r0, r6
   11244:	mov	r1, r7
   11246:	bl	bb88 <__aeabi_d2iz>
   1124a:	mov	r4, r0
   1124c:	bl	b55c <__aeabi_i2d>
   11250:	mov	r2, r0
   11252:	mov	r3, r1
   11254:	mov	r0, r6
   11256:	mov	r1, r7
   11258:	bl	b2c0 <__aeabi_dsub>
   1125c:	adds	r4, #48	; 0x30
   1125e:	ldr	r5, [sp, #36]	; 0x24
   11260:	uxtb	r4, r4
   11262:	mov	r6, r0
   11264:	mov	r7, r1
   11266:	strb	r4, [r5, #0]
   11268:	mov	r2, r0
   1126a:	mov	r3, r1
   1126c:	mov	r0, sl
   1126e:	mov	r1, fp
   11270:	adds	r5, #1
   11272:	bl	bb48 <__aeabi_dcmpgt>
   11276:	cmp	r0, #0
   11278:	bne.n	1131c <_dtoa_r+0x804>
   1127a:	mov	r2, r6
   1127c:	mov	r3, r7
   1127e:	movs	r0, #0
   11280:	ldr	r1, [pc, #316]	; (113c0 <_dtoa_r+0x8a8>)
   11282:	bl	b2c0 <__aeabi_dsub>
   11286:	mov	r2, r0
   11288:	mov	r3, r1
   1128a:	mov	r0, sl
   1128c:	mov	r1, fp
   1128e:	bl	bb48 <__aeabi_dcmpgt>
   11292:	cmp	r0, #0
   11294:	bne.w	118a8 <_dtoa_r+0xd90>
   11298:	ldr	r2, [sp, #72]	; 0x48
   1129a:	cmp	r2, #1
   1129c:	ble.w	1168e <_dtoa_r+0xb76>
   112a0:	ldr	r3, [sp, #72]	; 0x48
   112a2:	ldr	r2, [sp, #36]	; 0x24
   112a4:	str.w	r8, [sp, #72]	; 0x48
   112a8:	add	r3, r2
   112aa:	mov	r8, r3
   112ac:	b.n	112ca <_dtoa_r+0x7b2>
   112ae:	movs	r0, #0
   112b0:	ldr	r1, [pc, #268]	; (113c0 <_dtoa_r+0x8a8>)
   112b2:	bl	b2c0 <__aeabi_dsub>
   112b6:	mov	r2, sl
   112b8:	mov	r3, fp
   112ba:	bl	bb0c <__aeabi_dcmplt>
   112be:	cmp	r0, #0
   112c0:	bne.w	118a8 <_dtoa_r+0xd90>
   112c4:	cmp	r5, r8
   112c6:	beq.w	1168a <_dtoa_r+0xb72>
   112ca:	mov	r0, sl
   112cc:	mov	r1, fp
   112ce:	movs	r2, #0
   112d0:	ldr	r3, [pc, #248]	; (113cc <_dtoa_r+0x8b4>)
   112d2:	bl	b628 <__aeabi_dmul>
   112d6:	movs	r2, #0
   112d8:	ldr	r3, [pc, #240]	; (113cc <_dtoa_r+0x8b4>)
   112da:	mov	sl, r0
   112dc:	mov	fp, r1
   112de:	mov	r0, r6
   112e0:	mov	r1, r7
   112e2:	bl	b628 <__aeabi_dmul>
   112e6:	mov	r7, r1
   112e8:	mov	r6, r0
   112ea:	bl	bb88 <__aeabi_d2iz>
   112ee:	mov	r4, r0
   112f0:	bl	b55c <__aeabi_i2d>
   112f4:	mov	r2, r0
   112f6:	mov	r3, r1
   112f8:	mov	r0, r6
   112fa:	mov	r1, r7
   112fc:	bl	b2c0 <__aeabi_dsub>
   11300:	adds	r4, #48	; 0x30
   11302:	uxtb	r4, r4
   11304:	mov	r2, sl
   11306:	mov	r3, fp
   11308:	strb.w	r4, [r5], #1
   1130c:	mov	r6, r0
   1130e:	mov	r7, r1
   11310:	bl	bb0c <__aeabi_dcmplt>
   11314:	mov	r2, r6
   11316:	mov	r3, r7
   11318:	cmp	r0, #0
   1131a:	beq.n	112ae <_dtoa_r+0x796>
   1131c:	ldr	r3, [sp, #88]	; 0x58
   1131e:	str	r3, [sp, #16]
   11320:	b.n	10eae <_dtoa_r+0x396>
   11322:	movs	r3, #0
   11324:	str	r3, [sp, #44]	; 0x2c
   11326:	ldr	r3, [sp, #20]
   11328:	cmp	r3, #0
   1132a:	ble.w	1162e <_dtoa_r+0xb16>
   1132e:	mov	r5, r3
   11330:	mov	r4, r3
   11332:	str	r3, [sp, #56]	; 0x38
   11334:	str	r3, [sp, #32]
   11336:	b.n	1112e <_dtoa_r+0x616>
   11338:	movs	r3, #1
   1133a:	str	r3, [sp, #44]	; 0x2c
   1133c:	b.n	11326 <_dtoa_r+0x80e>
   1133e:	str	r4, [sp, #40]	; 0x28
   11340:	ldr	r2, [sp, #24]
   11342:	ldr	r1, [sp, #40]	; 0x28
   11344:	mov	r0, r9
   11346:	bl	127d8 <__pow5mult>
   1134a:	mov	r4, r0
   1134c:	b.n	10f6c <_dtoa_r+0x454>
   1134e:	ldr	r3, [sp, #32]
   11350:	cmp	r3, #0
   11352:	bgt.w	10d52 <_dtoa_r+0x23a>
   11356:	bne.w	115f8 <_dtoa_r+0xae0>
   1135a:	movs	r2, #0
   1135c:	ldr	r3, [pc, #112]	; (113d0 <_dtoa_r+0x8b8>)
   1135e:	ldrd	r0, r1, [sp]
   11362:	bl	b628 <__aeabi_dmul>
   11366:	mov	r3, fp
   11368:	mov	r2, sl
   1136a:	bl	bb34 <__aeabi_dcmpge>
   1136e:	ldr	r3, [sp, #32]
   11370:	str	r3, [sp, #24]
   11372:	mov	r6, r3
   11374:	cmp	r0, #0
   11376:	beq.w	1154e <_dtoa_r+0xa36>
   1137a:	ldr	r3, [sp, #20]
   1137c:	ldr	r5, [sp, #36]	; 0x24
   1137e:	mvns	r3, r3
   11380:	str	r3, [sp, #16]
   11382:	ldr	r1, [sp, #24]
   11384:	mov	r0, r9
   11386:	bl	124cc <_Bfree>
   1138a:	cmp	r6, #0
   1138c:	beq.w	10eae <_dtoa_r+0x396>
   11390:	b.n	110a6 <_dtoa_r+0x58e>
   11392:	ldr	r2, [sp, #60]	; 0x3c
   11394:	cmp	r2, #0
   11396:	beq.w	1180a <_dtoa_r+0xcf2>
   1139a:	addw	r3, r3, #1075	; 0x433
   1139e:	ldr	r7, [sp, #24]
   113a0:	ldr	r5, [sp, #28]
   113a2:	b.n	10efe <_dtoa_r+0x3e6>
   113a4:	movs	r0, #28
   113a6:	b.n	10fbe <_dtoa_r+0x4a6>
   113a8:	ldr	r3, [sp, #0]
   113aa:	cmp	r3, #1
   113ac:	ble.w	118b0 <_dtoa_r+0xd98>
   113b0:	ldr	r7, [sp, #48]	; 0x30
   113b2:	movs	r0, #1
   113b4:	b.n	10fa6 <_dtoa_r+0x48e>
   113b6:	nop
   113b8:	.word	0x00014250
   113bc:	.word	0x00014318
   113c0:	.word	0x3ff00000
   113c4:	.word	0x401c0000
   113c8:	.word	0x3fe00000
   113cc:	.word	0x40240000
   113d0:	.word	0x40140000
   113d4:	mov	r1, r6
   113d6:	movs	r3, #0
   113d8:	movs	r2, #10
   113da:	mov	r0, r9
   113dc:	bl	124e0 <__multadd>
   113e0:	ldr	r3, [sp, #56]	; 0x38
   113e2:	cmp	r3, #0
   113e4:	mov	r6, r0
   113e6:	ble.w	11904 <_dtoa_r+0xdec>
   113ea:	str	r3, [sp, #32]
   113ec:	cmp	r5, #0
   113ee:	ble.n	113fc <_dtoa_r+0x8e4>
   113f0:	mov	r1, r6
   113f2:	mov	r2, r5
   113f4:	mov	r0, r9
   113f6:	bl	12878 <__lshift>
   113fa:	mov	r6, r0
   113fc:	cmp	r7, #0
   113fe:	bne.w	116fa <_dtoa_r+0xbe2>
   11402:	mov	r8, r6
   11404:	ldr	r3, [sp, #32]
   11406:	ldr	r2, [sp, #36]	; 0x24
   11408:	subs	r3, #1
   1140a:	adds	r3, r2, r3
   1140c:	str	r3, [sp, #32]
   1140e:	and.w	r3, sl, #1
   11412:	str	r3, [sp, #40]	; 0x28
   11414:	mov	r7, r2
   11416:	ldr.w	fp, [sp, #24]
   1141a:	mov	r0, r4
   1141c:	mov	r1, fp
   1141e:	bl	109ec <quorem>
   11422:	mov	r1, r6
   11424:	mov	r5, r0
   11426:	mov	r0, r4
   11428:	bl	12928 <__mcmp>
   1142c:	mov	r2, r8
   1142e:	mov	r1, fp
   11430:	mov	sl, r0
   11432:	mov	r0, r9
   11434:	bl	1296c <__mdiff>
   11438:	ldr	r2, [r0, #12]
   1143a:	mov	fp, r0
   1143c:	add.w	r3, r5, #48	; 0x30
   11440:	cmp	r2, #0
   11442:	bne.n	114d8 <_dtoa_r+0x9c0>
   11444:	mov	r1, r0
   11446:	mov	r0, r4
   11448:	str	r3, [sp, #28]
   1144a:	bl	12928 <__mcmp>
   1144e:	mov	r1, fp
   11450:	str	r0, [sp, #20]
   11452:	mov	r0, r9
   11454:	bl	124cc <_Bfree>
   11458:	ldr	r2, [sp, #20]
   1145a:	ldr	r3, [sp, #28]
   1145c:	cbnz	r2, 1146a <_dtoa_r+0x952>
   1145e:	ldr	r1, [sp, #0]
   11460:	cbnz	r1, 1146a <_dtoa_r+0x952>
   11462:	ldr	r1, [sp, #40]	; 0x28
   11464:	cmp	r1, #0
   11466:	beq.w	118d4 <_dtoa_r+0xdbc>
   1146a:	cmp.w	sl, #0
   1146e:	blt.w	11638 <_dtoa_r+0xb20>
   11472:	bne.n	11480 <_dtoa_r+0x968>
   11474:	ldr	r1, [sp, #0]
   11476:	cbnz	r1, 11480 <_dtoa_r+0x968>
   11478:	ldr	r1, [sp, #40]	; 0x28
   1147a:	cmp	r1, #0
   1147c:	beq.w	11638 <_dtoa_r+0xb20>
   11480:	cmp	r2, #0
   11482:	bgt.w	11722 <_dtoa_r+0xc0a>
   11486:	ldr	r2, [sp, #32]
   11488:	strb	r3, [r7, #0]
   1148a:	add.w	sl, r7, #1
   1148e:	cmp	r7, r2
   11490:	mov	r5, sl
   11492:	beq.w	1173a <_dtoa_r+0xc22>
   11496:	mov	r1, r4
   11498:	movs	r3, #0
   1149a:	movs	r2, #10
   1149c:	mov	r0, r9
   1149e:	bl	124e0 <__multadd>
   114a2:	cmp	r6, r8
   114a4:	mov	r4, r0
   114a6:	mov	r1, r6
   114a8:	mov.w	r3, #0
   114ac:	mov.w	r2, #10
   114b0:	mov	r0, r9
   114b2:	beq.n	114cc <_dtoa_r+0x9b4>
   114b4:	bl	124e0 <__multadd>
   114b8:	mov	r1, r8
   114ba:	mov	r6, r0
   114bc:	movs	r3, #0
   114be:	movs	r2, #10
   114c0:	mov	r0, r9
   114c2:	bl	124e0 <__multadd>
   114c6:	mov	r7, sl
   114c8:	mov	r8, r0
   114ca:	b.n	11416 <_dtoa_r+0x8fe>
   114cc:	bl	124e0 <__multadd>
   114d0:	mov	r7, sl
   114d2:	mov	r6, r0
   114d4:	mov	r8, r0
   114d6:	b.n	11416 <_dtoa_r+0x8fe>
   114d8:	mov	r1, r0
   114da:	mov	r0, r9
   114dc:	str	r3, [sp, #20]
   114de:	bl	124cc <_Bfree>
   114e2:	movs	r2, #1
   114e4:	ldr	r3, [sp, #20]
   114e6:	b.n	1146a <_dtoa_r+0x952>
   114e8:	ldr	r1, [sp, #24]
   114ea:	mov	r0, r4
   114ec:	bl	12928 <__mcmp>
   114f0:	cmp	r0, #0
   114f2:	bge.w	10ff4 <_dtoa_r+0x4dc>
   114f6:	mov	r1, r4
   114f8:	ldr	r4, [sp, #16]
   114fa:	movs	r3, #0
   114fc:	subs	r4, #1
   114fe:	movs	r2, #10
   11500:	mov	r0, r9
   11502:	str	r4, [sp, #16]
   11504:	bl	124e0 <__multadd>
   11508:	ldr	r3, [sp, #44]	; 0x2c
   1150a:	mov	r4, r0
   1150c:	cmp	r3, #0
   1150e:	bne.w	113d4 <_dtoa_r+0x8bc>
   11512:	ldr	r3, [sp, #56]	; 0x38
   11514:	cmp	r3, #0
   11516:	ble.w	118f4 <_dtoa_r+0xddc>
   1151a:	str	r3, [sp, #32]
   1151c:	b.n	11004 <_dtoa_r+0x4ec>
   1151e:	ldr	r4, [sp, #40]	; 0x28
   11520:	b.n	10f6c <_dtoa_r+0x454>
   11522:	ldr	r3, [sp, #0]
   11524:	cmp	r3, #2
   11526:	ble.w	10ffc <_dtoa_r+0x4e4>
   1152a:	ldr	r3, [sp, #32]
   1152c:	cmp	r3, #0
   1152e:	bne.w	1186c <_dtoa_r+0xd54>
   11532:	ldr	r1, [sp, #24]
   11534:	movs	r2, #5
   11536:	mov	r0, r9
   11538:	bl	124e0 <__multadd>
   1153c:	mov	r1, r0
   1153e:	str	r0, [sp, #24]
   11540:	mov	r0, r4
   11542:	bl	12928 <__mcmp>
   11546:	cmp	r0, #0
   11548:	str	r4, [sp, #40]	; 0x28
   1154a:	ble.w	1137a <_dtoa_r+0x862>
   1154e:	ldr	r2, [sp, #16]
   11550:	ldr	r1, [sp, #36]	; 0x24
   11552:	movs	r3, #49	; 0x31
   11554:	adds	r2, #1
   11556:	str	r2, [sp, #16]
   11558:	strb	r3, [r1, #0]
   1155a:	adds	r5, r1, #1
   1155c:	b.n	11382 <_dtoa_r+0x86a>
   1155e:	ldr	r2, [sp, #16]
   11560:	adds	r2, #1
   11562:	str	r2, [sp, #16]
   11564:	ldr	r2, [sp, #36]	; 0x24
   11566:	movs	r3, #49	; 0x31
   11568:	strb	r3, [r2, #0]
   1156a:	b.n	11086 <_dtoa_r+0x56e>
   1156c:	movs	r3, #1
   1156e:	str	r3, [sp, #44]	; 0x2c
   11570:	b.n	11118 <_dtoa_r+0x600>
   11572:	ldr.w	r9, [sp, #20]
   11576:	b.n	10eae <_dtoa_r+0x396>
   11578:	cmp.w	sl, #0
   1157c:	bne.w	10f92 <_dtoa_r+0x47a>
   11580:	ubfx	r3, fp, #0, #20
   11584:	cmp	r3, #0
   11586:	bne.w	11806 <_dtoa_r+0xcee>
   1158a:	bic.w	r7, fp, #2147483648	; 0x80000000
   1158e:	lsrs	r7, r7, #20
   11590:	lsls	r7, r7, #20
   11592:	cbz	r7, 115a0 <_dtoa_r+0xa88>
   11594:	ldr	r3, [sp, #28]
   11596:	adds	r3, #1
   11598:	str	r3, [sp, #28]
   1159a:	add.w	r8, r8, #1
   1159e:	movs	r7, #1
   115a0:	ldr	r3, [sp, #48]	; 0x30
   115a2:	movs	r0, #1
   115a4:	cmp	r3, #0
   115a6:	beq.w	10fa6 <_dtoa_r+0x48e>
   115aa:	b.n	10f94 <_dtoa_r+0x47c>
   115ac:	mov	r0, sl
   115ae:	bl	b55c <__aeabi_i2d>
   115b2:	mov	r2, r6
   115b4:	mov	r3, r7
   115b6:	bl	b628 <__aeabi_dmul>
   115ba:	movs	r2, #0
   115bc:	ldr	r3, [pc, #764]	; (118bc <_dtoa_r+0xda4>)
   115be:	bl	b2c4 <__adddf3>
   115c2:	mov	r4, r0
   115c4:	sub.w	r5, r1, #54525952	; 0x3400000
   115c8:	mov	r0, r6
   115ca:	mov	r1, r7
   115cc:	movs	r2, #0
   115ce:	ldr	r3, [pc, #752]	; (118c0 <_dtoa_r+0xda8>)
   115d0:	bl	b2c0 <__aeabi_dsub>
   115d4:	mov	r2, r4
   115d6:	mov	r3, r5
   115d8:	mov	r6, r0
   115da:	mov	r7, r1
   115dc:	bl	bb48 <__aeabi_dcmpgt>
   115e0:	cmp	r0, #0
   115e2:	bne.w	11742 <_dtoa_r+0xc2a>
   115e6:	mov	r2, r4
   115e8:	add.w	r3, r5, #2147483648	; 0x80000000
   115ec:	mov	r0, r6
   115ee:	mov	r1, r7
   115f0:	bl	bb0c <__aeabi_dcmplt>
   115f4:	cmp	r0, #0
   115f6:	beq.n	1168e <_dtoa_r+0xb76>
   115f8:	movs	r3, #0
   115fa:	str	r3, [sp, #24]
   115fc:	mov	r6, r3
   115fe:	b.n	1137a <_dtoa_r+0x862>
   11600:	ldr	r0, [sp, #36]	; 0x24
   11602:	b.w	10b8a <_dtoa_r+0x72>
   11606:	ldr	r3, [sp, #24]
   11608:	ldr	r2, [sp, #48]	; 0x30
   1160a:	str	r7, [sp, #24]
   1160c:	subs	r3, r7, r3
   1160e:	add	r2, r3
   11610:	str	r2, [sp, #48]	; 0x30
   11612:	movs	r7, #0
   11614:	b.n	10ef2 <_dtoa_r+0x3da>
   11616:	vldr	d7, [sp, #64]	; 0x40
   1161a:	mov.w	sl, #2
   1161e:	vstr	d7, [sp, #72]	; 0x48
   11622:	b.n	111a4 <_dtoa_r+0x68c>
   11624:	mov	r4, r3
   11626:	movs	r1, #0
   11628:	str.w	r1, [r9, #68]	; 0x44
   1162c:	b.n	11150 <_dtoa_r+0x638>
   1162e:	movs	r4, #1
   11630:	str	r4, [sp, #56]	; 0x38
   11632:	str	r4, [sp, #32]
   11634:	str	r4, [sp, #20]
   11636:	b.n	11626 <_dtoa_r+0xb0e>
   11638:	cmp	r2, #0
   1163a:	mov	sl, r3
   1163c:	ble.n	11662 <_dtoa_r+0xb4a>
   1163e:	mov	r1, r4
   11640:	movs	r2, #1
   11642:	mov	r0, r9
   11644:	bl	12878 <__lshift>
   11648:	ldr	r1, [sp, #24]
   1164a:	mov	r4, r0
   1164c:	bl	12928 <__mcmp>
   11650:	cmp	r0, #0
   11652:	ble.w	118e6 <_dtoa_r+0xdce>
   11656:	cmp.w	sl, #57	; 0x39
   1165a:	beq.w	11870 <_dtoa_r+0xd58>
   1165e:	add.w	sl, r5, #49	; 0x31
   11662:	mov	fp, r6
   11664:	strb.w	sl, [r7]
   11668:	adds	r5, r7, #1
   1166a:	mov	r6, r8
   1166c:	str	r4, [sp, #40]	; 0x28
   1166e:	b.n	11086 <_dtoa_r+0x56e>
   11670:	bne.n	1167c <_dtoa_r+0xb64>
   11672:	tst.w	sl, #1
   11676:	beq.n	1167c <_dtoa_r+0xb64>
   11678:	b.n	11066 <_dtoa_r+0x54e>
   1167a:	mov	r5, r2
   1167c:	ldrb.w	r3, [r5, #-1]
   11680:	cmp	r3, #48	; 0x30
   11682:	add.w	r2, r5, #4294967295
   11686:	beq.n	1167a <_dtoa_r+0xb62>
   11688:	b.n	11086 <_dtoa_r+0x56e>
   1168a:	ldr.w	r8, [sp, #72]	; 0x48
   1168e:	ldrd	sl, fp, [sp, #64]	; 0x40
   11692:	b.w	10d2c <_dtoa_r+0x214>
   11696:	ldr	r1, [sp, #36]	; 0x24
   11698:	movs	r2, #48	; 0x30
   1169a:	strb	r2, [r1, #0]
   1169c:	ldr	r2, [sp, #16]
   1169e:	ldrb.w	r4, [r5, #-1]
   116a2:	adds	r2, #1
   116a4:	str	r2, [sp, #16]
   116a6:	b.n	10eaa <_dtoa_r+0x392>
   116a8:	ldr	r3, [sp, #16]
   116aa:	negs	r4, r3
   116ac:	cmp	r4, #0
   116ae:	beq.w	11818 <_dtoa_r+0xd00>
   116b2:	ldr	r3, [pc, #528]	; (118c4 <_dtoa_r+0xdac>)
   116b4:	and.w	r2, r4, #15
   116b8:	add.w	r3, r3, r2, lsl #3
   116bc:	ldrd	r2, r3, [r3]
   116c0:	ldrd	r0, r1, [sp, #64]	; 0x40
   116c4:	bl	b628 <__aeabi_dmul>
   116c8:	asrs	r4, r4, #4
   116ca:	mov	r6, r0
   116cc:	mov	r7, r1
   116ce:	beq.w	118fe <_dtoa_r+0xde6>
   116d2:	ldr	r5, [pc, #500]	; (118c8 <_dtoa_r+0xdb0>)
   116d4:	mov.w	sl, #2
   116d8:	lsls	r2, r4, #31
   116da:	bpl.n	116f0 <_dtoa_r+0xbd8>
   116dc:	mov	r0, r6
   116de:	mov	r1, r7
   116e0:	ldrd	r2, r3, [r5]
   116e4:	bl	b628 <__aeabi_dmul>
   116e8:	add.w	sl, sl, #1
   116ec:	mov	r6, r0
   116ee:	mov	r7, r1
   116f0:	asrs	r4, r4, #1
   116f2:	add.w	r5, r5, #8
   116f6:	bne.n	116d8 <_dtoa_r+0xbc0>
   116f8:	b.n	111d8 <_dtoa_r+0x6c0>
   116fa:	ldr	r1, [r6, #4]
   116fc:	mov	r0, r9
   116fe:	bl	12480 <_Balloc>
   11702:	ldr	r3, [r6, #16]
   11704:	adds	r2, r3, #2
   11706:	mov	r5, r0
   11708:	lsls	r2, r2, #2
   1170a:	add.w	r1, r6, #12
   1170e:	adds	r0, #12
   11710:	bl	9324 <memcpy>
   11714:	mov	r1, r5
   11716:	movs	r2, #1
   11718:	mov	r0, r9
   1171a:	bl	12878 <__lshift>
   1171e:	mov	r8, r0
   11720:	b.n	11404 <_dtoa_r+0x8ec>
   11722:	cmp	r3, #57	; 0x39
   11724:	beq.w	11870 <_dtoa_r+0xd58>
   11728:	add.w	sl, r3, #1
   1172c:	mov	fp, r6
   1172e:	strb.w	sl, [r7]
   11732:	adds	r5, r7, #1
   11734:	mov	r6, r8
   11736:	str	r4, [sp, #40]	; 0x28
   11738:	b.n	11086 <_dtoa_r+0x56e>
   1173a:	mov	fp, r6
   1173c:	mov	sl, r3
   1173e:	mov	r6, r8
   11740:	b.n	1104e <_dtoa_r+0x536>
   11742:	movs	r3, #0
   11744:	str	r3, [sp, #24]
   11746:	mov	r6, r3
   11748:	b.n	1154e <_dtoa_r+0xa36>
   1174a:	ldr	r3, [sp, #72]	; 0x48
   1174c:	ldr	r1, [pc, #372]	; (118c4 <_dtoa_r+0xdac>)
   1174e:	subs	r2, r3, #1
   11750:	add.w	r1, r1, r2, lsl #3
   11754:	mov	r3, r5
   11756:	str	r2, [sp, #92]	; 0x5c
   11758:	ldrd	r0, r1, [r1]
   1175c:	mov	r2, r4
   1175e:	bl	b628 <__aeabi_dmul>
   11762:	strd	r0, r1, [sp, #80]	; 0x50
   11766:	mov	r1, r7
   11768:	mov	r0, r6
   1176a:	bl	bb88 <__aeabi_d2iz>
   1176e:	mov	r4, r0
   11770:	bl	b55c <__aeabi_i2d>
   11774:	mov	r3, r1
   11776:	mov	r2, r0
   11778:	mov	r1, r7
   1177a:	mov	r0, r6
   1177c:	bl	b2c0 <__aeabi_dsub>
   11780:	ldr	r3, [sp, #72]	; 0x48
   11782:	mov	r7, r1
   11784:	ldr	r1, [sp, #36]	; 0x24
   11786:	adds	r4, #48	; 0x30
   11788:	cmp	r3, #1
   1178a:	mov	r6, r0
   1178c:	strb	r4, [r1, #0]
   1178e:	add.w	r5, r1, #1
   11792:	beq.n	117d6 <_dtoa_r+0xcbe>
   11794:	ldr	r3, [sp, #72]	; 0x48
   11796:	ldr	r2, [sp, #36]	; 0x24
   11798:	add	r3, r2
   1179a:	mov	sl, r3
   1179c:	mov	fp, r5
   1179e:	movs	r2, #0
   117a0:	ldr	r3, [pc, #296]	; (118cc <_dtoa_r+0xdb4>)
   117a2:	mov	r0, r6
   117a4:	mov	r1, r7
   117a6:	bl	b628 <__aeabi_dmul>
   117aa:	mov	r7, r1
   117ac:	mov	r6, r0
   117ae:	bl	bb88 <__aeabi_d2iz>
   117b2:	mov	r4, r0
   117b4:	bl	b55c <__aeabi_i2d>
   117b8:	adds	r4, #48	; 0x30
   117ba:	mov	r2, r0
   117bc:	mov	r3, r1
   117be:	mov	r0, r6
   117c0:	mov	r1, r7
   117c2:	bl	b2c0 <__aeabi_dsub>
   117c6:	strb.w	r4, [fp], #1
   117ca:	cmp	sl, fp
   117cc:	mov	r6, r0
   117ce:	mov	r7, r1
   117d0:	bne.n	1179e <_dtoa_r+0xc86>
   117d2:	ldr	r3, [sp, #92]	; 0x5c
   117d4:	add	r5, r3
   117d6:	movs	r2, #0
   117d8:	ldr	r3, [pc, #244]	; (118d0 <_dtoa_r+0xdb8>)
   117da:	ldrd	r0, r1, [sp, #80]	; 0x50
   117de:	bl	b2c4 <__adddf3>
   117e2:	mov	r2, r6
   117e4:	mov	r3, r7
   117e6:	bl	bb0c <__aeabi_dcmplt>
   117ea:	cmp	r0, #0
   117ec:	beq.n	11880 <_dtoa_r+0xd68>
   117ee:	ldr	r3, [sp, #88]	; 0x58
   117f0:	str	r3, [sp, #16]
   117f2:	ldrb.w	r4, [r5, #-1]
   117f6:	b.w	10e92 <_dtoa_r+0x37a>
   117fa:	ldr	r3, [sp, #28]
   117fc:	ldr	r2, [sp, #32]
   117fe:	subs	r5, r3, r2
   11800:	movs	r3, #0
   11802:	b.w	10efe <_dtoa_r+0x3e6>
   11806:	movs	r7, #0
   11808:	b.n	115a0 <_dtoa_r+0xa88>
   1180a:	ldr	r3, [sp, #96]	; 0x60
   1180c:	ldr	r7, [sp, #24]
   1180e:	ldr	r5, [sp, #28]
   11810:	rsb	r3, r3, #54	; 0x36
   11814:	b.w	10efe <_dtoa_r+0x3e6>
   11818:	ldrd	r6, r7, [sp, #64]	; 0x40
   1181c:	mov.w	sl, #2
   11820:	b.n	111d8 <_dtoa_r+0x6c0>
   11822:	ldr	r3, [sp, #32]
   11824:	cmp	r3, #0
   11826:	beq.w	115ac <_dtoa_r+0xa94>
   1182a:	ldr	r3, [sp, #56]	; 0x38
   1182c:	cmp	r3, #0
   1182e:	ble.w	1168e <_dtoa_r+0xb76>
   11832:	movs	r2, #0
   11834:	ldr	r3, [pc, #148]	; (118cc <_dtoa_r+0xdb4>)
   11836:	mov	r0, r6
   11838:	mov	r1, r7
   1183a:	bl	b628 <__aeabi_dmul>
   1183e:	mov	r6, r0
   11840:	mov	r7, r1
   11842:	add.w	r0, sl, #1
   11846:	bl	b55c <__aeabi_i2d>
   1184a:	mov	r2, r6
   1184c:	mov	r3, r7
   1184e:	bl	b628 <__aeabi_dmul>
   11852:	movs	r2, #0
   11854:	ldr	r3, [pc, #100]	; (118bc <_dtoa_r+0xda4>)
   11856:	bl	b2c4 <__adddf3>
   1185a:	ldr	r2, [sp, #16]
   1185c:	ldr	r3, [sp, #56]	; 0x38
   1185e:	str	r3, [sp, #72]	; 0x48
   11860:	subs	r2, #1
   11862:	mov	r4, r0
   11864:	sub.w	r5, r1, #54525952	; 0x3400000
   11868:	str	r2, [sp, #88]	; 0x58
   1186a:	b.n	1121a <_dtoa_r+0x702>
   1186c:	str	r4, [sp, #40]	; 0x28
   1186e:	b.n	1137a <_dtoa_r+0x862>
   11870:	movs	r2, #57	; 0x39
   11872:	mov	fp, r6
   11874:	str	r4, [sp, #40]	; 0x28
   11876:	mov	r6, r8
   11878:	strb	r2, [r7, #0]
   1187a:	adds	r5, r7, #1
   1187c:	b.w	1106a <_dtoa_r+0x552>
   11880:	ldrd	r2, r3, [sp, #80]	; 0x50
   11884:	movs	r0, #0
   11886:	ldr	r1, [pc, #72]	; (118d0 <_dtoa_r+0xdb8>)
   11888:	bl	b2c0 <__aeabi_dsub>
   1188c:	mov	r2, r6
   1188e:	mov	r3, r7
   11890:	bl	bb48 <__aeabi_dcmpgt>
   11894:	cbnz	r0, 1189a <_dtoa_r+0xd82>
   11896:	b.n	1168e <_dtoa_r+0xb76>
   11898:	mov	r5, r2
   1189a:	ldrb.w	r3, [r5, #-1]
   1189e:	cmp	r3, #48	; 0x30
   118a0:	add.w	r2, r5, #4294967295
   118a4:	beq.n	11898 <_dtoa_r+0xd80>
   118a6:	b.n	1131c <_dtoa_r+0x804>
   118a8:	ldr	r3, [sp, #88]	; 0x58
   118aa:	str	r3, [sp, #16]
   118ac:	b.w	10e92 <_dtoa_r+0x37a>
   118b0:	cmp.w	sl, #0
   118b4:	bne.w	113b0 <_dtoa_r+0x898>
   118b8:	b.n	11580 <_dtoa_r+0xa68>
   118ba:	nop
   118bc:	.word	0x401c0000
   118c0:	.word	0x40140000
   118c4:	.word	0x00014250
   118c8:	.word	0x00014318
   118cc:	.word	0x40240000
   118d0:	.word	0x3fe00000
   118d4:	cmp	r3, #57	; 0x39
   118d6:	mov	fp, sl
   118d8:	mov	sl, r3
   118da:	beq.n	11870 <_dtoa_r+0xd58>
   118dc:	cmp.w	fp, #0
   118e0:	bgt.w	1165e <_dtoa_r+0xb46>
   118e4:	b.n	11662 <_dtoa_r+0xb4a>
   118e6:	bne.w	11662 <_dtoa_r+0xb4a>
   118ea:	tst.w	sl, #1
   118ee:	beq.w	11662 <_dtoa_r+0xb4a>
   118f2:	b.n	11656 <_dtoa_r+0xb3e>
   118f4:	ldr	r3, [sp, #0]
   118f6:	cmp	r3, #2
   118f8:	bgt.n	11946 <_dtoa_r+0xe2e>
   118fa:	ldr	r3, [sp, #56]	; 0x38
   118fc:	b.n	1151a <_dtoa_r+0xa02>
   118fe:	mov.w	sl, #2
   11902:	b.n	111d8 <_dtoa_r+0x6c0>
   11904:	ldr	r3, [sp, #0]
   11906:	cmp	r3, #2
   11908:	bgt.n	11946 <_dtoa_r+0xe2e>
   1190a:	ldr	r3, [sp, #56]	; 0x38
   1190c:	b.n	113ea <_dtoa_r+0x8d2>
   1190e:	movs	r4, #0
   11910:	str.w	r4, [r9, #68]	; 0x44
   11914:	mov	r1, r4
   11916:	mov	r0, r9
   11918:	bl	12480 <_Balloc>
   1191c:	mov.w	r3, #4294967295
   11920:	str	r3, [sp, #32]
   11922:	str	r3, [sp, #56]	; 0x38
   11924:	movs	r3, #1
   11926:	str	r0, [sp, #36]	; 0x24
   11928:	str	r4, [sp, #20]
   1192a:	str.w	r0, [r9, #64]	; 0x40
   1192e:	str	r3, [sp, #44]	; 0x2c
   11930:	b.w	10d2c <_dtoa_r+0x214>
   11934:	beq.w	10fc8 <_dtoa_r+0x4b0>
   11938:	rsb	r0, r0, #60	; 0x3c
   1193c:	b.w	10fbe <_dtoa_r+0x4a6>
   11940:	movs	r6, #1
   11942:	b.w	10cbe <_dtoa_r+0x1a6>
   11946:	ldr	r3, [sp, #56]	; 0x38
   11948:	str	r3, [sp, #32]
   1194a:	b.n	1152a <_dtoa_r+0xa12>

0001194c <__libc_fini_array>:
   1194c:	push	{r3, r4, r5, lr}
   1194e:	ldr	r5, [pc, #28]	; (1196c <__libc_fini_array+0x20>)
   11950:	ldr	r4, [pc, #28]	; (11970 <__libc_fini_array+0x24>)
   11952:	subs	r4, r5, r4
   11954:	asrs	r4, r4, #2
   11956:	beq.n	11964 <__libc_fini_array+0x18>
   11958:	subs	r4, #1
   1195a:	ldr.w	r3, [r5, #-4]!
   1195e:	blx	r3
   11960:	cmp	r4, #0
   11962:	bne.n	11958 <__libc_fini_array+0xc>
   11964:	ldmia.w	sp!, {r3, r4, r5, lr}
   11968:	b.w	14364 <__init_array_end>
	...

00011974 <_malloc_trim_r>:
   11974:	push	{r3, r4, r5, r6, r7, lr}
   11976:	ldr	r7, [pc, #140]	; (11a04 <_malloc_trim_r+0x90>)
   11978:	mov	r4, r1
   1197a:	mov	r6, r0
   1197c:	bl	cb44 <__malloc_lock>
   11980:	ldr	r3, [r7, #8]
   11982:	ldr	r5, [r3, #4]
   11984:	bic.w	r5, r5, #3
   11988:	subs	r1, r5, r4
   1198a:	addw	r1, r1, #4079	; 0xfef
   1198e:	bic.w	r1, r1, #4080	; 0xff0
   11992:	bic.w	r1, r1, #15
   11996:	sub.w	r4, r1, #4096	; 0x1000
   1199a:	cmp.w	r4, #4096	; 0x1000
   1199e:	blt.n	119b0 <_malloc_trim_r+0x3c>
   119a0:	movs	r1, #0
   119a2:	mov	r0, r6
   119a4:	bl	cf2c <_sbrk_r>
   119a8:	ldr	r3, [r7, #8]
   119aa:	add	r3, r5
   119ac:	cmp	r0, r3
   119ae:	beq.n	119ba <_malloc_trim_r+0x46>
   119b0:	mov	r0, r6
   119b2:	bl	cb48 <__malloc_unlock>
   119b6:	movs	r0, #0
   119b8:	pop	{r3, r4, r5, r6, r7, pc}
   119ba:	negs	r1, r4
   119bc:	mov	r0, r6
   119be:	bl	cf2c <_sbrk_r>
   119c2:	adds	r0, #1
   119c4:	beq.n	119e2 <_malloc_trim_r+0x6e>
   119c6:	ldr	r3, [pc, #64]	; (11a08 <_malloc_trim_r+0x94>)
   119c8:	ldr	r2, [r7, #8]
   119ca:	ldr	r1, [r3, #0]
   119cc:	subs	r5, r5, r4
   119ce:	orr.w	r5, r5, #1
   119d2:	mov	r0, r6
   119d4:	subs	r1, r1, r4
   119d6:	str	r5, [r2, #4]
   119d8:	str	r1, [r3, #0]
   119da:	bl	cb48 <__malloc_unlock>
   119de:	movs	r0, #1
   119e0:	pop	{r3, r4, r5, r6, r7, pc}
   119e2:	movs	r1, #0
   119e4:	mov	r0, r6
   119e6:	bl	cf2c <_sbrk_r>
   119ea:	ldr	r2, [r7, #8]
   119ec:	subs	r3, r0, r2
   119ee:	cmp	r3, #15
   119f0:	ble.n	119b0 <_malloc_trim_r+0x3c>
   119f2:	ldr	r4, [pc, #24]	; (11a0c <_malloc_trim_r+0x98>)
   119f4:	ldr	r1, [pc, #16]	; (11a08 <_malloc_trim_r+0x94>)
   119f6:	ldr	r4, [r4, #0]
   119f8:	orr.w	r3, r3, #1
   119fc:	subs	r0, r0, r4
   119fe:	str	r3, [r2, #4]
   11a00:	str	r0, [r1, #0]
   11a02:	b.n	119b0 <_malloc_trim_r+0x3c>
   11a04:	.word	0x1fff0ee8
   11a08:	.word	0x200204d8
   11a0c:	.word	0x1fff12f4

00011a10 <_free_r>:
   11a10:	cmp	r1, #0
   11a12:	beq.n	11aa0 <_free_r+0x90>
   11a14:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a18:	mov	r5, r1
   11a1a:	mov	r8, r0
   11a1c:	bl	cb44 <__malloc_lock>
   11a20:	ldr.w	r7, [r5, #-4]
   11a24:	ldr	r1, [pc, #424]	; (11bd0 <_free_r+0x1c0>)
   11a26:	bic.w	r3, r7, #1
   11a2a:	sub.w	r4, r5, #8
   11a2e:	adds	r2, r4, r3
   11a30:	ldr	r6, [r1, #8]
   11a32:	ldr	r0, [r2, #4]
   11a34:	cmp	r2, r6
   11a36:	bic.w	r0, r0, #3
   11a3a:	beq.n	11b02 <_free_r+0xf2>
   11a3c:	lsls	r6, r7, #31
   11a3e:	str	r0, [r2, #4]
   11a40:	bmi.n	11a5a <_free_r+0x4a>
   11a42:	ldr.w	r7, [r5, #-8]
   11a46:	subs	r4, r4, r7
   11a48:	add.w	lr, r1, #8
   11a4c:	ldr	r5, [r4, #8]
   11a4e:	cmp	r5, lr
   11a50:	add	r3, r7
   11a52:	beq.n	11b34 <_free_r+0x124>
   11a54:	ldr	r7, [r4, #12]
   11a56:	str	r7, [r5, #12]
   11a58:	str	r5, [r7, #8]
   11a5a:	adds	r5, r2, r0
   11a5c:	ldr	r5, [r5, #4]
   11a5e:	lsls	r5, r5, #31
   11a60:	bpl.n	11ae8 <_free_r+0xd8>
   11a62:	orr.w	r2, r3, #1
   11a66:	str	r2, [r4, #4]
   11a68:	str	r3, [r4, r3]
   11a6a:	cmp.w	r3, #512	; 0x200
   11a6e:	bcs.n	11aa2 <_free_r+0x92>
   11a70:	lsrs	r3, r3, #3
   11a72:	adds	r2, r3, #1
   11a74:	ldr	r5, [r1, #4]
   11a76:	ldr.w	r7, [r1, r2, lsl #3]
   11a7a:	str	r7, [r4, #8]
   11a7c:	movs	r0, #1
   11a7e:	asrs	r3, r3, #2
   11a80:	lsl.w	r3, r0, r3
   11a84:	add.w	r0, r1, r2, lsl #3
   11a88:	orrs	r5, r3
   11a8a:	subs	r0, #8
   11a8c:	str	r0, [r4, #12]
   11a8e:	str	r5, [r1, #4]
   11a90:	str.w	r4, [r1, r2, lsl #3]
   11a94:	str	r4, [r7, #12]
   11a96:	mov	r0, r8
   11a98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11a9c:	b.w	cb48 <__malloc_unlock>
   11aa0:	bx	lr
   11aa2:	lsrs	r2, r3, #9
   11aa4:	cmp	r2, #4
   11aa6:	bhi.n	11b50 <_free_r+0x140>
   11aa8:	lsrs	r2, r3, #6
   11aaa:	add.w	r7, r2, #57	; 0x39
   11aae:	lsls	r7, r7, #1
   11ab0:	add.w	r5, r2, #56	; 0x38
   11ab4:	add.w	r0, r1, r7, lsl #2
   11ab8:	ldr.w	r2, [r1, r7, lsl #2]
   11abc:	ldr	r1, [pc, #272]	; (11bd0 <_free_r+0x1c0>)
   11abe:	subs	r0, #8
   11ac0:	cmp	r0, r2
   11ac2:	beq.n	11b60 <_free_r+0x150>
   11ac4:	ldr	r1, [r2, #4]
   11ac6:	bic.w	r1, r1, #3
   11aca:	cmp	r3, r1
   11acc:	bcs.n	11ad4 <_free_r+0xc4>
   11ace:	ldr	r2, [r2, #8]
   11ad0:	cmp	r0, r2
   11ad2:	bne.n	11ac4 <_free_r+0xb4>
   11ad4:	ldr	r0, [r2, #12]
   11ad6:	str	r0, [r4, #12]
   11ad8:	str	r2, [r4, #8]
   11ada:	str	r4, [r0, #8]
   11adc:	str	r4, [r2, #12]
   11ade:	mov	r0, r8
   11ae0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11ae4:	b.w	cb48 <__malloc_unlock>
   11ae8:	ldr	r5, [r2, #8]
   11aea:	ldr	r7, [pc, #232]	; (11bd4 <_free_r+0x1c4>)
   11aec:	cmp	r5, r7
   11aee:	add	r3, r0
   11af0:	beq.n	11b72 <_free_r+0x162>
   11af2:	ldr	r0, [r2, #12]
   11af4:	str	r0, [r5, #12]
   11af6:	orr.w	r2, r3, #1
   11afa:	str	r5, [r0, #8]
   11afc:	str	r2, [r4, #4]
   11afe:	str	r3, [r4, r3]
   11b00:	b.n	11a6a <_free_r+0x5a>
   11b02:	lsls	r7, r7, #31
   11b04:	add	r3, r0
   11b06:	bmi.n	11b18 <_free_r+0x108>
   11b08:	ldr.w	r2, [r5, #-8]
   11b0c:	subs	r4, r4, r2
   11b0e:	add	r3, r2
   11b10:	ldr	r0, [r4, #8]
   11b12:	ldr	r2, [r4, #12]
   11b14:	str	r2, [r0, #12]
   11b16:	str	r0, [r2, #8]
   11b18:	ldr	r2, [pc, #188]	; (11bd8 <_free_r+0x1c8>)
   11b1a:	ldr	r2, [r2, #0]
   11b1c:	orr.w	r0, r3, #1
   11b20:	cmp	r3, r2
   11b22:	str	r0, [r4, #4]
   11b24:	str	r4, [r1, #8]
   11b26:	bcc.n	11a96 <_free_r+0x86>
   11b28:	ldr	r3, [pc, #176]	; (11bdc <_free_r+0x1cc>)
   11b2a:	mov	r0, r8
   11b2c:	ldr	r1, [r3, #0]
   11b2e:	bl	11974 <_malloc_trim_r>
   11b32:	b.n	11a96 <_free_r+0x86>
   11b34:	adds	r1, r2, r0
   11b36:	ldr	r1, [r1, #4]
   11b38:	lsls	r1, r1, #31
   11b3a:	bmi.n	11bc6 <_free_r+0x1b6>
   11b3c:	ldr	r1, [r2, #8]
   11b3e:	ldr	r2, [r2, #12]
   11b40:	str	r2, [r1, #12]
   11b42:	add	r3, r0
   11b44:	orr.w	r0, r3, #1
   11b48:	str	r1, [r2, #8]
   11b4a:	str	r0, [r4, #4]
   11b4c:	str	r3, [r4, r3]
   11b4e:	b.n	11a96 <_free_r+0x86>
   11b50:	cmp	r2, #20
   11b52:	bhi.n	11b84 <_free_r+0x174>
   11b54:	add.w	r7, r2, #92	; 0x5c
   11b58:	lsls	r7, r7, #1
   11b5a:	add.w	r5, r2, #91	; 0x5b
   11b5e:	b.n	11ab4 <_free_r+0xa4>
   11b60:	asrs	r2, r5, #2
   11b62:	ldr	r3, [r1, #4]
   11b64:	movs	r5, #1
   11b66:	lsl.w	r2, r5, r2
   11b6a:	orrs	r3, r2
   11b6c:	str	r3, [r1, #4]
   11b6e:	mov	r2, r0
   11b70:	b.n	11ad6 <_free_r+0xc6>
   11b72:	orr.w	r2, r3, #1
   11b76:	str	r4, [r1, #20]
   11b78:	str	r4, [r1, #16]
   11b7a:	str	r5, [r4, #12]
   11b7c:	str	r5, [r4, #8]
   11b7e:	str	r2, [r4, #4]
   11b80:	str	r3, [r4, r3]
   11b82:	b.n	11a96 <_free_r+0x86>
   11b84:	cmp	r2, #84	; 0x54
   11b86:	bhi.n	11b96 <_free_r+0x186>
   11b88:	lsrs	r2, r3, #12
   11b8a:	add.w	r7, r2, #111	; 0x6f
   11b8e:	lsls	r7, r7, #1
   11b90:	add.w	r5, r2, #110	; 0x6e
   11b94:	b.n	11ab4 <_free_r+0xa4>
   11b96:	cmp.w	r2, #340	; 0x154
   11b9a:	bhi.n	11baa <_free_r+0x19a>
   11b9c:	lsrs	r2, r3, #15
   11b9e:	add.w	r7, r2, #120	; 0x78
   11ba2:	lsls	r7, r7, #1
   11ba4:	add.w	r5, r2, #119	; 0x77
   11ba8:	b.n	11ab4 <_free_r+0xa4>
   11baa:	movw	r0, #1364	; 0x554
   11bae:	cmp	r2, r0
   11bb0:	bhi.n	11bc0 <_free_r+0x1b0>
   11bb2:	lsrs	r2, r3, #18
   11bb4:	add.w	r7, r2, #125	; 0x7d
   11bb8:	lsls	r7, r7, #1
   11bba:	add.w	r5, r2, #124	; 0x7c
   11bbe:	b.n	11ab4 <_free_r+0xa4>
   11bc0:	movs	r7, #254	; 0xfe
   11bc2:	movs	r5, #126	; 0x7e
   11bc4:	b.n	11ab4 <_free_r+0xa4>
   11bc6:	orr.w	r2, r3, #1
   11bca:	str	r2, [r4, #4]
   11bcc:	str	r3, [r4, r3]
   11bce:	b.n	11a96 <_free_r+0x86>
   11bd0:	.word	0x1fff0ee8
   11bd4:	.word	0x1fff0ef0
   11bd8:	.word	0x1fff12f0
   11bdc:	.word	0x200204d4

00011be0 <rshift>:
   11be0:	ldr	r2, [r0, #16]
   11be2:	asrs	r3, r1, #5
   11be4:	cmp	r3, r2
   11be6:	bge.n	11c46 <rshift+0x66>
   11be8:	push	{r4, r5, r6, r7, lr}
   11bea:	ands.w	r1, r1, #31
   11bee:	add.w	r6, r0, #20
   11bf2:	add.w	r2, r6, r2, lsl #2
   11bf6:	add.w	lr, r6, r3, lsl #2
   11bfa:	beq.n	11c50 <rshift+0x70>
   11bfc:	ldr.w	r3, [r6, r3, lsl #2]
   11c00:	add.w	r5, lr, #4
   11c04:	cmp	r2, r5
   11c06:	lsr.w	r4, r3, r1
   11c0a:	rsb	ip, r1, #32
   11c0e:	bls.n	11c84 <rshift+0xa4>
   11c10:	add.w	r7, r0, #16
   11c14:	ldr	r3, [r5, #0]
   11c16:	lsl.w	r3, r3, ip
   11c1a:	orrs	r3, r4
   11c1c:	str.w	r3, [r7, #4]!
   11c20:	ldr.w	r3, [r5], #4
   11c24:	cmp	r2, r5
   11c26:	lsr.w	r4, r3, r1
   11c2a:	bhi.n	11c14 <rshift+0x34>
   11c2c:	rsb	r2, lr, r2
   11c30:	subs	r2, #5
   11c32:	bic.w	r2, r2, #3
   11c36:	adds	r2, #4
   11c38:	add	r2, r6
   11c3a:	str	r4, [r2, #0]
   11c3c:	cbz	r4, 11c40 <rshift+0x60>
   11c3e:	adds	r2, #4
   11c40:	subs	r3, r2, r6
   11c42:	asrs	r3, r3, #2
   11c44:	b.n	11c74 <rshift+0x94>
   11c46:	movs	r3, #0
   11c48:	str	r3, [r0, #16]
   11c4a:	movs	r3, #0
   11c4c:	str	r3, [r0, #20]
   11c4e:	bx	lr
   11c50:	cmp	r2, lr
   11c52:	bls.n	11c7a <rshift+0x9a>
   11c54:	add.w	r4, r0, #16
   11c58:	mov	r1, lr
   11c5a:	ldr.w	r5, [r1], #4
   11c5e:	str.w	r5, [r4, #4]!
   11c62:	cmp	r2, r1
   11c64:	bhi.n	11c5a <rshift+0x7a>
   11c66:	mvn.w	r3, lr
   11c6a:	add	r3, r2
   11c6c:	bic.w	r3, r3, #3
   11c70:	adds	r3, #4
   11c72:	asrs	r3, r3, #2
   11c74:	str	r3, [r0, #16]
   11c76:	cbz	r3, 11c7e <rshift+0x9e>
   11c78:	pop	{r4, r5, r6, r7, pc}
   11c7a:	movs	r3, #0
   11c7c:	str	r3, [r0, #16]
   11c7e:	movs	r3, #0
   11c80:	str	r3, [r0, #20]
   11c82:	pop	{r4, r5, r6, r7, pc}
   11c84:	mov	r2, r6
   11c86:	b.n	11c3a <rshift+0x5a>

00011c88 <__gethex>:
   11c88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c8c:	sub	sp, #44	; 0x2c
   11c8e:	mov	r9, r1
   11c90:	str	r0, [sp, #20]
   11c92:	ldr	r0, [sp, #88]	; 0x58
   11c94:	str	r2, [sp, #12]
   11c96:	str	r3, [sp, #32]
   11c98:	bl	12364 <__localeconv_l>
   11c9c:	ldr	r3, [r0, #0]
   11c9e:	str	r3, [sp, #8]
   11ca0:	mov	r0, r3
   11ca2:	mov	r4, r3
   11ca4:	bl	d100 <strlen>
   11ca8:	ldr.w	r3, [r9]
   11cac:	str	r0, [sp, #0]
   11cae:	ldrb	r2, [r3, #2]
   11cb0:	adds	r1, r4, r0
   11cb2:	cmp	r2, #48	; 0x30
   11cb4:	ldrb.w	fp, [r1, #-1]
   11cb8:	bne.w	1200e <__gethex+0x386>
   11cbc:	adds	r3, #3
   11cbe:	mov.w	r8, #0
   11cc2:	mov	r4, r3
   11cc4:	ldrb.w	r2, [r3], #1
   11cc8:	cmp	r2, #48	; 0x30
   11cca:	add.w	r8, r8, #1
   11cce:	beq.n	11cc2 <__gethex+0x3a>
   11cd0:	ldr	r6, [pc, #712]	; (11f9c <__gethex+0x314>)
   11cd2:	ldrb	r3, [r6, r2]
   11cd4:	cmp	r3, #0
   11cd6:	beq.w	11eba <__gethex+0x232>
   11cda:	ldrb	r3, [r4, #0]
   11cdc:	mov.w	sl, #0
   11ce0:	ldrb	r3, [r6, r3]
   11ce2:	mov	r5, sl
   11ce4:	mov	r7, r4
   11ce6:	cbz	r3, 11cf2 <__gethex+0x6a>
   11ce8:	ldrb.w	r3, [r7, #1]!
   11cec:	ldrb	r3, [r6, r3]
   11cee:	cmp	r3, #0
   11cf0:	bne.n	11ce8 <__gethex+0x60>
   11cf2:	ldr	r2, [sp, #0]
   11cf4:	ldr	r1, [sp, #8]
   11cf6:	mov	r0, r7
   11cf8:	bl	d1dc <strncmp>
   11cfc:	cmp	r0, #0
   11cfe:	beq.w	11e26 <__gethex+0x19e>
   11d02:	ldrb	r3, [r7, #0]
   11d04:	cmp	r5, #0
   11d06:	beq.w	11fec <__gethex+0x364>
   11d0a:	subs	r5, r5, r7
   11d0c:	lsls	r2, r5, #2
   11d0e:	str	r2, [sp, #4]
   11d10:	cmp	r3, #80	; 0x50
   11d12:	beq.w	11e38 <__gethex+0x1b0>
   11d16:	cmp	r3, #112	; 0x70
   11d18:	beq.w	11e38 <__gethex+0x1b0>
   11d1c:	mov	r5, r7
   11d1e:	str.w	r7, [r9]
   11d22:	cmp.w	sl, #0
   11d26:	bne.w	11e98 <__gethex+0x210>
   11d2a:	subs	r3, r5, r4
   11d2c:	subs	r3, #1
   11d2e:	cmp	r3, #7
   11d30:	mov	r1, sl
   11d32:	ble.n	11d3e <__gethex+0xb6>
   11d34:	asrs	r3, r3, #1
   11d36:	cmp	r3, #7
   11d38:	add.w	r1, r1, #1
   11d3c:	bgt.n	11d34 <__gethex+0xac>
   11d3e:	ldr	r0, [sp, #20]
   11d40:	bl	12480 <_Balloc>
   11d44:	mov	r3, r0
   11d46:	adds	r3, #20
   11d48:	cmp	r5, r4
   11d4a:	str	r0, [sp, #16]
   11d4c:	str	r3, [sp, #28]
   11d4e:	bls.w	120f8 <__gethex+0x470>
   11d52:	mov	r9, r3
   11d54:	ldr	r3, [sp, #0]
   11d56:	mov.w	r8, #0
   11d5a:	rsb	r3, r3, #1
   11d5e:	mov	r7, r8
   11d60:	str	r3, [sp, #24]
   11d62:	b.n	11d84 <__gethex+0xfc>
   11d64:	cmp	r7, #32
   11d66:	beq.w	11ea8 <__gethex+0x220>
   11d6a:	mov	r2, r7
   11d6c:	adds	r7, #4
   11d6e:	ldrb.w	r3, [r5, #-1]
   11d72:	ldrb	r3, [r6, r3]
   11d74:	mov	r5, sl
   11d76:	and.w	r3, r3, #15
   11d7a:	lsls	r3, r2
   11d7c:	cmp	r5, r4
   11d7e:	orr.w	r8, r8, r3
   11d82:	bls.n	11db0 <__gethex+0x128>
   11d84:	ldrb.w	r3, [r5, #-1]
   11d88:	cmp	r3, fp
   11d8a:	add.w	sl, r5, #4294967295
   11d8e:	bne.n	11d64 <__gethex+0xdc>
   11d90:	ldr	r3, [sp, #24]
   11d92:	add	r3, sl
   11d94:	cmp	r3, r4
   11d96:	bcc.n	11d64 <__gethex+0xdc>
   11d98:	mov	r0, r3
   11d9a:	ldr	r2, [sp, #0]
   11d9c:	ldr	r1, [sp, #8]
   11d9e:	str	r3, [sp, #36]	; 0x24
   11da0:	bl	d1dc <strncmp>
   11da4:	ldr	r3, [sp, #36]	; 0x24
   11da6:	cmp	r0, #0
   11da8:	bne.n	11d64 <__gethex+0xdc>
   11daa:	mov	r5, r3
   11dac:	cmp	r5, r4
   11dae:	bhi.n	11d84 <__gethex+0xfc>
   11db0:	str.w	r8, [r9], #4
   11db4:	ldr	r3, [sp, #28]
   11db6:	ldr	r2, [sp, #16]
   11db8:	rsb	r9, r3, r9
   11dbc:	mov.w	r3, r9, asr #2
   11dc0:	str	r3, [r2, #16]
   11dc2:	mov	r0, r8
   11dc4:	mov.w	r9, r3, lsl #5
   11dc8:	bl	125f8 <__hi0bits>
   11dcc:	ldr	r3, [sp, #12]
   11dce:	ldr	r6, [r3, #0]
   11dd0:	rsb	r0, r0, r9
   11dd4:	cmp	r0, r6
   11dd6:	bgt.w	11fa0 <__gethex+0x318>
   11dda:	blt.w	11ff0 <__gethex+0x368>
   11dde:	movs	r7, #0
   11de0:	ldr	r3, [sp, #12]
   11de2:	ldr	r2, [sp, #4]
   11de4:	ldr	r3, [r3, #8]
   11de6:	cmp	r2, r3
   11de8:	bgt.w	11f1a <__gethex+0x292>
   11dec:	ldr	r0, [sp, #12]
   11dee:	ldr	r1, [sp, #4]
   11df0:	ldr	r3, [r0, #4]
   11df2:	cmp	r1, r3
   11df4:	bge.w	11f62 <__gethex+0x2da>
   11df8:	subs	r5, r3, r1
   11dfa:	cmp	r6, r5
   11dfc:	bgt.w	1201e <__gethex+0x396>
   11e00:	ldr	r2, [r0, #12]
   11e02:	cmp	r2, #2
   11e04:	beq.w	12106 <__gethex+0x47e>
   11e08:	cmp	r2, #3
   11e0a:	beq.w	120c6 <__gethex+0x43e>
   11e0e:	cmp	r2, #1
   11e10:	beq.w	1210e <__gethex+0x486>
   11e14:	ldr	r0, [sp, #20]
   11e16:	ldr	r1, [sp, #16]
   11e18:	bl	124cc <_Bfree>
   11e1c:	ldr	r2, [sp, #80]	; 0x50
   11e1e:	movs	r3, #0
   11e20:	str	r3, [r2, #0]
   11e22:	movs	r0, #80	; 0x50
   11e24:	b.n	11ea2 <__gethex+0x21a>
   11e26:	cmp	r5, #0
   11e28:	beq.w	1205e <__gethex+0x3d6>
   11e2c:	ldrb	r3, [r7, #0]
   11e2e:	b.n	11d0a <__gethex+0x82>
   11e30:	movs	r3, #0
   11e32:	str	r3, [sp, #4]
   11e34:	mov.w	sl, #1
   11e38:	ldrb	r3, [r7, #1]
   11e3a:	cmp	r3, #43	; 0x2b
   11e3c:	beq.w	11f98 <__gethex+0x310>
   11e40:	cmp	r3, #45	; 0x2d
   11e42:	beq.n	11f30 <__gethex+0x2a8>
   11e44:	adds	r1, r7, #1
   11e46:	movs	r5, #0
   11e48:	ldrb	r3, [r6, r3]
   11e4a:	ldr	r0, [pc, #336]	; (11f9c <__gethex+0x314>)
   11e4c:	subs	r2, r3, #1
   11e4e:	cmp	r2, #24
   11e50:	bhi.w	11d1c <__gethex+0x94>
   11e54:	ldrb	r2, [r1, #1]
   11e56:	ldrb	r2, [r0, r2]
   11e58:	subs	r0, r2, #1
   11e5a:	cmp	r0, #24
   11e5c:	sub.w	r3, r3, #16
   11e60:	add.w	r1, r1, #1
   11e64:	bhi.n	11e7e <__gethex+0x1f6>
   11e66:	ldrb.w	r0, [r1, #1]!
   11e6a:	add.w	r3, r3, r3, lsl #2
   11e6e:	add.w	r3, r2, r3, lsl #1
   11e72:	ldrb	r2, [r6, r0]
   11e74:	subs	r0, r2, #1
   11e76:	cmp	r0, #24
   11e78:	sub.w	r3, r3, #16
   11e7c:	bls.n	11e66 <__gethex+0x1de>
   11e7e:	cbz	r5, 11e82 <__gethex+0x1fa>
   11e80:	negs	r3, r3
   11e82:	ldr	r2, [sp, #4]
   11e84:	mov	r5, r7
   11e86:	add	r2, r3
   11e88:	mov	r7, r1
   11e8a:	str	r2, [sp, #4]
   11e8c:	str.w	r7, [r9]
   11e90:	cmp.w	sl, #0
   11e94:	beq.w	11d2a <__gethex+0xa2>
   11e98:	cmp.w	r8, #0
   11e9c:	ite	eq
   11e9e:	moveq	r0, #6
   11ea0:	movne	r0, #0
   11ea2:	add	sp, #44	; 0x2c
   11ea4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ea8:	str.w	r8, [r9]
   11eac:	mov.w	r8, #0
   11eb0:	add.w	r9, r9, #4
   11eb4:	mov	r2, r8
   11eb6:	movs	r7, #4
   11eb8:	b.n	11d6e <__gethex+0xe6>
   11eba:	ldr	r5, [sp, #0]
   11ebc:	ldr	r1, [sp, #8]
   11ebe:	mov	r2, r5
   11ec0:	mov	r0, r4
   11ec2:	bl	d1dc <strncmp>
   11ec6:	cmp	r0, #0
   11ec8:	beq.n	11f38 <__gethex+0x2b0>
   11eca:	ldrb	r3, [r4, #0]
   11ecc:	mov	r7, r4
   11ece:	cmp	r3, #80	; 0x50
   11ed0:	beq.n	11e30 <__gethex+0x1a8>
   11ed2:	cmp	r3, #112	; 0x70
   11ed4:	beq.n	11e30 <__gethex+0x1a8>
   11ed6:	str.w	r7, [r9]
   11eda:	b.n	11e98 <__gethex+0x210>
   11edc:	ldr	r3, [sp, #16]
   11ede:	ldr	r3, [r3, #8]
   11ee0:	cmp	r7, r3
   11ee2:	bge.w	1214e <__gethex+0x4c6>
   11ee6:	mov	r3, r7
   11ee8:	ldr	r0, [sp, #16]
   11eea:	add.w	r2, r0, r3, lsl #2
   11eee:	movs	r1, #1
   11ef0:	adds	r3, #1
   11ef2:	cmp	r4, #2
   11ef4:	str	r3, [r0, #16]
   11ef6:	str	r1, [r2, #20]
   11ef8:	beq.w	1212c <__gethex+0x4a4>
   11efc:	cmp	r7, r3
   11efe:	bge.w	120b8 <__gethex+0x430>
   11f02:	movs	r1, #1
   11f04:	ldr	r0, [sp, #16]
   11f06:	bl	11be0 <rshift>
   11f0a:	ldr	r3, [sp, #12]
   11f0c:	ldr	r2, [sp, #4]
   11f0e:	ldr	r3, [r3, #8]
   11f10:	adds	r2, #1
   11f12:	cmp	r2, r3
   11f14:	str	r2, [sp, #4]
   11f16:	ble.w	120be <__gethex+0x436>
   11f1a:	ldr	r0, [sp, #20]
   11f1c:	ldr	r1, [sp, #16]
   11f1e:	bl	124cc <_Bfree>
   11f22:	ldr	r2, [sp, #80]	; 0x50
   11f24:	movs	r3, #0
   11f26:	movs	r0, #163	; 0xa3
   11f28:	str	r3, [r2, #0]
   11f2a:	add	sp, #44	; 0x2c
   11f2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f30:	movs	r5, #1
   11f32:	ldrb	r3, [r7, #2]
   11f34:	adds	r1, r7, #2
   11f36:	b.n	11e48 <__gethex+0x1c0>
   11f38:	ldrb	r2, [r4, r5]
   11f3a:	ldrb	r3, [r6, r2]
   11f3c:	adds	r7, r4, r5
   11f3e:	cmp	r3, #0
   11f40:	beq.n	12016 <__gethex+0x38e>
   11f42:	cmp	r2, #48	; 0x30
   11f44:	mov	r4, r7
   11f46:	bne.n	11f52 <__gethex+0x2ca>
   11f48:	ldrb.w	r3, [r4, #1]!
   11f4c:	cmp	r3, #48	; 0x30
   11f4e:	beq.n	11f48 <__gethex+0x2c0>
   11f50:	ldrb	r3, [r6, r3]
   11f52:	clz	sl, r3
   11f56:	mov	r5, r7
   11f58:	mov.w	sl, sl, lsr #5
   11f5c:	mov.w	r8, #1
   11f60:	b.n	11ce4 <__gethex+0x5c>
   11f62:	movs	r4, #1
   11f64:	cbz	r7, 11f80 <__gethex+0x2f8>
   11f66:	ldr	r3, [sp, #12]
   11f68:	ldr	r3, [r3, #12]
   11f6a:	cmp	r3, #2
   11f6c:	beq.w	1207a <__gethex+0x3f2>
   11f70:	cmp	r3, #3
   11f72:	beq.w	12082 <__gethex+0x3fa>
   11f76:	cmp	r3, #1
   11f78:	beq.w	120e6 <__gethex+0x45e>
   11f7c:	orr.w	r4, r4, #16
   11f80:	ldr	r3, [sp, #80]	; 0x50
   11f82:	mov	r2, r3
   11f84:	ldr	r3, [sp, #16]
   11f86:	str	r3, [r2, #0]
   11f88:	ldr	r3, [sp, #32]
   11f8a:	mov	r2, r3
   11f8c:	ldr	r3, [sp, #4]
   11f8e:	str	r3, [r2, #0]
   11f90:	mov	r0, r4
   11f92:	add	sp, #44	; 0x2c
   11f94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f98:	movs	r5, #0
   11f9a:	b.n	11f32 <__gethex+0x2aa>
   11f9c:	.word	0x0001414c
   11fa0:	subs	r4, r0, r6
   11fa2:	mov	r1, r4
   11fa4:	ldr	r0, [sp, #16]
   11fa6:	bl	12d08 <__any_on>
   11faa:	cmp	r0, #0
   11fac:	beq.n	1201a <__gethex+0x392>
   11fae:	subs	r2, r4, #1
   11fb0:	asrs	r1, r2, #5
   11fb2:	ldr	r0, [sp, #28]
   11fb4:	and.w	r3, r2, #31
   11fb8:	ldr.w	r1, [r0, r1, lsl #2]
   11fbc:	movs	r7, #1
   11fbe:	lsl.w	r3, r7, r3
   11fc2:	tst	r3, r1
   11fc4:	beq.n	11fdc <__gethex+0x354>
   11fc6:	cmp	r2, r7
   11fc8:	ble.w	12102 <__gethex+0x47a>
   11fcc:	subs	r1, r4, #2
   11fce:	ldr	r0, [sp, #16]
   11fd0:	bl	12d08 <__any_on>
   11fd4:	cmp	r0, #0
   11fd6:	beq.w	12102 <__gethex+0x47a>
   11fda:	movs	r7, #3
   11fdc:	ldr	r3, [sp, #4]
   11fde:	ldr	r0, [sp, #16]
   11fe0:	add	r3, r4
   11fe2:	mov	r1, r4
   11fe4:	str	r3, [sp, #4]
   11fe6:	bl	11be0 <rshift>
   11fea:	b.n	11de0 <__gethex+0x158>
   11fec:	str	r5, [sp, #4]
   11fee:	b.n	11d10 <__gethex+0x88>
   11ff0:	subs	r4, r6, r0
   11ff2:	ldr	r1, [sp, #16]
   11ff4:	ldr	r0, [sp, #20]
   11ff6:	mov	r2, r4
   11ff8:	bl	12878 <__lshift>
   11ffc:	ldr	r3, [sp, #4]
   11ffe:	str	r0, [sp, #16]
   12000:	subs	r3, r3, r4
   12002:	str	r3, [sp, #4]
   12004:	mov	r3, r0
   12006:	adds	r3, #20
   12008:	str	r3, [sp, #28]
   1200a:	movs	r7, #0
   1200c:	b.n	11de0 <__gethex+0x158>
   1200e:	adds	r4, r3, #2
   12010:	mov.w	r8, #0
   12014:	b.n	11cd0 <__gethex+0x48>
   12016:	mov	r3, r2
   12018:	b.n	11ece <__gethex+0x246>
   1201a:	mov	r7, r0
   1201c:	b.n	11fdc <__gethex+0x354>
   1201e:	subs	r4, r5, #1
   12020:	cmp	r7, #0
   12022:	bne.n	120c2 <__gethex+0x43a>
   12024:	cbz	r4, 12030 <__gethex+0x3a8>
   12026:	mov	r1, r4
   12028:	ldr	r0, [sp, #16]
   1202a:	bl	12d08 <__any_on>
   1202e:	mov	r7, r0
   12030:	asrs	r3, r4, #5
   12032:	ldr	r2, [sp, #28]
   12034:	ldr	r0, [sp, #16]
   12036:	ldr.w	r2, [r2, r3, lsl #2]
   1203a:	and.w	r4, r4, #31
   1203e:	movs	r3, #1
   12040:	lsl.w	r4, r3, r4
   12044:	tst	r4, r2
   12046:	mov	r1, r5
   12048:	it	ne
   1204a:	orrne.w	r7, r7, #2
   1204e:	bl	11be0 <rshift>
   12052:	ldr	r3, [sp, #12]
   12054:	ldr	r3, [r3, #4]
   12056:	str	r3, [sp, #4]
   12058:	subs	r6, r6, r5
   1205a:	movs	r4, #2
   1205c:	b.n	11f64 <__gethex+0x2dc>
   1205e:	ldr	r1, [sp, #0]
   12060:	ldrb	r3, [r7, r1]
   12062:	ldrb	r2, [r6, r3]
   12064:	adds	r5, r7, r1
   12066:	mov	r7, r5
   12068:	cmp	r2, #0
   1206a:	beq.w	11d0a <__gethex+0x82>
   1206e:	ldrb.w	r3, [r7, #1]!
   12072:	ldrb	r2, [r6, r3]
   12074:	cmp	r2, #0
   12076:	bne.n	1206e <__gethex+0x3e6>
   12078:	b.n	11d0a <__gethex+0x82>
   1207a:	ldr	r3, [sp, #84]	; 0x54
   1207c:	rsb	r3, r3, #1
   12080:	str	r3, [sp, #84]	; 0x54
   12082:	ldr	r3, [sp, #84]	; 0x54
   12084:	cmp	r3, #0
   12086:	beq.w	11f7c <__gethex+0x2f4>
   1208a:	ldr	r3, [sp, #16]
   1208c:	ldr	r5, [sp, #28]
   1208e:	ldr	r7, [r3, #16]
   12090:	mov.w	r8, r7, lsl #2
   12094:	add.w	r0, r5, r8
   12098:	mov	r3, r5
   1209a:	movs	r1, #0
   1209c:	b.n	120a8 <__gethex+0x420>
   1209e:	str.w	r1, [r3], #4
   120a2:	cmp	r0, r3
   120a4:	bls.w	11edc <__gethex+0x254>
   120a8:	ldr	r2, [r3, #0]
   120aa:	cmp.w	r2, #4294967295
   120ae:	beq.n	1209e <__gethex+0x416>
   120b0:	adds	r2, #1
   120b2:	cmp	r4, #2
   120b4:	str	r2, [r3, #0]
   120b6:	beq.n	1212c <__gethex+0x4a4>
   120b8:	ands.w	r6, r6, #31
   120bc:	bne.n	1213a <__gethex+0x4b2>
   120be:	movs	r4, #33	; 0x21
   120c0:	b.n	11f80 <__gethex+0x2f8>
   120c2:	movs	r7, #1
   120c4:	b.n	12030 <__gethex+0x3a8>
   120c6:	ldr	r2, [sp, #84]	; 0x54
   120c8:	cmp	r2, #0
   120ca:	beq.w	11e14 <__gethex+0x18c>
   120ce:	ldr	r1, [sp, #32]
   120d0:	str	r3, [r1, #0]
   120d2:	ldr	r3, [sp, #28]
   120d4:	ldr	r1, [sp, #16]
   120d6:	movs	r2, #1
   120d8:	str	r2, [r1, #16]
   120da:	str	r2, [r3, #0]
   120dc:	ldr	r3, [sp, #80]	; 0x50
   120de:	mov	r2, r3
   120e0:	movs	r0, #98	; 0x62
   120e2:	str	r1, [r2, #0]
   120e4:	b.n	11ea2 <__gethex+0x21a>
   120e6:	lsls	r2, r7, #30
   120e8:	bpl.w	11f7c <__gethex+0x2f4>
   120ec:	ldr	r3, [sp, #28]
   120ee:	ldr	r3, [r3, #0]
   120f0:	orrs	r3, r7
   120f2:	lsls	r3, r3, #31
   120f4:	bmi.n	1208a <__gethex+0x402>
   120f6:	b.n	11f7c <__gethex+0x2f4>
   120f8:	ldr.w	r9, [sp, #28]
   120fc:	mov.w	r8, #0
   12100:	b.n	11db0 <__gethex+0x128>
   12102:	movs	r7, #2
   12104:	b.n	11fdc <__gethex+0x354>
   12106:	ldr	r2, [sp, #84]	; 0x54
   12108:	cmp	r2, #0
   1210a:	beq.n	120ce <__gethex+0x446>
   1210c:	b.n	11e14 <__gethex+0x18c>
   1210e:	cmp	r6, r5
   12110:	bne.w	11e14 <__gethex+0x18c>
   12114:	cmp	r6, #1
   12116:	ble.n	120ce <__gethex+0x446>
   12118:	subs	r1, r6, #1
   1211a:	ldr	r0, [sp, #16]
   1211c:	bl	12d08 <__any_on>
   12120:	cmp	r0, #0
   12122:	beq.w	11e14 <__gethex+0x18c>
   12126:	ldr	r3, [sp, #12]
   12128:	ldr	r3, [r3, #4]
   1212a:	b.n	120ce <__gethex+0x446>
   1212c:	ldr	r3, [sp, #12]
   1212e:	ldr	r3, [r3, #0]
   12130:	subs	r3, #1
   12132:	cmp	r6, r3
   12134:	beq.n	12180 <__gethex+0x4f8>
   12136:	movs	r4, #34	; 0x22
   12138:	b.n	11f80 <__gethex+0x2f8>
   1213a:	add	r5, r8
   1213c:	rsb	r6, r6, #32
   12140:	ldr.w	r0, [r5, #-4]
   12144:	bl	125f8 <__hi0bits>
   12148:	cmp	r0, r6
   1214a:	bge.n	120be <__gethex+0x436>
   1214c:	b.n	11f02 <__gethex+0x27a>
   1214e:	ldr	r3, [sp, #16]
   12150:	ldr.w	r9, [sp, #20]
   12154:	ldr	r1, [r3, #4]
   12156:	mov	r0, r9
   12158:	adds	r1, #1
   1215a:	bl	12480 <_Balloc>
   1215e:	ldr	r1, [sp, #16]
   12160:	ldr	r3, [r1, #16]
   12162:	adds	r2, r3, #2
   12164:	mov	r5, r0
   12166:	lsls	r2, r2, #2
   12168:	adds	r1, #12
   1216a:	adds	r0, #12
   1216c:	bl	9324 <memcpy>
   12170:	ldr	r1, [sp, #16]
   12172:	mov	r0, r9
   12174:	bl	124cc <_Bfree>
   12178:	str	r5, [sp, #16]
   1217a:	ldr	r3, [r5, #16]
   1217c:	adds	r5, #20
   1217e:	b.n	11ee8 <__gethex+0x260>
   12180:	asrs	r3, r6, #5
   12182:	and.w	r6, r6, #31
   12186:	ldr.w	r2, [r5, r3, lsl #2]
   1218a:	movs	r3, #1
   1218c:	lsls	r3, r6
   1218e:	tst	r3, r2
   12190:	ite	ne
   12192:	movne	r4, #33	; 0x21
   12194:	moveq	r4, #34	; 0x22
   12196:	b.n	11f80 <__gethex+0x2f8>

00012198 <__match>:
   12198:	push	{r4, r5}
   1219a:	ldr	r4, [r0, #0]
   1219c:	b.n	121b0 <__match+0x18>
   1219e:	ldrb.w	r3, [r4, #1]!
   121a2:	sub.w	r5, r3, #65	; 0x41
   121a6:	cmp	r5, #25
   121a8:	it	ls
   121aa:	addls	r3, #32
   121ac:	cmp	r3, r2
   121ae:	bne.n	121c2 <__match+0x2a>
   121b0:	ldrb.w	r2, [r1], #1
   121b4:	cmp	r2, #0
   121b6:	bne.n	1219e <__match+0x6>
   121b8:	adds	r4, #1
   121ba:	str	r4, [r0, #0]
   121bc:	movs	r0, #1
   121be:	pop	{r4, r5}
   121c0:	bx	lr
   121c2:	movs	r0, #0
   121c4:	pop	{r4, r5}
   121c6:	bx	lr

000121c8 <__hexnan>:
   121c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121cc:	ldr	r3, [r1, #0]
   121ce:	ldr.w	r9, [pc, #372]	; 12344 <__hexnan+0x17c>
   121d2:	sub	sp, #20
   121d4:	asrs	r1, r3, #5
   121d6:	add.w	r1, r2, r1, lsl #2
   121da:	ands.w	r3, r3, #31
   121de:	str	r1, [sp, #4]
   121e0:	itt	ne
   121e2:	addne	r1, #4
   121e4:	strne	r1, [sp, #4]
   121e6:	ldr	r4, [sp, #4]
   121e8:	str	r0, [sp, #8]
   121ea:	str	r3, [sp, #12]
   121ec:	movs	r3, #0
   121ee:	mov	r1, r3
   121f0:	str.w	r3, [r4, #-4]
   121f4:	mov	sl, r3
   121f6:	mov	lr, r3
   121f8:	ldr	r3, [sp, #8]
   121fa:	sub.w	ip, r4, #4
   121fe:	ldr	r5, [r3, #0]
   12200:	mov	r8, ip
   12202:	mov	r0, ip
   12204:	ldrb.w	r3, [r5, #1]!
   12208:	cbz	r3, 12254 <__hexnan+0x8c>
   1220a:	ldrb.w	r4, [r9, r3]
   1220e:	cmp	r4, #0
   12210:	bne.n	1229a <__hexnan+0xd2>
   12212:	cmp	r3, #32
   12214:	bhi.n	122d2 <__hexnan+0x10a>
   12216:	cmp	lr, sl
   12218:	ble.n	12204 <__hexnan+0x3c>
   1221a:	cmp	r0, r8
   1221c:	bcs.n	12246 <__hexnan+0x7e>
   1221e:	cmp	r1, #7
   12220:	bgt.n	12246 <__hexnan+0x7e>
   12222:	rsb	r1, r1, #8
   12226:	lsls	r1, r1, #2
   12228:	ldr	r6, [r0, #0]
   1222a:	rsb	fp, r1, #32
   1222e:	mov	r3, r0
   12230:	ldr	r7, [r3, #4]
   12232:	lsl.w	r4, r7, fp
   12236:	orrs	r4, r6
   12238:	lsr.w	r6, r7, r1
   1223c:	str	r4, [r3, #0]
   1223e:	str.w	r6, [r3, #4]!
   12242:	cmp	r8, r3
   12244:	bhi.n	12230 <__hexnan+0x68>
   12246:	cmp	r0, r2
   12248:	bhi.n	122c0 <__hexnan+0xf8>
   1224a:	ldrb.w	r3, [r5, #1]!
   1224e:	movs	r1, #8
   12250:	cmp	r3, #0
   12252:	bne.n	1220a <__hexnan+0x42>
   12254:	cmp.w	lr, #0
   12258:	beq.n	122d6 <__hexnan+0x10e>
   1225a:	cmp	r0, r8
   1225c:	bcs.n	12262 <__hexnan+0x9a>
   1225e:	cmp	r1, #7
   12260:	ble.n	1231c <__hexnan+0x154>
   12262:	cmp	r0, r2
   12264:	bls.n	122de <__hexnan+0x116>
   12266:	mov	r3, r2
   12268:	ldr.w	r1, [r0], #4
   1226c:	str.w	r1, [r3], #4
   12270:	cmp	ip, r0
   12272:	bcs.n	12268 <__hexnan+0xa0>
   12274:	movs	r1, #0
   12276:	str.w	r1, [r3], #4
   1227a:	cmp	ip, r3
   1227c:	bcs.n	12276 <__hexnan+0xae>
   1227e:	ldr	r3, [sp, #4]
   12280:	ldr.w	r3, [r3, #-4]
   12284:	cbnz	r3, 12292 <__hexnan+0xca>
   12286:	cmp	r2, ip
   12288:	beq.n	12300 <__hexnan+0x138>
   1228a:	ldr.w	r3, [ip, #-4]!
   1228e:	cmp	r3, #0
   12290:	beq.n	12286 <__hexnan+0xbe>
   12292:	movs	r0, #5
   12294:	add	sp, #20
   12296:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1229a:	adds	r1, #1
   1229c:	cmp	r1, #8
   1229e:	add.w	lr, lr, #1
   122a2:	ble.n	122b2 <__hexnan+0xea>
   122a4:	cmp	r0, r2
   122a6:	bls.n	12204 <__hexnan+0x3c>
   122a8:	movs	r3, #0
   122aa:	str.w	r3, [r0, #-4]
   122ae:	movs	r1, #1
   122b0:	subs	r0, #4
   122b2:	ldr	r3, [r0, #0]
   122b4:	and.w	r4, r4, #15
   122b8:	orr.w	r4, r4, r3, lsl #4
   122bc:	str	r4, [r0, #0]
   122be:	b.n	12204 <__hexnan+0x3c>
   122c0:	movs	r3, #0
   122c2:	sub.w	r8, r0, #4
   122c6:	str.w	r3, [r0, #-4]
   122ca:	mov	sl, lr
   122cc:	mov	r0, r8
   122ce:	mov	r1, r3
   122d0:	b.n	12204 <__hexnan+0x3c>
   122d2:	cmp	r3, #41	; 0x29
   122d4:	beq.n	1230e <__hexnan+0x146>
   122d6:	movs	r0, #4
   122d8:	add	sp, #20
   122da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122de:	ldr	r3, [sp, #12]
   122e0:	cmp	r3, #0
   122e2:	beq.n	1227e <__hexnan+0xb6>
   122e4:	ldr	r4, [sp, #4]
   122e6:	ldr	r3, [sp, #12]
   122e8:	ldr.w	r1, [r4, #-4]
   122ec:	rsb	r3, r3, #32
   122f0:	mov.w	r0, #4294967295
   122f4:	lsr.w	r3, r0, r3
   122f8:	ands	r3, r1
   122fa:	str.w	r3, [r4, #-4]
   122fe:	b.n	12284 <__hexnan+0xbc>
   12300:	movs	r3, #1
   12302:	movs	r0, #5
   12304:	str.w	r3, [ip]
   12308:	add	sp, #20
   1230a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1230e:	ldr	r3, [sp, #8]
   12310:	adds	r5, #1
   12312:	str	r5, [r3, #0]
   12314:	cmp.w	lr, #0
   12318:	bne.n	1225a <__hexnan+0x92>
   1231a:	b.n	122d6 <__hexnan+0x10e>
   1231c:	rsb	r3, r1, #8
   12320:	lsls	r3, r3, #2
   12322:	ldr	r5, [r0, #0]
   12324:	rsb	r7, r3, #32
   12328:	mov	r1, r0
   1232a:	ldr	r6, [r1, #4]
   1232c:	lsl.w	r4, r6, r7
   12330:	orrs	r4, r5
   12332:	lsr.w	r5, r6, r3
   12336:	str	r4, [r1, #0]
   12338:	str.w	r5, [r1, #4]!
   1233c:	cmp	r8, r1
   1233e:	bhi.n	1232a <__hexnan+0x162>
   12340:	b.n	12262 <__hexnan+0x9a>
   12342:	nop
   12344:	.word	0x0001414c

00012348 <iswspace>:
   12348:	cmp	r0, #255	; 0xff
   1234a:	bls.n	12350 <iswspace+0x8>
   1234c:	movs	r0, #0
   1234e:	bx	lr
   12350:	push	{r4, lr}
   12352:	mov	r4, r0
   12354:	bl	c3ac <__locale_ctype_ptr>
   12358:	add	r0, r4
   1235a:	ldrb	r0, [r0, #1]
   1235c:	and.w	r0, r0, #8
   12360:	uxtb	r0, r0
   12362:	pop	{r4, pc}

00012364 <__localeconv_l>:
   12364:	adds	r0, #240	; 0xf0
   12366:	bx	lr

00012368 <_localeconv_r>:
   12368:	ldr	r2, [pc, #16]	; (1237c <_localeconv_r+0x14>)
   1236a:	ldr	r3, [pc, #20]	; (12380 <_localeconv_r+0x18>)
   1236c:	ldr	r2, [r2, #0]
   1236e:	ldr	r0, [r2, #52]	; 0x34
   12370:	cmp	r0, #0
   12372:	it	eq
   12374:	moveq	r0, r3
   12376:	adds	r0, #240	; 0xf0
   12378:	bx	lr
   1237a:	nop
   1237c:	.word	0x1fff0d78
   12380:	.word	0x1fff0d7c

00012384 <_mbrtowc_r>:
   12384:	push	{r4, r5, r6, r7, lr}
   12386:	sub	sp, #12
   12388:	mov	r7, r0
   1238a:	ldr	r5, [sp, #32]
   1238c:	cbz	r2, 123b4 <_mbrtowc_r+0x30>
   1238e:	ldr	r4, [pc, #68]	; (123d4 <_mbrtowc_r+0x50>)
   12390:	ldr	r6, [pc, #68]	; (123d8 <_mbrtowc_r+0x54>)
   12392:	ldr	r4, [r4, #0]
   12394:	ldr	r4, [r4, #52]	; 0x34
   12396:	str	r5, [sp, #0]
   12398:	cmp	r4, #0
   1239a:	it	eq
   1239c:	moveq	r4, r6
   1239e:	ldr.w	r4, [r4, #228]	; 0xe4
   123a2:	blx	r4
   123a4:	adds	r3, r0, #1
   123a6:	bne.n	123b0 <_mbrtowc_r+0x2c>
   123a8:	movs	r2, #0
   123aa:	movs	r3, #138	; 0x8a
   123ac:	str	r2, [r5, #0]
   123ae:	str	r3, [r7, #0]
   123b0:	add	sp, #12
   123b2:	pop	{r4, r5, r6, r7, pc}
   123b4:	ldr	r3, [pc, #28]	; (123d4 <_mbrtowc_r+0x50>)
   123b6:	ldr	r1, [pc, #32]	; (123d8 <_mbrtowc_r+0x54>)
   123b8:	ldr	r3, [r3, #0]
   123ba:	ldr	r3, [r3, #52]	; 0x34
   123bc:	str	r5, [sp, #0]
   123be:	cmp	r3, #0
   123c0:	it	eq
   123c2:	moveq	r3, r1
   123c4:	mov	r4, r2
   123c6:	mov	r1, r4
   123c8:	ldr	r2, [pc, #16]	; (123dc <_mbrtowc_r+0x58>)
   123ca:	ldr.w	r4, [r3, #228]	; 0xe4
   123ce:	movs	r3, #1
   123d0:	blx	r4
   123d2:	b.n	123a4 <_mbrtowc_r+0x20>
   123d4:	.word	0x1fff0d78
   123d8:	.word	0x1fff0d7c
   123dc:	.word	0x00013acc

000123e0 <memchr>:
   123e0:	and.w	r1, r1, #255	; 0xff
   123e4:	cmp	r2, #16
   123e6:	blt.n	12440 <memchr+0x60>
   123e8:	tst.w	r0, #7
   123ec:	beq.n	12400 <memchr+0x20>
   123ee:	ldrb.w	r3, [r0], #1
   123f2:	subs	r2, #1
   123f4:	cmp	r3, r1
   123f6:	beq.n	12454 <memchr+0x74>
   123f8:	tst.w	r0, #7
   123fc:	cbz	r2, 12450 <memchr+0x70>
   123fe:	bne.n	123ee <memchr+0xe>
   12400:	push	{r4, r5, r6, r7}
   12402:	orr.w	r1, r1, r1, lsl #8
   12406:	orr.w	r1, r1, r1, lsl #16
   1240a:	bic.w	r4, r2, #7
   1240e:	mvns.w	r7, #0
   12412:	movs	r3, #0
   12414:	ldrd	r5, r6, [r0], #8
   12418:	subs	r4, #8
   1241a:	eor.w	r5, r5, r1
   1241e:	eor.w	r6, r6, r1
   12422:	uadd8	r5, r5, r7
   12426:	sel	r5, r3, r7
   1242a:	uadd8	r6, r6, r7
   1242e:	sel	r6, r5, r7
   12432:	cbnz	r6, 12458 <memchr+0x78>
   12434:	bne.n	12414 <memchr+0x34>
   12436:	pop	{r4, r5, r6, r7}
   12438:	and.w	r1, r1, #255	; 0xff
   1243c:	and.w	r2, r2, #7
   12440:	cbz	r2, 12450 <memchr+0x70>
   12442:	ldrb.w	r3, [r0], #1
   12446:	subs	r2, #1
   12448:	eor.w	r3, r3, r1
   1244c:	cbz	r3, 12454 <memchr+0x74>
   1244e:	bne.n	12442 <memchr+0x62>
   12450:	movs	r0, #0
   12452:	bx	lr
   12454:	subs	r0, #1
   12456:	bx	lr
   12458:	cmp	r5, #0
   1245a:	itte	eq
   1245c:	moveq	r5, r6
   1245e:	subeq	r0, #3
   12460:	subne	r0, #7
   12462:	tst.w	r5, #1
   12466:	bne.n	12478 <memchr+0x98>
   12468:	adds	r0, #1
   1246a:	tst.w	r5, #256	; 0x100
   1246e:	ittt	eq
   12470:	addeq	r0, #1
   12472:	tsteq.w	r5, #98304	; 0x18000
   12476:	addeq	r0, #1
   12478:	pop	{r4, r5, r6, r7}
   1247a:	subs	r0, #1
   1247c:	bx	lr
   1247e:	nop

00012480 <_Balloc>:
   12480:	ldr	r3, [r0, #76]	; 0x4c
   12482:	push	{r4, r5, r6, lr}
   12484:	mov	r5, r0
   12486:	mov	r4, r1
   12488:	cbz	r3, 1249e <_Balloc+0x1e>
   1248a:	ldr.w	r0, [r3, r4, lsl #2]
   1248e:	cbz	r0, 124b2 <_Balloc+0x32>
   12490:	ldr	r2, [r0, #0]
   12492:	str.w	r2, [r3, r4, lsl #2]
   12496:	movs	r3, #0
   12498:	str	r3, [r0, #16]
   1249a:	str	r3, [r0, #12]
   1249c:	pop	{r4, r5, r6, pc}
   1249e:	movs	r2, #33	; 0x21
   124a0:	movs	r1, #4
   124a2:	bl	13670 <_calloc_r>
   124a6:	str	r0, [r5, #76]	; 0x4c
   124a8:	mov	r3, r0
   124aa:	cmp	r0, #0
   124ac:	bne.n	1248a <_Balloc+0xa>
   124ae:	movs	r0, #0
   124b0:	pop	{r4, r5, r6, pc}
   124b2:	movs	r1, #1
   124b4:	lsl.w	r6, r1, r4
   124b8:	adds	r2, r6, #5
   124ba:	mov	r0, r5
   124bc:	lsls	r2, r2, #2
   124be:	bl	13670 <_calloc_r>
   124c2:	cmp	r0, #0
   124c4:	beq.n	124ae <_Balloc+0x2e>
   124c6:	str	r4, [r0, #4]
   124c8:	str	r6, [r0, #8]
   124ca:	b.n	12496 <_Balloc+0x16>

000124cc <_Bfree>:
   124cc:	cbz	r1, 124dc <_Bfree+0x10>
   124ce:	ldr	r3, [r0, #76]	; 0x4c
   124d0:	ldr	r2, [r1, #4]
   124d2:	ldr.w	r0, [r3, r2, lsl #2]
   124d6:	str	r0, [r1, #0]
   124d8:	str.w	r1, [r3, r2, lsl #2]
   124dc:	bx	lr
   124de:	nop

000124e0 <__multadd>:
   124e0:	push	{r4, r5, r6, r7, lr}
   124e2:	ldr	r4, [r1, #16]
   124e4:	sub	sp, #12
   124e6:	mov	r5, r1
   124e8:	mov	r6, r0
   124ea:	add.w	lr, r1, #20
   124ee:	movs	r7, #0
   124f0:	ldr.w	r0, [lr]
   124f4:	uxth	r1, r0
   124f6:	mla	r1, r2, r1, r3
   124fa:	lsrs	r3, r1, #16
   124fc:	lsrs	r0, r0, #16
   124fe:	mla	r3, r2, r0, r3
   12502:	uxth	r1, r1
   12504:	adds	r7, #1
   12506:	add.w	r1, r1, r3, lsl #16
   1250a:	cmp	r4, r7
   1250c:	str.w	r1, [lr], #4
   12510:	mov.w	r3, r3, lsr #16
   12514:	bgt.n	124f0 <__multadd+0x10>
   12516:	cbz	r3, 12528 <__multadd+0x48>
   12518:	ldr	r2, [r5, #8]
   1251a:	cmp	r4, r2
   1251c:	bge.n	1252e <__multadd+0x4e>
   1251e:	add.w	r2, r5, r4, lsl #2
   12522:	adds	r4, #1
   12524:	str	r3, [r2, #20]
   12526:	str	r4, [r5, #16]
   12528:	mov	r0, r5
   1252a:	add	sp, #12
   1252c:	pop	{r4, r5, r6, r7, pc}
   1252e:	ldr	r1, [r5, #4]
   12530:	str	r3, [sp, #4]
   12532:	adds	r1, #1
   12534:	mov	r0, r6
   12536:	bl	12480 <_Balloc>
   1253a:	ldr	r2, [r5, #16]
   1253c:	adds	r2, #2
   1253e:	add.w	r1, r5, #12
   12542:	mov	r7, r0
   12544:	lsls	r2, r2, #2
   12546:	adds	r0, #12
   12548:	bl	9324 <memcpy>
   1254c:	ldr	r2, [r6, #76]	; 0x4c
   1254e:	ldr	r1, [r5, #4]
   12550:	ldr	r3, [sp, #4]
   12552:	ldr.w	r0, [r2, r1, lsl #2]
   12556:	str	r0, [r5, #0]
   12558:	str.w	r5, [r2, r1, lsl #2]
   1255c:	mov	r5, r7
   1255e:	b.n	1251e <__multadd+0x3e>

00012560 <__s2b>:
   12560:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12564:	ldr	r4, [pc, #140]	; (125f4 <__s2b+0x94>)
   12566:	ldr	r5, [sp, #32]
   12568:	mov	r7, r3
   1256a:	adds	r3, #8
   1256c:	smull	r4, lr, r4, r3
   12570:	asrs	r3, r3, #31
   12572:	rsb	lr, r3, lr, asr #1
   12576:	cmp.w	lr, #1
   1257a:	mov	r6, r0
   1257c:	mov	r4, r1
   1257e:	mov	r8, r2
   12580:	ble.n	125ee <__s2b+0x8e>
   12582:	movs	r3, #1
   12584:	movs	r1, #0
   12586:	lsls	r3, r3, #1
   12588:	cmp	lr, r3
   1258a:	add.w	r1, r1, #1
   1258e:	bgt.n	12586 <__s2b+0x26>
   12590:	mov	r0, r6
   12592:	bl	12480 <_Balloc>
   12596:	movs	r3, #1
   12598:	cmp.w	r8, #9
   1259c:	str	r5, [r0, #20]
   1259e:	str	r3, [r0, #16]
   125a0:	ble.n	125e6 <__s2b+0x86>
   125a2:	add.w	r9, r4, #9
   125a6:	mov	r5, r9
   125a8:	add	r4, r8
   125aa:	ldrb.w	r3, [r5], #1
   125ae:	mov	r1, r0
   125b0:	subs	r3, #48	; 0x30
   125b2:	movs	r2, #10
   125b4:	mov	r0, r6
   125b6:	bl	124e0 <__multadd>
   125ba:	cmp	r5, r4
   125bc:	bne.n	125aa <__s2b+0x4a>
   125be:	add.w	r4, r9, r8
   125c2:	subs	r4, #8
   125c4:	cmp	r7, r8
   125c6:	ble.n	125e2 <__s2b+0x82>
   125c8:	rsb	r7, r8, r7
   125cc:	add	r7, r4
   125ce:	ldrb.w	r3, [r4], #1
   125d2:	mov	r1, r0
   125d4:	subs	r3, #48	; 0x30
   125d6:	movs	r2, #10
   125d8:	mov	r0, r6
   125da:	bl	124e0 <__multadd>
   125de:	cmp	r7, r4
   125e0:	bne.n	125ce <__s2b+0x6e>
   125e2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   125e6:	adds	r4, #10
   125e8:	mov.w	r8, #9
   125ec:	b.n	125c4 <__s2b+0x64>
   125ee:	movs	r1, #0
   125f0:	b.n	12590 <__s2b+0x30>
   125f2:	nop
   125f4:	.word	0x38e38e39

000125f8 <__hi0bits>:
   125f8:	lsrs	r3, r0, #16
   125fa:	lsls	r3, r3, #16
   125fc:	cbnz	r3, 1262c <__hi0bits+0x34>
   125fe:	lsls	r0, r0, #16
   12600:	movs	r3, #16
   12602:	tst.w	r0, #4278190080	; 0xff000000
   12606:	itt	eq
   12608:	lsleq	r0, r0, #8
   1260a:	addeq	r3, #8
   1260c:	tst.w	r0, #4026531840	; 0xf0000000
   12610:	itt	eq
   12612:	lsleq	r0, r0, #4
   12614:	addeq	r3, #4
   12616:	tst.w	r0, #3221225472	; 0xc0000000
   1261a:	itt	eq
   1261c:	lsleq	r0, r0, #2
   1261e:	addeq	r3, #2
   12620:	cmp	r0, #0
   12622:	blt.n	12634 <__hi0bits+0x3c>
   12624:	lsls	r2, r0, #1
   12626:	bmi.n	12630 <__hi0bits+0x38>
   12628:	movs	r0, #32
   1262a:	bx	lr
   1262c:	movs	r3, #0
   1262e:	b.n	12602 <__hi0bits+0xa>
   12630:	adds	r0, r3, #1
   12632:	bx	lr
   12634:	mov	r0, r3
   12636:	bx	lr

00012638 <__lo0bits>:
   12638:	ldr	r3, [r0, #0]
   1263a:	ands.w	r2, r3, #7
   1263e:	beq.n	12650 <__lo0bits+0x18>
   12640:	lsls	r1, r3, #31
   12642:	bmi.n	12686 <__lo0bits+0x4e>
   12644:	lsls	r2, r3, #30
   12646:	bmi.n	1268a <__lo0bits+0x52>
   12648:	lsrs	r3, r3, #2
   1264a:	str	r3, [r0, #0]
   1264c:	movs	r0, #2
   1264e:	bx	lr
   12650:	uxth	r1, r3
   12652:	cbnz	r1, 12658 <__lo0bits+0x20>
   12654:	lsrs	r3, r3, #16
   12656:	movs	r2, #16
   12658:	tst.w	r3, #255	; 0xff
   1265c:	itt	eq
   1265e:	lsreq	r3, r3, #8
   12660:	addeq	r2, #8
   12662:	lsls	r1, r3, #28
   12664:	itt	eq
   12666:	lsreq	r3, r3, #4
   12668:	addeq	r2, #4
   1266a:	lsls	r1, r3, #30
   1266c:	itt	eq
   1266e:	lsreq	r3, r3, #2
   12670:	addeq	r2, #2
   12672:	lsls	r1, r3, #31
   12674:	bmi.n	12680 <__lo0bits+0x48>
   12676:	lsrs	r3, r3, #1
   12678:	bne.n	1267e <__lo0bits+0x46>
   1267a:	movs	r0, #32
   1267c:	bx	lr
   1267e:	adds	r2, #1
   12680:	str	r3, [r0, #0]
   12682:	mov	r0, r2
   12684:	bx	lr
   12686:	movs	r0, #0
   12688:	bx	lr
   1268a:	lsrs	r3, r3, #1
   1268c:	str	r3, [r0, #0]
   1268e:	movs	r0, #1
   12690:	bx	lr
   12692:	nop

00012694 <__i2b>:
   12694:	push	{r4, lr}
   12696:	mov	r4, r1
   12698:	movs	r1, #1
   1269a:	bl	12480 <_Balloc>
   1269e:	movs	r2, #1
   126a0:	str	r4, [r0, #20]
   126a2:	str	r2, [r0, #16]
   126a4:	pop	{r4, pc}
   126a6:	nop

000126a8 <__multiply>:
   126a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126ac:	ldr	r5, [r1, #16]
   126ae:	ldr	r7, [r2, #16]
   126b0:	cmp	r5, r7
   126b2:	sub	sp, #12
   126b4:	mov	r4, r1
   126b6:	mov	r6, r2
   126b8:	bge.n	126c4 <__multiply+0x1c>
   126ba:	mov	r2, r5
   126bc:	mov	r4, r6
   126be:	mov	r5, r7
   126c0:	mov	r6, r1
   126c2:	mov	r7, r2
   126c4:	ldr	r3, [r4, #8]
   126c6:	ldr	r1, [r4, #4]
   126c8:	add.w	r8, r5, r7
   126cc:	cmp	r8, r3
   126ce:	it	gt
   126d0:	addgt	r1, #1
   126d2:	bl	12480 <_Balloc>
   126d6:	add.w	ip, r0, #20
   126da:	add.w	r9, ip, r8, lsl #2
   126de:	cmp	ip, r9
   126e0:	str	r0, [sp, #0]
   126e2:	bcs.n	126f0 <__multiply+0x48>
   126e4:	mov	r3, ip
   126e6:	movs	r1, #0
   126e8:	str.w	r1, [r3], #4
   126ec:	cmp	r9, r3
   126ee:	bhi.n	126e8 <__multiply+0x40>
   126f0:	add.w	r2, r6, #20
   126f4:	add.w	sl, r2, r7, lsl #2
   126f8:	add.w	r3, r4, #20
   126fc:	cmp	r2, sl
   126fe:	add.w	lr, r3, r5, lsl #2
   12702:	bcs.n	127ae <__multiply+0x106>
   12704:	str.w	r9, [sp, #4]
   12708:	mov	r9, r3
   1270a:	ldr.w	r3, [r2], #4
   1270e:	uxth.w	fp, r3
   12712:	cmp.w	fp, #0
   12716:	beq.n	1275a <__multiply+0xb2>
   12718:	movs	r0, #0
   1271a:	mov	r7, r9
   1271c:	mov	r6, ip
   1271e:	mov	r5, r0
   12720:	b.n	12724 <__multiply+0x7c>
   12722:	mov	r6, r3
   12724:	ldr.w	r4, [r7], #4
   12728:	ldr	r0, [r6, #0]
   1272a:	uxth	r1, r4
   1272c:	uxth	r3, r0
   1272e:	mla	r1, fp, r1, r3
   12732:	lsrs	r4, r4, #16
   12734:	lsrs	r0, r0, #16
   12736:	adds	r3, r1, r5
   12738:	mla	r0, fp, r4, r0
   1273c:	add.w	r0, r0, r3, lsr #16
   12740:	uxth	r1, r3
   12742:	mov	r3, r6
   12744:	orr.w	r1, r1, r0, lsl #16
   12748:	cmp	lr, r7
   1274a:	mov.w	r5, r0, lsr #16
   1274e:	str.w	r1, [r3], #4
   12752:	bhi.n	12722 <__multiply+0x7a>
   12754:	str	r5, [r6, #4]
   12756:	ldr.w	r3, [r2, #-4]
   1275a:	movs.w	fp, r3, lsr #16
   1275e:	beq.n	127a2 <__multiply+0xfa>
   12760:	ldr.w	r3, [ip]
   12764:	mov	r7, ip
   12766:	mov	r0, r3
   12768:	mov	r5, r9
   1276a:	movs	r1, #0
   1276c:	b.n	12770 <__multiply+0xc8>
   1276e:	mov	r7, r6
   12770:	ldrh	r4, [r5, #0]
   12772:	lsrs	r0, r0, #16
   12774:	mla	r0, fp, r4, r0
   12778:	add	r1, r0
   1277a:	uxth	r4, r3
   1277c:	mov	r6, r7
   1277e:	orr.w	r3, r4, r1, lsl #16
   12782:	str.w	r3, [r6], #4
   12786:	ldr	r0, [r7, #4]
   12788:	ldr.w	r4, [r5], #4
   1278c:	uxth	r3, r0
   1278e:	lsrs	r4, r4, #16
   12790:	mla	r4, fp, r4, r3
   12794:	add.w	r3, r4, r1, lsr #16
   12798:	cmp	lr, r5
   1279a:	mov.w	r1, r3, lsr #16
   1279e:	bhi.n	1276e <__multiply+0xc6>
   127a0:	str	r3, [r7, #4]
   127a2:	cmp	sl, r2
   127a4:	add.w	ip, ip, #4
   127a8:	bhi.n	1270a <__multiply+0x62>
   127aa:	ldr.w	r9, [sp, #4]
   127ae:	cmp.w	r8, #0
   127b2:	ble.n	127cc <__multiply+0x124>
   127b4:	ldr.w	r3, [r9, #-4]
   127b8:	sub.w	r9, r9, #4
   127bc:	cbz	r3, 127c6 <__multiply+0x11e>
   127be:	b.n	127cc <__multiply+0x124>
   127c0:	ldr.w	r3, [r9, #-4]!
   127c4:	cbnz	r3, 127cc <__multiply+0x124>
   127c6:	subs.w	r8, r8, #1
   127ca:	bne.n	127c0 <__multiply+0x118>
   127cc:	ldr	r0, [sp, #0]
   127ce:	str.w	r8, [r0, #16]
   127d2:	add	sp, #12
   127d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000127d8 <__pow5mult>:
   127d8:	ands.w	r3, r2, #3
   127dc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127e0:	mov	r4, r2
   127e2:	mov	r7, r0
   127e4:	bne.n	12844 <__pow5mult+0x6c>
   127e6:	mov	r6, r1
   127e8:	asrs	r4, r4, #2
   127ea:	beq.n	12826 <__pow5mult+0x4e>
   127ec:	ldr	r5, [r7, #72]	; 0x48
   127ee:	cbz	r5, 12856 <__pow5mult+0x7e>
   127f0:	lsls	r3, r4, #31
   127f2:	mov.w	r8, #0
   127f6:	bmi.n	12806 <__pow5mult+0x2e>
   127f8:	asrs	r4, r4, #1
   127fa:	beq.n	12826 <__pow5mult+0x4e>
   127fc:	ldr	r0, [r5, #0]
   127fe:	cbz	r0, 1282c <__pow5mult+0x54>
   12800:	mov	r5, r0
   12802:	lsls	r3, r4, #31
   12804:	bpl.n	127f8 <__pow5mult+0x20>
   12806:	mov	r2, r5
   12808:	mov	r1, r6
   1280a:	mov	r0, r7
   1280c:	bl	126a8 <__multiply>
   12810:	cbz	r6, 12840 <__pow5mult+0x68>
   12812:	ldr	r2, [r6, #4]
   12814:	ldr	r3, [r7, #76]	; 0x4c
   12816:	asrs	r4, r4, #1
   12818:	ldr.w	r1, [r3, r2, lsl #2]
   1281c:	str	r1, [r6, #0]
   1281e:	str.w	r6, [r3, r2, lsl #2]
   12822:	mov	r6, r0
   12824:	bne.n	127fc <__pow5mult+0x24>
   12826:	mov	r0, r6
   12828:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1282c:	mov	r2, r5
   1282e:	mov	r1, r5
   12830:	mov	r0, r7
   12832:	bl	126a8 <__multiply>
   12836:	str	r0, [r5, #0]
   12838:	str.w	r8, [r0]
   1283c:	mov	r5, r0
   1283e:	b.n	12802 <__pow5mult+0x2a>
   12840:	mov	r6, r0
   12842:	b.n	127f8 <__pow5mult+0x20>
   12844:	subs	r2, r3, #1
   12846:	ldr	r5, [pc, #44]	; (12874 <__pow5mult+0x9c>)
   12848:	movs	r3, #0
   1284a:	ldr.w	r2, [r5, r2, lsl #2]
   1284e:	bl	124e0 <__multadd>
   12852:	mov	r6, r0
   12854:	b.n	127e8 <__pow5mult+0x10>
   12856:	movs	r1, #1
   12858:	mov	r0, r7
   1285a:	bl	12480 <_Balloc>
   1285e:	movw	r1, #625	; 0x271
   12862:	movs	r2, #1
   12864:	movs	r3, #0
   12866:	str	r1, [r0, #20]
   12868:	str	r2, [r0, #16]
   1286a:	mov	r5, r0
   1286c:	str	r0, [r7, #72]	; 0x48
   1286e:	str	r3, [r0, #0]
   12870:	b.n	127f0 <__pow5mult+0x18>
   12872:	nop
   12874:	.word	0x00014340

00012878 <__lshift>:
   12878:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1287c:	mov	r9, r2
   1287e:	ldr	r2, [r1, #16]
   12880:	ldr	r3, [r1, #8]
   12882:	mov.w	r4, r9, asr #5
   12886:	add.w	r8, r4, r2
   1288a:	add.w	r5, r8, #1
   1288e:	cmp	r5, r3
   12890:	mov	r6, r1
   12892:	mov	sl, r0
   12894:	ldr	r1, [r1, #4]
   12896:	ble.n	128a2 <__lshift+0x2a>
   12898:	lsls	r3, r3, #1
   1289a:	cmp	r5, r3
   1289c:	add.w	r1, r1, #1
   128a0:	bgt.n	12898 <__lshift+0x20>
   128a2:	mov	r0, sl
   128a4:	bl	12480 <_Balloc>
   128a8:	cmp	r4, #0
   128aa:	add.w	r2, r0, #20
   128ae:	ble.n	12922 <__lshift+0xaa>
   128b0:	add.w	r3, r2, r4, lsl #2
   128b4:	movs	r1, #0
   128b6:	str.w	r1, [r2], #4
   128ba:	cmp	r3, r2
   128bc:	bne.n	128b6 <__lshift+0x3e>
   128be:	ldr	r4, [r6, #16]
   128c0:	add.w	r1, r6, #20
   128c4:	ands.w	r9, r9, #31
   128c8:	add.w	lr, r1, r4, lsl #2
   128cc:	beq.n	12912 <__lshift+0x9a>
   128ce:	rsb	r2, r9, #32
   128d2:	movs	r4, #0
   128d4:	ldr	r7, [r1, #0]
   128d6:	lsl.w	ip, r7, r9
   128da:	orr.w	r4, ip, r4
   128de:	mov	ip, r3
   128e0:	str.w	r4, [r3], #4
   128e4:	ldr.w	r4, [r1], #4
   128e8:	cmp	lr, r1
   128ea:	lsr.w	r4, r4, r2
   128ee:	bhi.n	128d4 <__lshift+0x5c>
   128f0:	str.w	r4, [ip, #4]
   128f4:	cbz	r4, 128fa <__lshift+0x82>
   128f6:	add.w	r5, r8, #2
   128fa:	ldr.w	r3, [sl, #76]	; 0x4c
   128fe:	ldr	r2, [r6, #4]
   12900:	subs	r5, #1
   12902:	ldr.w	r1, [r3, r2, lsl #2]
   12906:	str	r5, [r0, #16]
   12908:	str	r1, [r6, #0]
   1290a:	str.w	r6, [r3, r2, lsl #2]
   1290e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12912:	subs	r3, #4
   12914:	ldr.w	r2, [r1], #4
   12918:	str.w	r2, [r3, #4]!
   1291c:	cmp	lr, r1
   1291e:	bhi.n	12914 <__lshift+0x9c>
   12920:	b.n	128fa <__lshift+0x82>
   12922:	mov	r3, r2
   12924:	b.n	128be <__lshift+0x46>
   12926:	nop

00012928 <__mcmp>:
   12928:	ldr	r2, [r0, #16]
   1292a:	ldr	r3, [r1, #16]
   1292c:	subs	r2, r2, r3
   1292e:	bne.n	12958 <__mcmp+0x30>
   12930:	lsls	r3, r3, #2
   12932:	adds	r0, #20
   12934:	adds	r1, #20
   12936:	add	r1, r3
   12938:	push	{r4}
   1293a:	add	r3, r0
   1293c:	b.n	12942 <__mcmp+0x1a>
   1293e:	cmp	r0, r3
   12940:	bcs.n	1295c <__mcmp+0x34>
   12942:	ldr.w	r4, [r3, #-4]!
   12946:	ldr.w	r2, [r1, #-4]!
   1294a:	cmp	r4, r2
   1294c:	beq.n	1293e <__mcmp+0x16>
   1294e:	bcc.n	12964 <__mcmp+0x3c>
   12950:	movs	r0, #1
   12952:	ldr.w	r4, [sp], #4
   12956:	bx	lr
   12958:	mov	r0, r2
   1295a:	bx	lr
   1295c:	movs	r0, #0
   1295e:	ldr.w	r4, [sp], #4
   12962:	bx	lr
   12964:	mov.w	r0, #4294967295
   12968:	b.n	12952 <__mcmp+0x2a>
   1296a:	nop

0001296c <__mdiff>:
   1296c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12970:	ldr	r3, [r1, #16]
   12972:	mov	r7, r1
   12974:	ldr	r1, [r2, #16]
   12976:	subs	r3, r3, r1
   12978:	cmp	r3, #0
   1297a:	mov	r8, r2
   1297c:	bne.n	129ae <__mdiff+0x42>
   1297e:	lsls	r1, r1, #2
   12980:	add.w	r2, r7, #20
   12984:	add.w	r5, r8, #20
   12988:	adds	r3, r2, r1
   1298a:	add	r1, r5
   1298c:	b.n	12992 <__mdiff+0x26>
   1298e:	cmp	r2, r3
   12990:	bcs.n	12a50 <__mdiff+0xe4>
   12992:	ldr.w	r6, [r3, #-4]!
   12996:	ldr.w	r4, [r1, #-4]!
   1299a:	cmp	r6, r4
   1299c:	beq.n	1298e <__mdiff+0x22>
   1299e:	bcs.n	12a62 <__mdiff+0xf6>
   129a0:	mov	r3, r7
   129a2:	mov	r4, r2
   129a4:	mov	r7, r8
   129a6:	mov.w	r9, #1
   129aa:	mov	r8, r3
   129ac:	b.n	129bc <__mdiff+0x50>
   129ae:	blt.n	12a6c <__mdiff+0x100>
   129b0:	add.w	r5, r7, #20
   129b4:	add.w	r4, r2, #20
   129b8:	mov.w	r9, #0
   129bc:	ldr	r1, [r7, #4]
   129be:	bl	12480 <_Balloc>
   129c2:	ldr.w	r3, [r8, #16]
   129c6:	ldr	r6, [r7, #16]
   129c8:	str.w	r9, [r0, #12]
   129cc:	add.w	ip, r4, r3, lsl #2
   129d0:	mov	lr, r4
   129d2:	add.w	r7, r5, r6, lsl #2
   129d6:	add.w	r4, r0, #20
   129da:	movs	r3, #0
   129dc:	ldr.w	r1, [lr], #4
   129e0:	ldr.w	r8, [r5], #4
   129e4:	uxth	r2, r1
   129e6:	uxtah	r3, r3, r8
   129ea:	lsrs	r1, r1, #16
   129ec:	subs	r2, r3, r2
   129ee:	rsb	r3, r1, r8, lsr #16
   129f2:	add.w	r3, r3, r2, asr #16
   129f6:	uxth	r2, r2
   129f8:	orr.w	r2, r2, r3, lsl #16
   129fc:	cmp	ip, lr
   129fe:	str.w	r2, [r4], #4
   12a02:	mov.w	r3, r3, asr #16
   12a06:	bhi.n	129dc <__mdiff+0x70>
   12a08:	cmp	r7, r5
   12a0a:	bls.n	12a3c <__mdiff+0xd0>
   12a0c:	mov	ip, r4
   12a0e:	mov	r1, r5
   12a10:	ldr.w	lr, [r1], #4
   12a14:	uxtah	r2, r3, lr
   12a18:	asrs	r3, r2, #16
   12a1a:	add.w	r3, r3, lr, lsr #16
   12a1e:	uxth	r2, r2
   12a20:	orr.w	r2, r2, r3, lsl #16
   12a24:	cmp	r7, r1
   12a26:	str.w	r2, [ip], #4
   12a2a:	mov.w	r3, r3, asr #16
   12a2e:	bhi.n	12a10 <__mdiff+0xa4>
   12a30:	mvns	r5, r5
   12a32:	add	r5, r7
   12a34:	bic.w	r5, r5, #3
   12a38:	adds	r5, #4
   12a3a:	add	r4, r5
   12a3c:	subs	r4, #4
   12a3e:	cbnz	r2, 12a4a <__mdiff+0xde>
   12a40:	ldr.w	r3, [r4, #-4]!
   12a44:	subs	r6, #1
   12a46:	cmp	r3, #0
   12a48:	beq.n	12a40 <__mdiff+0xd4>
   12a4a:	str	r6, [r0, #16]
   12a4c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12a50:	movs	r1, #0
   12a52:	bl	12480 <_Balloc>
   12a56:	movs	r2, #1
   12a58:	movs	r3, #0
   12a5a:	str	r2, [r0, #16]
   12a5c:	str	r3, [r0, #20]
   12a5e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12a62:	mov	r4, r5
   12a64:	mov.w	r9, #0
   12a68:	mov	r5, r2
   12a6a:	b.n	129bc <__mdiff+0x50>
   12a6c:	mov	r3, r7
   12a6e:	add.w	r4, r7, #20
   12a72:	add.w	r5, r8, #20
   12a76:	mov	r7, r8
   12a78:	mov.w	r9, #1
   12a7c:	mov	r8, r3
   12a7e:	b.n	129bc <__mdiff+0x50>

00012a80 <__ulp>:
   12a80:	ldr	r3, [pc, #76]	; (12ad0 <__ulp+0x50>)
   12a82:	vmov	r2, s1
   12a86:	ands	r2, r3
   12a88:	sub.w	r3, r2, #54525952	; 0x3400000
   12a8c:	cmp	r3, #0
   12a8e:	ble.n	12a9a <__ulp+0x1a>
   12a90:	movs	r0, #0
   12a92:	mov	r1, r3
   12a94:	vmov	d0, r0, r1
   12a98:	bx	lr
   12a9a:	negs	r3, r3
   12a9c:	asrs	r3, r3, #20
   12a9e:	cmp	r3, #19
   12aa0:	ble.n	12abe <__ulp+0x3e>
   12aa2:	subs	r3, #20
   12aa4:	cmp	r3, #30
   12aa6:	ittte	le
   12aa8:	rsble	r3, r3, #31
   12aac:	movle	r2, #1
   12aae:	lslle.w	r3, r2, r3
   12ab2:	movgt	r3, #1
   12ab4:	movs	r1, #0
   12ab6:	mov	r0, r3
   12ab8:	vmov	d0, r0, r1
   12abc:	bx	lr
   12abe:	mov.w	r2, #524288	; 0x80000
   12ac2:	movs	r0, #0
   12ac4:	asr.w	r1, r2, r3
   12ac8:	vmov	d0, r0, r1
   12acc:	bx	lr
   12ace:	nop
   12ad0:	.word	0x7ff00000

00012ad4 <__b2d>:
   12ad4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ad8:	ldr	r6, [r0, #16]
   12ada:	add.w	r8, r0, #20
   12ade:	add.w	r6, r8, r6, lsl #2
   12ae2:	ldr.w	r7, [r6, #-4]
   12ae6:	mov	r0, r7
   12ae8:	bl	125f8 <__hi0bits>
   12aec:	rsb	r3, r0, #32
   12af0:	cmp	r0, #10
   12af2:	str	r3, [r1, #0]
   12af4:	sub.w	r3, r6, #4
   12af8:	bgt.n	12b2c <__b2d+0x58>
   12afa:	cmp	r8, r3
   12afc:	rsb	r2, r0, #11
   12b00:	it	cc
   12b02:	ldrcc.w	r3, [r6, #-8]
   12b06:	lsr.w	r1, r7, r2
   12b0a:	add.w	r0, r0, #21
   12b0e:	orr.w	r5, r1, #1069547520	; 0x3fc00000
   12b12:	ite	cc
   12b14:	lsrcc	r3, r2
   12b16:	movcs	r3, #0
   12b18:	lsl.w	r0, r7, r0
   12b1c:	orr.w	r5, r5, #3145728	; 0x300000
   12b20:	orr.w	r4, r0, r3
   12b24:	vmov	d0, r4, r5
   12b28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12b2c:	cmp	r8, r3
   12b2e:	bcs.n	12b72 <__b2d+0x9e>
   12b30:	subs.w	r3, r0, #11
   12b34:	ldr.w	r2, [r6, #-8]
   12b38:	beq.n	12b78 <__b2d+0xa4>
   12b3a:	lsl.w	r0, r7, r3
   12b3e:	orr.w	r7, r0, #1069547520	; 0x3fc00000
   12b42:	rsb	lr, r3, #32
   12b46:	sub.w	r1, r6, #8
   12b4a:	orr.w	r7, r7, #3145728	; 0x300000
   12b4e:	lsr.w	r0, r2, lr
   12b52:	cmp	r8, r1
   12b54:	orr.w	r5, r7, r0
   12b58:	bcs.n	12b9c <__b2d+0xc8>
   12b5a:	ldr.w	r1, [r6, #-12]
   12b5e:	lsl.w	r0, r2, r3
   12b62:	lsr.w	r3, r1, lr
   12b66:	orrs	r0, r3
   12b68:	mov	r4, r0
   12b6a:	vmov	d0, r4, r5
   12b6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12b72:	subs	r0, #11
   12b74:	bne.n	12b8a <__b2d+0xb6>
   12b76:	mov	r2, r0
   12b78:	orr.w	r5, r7, #1069547520	; 0x3fc00000
   12b7c:	orr.w	r5, r5, #3145728	; 0x300000
   12b80:	mov	r4, r2
   12b82:	vmov	d0, r4, r5
   12b86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12b8a:	lsl.w	r0, r7, r0
   12b8e:	orr.w	r5, r0, #1069547520	; 0x3fc00000
   12b92:	movs	r0, #0
   12b94:	orr.w	r5, r5, #3145728	; 0x300000
   12b98:	mov	r4, r0
   12b9a:	b.n	12b6a <__b2d+0x96>
   12b9c:	lsl.w	r0, r2, r3
   12ba0:	mov	r4, r0
   12ba2:	b.n	12b6a <__b2d+0x96>

00012ba4 <__d2b>:
   12ba4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12ba8:	vmov	r6, r7, d0
   12bac:	sub	sp, #12
   12bae:	mov	r8, r1
   12bb0:	movs	r1, #1
   12bb2:	mov	r4, r7
   12bb4:	ubfx	r5, r7, #20, #11
   12bb8:	mov	r7, r2
   12bba:	bl	12480 <_Balloc>
   12bbe:	ubfx	r4, r4, #0, #20
   12bc2:	mov	r9, r0
   12bc4:	cbz	r5, 12bca <__d2b+0x26>
   12bc6:	orr.w	r4, r4, #1048576	; 0x100000
   12bca:	str	r4, [sp, #4]
   12bcc:	cbz	r6, 12c16 <__d2b+0x72>
   12bce:	add	r0, sp, #8
   12bd0:	str.w	r6, [r0, #-8]!
   12bd4:	bl	12638 <__lo0bits>
   12bd8:	cmp	r0, #0
   12bda:	bne.n	12c46 <__d2b+0xa2>
   12bdc:	ldmia.w	sp, {r2, r3}
   12be0:	str.w	r2, [r9, #20]
   12be4:	cmp	r3, #0
   12be6:	ite	eq
   12be8:	moveq	r1, #1
   12bea:	movne	r1, #2
   12bec:	str.w	r3, [r9, #24]
   12bf0:	str.w	r1, [r9, #16]
   12bf4:	cbnz	r5, 12c2e <__d2b+0x8a>
   12bf6:	add.w	r3, r9, r1, lsl #2
   12bfa:	subw	r0, r0, #1074	; 0x432
   12bfe:	str.w	r0, [r8]
   12c02:	ldr	r0, [r3, #16]
   12c04:	bl	125f8 <__hi0bits>
   12c08:	rsb	r0, r0, r1, lsl #5
   12c0c:	str	r0, [r7, #0]
   12c0e:	mov	r0, r9
   12c10:	add	sp, #12
   12c12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12c16:	add	r0, sp, #4
   12c18:	bl	12638 <__lo0bits>
   12c1c:	ldr	r3, [sp, #4]
   12c1e:	str.w	r3, [r9, #20]
   12c22:	movs	r1, #1
   12c24:	adds	r0, #32
   12c26:	str.w	r1, [r9, #16]
   12c2a:	cmp	r5, #0
   12c2c:	beq.n	12bf6 <__d2b+0x52>
   12c2e:	subw	r5, r5, #1075	; 0x433
   12c32:	add	r5, r0
   12c34:	rsb	r0, r0, #53	; 0x35
   12c38:	str.w	r5, [r8]
   12c3c:	str	r0, [r7, #0]
   12c3e:	mov	r0, r9
   12c40:	add	sp, #12
   12c42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12c46:	ldmia.w	sp, {r2, r3}
   12c4a:	rsb	r1, r0, #32
   12c4e:	lsl.w	r1, r3, r1
   12c52:	orrs	r2, r1
   12c54:	lsrs	r3, r0
   12c56:	str	r3, [sp, #4]
   12c58:	str.w	r2, [r9, #20]
   12c5c:	b.n	12be4 <__d2b+0x40>
   12c5e:	nop

00012c60 <__ratio>:
   12c60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12c64:	sub	sp, #12
   12c66:	mov	r8, r1
   12c68:	mov	r1, sp
   12c6a:	mov	r9, r0
   12c6c:	bl	12ad4 <__b2d>
   12c70:	mov	r0, r8
   12c72:	add	r1, sp, #4
   12c74:	vmov	r4, r5, d0
   12c78:	bl	12ad4 <__b2d>
   12c7c:	ldmia.w	sp, {r1, r3}
   12c80:	ldr.w	r2, [r9, #16]
   12c84:	ldr.w	r0, [r8, #16]
   12c88:	subs	r1, r1, r3
   12c8a:	subs	r0, r2, r0
   12c8c:	add.w	r3, r1, r0, lsl #5
   12c90:	cmp	r3, #0
   12c92:	vmov	r6, r7, d0
   12c96:	ble.n	12cb4 <__ratio+0x54>
   12c98:	add.w	r1, r5, r3, lsl #20
   12c9c:	mov	r5, r1
   12c9e:	mov	r2, r6
   12ca0:	mov	r3, r7
   12ca2:	mov	r0, r4
   12ca4:	mov	r1, r5
   12ca6:	bl	b87c <__aeabi_ddiv>
   12caa:	vmov	d0, r0, r1
   12cae:	add	sp, #12
   12cb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12cb4:	sub.w	r9, r7, r3, lsl #20
   12cb8:	vmov	r6, s0
   12cbc:	mov	r7, r9
   12cbe:	b.n	12c9e <__ratio+0x3e>

00012cc0 <__copybits>:
   12cc0:	push	{r4, r5, r6}
   12cc2:	ldr	r4, [r2, #16]
   12cc4:	add.w	r3, r2, #20
   12cc8:	subs	r1, #1
   12cca:	asrs	r6, r1, #5
   12ccc:	add.w	r4, r3, r4, lsl #2
   12cd0:	adds	r6, #1
   12cd2:	cmp	r3, r4
   12cd4:	add.w	r6, r0, r6, lsl #2
   12cd8:	bcs.n	12cf4 <__copybits+0x34>
   12cda:	subs	r1, r0, #4
   12cdc:	ldr.w	r5, [r3], #4
   12ce0:	str.w	r5, [r1, #4]!
   12ce4:	cmp	r4, r3
   12ce6:	bhi.n	12cdc <__copybits+0x1c>
   12ce8:	subs	r3, r4, r2
   12cea:	subs	r3, #21
   12cec:	bic.w	r3, r3, #3
   12cf0:	adds	r3, #4
   12cf2:	add	r0, r3
   12cf4:	cmp	r6, r0
   12cf6:	bls.n	12d02 <__copybits+0x42>
   12cf8:	movs	r3, #0
   12cfa:	str.w	r3, [r0], #4
   12cfe:	cmp	r6, r0
   12d00:	bhi.n	12cfa <__copybits+0x3a>
   12d02:	pop	{r4, r5, r6}
   12d04:	bx	lr
   12d06:	nop

00012d08 <__any_on>:
   12d08:	ldr	r3, [r0, #16]
   12d0a:	asrs	r2, r1, #5
   12d0c:	cmp	r3, r2
   12d0e:	push	{r4}
   12d10:	add.w	r4, r0, #20
   12d14:	bge.n	12d38 <__any_on+0x30>
   12d16:	add.w	r3, r4, r3, lsl #2
   12d1a:	cmp	r4, r3
   12d1c:	bcs.n	12d62 <__any_on+0x5a>
   12d1e:	ldr.w	r0, [r3, #-4]
   12d22:	subs	r3, #4
   12d24:	cbz	r0, 12d2e <__any_on+0x26>
   12d26:	b.n	12d54 <__any_on+0x4c>
   12d28:	ldr.w	r2, [r3, #-4]!
   12d2c:	cbnz	r2, 12d54 <__any_on+0x4c>
   12d2e:	cmp	r4, r3
   12d30:	bcc.n	12d28 <__any_on+0x20>
   12d32:	ldr.w	r4, [sp], #4
   12d36:	bx	lr
   12d38:	ble.n	12d5c <__any_on+0x54>
   12d3a:	ands.w	r1, r1, #31
   12d3e:	beq.n	12d5c <__any_on+0x54>
   12d40:	ldr.w	r0, [r4, r2, lsl #2]
   12d44:	lsr.w	r3, r0, r1
   12d48:	lsl.w	r1, r3, r1
   12d4c:	cmp	r0, r1
   12d4e:	add.w	r3, r4, r2, lsl #2
   12d52:	beq.n	12d1a <__any_on+0x12>
   12d54:	movs	r0, #1
   12d56:	ldr.w	r4, [sp], #4
   12d5a:	bx	lr
   12d5c:	add.w	r3, r4, r2, lsl #2
   12d60:	b.n	12d1a <__any_on+0x12>
   12d62:	movs	r0, #0
   12d64:	b.n	12d32 <__any_on+0x2a>
   12d66:	nop

00012d68 <__sccl>:
   12d68:	push	{r4, r5, r6}
   12d6a:	ldrb	r5, [r1, #0]
   12d6c:	cmp	r5, #94	; 0x5e
   12d6e:	beq.n	12dd0 <__sccl+0x68>
   12d70:	movs	r2, #0
   12d72:	adds	r1, #1
   12d74:	mov	r6, r2
   12d76:	subs	r3, r0, #1
   12d78:	add.w	r4, r0, #255	; 0xff
   12d7c:	strb.w	r2, [r3, #1]!
   12d80:	cmp	r3, r4
   12d82:	bne.n	12d7c <__sccl+0x14>
   12d84:	cbz	r5, 12da8 <__sccl+0x40>
   12d86:	eor.w	r2, r6, #1
   12d8a:	strb	r2, [r0, r5]
   12d8c:	adds	r4, r1, #1
   12d8e:	ldrb.w	r3, [r4, #-1]
   12d92:	cmp	r3, #45	; 0x2d
   12d94:	beq.n	12db4 <__sccl+0x4c>
   12d96:	cmp	r3, #93	; 0x5d
   12d98:	beq.n	12dae <__sccl+0x46>
   12d9a:	cbz	r3, 12da2 <__sccl+0x3a>
   12d9c:	mov	r5, r3
   12d9e:	mov	r1, r4
   12da0:	b.n	12d8a <__sccl+0x22>
   12da2:	mov	r0, r1
   12da4:	pop	{r4, r5, r6}
   12da6:	bx	lr
   12da8:	subs	r0, r1, #1
   12daa:	pop	{r4, r5, r6}
   12dac:	bx	lr
   12dae:	mov	r0, r4
   12db0:	pop	{r4, r5, r6}
   12db2:	bx	lr
   12db4:	ldrb	r6, [r1, #1]
   12db6:	cmp	r6, #93	; 0x5d
   12db8:	beq.n	12d9c <__sccl+0x34>
   12dba:	cmp	r5, r6
   12dbc:	bgt.n	12d9c <__sccl+0x34>
   12dbe:	adds	r1, #2
   12dc0:	adds	r3, r0, r5
   12dc2:	adds	r5, #1
   12dc4:	cmp	r6, r5
   12dc6:	strb.w	r2, [r3, #1]!
   12dca:	bgt.n	12dc2 <__sccl+0x5a>
   12dcc:	adds	r4, #2
   12dce:	b.n	12d8e <__sccl+0x26>
   12dd0:	movs	r2, #1
   12dd2:	ldrb	r5, [r1, #1]
   12dd4:	mov	r6, r2
   12dd6:	adds	r1, #2
   12dd8:	b.n	12d76 <__sccl+0xe>
   12dda:	nop

00012ddc <nanf>:
   12ddc:	vldr	s0, [pc, #4]	; 12de4 <nanf+0x8>
   12de0:	bx	lr
   12de2:	nop
   12de4:	.word	0x7fc00000

00012de8 <_strtoll_l.isra.0>:
   12de8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dec:	sub	sp, #20
   12dee:	mov	sl, r3
   12df0:	str	r1, [sp, #8]
   12df2:	str	r0, [sp, #12]
   12df4:	str	r2, [sp, #4]
   12df6:	mov	r7, r1
   12df8:	ldr	r6, [sp, #56]	; 0x38
   12dfa:	b.n	12dfe <_strtoll_l.isra.0+0x16>
   12dfc:	mov	r7, r5
   12dfe:	mov	r5, r7
   12e00:	mov	r0, r6
   12e02:	ldrb.w	r4, [r5], #1
   12e06:	bl	c3a4 <__locale_ctype_ptr_l>
   12e0a:	add	r0, r4
   12e0c:	ldrb	r3, [r0, #1]
   12e0e:	and.w	r3, r3, #8
   12e12:	and.w	r2, r3, #255	; 0xff
   12e16:	cmp	r3, #0
   12e18:	bne.n	12dfc <_strtoll_l.isra.0+0x14>
   12e1a:	cmp	r4, #45	; 0x2d
   12e1c:	beq.w	12f26 <_strtoll_l.isra.0+0x13e>
   12e20:	cmp	r4, #43	; 0x2b
   12e22:	it	eq
   12e24:	ldrbeq	r4, [r7, #1]
   12e26:	str	r2, [sp, #0]
   12e28:	it	eq
   12e2a:	addeq	r5, r7, #2
   12e2c:	cmp.w	sl, #0
   12e30:	beq.n	12e4c <_strtoll_l.isra.0+0x64>
   12e32:	cmp.w	sl, #16
   12e36:	beq.w	12f64 <_strtoll_l.isra.0+0x17c>
   12e3a:	ldr	r3, [sp, #0]
   12e3c:	mov	r6, sl
   12e3e:	asrs	r7, r6, #31
   12e40:	cbnz	r3, 12e5e <_strtoll_l.isra.0+0x76>
   12e42:	mov.w	r8, #4294967295
   12e46:	mvn.w	r9, #2147483648	; 0x80000000
   12e4a:	b.n	12e66 <_strtoll_l.isra.0+0x7e>
   12e4c:	cmp	r4, #48	; 0x30
   12e4e:	beq.n	12f50 <_strtoll_l.isra.0+0x168>
   12e50:	movs	r6, #10
   12e52:	movs	r7, #0
   12e54:	mov.w	sl, #10
   12e58:	ldr	r3, [sp, #0]
   12e5a:	cmp	r3, #0
   12e5c:	beq.n	12e42 <_strtoll_l.isra.0+0x5a>
   12e5e:	mov.w	r8, #0
   12e62:	mov.w	r9, #2147483648	; 0x80000000
   12e66:	mov	r2, r6
   12e68:	mov	r3, r7
   12e6a:	mov	r0, r8
   12e6c:	mov	r1, r9
   12e6e:	bl	bf74 <__aeabi_uldivmod>
   12e72:	mov	r3, r7
   12e74:	mov	fp, r2
   12e76:	mov	r0, r8
   12e78:	mov	r2, r6
   12e7a:	mov	r1, r9
   12e7c:	bl	bf74 <__aeabi_uldivmod>
   12e80:	mov.w	lr, #0
   12e84:	movs	r2, #0
   12e86:	movs	r3, #0
   12e88:	b.n	12eaa <_strtoll_l.isra.0+0xc2>
   12e8a:	beq.n	12f18 <_strtoll_l.isra.0+0x130>
   12e8c:	mul.w	r4, r2, r7
   12e90:	mla	r4, r6, r3, r4
   12e94:	umull	r2, r3, r2, r6
   12e98:	add	r3, r4
   12e9a:	adds.w	r2, r2, ip
   12e9e:	adc.w	r3, r3, ip, asr #31
   12ea2:	mov.w	lr, #1
   12ea6:	ldrb.w	r4, [r5], #1
   12eaa:	sub.w	ip, r4, #48	; 0x30
   12eae:	cmp.w	ip, #9
   12eb2:	bls.n	12ec2 <_strtoll_l.isra.0+0xda>
   12eb4:	sub.w	ip, r4, #65	; 0x41
   12eb8:	cmp.w	ip, #25
   12ebc:	bhi.n	12eda <_strtoll_l.isra.0+0xf2>
   12ebe:	sub.w	ip, r4, #55	; 0x37
   12ec2:	cmp	sl, ip
   12ec4:	ble.n	12eec <_strtoll_l.isra.0+0x104>
   12ec6:	cmp.w	lr, #4294967295
   12eca:	beq.n	12ea6 <_strtoll_l.isra.0+0xbe>
   12ecc:	cmp	r1, r3
   12ece:	it	eq
   12ed0:	cmpeq	r0, r2
   12ed2:	bcs.n	12e8a <_strtoll_l.isra.0+0xa2>
   12ed4:	mov.w	lr, #4294967295
   12ed8:	b.n	12ea6 <_strtoll_l.isra.0+0xbe>
   12eda:	sub.w	ip, r4, #97	; 0x61
   12ede:	cmp.w	ip, #25
   12ee2:	bhi.n	12eec <_strtoll_l.isra.0+0x104>
   12ee4:	sub.w	ip, r4, #87	; 0x57
   12ee8:	cmp	sl, ip
   12eea:	bgt.n	12ec6 <_strtoll_l.isra.0+0xde>
   12eec:	cmp.w	lr, #4294967295
   12ef0:	beq.n	12f30 <_strtoll_l.isra.0+0x148>
   12ef2:	ldr	r1, [sp, #0]
   12ef4:	cbz	r1, 12efc <_strtoll_l.isra.0+0x114>
   12ef6:	negs	r2, r2
   12ef8:	sbc.w	r3, r3, r3, lsl #1
   12efc:	ldr	r1, [sp, #4]
   12efe:	cmp	r1, #0
   12f00:	beq.n	12f88 <_strtoll_l.isra.0+0x1a0>
   12f02:	cmp.w	lr, #0
   12f06:	bne.n	12f48 <_strtoll_l.isra.0+0x160>
   12f08:	ldr	r5, [sp, #8]
   12f0a:	mov	r0, r2
   12f0c:	mov	r1, r3
   12f0e:	ldr	r3, [sp, #4]
   12f10:	str	r5, [r3, #0]
   12f12:	add	sp, #20
   12f14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f18:	cmp	fp, ip
   12f1a:	bge.n	12e8c <_strtoll_l.isra.0+0xa4>
   12f1c:	mov	r2, r0
   12f1e:	mov	r3, r1
   12f20:	mov.w	lr, #4294967295
   12f24:	b.n	12ea6 <_strtoll_l.isra.0+0xbe>
   12f26:	movs	r3, #1
   12f28:	adds	r5, r7, #2
   12f2a:	ldrb	r4, [r7, #1]
   12f2c:	str	r3, [sp, #0]
   12f2e:	b.n	12e2c <_strtoll_l.isra.0+0x44>
   12f30:	ldr	r3, [sp, #0]
   12f32:	cbnz	r3, 12f80 <_strtoll_l.isra.0+0x198>
   12f34:	mov.w	r0, #4294967295
   12f38:	mvn.w	r1, #2147483648	; 0x80000000
   12f3c:	ldr	r2, [sp, #12]
   12f3e:	movs	r3, #34	; 0x22
   12f40:	str	r3, [r2, #0]
   12f42:	ldr	r3, [sp, #4]
   12f44:	cbnz	r3, 12f4c <_strtoll_l.isra.0+0x164>
   12f46:	b.n	12f12 <_strtoll_l.isra.0+0x12a>
   12f48:	mov	r0, r2
   12f4a:	mov	r1, r3
   12f4c:	subs	r5, #1
   12f4e:	b.n	12f0e <_strtoll_l.isra.0+0x126>
   12f50:	ldrb	r3, [r5, #0]
   12f52:	and.w	r3, r3, #223	; 0xdf
   12f56:	cmp	r3, #88	; 0x58
   12f58:	beq.n	12f72 <_strtoll_l.isra.0+0x18a>
   12f5a:	movs	r6, #8
   12f5c:	movs	r7, #0
   12f5e:	mov.w	sl, #8
   12f62:	b.n	12e58 <_strtoll_l.isra.0+0x70>
   12f64:	cmp	r4, #48	; 0x30
   12f66:	bne.n	12f8e <_strtoll_l.isra.0+0x1a6>
   12f68:	ldrb	r3, [r5, #0]
   12f6a:	and.w	r3, r3, #223	; 0xdf
   12f6e:	cmp	r3, #88	; 0x58
   12f70:	bne.n	12f8e <_strtoll_l.isra.0+0x1a6>
   12f72:	ldrb	r4, [r5, #1]
   12f74:	movs	r6, #16
   12f76:	movs	r7, #0
   12f78:	adds	r5, #2
   12f7a:	mov.w	sl, #16
   12f7e:	b.n	12e58 <_strtoll_l.isra.0+0x70>
   12f80:	movs	r0, #0
   12f82:	mov.w	r1, #2147483648	; 0x80000000
   12f86:	b.n	12f3c <_strtoll_l.isra.0+0x154>
   12f88:	mov	r0, r2
   12f8a:	mov	r1, r3
   12f8c:	b.n	12f12 <_strtoll_l.isra.0+0x12a>
   12f8e:	movs	r6, #16
   12f90:	movs	r7, #0
   12f92:	b.n	12e58 <_strtoll_l.isra.0+0x70>

00012f94 <_strtoll_r>:
   12f94:	push	{r4, r5, lr}
   12f96:	ldr	r4, [pc, #24]	; (12fb0 <_strtoll_r+0x1c>)
   12f98:	ldr	r5, [pc, #24]	; (12fb4 <_strtoll_r+0x20>)
   12f9a:	ldr	r4, [r4, #0]
   12f9c:	ldr	r4, [r4, #52]	; 0x34
   12f9e:	sub	sp, #12
   12fa0:	cmp	r4, #0
   12fa2:	it	eq
   12fa4:	moveq	r4, r5
   12fa6:	str	r4, [sp, #0]
   12fa8:	bl	12de8 <_strtoll_l.isra.0>
   12fac:	add	sp, #12
   12fae:	pop	{r4, r5, pc}
   12fb0:	.word	0x1fff0d78
   12fb4:	.word	0x1fff0d7c

00012fb8 <_strtoul_l.isra.0>:
   12fb8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fbc:	ldr.w	r9, [sp, #40]	; 0x28
   12fc0:	mov	r6, r1
   12fc2:	mov	r7, r0
   12fc4:	mov	r5, r2
   12fc6:	mov	r8, r3
   12fc8:	mov	fp, r1
   12fca:	b.n	12fce <_strtoul_l.isra.0+0x16>
   12fcc:	mov	fp, r4
   12fce:	mov	r4, fp
   12fd0:	mov	r0, r9
   12fd2:	ldrb.w	sl, [r4], #1
   12fd6:	bl	c3a4 <__locale_ctype_ptr_l>
   12fda:	add	r0, sl
   12fdc:	ldrb	r0, [r0, #1]
   12fde:	and.w	r0, r0, #8
   12fe2:	and.w	ip, r0, #255	; 0xff
   12fe6:	cmp	r0, #0
   12fe8:	bne.n	12fcc <_strtoul_l.isra.0+0x14>
   12fea:	mov	r1, sl
   12fec:	cmp	r1, #45	; 0x2d
   12fee:	beq.n	130b4 <_strtoul_l.isra.0+0xfc>
   12ff0:	cmp	r1, #43	; 0x2b
   12ff2:	itt	eq
   12ff4:	ldrbeq.w	r1, [fp, #1]
   12ff8:	addeq.w	r4, fp, #2
   12ffc:	cmp.w	r8, #0
   13000:	beq.n	1301c <_strtoul_l.isra.0+0x64>
   13002:	cmp.w	r8, #16
   13006:	beq.n	130c2 <_strtoul_l.isra.0+0x10a>
   13008:	mov.w	r3, #4294967295
   1300c:	udiv	r3, r3, r8
   13010:	mul.w	sl, r8, r3
   13014:	mvn.w	sl, sl
   13018:	mov	r9, r8
   1301a:	b.n	1302c <_strtoul_l.isra.0+0x74>
   1301c:	cmp	r1, #48	; 0x30
   1301e:	beq.n	130e4 <_strtoul_l.isra.0+0x12c>
   13020:	mov.w	r8, #10
   13024:	ldr	r3, [pc, #244]	; (1311c <_strtoul_l.isra.0+0x164>)
   13026:	mov	r9, r8
   13028:	mov.w	sl, #5
   1302c:	mov.w	lr, #0
   13030:	mov	r0, lr
   13032:	b.n	13042 <_strtoul_l.isra.0+0x8a>
   13034:	beq.n	13096 <_strtoul_l.isra.0+0xde>
   13036:	mla	r0, r9, r0, r2
   1303a:	mov.w	lr, #1
   1303e:	ldrb.w	r1, [r4], #1
   13042:	sub.w	r2, r1, #48	; 0x30
   13046:	cmp	r2, #9
   13048:	bls.n	13056 <_strtoul_l.isra.0+0x9e>
   1304a:	sub.w	r2, r1, #65	; 0x41
   1304e:	cmp	r2, #25
   13050:	bhi.n	1306a <_strtoul_l.isra.0+0xb2>
   13052:	sub.w	r2, r1, #55	; 0x37
   13056:	cmp	r8, r2
   13058:	ble.n	1307a <_strtoul_l.isra.0+0xc2>
   1305a:	cmp.w	lr, #4294967295
   1305e:	beq.n	1303e <_strtoul_l.isra.0+0x86>
   13060:	cmp	r0, r3
   13062:	bls.n	13034 <_strtoul_l.isra.0+0x7c>
   13064:	mov.w	lr, #4294967295
   13068:	b.n	1303e <_strtoul_l.isra.0+0x86>
   1306a:	sub.w	r2, r1, #97	; 0x61
   1306e:	cmp	r2, #25
   13070:	bhi.n	1307a <_strtoul_l.isra.0+0xc2>
   13072:	sub.w	r2, r1, #87	; 0x57
   13076:	cmp	r8, r2
   13078:	bgt.n	1305a <_strtoul_l.isra.0+0xa2>
   1307a:	cmp.w	lr, #4294967295
   1307e:	beq.n	130a4 <_strtoul_l.isra.0+0xec>
   13080:	cmp.w	ip, #0
   13084:	beq.n	13088 <_strtoul_l.isra.0+0xd0>
   13086:	negs	r0, r0
   13088:	cbz	r5, 130a0 <_strtoul_l.isra.0+0xe8>
   1308a:	cmp.w	lr, #0
   1308e:	bne.n	130ac <_strtoul_l.isra.0+0xf4>
   13090:	str	r6, [r5, #0]
   13092:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13096:	cmp	r2, sl
   13098:	ble.n	13036 <_strtoul_l.isra.0+0x7e>
   1309a:	mov.w	lr, #4294967295
   1309e:	b.n	1303e <_strtoul_l.isra.0+0x86>
   130a0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130a4:	movs	r3, #34	; 0x22
   130a6:	str	r3, [r7, #0]
   130a8:	mov	r0, lr
   130aa:	cbz	r5, 130fe <_strtoul_l.isra.0+0x146>
   130ac:	subs	r6, r4, #1
   130ae:	str	r6, [r5, #0]
   130b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130b4:	add.w	r4, fp, #2
   130b8:	ldrb.w	r1, [fp, #1]
   130bc:	mov.w	ip, #1
   130c0:	b.n	12ffc <_strtoul_l.isra.0+0x44>
   130c2:	cmp	r1, #48	; 0x30
   130c4:	bne.n	13102 <_strtoul_l.isra.0+0x14a>
   130c6:	ldrb	r3, [r4, #0]
   130c8:	and.w	r3, r3, #223	; 0xdf
   130cc:	cmp	r3, #88	; 0x58
   130ce:	bne.n	1310e <_strtoul_l.isra.0+0x156>
   130d0:	mov.w	r9, #16
   130d4:	ldrb	r1, [r4, #1]
   130d6:	mov	r8, r9
   130d8:	mov.w	sl, #15
   130dc:	adds	r4, #2
   130de:	mvn.w	r3, #4026531840	; 0xf0000000
   130e2:	b.n	1302c <_strtoul_l.isra.0+0x74>
   130e4:	ldrb	r3, [r4, #0]
   130e6:	and.w	r3, r3, #223	; 0xdf
   130ea:	cmp	r3, #88	; 0x58
   130ec:	beq.n	130d0 <_strtoul_l.isra.0+0x118>
   130ee:	mov.w	r8, #8
   130f2:	mov	r9, r8
   130f4:	mov.w	sl, #7
   130f8:	mvn.w	r3, #3758096384	; 0xe0000000
   130fc:	b.n	1302c <_strtoul_l.isra.0+0x74>
   130fe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13102:	mov.w	sl, #15
   13106:	mvn.w	r3, #4026531840	; 0xf0000000
   1310a:	mov	r9, r8
   1310c:	b.n	1302c <_strtoul_l.isra.0+0x74>
   1310e:	mov	r9, r8
   13110:	mov.w	sl, #15
   13114:	mvn.w	r3, #4026531840	; 0xf0000000
   13118:	b.n	1302c <_strtoul_l.isra.0+0x74>
   1311a:	nop
   1311c:	.word	0x19999999

00013120 <_strtoul_r>:
   13120:	push	{r4, r5, lr}
   13122:	ldr	r4, [pc, #24]	; (1313c <_strtoul_r+0x1c>)
   13124:	ldr	r5, [pc, #24]	; (13140 <_strtoul_r+0x20>)
   13126:	ldr	r4, [r4, #0]
   13128:	ldr	r4, [r4, #52]	; 0x34
   1312a:	sub	sp, #12
   1312c:	cmp	r4, #0
   1312e:	it	eq
   13130:	moveq	r4, r5
   13132:	str	r4, [sp, #0]
   13134:	bl	12fb8 <_strtoul_l.isra.0>
   13138:	add	sp, #12
   1313a:	pop	{r4, r5, pc}
   1313c:	.word	0x1fff0d78
   13140:	.word	0x1fff0d7c

00013144 <_strtoull_l.isra.0>:
   13144:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13148:	sub	sp, #20
   1314a:	mov	fp, r1
   1314c:	str	r0, [sp, #8]
   1314e:	mov	r7, r2
   13150:	mov	r6, r3
   13152:	mov	r8, r1
   13154:	ldr	r4, [sp, #56]	; 0x38
   13156:	b.n	1315a <_strtoull_l.isra.0+0x16>
   13158:	mov	r8, r5
   1315a:	mov	r5, r8
   1315c:	mov	r0, r4
   1315e:	ldrb.w	r9, [r5], #1
   13162:	bl	c3a4 <__locale_ctype_ptr_l>
   13166:	add	r0, r9
   13168:	ldrb	r3, [r0, #1]
   1316a:	and.w	r3, r3, #8
   1316e:	and.w	r2, r3, #255	; 0xff
   13172:	cmp	r3, #0
   13174:	bne.n	13158 <_strtoull_l.isra.0+0x14>
   13176:	mov	r4, r9
   13178:	cmp	r4, #45	; 0x2d
   1317a:	beq.w	13296 <_strtoull_l.isra.0+0x152>
   1317e:	cmp	r4, #43	; 0x2b
   13180:	it	eq
   13182:	ldrbeq.w	r4, [r8, #1]
   13186:	str	r2, [sp, #4]
   13188:	it	eq
   1318a:	addeq.w	r5, r8, #2
   1318e:	cbz	r6, 131c8 <_strtoull_l.isra.0+0x84>
   13190:	cmp	r6, #16
   13192:	beq.w	132a4 <_strtoull_l.isra.0+0x160>
   13196:	mov.w	r9, r6, asr #31
   1319a:	mov	r2, r6
   1319c:	mov	r3, r9
   1319e:	mov.w	r0, #4294967295
   131a2:	mov.w	r1, #4294967295
   131a6:	bl	bf74 <__aeabi_uldivmod>
   131aa:	mov	r2, r6
   131ac:	str	r0, [sp, #12]
   131ae:	mov	sl, r1
   131b0:	mov	r3, r9
   131b2:	mov.w	r0, #4294967295
   131b6:	mov.w	r1, #4294967295
   131ba:	bl	bf74 <__aeabi_uldivmod>
   131be:	mov	r8, r6
   131c0:	mov	lr, r2
   131c2:	ldr	r2, [sp, #12]
   131c4:	mov	r3, sl
   131c6:	b.n	131e2 <_strtoull_l.isra.0+0x9e>
   131c8:	cmp	r4, #48	; 0x30
   131ca:	beq.w	132d0 <_strtoull_l.isra.0+0x18c>
   131ce:	ldr	r3, [pc, #348]	; (1332c <_strtoull_l.isra.0+0x1e8>)
   131d0:	mov.w	lr, #5
   131d4:	mov.w	r2, #2576980377	; 0x99999999
   131d8:	mov.w	r8, #10
   131dc:	mov.w	r9, #0
   131e0:	movs	r6, #10
   131e2:	mov.w	ip, #0
   131e6:	movs	r0, #0
   131e8:	movs	r1, #0
   131ea:	b.n	13212 <_strtoull_l.isra.0+0xce>
   131ec:	cmp	r1, r3
   131ee:	it	eq
   131f0:	cmpeq	r0, r2
   131f2:	beq.n	13276 <_strtoull_l.isra.0+0x132>
   131f4:	mul.w	r4, r0, r9
   131f8:	mla	r4, r8, r1, r4
   131fc:	umull	r0, r1, r0, r8
   13200:	add	r1, r4
   13202:	adds.w	r0, r0, sl
   13206:	adc.w	r1, r1, sl, asr #31
   1320a:	mov.w	ip, #1
   1320e:	ldrb.w	r4, [r5], #1
   13212:	sub.w	sl, r4, #48	; 0x30
   13216:	cmp.w	sl, #9
   1321a:	bls.n	1322a <_strtoull_l.isra.0+0xe6>
   1321c:	sub.w	sl, r4, #65	; 0x41
   13220:	cmp.w	sl, #25
   13224:	bhi.n	13242 <_strtoull_l.isra.0+0xfe>
   13226:	sub.w	sl, r4, #55	; 0x37
   1322a:	cmp	r6, sl
   1322c:	ble.n	13254 <_strtoull_l.isra.0+0x110>
   1322e:	cmp.w	ip, #4294967295
   13232:	beq.n	1320e <_strtoull_l.isra.0+0xca>
   13234:	cmp	r3, r1
   13236:	it	eq
   13238:	cmpeq	r2, r0
   1323a:	bcs.n	131ec <_strtoull_l.isra.0+0xa8>
   1323c:	mov.w	ip, #4294967295
   13240:	b.n	1320e <_strtoull_l.isra.0+0xca>
   13242:	sub.w	sl, r4, #97	; 0x61
   13246:	cmp.w	sl, #25
   1324a:	bhi.n	13254 <_strtoull_l.isra.0+0x110>
   1324c:	sub.w	sl, r4, #87	; 0x57
   13250:	cmp	r6, sl
   13252:	bgt.n	1322e <_strtoull_l.isra.0+0xea>
   13254:	cmp.w	ip, #4294967295
   13258:	beq.n	13280 <_strtoull_l.isra.0+0x13c>
   1325a:	ldr	r3, [sp, #4]
   1325c:	cbz	r3, 13264 <_strtoull_l.isra.0+0x120>
   1325e:	negs	r0, r0
   13260:	sbc.w	r1, r1, r1, lsl #1
   13264:	cbz	r7, 13270 <_strtoull_l.isra.0+0x12c>
   13266:	cmp.w	ip, #0
   1326a:	bne.n	13292 <_strtoull_l.isra.0+0x14e>
   1326c:	mov	r5, fp
   1326e:	str	r5, [r7, #0]
   13270:	add	sp, #20
   13272:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13276:	cmp	sl, lr
   13278:	ble.n	131f4 <_strtoull_l.isra.0+0xb0>
   1327a:	mov.w	ip, #4294967295
   1327e:	b.n	1320e <_strtoull_l.isra.0+0xca>
   13280:	ldr	r2, [sp, #8]
   13282:	movs	r3, #34	; 0x22
   13284:	str	r3, [r2, #0]
   13286:	mov.w	r0, #4294967295
   1328a:	mov.w	r1, #4294967295
   1328e:	cmp	r7, #0
   13290:	beq.n	13270 <_strtoull_l.isra.0+0x12c>
   13292:	subs	r5, #1
   13294:	b.n	1326e <_strtoull_l.isra.0+0x12a>
   13296:	movs	r3, #1
   13298:	add.w	r5, r8, #2
   1329c:	ldrb.w	r4, [r8, #1]
   132a0:	str	r3, [sp, #4]
   132a2:	b.n	1318e <_strtoull_l.isra.0+0x4a>
   132a4:	cmp	r4, #48	; 0x30
   132a6:	bne.n	132f2 <_strtoull_l.isra.0+0x1ae>
   132a8:	ldrb	r3, [r5, #0]
   132aa:	and.w	r3, r3, #223	; 0xdf
   132ae:	cmp	r3, #88	; 0x58
   132b0:	bne.n	13308 <_strtoull_l.isra.0+0x1c4>
   132b2:	mov.w	r3, #4294967295
   132b6:	ldrb	r4, [r5, #1]
   132b8:	str	r3, [sp, #12]
   132ba:	mov.w	lr, #15
   132be:	adds	r5, #2
   132c0:	mvn.w	sl, #4026531840	; 0xf0000000
   132c4:	mov.w	r8, #16
   132c8:	mov.w	r9, #0
   132cc:	movs	r6, #16
   132ce:	b.n	131c2 <_strtoull_l.isra.0+0x7e>
   132d0:	ldrb	r3, [r5, #0]
   132d2:	and.w	r3, r3, #223	; 0xdf
   132d6:	cmp	r3, #88	; 0x58
   132d8:	beq.n	132b2 <_strtoull_l.isra.0+0x16e>
   132da:	mov.w	lr, #7
   132de:	mov.w	r2, #4294967295
   132e2:	mvn.w	r3, #3758096384	; 0xe0000000
   132e6:	mov.w	r8, #8
   132ea:	mov.w	r9, #0
   132ee:	movs	r6, #8
   132f0:	b.n	131e2 <_strtoull_l.isra.0+0x9e>
   132f2:	mov.w	lr, #15
   132f6:	mov.w	r2, #4294967295
   132fa:	mvn.w	r3, #4026531840	; 0xf0000000
   132fe:	mov.w	r8, #16
   13302:	mov.w	r9, #0
   13306:	b.n	131e2 <_strtoull_l.isra.0+0x9e>
   13308:	mov.w	r8, #16
   1330c:	mov.w	r9, #0
   13310:	mov	r2, r8
   13312:	mov	r3, r9
   13314:	mov.w	r0, #4294967295
   13318:	mov.w	r1, #4294967295
   1331c:	bl	bf74 <__aeabi_uldivmod>
   13320:	mvn.w	r3, #4026531840	; 0xf0000000
   13324:	mov	lr, r2
   13326:	mov.w	r2, #4294967295
   1332a:	b.n	131e2 <_strtoull_l.isra.0+0x9e>
   1332c:	.word	0x19999999

00013330 <_strtoull_r>:
   13330:	push	{r4, r5, lr}
   13332:	ldr	r4, [pc, #24]	; (1334c <_strtoull_r+0x1c>)
   13334:	ldr	r5, [pc, #24]	; (13350 <_strtoull_r+0x20>)
   13336:	ldr	r4, [r4, #0]
   13338:	ldr	r4, [r4, #52]	; 0x34
   1333a:	sub	sp, #12
   1333c:	cmp	r4, #0
   1333e:	it	eq
   13340:	moveq	r4, r5
   13342:	str	r4, [sp, #0]
   13344:	bl	13144 <_strtoull_l.isra.0>
   13348:	add	sp, #12
   1334a:	pop	{r4, r5, pc}
   1334c:	.word	0x1fff0d78
   13350:	.word	0x1fff0d7c

00013354 <__ssprint_r>:
   13354:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13358:	ldr	r3, [r2, #8]
   1335a:	sub	sp, #12
   1335c:	mov	r8, r2
   1335e:	cmp	r3, #0
   13360:	beq.n	13448 <__ssprint_r+0xf4>
   13362:	mov	fp, r0
   13364:	mov.w	r9, #0
   13368:	ldr	r6, [r2, #0]
   1336a:	ldr	r0, [r1, #0]
   1336c:	ldr	r3, [r1, #8]
   1336e:	mov	r5, r1
   13370:	mov	r4, r9
   13372:	cmp	r4, #0
   13374:	beq.n	13402 <__ssprint_r+0xae>
   13376:	cmp	r4, r3
   13378:	mov	r7, r3
   1337a:	mov	sl, r3
   1337c:	bcc.n	1340c <__ssprint_r+0xb8>
   1337e:	ldrh	r3, [r5, #12]
   13380:	tst.w	r3, #1152	; 0x480
   13384:	beq.n	133e2 <__ssprint_r+0x8e>
   13386:	ldr	r7, [r5, #20]
   13388:	ldr	r1, [r5, #16]
   1338a:	add.w	r7, r7, r7, lsl #1
   1338e:	rsb	sl, r1, r0
   13392:	add.w	r7, r7, r7, lsr #31
   13396:	adds	r0, r4, #1
   13398:	asrs	r7, r7, #1
   1339a:	add	r0, sl
   1339c:	cmp	r0, r7
   1339e:	mov	r2, r7
   133a0:	itt	hi
   133a2:	movhi	r7, r0
   133a4:	movhi	r2, r7
   133a6:	lsls	r3, r3, #21
   133a8:	bpl.n	13412 <__ssprint_r+0xbe>
   133aa:	mov	r1, r2
   133ac:	mov	r0, fp
   133ae:	bl	c3e0 <_malloc_r>
   133b2:	cmp	r0, #0
   133b4:	beq.n	13426 <__ssprint_r+0xd2>
   133b6:	mov	r2, sl
   133b8:	ldr	r1, [r5, #16]
   133ba:	str	r0, [sp, #4]
   133bc:	bl	9324 <memcpy>
   133c0:	ldrh	r2, [r5, #12]
   133c2:	ldr	r3, [sp, #4]
   133c4:	bic.w	r2, r2, #1152	; 0x480
   133c8:	orr.w	r2, r2, #128	; 0x80
   133cc:	strh	r2, [r5, #12]
   133ce:	rsb	r2, sl, r7
   133d2:	add.w	r0, r3, sl
   133d6:	str	r7, [r5, #20]
   133d8:	str	r3, [r5, #16]
   133da:	str	r0, [r5, #0]
   133dc:	str	r2, [r5, #8]
   133de:	mov	r7, r4
   133e0:	mov	sl, r4
   133e2:	mov	r2, sl
   133e4:	mov	r1, r9
   133e6:	bl	c9e0 <memmove>
   133ea:	ldr.w	r2, [r8, #8]
   133ee:	ldr	r3, [r5, #8]
   133f0:	ldr	r0, [r5, #0]
   133f2:	subs	r3, r3, r7
   133f4:	add	r0, sl
   133f6:	subs	r4, r2, r4
   133f8:	str	r3, [r5, #8]
   133fa:	str	r0, [r5, #0]
   133fc:	str.w	r4, [r8, #8]
   13400:	cbz	r4, 13448 <__ssprint_r+0xf4>
   13402:	ldr.w	r9, [r6]
   13406:	ldr	r4, [r6, #4]
   13408:	adds	r6, #8
   1340a:	b.n	13372 <__ssprint_r+0x1e>
   1340c:	mov	r7, r4
   1340e:	mov	sl, r4
   13410:	b.n	133e2 <__ssprint_r+0x8e>
   13412:	mov	r0, fp
   13414:	bl	cb4c <_realloc_r>
   13418:	mov	r3, r0
   1341a:	cmp	r0, #0
   1341c:	bne.n	133ce <__ssprint_r+0x7a>
   1341e:	ldr	r1, [r5, #16]
   13420:	mov	r0, fp
   13422:	bl	11a10 <_free_r>
   13426:	movs	r3, #12
   13428:	str.w	r3, [fp]
   1342c:	ldrh	r3, [r5, #12]
   1342e:	movs	r2, #0
   13430:	orr.w	r3, r3, #64	; 0x40
   13434:	mov.w	r0, #4294967295
   13438:	strh	r3, [r5, #12]
   1343a:	str.w	r2, [r8, #8]
   1343e:	str.w	r2, [r8, #4]
   13442:	add	sp, #12
   13444:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13448:	movs	r0, #0
   1344a:	str.w	r0, [r8, #4]
   1344e:	add	sp, #12
   13450:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013454 <_sungetc_r>:
   13454:	adds	r3, r1, #1
   13456:	push	{r4, r5, r6, lr}
   13458:	beq.n	13492 <_sungetc_r+0x3e>
   1345a:	ldrh	r3, [r2, #12]
   1345c:	ldr	r4, [r2, #48]	; 0x30
   1345e:	bic.w	r3, r3, #32
   13462:	strh	r3, [r2, #12]
   13464:	uxtb	r5, r1
   13466:	cbz	r4, 13498 <_sungetc_r+0x44>
   13468:	mov	r4, r2
   1346a:	ldr	r2, [r2, #4]
   1346c:	ldr	r3, [r4, #52]	; 0x34
   1346e:	cmp	r2, r3
   13470:	mov	r6, r1
   13472:	bge.n	13488 <_sungetc_r+0x34>
   13474:	ldr	r3, [r4, #0]
   13476:	subs	r2, r3, #1
   13478:	str	r2, [r4, #0]
   1347a:	strb.w	r6, [r3, #-1]
   1347e:	ldr	r3, [r4, #4]
   13480:	adds	r3, #1
   13482:	str	r3, [r4, #4]
   13484:	mov	r0, r5
   13486:	pop	{r4, r5, r6, pc}
   13488:	mov	r1, r4
   1348a:	bl	13598 <__submore>
   1348e:	cmp	r0, #0
   13490:	beq.n	13474 <_sungetc_r+0x20>
   13492:	mov.w	r5, #4294967295
   13496:	b.n	13484 <_sungetc_r+0x30>
   13498:	ldr	r0, [r2, #16]
   1349a:	ldr	r3, [r2, #0]
   1349c:	cbz	r0, 134aa <_sungetc_r+0x56>
   1349e:	cmp	r0, r3
   134a0:	bcs.n	134aa <_sungetc_r+0x56>
   134a2:	ldrb.w	r0, [r3, #-1]
   134a6:	cmp	r5, r0
   134a8:	beq.n	134ca <_sungetc_r+0x76>
   134aa:	str	r3, [r2, #56]	; 0x38
   134ac:	mov	r3, r2
   134ae:	ldr	r6, [r2, #4]
   134b0:	str	r6, [r2, #60]	; 0x3c
   134b2:	add.w	r4, r2, #64	; 0x40
   134b6:	movs	r0, #3
   134b8:	str	r0, [r2, #52]	; 0x34
   134ba:	str	r4, [r2, #48]	; 0x30
   134bc:	strb.w	r1, [r3, #66]!
   134c0:	movs	r1, #1
   134c2:	str	r3, [r2, #0]
   134c4:	str	r1, [r2, #4]
   134c6:	mov	r0, r5
   134c8:	pop	{r4, r5, r6, pc}
   134ca:	ldr	r1, [r2, #4]
   134cc:	subs	r3, #1
   134ce:	adds	r1, #1
   134d0:	str	r3, [r2, #0]
   134d2:	str	r1, [r2, #4]
   134d4:	b.n	13484 <_sungetc_r+0x30>
   134d6:	nop

000134d8 <__ssrefill_r>:
   134d8:	push	{r4, lr}
   134da:	mov	r4, r1
   134dc:	ldr	r1, [r1, #48]	; 0x30
   134de:	cbz	r1, 134fc <__ssrefill_r+0x24>
   134e0:	add.w	r3, r4, #64	; 0x40
   134e4:	cmp	r1, r3
   134e6:	beq.n	134ec <__ssrefill_r+0x14>
   134e8:	bl	11a10 <_free_r>
   134ec:	ldr	r3, [r4, #60]	; 0x3c
   134ee:	str	r3, [r4, #4]
   134f0:	movs	r0, #0
   134f2:	str	r0, [r4, #48]	; 0x30
   134f4:	cbz	r3, 134fc <__ssrefill_r+0x24>
   134f6:	ldr	r3, [r4, #56]	; 0x38
   134f8:	str	r3, [r4, #0]
   134fa:	pop	{r4, pc}
   134fc:	ldrh	r3, [r4, #12]
   134fe:	ldr	r2, [r4, #16]
   13500:	str	r2, [r4, #0]
   13502:	orr.w	r3, r3, #32
   13506:	movs	r2, #0
   13508:	strh	r3, [r4, #12]
   1350a:	str	r2, [r4, #4]
   1350c:	mov.w	r0, #4294967295
   13510:	pop	{r4, pc}
   13512:	nop

00013514 <_sfread_r>:
   13514:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13518:	sub	sp, #12
   1351a:	mul.w	r9, r2, r3
   1351e:	str	r2, [sp, #4]
   13520:	mov	sl, r3
   13522:	ldr	r4, [sp, #48]	; 0x30
   13524:	cmp.w	r9, #0
   13528:	beq.n	1357e <_sfread_r+0x6a>
   1352a:	mov	r7, r0
   1352c:	mov	r6, r1
   1352e:	mov	r5, r9
   13530:	mov.w	r8, #0
   13534:	b.n	13556 <_sfread_r+0x42>
   13536:	ldr	r1, [r4, #0]
   13538:	bl	9324 <memcpy>
   1353c:	ldr	r2, [r4, #0]
   1353e:	str.w	r8, [r4, #4]
   13542:	add	r2, fp
   13544:	str	r2, [r4, #0]
   13546:	mov	r1, r4
   13548:	mov	r0, r7
   1354a:	add	r6, fp
   1354c:	rsb	r5, fp, r5
   13550:	bl	134d8 <__ssrefill_r>
   13554:	cbnz	r0, 13586 <_sfread_r+0x72>
   13556:	ldr.w	fp, [r4, #4]
   1355a:	cmp	r5, fp
   1355c:	mov	r0, r6
   1355e:	mov	r2, fp
   13560:	bhi.n	13536 <_sfread_r+0x22>
   13562:	mov	r2, r5
   13564:	ldr	r1, [r4, #0]
   13566:	bl	9324 <memcpy>
   1356a:	ldr	r2, [r4, #4]
   1356c:	ldr	r3, [r4, #0]
   1356e:	subs	r2, r2, r5
   13570:	add	r3, r5
   13572:	mov	r0, sl
   13574:	str	r2, [r4, #4]
   13576:	str	r3, [r4, #0]
   13578:	add	sp, #12
   1357a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1357e:	mov	r0, r9
   13580:	add	sp, #12
   13582:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13586:	ldr	r3, [sp, #4]
   13588:	rsb	r9, r5, r9
   1358c:	udiv	r0, r9, r3
   13590:	add	sp, #12
   13592:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13596:	nop

00013598 <__submore>:
   13598:	add.w	r3, r1, #64	; 0x40
   1359c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   135a0:	mov	r4, r1
   135a2:	ldr	r1, [r1, #48]	; 0x30
   135a4:	cmp	r1, r3
   135a6:	beq.n	135d2 <__submore+0x3a>
   135a8:	ldr	r6, [r4, #52]	; 0x34
   135aa:	lsls	r7, r6, #1
   135ac:	mov	r2, r7
   135ae:	bl	cb4c <_realloc_r>
   135b2:	mov	r5, r0
   135b4:	cbz	r0, 13608 <__submore+0x70>
   135b6:	add.w	r8, r0, r6
   135ba:	mov	r2, r6
   135bc:	mov	r0, r8
   135be:	mov	r1, r5
   135c0:	bl	9324 <memcpy>
   135c4:	str.w	r8, [r4]
   135c8:	str	r5, [r4, #48]	; 0x30
   135ca:	str	r7, [r4, #52]	; 0x34
   135cc:	movs	r0, #0
   135ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   135d2:	mov.w	r1, #1024	; 0x400
   135d6:	bl	c3e0 <_malloc_r>
   135da:	cbz	r0, 13608 <__submore+0x70>
   135dc:	ldrb.w	r3, [r4, #66]	; 0x42
   135e0:	str	r0, [r4, #48]	; 0x30
   135e2:	mov.w	r2, #1024	; 0x400
   135e6:	str	r2, [r4, #52]	; 0x34
   135e8:	strb.w	r3, [r0, #1023]	; 0x3ff
   135ec:	ldrb.w	r3, [r4, #65]	; 0x41
   135f0:	strb.w	r3, [r0, #1022]	; 0x3fe
   135f4:	ldrb.w	r3, [r4, #64]	; 0x40
   135f8:	strb.w	r3, [r0, #1021]	; 0x3fd
   135fc:	addw	r0, r0, #1021	; 0x3fd
   13600:	str	r0, [r4, #0]
   13602:	movs	r0, #0
   13604:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13608:	mov.w	r0, #4294967295
   1360c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013610 <_vasnprintf_r>:
   13610:	push	{r4, r5, r6, lr}
   13612:	mov	r5, r2
   13614:	sub	sp, #104	; 0x68
   13616:	ldr	r4, [r2, #0]
   13618:	cbz	r1, 1361e <_vasnprintf_r+0xe>
   1361a:	cmp	r4, #0
   1361c:	bne.n	13654 <_vasnprintf_r+0x44>
   1361e:	movs	r4, #0
   13620:	mov.w	r2, #648	; 0x288
   13624:	strh.w	r2, [sp, #12]
   13628:	str	r4, [sp, #0]
   1362a:	str	r4, [sp, #16]
   1362c:	mov	r2, r3
   1362e:	movw	r6, #65535	; 0xffff
   13632:	ldr	r3, [sp, #120]	; 0x78
   13634:	str	r4, [sp, #8]
   13636:	mov	r1, sp
   13638:	str	r4, [sp, #20]
   1363a:	strh.w	r6, [sp, #14]
   1363e:	bl	e310 <_svfprintf_r>
   13642:	cmp	r0, #0
   13644:	blt.n	1366a <_vasnprintf_r+0x5a>
   13646:	ldr	r3, [sp, #0]
   13648:	str	r0, [r5, #0]
   1364a:	movs	r2, #0
   1364c:	strb	r2, [r3, #0]
   1364e:	ldr	r0, [sp, #16]
   13650:	add	sp, #104	; 0x68
   13652:	pop	{r4, r5, r6, pc}
   13654:	mov.w	r2, #1544	; 0x608
   13658:	str	r1, [sp, #0]
   1365a:	str	r1, [sp, #16]
   1365c:	strh.w	r2, [sp, #12]
   13660:	bge.n	1362c <_vasnprintf_r+0x1c>
   13662:	movs	r3, #139	; 0x8b
   13664:	str	r3, [r0, #0]
   13666:	movs	r0, #0
   13668:	b.n	13650 <_vasnprintf_r+0x40>
   1366a:	movs	r0, #0
   1366c:	b.n	13650 <_vasnprintf_r+0x40>
   1366e:	nop

00013670 <_calloc_r>:
   13670:	push	{r4, lr}
   13672:	mul.w	r1, r2, r1
   13676:	bl	c3e0 <_malloc_r>
   1367a:	mov	r4, r0
   1367c:	cbz	r0, 136b6 <_calloc_r+0x46>
   1367e:	ldr.w	r2, [r0, #-4]
   13682:	bic.w	r2, r2, #3
   13686:	subs	r2, #4
   13688:	cmp	r2, #36	; 0x24
   1368a:	bhi.n	136be <_calloc_r+0x4e>
   1368c:	cmp	r2, #19
   1368e:	bls.n	136ba <_calloc_r+0x4a>
   13690:	movs	r3, #0
   13692:	cmp	r2, #27
   13694:	str	r3, [r0, #0]
   13696:	str	r3, [r0, #4]
   13698:	bls.n	136c8 <_calloc_r+0x58>
   1369a:	cmp	r2, #36	; 0x24
   1369c:	str	r3, [r0, #8]
   1369e:	str	r3, [r0, #12]
   136a0:	iteee	ne
   136a2:	addne.w	r2, r0, #16
   136a6:	streq	r3, [r0, #16]
   136a8:	streq	r3, [r0, #20]
   136aa:	addeq.w	r2, r0, #24
   136ae:	movs	r3, #0
   136b0:	str	r3, [r2, #0]
   136b2:	str	r3, [r2, #4]
   136b4:	str	r3, [r2, #8]
   136b6:	mov	r0, r4
   136b8:	pop	{r4, pc}
   136ba:	mov	r2, r0
   136bc:	b.n	136ae <_calloc_r+0x3e>
   136be:	movs	r1, #0
   136c0:	bl	caa8 <memset>
   136c4:	mov	r0, r4
   136c6:	pop	{r4, pc}
   136c8:	add.w	r2, r0, #8
   136cc:	b.n	136ae <_calloc_r+0x3e>
   136ce:	nop

000136d0 <vtable for FsFile>:
	...
   136d8:	................
   136e8:	....I.......

000136f4 <vtable for Logger<long, 300, 128, 64>>:
	...
   136fc:	............%s_%
   1370c:	04d%02d%02d_%02d
   1371c:	%02d%02d.bin....
   1372c:	Menu....? Help..
   1373c:	a Start Acquisit
   1374c:	ion.b Start Logg
   1375c:	er..s Stop Logge
   1376c:	r...e End Aquisi
   1377c:	tion....h End Aq
   1378c:	uisition and Hib
   1379c:	ernate..x Exit P
   137ac:	rogram..?xabseh.
   137bc:	%c %2d on_time..
   137cc:	....%c %2d off_t
   137dc:	ime.....%c %2d f
   137ec:	irst_hour...%c %
   137fc:	2d second_hour..
   1380c:	....%c %2d third
   1381c:	_hour...%c %2d l
   1382c:	ast_hour....%c %
   1383c:	s name......%04d
   1384c:	/%02d/%02d..%c %
   1385c:	s date......%02d
   1386c:	:%02d:%02d..%c %
   1387c:	s time......%c %
   1388c:	s mac address...
   1389c:	exter 'a' to pri
   138ac:	nt this.exter '?
   138bc:	c' to read value
   138cc:	 c=(g,p,i,u,v,f,
   138dc:	n,d,t,m)....  e.
   138ec:	g.: ?i will prin
   138fc:	t first hour....
   1390c:	exter '!cval' to
   1391c:	 read value c=(g
   1392c:	,p,i,u,v,f,n,d,t
   1393c:	) and val is new
   1394c:	 value..  e.g.: 
   1395c:	!i10 will set fi
   1396c:	rst hour to 10..
   1397c:	exter 'xval' to 
   1398c:	exit menu (x is 
   1399c:	delay in minutes
   139ac:	, -1 means immed
   139bc:	iate)...  e.g.: 
   139cc:	x10 will exit an
   139dc:	d hibernate for 
   139ec:	10 minutes..    
   139fc:	    x-1 with exi
   13a0c:	t and start imme
   13a1c:	diately.?!xa....
   13a2c:	gpiuvfndtlm.%02d
   13a3c:	....%s......%04d
   13a4c:	....gpiuvfndt...
   13a5c:	SdError: 0X.,0X.
   13a6c:	Check SD format.
   13a7c:	....error: .file
   13a8c:	.preAllocate fai
   13a9c:	led.write failed
   13aac:	....%4d/%02d/%02
   13abc:	d %02d:%02d %d..
   13acc:	....lux.txt.logT
   13adc:	ext file.write f
   13aec:	ailed...logText 
   13afc:	file.open failed
   13b0c:	....Config.txt..
   13b1c:	read failed.%d..
   13b2c:	%2d.....newCard 
   13b3c:	X...cardBegin: %
   13b4c:	x %d....begin fa
   13b5c:	iled....

00013b64 <TwoWire::i2c0_hardware>:
   13b64:	4..@@.....".0...
   13b74:	....!./.........

00013b84 <TwoWire::i2c1_hardware>:
   13b84:	4..@....&:......
   13b94:	..%;............

00013ba4 <TwoWire::i2c2_hardware>:
   13ba4:	(..@@...........
   13bb4:	............J...

00013bc4 <vtable for TwoWire>:
	...
   13bcc:	I-...-.......-..
   13bdc:	.,...,...,..EXFA
   13bec:	T...

00013bf0 <vtable for SdSpiCard>:
	...
   13bf8:	.l...l...p..Is..
   13c08:	=y...o...q..et..
   13c18:	.{...l...l...l..
   13c28:	.v...w...o......
   13c38:	.l...m...o...m..

00013c48 <vtable for SdioCard>:
	...
   13c50:	E}..I}......a...
   13c60:	y}..]...........
   13c70:	.....|...|......
   13c80:	.|...|...}...~..
   13c90:	Y}..q...)}..Y...
   13ca0:	 IRQSTAT ...

00013cac <digital_pin_to_info_PGM>:
   13cac:	@..C@..@D..CD..@
   13cbc:	...C...@0..C0..@
   13ccc:	4..C4..@...C...@
   13cdc:	...C...@...C...@
   13cec:	...C...@...C...@
   13cfc:	...C...@...C...@
   13d0c:	...C...@...C...@
   13d1c:	...C...@...C...@
   13d2c:	...C...@...C...@
   13d3c:	...C...@...C...@
   13d4c:	...C...@...C...@
   13d5c:	...C...@...C...@
   13d6c:	h .Ch..@...C...@
   13d7c:	8..C8..@<..C<..@
   13d8c:	@..C@..@H..CH..@
   13d9c:	L..CL..@(..C(..@
   13dac:	,..C,..@` .C`..@
   13dbc:	d .Cd..@ ..C ..@
   13dcc:	$..C$..@(..C(..@
   13ddc:	,..C,..@D..CD..@
   13dec:	p..Cp..@t..Ct..@
   13dfc:	h..Ch..@P..CP..@
   13e0c:	X..CX..@\..C\..@
   13e1c:	T..CT..@ ..C ..@
   13e2c:	$..C$..@...C...@
   13e3c:	...C...@8..C8..@
   13e4c:	4..C4..@0..C0..@
   13e5c:	<..C<..@,..C,..@
   13e6c:	( .C(..@, .C,..@
   13e7c:	. .C...@. .C...@
   13e8c:	. .C...@. .C...@
   13e9c:	. .C...@. .C...@

00013eac <vtable for usb_serial_class>:
	...
   13eb4:	........}...y...
   13ec4:	u...q...m...i...
   13ed4:	....

00013ed8 <usb_endpoint_config_table>:
   13ed8:	....

00013edc <usb_descriptor_list>:
   13edc:	................
   13eec:	....C.......4...
   13efc:	................
   13f0c:	................
   13f1c:	8...............
   13f2c:	....

00013f30 <_global_impure_ptr>:
   13f30:	P...C...POSIX...
   13f40:	....

00013f44 <fpi.6173>:
   13f44:	5...............
   13f54:	....nf..inity...
   13f64:	an..

00013f68 <fpinan.6209>:
   13f68:	4...............
   13f78:	........

00013f80 <tinytens>:
   13f80:	.......<3...#.I9
   13f90:	=..D...2......[%
   13fa0:	Co.d(.h.

00013fa8 <zeroes.7258>:
   13fa8:	0000000000000000
   13fb8:	INF.inf.NAN.nan.
   13fc8:	0123456789ABCDEF
   13fd8:	....0123456789ab
   13fe8:	cdef....(null)..
   13ff8:	0...

00013ffc <blanks.7257>:
   13ffc:	                

0001400c <basefix.7328>:
   1400c:	................
   1401c:	................
   1402c:	....e%ld....

00014038 <_ctype_>:
   14038:	.         ((((( 
   14048:	                
   14058:	 ...............
   14068:	................
   14078:	..AAAAAA........
   14088:	................
   14098:	..BBBBBB........
   140a8:	................
   140b8:	 ...............
	...
   14138:	....Infinity....
   14148:	NaN.

0001414c <__hexdig>:
	...
   1417c:	................
   1418c:	................
	...
   141ac:	................
	...
   1424c:	....

00014250 <__mprec_tens>:
   14250:	.......?......$@
   14260:	......Y@.....@.@
   14270:	.......@.....j.@
   14280:	.......A......cA
   14290:	.......A....e..A
   142a0:	... _..B....vH7B
   142b0:	......mB..@..0.B
   142c0:	.......B..4&.k.C
   142d0:	...7y.AC....W4vC
   142e0:	..Ngm..C.=.`.X.C
   142f0:	@..x...DP.....KD
   14300:	..M....D.J...-.D
   14310:	...yCx.D

00014318 <__mprec_bigtens>:
   14318:	...7y.AC.n.....F
   14328:	..?..O8M2.0.Hw.Z
   14338:	<.s..O.u

00014340 <p05.6087>:
   14340:	........}...

0001434c <_init>:
   1434c:	push	{r3, r4, r5, r6, r7, lr}
   1434e:	nop
   14350:	pop	{r3, r4, r5, r6, r7}
   14352:	pop	{r3}
   14354:	mov	lr, r3
   14356:	bx	lr

00014358 <__init_array_start>:
   14358:	.word	0x000109cd

0001435c <__frame_dummy_init_array_entry>:
   1435c:	5...U)..

Disassembly of section .fini:

00014364 <_fini>:
   14364:	push	{r3, r4, r5, r6, r7, lr}
   14366:	nop
